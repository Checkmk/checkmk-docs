include::global_attr.adoc[]
= Anmeldung mit SAML
:revdate: draft
:title: Anmeldung mit SAML
:description: Für eine Single-Sign-on-Lösung kann {CMK} mit Active Directory kooperieren. Lesen Sie hier, wie Sie die Authentifizierung mit SAML einrichten.

{related-start}
xref:views#[Ansichten von Hosts und Services]
xref:graphing#[Messwerte und Graphing]
{related-end}

////
Stimmen die Pfade/Prompts?
Ist mellon_create_metadata ohne .sh jetzt auch für die 2.0 richtig?
////

== Einleitung
In diesem Artikel erfahren Sie, wie Sie eine Anmeldung via Secure Assertion Markup Language (SAML) einrichten. Die Implementierung in {CMK} läuft auf Apache-Level über link:https://github.com/latchset/mod_auth_mellon[mod_auth_mellon.]

Die Anleitung zeigt ausführlich den Weg mit Active Directory Federation Services (AD FS) als Identity Provider (IDP).
In weiteren Kapiteln bekommen Sie Hinweise zur Konfiguration weiterer IDPs, etwa Azure AD und Micro Focus NetIQ Access Manager.

*Hinweis:* Dieses Feature wird von den SUSE-Linux-Enterprise-Server-Versionen 12 SP3, 12 SP4 und 15 aufgrund fehlender Abhängigkeiten nicht unterstützt (ab SLES 15 SP1 läuft es).

== Anmeldung mit Active Directory Federation Services
== Voraussetzungen
Die Anmeldung an {CMK} mittels Active Directory ist im Grunde relativ simpel: AD Federation Service (FS) dient als _Identity Provider_ (IDP), das Apache-Modul link:https://github.com/Uninett/mod_auth_mellon[mod_auth_mellon^] sorgt via _Security Assertion Markup Language_ (SAML) für die Authentifizierung. Voraussetzungen für diese Anleitung sind entsprechend:

* Funktionierende LDAP-AD-Integration
* Funktionierendes AD FS als IDP
* {CMK}-Server mit SSL

Die Einrichtung erfolgt in drei Schritten:

1. Konfiguration von Apache (Ein Ergebnis: XML-Datei mit Metadaten)
2. Konfiguration von AD FS: Relying Party Trust mit Mellon-Metadaten einrichten
3. Aktivierung des Logins in {CMK} selbst

== Apache konfigurieren
Es geht hier natürlich um die Konfiguration des Instanz-eigenen Apache-Servers, loggen Sie sich also zunächst dort ein:

[{shell}]
----
{c-root} omd su mysite
----

Erstellen Sie nun ein Verzeichnis für mod_auth_mellon und wechseln Sie in das Verzeichnis:

[{shell}]
----
{c-omd} mkdir etc/apache/mellon
{c-omd} cd etc/apache/mellon
----

Machen Sie nun `mellon_create_metadata` ausführbar und starten Sie es unter Angabe Ihres Servers sowie Ihrer Instanz mit dem Zusatz _mellon_:

[{shell}]
----
OMD[mysite]:~/etc/apache/mellon$ chmod +x ~/bin/mellon_create_metadata
OMD[mysite]:~/etc/apache/mellon$ mellon_create_metadata https://myserver "https://myserver/mysite/mellon"
----

Das Modul erzeugt dabei drei Dateien: Zertifikat (.cert), Schlüssel (.key) und statische Metadaten (.xml) -- letztere werden nicht benötigt und können gelöscht werden:

[{shell}]
----
OMD[mysite]:~/etc/apache/mellon$ rm *.xml
----

Benennen Sie und Schlüssel- und Zertifikatsdateien der Einfachheit halber um:

[{shell}]
----
OMD[mysite]:~/etc/apache/mellon$ mv *.key mellon.key
OMD[mysite]:~/etc/apache/mellon$ mv *.cert mellon.cert
----

Nun besorgen Sie die benötigten Metadaten direkt von Ihrem AD-FS-Server (hier _myadfs_) und speichern sie als `idp-metadata.xml`:

[{shell}]
----
OMD[mysite]:~/etc/apache/mellon$ wget https://myadfs/FederationMetadata/2007-06/FederationMetadata.xml -O ./idp-metadata.xml --no-check-certificate
----

Nun benötigen Sie den öffentlichen Schlüssel des AD-FS-Servers, der in der Datei `idp-public-key.pem` gespeichert wird:

[{shell}]
----
OMD[mysite]:~/etc/apache/mellon$ echo -n | openssl s_client -connect myadfs:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | openssl x509 -pubkey -noout > idp-public-key.pem
----

Nur für den Fall, dass Sie sich über das `echo -n` wundern: Darüber wird die folgende openssl-Session terminiert.

// ML: So dem so sei: Ausführlich? Verlinken? 
////
Hinweis: Das Zertifikat sollte oder muss gar in den Trust Store hochgeladen werden, für den Fall, dass zum Beispiel der IDP-Service die Zertifikatskette prüft.
////

Als letzten Schritt ersetzen Sie die Datei Authenfizierungskonfiguration `~/etc/apache/conf.d/auth.conf` mit der folgenden Variante -- natürlich unter Angabe Ihres {CMK}-Servers (hier myserver) und Ihrer Instanz (hier mysite):

// Highlighting im Quelltext scheint nicht zu funktionieren.

.~/etc/apache/conf.d/auth.conf
[{file}]
----
# Set this to the Name of your Checkmk site, e.g.
#Define SITE
Define SITE mysite

# ServerName from listen-ports.conf needs to be overwritten here
# and being set to the URL of the real server. auth_mellon uses this
# to generate the needed URLs in the metadata
ServerName https://myserver

# Load the module from the systems Apache location as we don't ship auth_mellon within OMD yet.
<IfModule !mod_auth_mellon.c>

	# Debian based systems:
	LoadModule auth_mellon_module /omd/sites/mysite/lib/apache/modules/mod_auth_mellon.so
	
	# Use this line on  CentOS 7/8
	#LoadModule auth_mellon_module /usr/lib64/httpd/modules/mod_auth_mellon.so

	# When using CentOS 7/8 and in need of diagnostics install mod_auth_mellon-diagnostics package, and use the following statement:
	LoadModule auth_mellon_module /usr/lib64/httpd/modules/mod_auth_mellon-diagnostics.so

</IfModule>

# Only enable this for debugging purposes
#MellonDiagnosticsFile /opt/omd/sites/${SITE}/tmp/mellon_diagnostics.txt
#MellonDiagnosticsEnable On

<Location /${SITE}>

	# Use SAML auth only in case there is no Check_MK authentication
	# cookie provided by the user and whitelist also some other required URLs
	<If "! %{HTTP_COOKIE} =~ /auth_/ && \
		! %{REQUEST_URI} = '/${SITE}/check_mk/register_agent.py' && \
		! %{REQUEST_URI} = '/${SITE}/check_mk/deploy_agent.py' && \
		! %{REQUEST_URI} = '/${SITE}/check_mk/run_cron.py' && \
		! %{REQUEST_URI} = '/${SITE}/check_mk/webapi.py' && \
		! %{REQUEST_URI} -strmatch '/${SITE}/check_mk/api/*' && \
		! %{QUERY_STRING} =~ /(_secret=|auth_|register_agent)/ && \
		! %{REQUEST_URI} =~ m#^/${SITE}/(omd/|check_mk/(images/.*\.png|login\.py|.*\.(css|js)))# ">
		! %{REQUEST_URI} =~ m#^/${SITE}/(omd/|check_mk/(images/.*\.svg|login\.py|.*\.(css|js)))# ">
		
		MellonIdPMetadataFile /opt/omd/sites/${SITE}/etc/apache/mellon/idp-metadata.xml
		MellonIdPPublicKeyFile /opt/omd/sites/${SITE}/etc/apache/mellon/idp-public-key.pem
		MellonSPCertFile /opt/omd/sites/${SITE}/etc/apache/mellon/mellon.cert
		MellonSPPrivateKeyFile /opt/omd/sites/${SITE}/etc/apache/mellon/mellon.key
		MellonEndpointPath "/${SITE}/mellon"
		MellonDefaultLoginPath "/${SITE}/check_mk/"
		
		Order allow,deny
		Allow from all
		AuthType Mellon
		AuthName "Check_MK SAML Login"
		MellonEnable auth
		Require valid-user
		
		# Get Username
		# ADFS sends username as DOMAIN\username pair.
		# Checkmk just wants the username.
		RewriteEngine on
		RequestHeader set X-Remote-User "expr=%{REMOTE_USER}"
		RequestHeader edit X-Remote-User "^.*\\\(.*)$" "$1"
		
		# When SAML auth fails, show the login page to the user. This should only happen,
		# if e.g. the mellon cookie is lost/rejected or if the IDP is misconfigured.
		# A failed login at the IDP will not return you here at all.
		ErrorDocument 401 '<html> \
		<meta http-equiv="refresh" content="1; URL=/${SITE}/check_mk/login.py"> \
		<body>SAML authentication failed, redirecting to login page.</body></html>'
	
	</If>
	
	# This header is also needed after authentication (outside of the If clause)
	RequestHeader set X-Remote-User "expr=%{REMOTE_USER}"
	RequestHeader edit X-Remote-User "^.*\\\(.*)$" "$1"
	
</Location>
----

Anschließend starten Sie Apache neu:

[{shell}]
----
OMD[mysite]:~/etc/apache/mellon$ omd restart apache
----

Zu guter letzt laden Sie nun die dynamisch erstellten Mellon-Metadaten als XML-Datei herunter, um sie gleich im AD-Management importieren zu können:

[{shell}]
----
OMD[mysite]:~/etc/apache/mellon$ wget https://myserver/mysite/mellon/metadata -o metadata.xml
----

== Active Directory konfigurieren
Um einen Relying Party Trust in AD FS anzulegen, gehen Sie wie folgt vor:

Starten Sie die AD-FS-Oberfläche:

image::saml_adfs_01.png[]

Klicken Sie auf [.guihint]#Add Relying Party Trust:#

image::saml_adfs_02.png[]

Belassen Sie die Option auf [.guihint]#Claims aware# und fahren Sie mit dem Start-Knopf fort:

image::saml_adfs_03.png[]

Wählen Sie nun [.guihint]#Import data about the relying party from a file# und geben Sie die eben heruntergeladene XML-Datei an:

image::saml_adfs_04.png[]

Die [.guihint]#AD FS Management#-Warnung können Sie getrost ignorieren:

image::saml_adfs_05.png[]

Unter [.guihint]#Specify Display Name# geben Sie nun `Checkmk` als Namen ein:

image::saml_adfs_06.png[]

Bei der Rechtevergabe wählen Sie zunächst [.guihint]#Choose Access Control Policy# [.guihint]#Permit everyone# zum Testen; später können Sie gegebenenfalls nach [.guihint]#Permit specific group# ändern.

image::saml_adfs_07.png[]

Bestätigen Sie die Zusammenfassung unter [.guihint]#Ready to Add Trust:#

image::saml_adfs_08.png[]

Bestätigen Sie abschließend den [.guihint]#Finish#-Dialog und behalten Sie das Häkchen bei [.guihint]#Configure claims issuance policy for this application:#

image::saml_adfs_09.png[]

Wählen Sie auf den eben erstellten Relying Party Trust an und starten Sie dann den Editor mit [.guihint]#Edit Claim Issuance Policy... :#

image::saml_adfs_10.png[]

Fügen Sie im folgenden Dialog über [.guihint]#Add Rule...# eine neue Regel hinzu:

image::saml_adfs_11.png[]

Im ersten Schritt [.guihint]#Select Rule Template# wählen Sie [.guihint]#Transform an Incoming Claim# und bestätigen:

image::saml_adfs_12.png[]

Im zweiten Schritt [.guihint]#Configure Rule# setzen Sie folgende Werte:

* [.guihint]#Incoming claim type: Windows account name#
* [.guihint]#Outgoing claim type: Name ID#
* [.guihint]#Outgoing name ID format: Transient Identifier#

image::saml_adfs_13.png[]

Damit ist auch die AD-FS-Konfiguration abgeschlossen, FS kann nun aus der Windows-Authenfifizierung die Authentifizierung für {CMK} ableiten, das Sie im nächsten Schritt anweisen, Nutzer über HTTP-Anfragen zu authentifizieren.

== {CMK} konfigurieren
In {CMK} müssen Sie nun nur noch unter [.guihint]#Setup > General > Global Settings > User Interface > Authenticate users by incoming HTTP requests# bei [.guihint]#Current settings# die Option [.guihint]#Activate HTTP header authentication# aktivieren.

image::saml_adfs_cmk.png[]

== Weitere IDPs
Die folgenden Kapitel beschreiben lediglich die Konfiguration von Mellon/Apache für unterschiedliche, bereits laufende IDPs.
Die Anbindung in {CMK} selbst beschränkt sich jeweils auf den letzten Schritt aus der ausfürhrlichen AD-FS-Anleitung.

// ML: Nach JHS
=== Azure AD
Wenn Azure AD als IDP fungiert, ergeben sich einige Änderungen, beispielsweise kann der Nutzername direkt gesetzt werden, ohne umgeschrieben zu werden.

Voraussetzungen für die folgende Beispielkonfiguration:

- UserPrincialName in LDAP-Verbindung als Identifier setzen (weitere Infors bei link:https://ldapwiki.com/wiki/UserPrincipalName#:~:text=UserPrincipalName%20is%20a%20SINGLE%2DVALUE,the%20Internet%20standard%20RFC%20822.&text=By%20convention%2C%20this%20should%20map%20to%20the%20user's%20email%20name[LDAPwiki.com]).
- Custom Enterprise App in Azure AD mit UserPrincialName als 'name'-Attribut - mehr in der link:https://docs.microsoft.com/en-us/azure/active-directory/manage-apps/add-application-portal[Microsoft-Dokumentation]).

Hier eine Beispielkonfiguration:

.~/etc/apache/conf.d/auth.conf
[{file}]
----
#Set this to the Name of your Checkmk site, e.g.
# Define SITE mysite
Define SITE mysite

# ServerName from listen-ports.conf needs to be overwritten here
# and being set to the URL of the real server.
# auth_mellon uses this to generate the needed URLs in the metadata.
ServerName https://myserver

# Load the module from the system's Apache/httpd location as we don't ship
# mod_auth_mellon within OMD yet.
<IfModule !mod_auth_mellon.c>

	# Debian based systems:
	#LoadModule auth_mellon_module /usr/lib/apache2/modules/mod_auth_mellon.so
	
	# Use this line on CentOS 7/8
	#LoadModule auth_mellon_module /usr/lib64/httpd/modules/mod_auth_mellon.so

	# When using CentOS 7/8 and in need of diagnostics install mod_auth_mellon-diagnostics package, and use the following statement:
	LoadModule auth_mellon_module /usr/lib64/httpd/modules/mod_auth_mellon-diagnostics.so

</IfModule>

# Only enable this for debugging purposes
# MellonDiagnosticsFile /opt/omd/sites/${SITE}/tmp/mellon_diagnostics.log
# MellonDiagnosticsEnable On

<Location /${SITE}>

	# Use SAML auth only in case there is no Check_MK authentication
	# cookie provided by the user and whitelist also some other required URLs.
    <If "! %{HTTP_COOKIE} =~ /auth_/ && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/register_agent.py' && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/webapi.py' && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/run_cron.py' && \
        ! %{REQUEST_URI} -strmatch '/${SITE}/check_mk/api/*' && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/deploy_agent.py' && \
        ! %{QUERY_STRING} =~ /(_secret=|auth_|register_agent)/ && \
        ! %{REQUEST_URI} =~ m#^/${SITE}/(omd/|check_mk/(images/.*\.png|login\.py|.*\.(css|js)))# ">
        ! %{REQUEST_URI} =~ m#^/${SITE}/(omd/|check_mk/(images/.*\.svg|login\.py|.*\.(css|js)))# ">

        RequestHeader unset X-Remote-User
        MellonIdPMetadataFile /opt/omd/sites/${SITE}/etc/apache/mellon/idp-metadata.xml
        # Azure-AD-specific: Not needed because in metadata:
        #MellonIdPPublicKeyFile /opt/omd/sites/${SITE}/etc/apache/mellon/idp-public-key.pem
        MellonSPCertFile /opt/omd/sites/${SITE}/etc/apache/mellon/idp.cert
        MellonSPPrivateKeyFile /opt/omd/sites/${SITE}/etc/apache/mellon/idp.key
        MellonEndpointPath "/${SITE}/mellon"
        MellonDefaultLoginPath "/${SITE}/check_mk/"

        Order allow,deny
        Allow from all

        AuthType Mellon
        MellonEnable auth
        require valid-user

        # Azure-AD-specific:
        # Get Username
        # If your assertion offers the username for Check_MK in an attribute you can set it directly as the remote user (REMOTE_USER):
        MellonUser "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"
        RequestHeader set X-Remote-User "%{MELLON_http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name}e" env=MELLON_http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name
		
        # When SAML auth fails, show the login page to the user. This should only happen, if e.g. the mellon cookie is lost/rejected or if the IDP is misconfigured.
        # A failed login at the IDP will not return you here at all.
        ErrorDocument 401 '<html> \
        <meta http-equiv="refresh" content="1; URL=/${SITE}/check_mk/login.py"> \
        <body>SAML authentication failed, redirecting to login page.</body></html>'
		
	</If>
	
	# Azure-AD-specific:
	# This header is also needed after authentication (outside of the If clause)
	RequestHeader set X-Remote-User "%{MELLON_http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name}e" env=MELLON_http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name
	
</Location>
----

=== NetIQ Access Manager
Wenn NetIQ Access Manager als IDP fungiert, ergeben sich einige Änderungen, beispielsweise kann der Nutzername direkt gesetzt werden, ohne umgeschrieben zu werden.
Hier eine Beispielkonfiguration:

.~/etc/apache/conf.d/auth.conf
[{file}]
----

# Set this to the Name of your Checkmk site, e.g.# Define SITE mysite
# Define SITE mysite
Define SITE mysite

# ServerName from listen-ports.conf needs to be overwritten here
# and being set to the URL of the real server. auth_mellon uses this to generate the needed URLs in the metadata.

ServerName https://myserver.mydomain.tld

# Load the module from the system's Apache/httpd location as we don't ship mod_auth_mellon within OMD yet.

<IfModule !mod_auth_mellon.c>

    # Use this line on Debian based systems.
    #LoadModule auth_mellon_module /usr/lib/apache2/modules/mod_auth_mellon.so

    # Use this line on  CentOS 7/8
    #LoadModule auth_mellon_module /usr/lib64/httpd/modules/mod_auth_mellon.so

    # When using CentOS 7/8 and in need of diagnostics install mod_auth_mellon-diagnostics package, and use the following statement:
    LoadModule auth_mellon_module /usr/lib64/httpd/modules/mod_auth_mellon-diagnostics.so
	
</IfModule>

# Only enable this for debugging purposes
#MellonDiagnosticsFile /opt/omd/sites/${SITE}/tmp/mellon_diagnostics.log
#MellonDiagnosticsEnable On

<Location /${SITE}>

	# Use SAML auth only in case there is no Check_MK authentication
	# Cookie provided by the user and whitelist also some other required URLs.

    <If "! %{HTTP_COOKIE} =~ /auth_/ && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/register_agent.py' && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/run_cron.py' && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/deploy_agent.py' && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/webapi.py' && \
        ! %{REQUEST_URI} -strmatch '/${SITE}/check_mk/api/*' && \
        ! %{QUERY_STRING} =~ /(_secret=|auth_|register_agent)/ && \
        ! %{REQUEST_URI} =~ m#^/${SITE}/(omd/|check_mk/(images/.*\.png|login\.py|.*\.(css|js)))# ">
        ! %{REQUEST_URI} =~ m#^/${SITE}/(omd/|check_mk/(images/.*\.svg|login\.py|.*\.(css|js)))# ">

        MellonIdPMetadataFile /opt/omd/sites/${SITE}/etc/apache/mellon/idp-metadata.xml
        # NetIQ-specific: Not needed because in metadata:
        #MellonIdPPublicKeyFile /opt/omd/sites/${SITE}/etc/apache/mellon/idp-public-key.pem
        MellonSPCertFile /opt/omd/sites/${SITE}/etc/apache/mellon/mellon.cert
        MellonSPPrivateKeyFile /opt/omd/sites/${SITE}/etc/apache/mellon/mellon.key
        MellonEndpointPath "/${SITE}/mellon"
        MellonDefaultLoginPath "/${SITE}/check_mk/"

        Order allow,deny
        Allow from all

        AuthType Mellon
        MellonEnable auth
        require valid-user


        # NetIQ-specific:
        # Even though it is set as 'optional' in https://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf
        # a NetIQ Access Manager requires it to be set.
        # Specified in oasis link above - line 396
        MellonOrganizationName "<countrycode>" "<your organisation name>"
        # Specified in oasis link above - line 443 / 452
        MellonOrganizationURL  "<countrycode>" "<your organisation url>"
        # Specified in oasis link above - line 454
        MellonOrganizationDisplayName "<countrycode>" "<your organisation display name>"

        # NetIQ-specific:
        # If your assertion offers the username for Check_MK in an attribute you can set it directly as the remote user (REMOTE_USER)
        MellonUser "myusername"

        # NetIQ-specific:
        # If the assertion does contain the username (and was set to MellonUser) then you can set the header directly.
        RequestHeader set X-Remote-User "expr=%{REMOTE_USER}"

    # When SAML auth fails, show the login page to the user. This should only happen,
    # if e.g. the mellon cookie is lost/rejected or if the IDP is misconfigured.
    # A failed login at the IDP will not return you here at all.
    ErrorDocument 401 '<html> \
        <meta http-equiv="refresh" content="1; URL=/${SITE}/check_mk/login.py"> \
        <body>SAML authentication failed, redirecting to login page.</body></html>'
		
	</If>

# This header is also needed after authentication (outside of the If clause)
RequestHeader set X-Remote-User "expr=%{REMOTE_USER}"

</Location>
----








