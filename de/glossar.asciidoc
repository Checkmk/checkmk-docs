include::global_attr.adoc[]
= Glossar
:revdate: 2021-11-16
:title: Glossar
:description: Glossar mit den wichtigsten {CMK}-spezifischen Begriffen.

// Take care: Terms are sorted alphabetically, i.e. the order of terms in English and German is different.


=== {CMK}-spezifische Begriffe

[#agent]
==== Agent
Ein Agent sammelt die für das Monitoring relevanten Daten von einem Host ein.
Das kann ein kleines, auf dem Host installiertes Programm sein (der {CMK}-Agent), ein unabhängig von {CMK} auf dem Host laufender SNMP-Agent, ein Spezialagent, der sich die Informationen über eine vom Zielsystem bereitgestellte API besorgt -- oder ein aktiver Check, der netzwerkbasierte Dienste abfragt.

Mehr unter xref:wato_monitoringagents#[Monitoring-Agenten.]


[#agent_updater]
==== Agent Updater
Der Agent Updater ist ein Agentenplugin in den {CEE}, das die automatischen Aktualisierungen der Agenten ermöglicht.

Mehr unter xref:agent_deployment#[Automatische Agenten-Updates.]


[#agent_bakery]
==== Agentenbäckerei
Mit der Agentenbäckerei (englisch _agent bakery_) können Agenten in den {CEE} individuell paketiert und optional auch automatisch verteilt werden.

Mehr unter xref:wato_monitoringagents#bakery[Installation über die Agentenbäckerei.]


[#agent_plugin]
==== Agentenplugin
Ein Agentenplugin erweitert die Funktionen des standardmäßig ausgelieferten {CMK}-Agenten.
Es ist ein kleines Programm oder Skript, das vom {CMK}-Agenten aufgerufen wird und die Ausgabe des Agenten um weitere Sektionen mit zusätzlichen Monitoring-Daten anreichert.
Ein Beispiel für ein Agentenplugin ist der Agent Updater.

Mehr unter xref:agent_linux#plugins[Agent um Plugins erweitern.]


[#active_check]
==== Aktiver Check
Ein aktiver Check ist ein kleines Programm oder Skript, das eine direkte Verbindung zu einem Dienst im Netzwerk oder Internet aufbaut und von dort die Monitoring-Daten abfragt.
Aktive Checks werden für netzwerkbasierte Dienste wie HTTP, SMTP oder IMAP genutzt, z.B. `check_http` für das Abfragen von Webseiten.

Mehr unter xref:active_checks#[Netzwerkdienste überwachen (Aktive Checks).]


[#activate_changes]
==== Änderungen aktivieren
Änderungen an der Konfiguration wirken sich erst auf das Monitoring aus, nachdem sie in einem zweiten Schritt aktiviert wurden; ähnlich, wie es zum Beispiel Partitionierungsprogramme handhaben: Konfigurieren, prüfen, anwenden.

Mehr unter xref:wato#activate_changes[Änderungen aktivieren.]


[#automation_user]
==== Automationsbenutzer
Spezielles Konto für die Abfrage und Konfiguration von {CMK} abseits der Weboberfläche, also zum Beispiel über API, Kommandozeile, Skript oder Webdienst.
Der Automationsbenutzer hat standardmäßig ein zufällig ausgewürfeltes Automationspasswort (englisch _automation secret_).

Mehr unter xref:wato_user#automation[Automationsbenutzer (für Webdienste).]


[#notification]
==== Benachrichtigung
Mit einer Benachrichtigung (englisch _notification_) wird ein {CMK}-Benutzer über Probleme oder andere Monitoring-Ereignisse aktiv informiert, per HTML-E-Mail, SMS, Slack oder ähnlichem.
Wer wie benachrichtigt wird, legen die Benachrichtigungsregeln fest.
Wenn zum Beispiel Herr Hirsch eine E-Mail mit der Information erhält, dass der Service `Filesystem /` auf dem Host `myserver123` von {WARN} nach {CRIT} gewechselt ist, dann deshalb, weil Herr Hirsch Kontakt für diesen Host ist und in einer Benachrichtigungsregel steht, dass alle Kontakte des Hosts eine E-Mail erhalten sollen, wenn einer seiner Services nach {CRIT} wechselt.

Mehr unter xref:notifications#[Benachrichtigungen.]


[#bi]
==== Business Intelligence (BI)
Business Intelligence in {CMK} ermöglicht es, aus vielen einzelnen Statuswerten den Gesamtzustand einer übergeordneten Ebene abzuleiten und übersichtlich darzustellen. Das kann die abstrakte Gruppierung einzelner Komponenten oder eine geschäftskritische Anwendung sein. So lässt sich etwa der Zustand einer Anwendung _E-Mail,_ bestehend aus diversen Hosts, Switches und Diensten wie SMTP und IMAP, über eine einzige Visualisierung erfassen. Auch die Formulierung gänzlich ungreifbarer und nicht-technischer Belange ist hier möglich, zum Beispiel die termingerechte Verfügbarkeit eines auszuliefernden Produkts: Dieses Ziel liegt in der Zukunft und hängt von vielen Aspekten ab, der Supply Chain, einem funktionierenden Maschinenpark, verfügbarem Personal etc. Etwaige Gefährdungen für dieses abstrakte Ziel ließen sich über das BI-Modul erfassen.

// MA: Die Idee dahinter ist nicht nur bestehende Dinge auf andere Weise zusammenzufassen (Ob der SMTP funktioniert, kann man ja auch direkt prüfen), sondern auch Dinge prüfbar zu machen, die nicht direkt prüfbar sind. Ein abstraktes Beispiel dafür ist ein Gerät mit einer zugesicherten Lieferzeit. Da die Lieferzeit in der Zukunft liegt, kann man sie nicht prüfen - man kann aber die Komponenten prüfen, die nötig sind, um die Lieferzeit einzuhalten. Haben Komponenten ein Problem, kann die Fertigstellung/Lieferzeit mehr oder wenig gefährdet sein (= WARN oder CRIT).
// ML: Ich habe das mal erweitert, muss aber sagen, dass das für mich dieselbe Abstraktionsebene ist, außer dass die Anwendung "Mail" in der Gegenwart liegt, die Anwendung "termingerechte Verfügbarkeit" in der Zukunft. Nicht sicher, ob das beim Verständnis hilft oder eher verwirrt.

Mehr unter xref:bi#[Business Intelligence (BI).]


[#check]
==== Check
Ein Check im Sinne von {CMK} ist das Prüfen eines Hosts oder Services gemäß erstellter Regeln und eines Check-Plugins, also der Vorgang, der den Status von Hosts und Services bestimmt. Anders ausgedrückt: Das Ausführen eines Check-Plugins mit dem Ergebnis {OK}, {DOWN}, {UNREACH}, {WARN}, {CRIT}, {PEND} oder {UNKNOWN}.

Mehr unter xref:wato_rules#[Regeln.]


[#check_plugin]
==== Check-Plugin
Check-Plugins sind in Python geschriebene Module, die auf der {CMK}-Instanz ausgeführt werden und die Services eines Hosts erstellen und auswerten. Ein Beispiel: Das Check-Plugin _df,_ zu finden innerhalb einer Instanz unter `share/check_mk/checks/` (legacy) oder `lib/python3/cmk/base/plugins/agent_based/`, erstellt aus den Daten eines Agenten in der Instanz Services für die vorhandenen eingebundenen Dateisysteme eines Hosts und überprüft diese Services anhand der Daten, also etwa wie viel freien Speicherplatz es noch gibt.

xref:wato_services#checkplugins[Mehr über Check-Plugins.]


[#mkp]
==== {CMK}-Erweiterungspaket (MKP)
MKP ist das {CMK}-eigene Dateiformat zum Zusammenfassen und Verteilen von Erweiterungen, also eigenen Check-Plugins, Agentenplugins, Zeitreihen-Graph-Definitionen, Benachrichtigungsskripten, Tabellenansichten, Dashboards und so weiter.

Mehr unter xref:mkps#[{CMK}-Erweiterungspakete (MKPs).]


[#dashboard]
==== Dashboard
Ein Dashboard ist eine frei konfigurierbare Übersicht, bestehend aus Tabellenansichten und/oder so genannten Dashboard-Elementen (englisch _dashlet_). Diese Elemente gibt es zum Beispiel in Form von Listen (etwa Host-Probleme), Zeitreihen-Graphen (etwa Performance-Daten) oder kleinen Tachometern, die einzelne Werte wie etwa eine CPU-Temperatur visualisieren.

Mehr unter xref:dashboards#[Dashboards.]


[#edition]
==== Edition
{CMK}-Editionen sind die unterschiedlichen Software-Varianten von {CMK}, die geladen und installiert werden können. Also die Open-Source-Edition {CRE}, die per Subskription erhältliche {CSE}, deren kostenlose, aber auf 25 Hosts beschränkte Schwester {CFE} sowie die mandantenfähige {CME}.

Mehr unter xref:intro_setup#[Edition auswählen.]


[#ec]
==== Event Console (EC)
Bei der Überwachung von Hosts und Services geht es in {CMK} um _Zustände._ Die Event Console ist das Modul, das sich im Gegensatz dazu um _Ereignisse_ kümmert, also die Überwachung aus Quellen wie Syslog oder SNMP Traps, aber optional auch Windows Event Log, Logdateien und eigenen Anwendungen. Ein Beispiel: Eine Warnmeldung des SMTP-Dienstes auf einem Mailserver würde weder den Status/Zustand von dessen Host noch Services ändern -- dennoch ist es eine relevante Information, die ins Monitoring gehört. Mit der Event Console können solche Ereignisse in {CMK} dargestellt werden.

Mehr unter xref:ec#[Die Event Console.]


[#host]
==== Host
Ein Host im Sinne von {CMK} ist jedes eigenständige, physische oder virtuelle System, das von {CMK} überwacht wird. In der Regel handelt es sich um Dinge mit eigener IP-Adresse (Server, Switches, SNMP-Geräte, virtuelle Maschinen), aber auch um beispielsweise Docker Container oder andere logische Objekte ohne eine solche Adresse. Jeder Host hat immer einen der Zustände {UP}, {DOWN}, {UNREACH} oder {PEND} und immer mindestens einen Service.

Noch weiter heruntergebrochen: Ein Host ist für {CMK} intern lediglich ein Strukturierungselement, das zu überwachende Elemente beinhaltet, also Services. Jeder Host hat zwangsläufig mindestens einen Service, um überhaupt die Erreichbarkeit zu verifizieren (etwa [.guihint]#PING# oder der {CMK}-Agent selbst, also der Service [.guihint]#Check_MK#) Insofern meint Host kaum mehr als die Überschrift, unter der eine Anzahl an Services gruppiert ist.

Mehr unter xref:wato_hosts#[Verwaltung der Hosts.]


[#host_group]
==== Host-Gruppe
Hosts werden in {CMK} primär über Verzeichnisse verwaltet. Host-Gruppen ermöglichen eine zweite Ebene der Gruppierung von Hosts quer über die Ordnerstruktur. Dazu werden Host-Merkmale, -Labels und Verzeichnisse genutzt, um Hosts über Regeln solchen Gruppen zuzuordnen. Hosts können aber auch explizit einer Gruppe zugeordnet werden.

Mehr unter xref:wato_hosts#host_groups[Host-Gruppen]


[#host_tag]
==== Host-Merkmal
Host-Merkmale (englisch _host tags_) sind Schlagworte, die Hosts zugeordnet werden können, um diese später etwa im Monitoring für Tabellenansichten oder in der Konfiguration für Regeln gezielt ansprechen zu können. Host-Merkmale sind in Gruppen eingeteilt, beispielsweise lässt sich eine Merkmalsgruppe _Betriebssysteme_ mit den Merkmalen _Linux_ und _Windows_ einrichten. Einige Merkmalsgruppen sind bereits vordefiniert, etwa zur Art des verwendeten {CMK}-Agenten oder zur IP-Adressfamilie, über die festgehalten wird, ob ein Host über IPv4, IPv6 oder beide Versionen überwacht werden soll. Sie haben außerdem vorher festgelegte Werte und einen Standard, welcher jedem Host zugeordnet ist, solange er nicht mit einer anderen Option aus der Gruppe überschrieben wurde.

Mehr unter xref:wato_rules#hosttags[Host-Merkmale im Detail.]


[#host_status]
==== Host-Status
Der Host-Status beschreibt den Zustand des Hosts, also ob dieser über das Netz erreichbar ist ({UP}), nicht auf Anfragen aus dem Netz antwortet ({DOWN}) oder ob der Weg durch ausgefallene zwischengeschaltete Geräte (Switches, Router etc.) versperrt ist ({UNREACH}). Für frisch ins Monitoring aufgenommene, noch nie abgefragte Hosts gibt es zudem den Zustand {PEND}, welcher aber kein Status im eigentlichen Sinne ist.

Mehr unter xref:monitoring_basics#hosts_services[Hosts und Services.]


[#site]
==== Instanz
Instanz (englisch _site_) nennt sich *ein* laufendes {CMK}-Monitoring-Projekt. {CMK} lässt sich parallel auf demselben Server in mehreren, unabhängigen Instanzen betreiben, um beispielsweise unterschiedliche {CMK}-Versionen oder -Editionen auszuprobieren oder ein separates Monitoring für (neue) Hosts zu betreiben, die (noch) nicht ins produktive Monitoring aufgenommen werden sollen.

Mehr unter xref:checkmk_getting_started#create_site[Eine Instanz erstellen.]


[#configuration_environment]
==== Konfigurationsumgebung
Die {CMK}-Weboberfläche teilt sich auf in Monitoring- und Konfigurationsumgebung. Letztere bezeichnet die Bereiche, in denen Regeln gebaut, Host und Services hinzugefügt und eingestellt, Benutzer verwaltet oder generelle Optionen gesetzt werden. Zur Konfigurationsumgebung geht es über das [.guihint]#Setup#-Menü in der Navigationsleiste.

Mehr unter xref:user_interface#[Die Benutzeroberfläche.]


[#contact]
==== Kontakt
Kontakte werden {CMK}-Benutzer genannt, die für bestimmte Hosts und Services zuständig sind. Die Zuordnung von Kontakten zu Hosts und Service geschieht über Kontaktgruppen. Kontakte können auch Benutzerkonten sein, die rein für die Benachrichtigungen existieren, beispielsweise für die Weiterleitung an ein Ticketsystem.

Mehr unter xref:wato_user#contact_groups[Kontaktgruppen.]


[#label]
==== Label
Hosts können mit Host-Merkmalen versehen, aber auch mit direkten Auszeichnungen versehen werden. Diese Labels sind ebenfalls in Gruppen unterteilt, wobei die Gruppe (oder auch der _Schlüssel_) vor dem Doppelpunkt steht und der Wert danach. Solche beliebige Schlüssel-Wert-Paare (`os:linux`, `os:windows`, `foo:bar` etc.) können bei einem Host ohne vorherige Konfiguration einer Merkmalsgruppe direkt gesetzt werden und lassen sich später für die Filterung in Regeln und Tabellenansichten und andere Dinge nutzen. Sie verfügen daher über keinen vorher definierten Umfang und haben auch keinen Standardwert wie Host-Merkmale, sind dafür aber deutlich dynamischer. Insbesondere kann {CMK} von Containersystemen wie Kubernetes, Azure oder AWS automatisch erzeugte Objekte selbständig als Hosts ins Monitoring übernehmen und diese dann mit automatisch aus deren Metadaten generierten Labeln anreichern.

Mehr unter xref:labels#[Labels.]


[#Livestatus]
==== Livestatus
Livestatus ist die wichtigste Schnittstelle in {CMK}. Durch sie bekommen {CMK}-Benutzer schnellstmöglich und live Zugriff auf alle Daten der überwachten Hosts und Services. So werden z.B. die Daten im Snapin [.guihint]#Overview# direkt über diese Schnittstelle abgerufen. Dass die Daten direkt aus dem RAM geholt werden, vermeidet langsame Festplattenzugriffe und gibt einen schnellen Zugriff auf das Monitoring, ohne das System zu sehr zu belasten.

Mehr unter xref:livestatus#[Statusdaten abrufen via Livestatus.]


[#local_check]
==== Lokaler Check
Ein lokaler Check ist eine (selbstgeschriebene) Erweiterung, die in Form eines Skripts in einer beliebigen Sprache auf dem überwachten Host läuft. Im Gegensatz zu normalen Checks läuft die Statusberechnung direkt auf dem Host. Die Ergebnisse werden der regulären Agentenausgabe hinzugefügt.

Mehr unter xref:localchecks#[Lokale Checks.]


[#metric]
==== Metrik
Mess- und berechenbare Werte zu Hosts und Services, etwa Temperatur, Auslastung oder Verfügbarkeit, die beispielsweise für Graphen herangezogen werden können. Vergangene Werte werden in RRDs (Round-Robin-Datenbank) gespeichert und halten diese in der Standardeinstellung bis zu 4 Jahre vor.

Mehr unter xref:graphing#[Messwerte und Graphing.]


[#monitoring_environment]
==== Monitoring-Umgebung
Die {CMK}-Weboberfläche teilt sich auf in Monitoring- und Konfigurationsumgebung. Erstere bezeichnet die Bereiche, in denen der Status der überwachten Infrastruktur angezeigt wird; dazu zählen etwa das Inventar, Dashboards, Listen mit Hosts, Services, Ereignissen oder Problemen, historische Daten und so weiter. Zur Monitoring-Umgebung geht es über das [.guihint]#Monitor#-Menü in der Navigationsleiste.

Mehr unter xref:user_interface#[Die Benutzerobefläche.]


[#navigation_bar]
==== Navigationsleiste
Die Navigationsleiste ist die Hauptnavigation der {CMK}-Oberfläche, auf der linken Seite u.a. mit den Menüs [.guihint]#Monitor,# [.guihint]#Setup# und [.guihint]#Customize.#

Mehr unter xref:user_interface#navigation_bar[Navigationsleiste.]


[#physical_appliance]
==== Physische Appliance
Die physische Appliance ist ein 19"-Server mit einer vorinstallierten, für {CMK} vorbereiteten Firmware, der sofort in Rechenzentren eingesetzt werden kann. Sie kommt mit einer grafischen Konfigurationsoberfläche, die jegliche Linux-Kenntnisse überflüssig macht.

Mehr unter xref:intro_setup#physical_appliance[Physische Appliance.]


[#piggyback]
==== Piggyback
Manche Hosts im Monitoring werden nicht direkt abgefragt, weil es sich nicht um physischen Geräte, sondern virtuelle Maschinen oder Container handelt, oder die Daten nur von einem Drittsystem bereitgestellt werden können. Diese Drittsysteme (die physischen Gastgeber) liefern die Daten quasi als Anhang in ihrer eigenen Agentenausgabe mit. Ein Docker-Server würde also zum Beispiel neben den eigenen Daten die Daten der Container huckepack (englisch _piggyback_) mitliefern.

Mehr unter xref:piggyback#[Der Piggyback-Mechanismus.]


[#rule]
==== Regel
Regeln sind die Grundlage der Konfiguration von Hosts und Services in {CMK}. Regeln in einem Regelsatz steuern immer einen einzelnen, fokussierten Aspekt eines Hosts oder Service. Sie lassen sich mit Bedingungen versehen, sowie innerhalb eines Regelsatzes beliebig aufeinander "stapeln". Die Auswertung erfolgt dann von oben nach unten, so dass es Standardregeln geben kann, wenn keine Bedingung greift, als auch sehr spezielle Regeln, die nur einen ganz bestimmten Host betreffen. Viele Regelsets in {CMK} haben bereits vordefinierte Standardwerte, so dass nur für abweichende Anforderungen Regeln erstellt werden müssen.

Mehr unter xref:wato_rules#[Regeln.]


[#rule_set]
==== Regelsatz
Ein Regelsatz steht für einen bestimmten Aspekt eines Hosts oder Services, beispielsweise die Schwellwerte der CPU-Auslastung. In jedem Regelsatz können beliebig viele einzelne Regeln erstellt werden. So könnte etwa der Regelsatz [.guihint]#CPU utilization on Linux/UNIX# zwei Regeln enthalten, die den Service auf bestimmten Hosts bei 90 Prozent und auf anderen schon bei 70 Prozent auf den Status {WARN} setzen.

Mehr unter xref:wato_rules#rule_set_types[Arten von Regelsätzen.]


[#sidebar]
==== Seitenleiste
Die Seitenleiste (englisch _sidebar_) lässt sich aus der Navigationsleiste per Mausklick einblenden. In die Seitenleiste können Benutzer diverse Snapins aufnehmen, die die Navigation erleichtern oder wichtige Statusdaten auf einen Blick zeigen.

Mehr unter xref:user_interface#sidebar[Seitenleiste.]


[#service]
==== Service
Ein Service ist ein logisches Objekt, welches einen oder mehrere Teilaspekte eines Hosts zusammenfasst. Also beispielsweise Größe, Auslastung und Trends von Dateisystemen, CPU-Auslastung, Temperaturen, Alter und Anzahl laufender Programme, Ports, Sensoren und so weiter. Jeder Service im Monitoring hat zu jedem Zeitpunkt einen der Zustände {OK}, {WARN}, {CRIT}, {UNKNOWN} oder {PEND}, ist immer genau einem Host zugeordnet und enthält optional eine oder mehrere Metriken.

Mehr unter xref:wato_services#[Services verstehen und konfigurieren.]


[#service_discovery]
==== Service-Erkennung
Sobald ein Host dem Monitoring hinzugefügt wird, erkennt {CMK} automatisch alle verfügbaren Services, die ins Monitoring aufgenommen werden können -- und hält diese Liste auch im laufenden Betrieb stets aktuell. Die Service-Erkennung (englisch _service discovery_) lässt sich aber auch jederzeit manuell über die Konfiguration eines Hosts starten.

Mehr unter xref:wato_services#[Services verstehen und konfigurieren.]


[#service_group]
==== Service-Gruppe
Analog zu den Hosts lassen sich auch Services in Gruppen zusammenfassen, um diese Gruppen später in Tabellenansichten zu filtern oder in der Konfiguration gezielt anzusprechen. Gruppieren lässt sich nach Ordnern, Host-Merkmalen, Host- und Service-Labeln sowie via regulären Ausdrücken gefilterten Host- und Service-Namen.

Mehr unter xref:wato_services#service_groups[Service-Gruppen.]


[#service_status]
==== Service-Status
Der Service-Status ist immer {OK} {WARN}, {CRIT} oder {UNKNOWN} und beschreibt, in welchem Zustand sich der Service aktuell befindet -- gemäß den gesetzten Regeln. Für frisch ins Monitoring aufgenommene, noch nie abgefragte Services gibt es zudem den Zustand {PEND}, welcher aber kein Status im eigentlichen Sinne ist.

Mehr unter xref:monitoring_basics#services[Services.]


[#snapin]
==== Snapin
Snapins, auch Seitenleistenelemente genannt, sind die einzelnen Bausteine, die sich in der Seitenleiste platzieren lassen, beispielsweise [.guihint]#Overview# und [.guihint]#Master control.# Zugriff auf die Snapins liefert das Plus-Symbol unten in der Seitenleiste.

Mehr unter xref:user_interface#sidebar[Seitenleiste.]


[#special_agent]
==== Spezialagent
Auf einigen Systemen lässt sich der reguläre {CMK}-Agent nicht installieren und SNMP steht nicht (befriedigend) zur Verfügung.
Stattdessen bieten diese Systeme Management-APIs, die auf Telnet, SSH oder HTTP/XML basieren.
Über einen Spezialagenten, der auf dem {CMK}-Server läuft, fragt {CMK} diese Schnittstellen ab, womit der Host per API in {CMK} integriert wird.

Mehr unter xref:datasource_programs#specialagents[Spezialagenten.]


[#view]
==== Tabellenansicht
Neben den Dashboards sind die Tabellenansichten (englisch _views_) die in der {CMK}-Oberfläche am häufigsten genutzten Darstellungen von Hosts, Services und anderen Objekten.
Diese werden als Tabellen mit den im aktuellen Kontext relevanten Attributen angezeigt.
Zum Beispiel sind [.guihint]#All hosts# und [.guihint]#Host problems# Tabellenansichten im Monitoring.
Mitgelieferte Tabellenansichten können in ihrer Anzeige angepasst werden, und sie können als Basis für neue Ansichten dienen. Es ist auch möglich, Tabellenansichten komplett neu zu erstellen.

Mehr unter xref:views#[Ansichten von Hosts und Services (Views).]


[#distributed_monitoring]
==== Verteiltes Monitoring
{CMK} unterscheidet zwischen verteiltem Monitoring und einem verteilten Setup. Verteiltes Monitoring bedeutet, dass das gesamte Monitoring-System aus mehr als einer {CMK}-Instanz besteht und die Daten an einer Stelle zusammen angezeigt werden. Oder anders: Das Monitoring besteht dann aus einer Zentralinstanz und mindestens einer Remote-Instanz und die Daten der Remote-Instanz werden auch in der Zentrale angezeigt. Ein verteiltes Monitoring kann optional mit einem verteilten Setup kombiniert werden.

Mehr unter xref:distributed_monitoring#central_status[Zentraler Status.]


[#distributed_setup]
==== Verteiltes Setup
{CMK} unterscheidet zwischen verteiltem Monitoring und einem verteilten Setup. Verteiltes Setup bedeutet, dass das gesamte Monitoring-System aus mehr als einer {CMK}-Instanz besteht und die Konfiguration an einer einzigen Stelle vorgenommen wird. Oder anders: Das Monitoring besteht dann aus einer Zentralinstanz und mindestens einer Remote-Instanz und die Konfiguration der Remote-Instanz kommt aus der Zentrale. Ein Verteiltes Setup beinhaltet immer auch ein verteiltes Monitoring.

Mehr unter xref:distributed_monitoring#distr_wato[Zentrale Konfiguration.]


[#virtual_appliance]
==== Virtuelle Appliance
Die virtuelle Appliance ist ein für VirtualBox oder VMware ESXi erstelltes System mit einer vorinstallierten, für {CMK} vorbereiteten Firmware. Sie beinhaltet eine grafischen Konfigurationsoberfläche, die jegliche Linux-Kenntnisse überflüssig macht.

Mehr unter xref:intro_setup#virtual_appliance[Virtuelle Appliance.]


[#scheduled_downtime]
==== Wartungszeit
Wartungszeiten (englisch _scheduled_downtimes_) sind geplante Ausfälle, etwa für Aktualisierungen bestimmter Hosts. Wartungszeiten setzen beispielsweise die Benachrichtigungen temporär außer Kraft, werden bei der Verfügbarkeitsberechnung extra berücksichtigt und sorgen dafür, dass zugehörige Hosts und Services zeitweilig nicht als Probleme auftauchen.

Mehr unter xref:basics_downtimes#[Wartungszeiten.]


[#werk]
==== Werk
Die Software-Entwicklung von {CMK} ist in sogenannten Werks organisiert. Jede Änderung, Fehlerbehebung oder Neuerung, die einen Einfluss auf die Erfahrung des Benutzers hat, wird in einem eigenen Werk erfasst, samt Hinweisen zu Auswirkungen und etwaigen Inkompatibilitäten. Die Liste der Werks gibt es direkt in {CMK} über das [.guihint]#Help#-Menü in der Navigationsleiste und auf der {CMK}-Homepage.

Mehr unter link:https://checkmk.com/de/werks[Werks.^]


[#time_period]
==== Zeitraum
In {CMK} lassen sich Dinge wie Benachrichtigungen, Verfügbarkeitsberechnungen und selbst die generelle Ausführung von Checks auf bestimmte Zeiten beschränken. Mit Zeiträumen (englisch _time periods_) lassen sich zum Beispiel tägliche Arbeitszeiten definieren, Urlaube und Feiertage festlegen oder Wochenenden von Wochentagen trennen. Diese Zeiträume können anschließend in Regeln genutzt werden.

Mehr unter xref:timeperiods#[Zeiträume.]
