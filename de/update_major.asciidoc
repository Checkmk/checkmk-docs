//encoding: utf-8
include::global_attr.adoc[]
= Update auf Version {v21}
:revdate: 2022-05-18
:title: Update auf Version {v21}
:description: Was es beim Update von {CMK} Version 2.0.0 auf 2.1.0 zu beachten gibt, erfahren Sie in diesem Artikel.

{related-start}
xref:update#[Updates und Upgrades]
xref:install_packages#[Grundsätzliches zur Installation von {CMK}]
{related-end}


[#intro]
== Einleitung

In diesem Artikel finden Sie die wichtigsten Themen, die für das Update Ihrer {CMK}-Version {v20} auf {v21} relevant sind.

Wir empfehlen Ihnen, vor dem Update den kompletten Artikel durchzulesen, damit Sie genau wissen, was auf Sie zukommt: vor, während und nach dem Update.


[#prep]
== Vorbereitungen

In diesem Kapitel erhalten Sie die Übersicht der Themen, um die Sie sich kümmern sollten, bevor Sie das Update durchführen.
Wahrscheinlich wird nicht jedes der Themen für Sie relevant sein:
Bei einem solchen können Sie intern einen Haken setzen und sich gleich das nächste Thema vornehmen.


[#backup]
=== Backup

Wie vor jedem Update einer produktiven Software sollten Sie auch vor dem von {CMK} die Aktualität Ihrer Backups prüfen.

*Betrifft Sie das?* Ja.

*Was müssen Sie tun?*  Wenn Sie Ihre Backups automatisiert über [.guihint]#Setup > Maintenance > Backups# erstellen, prüfen Sie dort, ob die letzten Backup-Aufträge fehlerfrei durchgelaufen sind.

Weitere Informationen finden Sie in den Artikeln zu xref:backup#[Backups] und zum Thema xref:omd_basics#backup[Instanzen sichern und wiederherstellen.]


[#linux_versions]
=== Linux-Distributionsversionen
// Werk #13012: Add support for Ubuntu 22.04
// TK: Für abgekündigte Linux-Distros gab es in der 2.0.0 (inkompatible) Werks: #10315+#10317 SLES 12 SP1+SP2, Werk #10312 Ubuntu 18.10, Werk #11957 Ubuntu 19.10
// TK: In der 2.1.0 haben wir keine abgekündigten Distros/keine Werks. Einzig Ubuntu 20.10 wurde in der 2.0 unterstützt, jetzt nicht mehr.
// MFS: 21.04 auch ab 2.0.0p4, siehe https://wiki.lan.tribe29.com/books/knowledge/page/infos-zu-linux-distros-%28versionen-cycles%29

In der {CMK} Version {v21} werden einige veraltete Versionen der Distribution Ubuntu nicht mehr unterstützt.
Für Nutzer von Debian, SLES und RHEL (sowie binärkompatiblen Derivaten wie CentOS) ergeben sich keine Änderungen.

*Betrifft Sie das?* Das betrifft Sie, wenn auf Ihrem {CMK}-Server eine der folgenden, in der {v20} noch unterstützten, Ubuntu-Versionen installiert ist:

* Ubuntu 20.10 _Groovy Gorilla_
* Ubuntu 21.04 _Hirsute Hippo_

// MFS: Dass 21.10 und Debian 9 irgendwann abgekündigt werden wird, habe ich aus der Versionsgeschichte der 2.0.0-Patchlevels antizipiert.
Bei Veröffentlichung von {v21} noch unterstützt, aber nicht empfohlen:
Für Ubuntu 21.10 (_Impish Indri_) wurde während der Beta-Phase von {v21} seitens Canonical die Unterstützung mit Sicherheits-Updates eingestellt.
Auch Debian 9 (_Stretch_) wird kurz nach Veröffentlichung  von {CMK} {v21} keine Sicherheits-Updates mehr erhalten.

Neu hinzugekommen sind Debian 11 _Bullseye_ und Ubuntu 22.04 _Yammy_.
Für beide Distributionen bauen wir auch Installationspakete von {v20}, um den empfohlenen Update-Pfad zu vereinfachen.

*Was müssen Sie tun?* Führen Sie vor dem Update von {CMK} zuerst ein Versions-Upgrade der Linux-Distribution durch.
Achten Sie darauf, dass die Ziel-Version der Linux-Distribution von {CMK} {v20} *und* {v21} unterstützt wird.

Welche Linux-Distributionsversionen {CMK} unterstützt, erfahren Sie im xref:install_packages#supported_distributions[Artikel zur Installation] und auf der link:https://checkmk.com/download[Download-Seite^] nachdem Sie die {CMK}-Version und Ihre Linux-Distribution ausgewählt haben.

Sollte es nun notwendig sein, vor dem Update von {CMK}, ein Versions-Upgrade Ihrer Linux-Distribution vorzunehmen, so empfehlen wir die folgende Vorgehensweise:

. Stoppen Sie zunächst Ihre {CMK}-Instanz:
+
[{shell}]
----
{c-root} omd stop mysite
----

[start=2]
. Hängen Sie das `tmp`-Verzeichnis der Instanz aus:
+
[{shell}]
----
{c-root} umount /opt/omd/sites/mysite/tmp
----

[start=3]
. Verschieben Sie das gesamte `omd`-Verzeichnis, damit hieran im nächsten Schritt keine ungewollten Änderungen auftreten können.
Bei einem Release-Upgrade werden im Regelfall alle Pakete entfernt, deren Abhängigkeiten nicht mehr erfüllt werden können.
Zu diesen Paketen würde auch {CMK} gehören.
Um hier einen Datenverlust zu verhindern, ist dieser Schritt notwendig und kann per `mv` durchgeführt werden.
+
[{shell}]
----
{c-root} mv /opt/omd /opt/omd.bak
----

[start=4]
. Führen Sie das Versions-Upgrade von Linux entsprechend der Anleitung des jeweiligen Distributors durch.

. Nach der erfolgreichen Aktualisierung Ihrer Linux-Distribution müssen Sie nun das in Sicherheit gebrachte `omd`-Verzeichnis wieder an Ort und Stelle verschieben:
+
[{shell}]
----
{c-root} mv /opt/omd.bak /opt/omd
----

[start=6]
. Installieren Sie nun das zur neuen Version der verwendeten Distribution passende Paket von {CMK}.
*Wichtig:* Die Versionsnummer von {CMK} muss exakt der vorher verwendeten entsprechen.
Wenn Sie also vor dem Upgrade der Distribution {CMK} 2.0.0p23 verwendet haben, so installieren Sie nun die 2.0.0p23, die zu Ihrer neuen Linux-Distributionsversion passt.
+
Im Falle von Ubuntu würde an dieser Stelle der folgende Befehl genügen:
+
[{shell}]
----
{c-root} apt install /tmp/check-mk-enterprise-2.0.0p23_0.jammy_amd64.deb
----
+
*Hinweis:* Geben Sie bei der Installation per `apt install` den vollständigen Pfad zur DEB-Datei an.

Halten Sie sich bei der Neu-Installation von {CMK} an die jeweilige xref:install_packages#distribution_instructions[detaillierte Installationsanleitung] für Ihre Distribution.


// Neues {v21} Thema
[#agents]
=== Die Agenten für Linux und Windows
// Werk #14089: Checkmk agent TLS encryption and compression

Mit {v21} führt {CMK} zunächst für die Linux- und Windows-Agenten auf x86/64 die beiden Komponenten _Agent Controller_ (auf dem Host) und _Agent Receiver_ (auf dem Server) ein, mit denen eine TLS verschlüsselte Übertragung des Agenten-Outputs möglich ist.
Der Agent Controller arbeitet zunächst in einem Kompatibilitätsmodus (*Legacy-Pull-Modus*), der auch den Zugriff von {v20}-Instanzen zulässt.

*Betrifft Sie das?* Ja.
// TK: Nein, wenn ich nur SNMP überwache, oder?

*Was müssen Sie tun?* Identifizieren Sie diejenigen Windows-Hosts im Monitoring, welche die Windows Serverbetriebssysteme 2008 R2 und Client Betriebssysteme 7 oder höher auf x86_64 nutzen.
Gleiches gilt für Linux-Hosts auf x86_64, welche zur Diensteverwaltung `systemd` ab Version 220 verwenden.
Auf diesen Hosts registrieren Sie nach der Aktualisierung beim Monitoring-Server, um die TLS verschlüsselte Übertragung zu nutzen.
Detailliertere Informationen finden sie in der ausführlichen Anleitung für xref:agent_linux#registration[Linux] oder xref:agent_windows#registration[Windows].
// MA: Mir ist weiterhin nicht klar, was Kapitel 2.3 von 4.4 unterscheidet.
// TK: Hier kommt nicht klar genug rüber, dass dieses Thema alle aktuellen Linux- und Windows-Versionen betrifft und nur ein paar Exoten nicht.


// {v20} Thema - auch gültig für {v21}
[#local_files]
=== Lokale Dateien

Mit lokalen Dateien können Sie die von {CMK} bereitgestellte Funktionalität anpassen und erweitern.
Diese Dateien befinden sich im lokalen Teil der Instanzverzeichnisstruktur, d.h. in `~/local`.
Lokale Dateien können bei einem Update Probleme bereiten, da sie eventuell nicht mehr zur neuen {CMK}-Version passen.

*Betrifft Sie das?* Da es für {CMK} bei einem Update nicht möglich ist, die lokalen Anpassungen und jede von einem Drittanbieter hergestellte Erweiterung abzufangen und zu behandeln, sollten Sie Ihre {CMK}-Instanz vor einem Update daraufhin überprüfen, ob lokale Dateien bei Ihnen verwendet werden und gegebenenfalls welche.

*Was müssen Sie tun?* Verschaffen Sie sich einen Überblick über die lokalen Dateien Ihrer {CMK}-Instanz, indem Sie als Instanzbenutzer das folgende Kommando ausführen (bei dem die Option `-L` dafür sorgt, dass auch symbolischen Links gefolgt wird):

[{shell}]
----
{c-omd} find -L ~/local -type f
----
// MA: Ist es ggf. sinnvoller, wenn wir auf die Tools `mkp` oder `cmk -P` verweisen?
// MA: `mkp find` listet alle local-Dateien, die nicht zu einem Paket gehören.

In einer frischen Installation von {CMK} wird Ihnen derzeit nur eine Datei namens `README.TXT` aufgelistet.
Alles, was darüber hinaus angezeigt wird, sollte ganz oben auf Ihrer Liste zur Fehlerdiagnose stehen, falls es beim Update Probleme gibt.
Besondere Aufmerksamkeit verdienen Check-Plugins, die immer noch der alten, bis zur Version {v16} gültigen, Check-API folgen.
Wir gehen darauf im nächsten Kapitel genauer ein.


// {v20} Thema - auch gültig für {v21}
[#check-api]
=== Die Check-API

In {CMK} {v20} wurde eine neue Check-API eingeführt, die die Check-Plugins neu strukturiert, um ihre Handhabung zu vereinheitlichen und zu vereinfachen.
Da es aber eine große Zahl von Checks gibt, die nach der alten, bis zur Version {v16} gültige Check-API programmiert wurden, kann es sein, dass die Migration von der alten auf die neue Check-API auch in der Version {v21} ein Thema für Sie ist.
Die große Zahl existierender Checks ist auch der Grund, warum die alte Check-API für eine Übergangszeit weiterhin unterstützt wird.

*Betrifft Sie das?* Das Thema Check-API _kann_ Sie betreffen, wenn Sie die mit {CMK} ausgelieferten um Ihre eigenen, selbstgeschriebenen Checks erweitert haben und/oder wenn Sie Plugins aus anderen Quellen nutzen und diese z.B. von der link:https://exchange.checkmk.com/[{CMK} Exchange^] heruntergeladen haben.
Das Thema betrifft Sie, wenn eines, einige oder gar alle dieser Check-Plugins noch der alten Check-API folgen.
Die betroffenen Dateien finden Sie in den xref:local_files[lokalen Dateien] Ihrer Instanz.

*Was müssen Sie tun?* Wir versuchen Ihnen den Umstieg auf die neue Check-API so leicht und komfortabel wie möglich zu machen:

So wie beim Update auf die Version {v20} versucht {CMK} auch beim Update auf die Version {v21} alle lokalen Plugins aus den Verzeichnissen `~/local/share/check_mk/checks` und `~/local/share/check_mk/inventory` automatisch auf die neue Check-API zu migrieren.
Diese „Automigration“ passiert zur Laufzeit; die Plugin-Dateien werden nicht verändert.
Wie Sie sich nach dem Update die Ergebnisse anzeigen lassen können, erfahren Sie im Kapitel xref:automigration[Automigration auf die Check-API überprüfen].

Die Chancen stehen zwar gut, dass die Automigration Ihrer Check-Plugins reibungslos funktioniert, dennoch erfordert die ebenfalls in der Version {v20} durchgeführte Umstellung auf Python 3 möglicherweise einige Anpassungen.
Durch die neue Check-API und die Code-Basis Python 3 gibt es gleich zwei gute Gründe, Ihre selbstgeschriebenen Check-Plugins zu überarbeiten.
Wir informieren Sie ausführlich über die notwendigen Schritte im link:https://blog.checkmk.com/de/migration-von-checkplugins-auf-checkmk-2.0[Blogpost zur Migration von Check-Plugins.^]

Zu guter Letzt punktet die neue Check-API mit verbesserter Dokumentation:
Es gibt einen einführenden Artikel zur xref:devel_check_plugins#[Programmierung eigener Check-Plugins] und die stets aktuelle Plugin-API-Referenzdokumentation.
Beides können Sie über die {CMK}-Oberfläche aufrufen -- im [.guihint]#Help#-Menü der Navigationsleiste unter [.guihint]#Developer resources.#


// {v20} Thema - auch gültig für {v21}
[#incompatible_mkps]
=== Inkompatible und obsolete MKPs

Über die xref:glossar#mkp[{CMK}-Erweiterungspakete (MKPs)] lässt sich Ihr Monitoring-System recht einfach und bequem erweitern.
Auf der einen Seite kommt es dabei vor, dass solche MKPs nicht weiter gepflegt werden und dann ggf. mit neuen Versionen von {CMK} nicht mehr kompatibel sind.
Auf der anderen Seite nehmen wir immer wieder neue Plugins und Funktionserweiterungen in {CMK} auf, weshalb MKPs mitunter obsolet werden.
Ihre Funktionalität wird schlicht von {CMK} selbst sichergestellt.

*Betrifft Sie das?* Falls Sie MKPs installiert haben, ist aus diesem Grund eine Prüfung dieser MKPs dringend geboten -- besonders vor einem umfangreichen Update.
So verhindern Sie, dass inkompatible Pakete das Update behindern oder im Anschluss an das Update doppelte oder zumindest sehr ähnliche Services entstehen.

*Was müssen Sie tun?* Prüfen Sie hierzu Ihre installierten MKPs gegen unseren link:https://checkmk.com/de/integrations[Katalog der Check-Plugins^] und entfernen Sie Pakete, welche inzwischen nativ von {CMK} bereitgestellt werden.
Bei dieser Gelegenheit können Sie auch MKPs entfernen, die eventuell nur mal für einen Probelauf installiert worden sind.
Eine Auflistung finden Sie über [.guihint]#Setup > Maintenance > Extension packages#.
// MA: Hier würde ich der Einfachheit halber einen Screenshot erwarten.
Auf der Kommandozeile können Sie sich installierte Erweiterungen mit dem folgenden Befehl anzeigen lassen:

[{shell}]
----
{c-omd} mkp list
my_mkp_from_exchange
my_peronal_mkp
----

Zu jedem gelistetem MKP können Sie dann in der Folge auch die Dateien anzeigen lassen, die zu dem Paket gehören:

[{shell}]
----
{c-omd} mkp list my_personal_mkp
/omd/sites/mysite/local/lib/check_mk/base/plugins/agent_based/check_mk.py
/omd/sites/mysite/local/share/check_mk/web/plugins/metrics/custom_metrics.py
----

Sollten Sie über die Prüfung der installierten MKPs und dem Abgleich mit unserem Katalog nicht alle Pakete zuordnen können, empfiehlt sich der hiernach beschriebene xref:dry_run[Probelauf des Updates,] um dabei Inkompatibilitäten zu identifizieren und dann in Ihrem produktiven Monitoring vor dem Update zu entfernen.


// {v20} Thema - auch gültig für {v21}
[#incompatible]
=== Inkompatible Änderungen

Wie in jeder {CMK} Version, so gibt es auch in der aktuellen Version {v21} Änderungen der Software, die Rückwirkungen auf ihre {CMK}-Installation haben _können_.
Eine sogenannte _inkompatible Änderung_ erfordert, dass Sie manuelle Anpassungen durchführen, um bestehende Funktionen weiterhin wie gewohnt ablaufen zu lassen und/oder neue Funktionen nutzen zu können.

*Betrifft Sie das?* In aller Regel wird es inkompatible Änderungen geben, die auch Ihre {CMK}-Installation betreffen.
Eine generelle Aussage ist aber leider unmöglich.
In diesem Artikel haben wir diejenigen Themen zusammengetragen, die für alle oder die meisten {CMK}-Installationen zutreffen.
Es kann aber sein, dass es darüber hinaus weitere, für Sie relevante Änderungen gibt, zum Beispiel bei Checks, die Sie in Ihrer Installation verwenden.

*Was müssen Sie tun?* Nachdem Sie das xref:update[Update] durchgeführt haben, werden Ihnen in der {CMK}-Oberfläche Anzahl und Inhalt der inkompatiblen Änderungen angezeigt, und Sie werden aufgefordert, diese zu prüfen und zur Kenntnis zu nehmen.
Also werden Sie auf jeden Fall mit diesem Thema konfrontiert werden -- allerdings erst, nachdem Sie das Update durchgeführt haben.

Es ist daher eine gute Idee, sich bereits *vor* dem Update einen Überblick über die inkompatiblen Änderungen zu verschaffen:
Öffnen Sie die Liste der link:https://checkmk.com/de/werks?search=&cmk_version$$[$$$$]$$=2.1&compatible=0[Werks.^]
(Die Software-Entwicklung von {CMK} ist in sogenannten Werks organisiert.)
In der Beschreibung eines Werks finden Sie Hinweise, was gegebenenfalls zu tun ist, um die Änderung kompatibel zu machen.

Die frustrierende Nachricht:
Die Werkliste einer Version ist sehr, sehr lang -- selbst wenn sie nur die inkompatiblen Änderungen enthält.
Die tröstliche Nachricht:
An der Anzahl der Änderungen können Sie sehen, wie groß unsere Anstrengungen sind, {CMK} für Sie zu verbessern.


[#update]
== Update

[#dry_run]
=== Best Practises beim Update

Im Folgenden beschreiben wir bewährte Vorgehensweisen (_best practises_), welche wir selbst bei Updates von großen {CMK}-Umgebungen befolgen.
Diese sind sicherlich nicht in jeder Umgebung Pflicht, Sie können Ihnen den Prozess des Updates jedoch erleichtern.


==== Betriebssystem aktualisieren

Das Betriebssystem auf einem {CMK}-Server sollte ohnehin immer auf dem aktuellen Stand sein.
Vor einem Update von {CMK} schadet es aber bestimmt nicht, sich dessen noch einmal zu versichern:
mithilfe von `apt` (für Debian und Ubuntu), `yum` (für Red Hat Enterprise Linux (RHEL) basierte Systeme) oder `zypper` (für SUSE Linux Enterprise Server).


==== {CMK}-Version aktualisieren
// Werk #13320: omd update: Add version compatibility barrier

Vor dem Update auf die Version {v21} muss auf der {CMK}-Instanz die Version {v20} installiert sein.

Wir haben bereits früher von einem Update mit Auslassung einer Hauptversion abgeraten, da es dazwischen einfach zu viele Änderungen gibt, die ein reibungsloses Update behindern und mit großer Wahrscheinlichkeit zu Problemen führen.
Mit link:https://checkmk.com/de/werk/13320[Werk #13320^] wird aus dieser Empfehlung nun eine Voraussetzung -- und eine Sperre eingeführt, die zum Beispiel ein direktes Update von Version {v16} auf {v21} verhindert.

Ein Update auf die Version {v21} setzt zurzeit keine bestimmte {v20} Patch-Version voraus.
Es gibt jedoch auch hier gute Gründe, den Sprung auf die {v21} nur von der neuesten {v20} Patch-Version aus zu starten, da z.B. ein {v20} Patch Korrekturen enthalten kann, die das Update auf die Version {v21} erleichtern.

Daher empfehlen wir, zuerst {CMK} auf die neueste {v20} Patch-Version zu aktualisieren und erst dann das Update auf die {v21} durchzuführen.


==== Probelauf des Updates durchführen

In großen Umgebungen, in denen auch das Zurückspielen eines selbstverständlich vorhandenen Backups Ihrer {CMK}-Umgebung mit einem gewissen zeitlichen Aufwand verbunden wäre, empfiehlt es sich, vor dem Update der produktiven Umgebung, einen Test mit einer geklonten Instanz durchzuführen.
Zu diesem Zweck können Sie beispielsweise das letzte reguläre Backup Ihrer Instanz unter einem anderen Namen wiederherstellen.

[{shell}]
----
{c-root} omd restore newsite /path/to/backup
----

*Alternativ* können Sie Ihre Instanz auch per `omd cp` kopieren.
Dafür muss die Instanz allerdings kurzzeitig gestoppt werden:

[{shell}]
----
{c-root} omd stop mysite
{c-root} omd cp mysite newsite
----

Führen Sie das Update im Anschluss erst einmal auf dieser neuen geklonten Instanz durch, um hier beispielsweise die oben angesprochenen lokalen Änderungen in der neuen Umgebung zu prüfen.


[#automatic_agent_updates]
==== Agenten-Update vorübergehend abschalten

{cee-only}
Wenn Sie die automatischen Agenten-Updates verwenden, sollten Sie überlegen, diese vor dem Update von {CMK} vorübergehend zu deaktivieren, um den Wechsel auf die neuen Agenten bei den Hosts später kontrolliert vollziehen zu können.
Dazu wählen Sie zuerst [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX# und auf der folgenden Seite den Menüeintrag [.guihint]#Agents > Automatic updates.#
Durch Klick auf den Knopf icon:icon_edit[alt="Symbol zum Bearbeiten eines Listeneintrags."] vor dem [.guihint]#Master switch# können Sie das Agenten-Update komplett abschalten:

image::update_major_automatic_agent_updates.png[alt="Abschaltung des Agenten-Updates per Hauptschalter."]

Nach dem erfolgreichen Update von {CMK} können Sie das Agenten-Update auf gleichem Weg wieder anschalten.

Wir empfehlen an dieser Stelle das automatische Agenten-Update erstmal nur für einzelne Hosts oder Host-Gruppen wieder zu aktivieren.
Auf diese Weise wird der neue Agent nicht gleich auf all Ihre Server ausgerollt und Sie können sich auf einigen wenigen Systemen mit den neu angelieferten Daten vertraut machen.
Auch aufgrund der deutlich gestiegenen Zahl an mitgelieferten Check-Plugins könnten Sie eine ganze Reihe neuer Services finden, welche Sie dann auf den von Ihnen gewählten Testsystemen richtig einstellen können.
Eventuell sind für neue Services auch neue Schwellwerte vonnöten.
Wenn Sie dies erst einmal im Kleinen angehen, ersparen Sie schnell einige Fehlalarme.

Auf der oben angegebenen Seite können Sie dafür einfach ein paar Hosts oder Host-Gruppen in die entsprechenden Felder eintragen und dann den [.guihint]#Master switch# wieder aktivieren.

image::update_major_activate_update_on_selected_hosts.png[alt="Optionen beim Agenten-Update zur Aktivierung auf bestimmten Hosts."]

*Wichtig:* Denken Sie daran, diese Einschränkungen auf explizite Hosts und Host-Gruppen wieder zu entfernen, sobald Sie mit den Ergebnissen zufrieden sind.


[#notifications]
==== Benachrichtigungen vorübergehend abschalten

Sie sollten auch überlegen, xref:glossar#notification[Benachrichtigungen] in der Instanz vor dem Update abzuschalten -- aus ähnlichen Gründen, die wir im vorherigen Abschnitt zu den automatischen Agenten-Updates erklärt haben.
So vermeiden Sie, dass Ihre Kollegen aus dem Monitoring-Team _unnötige_ Benachrichtungen erhalten.

Die Benachrichtigungen können Sie zentral im Snapin xref:user_interface#master_control[Master control] mit dem Hauptschalter [.guihint]#Notifications# abschalten.

Es kann durchaus vorkommen, dass nach dem Update der eine oder andere Service {CRIT} ist, der dies vorher nicht gewesen ist.
Kümmern Sie sich nach dem Update zuerst um neu auftretende Probleme.
Die unbehandelten Probleme (_unhandled problems_) können Sie sich z.B. im Snapin xref:user_interface#overview[Overview] anzeigen lassen.

*Wichtig:* Vergessen Sie nicht, die Benachrichtigungen wieder einzuschalten, z.B. dann, wenn sich die Zahl der unbehandelten Probleme nach dem Update auf das Niveau vor dem Update eingepegelt hat.


[#update_distributed_monitoring]
=== Update im verteilten Monitoring
// Werk #13313: Distributed monitoring: Improve version compatibility validation
// TK: Abschnitte auflösen: Empfohlenes Vorgehen als intro, Sukzessives Vorgehen raus, Vorgehen im laufenden Betrieb als "Standard"

Es gibt unterschiedliche Vorgehensweisen, um das Update der in einem xref:distributed_monitoring#[verteilten Monitoring] beteiligten Instanzen durchzuführen, d.h. der Zentralinstanz und der Remote-Instanzen.

*Wichtig:* Für welches Vorgehen Sie sich auch entscheiden:
Sie sollten auch in diesem Szenario vorher xref:backup#[Backups] anlegen.

Das empfohlene, sichere Vorgehen ist das _Update in einem Rutsch_, bei dem Sie folgende Schritte ausführen:

. Alle Instanzen stoppen.
. Das Update für alle Instanzen durchführen.
. Die aktualisierten Instanzen wieder starten.

////
// TK: Sukzessives Vorgehen ist obsolet
==== Sukzessives Vorgehen
Das Standardvorgehen verlangt bei größeren Installationen gute Planung und ein wenig Zeit -- das Monitoring wird einige Zeit offline sein.
Alternativ können Sie jegliche Konfigurationsänderungen über eine globale Einstellung unterbinden, sodass nur noch der Admin manuell Änderungen durchführen kann.
Auf diese Weise können Sie dann nach und nach Instanzen aktualisieren.
Rufen Sie dazu in der zentralen {v20}-Instanz [.guihint]#Setup > General > Read only mode# auf und aktivieren Sie den Nur-Lesen-Modus:

image::update_20_readonly.png[]

Sie können den Modus dauerhaft oder für eine bestimmte Zeitspanne aktivieren und eine zusätzliche Erklärung anhängen.
So lange der Modus aktiv ist, sehen alle Nutzer in allen Einstellungsdialogen folgenden Warnhinweis -- inklusive Ihrer Begründung:

image::update_20_readonly_warning.png[]

Den Hinweis [.guihint]#But you are allowed to make changes anyway.# sehen natürlich nur Sie als Admin.
////

Es gibt noch eine andere Variante: das _Update im laufenden Betrieb._
Dieses Vorgehen wird unter anderem dann benötigt, wenn man eine große Menge von verteilten Instanzen verwaltet, die aus technischen oder organisatorischen Gründen nicht in einem Rutsch aktualisiert werden können.

Bei einem Update im laufenden Betrieb müssen Instanzen mit unterschiedlichen {CMK}-Versionen für eine Übergangszeit miteinander kommunizieren -- solange, bis das Update aller beteiligten Instanzen abgeschlossen ist.
Damit diese Zusammenarbeit klappt, müssen die in diesem Mischbetrieb beteiligten Versionen kompatibel sein.

Mit link:https://checkmk.com/de/werk/13313[Werk #13313^] wurden Versionsprüfungen hinzugefügt, die sicherstellen, dass die beteiligten Instanzen kompatible Versionen verwenden.
Die Kurzfassung ist:
Instanzen müssen die gleiche Hauptversion haben -- mit einer Ausnahme: die {CMK}-Version einer Remote-Instanz darf um genau eine Hauptversion höher sein als die der Zentralinstanz.
Die folgende Tabelle zeigt die möglichen Kombinationen beim Update von {v20} zur {v21}:

[cols="40,40,~",options="header"]
|===
|Zentralinstanz |Remote-Instanz |Erlaubt?
|{v20} |{v20} |Ja
|{v20} |{v21} |Ja
|{v21} |{v20} |*Nein*
|{v21} |{v21} |Ja
|===

// TK: Nicht erwähntes Detail: Bei gleicher Hauptversion können laut Werk die Patch-Versionen unterschiedlich sein.
// TK: Nicht erwähntes Detail: Wenn CME verwendet wird, müssen alle Instanzen CME haben.
Aus diesen Regeln folgt, dass bei einem Update im laufenden Betrieb die Zentralinstanz zuletzt aktualisiert wird.
Beachten Sie, dass auch beim Update im verteilten Monitoring gilt: Hauptversionen dürfen nicht ausgelassen werden, sodass z.B. eine Verbindung zwischen einer {v16} und einer {v21} Instanz nicht unterstützt wird.

*Hinweis:* Da sich der Funktionsumfang verschiedener {CMK}-Versionen unterscheidet, kann es sein, dass einige Features von {CMK} in diesem Mischbetrieb nicht oder nur eingeschränkt funktionieren.
In einem Mischbetrieb können auch bei kompatiblen Versionen Probleme auftreten und ein reibungsloses Zusammenspiel ist nur dann gesichert, wenn alle Instanzen die gleiche Hauptversion haben.
Sie sollten daher den Zeitraum eines Mischbetriebs mit verschiedenen Versionen möglichst kurz halten und nach dem Start des Updates alle Instanzen zügig aktualisieren.


=== Das Update durchführen

Am eigentlichen Update der Software hat sich in der {CMK} {v21} nichts Grundlegendes geändert, d.h. Sie installieren die neue Version, führen das Update der {CMK}-Instanz durch, kümmern sich um Konflikte (falls es denn welche geben sollte) und überprüfen und bestätigen die inkompatiblen Änderungen.

Führen Sie die Update-Prozedur so aus, wie sie im xref:update#detailed[Artikel zu Updates und Upgrades] beschrieben ist.


[#follow-up]
== Nachbereitungen

[#gui]
=== Änderungen der Benutzeroberfläche
// Werk #13736 - Remove obsolete sidebar snapins

Die Benutzeroberfläche (GUI) von {CMK} wurde mit Version {v20} komplett neu gestaltet.
In der neuen Version {v21} wird sie Ihnen dagegen sehr vertraut vorkommen, denn es hat kaum Änderungen im Vergleich zur {v20} gegeben, die auf den ersten Blick sichtbar sind.
Allerdings haben sich Menüs, Menüeinträge und andere Details geändert, um neue Funktionen verfügbar zu machen -- und bestehende zu verbessern.

In den Artikeln dieses Handbuchs stellen wir Ihnen diese Änderungen vor und im xref:intro_welcome#[Leitfaden für Einsteiger] finden Sie eine ausführliche Einführung in die wichtigsten Elemente der xref:intro_gui#[Benutzeroberfläche.]


==== Entfernte Snapins für die Seitenleiste

Mit link:https://checkmk.com/de/werk/13736[Werk #13736^] wurden einige veraltete und wenig genutzte xref:glossar#snapin[Snapins] für die Seitenleiste entfernt.
Für fast alle dieser Snapins gibt es Ersatz, meist über Menüeinträge der xref:glossar#navigation_bar[Navigationsleiste.]


[#automigration]
=== Automigration auf die Check-API überprüfen
// Werk #10601: Auto migration of check plugins to new section definitions

Sie können überprüfen, ob alle lokalen Plugins aus den Verzeichnissen `~/local/share/check_mk/checks` und `~/local/share/check_mk/inventory` automatisch auf die neue xref:check-api[Check-API] migriert werden können.

*Betrifft Sie das?* Diese Überprüfung ist sinnvoll, wenn in Ihren lokalen Dateien Check-Plugins existieren, die nach der alten, bis zur Version {v16} gültigen Check-API programmiert wurden.

*Was müssen Sie tun?* Führen Sie als Instanzbenutzer das folgende Kommando aus:

[{shell}]
----
{c-omd} cmk -R
Failed to auto-migrate legacy plugin to check plugin: mssql_counters
Please refer to Werk 10601 for more information.
----

Die Meldung oben zeigt, dass ein Plugin nicht automatisch migriert werden konnte.
Alle gelisteten Plugins müssen von Ihnen manuell migriert werden.
Es gibt einige Gründe, aus denen eine Automigration nicht durchgeführt werden kann und die Sie im genannten link:https://checkmk.com/de/werk/10601[Werk #10601^] nachlesen können.
Wie Sie die manuelle Migration durchführen, erfahren Sie im link:https://blog.checkmk.com/de/migration-von-checkplugins-auf-checkmk-2.0[Blogpost zur Migration von Check-Plugins.^]


[#service_discovery]
=== Services aktualisieren

Wie jede Hauptversion, so bringt auch {CMK} {v21} eine ganze Reihe neuer Check-Plugins mit sich.
Sollten Sie den xref:wato_services#discovery_check["Discovery Check"] nicht einsetzen, d.h. das automatische Update der Service-Konfiguration über die periodische Service-Erkennung, werden Sie auf einer ganzen Reihe von Hosts die Suche nach Services durchführen müssen.

Wenn Ihre Hosts entsprechend organisiert sind (z.B. in Ordnern), können Sie hierfür zumeist mit der Funktion [.guihint]#Bulk discovery# arbeiten.
Diese finden Sie unter [.guihint]#Setup > Hosts > Hosts# und dann im Menü [.guihint]#Hosts > Discover services.#

Im Folgenden listen wir einige Bereiche mit den meisten Neuerungen auf.


[#service_check_mk_agent]
==== Check_MK und Check_MK Agent
// Werk #13849: Add Check_MK service for hosts without passive services
// Werk #13697: "Check_MK Agent" service: Combine with new plugin service

image::update_major_check_mk_services.png[alt="Die beiden Services 'Check_MK' und 'Check_MK Agent' im Monitoring."]

Die Services [.guihint]#Check_MK# und [.guihint]#Check_MK Agent# heißen zwar noch genauso wie in der Version {v20}, haben aber in der {v21} teilweise eine andere Bedeutung:

* Der Service [.guihint]#Check_MK Agent# ist nun immer präsent und liefert alle Informationen, die mit der Agentenverteilung (_agent deployment_) zu tun haben, wie die Version des Agenten, der Zeitpunkt des letzten Updates, die Zahl von Agentenplugins und lokalen Checks, oder die Beschränkung der IP-Adressen.
Bisher kümmerte sich dieser Service nur um die Agenten-Updates -- und war auch nur dann verfügbar, wenn Agenten-Updates eingerichtet waren.

* Auch der Service [.guihint]#Check_MK# ist nun immer da --  vorher war er es nur dann, wenn auf dem Host passive Services liefen.
Der Service [.guihint]#Check_MK# kümmert sich nun ausschließlich um den Zustand der verwendeten Agenten im laufenden Betrieb (_operational state_).
Er meldet z.B. Verbindungsfehler oder fehlende Daten und zeigt die Ausführungszeit.


[#cluster_services]
==== Cluster-Services
// Werk #12908: Add predefined cluster modes for all services
// Das Thema ist hier eigentlich nicht richtig einsortiert, da es hier nicht um neue Services geht, sondern um den Zustand existierender Services.

Mit {CMK} Version {v21} verändert sich das Verhalten einiger xref:clustered_services#[Cluster-Services].
Betroffene Services nehmen den Zustand {UNKNOWN} an und erfordern eine Anpassung der Konfiguration.

{CMK} kennt vier Cluster-Modi:

* _Best_ (der Wert der besten Node bestimmt den Gesamtzustand)
* _Worst_ (analog: Wert der schlechtesten Node)
* _Failover_ (nur eine Node darf {OK} liefern)
* _Natives Clustering_ per API-Funktion (frei programmierbar, z.B.: _80% der Nodes müssen {OK}_ sein, damit der Cluster OK ist)

Legacy-Plugins, welche die alte Check-API nutzen, verfügten bislang über eine zusätzliche implizite Cluster-Möglichkeit, bei der die Ausgabe der zugeordneten Hosts lediglich der Reihe nach ausgewertet wurde und der letzte erhaltene Einzelzustand den Gesamtzustand des Clusters bestimmte.
Da dieses Verhalten nicht verlässlich war, wurde es in {v21} entfernt.

Im Zuge der Portierung auf {v21} haben wir bei einigen mitgelieferten Check-Plugins den zur {v20} nachgerüsteten _nativen Cluster-Modus_ wieder entfernt, wenn er nicht sinnvoll war.
Stattdessen haben wir als Standard eines der Verhalten _best_, _worst_ oder _failover_ ausgewählt.
link:https://checkmk.com/de/werk/12908#[Diese Liste^] zeigt betroffene Plugins und das neue Standardverhalten.
Ebenfalls betroffen sind selbst programmierte oder aus der link:https://exchange.checkmk.com[{CMK} Exchange^] bezogene Plugins, die keine API-Integration für den nativen Cluster-Modus verwenden.

All diese Dienste nehmen nach dem Update auf {v21} den Zustand {UNKNOWN} an, wenn der einst ausgewählte Cluster-Modus nicht mehr unterstützt wird.
Verwenden Sie in diesen Fällen die Regel [.guihint]#Aggregation options for clustered services#, um einen der drei Cluster-Modi _best_, _worst_ oder _failover_ zu definieren.


[#service_descriptions]
==== Service-Beschreibungen
// MFS: Eigentlich wäre "Service-Namen" passender, es steht aber überall "Service Description" 

Jedes Update von {CMK} bedeutet, dass Service-Beschreibungen geändert werden, um die Konsistenz der Benennung innerhalb des Monitorings und der Dokumentation von {CMK} zu verbessern.
Da die Änderung von Service-Beschreibungen bedeutet, dass mitunter Regeln angepasst werden müssen und historische Monitoring-Daten verloren gehen, belässt {CMK} bei Updates zunächst die alten Beschreibungen.
Sie sollten bei Services, bei denen Verlust alter Monitoring-Daten zu verschmerzen und der Aufwand für die Anpassung von Regeln überschaubar ist, zeitnah auf neue Service-Beschreibungen umstellen.

Gehen Sie hierfür in [.guihint]#Setup > General > Global Settings > Execution of checks# die Liste [.guihint]#Use new service descriptions# durch und identifizieren Sie die Services, bei denen die Checkboxen noch nicht aktiv sind und aktivieren Sie diese.
Nach Anwenden der Änderungen sind die neuen Service-Beschreibungen aktiv und es werden wenige Minuten vergehen, bis Sie wieder definierte Zustände der betroffenen Services im Monitoring sehen.

[#new_ports]
=== Neue Ports

Um die xref:agent_registration[TLS-Registrierung] von Hosts im Monitoring durchzuführen, benötigen diese Zugriff auf die Ports 443 (respektive 80) für REST-API-Anfragen und Port 8000 (neue Komponente _Agent Receiver_).
Achten Sie gegebenenfalls darauf, Routing- und Firewall-Einstellungen dahingehend anzupassen, dass die betreffenden Hosts auf diese Ports des {CMK}-Servers zugreifen können.

Sollten Sicherheitsrichtlinien dagegen sprechen, diese Ports verfügbar zu machen, können Sie eine xref:agent_linux#proxyregister[Registrierung im Auftrag] direkt auf dem {CMK}-Server durchführen.


[#agent_registration]
=== Agenten für TLS registrieren

Nach der Aktualisierung der Agenten auf {v21} nimmt der Dienst [.guihint]#Check_MK Agent# für die betreffenden Hosts den Status {WARN} an und zeigt die Meldung _TLS is not activated on monitored_ Host.
In den beiden Artikeln zum xref:agent_linux#[Linux-] und xref:agent_windows#[Windows-]Agenten beschreiben wir die Registrierung der verwendeten Zertifikate mit dem Kommandozeilenwerkzeug `cmk-agent-ctl`.
Dieses Werkzeug stellt auch viele Optionen zur automatischen Registrierung bereit -- beispielsweise per Postinstall-Snippet in xref:bakery_api#[Bakery Plugins].

Falls für einen Übergangszeitraum unverschlüsselte Datenübertragung für den Parallelbetrieb von {v20}-Servern in einer {v21}-Umgebung erwünscht ist, passen Sie den Regelsatz [.guihint]#Checkmk Agent installation auditing# an, damit der Service [.guihint]#Check_MK Agent# trotz fehlender Registrierung den Status {OK} annehmen kann.


[#kubernetes]
=== Das neue Kubernetes-Monitoring

Das Kubernetes-Monitoring wurde in {CMK} {v21} von Grund auf neu geschrieben und ermöglicht nun eine vereinfachte und effiziente Überwachung.
Da sich die Architektur in Version {v21} grundlegend geändert hat, ist eine Übernahme oder Weiterschreibung bisheriger Monitoring-Daten Ihrer Kubernetes-Objekte aus früheren {CMK}-Versionen leider nicht möglich.

*Betrifft Sie das?* Das betrifft Sie, wenn Sie in der Version {v20} den {CMK}-Spezialagenten zur Überwachung von Kubernetes verwendet haben.
Der alte Spezialagent und die zugehörigen Check-Plugins werden zwar in der Version {v21} noch funktionieren, aber anschließend aus {CMK} xref:kubernetes_20[entfernt werden.]
Wir empfehlen daher den kompletten Umstieg auf das neue, stark verbesserte Kubernetes-Monitoring der Version {v21}.

*Was müssen Sie tun?* Setzen Sie das Kubernetes-Monitoring komplett neu auf, wie es im Artikel zur xref:monitoring_kubernetes#[Überwachung von Kubernetes] beschrieben ist.


[#encrypt_notification_spooler]
=== Benachrichtigungs-Spooler verschlüsseln
// Werk #13610: Notification spooler connections can now be encrypted

*Betrifft Sie das?*
Wenn Sie verteiltes Monitoring mit xref:notifications#async[zentraler Benachrichtigung] verwenden, profitieren Sie von erhöhter Sicherheit bei Aktivierung der Transportverschlüsselung des Notification Spooler `mknotifyd`.

*Was müssen Sie tun?*
Bei der Aktualisierung vorhandener {CMK}-Installationen bleiben bereits konfigurierte Verbindungen zunächst ohne Verschlüsselung weiter nutzbar.
Allerdings wird in diesem Fall [.guihint]#Analyze configuration# die Einstellung mit {CRIT} bemängeln.
Ändern Sie nach Migration aller beteiligten Instanzen auf {v21} die Option [.guihint]#Global settings > Notification spooler configuration > Encryption# auf die Einstellung [.guihint]#Encrypt communication with TLS#.
Neue Verbindungen verwenden bei der Erstellung automatisch die TLS-Verschlüsselung.


[#rest-api]
=== REST-API ersetzt Web-API
// Werk #13640: Deprecation of Web API

Die Web-API (auch xref:web_api#[HTTP-API] genannt) ist abgekündigt und wird in der nächsten {CMK}-Version xref:web-api[entfernt werden.]
Ersatz steht bereit mit der in Version {v20} eingeführten xref:rest_api#[REST-API.]

*Betrifft Sie das?* Das betrifft Sie, falls Sie eigene Skripte geschrieben haben, die die Web-API nutzen.

Die Web-API wird in der {CMK}-Version weiterhin funktionieren
und in bestehenden Instanzen, die von der Version {v20} auf {v21} aktualisiert werden, bleibt die Web-API eingeschaltet.
In Instanzen, die mit der Version {v21} neu erstellt werden, ist die Web-API bereits in den [.guihint]#Global settings# abgeschaltet.
Den Schalter zum Ein- und Ausschalten der Web-API finden Sie unter [.guihint]#Setup > General > Global settings > Site management > Disable Web API.#

*Was müssen Sie tun?* Wir empfehlen, alle bestehenden Skripte, die die Web-API verwenden, so bald wie möglich auf die REST-API zu migrieren, um Probleme frühzeitig zu erkennen, bevor Sie auf die {CMK}-Version {v22} umsteigen.

Die REST-API bietet bereits jetzt Zugriff zu mehr Bereichen in {CMK} als die Web-API, z.B. zu Host-Status, Service-Status, Wartungszeiten, Zeitperioden, Quittierung von Problemen und der Business Intelligence (BI).

Die in der REST-API noch fehlenden Funktionen zum Zugriff auf Instanzen im verteilten Monitoring und auf Metriken und Graphen werden in {v21} Patch-Versionen nachgeliefert, sodass im Laufe der Zeit alle Funktionen zur Verfügung stehen, die auch in der Web-API genutzt werden konnten.


[#outlook]
== Ausblick

In diesem Kapitel geht es um Themen, die nicht die aktuelle {CMK} Version {v21}, sondern eine der darauf folgenden Versionen betreffen.


[#web-api]
=== Die Web-API wird entfernt
// Werk #13640: Deprecation of Web API

Die Web-API (auch HTTP-API genannt) wird in der nächsten {CMK}-Version {v22} entfernt.
Die Web-API wird ersetzt durch die in der {v20} eingeführte xref:rest-api[REST-API].


[#kubernetes_20]
=== Der alte Kubernetes Spezialagent wird entfernt
// Werk #13561: agent_kubernetes: deprecate special agent and associated checks

Der {CMK} {v20} Spezialagent für das Kubernetes-Monitoring und die zugehörigen Check-Plugins werden in der nächsten {CMK}-Version {v22} entfernt.
Details finden Sie im link:https://checkmk.com/de/werk/13561[Werk #13561^].
Ersatz gibt es in Version {v21} mit dem komplett xref:kubernetes[neuen Kubernetes-Monitoring.]


[#nsca]
=== NSCA wird nicht mehr unterstützt
// Werk #13644: Deprecating NSCA as part of Checkmk
// TK: In der {v22} müssen dann NSCA-Texte entfernt werden, und zwar in:: distributed_monitoring, wato_services, cmc_migration, support_diagnostics

Die Unterstützung für den Nagios Service Check Acceptor (NSCA) wird in der nächsten {CMK}-Version {v22} entfernt.

NSCA ist ein Nagios Add-on, um Ergebnisse xref:wato_services#passive_checks[passiver Checks] von fernen Hosts in einer verteilten Nagios-Konfiguration zu erhalten.
Dieses veraltete Verfahren zum Aufbau eines xref:distributed_monitoring#[verteilten Monitoring] bietet gegenüber den {CMK}-eigenen Verfahren keine Vorteile.

Details und Hinweise zum Ersatz finden Sie im link:https://checkmk.com/de/werk/13644[Werk #13644^].


[#hw_sw_inventory_plugin_api]
=== Die alte HW/SW-Inventur Plugin-API wird nicht mehr unterstützt
// Werk #14084: Deprecate old HW/SW inventory plugin API

Die Unterstützung der alten Plugin-API für die HW/SW-Inventur wird in der nächsten {CMK}-Version {v22} entfernt.

Die dieser API folgenden Plugins befinden sich im Instanzverzeichnis unter `~/share/check_mk/inventory` und (als lokale Dateien) unter `~/local/share/check_mk/inventory`.
Diese Plugins funktionieren in der Version {v21}, werden aber ab der Version {v22} ignoriert werden.

// TK: Diese benutzerdefinierten Plugins müssten doch alle in ~/local/share/check_mk/inventory liegen, oder?
// MA: Das neue Verzeichnis ist ~/local/lib/check_mk/base/plugins/agent_based/
Falls Sie benutzerdefinierte Plugins nutzen, migrieren Sie diese auf die neue Check-API bevor Sie auf die Version {v22} wechseln.
Im link:https://checkmk.com/de/werk/14084[Werk #14084^] finden Sie weitere Details und Informationen zur Migration.
