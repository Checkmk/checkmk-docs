//encoding: utf-8
// IGNORE TBD p22 p23 pN
include::global_attr.adoc[]
= Update auf Version {v22}
:revdate: draft
:title: Update auf Version {v22}
:description: Was es beim Update von {CMK} Version 2.1.0 auf 2.2.0 zu beachten gibt, erfahren Sie in diesem Artikel.

{related-start}
xref:update#[Updates und Upgrades]
xref:install_packages#[Grundsätzliches zur Installation von {CMK}]
{related-end}


[#intro]
== Einleitung

In diesem Artikel finden Sie die wichtigsten Themen, die für das Update Ihrer {CMK}-Version {v21} auf {v22} relevant sind.

Wir empfehlen Ihnen, vor dem Update den kompletten Artikel durchzulesen, damit Sie genau wissen, was auf Sie zukommt: vor, während und nach dem Update.


[#prep]
== Vorbereitungen

In diesem Kapitel erhalten Sie die Übersicht der Themen, um die Sie sich kümmern sollten, bevor Sie das Update durchführen.
Wahrscheinlich wird nicht jedes der Themen für Sie relevant sein:
Bei einem solchen können Sie intern einen Haken setzen und sich gleich das nächste Thema vornehmen.


[#backup]
=== Backup

Wie vor jedem Update einer produktiven Software sollten Sie auch vor dem von {CMK} die Aktualität Ihrer Backups prüfen.

*Betrifft Sie das?*
Ja.

*Was müssen Sie tun?*
Wenn Sie Ihre Backups automatisiert über [.guihint]#Setup > Maintenance > Backups# erstellen, prüfen Sie dort, ob die letzten Backup-Aufträge fehlerfrei durchgelaufen sind.

Weitere Informationen finden Sie in den Artikeln zu xref:backup#[Backups] und zum Thema xref:omd_basics#omd_backup_restore[Instanzen sichern und wiederherstellen.]


[#editions]
=== Auswahl der {CMK}-Edition

_TBD..._


[#linux_versions]
=== Linux-Distributionsversionen
// https://checkmk.com/werk/13012 - Werk #13012: Add support for Ubuntu 22.04
// TK: Für abgekündigte Linux-Distros gab es in der 2.0.0 (inkompatible) Werks: #10315+#10317 SLES 12 SP1+SP2, Werk #10312 Ubuntu 18.10, Werk #11957 Ubuntu 19.10
// TK: In der 2.1.0 haben wir keine abgekündigten Distros/keine Werks. Einzig Ubuntu 20.10 wurde in der 2.0 unterstützt, jetzt nicht mehr.
// MFS: 21.04 auch ab 2.0.0p4, siehe https://wiki.lan.tribe29.com/books/knowledge/page/infos-zu-linux-distros-%28versionen-cycles%29

////
In der {CMK} Version {v21} werden einige veraltete Versionen der Distribution Ubuntu nicht mehr unterstützt.
Für Nutzer von Debian, SLES und RHEL (sowie binärkompatiblen Derivaten wie CentOS) ergeben sich keine Änderungen.

*Betrifft Sie das?*
Das betrifft Sie, wenn auf Ihrem {CMK}-Server eine der folgenden, in der {v20} noch unterstützten, Ubuntu-Versionen installiert ist:

* Ubuntu 20.10 _Groovy Gorilla_
* Ubuntu 21.04 _Hirsute Hippo_

// MFS: Dass 21.10 und Debian 9 irgendwann abgekündigt werden wird, habe ich aus der Versionsgeschichte der 2.0.0-Patchlevels antizipiert.
Bei Veröffentlichung von {v21} noch unterstützt, aber nicht empfohlen:
Für Ubuntu 21.10 (_Impish Indri_) wurde während der Beta-Phase von {v21} seitens Canonical die Unterstützung mit Sicherheits-Updates eingestellt.
Auch Debian 9 (_Stretch_) wird kurz nach Veröffentlichung  von {CMK} {v21} keine Sicherheits-Updates mehr erhalten.

Neu hinzugekommen sind Debian 11 _Bullseye_ und Ubuntu 22.04 _Yammy_.
Für beide Distributionen bauen wir auch Installationspakete von {v20}, um den empfohlenen Update-Pfad zu vereinfachen.
////

// MFS: FIXME gegen Ende der Beta anpassen!
Während der Beta-Phase wird der Großteil der von {v21} unterstützten Distributionen unterstützt, um Upgrades zu erleichtern.
In der finalen {CMK} Version {v22} werden einige veraltete Distributionen dann nicht mehr unterstützt werden.
Falls Sie auf Nummer sicher gehen wollen, verwenden Sie zur (Neu-) Installation eines {CMK}-Servers eine Linux-Distribution von Debian, RHEL (und Derivaten Alma sowie Rocky Linux), SLES oder Ubuntu mit Long Term Support (LTS) über das Jahr 2023 hinaus.

Während des gesamten Produkt-Lifecycle der {v22} unterstützt werden Debian 10 und 11, RHEL 8 und 9, SLES 12 ab SP5 und 15 ab SP1, sowie Ubuntu 20.04 und 22.04.
Die Unterstützung weiterer Linux-Versionen wird während der Beta-Phase bekannt gegeben.

*Was müssen Sie tun?*
Führen Sie vor dem Update von {CMK} zuerst ein Versions-Upgrade der Linux-Distribution durch.
Achten Sie darauf, dass die Ziel-Version der Linux-Distribution von {CMK} {v21} *und* {v22} unterstützt wird.

Welche Linux-Distributionsversionen {CMK} unterstützt, erfahren Sie im xref:install_packages#supported_distributions[Artikel zur Installation] und auf der link:https://checkmk.com/download[Download-Seite^] nachdem Sie die {CMK}-Version und Ihre Linux-Distribution ausgewählt haben.

Sollte es nun notwendig sein, vor dem Update von {CMK}, ein Versions-Upgrade Ihrer Linux-Distribution vorzunehmen, so empfehlen wir die folgende Vorgehensweise:

. Stoppen Sie zunächst Ihre {CMK}-Instanz:
+
[{shell}]
----
{c-root} omd stop mysite
----

[start=2]
. Hängen Sie das `tmp`-Verzeichnis der Instanz aus:
+
[{shell}]
----
{c-root} umount /opt/omd/sites/mysite/tmp
----

[start=3]
. Verschieben Sie das gesamte `omd`-Verzeichnis, damit hieran im nächsten Schritt keine ungewollten Änderungen auftreten können.
Bei einem Release-Upgrade werden im Regelfall alle Pakete entfernt, deren Abhängigkeiten nicht mehr erfüllt werden können.
Zu diesen Paketen würde auch {CMK} gehören.
Um hier einen Datenverlust zu verhindern, ist dieser Schritt notwendig und kann per `mv` durchgeführt werden.
+
[{shell}]
----
{c-root} mv /opt/omd /opt/omd.bak
----

[start=4]
. Führen Sie das Versions-Upgrade von Linux entsprechend der Anleitung des jeweiligen Distributors durch.

. Nach der erfolgreichen Aktualisierung Ihrer Linux-Distribution müssen Sie nun das in Sicherheit gebrachte `omd`-Verzeichnis wieder an Ort und Stelle verschieben:
+
[{shell}]
----
{c-root} mv /opt/omd.bak /opt/omd
----

[start=6]
. Installieren Sie nun das zur neuen Version der verwendeten Distribution passende Paket von {CMK}.
*Wichtig:* Die Versionsnummer von {CMK} muss exakt der vorher verwendeten entsprechen.
Wenn Sie also vor dem Upgrade der Distribution {CMK} {v21}p23 verwendet haben, so installieren Sie nun die {v21}p23, die zu Ihrer neuen Linux-Distributionsversion passt.
+
Im Falle von Ubuntu würde an dieser Stelle der folgende Befehl genügen:
+
[{shell}]
----
{c-root} apt install /tmp/check-mk-enterprise-2.1.0p23_0.jammy_amd64.deb
----
+
*Hinweis:* Geben Sie bei der Installation per `apt install` den vollständigen Pfad zur DEB-Datei an.

Halten Sie sich bei der Neu-Installation von {CMK} an die jeweilige xref:install_packages#distribution_instructions[detaillierte Installationsanleitung] für Ihre Distribution.

[#browser]
=== Browser-Unterstützung

{CMK} {v22} nutzt neue Javascript-Funktionen, die in älteren Browsern nicht zur Verfügung stehen.
Unterstützt werden Chromium ab Version 111, Firefox ab Version 110 und Safari ab 16.
Internet Explorer und Edge/Trident werden nicht unterstützt.

*Betrifft Sie das?*
In der Regel werden Sie auf Desktop-Systemen automatische Updates auf die neueste Version aktiviert haben.

*Was müssen Sie tun?*
Prüfen Sie die verwendete Browser-Version und installieren Sie gegebenenfalls einen aktuelleren Browser.
Wenn Sie für die Anzeige von Dashboards _Single Board Computer_, _Smart TVs_ oder _Digital Signage Lösungen_ verwenden, auf deren Systembrowser Sie keinen Einfluss haben, testen Sie vor dem Update, ob benötigte Dashboards korrekt angezeigt werden.

[#agentlinux]
=== Der Agent für Linux

In {CMK} {v22} unterstützt der xref:agent_linux#[Linux-Agent] nicht länger Python 2.6 für Plugins.
Auf betroffenen Systemen können die Agenten-Plugins von {v21} aber weiter genutzt werden.

*Betrifft Sie das?*
Nur, wenn bei Ihnen sehr alte Linux-Systeme im Einsatz sind (Python 2.6 ist von Oktober 2008 und wurde ab Juli 2010 von Python 2.7 abgelöst) _und_ Sie auf diesen in Python geschriebene Agenten-Plugins nutzen.

*Was müssen Sie tun?*
Identifizieren Sie die betroffenen Systeme und aktualisieren Sie die installierten Agenten auf das letzte verfügbare Patch-Version der {v21}.
Falls automatische Agenten-Updates konfiguriert sind, xref:agent_deployment#deactivate_automatic_updates[deaktivieren Sie diese] vor dem Update der {CMK}-Instanz.
Aktualisierungen des Agentenskriptes sind immer noch manuell möglich.
Auch können Sie nach der Neuinstallation eines {v22} Agenten nicht mit Python 2.6 kompatible Plugins von Hand durch der {v21} entnommene ersetzen.

[#agentwindows]
=== Der Agent für Windows

In {CMK} {v22} unterstützt der xref:agent_windows#[Windows-Agent] nicht länger Windows 6.0 (Vista und Server 2008 R1).
Auf betroffenen Systemen kann der Agent von {v21} aber weiter genutzt werden.

*Betrifft Sie das?*
Nur, wenn bei Ihnen diese antiquierten Windows-Systeme (Support-Ende 11. April 2017 respektive 14. Januar 2020) noch im Einsatz sind.

*Was müssen Sie tun?*
Identifizieren Sie die betroffenen Systeme und aktualisieren Sie die installierten Agenten auf das letzte verfügbare Patch-Version der {v21}.
Falls automatische Agenten-Updates konfiguriert sind, xref:agent_deployment#deactivate_automatic_updates[deaktivieren Sie diese] vor dem Update der {CMK}-Instanz.

[#python]
=== Python 3.11

{CMK} {v22} aktualisiert Python von 3.10 auf 3.11.
Dies führt zu link:https://github.com/python/cpython/issues/66683[einer strengeren Interpretation] xref:regexes#[regulärer Ausdrücke].

*Betrifft Sie das?*
Nur, wenn Sie in regulären Ausdrücken link:https://www.regular-expressions.info/modifiers.html[Inline Flags] verwenden.
Diese sind schon seit Python 3.6 als _deprecated_ markiert und führten beim Test im Python-Prompt zu einer Warnung.

*Was müssen Sie tun?*
Identifizieren Sie reguläre Ausdrücke, welche Inline Flags nutzen.
Hierfür genügt es in der Regel, auf die Zeichenkette `(?` zu untersuchen.
Passen Sie die betroffenen regulären Ausdrücke so an, dass Inline Flags nur am Anfang auftreten.
xref:regexes#testing[Testen] Sie die geänderten regulären Ausdrücke dann mit dem Prompt des Python-Interpreters.


[#rest-api]
=== REST-API ersetzt Web-API
// https://checkmk.com/werk/13640 - Werk #13640: Deprecation of Web API
// https://checkmk.com/werk/14298 - Werk #14298: Remove Web API

Wie bereits in der {v21} angekündigt, ist die Web-API (auch HTTP-API genannt) in der {CMK}-Version {v22} entfernt worden.
Die Web-API wird durch die xref:rest_api#[REST-API] ersetzt.

*Betrifft Sie das?* Das betrifft Sie, falls Sie eigene Skripte geschrieben haben, die noch die Web-API nutzen.

*Was müssen Sie tun?* Migrieren Sie alle bestehenden Skripte, die die Web-API verwenden, auf die REST-API, bevor Sie auf die {CMK}-Version {v22} umsteigen.
Im xref:rest_api#rest-web-api[Artikel zur REST-API] finden Sie eine Übersicht, welche REST-API-Endpunkte die Web-API-Befehle ersetzen.


[#kubernetes]
=== Kubernetes-Monitoring
// https://checkmk.com/werk/13561 - Werk #13561: agent_kubernetes: deprecate special agent and associated checks

Den {CMK} {v20} Spezialagenten und die zugehörigen Check-Plugins für das Kubernetes-Monitoring gibt es nicht mehr in der {v22}.
Nutzen Sie stattdessen das in der Version {v21} von Grund auf neu geschriebene und stark verbesserte xref:monitoring_kubernetes#[Kubernetes-Monitoring.]


[#nsca]
=== NSCA wird nicht mehr unterstützt
// https://checkmk.com/werk/13644 - Werk #13644: Deprecating NSCA as part of Checkmk

Wie bereits in der Version {v21} angekündigt, unterstützt {CMK} {v22} nicht mehr den Nagios Service Check Acceptor (NSCA).
NSCA ist ein Nagios Add-on, um Ergebnisse passiver xref:monitoring_basics#checks[Checks] von fernen Hosts in einer verteilten Nagios-Konfiguration zu erhalten.
Dieses veraltete Verfahren zum Aufbau eines xref:distributed_monitoring#[verteilten Monitorings] bietet gegenüber den {CMK}-eigenen Verfahren keine Vorteile.
Details und Hinweise zum Ersatz finden Sie im link:https://checkmk.com/de/werk/13644[Werk #13644.^]


[#local_files]
=== Nicht paketierte lokale Dateien

Mit lokalen Dateien können Sie die von {CMK} bereitgestellte Funktionalität anpassen und erweitern.
Diese Dateien befinden sich im lokalen Teil der Instanzverzeichnisstruktur, d.h. in `~/local`.
Lokale Dateien können bei einem Update Probleme bereiten, wenn sie nicht mehr zur neuen {CMK}-Version passen.

*Betrifft Sie das?*
Da es für {CMK} bei einem Update nicht möglich ist, die Kompatibilität von lokalen Anpassungen vollständig sicherzustellen, sollten Sie Ihre {CMK}-Instanz vor einem Update daraufhin überprüfen, ob lokale Dateien bei Ihnen verwendet werden und gegebenenfalls welche.

*Was müssen Sie tun?*
Verschaffen Sie sich einen Überblick über nicht paketierte lokale Dateien Ihrer {CMK}-Instanz, indem Sie als Instanzbenutzer das folgende Kommando ausführen:

[{shell}]
----
{c-omd} mkp find
----

////
In einer frischen Installation von {CMK} wird Ihnen derzeit nur eine Datei namens `README.TXT` aufgelistet.
Alles, was darüber hinaus angezeigt wird, sollte ganz oben auf Ihrer Liste zur Fehlerdiagnose stehen, falls es beim Update Probleme gibt.
Besondere Aufmerksamkeit verdienen Check-Plugins, die immer noch der alten, bis zur Version {v16} gültigen, Check-API folgen.
Wir gehen darauf im nächsten Kapitel genauer ein.
////

Werden hier Dateien aufgeführt, sollten Sie zusammen gehörende in xref:mkps#[Erweiterungspaketen (MKPs)] zusammenfassen.
Dies erleichtert später die Deaktivierung _en bloc_, sollten nach dem Update xref:incompatible_mkps[Inkompatibilitäten] festgestellt werden.


// {v20} Thema - auch gültig für {v21}. In {v22} vorerst auskommentiert
////
[#check-api]
=== Die Check-API

In {CMK} {v20} wurde eine neue Check-API eingeführt, die die Check-Plugins neu strukturiert, um ihre Handhabung zu vereinheitlichen und zu vereinfachen.
Da es aber eine große Zahl von Checks gibt, die nach der alten, bis zur Version {v16} gültige Check-API programmiert wurden, kann es sein, dass die Migration von der alten auf die neue Check-API auch in der Version {v21} ein Thema für Sie ist.
Die große Zahl existierender Checks ist auch der Grund, warum die alte Check-API für eine Übergangszeit weiterhin unterstützt wird.

*Betrifft Sie das?* Das Thema Check-API _kann_ Sie betreffen, wenn Sie die mit {CMK} ausgelieferten um Ihre eigenen, selbst geschriebenen Checks erweitert haben und/oder wenn Sie Plugins aus anderen Quellen nutzen und diese z.B. von der link:https://exchange.checkmk.com/[{CMK} Exchange^] heruntergeladen haben.
Das Thema betrifft Sie, wenn eines, einige oder gar alle dieser Check-Plugins noch der alten Check-API folgen.
Die betroffenen Dateien finden Sie in den xref:local_files[lokalen Dateien] Ihrer Instanz.

*Was müssen Sie tun?* Wir versuchen Ihnen den Umstieg auf die neue Check-API so leicht und komfortabel wie möglich zu machen:

So wie beim Update auf die Version {v20} versucht {CMK} auch beim Update auf die Version {v21} alle lokalen Plugins aus den Verzeichnissen `~/local/share/check_mk/checks` und `~/local/share/check_mk/inventory` automatisch auf die neue Check-API zu migrieren.
Diese „Automigration“ passiert zur Laufzeit; die Plugin-Dateien werden nicht verändert.
Wie Sie sich nach dem Update die Ergebnisse anzeigen lassen können, erfahren Sie im Kapitel xref:automigration[Automigration auf die Check-API überprüfen].

Die Chancen stehen zwar gut, dass die Automigration Ihrer Check-Plugins reibungslos funktioniert, dennoch erfordert die ebenfalls in der Version {v20} durchgeführte Umstellung auf Python 3 möglicherweise einige Anpassungen.
Durch die neue Check-API und die Code-Basis Python 3 gibt es gleich zwei gute Gründe, Ihre selbst geschriebenen Check-Plugins zu überarbeiten.
Wir informieren Sie ausführlich über die notwendigen Schritte im link:https://blog.checkmk.com/de/migration-von-checkplugins-auf-checkmk-2.0[Blogpost zur Migration von Check-Plugins.^]

Zu guter Letzt punktet die neue Check-API mit verbesserter Dokumentation:
Es gibt einen einführenden Artikel zur xref:devel_check_plugins#[Programmierung eigener Check-Plugins] und die stets aktuelle Plugin-API-Referenzdokumentation.
Beides können Sie über die {CMK}-Oberfläche aufrufen -- im [.guihint]#Help#-Menü der Navigationsleiste unter [.guihint]#Developer resources.#
////


// MFS: Wir sollten relativ früh auf ein Mindest-Patchlevel für Updates verweisen – der Verweis auf p22 kann dann entfallen. Die Beispiele zeigen mittlerweile eh Output der p22.
[#incompatible_mkps]
=== Inkompatible und obsolete MKPs

Über die xref:glossar#mkp[{CMK}-Erweiterungspakete (MKPs)] lässt sich Ihr Monitoring-System recht einfach und bequem erweitern.
Auf der einen Seite kommt es dabei vor, dass solche MKPs nicht weiter gepflegt werden und dann ggf. mit neuen Versionen von {CMK} nicht mehr kompatibel sind.
Auf der anderen Seite nehmen wir immer wieder neue Plugins und Funktionserweiterungen in {CMK} auf, weshalb MKPs mitunter obsolet werden.
Ihre Funktionalität wird schlicht von {CMK} selbst sichergestellt.

*Betrifft Sie das?*
Falls Sie MKPs installiert haben, ist aus diesem Grund eine Prüfung dieser MKPs dringend geboten -- besonders vor einem umfangreichen Update.
So verhindern Sie, dass inkompatible Pakete das Update behindern oder im Anschluss an das Update doppelte oder zumindest sehr ähnliche Services entstehen.

*Was müssen Sie tun?*
Prüfen Sie hierzu Ihre installierten MKPs gegen unseren link:https://checkmk.com/de/integrations[Katalog der Check-Plugins^] und entfernen Sie Pakete, welche inzwischen nativ von {CMK} bereitgestellt werden.
Bei dieser Gelegenheit können Sie auch MKPs entfernen, die eventuell nur mal für einen Probelauf installiert worden sind.
Eine Auflistung finden Sie über [.guihint]#Setup > Maintenance > Extension packages#.
// MA: Hier würde ich der Einfachheit halber einen Screenshot erwarten.
Auf der Kommandozeile können Sie sich installierte Erweiterungen mit dem folgenden Befehl anzeigen lassen:

[{shell}]
----
{c-omd} mkp list
Name        Version Title         Req. Version Until Version Files State                          
----------- ------- ------------- ------------ ------------- ----- -------------------------------
my_cool_mkp 1.0.2   Best MKP ever 2.0.0        2.3.9p999     6     Enabled (active on this site)
hello_world 0.2.1   Hello world!  2.1.0        2.1.999       6     Enabled (active on this site)
----

Zu jedem gelistetem MKP können Sie dann in der Folge auch die Dateien anzeigen lassen, die zu dem Paket gehören:

[{shell}]
----
{c-omd} mkp list my_cool_mkp
/omd/sites/mysite/local/lib/check_mk/base/plugins/agent_based/check_mk.py
/omd/sites/mysite/local/share/check_mk/web/plugins/metrics/custom_metrics.py
----

Sollten Sie über die Prüfung der installierten MKPs und dem Abgleich mit unserem Katalog nicht alle Pakete zuordnen können, empfiehlt sich der hiernach beschriebene xref:dry_run[Probelauf des Updates,] um dabei Inkompatibilitäten zu identifizieren und dann in Ihrem produktiven Monitoring vor dem Update zu entfernen.

[#mkp_backport]
==== MKP-Verwaltung für verschiedene {CMK}-Versionen

Für die Erleichterung von Updates wurde mit {CMK} {v21}p22 die Möglichkeit eingeführt, MKPs in verschiedenen Versionen vorzuhalten.
Beim Update wird dann das Paket für {CMK} {v21} automatisch deaktiviert und das für {CMK} {v22} automatisch aktiviert.
Bei Nutzung eines verteilten Monitorings mit xref:glossar#distributed_setup[zentraler Konfiguration] können Sie mit diesem Feature von der Zentralinstanz aus Pakete in verschiedenen Versionen an die Remote-Instanzen xref:dist_setup[verteilen.]
Das klappt sogar, wenn die Remote-Instanzen eine höhere Version haben, wie es beim Update im verteilten Monitoring für eine Übergangszeit der Fall ist.

Beachten Sie, dass Sie dieses Feature nur nutzen können, wenn Sie als Ausgangsversion mindestens {v21}p22 verwenden!
Sind diese Voraussetzungen erfüllt, können Sie auf der Zentralinstanz zusätzlich Pakete für {v22} hinzufügen.

Bei der Installation eines für {CMK} {v22} geschriebenen MKPs erhalten Sie unter {CMK} {v21}p22 und höher eine Warnmeldung:

[{shell}]
----
{c-omd} mkp install /tmp/hello_world-0.2.2.mkp 
The package requires Check_MK version 2.2.0, but you have 2.1.0p22 installed.
----

Dieses Paket wird in der Liste der Pakete als [.guihint]#Enabled (inactive on this site)# aufgeführt:

[{shell}]
----
{c-omd} mkp list
Name        Version Title        Req. Version Until Version Files State                          
----------- ------- ------------ ------------ ------------- ----- -------------------------------
hello_world 0.2.2   Hello world! 2.2.0        2.2.999       6     Enabled (inactive on this site)
hello_world 0.2.1   Hello world! 2.1.0        2.1.999       6     Enabled (active on this site)
----

Details der überarbeiteten Paketverwaltung zeigt der xref:mkps#[Artikel zur Verwaltung von Erweiterungspaketen (MKPs)].


[#incompatible]
=== Inkompatible Änderungen

Wie in jeder {CMK} Version, so gibt es auch in der aktuellen Version {v22} Änderungen der Software, die Rückwirkungen auf ihre {CMK}-Installation haben _können_.
Eine sogenannte _inkompatible Änderung_ erfordert, dass Sie manuelle Anpassungen durchführen, um bestehende Funktionen weiterhin wie gewohnt ablaufen zu lassen und/oder neue Funktionen nutzen zu können.

*Betrifft Sie das?*
In aller Regel wird es inkompatible Änderungen geben, die auch Ihre {CMK}-Installation betreffen.
Eine generelle Aussage ist aber leider unmöglich.
In diesem Artikel haben wir diejenigen Themen zusammengetragen, die für alle oder die meisten {CMK}-Installationen zutreffen.
Es kann aber sein, dass es darüber hinaus weitere, für Sie relevante Änderungen gibt, zum Beispiel bei Checks, die Sie in Ihrer Installation verwenden.

*Was müssen Sie tun?*
Nachdem Sie das xref:update[Update] durchgeführt haben, werden Ihnen in der {CMK}-Oberfläche Anzahl und Inhalt der inkompatiblen Änderungen angezeigt, und Sie werden aufgefordert, diese zu prüfen und zur Kenntnis zu nehmen.
Also werden Sie auf jeden Fall mit diesem Thema konfrontiert werden -- allerdings erst, nachdem Sie das Update durchgeführt haben.

Es ist daher eine gute Idee, sich bereits *vor* dem Update einen Überblick über die inkompatiblen Änderungen zu verschaffen:
Öffnen Sie die Liste der link:https://checkmk.com/de/werks?search=&cmk_version$$[$$$$]$$=2.2&compatible=0[Werks.^]
(Die Software-Entwicklung von {CMK} ist in sogenannten Werks organisiert.)
In der Beschreibung eines Werks finden Sie Hinweise, was gegebenenfalls zu tun ist, um die Änderung kompatibel zu machen.

Die frustrierende Nachricht:
Die Werkliste einer Version ist sehr, sehr lang -- selbst wenn sie nur die inkompatiblen Änderungen enthält.
Die tröstliche Nachricht:
An der Anzahl der Änderungen können Sie sehen, wie groß unsere Anstrengungen sind, {CMK} für Sie zu verbessern.


[#update]
== Update

[#dry_run]
=== Best Practices beim Update

Im Folgenden beschreiben wir bewährte Vorgehensweisen (_best practices_), welche wir selbst bei Updates von großen {CMK}-Umgebungen befolgen.
Diese sind sicherlich nicht in jeder Umgebung Pflicht, Sie können Ihnen den Prozess des Updates jedoch erleichtern.


==== Betriebssystem aktualisieren

Das Betriebssystem auf einem {CMK}-Server sollte ohnehin immer auf dem aktuellen Stand sein.
Vor einem Update von {CMK} schadet es aber bestimmt nicht, sich dessen noch einmal zu versichern:
mithilfe von `apt` (für Debian und Ubuntu), `yum` und `dnf` (für Red Hat Enterprise Linux (RHEL) basierte Systeme) oder `zypper` (für SUSE Linux Enterprise Server).














==== {CMK}-Version aktualisieren
// https://checkmk.com/werk/13320 - Werk #13320: omd update: Add version compatibility barrier

Vor dem Update auf die Version {v22} muss auf der {CMK}-Instanz die Version {v21} installiert sein.

Wir haben bereits früher von einem Update mit Auslassung einer Hauptversion abgeraten, da es dazwischen einfach zu viele Änderungen gibt, die ein reibungsloses Update behindern und mit großer Wahrscheinlichkeit zu Problemen führen.
Mit der Version {v21} wurde aus dieser Empfehlung eine Voraussetzung -- und eine Sperre eingeführt, die zum Beispiel ein direktes Update von Version {v20} auf {v22} verhindert.

////
Ein Update auf die Version {v21} setzt zurzeit keine bestimmte {v20} Patch-Version voraus.
Es gibt jedoch auch hier gute Gründe, den Sprung auf die {v21} nur von der neuesten {v20} Patch-Version aus zu starten, da z.B. ein {v20} Patch Korrekturen enthalten kann, die das Update auf die Version {v21} erleichtern.
////

Das Update auf {v22} setzt mindestens {v21}p23 voraus.
Diese minimale Patch-Version kann bei {v22}pN höher liegen.
Generell empfehlen wir, zuerst {CMK} auf die neueste {v21} Patch-Version zu aktualisieren und erst dann das Update auf die {v22} durchzuführen.


==== Probelauf des Updates durchführen

In großen Umgebungen, in denen auch das Zurückspielen eines selbstverständlich vorhandenen Backups Ihrer {CMK}-Umgebung mit einem gewissen zeitlichen Aufwand verbunden wäre, empfiehlt es sich, vor dem Update der produktiven Umgebung, einen Test mit einer geklonten Instanz durchzuführen.
Zu diesem Zweck können Sie beispielsweise das letzte reguläre Backup Ihrer Instanz unter einem anderen Namen wiederherstellen.

[{shell}]
----
{c-root} omd restore newsite /path/to/backup
----

*Alternativ* können Sie Ihre Instanz auch per `omd cp` kopieren.
Dafür muss die Instanz allerdings kurzzeitig gestoppt werden:

[{shell}]
----
{c-root} omd stop mysite
{c-root} omd cp mysite newsite
----

Führen Sie das Update im Anschluss erst einmal auf dieser neuen geklonten Instanz durch, um hier beispielsweise die oben angesprochenen lokalen Änderungen in der neuen Umgebung zu prüfen.


[#automatic_agent_updates]
==== Agenten-Update vorübergehend abschalten

{cee-only}
Wenn Sie die automatischen Agenten-Updates verwenden, sollten Sie überlegen, diese vor dem Update von {CMK} vorübergehend zu deaktivieren, um den Wechsel auf die neuen Agenten bei den Hosts später kontrolliert vollziehen zu können.
Dazu wählen Sie zuerst [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX# und auf der folgenden Seite den Menüeintrag [.guihint]#Agents > Automatic updates.#
Durch Klick auf den Knopf icon:icon_edit[alt="Symbol zum Bearbeiten eines Listeneintrags."] vor dem [.guihint]#Master switch# können Sie das Agenten-Update komplett abschalten:

image::update_major_automatic_agent_updates.png[alt="Abschaltung des Agenten-Updates per Hauptschalter."]

Nach dem erfolgreichen Update von {CMK} können Sie das Agenten-Update auf gleichem Weg wieder anschalten.

Wir empfehlen an dieser Stelle das automatische Agenten-Update erstmal nur für einzelne Hosts oder Host-Gruppen wieder zu aktivieren.
Auf diese Weise wird der neue Agent nicht gleich auf all Ihre Server ausgerollt und Sie können sich auf einigen wenigen Systemen mit den neu angelieferten Daten vertraut machen.
Auch aufgrund der deutlich gestiegenen Zahl an mitgelieferten Check-Plugins könnten Sie eine ganze Reihe neuer Services finden, welche Sie dann auf den von Ihnen gewählten Testsystemen richtig einstellen können.
Eventuell sind für neue Services auch neue Schwellwerte vonnöten.
Wenn Sie dies erst einmal im Kleinen angehen, ersparen Sie schnell einige Fehlalarme.

Auf der oben angegebenen Seite können Sie dafür einfach ein paar Hosts oder Host-Gruppen in die entsprechenden Felder eintragen und dann den [.guihint]#Master switch# wieder aktivieren.

image::update_major_activate_update_on_selected_hosts.png[alt="Optionen beim Agenten-Update zur Aktivierung auf bestimmten Hosts."]

*Wichtig:* Denken Sie daran, diese Einschränkungen auf explizite Hosts und Host-Gruppen wieder zu entfernen, sobald Sie mit den Ergebnissen zufrieden sind.


[#notifications]
==== Benachrichtigungen vorübergehend abschalten

Sie sollten auch überlegen, xref:glossar#notification[Benachrichtigungen] in der Instanz vor dem Update abzuschalten -- aus ähnlichen Gründen, die wir im vorherigen Abschnitt zu den automatischen Agenten-Updates erklärt haben.
So vermeiden Sie, dass Ihre Kollegen aus dem Monitoring-Team _unnötige_ Benachrichtigungen erhalten.

Die Benachrichtigungen können Sie zentral im Snapin xref:user_interface#master_control[Master control] mit dem Hauptschalter [.guihint]#Notifications# abschalten.

Es kann durchaus vorkommen, dass nach dem Update der eine oder andere Service {CRIT} ist, der dies vorher nicht gewesen ist.
Kümmern Sie sich nach dem Update zuerst um neu auftretende Probleme.
Die unbehandelten Probleme (_unhandled problems_) können Sie sich z.B. im Snapin xref:user_interface#overview[Overview] anzeigen lassen.

*Wichtig:* Vergessen Sie nicht, die Benachrichtigungen wieder einzuschalten, z.B. dann, wenn sich die Zahl der unbehandelten Probleme nach dem Update auf das Niveau vor dem Update eingepegelt hat.


[#update_distributed_monitoring]
=== Update im verteilten Monitoring
// https://checkmk.com/werk/13313 - Werk #13313: Distributed monitoring: Improve version compatibility validation

Es gibt unterschiedliche Vorgehensweisen, um das Update der in einem xref:distributed_monitoring#[verteilten Monitoring] beteiligten Instanzen durchzuführen, d.h. der Zentralinstanz und der Remote-Instanzen.

*Wichtig:* Für welches Vorgehen Sie sich auch entscheiden:
Sie sollten auch in diesem Szenario vorher xref:backup#[Backups] anlegen.

Das empfohlene, sichere Vorgehen ist das _Update in einem Rutsch_, bei dem Sie folgende Schritte ausführen:

. Alle Instanzen stoppen.
. Das Update für alle Instanzen durchführen.
. Die aktualisierten Instanzen wieder starten.

////
// TK: Sukzessives Vorgehen ist obsolet
==== Sukzessives Vorgehen
Das Standardvorgehen verlangt bei größeren Installationen gute Planung und ein wenig Zeit -- das Monitoring wird einige Zeit offline sein.
Alternativ können Sie jegliche Konfigurationsänderungen über eine globale Einstellung unterbinden, sodass nur noch der Admin manuell Änderungen durchführen kann.
Auf diese Weise können Sie dann nach und nach Instanzen aktualisieren.
Rufen Sie dazu in der zentralen {v20}-Instanz [.guihint]#Setup > General > Read only mode# auf und aktivieren Sie den Nur-Lesen-Modus:

image::update_20_readonly.png[]

Sie können den Modus dauerhaft oder für eine bestimmte Zeitspanne aktivieren und eine zusätzliche Erklärung anhängen.
So lange der Modus aktiv ist, sehen alle Nutzer in allen Einstellungsdialogen folgenden Warnhinweis -- inklusive Ihrer Begründung:

image::update_20_readonly_warning.png[]

Den Hinweis [.guihint]#But you are allowed to make changes anyway.# sehen natürlich nur Sie als Admin.
////

Es gibt noch eine andere Variante: das _Update im laufenden Betrieb._
Dieses Vorgehen wird unter anderem dann benötigt, wenn man eine große Menge von verteilten Instanzen verwaltet, die aus technischen oder organisatorischen Gründen nicht in einem Rutsch aktualisiert werden können.

Bei einem Update im laufenden Betrieb müssen Instanzen mit unterschiedlichen {CMK}-Versionen für eine Übergangszeit miteinander kommunizieren -- solange, bis das Update aller beteiligten Instanzen abgeschlossen ist.
Damit diese Zusammenarbeit klappt, müssen die in diesem Mischbetrieb beteiligten Versionen kompatibel sein.


[#compat_chart]
==== Kompatibilitätstabelle

Seit der Version {v21} gibt es Versionsprüfungen, die sicherstellen, dass die beteiligten Instanzen kompatible Versionen verwenden.
Die Kurzfassung ist:
Instanzen müssen die gleiche Hauptversion haben -- mit einer Ausnahme: die {CMK}-Version einer Remote-Instanz darf um genau eine Hauptversion höher sein als die der Zentralinstanz.
Die folgende Tabelle zeigt die möglichen Kombinationen beim Update von {v21} zur {v22}:

[cols="40,40,~",options="header"]
|===
|Zentralinstanz |Remote-Instanz |Erlaubt?
|{v21} |{v21} |Ja
|{v21} |{v22} |Ja
|{v22} |{v21} |*Nein*
|{v22} |{v22} |Ja
|===

Für Patch-Versionen gilt prinzipiell das gesagte:
Die Zentralinstanz darf nie einen höheren Versionsstand als die Remote-Instanzen nutzen.
Allerdings sind häufig größere Abweichungen als eine Patch-Version erlaubt.
Details zur konkreten Kompatibilität entnehmen Sie den link:https://checkmk.com/de/werks/[Werks^]. 
// TK: Der Link ist jetzt nicht wirklich hilfreich.

// TK: Nicht erwähntes Detail: Bei gleicher Hauptversion können laut Werk die Patch-Versionen unterschiedlich sein.
// TK: Nicht erwähntes Detail: Wenn CME verwendet wird, müssen alle Instanzen CME haben.

Aus diesen Regeln folgt, dass bei einem Update im laufenden Betrieb die Zentralinstanz zuletzt aktualisiert wird.
Beachten Sie, dass auch beim Update im verteilten Monitoring gilt:
Hauptversionen dürfen nicht ausgelassen werden, sodass z.B. eine Verbindung zwischen einer {v20} und einer {v22} Instanz nicht unterstützt wird.

*Hinweis:* Da sich der Funktionsumfang verschiedener {CMK}-Versionen unterscheidet, kann es sein, dass einige Features von {CMK} in diesem Mischbetrieb nicht oder nur eingeschränkt funktionieren.
In einem Mischbetrieb können auch bei kompatiblen Versionen Probleme auftreten und ein reibungsloses Zusammenspiel ist nur dann gesichert, wenn alle Instanzen die gleiche Hauptversion haben.
Sie sollten daher den Zeitraum eines Mischbetriebs mit verschiedenen Versionen möglichst kurz halten und nach dem Start des Updates alle Instanzen zügig aktualisieren.


[#dist_setup]
==== MKPs im verteilten Setup

Falls Sie verteiltes Monitoring mit einer xref:glossar#distributed_setup[zentralen Konfiguration] betreiben, aus der auch xref:glossar#mkp[{CMK}-Erweiterungspakete (MKPs)] an die Remote-Instanzen verteilt werden, haben Sie die Möglichkeit, in der {CMK} {v21} Zentralinstanz Pakete für die Remote-Instanzen in Versionen für {v21} und {v22} vorzuhalten.
Es werden dann automatisch die zur Remote-Instanz passenden MKPs verteilt.

Um dieses Feature nutzen zu können, muss zunächst die Zentralinstanz auf Patch-Version {v21}p22 gebracht werden.
Ist dies geschehen, können Sie beginnen, auf der Zentralinstanz zusätzlich xref:mkp_backport[Pakete für {v22} hinzuzufügen.]
Wenn Sie nun Remote-Instanzen auf {v22} aktualisieren, erhalten und aktivieren diese dann automatisch das zur neuen Version passende Paket.


=== Das Update durchführen

Am eigentlichen Update der Software hat sich in der {CMK} {v22} nichts Grundlegendes geändert,
d.h. Sie installieren die neue Version, führen das Update der {CMK}-Instanz durch, kümmern sich um Konflikte (falls es denn welche geben sollte) und überprüfen und bestätigen die inkompatiblen Änderungen.

Führen Sie die Update-Prozedur so aus, wie sie im xref:update#detailed[Artikel zu Updates und Upgrades] beschrieben ist.


[#follow-up]
== Nachbereitungen

[#gui]
=== Änderungen der Benutzeroberfläche

Die Benutzeroberfläche (GUI) von {CMK}, die mit Version {v20} komplett neu gestaltet wurde, hat sich auch in der {v22} nicht grundlegend verändert.
Die generellen Abläufe, die Sie aus der Version {v20} und {v21} kennen, können Sie auch in der {v22} unverändert anwenden.
Allerdings haben sich Menüs, Menüeinträge, Symbole und andere Details geändert, um neue Funktionen verfügbar zu machen -- und bestehende zu verbessern.

In den Artikeln dieses Handbuchs stellen wir Ihnen diese Änderungen vor - und im xref:intro_setup#[Leitfaden für Einsteiger] finden Sie eine ausführliche Einführung,
unter anderem in die wichtigsten Elemente der xref:intro_gui#[Benutzeroberfläche.]


[#favorites]
==== Die Favoriten wurden entfernt
// https://checkmk.com/de/werk/14727 - Werk #14727: Remove Favorites feature
// TK: Oder muss man das Kapitel doch nach oben in die Vorbereitungen ziehen, denn nach dem Update sind die Biester ja weg, ohne dass ich wüsste, wo man einen gesetzten Favoriten überhaupt zu fassen bekommt.

Die kaum bekannte, wenig genutzte und im Handbuch auch nicht beschriebene Möglichkeit, Hosts und Services als _Favoriten_ zu kennzeichnen wurde mit link:https://checkmk.com/de/werk/14727[Werk #14727^] entfernt.
Favoriten konnten bis zur {v21} über den Menüeintrag [.guihint]#Commands > Favorites# gesetzt werden, d.h. im gleichen Menü, indem auch die Kommandos zur Quittierung von Problemen oder der Erstellung von Wartungszeiten zu finden sind.

Als Ersatz für den schnellen Zugriff auf wichtige Hosts und Services bieten sich die xref:user_interface.html#bookmarks[Bookmarks] an, die Sie z.B. in Ansichten setzen können, nachdem Sie sich die gezeigten Hosts oder Services zurechtgefiltert haben.
Eine Beschreibung dazu finden Sie im xref:intro_tools#views[Leitfaden für Einsteiger.]

// TK: Link zum Werk nur deshalb, weil da der Link zum Forum drin ist.

////
[#automigration]
=== Automigration auf die Check-API überprüfen
// https://checkmk.com/werk/10601 - Werk #10601: Auto migration of check plugins to new section definitions

Sie können überprüfen, ob alle lokalen Plugins aus den Verzeichnissen `~/local/share/check_mk/checks` und `~/local/share/check_mk/inventory` automatisch auf die neue xref:check-api[Check-API] migriert werden können.

*Betrifft Sie das?*
Diese Überprüfung ist sinnvoll, wenn in Ihren lokalen Dateien Check-Plugins existieren, die nach der alten, bis zur Version {v16} gültigen Check-API programmiert wurden.

*Was müssen Sie tun?*
Führen Sie als Instanzbenutzer das folgende Kommando aus:

[{shell}]
----
{c-omd} cmk -R
Failed to auto-migrate legacy plugin to check plugin: mssql_counters
Please refer to Werk 10601 for more information.
----

Die Meldung oben zeigt, dass ein Plugin nicht automatisch migriert werden konnte.
Alle gelisteten Plugins müssen von Ihnen manuell migriert werden.
Es gibt einige Gründe, aus denen eine Automigration nicht durchgeführt werden kann und die Sie im genannten link:https://checkmk.com/de/werk/10601[Werk #10601^] nachlesen können.
Wie Sie die manuelle Migration durchführen, erfahren Sie im link:https://blog.checkmk.com/de/migration-von-checkplugins-auf-checkmk-2.0[Blogpost zur Migration von Check-Plugins.^]
////


[#service_discovery]
=== Services aktualisieren

Wie jede Hauptversion, so bringt auch {CMK} {v22} eine ganze Reihe neuer Check-Plugins mit sich.
Sollten Sie den xref:wato_services#discovery_check["Discovery Check"] nicht einsetzen, d.h. das automatische Update der Service-Konfiguration über die periodische Service-Erkennung, werden Sie auf einer ganzen Reihe von Hosts die Suche nach Services durchführen müssen.

Wenn Ihre Hosts entsprechend organisiert sind (z.B. in Ordnern), können Sie hierfür zumeist mit der Funktion [.guihint]#Bulk discovery# arbeiten.
Diese finden Sie unter [.guihint]#Setup > Hosts > Hosts# und dann im Menü [.guihint]#Hosts > Discover services.#

////
Im Folgenden listen wir einige Bereiche mit den meisten Neuerungen auf.


[#service_check_mk_agent]
==== Check_MK und Check_MK Agent
// Werk #13849: Add Check_MK service for hosts without passive services
// Werk #13697: "Check_MK Agent" service: Combine with new plugin service

image::update_major_check_mk_services.png[alt="Die beiden Services 'Check_MK' und 'Check_MK Agent' im Monitoring."]

Die Services [.guihint]#Check_MK# und [.guihint]#Check_MK Agent# heißen zwar noch genauso wie in der Version {v20}, haben aber in der {v21} teilweise eine andere Bedeutung:

* Der Service [.guihint]#Check_MK Agent# ist nun immer präsent und liefert alle Informationen, die mit der Agentenverteilung (_agent deployment_) zu tun haben, wie die Version des Agenten, der Zeitpunkt des letzten Updates, die Zahl von Agentenplugins und lokalen Checks, oder die Beschränkung der IP-Adressen.
Bisher kümmerte sich dieser Service nur um die Agenten-Updates -- und war auch nur dann verfügbar, wenn Agenten-Updates eingerichtet waren.

* Auch der Service [.guihint]#Check_MK# ist nun immer da --  vorher war er es nur dann, wenn auf dem Host passive Services liefen.
Der Service [.guihint]#Check_MK# kümmert sich nun ausschließlich um den Zustand der verwendeten Agenten im laufenden Betrieb (_operational state_).
Er meldet z.B. Verbindungsfehler oder fehlende Daten und zeigt die Ausführungszeit.
////

////
[#cluster_services]
==== Cluster-Services
// Werk #12908: Add predefined cluster modes for all services
// Das Thema ist hier eigentlich nicht richtig einsortiert, da es hier nicht um neue Services geht, sondern um den Zustand existierender Services.

Mit {CMK} Version {v21} verändert sich das Verhalten einiger xref:clustered_services#[Cluster-Services].
Betroffene Services nehmen den Zustand {UNKNOWN} an und erfordern eine Anpassung der Konfiguration.

{CMK} kennt vier Cluster-Modi:

* _Best_ (der Wert der besten Node bestimmt den Gesamtzustand)
* _Worst_ (analog: Wert der schlechtesten Node)
* _Failover_ (nur eine Node darf {OK} liefern)
* _Natives Clustering_ per API-Funktion (frei programmierbar, z.B.: _80{nbsp}% der Nodes müssen {OK}_ sein, damit der Cluster OK ist)

Legacy-Plugins, welche die alte Check-API nutzen, verfügten bislang über eine zusätzliche implizite Cluster-Möglichkeit, bei der die Ausgabe der zugeordneten Hosts lediglich der Reihe nach ausgewertet wurde und der letzte erhaltene Einzelzustand den Gesamtzustand des Clusters bestimmte.
Da dieses Verhalten nicht verlässlich war, wurde es in {v21} entfernt.

Im Zuge der Portierung auf {v21} haben wir bei einigen mitgelieferten Check-Plugins das zur {v20} nachgerüstete _native Clustering_ wieder entfernt, wenn es nicht sinnvoll war.
Stattdessen haben wir als Standard eines der Verhalten _best_, _worst_ oder _failover_ ausgewählt.
link:https://checkmk.com/de/werk/12908#[Diese Liste^] zeigt betroffene Plugins und das neue Standardverhalten.
Ebenfalls betroffen sind selbst programmierte oder aus der link:https://exchange.checkmk.com[{CMK} Exchange^] bezogene Plugins, die keine API-Integration für den nativen Cluster-Modus verwenden.

All diese Dienste nehmen nach dem Update auf {v21} den Zustand {UNKNOWN} an, wenn der einst ausgewählte Cluster-Modus nicht mehr unterstützt wird.
Verwenden Sie in diesen Fällen die Regel [.guihint]#Aggregation options for clustered services#, um einen der drei Cluster-Modi _best_, _worst_ oder _failover_ zu definieren.
////

[#service_descriptions]
==== Service-Beschreibungen
// MFS: Eigentlich wäre "Service-Namen" passender, es steht aber überall "Service Description" 

Jedes Update von {CMK} bedeutet, dass Service-Beschreibungen geändert werden, um die Konsistenz der Benennung innerhalb des Monitorings und der Dokumentation von {CMK} zu verbessern.
Da die Änderung von Service-Beschreibungen bedeutet, dass mitunter Regeln angepasst werden müssen und historische Monitoring-Daten verloren gehen, belässt {CMK} bei Updates zunächst die alten Beschreibungen.
Sie sollten bei Services, bei denen Verlust alter Monitoring-Daten zu verschmerzen und der Aufwand für die Anpassung von Regeln überschaubar ist, zeitnah auf neue Service-Beschreibungen umstellen.

Gehen Sie hierfür in [.guihint]#Setup > General > Global Settings > Execution of checks# die Liste [.guihint]#Use new service descriptions# durch und identifizieren Sie die Services, bei denen die Checkboxen noch nicht aktiv sind und aktivieren Sie diese.
Nach Anwenden der Änderungen sind die neuen Service-Beschreibungen aktiv und es werden wenige Minuten vergehen, bis Sie wieder definierte Zustände der betroffenen Services im Monitoring sehen.


[#new_ports]
=== Ports

Seit {CMK} {v21} benötigen Hosts zur Durchführung der xref:wato_monitoringagents#agents[TLS-Registrierung] Zugriff auf folgende Ports des {CMK}-Servers: Port 443 (respektive 80) für REST-API-Anfragen und Port 8000 für den Agent Receiver.
Sprechen Sicherheitsrichtlinien dagegen, diese Ports verfügbar zu machen, können Sie bei Nutzung des xref:glossar#pull_mode[Pull-Modus] eine xref:agent_linux#proxyregister[Registrierung im Auftrag] direkt auf dem {CMK}-Server durchführen.

Um den in der {CMK} {v22} eingeführten xref:glossar#push_mode[Push-Modus] der {CE} nutzen zu können, muss Port 8000 des {CMK}-Servers vom überwachten Host aus erreichbar sein.


////
[#agent_registration]
=== Agenten für TLS registrieren

Nach der Aktualisierung der Agenten auf {v21} nimmt der Dienst [.guihint]#Check_MK Agent# für die betreffenden Hosts den Status {WARN} an und zeigt die Meldung _TLS is not activated on monitored_ Host.
In den beiden Artikeln zum xref:agent_linux#[Linux-] und xref:agent_windows#[Windows-]Agenten beschreiben wir die Registrierung der verwendeten Zertifikate mit dem Kommandozeilenwerkzeug `cmk-agent-ctl`.
Dieses Werkzeug stellt auch viele Optionen zur automatischen Registrierung bereit -- beispielsweise per Postinstall-Snippet in xref:bakery_api#[Bakery Plugins].

Falls für einen Übergangszeitraum unverschlüsselte Datenübertragung für den Parallelbetrieb von {v20}-Servern in einer {v21}-Umgebung erwünscht ist, passen Sie den Regelsatz [.guihint]#Checkmk Agent installation auditing# an, damit der Service [.guihint]#Check_MK Agent# trotz fehlender Registrierung den Status {OK} annehmen kann.
////


////
[#encrypt_notification_spooler]
=== Benachrichtigungs-Spooler verschlüsseln
// https://checkmk.com/werk/13610 - Werk #13610: Notification spooler connections can now be encrypted

*Betrifft Sie das?*
Wenn Sie verteiltes Monitoring mit xref:notifications#async[zentraler Benachrichtigung] verwenden, profitieren Sie von erhöhter Sicherheit bei Aktivierung der Transportverschlüsselung des Notification Spooler `mknotifyd`.

*Was müssen Sie tun?*
Bei der Aktualisierung vorhandener {CMK}-Installationen bleiben bereits konfigurierte Verbindungen zunächst ohne Verschlüsselung weiter nutzbar.
Allerdings wird in diesem Fall [.guihint]#Analyze configuration# die Einstellung mit {CRIT} bemängeln.
Ändern Sie nach Migration aller beteiligten Instanzen auf {v21} die Option [.guihint]#Global settings > Notification spooler configuration > Encryption# auf die Einstellung [.guihint]#Encrypt communication with TLS#.
Neue Verbindungen verwenden bei der Erstellung automatisch die TLS-Verschlüsselung.
////


[#remove_old_mkps]
=== Obsolete MKPs entfernen

*Betrifft Sie das?*
Dies betrifft Sie, wenn Sie von der Funktion Gebrauch gemacht haben, xref:mkp_backport[MKPs in verschiedenen Versionen] vorzuhalten.

*Was müssen Sie tun?*
Während des Updates werden inkompatible Pakete automatisch auf den Zustand [.guihint]#Disabled# gesetzt, aber nicht vollständig gelöscht.
Zur neuen {CMK}-Version kompatible Pakete werden automatisch aktiviert, Sie erhalten den Zustand [.guihint]#Enabled (active on this site)#.

[{shell}]
----
{c-omd} mkp list
Name        Version Title        Req. Version Until Version Files State                          
----------- ------- ------------ ------------ ------------- ----- -----------------------------
hello_world 0.2.1   Hello world! 2.1.0        2.1.999       6     Enabled (active on this site)
hello_world 0.2.0   Hello world! 2.0.0        2.0.999       6     Disabled
----

Wenn die Funktionalität der neuen Pakete sichergestellt ist und die alten nicht mehr als Referenz benötigt werden, können Sie nach veralteten Paketen suchen:

[{shell}]
----
{c-omd} mkp list | grep Disabled
----

Deinstallieren Sie diese dann mit `mkp remove`.

[{shell}]
----
{c-omd} mkp remove hello_world 0.2.0
----


[#outlook]
== Ausblick

In diesem Kapitel geht es um Themen, die nicht die aktuelle {CMK} Version {v22}, sondern eine der darauf folgenden Versionen betreffen.

////
[#hw_sw_inventory_plugin_api]
=== Die alte HW/SW-Inventur Plugin-API wird nicht mehr unterstützt
// https://checkmk.com/werk/14084 - Werk #14084: Deprecate old HW/SW inventory plugin API

Die Unterstützung der alten Plugin-API für die HW/SW-Inventur wird in der nächsten {CMK}-Version {v22} entfernt.

Die dieser API folgenden Plugins befinden sich im Instanzverzeichnis unter `~/share/check_mk/inventory` und (als lokale Dateien) unter `~/local/share/check_mk/inventory`.
Diese Plugins funktionieren in der Version {v21}, werden aber ab der Version {v22} ignoriert werden.

// TK: Diese benutzerdefinierten Plugins müssten doch alle in ~/local/share/check_mk/inventory liegen, oder?
// MA: Das neue Verzeichnis ist ~/local/lib/check_mk/base/plugins/agent_based/
Falls Sie benutzerdefinierte Plugins nutzen, migrieren Sie diese auf die neue Check-API bevor Sie auf die Version {v22} wechseln.
Im link:https://checkmk.com/de/werk/14084[Werk #14084^] finden Sie weitere Details und Informationen zur Migration.
////

_TBD..._
