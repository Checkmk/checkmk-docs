// -*- coding: utf-8 -*-
include::global_attr.adoc[]

[#rest_api]
== REST-API-Anfragen für Hosts

////
TK: Hinweise zum Review:
- Ich hab versucht, die Erklärungen auf das allernötigste zu beschränken, um dem Referenzteil dieses Kapitels gerecht zu werden: Das gilt sowohl für die REST-API selbst als auch für das, was die Beispielanfragen machen.
- Die Überschriften der Unterkapitel sind nicht nummeriert, um das TOC nicht zu überfrachten.
- Es wäre hilfreich, wenn man in den Anfragen (mehr) hiliten könnte. Das zeilenweise hiliten mit der {shell}-Option highlight in den JSON-Zeilen kann ich aber nicht verwenden, da farbiger Text mit gelber Hintergrundfarbe kaum lesbar ist. Daher Beschränkung von hilite im Wesentlichen nur auf Pfadelemente. Trotzdem so lassen oder auf Hervorhebungen ganz verzichten? 
SP: Ich würde es so lassen, finde es gut.
- Kommandos mit cURL Option --data werden merkwürdig eingefärbt: mit roter geschweifter Klammer und der Rest in blau...
MA: Ich finde die Fülle an Beispielen etwas überwältigend. Zum einen ist der Header fast immer identisch. Das macht es schwer, die Unterschiede in den curl-Aufrufen zu sehen. Wenn wir schon zu jedem Endpunkt ein Beispiel zeigen, würde ich eher darauf eingehen, was die Besonderheiten sind und wie der data-Teil aufgebaut ist (bzw. dass man das bei einem GET nicht braucht). Die Beispiele an sich, findet man ja auch im ReDoc wieder.
////

Viele der Aktionen, die in diesem Artikel beschrieben sind, können Sie auch per {CMK} REST-API ausführen.
// MA: Warum sollte ich das tun?
Im Artikel zur xref:rest_api#[REST-API] erhalten Sie eine Einführung zur Anwendung dieser API und zur in {CMK} aufrufbaren API-Dokumentation.

Die in diesem Kapitel enthaltenen Beispiele orientieren sich an dem Beispiel-Code für das Kommandozeilenprogramm _cURL_, das in der REST-API-Dokumentation enthalten ist.
// MA: Was ist in der Doku enthalten? Das Programm cURL? Was macht denn cURL?
So wie die API-Dokumentation, enthalten auch die Beispiele in diesem Kapitel Variablen, z.B. für Benutzer (`$USERNAME`) und Passwort (`$PASSWORD`) der genutzten xref:rest_api#bearerauth[Bearer-Authentifizierung.]
Dazu können Sie die Zugangsdaten des xref:glossar#automation_user[Automationsbenutzers] verwenden.

Bevor Sie die `curl`-Kommandos absetzen, können Sie die Variablen mit den folgenden Kommandos in der Shell auf Ihre Umgebung anpassen:
[{shell}]
----
{c-user} HOST_NAME="myserver"; SITE_NAME="mysite"; API_URL="http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0"; \
USERNAME="automation"; PASSWORD="theautomationsecret";
----
// TK: Ist das Setzen der Variablen via Shell ok? Oder geht das eleganter?
// SP: Worüber ich gestolpert bin: Weiß jeder Benutzer, der den Text hier liest, wie er an das automation-Passwort kommt? Ich brauchte Thomas' Hilfe.
// TK: Ich hab jetzt den Automationsbenutzer hinzugefügt und verlinkt. Mit dem Folgelink im Glossar wird man zum passenden Kapitel transportiert.
// MA: Wieso kann ich das denn? Muss ich das machen? Weshalb mache ich das denn?

Um die standardmäßig unformatierten Antworten der REST-API formatiert zu erhalten, können Sie ein `curl`-Kommando mit `| jq` in den Kommandozeilen-JSON-Prozessor `jq` umleiten -- sofern `jq` installiert ist.

In den folgenden Überschriften stehen in Klammern die Titel der Endpunkte, wie sie in der API-Dokumentation zu finden sind.


[#restapi_show_all_folders]
[discrete]
=== Alle Ordner anzeigen (Show all folders)

Hier werden _alle_ Ordner im Setup angezeigt -- rekursiv ausgehend vom Hauptordner [.guihint]#Main# -- _ohne_ Auflistung der enthaltenen Hosts:

[{shell}]
----
{c-user} curl -G \
--request GET \
--header "Authorization: Bearer $USERNAME $PASSWORD" \
--header "Accept: application/json" \
--data-urlencode #'parent=~'# \
--data-urlencode #'recursive=true'# \
--data-urlencode #'show_hosts=false'# \
"$API_URL/domain-types/folder_config/collections/all"
----


[#restapi_show_all_hosts_in_a_folder]
[discrete]
=== Alle Hosts eines Ordners anzeigen (Show all hosts in a folder)

Hier werden die Hosts im Unterordner [.guihint]#Main > Linux# angefordert:

[{shell}]
----
{c-user} curl \
--request GET \
--header "Authorization: Bearer $USERNAME $PASSWORD" \
--header "Accept: application/json" \
"$API_URL/objects/folder_config/#~linux#/collections/hosts"
----


[#restapi_create_a_folder]
[discrete]
=== Ordner erstellen (Create a folder)

Hier wird in [.guihint]#Main > Linux# ein Unterordner [.guihint]#Production Hosts# erstellt -- im Dateisystem als Verzeichnis `production_hosts`.
Dem neuen Ordner wird dabei das xref:glossar#host_tag[Host-Merkmal] [.guihint]#Productive system# aus der xref:host_tags#predefined_tags[vordefinierten Host-Merkmalsgruppe] [.guihint]#Criticality# zugewiesen:

[{shell}]
----
{c-user} curl \
--request POST \
--header "Authorization: Bearer $USERNAME $PASSWORD" \
--header "Accept: application/json"     \
--header "Content-Type: application/json" \
--data '{
    "attributes": {
        "tag_criticality": "prod"
    },
    "name": "production_hosts",
    "parent": "~linux",
    "title": "Production Hosts"
    }' \
"$API_URL/domain-types/folder_config/collections/all"
----


[#restapi_create_a_host]
[discrete]
=== Host erstellen (Create a host)

Hier wird im Ordner [.guihint]#Main > Linux > Production Hosts# der Host `mylinuxserver` mit der IP-Adresse `192.168.0.123` und dem Host-Merkmal [.guihint]#Use piggyback data from other hosts if present# erstellt:

[{shell}]
----
{c-user} curl \
--request POST \
--header "Authorization: Bearer $USERNAME $PASSWORD" \
--header "Accept: application/json" \
--header "Content-Type: application/json" \
--data '{
    "attributes": {
        "ipaddress": "192.168.0.123",
        "tag_piggyback": "auto-piggyback"
    },
    "folder": "\~linux~production_hosts",
    "host_name": "mylinuxserver"
    }' \
"$API_URL/domain-types/host_config/collections/all"
----


[#restapi_show_a_host]
[discrete]
=== Host anzeigen (Show a host)

Durch die Anzeige eines Hosts erhalten Sie die Liste der ihm zugewiesenen Attribute.
Zusätzlich wird dabei das HTTP ETag (_entity tag_) geliefert, das Sie benötigen, um einen Host zu ändern.
Die Änderung eines Objekts via REST-API erfolgt nicht über die ID oder den Titel des Objekts. Stattdessen wird das generierte ETag genutzt, mit dem verhindert werden soll, dass mehrere konkurrierende Anfragen Werte desselben Objekts gegenseitig überschreiben.

Das ETag wird im Antwort-Header (_response header_) zurückgeliefert.
Damit dieser Header angezeigt wird, rufen Sie `curl` mit der Option `-v` (für _verbose_) auf.
Hier wird der Host `mylinuxserver` abgefragt -- und aus der Antwort nur die Zeile mit dem ETag gezeigt:

[{shell}]
----
{c-user} curl -vG \
--request GET \
--header "Authorization: Bearer $USERNAME $PASSWORD" \
--header "Accept: application/json" \
"$API_URL/objects/host_config/#mylinuxserver#"
...
< ETag: "57db3792f23bd81ca7447ba4885fa2865d0c78aed4753229b29e179e539da48b"
...
----


[#restapi_update_a_host]
[discrete]
=== Host ändern (Update a host)

Vor der Änderung besorgen Sie sich das ETag des Hosts, wie im Abschnitt xref:restapi_show_a_host[Host anzeigen (Show a host)] beschrieben.
Das ETag tragen Sie dann im Anfrage-Header unter `If-Match` ein.
Hier wird das beim Erstellen des Hosts gesetzte Host-Merkmal aus der Gruppe [.guihint]#Piggyback# wieder gelöscht und stattdessen das vordefinierte Merkmal [.guihint]#API integrations if configured, else Checkmk agent# gesetzt:

[{shell}]
----
{c-user} curl \
--request PUT \
--header "Authorization: Bearer $USERNAME $PASSWORD" \
--header "Accept: application/json" \
--header "If-Match: "57db3792f23bd81ca7447ba4885fa2865d0c78aed4753229b29e179e539da48b"" \
--header "Content-Type: application/json" \
--data '{
    "remove_attributes": [
        "tag_piggyback"
    ],
    "update_attributes": {
        "tag_agent": "cmk-agent"
    }
    }' \
"$API_URL/objects/host_config/#mylinuxserver#"
----


[#restapi_execute_a_service_discovery_on_a_host]
[discrete]
=== Service-Erkennung auf einem Host durchführen (Execute a service discovery on a host)

Damit eine xref:hosts_setup#services[Service-Erkennung] auch tatsächlich die erwarteten Services liefert, müssen Sie zuvor auf Linux- und Windows-Hosts die zugehörigen xref:wato_monitoringagents#[Monitoring-Agenten] installieren und registrieren.

Hier wird die Service-Erkennung auf dem Host `mylinuxserver` durchgeführt mit der Option `refresh`, was in der {CMK}-GUI dem Knopf [.guihint]#Full service scan# entspricht:

[{shell}]
----
{c-user} curl \
--request POST \
--header "Authorization: Bearer $USERNAME $PASSWORD" \
--header "Accept: application/json" \
--header "Content-Type: application/json" \
--data '{
    "host_name": "mylinuxserver",
    "mode": "refresh"
    }' \
"$API_URL/domain-types/service_discovery_run/actions/start/invoke"
----
// TK: Bei diesem Request gibt es keine Rückmeldung und Erfolgskontrolle in der GUI ist auch nicht möglich.


[#restapi_bulk_create_host]
[discrete]
=== Mehrere Hosts erstellen (Bulk create hosts)

Hier werden zwei Hosts im Ordner [.guihint]#Main > Linux > Production Hosts# erstellt: der erste nur mit IP-Adresse und der zweite zusätzlich mit einem xref:monitoring_basics#parents[Parent-Host] und mit zwei xref:glossar#label[Labels:]

[{shell}]
----
{c-user} curl \
--request POST \
--header "Authorization: Bearer $USERNAME $PASSWORD" \
--header "Accept: application/json" \
--header "Content-Type: application/json" \
--data '{
	"entries": [
	{
	"attributes": {
	    "ipaddress": "192.168.0.130"
	},
	"folder": "\~linux~production_hosts",
	"host_name": "mylinuxserver02"
	},
	{
	"attributes": {
	    "ipaddress": "192.168.0.131",
	    "parents": [ "router01" ],
	    "labels": {
	    	"color": "blue-metallic",
	    	"admin": "Fozzie Bear"
	    }
	},
	"folder": "\~linux~production_hosts",
	"host_name": "mylinuxserver03"
	}
	]
	}' \
"$API_URL/domain-types/host_config/actions/bulk-create/invoke"
----


[#restapi_activate_pending_changes]
[discrete]
=== Änderungen aktivieren (Activate pending changes)

Bevor die komplexe Aktion der Umbenennung eines Hosts in Angriff genommen werden kann, ist es nötig, alle in der xref:glossar#configuration_environment[Konfigurationsumgebung] aufgelaufenden Änderungen zu aktivieren.
Hier werden die Änderungen für die Instanz `mysite` gesammelt aktiviert:

[{shell}]
----
{c-user} curl \
--request POST \
--header "Authorization: Bearer $USERNAME $PASSWORD" \
--header "Accept: application/json" \
--header "Content-Type: application/json" \
--data '{
    "force_foreign_changes": false,
    "redirect": false,
    "sites": [
        "mysite"
     ]
     }' \
"$API_URL/domain-types/activation_run/actions/activate-changes/invoke"
----


[#restapi_bulk_rename_a_host]
[discrete]
=== Host umbenennen (Rename a host)
// TK: Bulk update hosts tut nicht das, was die GUI mit regexes anbietet, daher nur Umbenennung eines einzelnen Hosts.

Auch ein neuer Name ändert den Host.
Besorgen Sie sich daher zuerst das aktuelle ETag des Hosts, z.B. von `mylinuxserver`, wie im Abschnitt xref:restapi_show_a_host[Host anzeigen (Show a host)] beschrieben, und tragen es im Anfrage-Header unter `If-Match` ein.
Hier wird der Host in `mylinuxserver01` umbenannt:

[{shell}]
----
{c-user} curl \
--request PUT \
--header "Authorization: Bearer $USERNAME $PASSWORD" \
--header "Accept: application/json" \
--header "If-Match: "a200832df1b3c5ebe8f30809177630abbdcf8f7cbd9d0f69bd9f229b359f4d00"" \
--header "Content-Type: application/json" \
--data '{
	"new_name": "mylinuxserver01"
	}' \
"$API_URL/objects/host_config/#mylinuxserver#/actions/rename/invoke"
----
////
SP: Der Befehl funktioniert, aber ich bekomme eine (möglicherweise verwirrende) Info:
"{"title": "An exception occurred.", "status": 500, "detail": "Error running automation call <tt>rename-hosts<\/tt> (exit code 1), error: <pre>Invalid configuration variable 'cmc_fetcher_helpers'\nInvalid configuration variable 'cmc_import_nagios_state'\nInvalid configuration variable 'host_recurring_downtimes'\n--> Found 3 invalid variables\nIf you use own helper variables, please prefix them with _.\n<\/pre>"}."
////
// TK: Bei mir hat es problemlos funktioniert (sogar zweimal)
