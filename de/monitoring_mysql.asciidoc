include::global_attr.adoc[]
= MySQL überwachen
:revdate: 2021-12-30
:title: MySQL überwachen
:description: Mit dem {CMK} Plugin für Windows, Linux, Solaris und AIX überwachen Sie vollumfänglich MySQL.

{related-start}
link:agent_linux.html[Linux überwachen]
link:wato_monitoringagents.html[Monitoring-Agenten]
link:check_plugins_catalog.html[Katalog der Checkplugins]
{related-end}

== Einleitung

{CMK} erlaubt Ihnen die umfangreiche Überwachung von MySQL und Galera Cluster
für MySQL. Eine vollständige Liste der Überwachungsmöglichkeiten können
Sie in unserem link:https://checkmk.de/cms_check_plugins_catalog.html#Applications[Katalog der Check-Plugins]
nachlesen. Unter anderem kann {CMK} die folgenden Werte überwachen:

* link:https://checkmk.de/cms_check_mysql_sessions.html[ MySQL Database sessions]
* link:https://checkmk.de/cms_check_mysql_galeradonor.html[ MySQL Database: Galera Donor]
* link:https://checkmk.de/cms_check_mysql_galerasize.html[ MySQL Database: Galera Size]
* link:https://checkmk.de/cms_check_mysql_galerastartup.html[ MySQL Database: Galera Startup]
* link:https://checkmk.de/cms_check_mysql_galerastatus.html[ MySQL Database: Galera Status]
* link:https://checkmk.de/cms_check_mysql_galerasync.html[ MySQL Database: Galera Sync Status]
* link:https://checkmk.de/cms_check_mysql_connections.html[ MySQL Maximum connection usage since startup]
* link:https://checkmk.de/cms_check_mysql_slave.html[ MySQL Database: Slave Sync Status]
* link:https://checkmk.de/cms_check_mysql_ping.html[ MySQL Deamon: Status]
* link:https://checkmk.de/cms_check_mysql_innodb_io.html[ MySQL InnoDB engine IO statistics]
* link:https://checkmk.de/cms_check_mysql.html[ MySQL: Version]
* link:https://checkmk.de/cms_check_mysql_capacity.html[ Size of MySQL tablespaces]

Um die Datenbanken überwachen zu können, benötigen Sie neben dem {CMK}-Agenten
lediglich das Agenten-Plugin auf dem Datenbankserver. Zusätzliche Software wird
weder auf dem {CMK}- noch auf dem Datenbankserver benötigt.

Im Folgenden wird die Einrichtung für Linux- und Windows-Hosts beschrieben. Weiter
unten, gehen wir auf die Einrichtung über die xref:monitoring_mysql#bakery[Agent Bakery]
ein.


== Einrichten der Überwachung

[#benutzereinrichten]
=== Benutzer einrichten

==== Linux und Windows

// SK: Es scheint noche eine weitere Vorraussetzung für Windows-Hosts zu geben.
// SK: Das Plugin mk_mysql.vbs findet MySQL Instanzen nur, wenn diese als
// SK: Windows Service installiert wurden und als solcher laufen.
// SK: MySQL-Windows-Prozesse werden nicht gefunden.
// SK: MySQL empfiehlt zwar ohnehin MySQL als Windows Server laufen zu lassen,
// SK: aber vielleicht sollten wir noch darauf hinweisen. Was meist du?
// SK: Oder ist das im Grunde CMK-Standard?!?
// MA: Für mich ein Fall für die Diagnosemöglichkeiten. Wenn wir es nicht unterstützen, kann man es da abfangen, oder?

Die einzige Voraussetzung für die Einrichtung der Überwachung innerhalb von MySQL
ist, dass ein Datenbanknutzer und dessen Passwort vorhanden sein muss. Dieser
Benutzer benötigt lediglich lesende Rechte auf die MySQL-Instanzen. Sollte noch
kein solcher Benutzer vorhanden sein, legen Sie diesen in den zu überwachenden
Instanzen an. Melden Sie sich dazu mit einem Benutzer mit ausreichenden
Zugriffsberechtigungen in MySQL an und erzeugen Sie anschließend einen neuen
Datenbanknutzer:

[{sql}]
----
mysql> CREATE USER 'checkmk'@'localhost' IDENTIFIED BY 'MyPassword';
----

Dieser neu angelegte Benutzer benötigt die Berechtigung, die Instanzen zu
lesen. Prüfen Sie daher, ob der Benutzer die notwendigen Berechtigungen
hat, oder fügen Sie sie mit dem folgenden Befehl hinzu. Im folgenden Beispiel
wird das für den Benutzer `checkmk` erledigt:

[{sql}]
----
mysql> GRANT SELECT, SHOW DATABASES ON *.* TO 'checkmk'@'localhost';
----

Sollten Sie die MySQL Replikation einsetzen so muss dem Nutzer zur Überwachung
der Replica Server noch mindestens das Recht REPLICATION CLIENT erteilt werden:

[{sql}]
----
mysql> GRANT REPLICATION CLIENT ON *.* TO 'checkmk'@'localhost';
----


=== Plugin installieren

==== Linux

Das benötigte Plugin `mk_mysql` finden Sie auf ihrem {CMK}-Server im
Verzeichnis `~/share/check_mk/agents/plugins/`. Kopieren Sie dieses nun
in einem ersten Schritt in das Plugins-Verzeichnis des xref:agent_linux#manualplugins[Agenten]
auf dem zu überwachenden Host. Das Plugins-Verzeichnis lautet im Regelfall
`/usr/lib/check_mk_agent/plugins`. Sobald das Skript im angegebenen
Verzeichnis liegt, machen Sie dieses noch ausführbar:

[{shell}]
----
{c-root} chmod 700 mk_mysql
----

Selbstverständlich kann auch dieses Plugin auf Wunsch
xref:agent_linux#async_plugins[asychron ausgeführt] werden.

// SK: Interessant, oder?


==== Windows

Der Agent für Windows wird standardmäßig bereits mit einer ganzen Reihe von Plugins
ausgeliefert. Deshalb finden Sie auch das Plugin für die Überwachung von MySQL
nach der Installation des Agenten bereits auf Ihrem Host. Dieses kopieren Sie für die
Verwendung nur noch in das richtige Verzeichnis.

[{powershell}]
----
PS> copy "c:\Program Files (x86)\checkmk\service\plugins\mk_mysql.vbs" c:\ProgramData\checkmk\agent\plugins\
----


=== Konfigurationsdatei erstellen

==== Linux

Erzeugen Sie anschließend eine Datei mit dem Namen `mysql.cfg` im
xref:agent_linux#pluginconfig[Konfigurationsverzeichnis] (regulär: `/etc/check_mk`)
des {CMK}-Agenten auf dem Ziel-Host. Unter Verwendung der darin eingetragenen
Nutzerdaten, kann der Agent die gewünschten Informationen aus Ihrer MySQL-Instanz
abrufen. Zwar ist die Angabe eines Datenbanknutzers optional, wir empfehlen diese
allerdings, da der Agent das Plugin in der Regel als _root_ ausführt. Diese
Angabe wird im üblichen Format für MySQL Konfigurationsdateien vorgenommen:

./etc/check_mk/mysql.cfg
[{ini}]
----
[client]
user=checkmk
password=MyPassword
----

Die so gespeicherten Zugangsdaten werden durch das folgende Kommando noch vor
unbefugtem Zugriff geschützt:

[{shell}]
----
{c-root} chmod 400 mysql.cfg
----


==== Windows

Auf einem Windows-Host legen Sie im unten angegebenen Verzeichnis eine Datei
names `mysql.ini` an.

.C:\ProgramData\checkmk\agent\config\mysql.ini
[{ini}]
----
[client]
user=checkmk
password=MyPassword
----

Sollten Sie auf dem Host mehrere MySQL-Instanzen mit verschiedenen Nutzernamen
und Passwörtern betreiben, erstellen einfach Sie pro Instanz eine .ini-Datei nach dem
folgenden Namensschema: `mysql_INSTANZ-ID.ini`


=== Services einrichten

Nachdem Sie das Plugin nun installiert und konfiguriert haben, können Sie für
diesen Host eine xref:wato_hosts#services[Serviceerkennung] durchführen. Der folgende
Screenshot zeigt dabei nur eine Auswahl der auffindbaren Services:

image::mysql_discovery.png[]


== Erweiterte Konfiguration

=== Asynchrone Ausführung des Plugins

Das Plugin für die Überwachung von MySQL kann - wie so viele andere -
asynchron ausgeführt werden, um beispielsweise längeren Laufzeiten bei großen
MySQL-Instanzen Rechnung zu tragen.


====  Linux

Auf einem Linux-Host wird das Plugin dafür nur in ein Unterverzeichnis des
Plugin-Verzeichnisses verschoben. Möchten Sie das Plugin beispielsweise
nur alle 5 Minuten ausführen, so verschieben Sie das Skript mk_mysql einfach in
ein Unterverzeichnis mit dem Namen `300`. Eine detailierte Anleitung zur
asychronen Ausführung von Plugins finden Sie im
xref:agent_linux#async_plugins[Artikel über den Linux-Agenten].


====  Windows

Um das Plugin unter Windows asynchron auszuführen, passen Sie die Konfiguration
des Agenten an und erweitern die Sektion `execution` unter
`plugins` um den folgenden Eintrag:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{yaml}]
----
plugins:
    execution:
        - pattern: mk_mysql.vbs
          cache_age: 300
          async: yes
----

Eine detailierte Anleitung zur asychronen Ausführung von Plugins auf einem
Windows-Host finden Sie im Artikel über den
xref:agent_windows#customizeexecution[Windows-Agenten].


=== Zusätzliche Optionen der Konfigurationsdateien

==== Kommunikation mit MySQL über Socket einrichten

Statt den Agenten über TCP mit MySQL kommunizieren zu lassen, können Sie {CMK}
anweisen den Socket anzusprechen. Dazu definieren Sie in der mysql.cfg lediglich die
Variable `socket`. Hier an dem Beispiel der Windows-Konfigurationsdatei:

.C:\ProgramData\checkmk\agent\config\mysql.ini
[{ini}]
----
[client]
user=checkmk
password=MyPassword
*socket=/var/run/mysqld/mysqld.sock*
----


==== Host manuell definieren

Desweiteren ist es über die Konfigurationsdateien auch möglich den MySQL-Host
manuell zu setzen. Die entsprechende Variable dazu heißt schlicht `host`. Auch hier wieder an dem Beispiel von Windows:

.C:\ProgramData\checkmk\agent\config\mysql.ini
[{ini}]
----
[client]
user=checkmk
password=MyPassword
*host=127.0.0.1*
----


=== Schwellwerte konfigurieren

==== Sitzungen überwachen

Einige der so eingerichteten Checks haben keine voreingestellten
Schwellwerte. Meistens ist das der Fall, weil es keine sinnvollen Standardwerte gibt, die
in den meisten Anwendungsfällen ausreichend wären. Diese können aber
mit wenigen Handgriffen eingerichtet werden. Über die bekannten
[.guihint]#Host & Service Parameters# finden Sie beispielsweise die Regel
[.guihint]#MySQL Sessions & Connections#. Hiermit lassen sich die für ihre
MySQL-Instanz sinnvollen Schwellwerte für den Service [.guihint]#MySQL sessions# festlegen.

image::mysql_sessions_connections.png[]


==== Verbindungen überwachen

Auch für die Auslastung der durch MySQL vorgegebenen maximalen Anzahl an
gleichzeitigen Verbindungen haben wir keine Schwellwerte vorgegeben, da diese viel
stärker als bei anderen Services vom Aufbau Ihrer MySQL-Instanz abhängig sind.
Die Einrichtung entsprechender Schwellwerte lässt sich mit einer Regel aus dem
Satz [.guihint]#MySQL Connections# im Handumdrehen bewerkstelligen.
Gleiches gilt dann auch für die Anzahl der offenen Verbindungen.

image::mysql_connections.png[]


==== Datenbankgröße überwachen

Die Größe einzelner Datenbanken in MySQL wird durch das Check-Plugin
link:https://checkmk.de/cms_check_mysql_capacity.html[mysql_capacity] überwacht. Schwellwerte hierfür lassen sich
mit der Regel [.guihint]#Size of MySQL databases# festelegen.

image::mysql_size_database.png[]

//H2:Überwachung weiterer Status-Variablen
//
//Mit Hilfe eines Pakets aus der link:https://exchange.checkmk.com/[{CMK} Exchange]
//ist es möglich noch eine ganze Reihe weiterer Variablen des MySQL Status zu
//überwachen. Damit ist es beispielsweise möglich die Werte für Bytes_sent,
//Bytes_received oder auch Slow_queries in ihr Monitoring aufzunehmen. Das Paket
//link:https://exchange.checkmk.com/p/mysql-status-1[Check of MySQL Status Variables with Instance Support]
//lässt sich nach der Installation vollständig über WATO konfigurieren.
//
// SK: Ist der Verweis auf das Paket in der Exchange "too much"?
// MA: Japp - wenn es hier steht, werden wir garantiert Tickets bekommen, wenn da etwas nicht funktioniert...


=== Log-Dateien überwachen

Unter Zuhilfenahme des Check-Plugins link:https://checkmk.de/cms_check_logwatch.html[Logwatch] können Sie auch
die von MySQL erzeugten Log-Dateien auf Fehler überwachen. Nach der Einrichtung
des Plugins prüfen Sie zuerst, wo in Ihrer MySQL-Instanz die entsprechenden
Log-Dateien liegen. Den genauen Speicherort finden Sie in der .ini- bzw.
.cnf-Datei Ihrer Instanz.

In der Konfigurationsdatei von Logwatch können Sie die für Sie interessanten
Logs eintragen und auf einem Linux-Host etwa die folgenden Einträge vornehmen:

./etc/check_mk/logwatch.cfg
[{file}]
----
/var/log/mysql/error.log
 W Can't create/write to file
 C [ERROR] Can't start server
 C mysqld_safe mysqld from pid file /var/run/mysql/mysqld.pid ended
----


[#bakery]
== Konfiguration über die Agent Bakery

{cee-only}
Die Einrichtung wird mittels der xref:wato_monitoringagents#bakery[Agent Bakery]
sehr vereinfacht, da Syntaxfehler in den Konfigurationsdateien vermieden werden
und Anpassungen an sich verändernde Umgebungen einfach bewerkstelligt werden
können. Der wesentliche Unterschied zu einer manuellen Installation ist, dass
Sie nur noch dann auf dem MySQL-Host auf der Kommandozeile arbeiten müssen, wenn
Sie spezielle MySQL-spezifische Konfigurationen vornehmen möchten.

Für die erste Einrichtung reicht es, wenn Sie den
xref:monitoring_mysql#benutzereinrichten[Datenbankbenutzer auf dem MySQL-Host einrichten]
und eine entsprechende Regel in der Bakery anlegen. Sie finden den Regelsatz
unter [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules#. In dem Suchfeld können Sie dann nach
`mysql` suchen:

[{image-border}]
image::mysql_bakery_ruleset_search.png[]

Tragen Sie User ID und Password dem neuen Datenbanknutzer entsprechend ein. Über
das folgende Feld können Sie für Linux-Hosts den {CMK}-Agenten so einstellen,
dass er die Verbindung zu MySQL nicht über TCP sondern eben über den Socket
aufbaut. Dies kann je nach Größe und Auslastung zu einer besseren Performance
beitragen.

Eine asynchrone Ausführung des MySQL-Plugins ist ebenfalls über diesen Regelsatz
einstellbar. Dies kann sinnvoll sein, um längeren Laufzeiten bei großen
MySQL-Instanzen Rechnung zu tragen oder wenn die Statusdaten schlicht nicht im
Minutentakt benötigt werden.

image::mysql_bakery.png[]


== Diagnosemöglichkeiten

Sollte es beispielsweise bei der Einrichtung der Überwachung zu unerwartetem
Verhalten oder Problemen kommen, so empfiehlt sich eine Prüfung direkt auf einem
betroffenen Host. Da es sich bei den Plugins für die Überwachung von MySQL
sowohl für Linux als auch für Windows um Shell- bzw. Visual Basic-Skripte
handelt, können diese leicht auch ohne den Agenten ausgeführt werden. Unabhängig
vom verwendeten Betriebssystem muss der Shell bzw. der Kommandozeile vorher
nur das jeweilige Konfigurationsverzeichnis bekannt gemacht werden.


=== Diagnosemöglichkeiten unter Linux

Prüfen Sie zuerst die für ihren jeweiligen Host gültigen Verzeichnisse.

[{shell}]
----
{c-user}  grep 'export MK' /usr/bin/check_mk_agent
export MK_LIBDIR='/usr/lib/check_mk_agent'
export MK_CONFDIR='/etc/check_mk'
----

Erzeugen Sie nun mit dem Befehl export die Umgebungsvariablen `MK_CONFDIR`
und `MK_LIBDIR`. Passen Sie die Befehle entsprechend Ihrer tatsächlichen
Verzeichnisse an.

[{shell}]
----
{c-root} export MK_CONFDIR="/etc/check_mk/"
{c-root} export MK_LIBDIR="/usr/lib/check_mk_agent"
----

*Wichtig:* Diese Umgebungsvariablen existieren nur in der aktuell geöffneten Shell und
verschwinden sobald Sie diese schließen.

Anschließend können Sie das Skript `mk_mysql` direkt im Pluginverzeichnis
des {CMK}-Agenten ausführen.

[{shell}]
----
{c-root} $MK_LIBDIR/plugins/mk_mysql
----

Wenn alle Rechte für den Datenbanknutzer korrekt erteilt sind, sollten Sie jetzt
selbst in einer kleinen und frischen MySQL-Umgebung mehrere Hundert Zeilen
Ausgabe sehen.

// MA: Und was mache ich, wenn nicht? Wenn ich diesen Abschnitt gezielt lese, dann ja, weil es eben nicht richtig funktioniert.


=== Diagnosemöglichkeiten unter Windows

Um das Check-Plugin auf einem Windows-Host manuell anführen zu können, öffnen Sie
zuerst eine Kommandozeile mit Admin-Rechten. Setzen Sie in dieser
Kommandozeile nun die Umgebungsvariable `MK_CONFDIR`. Diese wird benötigt,
damit das Plugin Ihre Konfigurationsdateien finden kann.

[{powershell}]
----
PS> set MK_CONFDIR=c:\ProgramData\checkmk\agent\config
----

*Wichtig:* Auch hier ist die gesetzte Umgebungsvariable nicht permanent,
sondern besteht nur, solange diese Kommandozeile offen ist.

Bei der eigentlichen Ausführung des Plugings empfiehlt es sich die Ausgabe auf
die Kommandozeile umzulenken. Zu diesen Zwecks liefert Windows das Bordwerkzeug
cscript mit.

[{powershell}]
----
PS> cscript c:\ProgramData\checkmk\agent\plugins\mk_mysql.vbs
----


=== Mögliche Fehler und Fehlermeldungen

==== mysqladmin: connect to server at _xyz_ failed

Die Fehlermeldung "connect to server at xyz failed" deutet darauf hin, dass der
in der Konfigurationsdatei angegebene Nutzer keinen Zugriff auf MySQL hat.
Prüfen Sie zuerst, dass sich keine Übertragungsfehler beim Anlegen der
Konfigurationsdatei (mysql.cfg bzw. mysql.ini) eingeschlichen haben.

Sollte der in der Konfigurationsdatei angegebene Nutzername oder das Passwort
falsch sein, erhalten Sie in etwa die folgende Fehlermeldung:

[{shell}]
----
Access denied for user checkmk
----


==== Größe der Datenbank wird nicht ausgegeben

Sollten Sie in {CMK} zwar eine ganze Reihe von Daten Ihrer MySQL-Instanz sehen,
es jedoch keinen Service geben, welcher die Größe der enthaltenen Datenbanken
überwacht, so ist dies ein Indiz dafür, dass der Datenbanknutzer nicht über das
Recht SELECT verfügt.

Prüfen Sie Ihren Datenbanknutzer aus MySQL heraus mit dem folgenden Befehl:

[{sql}]
----
mysql> *show grants for 'checkmk'@'localhost';*
+--------------------------------------------------------------------------+
| Grants for checkmk@localhost                                             |
+--------------------------------------------------------------------------+
| GRANT SELECT, SHOW DATABASES ON *.* TO `checkmk`@`localhost`             |
+--------------------------------------------------------------------------+
----

Sollte hier in Ihrer Ausgabe das Schlüsselwort SELECT fehlen, so erteilen Sie
dem Datenbanknutzer die entsprechenden Rechte, wie im Abschnitt
xref:monitoring_mysql#benutzereinrichten[Benutzer einrichten] angegeben.


== Dateien und Verzeichnisse

=== Auf dem MySQL-Host

==== Linux

[cols="55,~"]
|===
|Pfad |Verwendung 

|/usr/bin/check_mk_agent |Der Agent, welcher alle Daten zu dem Host sammelt.
|/usr/lib/check_mk/plugins/ |Das übliche Verzeichnis, in dem Plugins abgelegt werden.
|/etc/check_mk/mysql.cfg |Die Konfigurationsdatei für das MySQL-Plugin.
|/etc/check_mk/mysql.local.cfg |Weitere Konfigurationsdatei um Host-spezifische Sockets anzugeben
|===



==== Windows

[cols="55,~"]
|===
|Pfad |Verwendung 

|C:\ProgramData\checkmk\agent\plugins\ |übliches Plugins-Verzeichnis
|C:\ProgramData\checkmk\agent\config\ |Übliches Konfigurationsverzeichnis
|C:\Program Files (x86)\checkmk\agent\config\ |übliches Konfigurationsverzeichnis vor {CMK}-Version {v16}
|C:\Program Files (x86)\check_mk\plugins\ |übliches Plugins-Verzeichnis vor {CMK}-Version {v16}
|===


=== Auf dem {CMK}-Server

[cols="55,~"]
|===
|Pfad |Verwendung 

// SK: cfg_examples gibt es für MySQL derzeit gar nicht. Würde ich aber gerne noch zusammen mit diesem Artikel zur Verfügung stellen. Ist ja recht übersichtlich.
// |share/check_mk/agents/cfg_examples/ |Hier befinden sich Beispiele zu den Konfigurationsdateien, welche //auf dem MySQL-Host benötigt werden.
|share/check_mk/agents/plugins/mk_mysql |Das Plugin, welches auf dem MySQL-Host die Daten holt.
|===



