include::global_attr.adoc[]
= Monitoring-Agenten
:revdate: draft
:title: Monitoring-Agenten - Mit {CMK} Geräte im Netzwerk überwachen
:description: Hier bekommen Sie einen schnellen Überblick, mit welchen Methoden Server, Switche und andere Geräte überwacht werden können und wie der Agent funktioniert.

{related-start}
link:agent_linux.html[Linux überwachen]
link:agent_windows.html[Windows überwachen]
{related-end}


== Einleitung

Damit ein Monitoring-System von einem überwachten Zielsystem mehr Informationen bekommt als nur, ob dieses erreichbar ist, benötigt es dessen Mithilfe. 
Denn wie soll {CMK} z.B. wissen, wie voll ein Dateisystem auf einem Server ist, ohne dass dieser das irgendwie mitteilt? 
Die Komponente, die diese Auskunft gibt, ist immer ein aktives Stück Software -- also ein _Monitoring-Agent_.

Natürlich gibt es Situationen, in denen man für das Monitoring nicht extra einen Agenten _installieren_ muss -- weil nämlich schon einer vorhanden ist, der genutzt werden kann. 
Bestes Beispiel ist hier SNMP:
Alle verwaltbaren Netzwerkgeräte und Appliances haben einen xref:snmp#[SNMP-Agenten] eingebaut.

Wie überall gibt es auch hier eine Ausnahme: die Überwachung von _Netzwerkdiensten._
So kann z.B. eine Webanwendung von ihrer Natur her Remote per HTTP abgefragt und über diesen Weg auch überwacht werden.
Aber selbst in diesem Fall kommt meist zusätzlich ein Agent zum Einsatz, mit dem man auch die übrigen Daten des Servers in das Monitoring bekommt.

Folgendes Schema zeigt Ihnen die vier verschiedenen Wege, wie {CMK} auf zu überwachende Systeme zugreift:

// TK: In der Grafik sollte Check_MK durch Checkmk ersetzt werden.
image::agent_access.png[alt="Illustration der Wege, auf denen {CMK} auf die überwachten Systeme zugreift.",width=450px]

[cols="25,~,25", options="header"]
|===
|Methode |Beschreibung |Vorbereitung 
|xref:snmp#[SNMP] |{CMK} greift auf den im Zielgerät vorhandenen SNMP-Agenten zu. Mit aktiven Anfragen (GET) holt es Details über den Systemzustand ab. |xref:snmp#enable_snmp[SNMP-Agent freischalten]
|{CMK}-Agent |Für Server und Workstations hat {CMK} eigene Agenten. Unterstützt werden verschiedenste Betriebssysteme -- von gängigen wie Windows und Linux, bis zu Exoten wie OpenVMS. Die Agenten verhalten sich passiv und horchen auf TCP-Port 6556. Erst bei einer Abfrage durch den {CMK}-Server werden sie aktiv und antworten mit den benötigten Daten. |{CMK}-Agent installieren
|xref:datasource_programs#specialagents[Spezialagent] |Einige Systeme erlauben weder die Installation eines Agenten noch unterstützen sie SNMP auf brauchbare Weise. Stattdessen bieten sie Management-APIs, die auf TELNET, SSH oder HTTP/XML basieren. Über diese „Spezialagenten“, die *auf dem {CMK}-Server* laufen, fragt {CMK} diese Schnittstellen ab. |API-Konto für {CMK} anlegen
|xref:active_checks#[Aktive Checks] |Netzwerkbasierte Dienste wie HTTP, SMTP oder IMAP können naturbedingt einfach über das Netzwerk abgefragt werden. Dazu verwendet {CMK} teils eigene, teils fertige Plugins, die ursprünglich für Nagios entwickelt wurden. Diese werden auch als „aktive Checks“ bezeichnet. Sehr beliebt ist z.B. `check_http` für das Abfragen von Webseiten.  |keine
|===


=== Überwachung per Events

Bisher haben wir nur von _aktiver_ Überwachung gesprochen -- der Paradedisziplin von {CMK}. 
Es gibt auch den umkehrten Weg, nämlich dass die Zielsysteme von sich aus Nachrichten an das Monitoring senden, z.B. per Syslog oder SNMP-Traps. 
Für dieses ganze Thema bietet {CMK} die _Event Console_, die in einem xref:ec#[eigenen Artikel] beschrieben ist.


[#agents]
== Der {CMK}-Agent

Wie beschrieben, benötigen Sie für die Überwachung von Servern und Workstations einen {CMK}-Agenten. 
Im {CMK}-Projekt werden aktuell Agenten für elf verschiedene Betriebssystemfamilien gepflegt.  
Alle diese Agenten sind Bestandteil von {CMK} und stehen über die Weboberfläche des {CMK}-Servers zum Download bereit. 
In den {EE} gibt es außerdem die xref:bakery[Agentenbäckerei]  (_Agent Bakery_).
Diese erlaubt es Ihnen, eigene Agenten zu „backen“, welche eine individuelle Konfiguration und Sammlung von Plugins enthalten. 
Das geht sogar individuell pro Host unterschiedlich.


[#install_download_page]
== Installation über die Downloadseite

Die Agenten erreichen Sie über [.guihint]#Setup > Agents#.
In der {RE} führen Sie die Menüeinträge [.guihint]#Linux#, [.guihint]#Windows# und [.guihint]#Other operating systems# direkt zu den Download-Seiten, auf denen Sie die vorkonfigurierten Agenten und Agenten-Plugins finden, im folgenden Beispiel zur Download-Seite für [.guihint]#Linux, Solaris, AIX#:

image::agent_download_linux_cre.png[alt="Liste der Linux-Agenten zum Download in der {RE}."]

In den {EE} gelangen Sie mit dem Menüeintrag [.guihint]#Windows, Linux, Solaris, AIX# zu einer Seite, die Ihnen auch den Zugang zur Agentenbäckerei bietet. 
Zusätzlich wird aber auch immer ein generischer Agent angeboten, den Sie sofort herunterladen können. 
Über das Menü [.guihint]#Related# können Sie die oben für die {RE} genannten Download-Seiten aufrufen.

Die paketierten Agenten für Linux (im RPM- und DEB-Dateiformat) und für Windows (im MSI-Dateiformat) finden Sie gleich im ersten Abschnitt der entsprechenden Download-Seite.
Nach der Installation dieser Pakete sind die Agenten grundsätzlich lauffähig und Sie können mit dem Monitoring beginnen.
Die restliche Konfiguration geschieht über Konfigurationsdateien und die Installation von Plugins durch Download von der gleichen Seite sowie manuelles Kopieren in die entsprechenden Verzeichnisse.


=== Details zu Agenten bestimmter Betriebssysteme

Aufbau, Konfiguration und Möglichkeiten der Agenten unterscheiden sich je nach Betriebssystem. 
Daher finden Sie Details zu den Agenten für xref:agent_linux#[Linux] und xref:agent_windows#[Windows] in eigenen Artikeln.


[#bakery]
== Installation über die Agentenbäckerei

=== Einleitung

Zwar funktioniert der {CMK}-Agent auch erstmal „nackt“, also ohne Konfiguration und Plugins, aber in einigen Fällen muss der Agent eben doch
angepasst werden. Beispiele:

* Beschränkung des Zugriffs auf bestimmte IP-Adressen
* Überwachung von Oracle-Datenbanken (Plugin und Konfiguration nötig)
* Überwachung von Text-Logdateien (Plugin, Dateinamen und Textmuster nötig)
* Verwendung der xref:inventory#[Hardware-/Software-Inventur] (Plugin nötig)

{cee-only}
Wenn Sie im Besitz einer der {EE} sind, dann können Sie mit der Agentenbäckerei Agenten individuell paketieren. 
So können Sie Agentenpakete erzeugen, die neben dem eigentlichen Agenten auch Konfiguration und zusätzliche Plugins enthalten. 
Diese Pakete können Sie mit einem einzigen Befehl installieren. 
Sie eignen sich daher ideal für eine automatische Verteilung und Installation. 
Und Sie können sogar für bestimmte Gruppen von Hosts individuelle Agenten erzeugen. 
Das schafft vor allem in Verbindung mit dem xref:agent_deployment#[automatischen Agenten-Update] große Flexibilität.

Sie erreichen die Agentenbäckerei über [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX#:

image::agent_bakery_main.png[alt="Einstiegsseite zur Agentenbäckerei in den {EE}."]

Wenn Sie noch keine Einstellungen für bestimmte Hosts vorgenommen haben, gibt es nur eine einzige Standardagentenkonfiguration.
{CMK} unterstützt mit der Agentenbäckerei die Betriebssysteme Windows, Linux, Solaris und AIX. 
Bei Linux haben Sie dabei die Wahl zwischen den Paketformaten RPM (für Red Hat, CentOS, SLES) und DEB (für Debian, Ubuntu) sowie einem sogenannten „Tarball“ im TGZ-Dateiformat, der einfach als `root` unter `/` ausgepackt wird. 
Für AIX steht ebenfalls ein Tarball bereit. Dieser enthält allerdings keine automatische Integration in den `inetd`. 
Dies muss einmalig von Hand gemacht werden. 
Für Solaris gibt es wiederum den Tarball sowie ein PKG-Paket.

Jede Agentenkonfiguration hat eine eindeutige ID: den [.guihint]#Hash#.
Die ersten 8 Zeichen des Hashs werden in der GUI angezeigt. 
Dieser Hash wird Teil der Paketversion und auch in den Namen der Paketdatei eingebaut. 
Wann immer Sie etwas an der Konfiguration eines Paketes ändern oder {CMK} aktualisieren, ändert sich auch der Hash des Pakets. 
Dadurch erkennt der Paketmanager des Betriebssystems, dass es sich um ein anderes Paket handelt und führt ein Update durch. 
Die Versionsnummer von {CMK} wäre hier nicht ausreichend.


=== Konfiguration über Regeln

Die Konfiguration des Agenten ändern Sie, wie so oft in {CMK}, über xref:wato_rules#[Regeln]. 
Diese bieten Ihnen die Möglichkeit, verschiedene Hosts mit unterschiedlichen Einstellungen oder Plugins auszustatten.
Über den Knopf [.guihint]#Agent rules# gelangen Sie zu einer Seite, die Ihnen alle Regelsätze zeigt, die die Agenten beeinflussen:

image::agent_rules.png[alt="Liste der Regeln für die Agenten."]

Nehmen wir folgendes Beispiel: Sie möchten die Liste der IP-Adressen beschränken, welche auf den Agenten zugreifen dürfen. 
Dazu wählen Sie den Regelsatz [.guihint]#Generic Options > Allowed agent access via IP address (Linux, Windows)#. Tragen Sie als Wert
der Regel eine oder mehrere IP-Adressen ein:

image::agent_rule_ipaccess.png[alt="Regel zur Einschränkung der IP-Adressen zum Zugriff auf den Agenten."]

Gehen Sie nach dem Speichern zurück zur Seite [.guihint]#Windows, Linux, Solaris, AIX#.
Der Knopf icon:button_bake_agents[alt="Symbol zum Backen der Agenten."] sorgt für ein neues Backen der Agenten.
Das Ergebnis: Sie haben nun zwei Konfigurationen:

image::agent_bakery_agentlist.png[alt="Liste mit zwei Konfigurationen der Agenten zum Download."]

In der Spalte [.guihint]#Hosts# finden Sie eine Liste von Hosts, die der jeweiligen Konfiguration zugeordnet sind.
Aus Platzgründen ist diese Liste eventuell nicht vollständig. 
Eine Sonderrolle nehmen die beiden Namen [.guihint]#VANILLA# und [.guihint]#GENERIC# ein.
Diese beiden Pseudo-Hosts sind immer vorhanden und haben folgende Funktionen:

[cols="25,~"]
|===
|[.guihint]#VANILLA# |Ein fiktiver Host, dessen Agent nur mit der Standardkonfiguration gebaut wurde, auf den also *keine* einzige der Agentenregeln Anwendung findet.
|[.guihint]#GENERIC# |Ein fiktiver Host, auf dem genau *alle* Regeln greifen, in denen keine weiteren Bedingungen definiert sind. Dieser Eintrag ist vor allem nützlich, um Agenten auf Hosts zu installieren, die noch gar nicht in das Monitoring aufgenommen wurden.
|===

Je mehr Host-spezifische Regeln Sie aufstellen, desto mehr unterschiedliche Varianten von Agenten werden gebaut. 
Die Agentenbäckerei achtet dabei darauf, dass nur solche Kombinationen von Konfigurationen gebaut werden, die auch von mindestens einem der vorhandenen Hosts verwendet werden.

Sie erreichen die Agentenpakete für einen Host übrigens auch bequem über die Eigenschaften des Hosts, indem Sie in [.guihint]#Setup > Hosts > Hosts# den Host anklicken und im Menü [.guihint]#Hosts# den Eintrag icon:icon_agents[alt="Symbol zur Anzeige der Monitoring-Agenten."] [.guihint]#Monitoring Agent# auswählen:

image::download_host_agent.png[alt="Liste der Agenten für einen Host zum Download."]

Warum werden für jeden Host die Pakete für alle Betriebssysteme angeboten? 
Die Antwort ist sehr einfach: 
Solange kein Agent auf einem System installiert ist, kann {CMK} das Betriebssystem natürlich nicht erkennen! 
Sobald die xref:agent_deployment#[automatischen Agenten-Updates] aktiviert sind, brauchen Sie sich darum ohnehin nicht mehr zu kümmern.


=== Plugins

Sehr viele Regeln befassen sich mit der Installation verschiedener _Plugins._ 
Diese erweitern den Agenten um die Überwachung von ganz bestimmten Komponenten. 
Meist sind dies spezielle Anwendungen wie z.B. Datenbanken. 
Bei der Regel, die das Plugin aktiviert, finden Sie auch gleich die Einstellungen für die Konfiguration des Plugins.
Hier als Beispiel die Regel für die Überwachung von MySQL:

image::agent_rule_mysql.png[alt="Regel für das MySQL Plugin des Agenten."]


=== Manuelle Anpassungen des Agenten

Achten Sie darauf, dass Sie Konfigurationsdateien, die die Agentenbäckerei erzeugt, auf dem Zielsystem *nicht von Hand anpassen.* 
Zwar wird das erstmal funktionieren, aber beim nächsten Update des Agenten sind die Änderungen wieder verloren.
Das Installieren von *zusätzlichen* Plugins und Konfigurationsdateien ist dagegen problemlos möglich.


[#agent_update]
== Wann soll man den Agenten updaten?

Egal, ob Sie nur eine Handvoll oder gleich tausende Hosts überwachen: 
Eine Aktualisierung des {CMK}-Agenten auf allen Hosts ist immer ein größerer Eingriff. 
Das xref:agent_deployment#[automatische Agenten-Update] der {CEE} ist zwar eine Erleichterung, doch trotzdem sollten Sie den Agenten immer
nur dann aktualisieren, wenn das Update:

* einen Fehler behebt, von dem Sie betroffen sind, oder
* neue, benötigte Funktionen enthält.

Damit dies auch so möglich ist, gilt in {CMK} die generelle Regel:
*Neuere {CMK}-Versionen können mit der Ausgabe von älteren Agenten grundsätzlich umgehen.*

*Wichtig:* Umgekehrt gilt das nicht unbedingt. 
Wenn die {CMK}-Version eines Agenten neuer ist, als die des Monitoring-Servers, kann es sein, dass die dort vorhandenen Check-Plugins Ausgaben des Agenten nicht korrekt interpretieren können. 
In so einem Fall gehen die betroffenen Services auf {UNKNOWN}:

//TK: Screenshot nicht aktualisiert wg, zu aufwendig
image::crashed_check.png[alt="Liste von Services im Status UNKNOWN wegen eines fehlgeschlagenen Checks."]

Auch wenn die Ausgabe etwas anderes nahelegt, senden Sie bitte in so einem Fall _keinen_ Crash-Report.


[#diagnostics]
== Fehlerdiagnose

=== Agent über die Kommandozeile testen

////
Die Agenten für die verschiedenen Betriebssysteme werden zwar unabhängig voneinander entwickelt, verhalten sich aber am Ende aus Sicht von {CMK} immer gleich:
Sie öffnen den TCP-Port 6556 für Anfragen durch den Monitoring-Server. 
Das Abfrageprotokoll ist absolut einfach: 
Der Server verbindet sich zu dem Port und schon strömen die Daten des Agenten herein -- in lesbarer Textform. 
Sobald diese vollständig sind, schließt der Agent von sich aus den Port. 
Grundsätzlich liest der Agent keine Daten vom Netzwerk!
////

Sie können einen korrekt installierten Agenten sehr einfach von der Kommandozeile aus abfragen. 
Am besten machen Sie das direkt von der {CMK}-Instanz aus, welche den Agenten auch produktiv überwachen soll. 
So können Sie sicherstellen, dass die IP-Adresse des Servers vom Agenten akzeptiert wird.
Als Befehle eignen sich z.B. `telnet` und `netcat` (oder `nc`).

////
[{shell-raw}]
----
{c-omd} telnet 10.1.1.2 6556
Trying 10.1.1.2...
Connected to 10.1.1.2.
Escape character is '^]'.
<<<check_mk>>>
Version: 2.0.0p5
AgentOS: linux
Hostname: mycmkserver
AgentDirectory: /etc/check_mk
DataDirectory: /var/lib/check_mk_agent
SpoolDirectory: /var/lib/check_mk_agent/spool
PluginsDirectory: /usr/lib/check_mk_agent/plugins
----
////

////
Mit `nc` kommen die Daten „nackt“ daher. 
Das ist z.B. nützlich, wenn Sie diese per Skript weiterverarbeiten möchten:
////

[{shell}]
----
{c-omd} echo | nc 10.1.1.2 6556
16
----

Die Ausgabe `16` zeigt an, dass die Verbindungsaufnahme über den TCP-Port 6556 erfolgreich war und nun der TLS-Handshake stattfinden kann.
Der Agent wurde per Agent Controller bei der {CMK}-Instanz registriert, so dass die Kommunikation TLS verschlüsselt stattfindet und keine Agentenausgabe angezeigt wird.
Einzelheiten zur Registrierung finden Sie im Artikel zum xref:agent_linux#registration[Linux-Agenten] und xref:agent_windows#registration[Windows-Agenten].

Falls die Kommunikation zwischen Agent und {CMK}-Server _noch_ unverschlüsselt ist (wie im Legacy-Pull-Modus) oder unverschlüsselt ist und auch bleibt (wie im Legacy-Modus), erhalten Sie mit diesem Kommando statt der `16` die komplette unverschlüsselte Agentenausgabe (von der im folgenden nur die ersten Zeilen gezeigt werden):

[{shell-raw}]
----
{c-omd} echo | nc 10.1.1.2 6556
<<<check_mk>>>
Version: 2.1.0b9
AgentOS: linux
Hostname: mycmkserver
AgentDirectory: /etc/check_mk
DataDirectory: /var/lib/check_mk_agent
SpoolDirectory: /var/lib/check_mk_agent/spool
PluginsDirectory: /usr/lib/check_mk_agent/plugins
----

Die Ausgabe beginnt immer mit der Zeile `+<<<check_mk>>>+`.
Zeilen, die in `+<<<+` und `+>>>+` eingeschlossen sind, werden als _Sektions-Header_ bezeichnet. 
Sie teilen die Agentenausgaben in Sektionen.
Jede Sektion enthält zusammengehörige Informationen und ist meist einfach die Ausgabe eines Diagnosebefehls. 
Die Sektion `check_mk` spielt eine Sonderrolle. 
Sie enthält allgemeine Informationen über den Agenten selbst, wie z.B. dessen Versionsnummer.

Wenn der Host bereits in das Monitoring aufgenommen ist, können Sie die Daten auch mit dem xref:cmk_commandline#dump_agent[Befehl] `cmk -d` abrufen. 
Dieser verwendet dann die im [.guihint]#Setup# konfigurierte IP-Adresse, berücksichtigt eine eventuell umkonfigurierte Port-Nummer und auch den Fall eines Spezialagenten:

[{shell-raw}]
----
{c-omd} cmk -d mycmkserver
<<<check_mk>>>
Version: 2.1.0b9
----

Wenn das Monitoring für den besagten Host bereits regelmäßig läuft, finden Sie immer eine aktuelle Kopie der Ausgabe im Instanzverzeichnis `~/tmp/check_mk/cache`:

[{shell-raw}]
----
{c-omd} cat tmp/check_mk/cache/mycmkserver
<<<check_mk>>>
Version: 2.1.0b9
----

*Hinweis:* Weitere Diagnosekommandos zur Ausführung auf dem Host des Agenten finden Sie im Artikel zum xref:agent_linux#test[Linux-Agenten] und xref:agent_windows#test[Windows-Agenten.]


[#diagnosticpage]
=== Agent über die Weboberfläche testen

Auch über die Weboberfläche können Sie eine Diagnose des Agenten durchführen. 
Diese berücksichtigt sämtliche Einstellungen, unterstützt auch SNMP-basierte Geräte und solche, die über einen Spezialagenten abgefragt werden. 
Das Praktische: {CMK} probiert hier einfach immer gleichzeitig die Abfrage über TCP-Port 6556 *und* SNMP.

Sie erreichen den Verbindungstest über die Eigenschaften des Hosts:
Wählen Sie auf der Seite [.guihint]#Properties of host# im Menü [.guihint]#Host > Connection tests# und starten Sie den Test durch Klick auf [.guihint]#Run tests#:

image::monitoringagents_host_diag.png[alt="Ergebnis des Verbindungstests zu einem Host."]

Etliche der Einstellungen (z.B. die SNMP-Community) können Sie hier sofort ausprobieren und bei Erfolg speichern.
