// -*- coding: utf-8 -*-

// MFS: FIXME! Dieser Abschnitt sollte nochmal besser mit Links ausgestattet werden, wenn der Apache SSL Artikel überarbeitet wurde.
[#https_handling]
== HTTPS-Handling

An verschiedenen Stellen dieses Artikels ist von einer Absicherung der
jeweiligen Verbindungen über HTTPS die Rede. An dieser Stelle wird noch einmal
zentral zusammengetragen, was alles für eine vollständige Absicherung über HTTPS
getan werden muss. Sowohl die Verbindung von Remote- zu Zentralinstanz als auch von
Host zu {CMK}-Instanz können und sollten per TLS abgesichert
werden, d.h. über HTTPS erfolgen. Dies ist unabhängig davon, ob es sich dabei um ein Single-Site-Setup oder ein verteiltes Setup handelt.


[#https_usage]
=== HTTPS verwenden

Um eine {CMK}-Instanz per HTTPS ansprechen zu können, muss zunächst einmal der Monitoring-Server auch für HTTPS konfiguriert sein. 
Dies kann z.B. über eine geeignete xref:omd_https#[Konfiguration des System-Apache] oder besonders einfach durch die HTTPS-Einstellungen der {CMK} Appliance erreicht werden.

Ob ein {CMK}-Server dann per HTTP oder HTTPS angesprochen wird, entscheidet sich anhand der jeweils konfigurierten URL.
Beginnt diese mit `https://`, wird der Server über das HTTPS-Protokoll über Port 443 angesprochen. 
Das gilt ebenso für das Protokoll, welches Sie mit der Einstellung xref:agent_deployment#update_server_information[Update Server Information] konfiguriert haben.
Prinzipiell können Sie Apache-Seite Weiterleitung von HTTP nach HTTPS erzwingen und dafür (zunächst) einzelne Pfade ausnehmen.
Details der Konfiguration entnehmen Sie der Apache-Konfiguration der Module `mod_rewrite` und `mod_redirect`.

// Das gilt natürlich ebenso im Falle des explizit angegebenen
// Protokolls, wenn es sich beim kontaktierten Server um den aus der Agent Updater
// Konfiguration xref:agent_deployment#update_server_information[Update Server Information] handelt.
//SP: DEr letzte Satz erscheint mir seltsam. Dort stehen sechs Nomen hintereinander. Gehört eventuell ein Teil davon in Klammern?
// MFS: Besser so?

// MFS: Inhaltliche Überarbeitung September/Oktober 2022 hier:
[#provide_certificates]
=== Zertifikate bereitstellen

// MFS: Ich würde selbst signierte Zertifikate gerne entfernen, weil diese viele Browser mittlerweile komplett ablehnen.
// MFS: Eine eigene CA ist der richtige Weg.
// MFS: However, mglw. machen manche Kunden Monitorig per http und Agentenupdates per https mit selbst signiertem Zertifikat?
Damit eine HTTPS-Verbindung zustande kommen kann, muss die Zertifikatskette oder
das selbst signierte Zertifikat (je nachdem, wie der Server konfiguriert ist) des
kontaktierten Servers verifiziert werden können, was durch die Bereitstellung
von geeigneten CA- oder selbst signierten Zertifikaten ermöglicht wird.
Dies kann auf verschiedene Weisen realisiert werden.


[#connection_to_cmk_server]
==== Verbindung von Host zu {CMK}-Server

Der Agent Updater, versucht grundsätzlich, HTTPS-Verbindungen zu verifizieren und bricht diese ab, wenn dies nicht möglich ist.
Zertifikate zur Verifikation stehen dem Agent Updater aus den folgenden Quellen zur
Verfügung:

*Certificate Store:*
Verwendet das HTTPS-Setup des Servers eine Zertifikatskette, die von einer öffentlichen CA (Certification Authority) wie z.B. Let‘s Encrypt signiert wurde, kann diese wahrscheinlich ohne weitere Konfiguration verifiziert werden.
Der Agent Updater kann hierfür auf den Certificate Store des Betriebssystems zugreifen.
Eine Schwäche dieses Konzeptes ist, dass Sie auf zeitnahe Aktualisierungen des Betriebssystems angewiesen sind, wenn neue Root-Zertifikate hinzugefügt werden.
Soll – aus welchen Gründen auch immer – ein nicht mehr mit Updates versehenes Betriebssystem verwendet werden, werden selbstverständlich auch keine Zertifikate automatisch hinzugefügt.
Selbstverständlich können Sie bei Verwendung einer internen CA oder einer neuen CA auf einem abgekündigten Betriebssystem den Certificate Store mit Bordmitteln des Betriebssystems um weitere Zertifikate ergänzen.

*Zertifikate via Agent Bakery:*
Der Certificate Store des Betriebssystems wird ignoriert, sobald ein oder mehrere Zertifikate über einen der folgenden Mechanismen importiert wurden.
Zertifikate aus den folgenden drei Quellen werden lokal auf dem Host gespeichert und nur vom Agent Updater verwendet:
//SP: Eine Aufzählung beginnt in Zeile 718. Hier scheint eine weitere, darin verschachtelte Aufzählung zu folgen. Ich finde es schwer, zu erkennen welche drei Quellen hier aufgezählt werden und wie der Zusammenhang zu den oben angekündigten Quellen ist. Eventuell würde eine stärkere Strukturierung (Aufzählungszeichen, Nummern etc.) helfen?

. Über den Regeleintrag
xref:certificates_for_https[[.guihint]#Certificates for HTTPS verification#]
können Zertifikate mit in das Agentenpaket eingebacken werden und stehen dem Agent Updater ab Installation (oder Update) zur Verfügung.
. Bei der Konfiguration der Verbindung zur Remote-Instanz über
[.guihint]#Setup > General > Global settings > Automatic agent updates > Connection to remote agent bakery#
können Sie Zertifikate angeben, mit denen die HTTPS-Verbindung zur jeweiligen Remote-Instanz
verifiziert werden kann.
Dies ist insbesondere sinnvoll, wenn zur Konfigurationszeit noch nicht klar ist, welcher Host welcher Instanz zugeteilt ist.
Auch lässt sich mit dieser Import-Möglichkeit die Anzahl der zu backenden Agenten reduzieren, da die richtigen Zertifikate für die jeweiligen Update-Server nicht Host-spezifisch konfiguriert werden müssen.
. Der Agent Updater lässt sich mit dem Kommandozeilenargument `--trust-cert`
aufrufen. Dadurch wird versucht, ein CA- oder selbst signiertes Zertifikat vom
Server abzurufen und dieses zu importieren. Dies funktioniert leider nur, wenn
entweder ein selbst signiertes Zertifikat eingesetzt wird (da es sich hierbei
bereits um das Serverzertifikat handelt) oder wenn das CA-Zertifikat auf dem
Server hinterlegt ist, d.h. sich am Ende der Zertifikatskette befindet.
Letzteres ist für eine gültige Zertifikatskette im Allgemeinen nicht gefordert
und daher leider oft nicht der Fall. *Achtung*: Wird ein Zertifikat auf
diese Weise importiert, muss der Anwender die Authentizität des Servers selbst
sicherstellen, da das Zertifikat aus keiner separaten Quelle stammt.

Und wenn gar nichts mehr hilft:

Falls dem Agent Updater gar kein gültiges Zertifikat zur Verfügung steht, kann die HTTPS-Verifikation durch das Kommandozeilenargument `--insecure` für einen Aufruf umgangen werden.
Dies kann sinnvoll sein, wenn das gültige Zertifikat nur
darauf wartet, bei der nächsten Verbindung vom Server abgerufen zu werden, der
Agent Updater aber eben durch dieses fehlende Zertifikat „ausgesperrt“ ist.
*Achtung*: Die HTTPS-Verifikation wird hierdurch tatsächlich komplett deaktiviert.
Die Kommunikation findet dennoch verschlüsselt statt – dementsprechend ist der
Einsatz dieses Arguments „besser als nichts“.


[#connection_from_remote_to_central_site]
==== Verbindung von Remote-Instanz zu Zentralinstanz

Einfacher gestaltet sich die Verteilung der Zertifikate bei der Verbindung von der Remote- zur Zentralinstanz, da hier das Setup gar nicht verlassen wird.
Die Remote-Instanz kann sich aus dem {CMK} eigenen Certificate Store unter
[.guihint]#Global settings > Site management > Trusted certificate authorities for SSL#
bedienen.
Es reicht also, das oder die Zertifikate über die Zentralinstanz zu importieren, ggf. auch über [.guihint]#Site specific global settings#, falls die Zentralinstanz unter verschiedenen URLs erreichbar ist.

[#certificate_change]
==== Vorgehen beim Austausch eines Zertifikats

Wenn Sie mit eigener Zertifizierungsinfrastruktur arbeiten, verwenden Sie im Idealfall ein sehr lange gültiges Root-Zertifikat, mit dessen zugehörigem Schlüssel regelmäßig Intermediate-Zertifikate erstellt werden. Diese werden dann wiederum zum Signieren der Serverzertifikate verwendet.
In diesem Fall rollen Sie Intermediate-Zertifikate als Zertifikatskette _(Certificate Chain)_ auf dem {CMK}-Server aus.
Den Hosts, die automatische Agenten-Updates erhalten, muss nun lediglich das Root-Zertifikat bekannt gemacht werden.

Sind Sie unsicher, ob ein neues Serverzertifikat ein neues Root-Zertifikat erfordert, verwenden Sie den folgenden Befehl. Mit ihm ermitteln Sie den Identifier des Root Keys, mit dem ein Server-Zertifikat signiert wurde:

[{shell}]
----
{c-root} openssl x509 -noout -text -in cert.pem | grep -A1 'X509v3 Authority Key'
            X509v3 Authority Key Identifier: 
                14:2E:B3:17:B7:58:56:CB:AE:50:09:40:E6:1F:AF:9D:8B:14:C2:C6
----

Ist der angezeigte Identifier beim alten und neuen Zertifikat identisch, sind keine weiteren Maßnahmen erforderlich.
Hosts, die diesem Root-Zertifikat vertrauen, können auch bei Änderungen der Zertifikatskette weiter Updates beziehen – sofern diese korrekt im System-Apache hinterlegt wurde.

Wurde bislang ein selbst signiertes Zertifikat, ein kurzlebiges Root-Zertifikat einer internen CA, verwendet oder der bisherige Root-Schlüssel einer Ihrer internen CAs kompromittiert, ist beim Austausch wie folgt vorzugehen:

. Fügen Sie das neue Zertifikat über die Regel [.guihint]#Certificates for HTTPS verification# hinzu.
// Verwenden Sie im Zweifel die komplette Zertifikatskette.
. Backen Sie die Agentenpakete neu und führen Sie ein Update aller Hosts im Monitoring durch. Stellen Sie sicher, dass dieses Update für alle Hosts durchlaufen wurde, bevor Sie fortfahren.
. Tauschen Sie nun das Serverzertifikat aus.
. Testen Sie jetzt mit wenigen Hosts, bei denen bei Fehlschlag eine manuelle Neuinstallation des Agents leicht durchführbar ist, ob ein weiteres Update über das neue Zertifikat möglich ist.
//SP: Aber habe ich nicht in Punkt 2 gerade ein Update durchgeführt? Wie kann ich dann jetzt sofort ein neues Update laufen lassen - es müsste doch jetzt alles aktuell sein, oder?
// MFS: Ja, es ist aktuell, aber ich muss ja auch testen, ob das Zertifikat korrekt ausgerollt wurde – Satz erweitert.
. Konnte der letzte Schritt erfolgreich durchgeführt werden, können (das Zertifikat läuft ab) oder müssen (der Schlüssel wurde kompromittiert) Sie das alte Zertifikat entfernen und ein erneutes Agentenupdate durchführen.
