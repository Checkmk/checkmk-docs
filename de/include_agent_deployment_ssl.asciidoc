// -*- coding: utf-8 -*-

// MFS: FIXME! Dieser Abschnitt sollte nochmal besser mit Links ausgestattet werden, wenn der Apache SSL Artikel überarbeitet wurde.
[#https_handling]
== HTTPS-Handling

An verschiedenen Stellen dieses Artikels ist von einer Absicherung der jeweiligen Verbindungen über HTTPS die Rede.
Hier wird noch einmal zentral zusammengetragen, was alles für eine vollständige Absicherung über HTTPS getan werden muss.
Sowohl die Verbindung von Remote- zu Zentralinstanz als auch von Host zu {CMK}-Instanz kann und sollte per TLS abgesichert werden, d.h. über HTTPS erfolgen.
Dies ist unabhängig davon, ob es sich dabei um ein Setup mit einer einzelnen Instanz oder ein verteiltes Setup handelt.


[#https_usage]
=== HTTPS verwenden

Um eine {CMK}-Instanz per HTTPS ansprechen zu können, muss zunächst einmal der Monitoring-Server auch für HTTPS konfiguriert sein. 
Dies kann z.B. über eine geeignete xref:omd_https#[Konfiguration des System-Apache] oder besonders einfach durch die HTTPS-Einstellungen der {CMK}-Appliance erreicht werden.

Ob ein {CMK}-Server dann per HTTP oder HTTPS angesprochen wird, entscheidet sich anhand der jeweils konfigurierten URL.
Beginnt diese mit `https://`, wird der Server über das HTTPS-Protokoll über Port 443 angesprochen. 
Das gilt ebenso für das Protokoll, welches Sie mit der Einstellung xref:agent_deployment#update_server_information[Update Server Information] konfiguriert haben.
Prinzipiell können Sie auf Apache-Seite die Weiterleitung von HTTP nach HTTPS erzwingen und dafür (zunächst) einzelne Pfade ausnehmen.
Details der Konfiguration entnehmen Sie der Apache-Dokumentation der Module `mod_rewrite` und `mod_redirect`.

// Das gilt natürlich ebenso im Falle des explizit angegebenen
// Protokolls, wenn es sich beim kontaktierten Server um den aus der Agent Updater
// Konfiguration xref:agent_deployment#update_server_information[Update Server Information] handelt.

// MFS: Inhaltliche Überarbeitung September/Oktober 2022 hier:
[#provide_certificates]
=== Zertifikate bereitstellen

// MFS: Ich würde selbst signierte Zertifikate gerne entfernen, weil diese viele Browser mittlerweile komplett ablehnen.
// MFS: Eine eigene CA ist der richtige Weg.
// MFS: However, mglw. machen manche Kunden Monitorig per http und Agentenupdates per https mit selbst signiertem Zertifikat?
Damit eine HTTPS-Verbindung zustande kommen kann, muss die Zertifikatskette oder das selbst signierte Zertifikat (je nachdem, wie der Server konfiguriert ist) des kontaktierten Servers verifiziert werden können.
Die Bereitstellung von geeigneten CA- oder selbst signierten Zertifikaten macht dies möglich und kann auf verschiedene Weisen realisiert werden.


[#connection_to_cmk_server]
==== Verbindung von Host zu {CMK}-Server

Der Agent Updater versucht grundsätzlich HTTPS-Verbindungen zu verifizieren und bricht diese ab, wenn die Verifizierung nicht möglich ist.
Zertifikate zur Verifikation stehen dem Agent Updater aus den folgenden Quellen zur Verfügung:

*Agent Updater:*
In Standardeinstellungen bringt der Agent Updater eine Python Laufzeitumgebung inclusive benötigter Module mit.
Enthalten ist auch das Zertifikats-Bundle des link:https://pypi.org/project/certifi/#[Certifi-Moduls].
Dieses wiederum basiert auf der Zertifikatssammlung des Mozilla-Projektes.
So ist sichergestellt, dass öffentliche CAs dem Agent Updater zeitnah bekannt gemacht werden, selbst wenn Betriebssystemupdates ausstehen.

*Zertifikate via Agentenbäckerei:*
Im Certifi-Modul enthaltene Zertifikate werden ignoriert, sobald ein oder mehrere Zertifikate über einen der folgenden Mechanismen importiert wurden.
Zertifikate aus den folgenden Quellen werden lokal auf dem Host gespeichert und nur vom Agent Updater verwendet:

. Über die Regel xref:certificates_for_https[[.guihint]#Certificates for HTTPS verification#] können Zertifikate mit in das Agentenpaket eingebacken werden und stehen dem Agent Updater ab Installation (oder Update) zur Verfügung.

. Bei der Konfiguration der Verbindung zur Remote-Instanz über [.guihint]#Setup > General > Global settings > Automatic agent updates > Connection to remote agent bakery# können Sie Zertifikate angeben, mit denen die HTTPS-Verbindung zur jeweiligen Remote-Instanz verifiziert werden kann.
Dies ist insbesondere dann sinnvoll, wenn zur Konfigurationszeit noch nicht klar ist, welcher Host welcher Instanz zugeteilt wird.
Auch lässt sich mit dieser Importmöglichkeit die Anzahl der zu backenden Agenten reduzieren, da die richtigen Zertifikate für die jeweiligen Update-Server nicht Host-spezifisch konfiguriert werden müssen.

*Certificate Store:*
Nur wenn der Agent Updater so konfiguriert ist, dass er statt der mitgelieferten Python Laufzeitumgebung xref:executable_format[das System-Python] nutzt und im System-Python kein Certifi-Modul konfiguriert ist, nutzt er _möglicherweise_ den Certificate Store des Betriebssystems.
Da hier viele Faktoren wie Installationsparameter oder die Umgebungsvariable `_PIP_STANDALONE_CERT` mit hineinspielen, wird diese Konstellation von uns nicht offiziell unterstützt.

*Zertifikat via Kommandozeile:*
Der Agent Updater lässt sich mit dem Kommandozeilenargument `--trust-cert` aufrufen.
Dadurch wird versucht, ein CA- oder selbst signiertes Zertifikat vom Server abzurufen und dieses zu importieren.
Dies funktioniert nur, wenn entweder ein selbst signiertes Zertifikat eingesetzt wird 
// MFS: Erklärung entfernt, wir wollen nicht zur Nutzung selbst signierter Zertifikate ermuntern.
// (da es sich hierbei bereits um das Serverzertifikat handelt) 
oder wenn die komplette Zertifikatskette inklusive CA-Root-Zertifikat auf dem Server hinterlegt wurde.
Letzteres ist für eine gültige Zertifikatskette im Allgemeinen nicht gefordert und daher meist nicht der Fall.
*Achtung:* Wird ein Zertifikat auf diese Weise importiert, muss der Anwender die Authentizität des Servers selbst sicherstellen, da das Zertifikat aus keiner separaten Quelle stammt.


Und wenn gar nichts mehr hilft:

Falls dem Agent Updater gar kein gültiges Zertifikat zur Verfügung steht, kann die Zertifikats-Validierung durch das Kommandozeilenargument `--insecure` für einen Aufruf umgangen werden.
Dies kann sinnvoll sein, wenn das gültige Zertifikat bereits darauf wartet, bei der nächsten Verbindung vom Server abgerufen zu werden, 
der Agent Updater aber eben durch dieses fehlende Zertifikat „ausgesperrt“ ist.
*Achtung*: Die Prüfung des Zertifikates wird hierdurch tatsächlich komplett deaktiviert.
// SK: Der Leser könnte sich fragen was "komplett deaktiviert" bedeutet. Heißt das "komplett für immer deaktiviert" oder "komplett für diesen einen Aufruf deaktivert"? In dem Satz davor steht ja, dass das Zertifikat womöglich bereits in den Startlöchern steht.
Die Kommunikation findet dennoch verschlüsselt statt – dementsprechend ist der Einsatz dieses Arguments „besser als nichts“.


[#connection_from_remote_to_central_site]
==== Verbindung von Remote-Instanz zu Zentralinstanz

Einfacher gestaltet sich die Verteilung der Zertifikate bei der Verbindung von der Remote- zur Zentralinstanz, da hier das Setup gar nicht verlassen wird.
Die Remote-Instanz kann sich aus dem {CMK} eigenen Certificate Store unter [.guihint]#Global settings > Site management > Trusted certificate authorities for SSL# bedienen.
Es reicht also, das Zertifikat bzw. die Zertifikate über die Zentralinstanz zu importieren, ggf. auch über [.guihint]#Site specific global settings#, falls die Zentralinstanz unter verschiedenen URLs erreichbar ist.


[#certificate_change]
==== Vorgehen beim Austausch eines Zertifikats

Wenn Sie mit einer eigenen Zertifizierungsinfrastruktur arbeiten, verwenden Sie im Idealfall ein sehr lange gültiges Root-Zertifikat, mit dessen zugehörigem Schlüssel regelmäßig Intermediate-Zertifikate erstellt werden. Diese werden dann wiederum zum Signieren der Server-Zertifikate verwendet.
In diesem Fall rollen Sie Intermediate-Zertifikate als Zertifikatskette _(Certificate Chain)_ auf dem {CMK}-Server aus.
Den Hosts, die automatische Agenten-Updates erhalten, muss nun lediglich das Root-Zertifikat bekannt gemacht werden.

Sind Sie unsicher, ob ein neues Server-Zertifikat ein neues Root-Zertifikat erfordert, verwenden Sie den folgenden Befehl.
Mit ihm ermitteln Sie den Identifier des Root Keys, mit dem ein Server-Zertifikat signiert wurde:

[{shell}]
----
{c-root} openssl x509 -noout -text -in cert.pem | grep -A1 'X509v3 Authority Key'
            X509v3 Authority Key Identifier: 
                14:2E:B3:17:B7:58:56:CB:AE:50:09:40:E6:1F:AF:9D:8B:14:C2:C6
----

Ist der angezeigte Identifier beim alten und neuen Zertifikat identisch, sind keine weiteren Maßnahmen erforderlich.
Hosts, die diesem Root-Zertifikat vertrauen, können auch bei Änderungen der Zertifikatskette weiter Updates beziehen – sofern die Kette korrekt im System-Apache hinterlegt wurde.

// MFS: Dieser Satz wurde umgestellt, ansonsten bleibt dieses Kapitel
Wurde bislang ein selbst signiertes Zertifikat oder ein kurzlebiges Root-Zertifikat einer internen CA verwendet oder wurde der bisherige Root-Schlüssel einer Ihrer internen CAs kompromittiert, ist beim Austausch wie folgt vorzugehen:

. Fügen Sie das neue Zertifikat über die Regel [.guihint]#Certificates for HTTPS verification# hinzu.
// Verwenden Sie im Zweifel die komplette Zertifikatskette.
. Backen Sie die Agentenpakete neu und führen Sie ein Update aller Hosts im Monitoring durch.
Stellen Sie sicher, dass dieses Update für alle Hosts durchlaufen wurde, bevor Sie fortfahren.
. Tauschen Sie nun das Serverzertifikat aus.
. Testen Sie mit wenigen Hosts, bei denen bei Fehlschlag eine manuelle Neuinstallation des Agents leicht durchführbar ist, ob ein weiteres Update über das neue Zertifikat möglich ist.
. Konnte der letzte Schritt erfolgreich durchgeführt werden, können (das Zertifikat läuft ab) oder müssen (der Schlüssel wurde kompromittiert) Sie das alte Zertifikat entfernen und ein erneutes Agentenupdate durchführen.
