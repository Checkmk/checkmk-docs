include::global_attr.adoc[]
= Konfiguration via {CMK} REST-API
:revdate: draft
:title: Konfiguration via {CMK} REST-API
:description: Mit der {CMK} REST-API können Sie Aufgaben, die Sie sonst über die GUI erledigen, per HTTP-Anfragen vom {CMK}-Server ausführen lassen.

{related-start}
link:web_api.html[Konfiguration via HTTP-API]
{related-end}


[#intro]
== Einleitung

Seit der Version {v20} gibt es in {CMK} eine neue Anwendungsprogrammierschnittstelle: die {CMK} REST-API.
Mit dieser API können Sie die Aufgaben, die Sie sonst in {CMK} über die GUI erledigen, per Kommando oder Skript mit HTTP-Anfragen an den {CMK}-Server übermitteln und ausführen lassen.

Eine API per HTTP nutzen?
Das kommt Ihnen vielleicht bekannt vor.
Denn {CMK} bietet schon seit längerem eine API, die sogenannte xref:web_api#[Web-API], mit der Sie viele Administrationsaufgaben erledigen können.
Warum gibt es also jetzt eine neue API?
Anders als der Name REST-API vielleicht vermuten lässt, geht es nicht darum, mit der neuen API den _Rest_ der in der Web-API fehlenden Funktionen zu liefern.
Ganz im Gegenteil soll die REST-API die komplette Funktionalität abdecken, die {CMK} über die GUI und über Kommandoschnittstelle bietet und damit die Web-API komplett ersetzen.

REST steht für _REpresentational State Transfer_ und beschreibt eine Architektur für den Austausch von Daten auf verteilten Systemen -- insbesondere für Web-Dienste.
Eine API, die gemäß der REST-Architektur implementiert ist, folgt bestimmten Prinzipien, z.B. dem Client-Server-Modell, der zustandslosen Kommunikation und einer einheitlichen Schnittstelle.
In der Praxis erfolgt die Umsetzung bevorzugt über das HTTP-Protokoll, wobei die Ressourcen per Uniform Resource Identifier (URI) angesprochen werden und auf diese mit HTTP-Methoden (GET, POST, PUT, DELETE) zugegriffen wird.

Soviel zu den REST-Prinzipien.
Ihre Vorteile zeigen sich in den konkreten Features, die Ihnen die {CMK} REST-API bietet:

[horizontal]
Protokoll:: Das Hypertext Transfer Protocol (*HTTP/1.1*) wird als Transportsystem für die Kommunikation genutzt.

Kodierung:: Als Datenformat wird die JavaScript Object Notation (*JSON*) verwendet. Die Nutzdaten (payload) der Antworten werden mit JSON serialisiert und in UTF-8 kodiert. Datums- und Zeitangaben sind im *ISO-8601*-Format mit gültigen Zeitzoneninformationen kodiert.
Sprache:: Englisch ist die Sprache für Labels, Identifiers und die API-Dokumentation.

Authentifizierung:: Der Zugriff auf die API wird einem Client nur dann gestattet, wenn er die Berechtigung mittels *HTTP-Authentifizierung* (z.B. „Bearer“ oder „Basic“) nachgewiesen hat.

Versionierung:: Die API ist versioniert und nutzt dabei eine dreistufige Nummerierung nach dem *Semantic Versioning 2.x* Standard. Details finden Sie im xref:rest_api#versioning[Kapitel zur Versionierung] weiter unten.

Dokumentation:: Die API wird in einem maschinenlesbaren Schema und einem menschenlesbaren Format in englischer Sprache dokumentiert, mit allen Ressourcen, ihren Eingabe- und Ausgabeparametern und den zugehörigen Wertebereichen. Die API ist mit der *OpenAPI Spezifikation (OAS) 3.x* erstellt, einem API-Beschreibungsformat speziell für REST-APIs. Das mit dieser Spezifikation erstellte API-Dokument wird für den Benutzer mit ReDoc angezeigt, einem responsiven Web-Design für OpenAPI-Dokumente.

Beispiel-Code:: Um die Verwendung zu demonstrieren, gibt es zu jeder Anfrage Beispiel-Code für verschiedene Anwendungen.

Fehleranzeige:: Die API sendet im Fehlerfall numerische *HTTP-Status-Codes* und eine Diagnosemeldung des Problems, die bei der Suche nach möglichen Ursachen für fehlerhafte Anfragen hilft.

REST-API Klassifizierung:: Die API erfüllt alle vier Ebenen (0 bis 3) des *Richardson Maturity Model (RMM)*, mit dem beurteilt werden kann, wieviel REST in einer API steckt. In Ebene 1 wird die Einführung von Ressourcen gefordert, damit über die API statt zu einem globalen zu individuellen Endpunkten kommuniziert werden kann. Ebene 2 wird erfüllt, wenn für die Anfragen HTTP-Methoden verwendet werden. Auf der (höchsten) Ebene 3 dokumentiert sich die API quasi selbst, indem der Server mit der Antwort auf eine Anfrage die nächsten möglichen Aktionen und die dabei anzusprechenden Ressourcen mitteilt, und es dem Client so ermöglicht, die verfügbare Funktionalität selbst zu entdecken. Diese Bereitstellung von Zusatzinformationen wird auch „Hypermedia as the Engine of Application State“ (*HATEOAS*) genannt.

//Ein nach der OpenAPI Spezifikation erstelltes OpenAPI-Dokument kann im JSON- oder im YAML-Format vorliegen. Der Benutzer kann aus der API-Dokumentation das zugrundeliegende OpenAPI-Dokument im JSON-Format herunterladen.

////
// TK: Tabelle auskommentiert wg. Test von Description List
[cols="25,~"]
|===
|Feature |Beschreibung 

|Protokoll |Das Hypertext Transfer Protocol (*HTTP/1.1*) wird als Transportsystem für die Kommunikation genutzt.
|Kodierung |Als Datenformat wird die JavaScript Object Notation (*JSON*) verwendet. Die Nutzdaten (payload) der Antworten werden mit JSON serialisiert und in UTF-8 kodiert. Datums- und Zeitangaben sind im *ISO-8601*-Format mit gültigen Zeitzoneninformationen kodiert.
|Sprache |Englisch ist die Sprache für Labels, Identifiers und die API-Dokumentation.
|Authentifizierung |Der Zugriff auf die API wird einem Client nur dann gestattet, wenn er die Berechtigung mittels *HTTP-Authentifizierung* (z.B. „Bearer“ oder „Basic“) nachgewiesen hat.
|Versionierung |Die API ist versioniert und nutzt dabei eine dreistufige Nummerierung nach dem *Semantic Versioning 2.x* Standard. Details finden Sie im xref:rest_api#versioning[Kapitel zur Versionierung] weiter unten.
|Dokumentation |Die API wird in einem maschinenlesbaren Schema und einem menschenlesbaren Format in englischer Sprache dokumentiert, mit allen Ressourcen, ihren Eingabe- und Ausgabeparametern und den zugehörigen Wertebereichen. Die API ist mit der *OpenAPI Spezifikation (OAS) 3.x* erstellt, einem API-Beschreibungsformat speziell für REST-APIs. Das mit dieser Spezifikation erstellte API-Dokument wird für den Benutzer mit ReDoc angezeigt, einem responsiven Web-Design für OpenAPI-Dokumente.
|Beispiel-Code |Um die Verwendung zu demonstrieren, gibt es zu jeder Anfrage Beispiel-Code für verschiedene Anwendungen.
|Fehleranzeige |Die API sendet im Fehlerfall numerische *HTTP-Status-Codes* und eine Diagnosemeldung des Problems, die bei der Suche nach möglichen Ursachen für fehlerhafte Anfragen hilft.
|REST-API Klassifizierung |Die API erfüllt alle vier Ebenen (0 bis 3) des *Richardson Maturity Model (RMM)*, mit dem beurteilt werden kann, wieviel REST in einer API steckt. In Ebene 1 wird die Einführung von Ressourcen gefordert, damit über die API statt zu einem globalen zu individuellen Endpunkten kommuniziert werden kann. Ebene 2 wird erfüllt, wenn für die Anfragen HTTP-Methoden verwendet werden. Auf der (höchsten) Ebene 3 dokumentiert sich die API quasi selbst, indem der Server mit der Antwort auf eine Anfrage die nächsten möglichen Aktionen und die dabei anzusprechenden Ressourcen mitteilt, und es dem Client so ermöglicht, die verfügbare Funktionalität selbst zu entdecken. Diese Bereitstellung von Zusatzinformationen wird auch „Hypermedia as the Engine of Application State“ (*HATEOAS*) genannt.
|===
////

Neben diesen generellen Komfortfunktionen bietet die {CMK} REST-API bereits jetzt Zugriff zu mehr Bereichen in {CMK} als die Web-API, z.B. zu Host-Status, Service-Status, Zeitperioden, Quittierung von Problemen und der Business Intelligence (BI).
Für viele Bereiche, die beide APIs unterstützen, haben Sie per REST-API zudem mehr und spezifischere Möglichkeiten.

Bei allem REST-Enthusiasmus verschweigen wir aber nicht, dass die REST-API zurzeit noch nicht all das drauf hat, was die Web-API kann.
Solange das so ist, finden Sie im xref:rest_api#rest-web-api[letzten Kapitel] eine Gegenüberstellung der Funktionalität von REST-API und Web-API.
Die letzten, in der REST-API noch fehlenden Funktionen zum Zugriff auf Instanzen im verteilten Monitoring und auf Metriken und Graphen werden in {CMK} {v21} Patch-Versionen nachgeliefert.


[#api_doc]
== Die API-Dokumentation

[#versioning]
=== Versionierung

Einer der Vorteile der REST-API ist, dass Software und Dokumentation aus der gleichen Quelle stammen: dem OpenAPI-Dokument.
Daher passt die API-Dokumentation stets zur Software und beschreibt genau das, was die API kann.
Daher ist es auch nicht nötig, den Referenzteil der verfügbaren Ressourcen, Methoden, Parameter etc. im {CMK}-Handbuch zu beschreiben:
stattdessen finden Sie die API-Dokumentation außerhalb dieses Handbuchs, direkt in Ihrer {CMK}-Instanz.

Die API mit ihrer Dokumentation ist versioniert und nutzt dabei eine dreistufige Nummerierung im Format X.Y.Z, wobei X für ein Main Release steht, Y für ein Minor Release und Z für einen Patch.
Ein neues Minor Release enthält neue, rückwärtskompatible Funktionen.
Ein neues Main Release kann dagegen Änderungen enthalten, die die API inkompatibel mit dem vorherigen Main Release machen (sogenannte *breaking changes*).
Die Versionsnummern der Main and Minor Releases sind Bestandteil der URL, mit dem eine Anfrage an den Server gesendet wird.

*Wichtig*: Beachten Sie, dass die REST-API einer anderen Versionierung folgt als die {CMK}-Software.
Da ein neues Main Release der API dann notwendig ist, wenn es inkompatible API-Änderungen gibt, passt das in der Regel nicht zum Release-Zyklus der {CMK}-Software.

Trotzdem ist die Zuordnung der Versionen von API-Dokumentation und {CMK}-Software sehr einfach, wie Sie im nächsten Kapitel erfahren.


[#access]
=== Zugriff

Die REST-API-Dokumentation steht im HTML-Format zur Ansicht im Web-Browser bereit.

In der {CMK}-GUI öffnen Sie die API-Dokumentation über die Navigationsleiste mit [.guihint]#Help > Developer resources APIs > REST API documentation.#
Die API-Dokumentation wird in einem neuen Browser-Fenster (bzw. Browser-Tab) angezeigt.
Wir gehen darauf im nächsten Kapitel genauer ein.

image::rest_api_help_menu.png[alt="Help-Menü in der Navigationsleiste.",width=50%]

*Hinweis*: Sicher ist Ihnen aufgefallen, das es im [.guihint]#Help#-Menü noch weitere Einträge zur REST-API gibt.
Mit [.guihint]#REST API introduction# können Sie diesen Artikel öffnen.
Mit [.guihint]#REST API interactive GUI# öffnen Sie eine weitere Sicht auf die REST-API.
[.guihint]#GUI# heißt dieser Eintrag, weil Ihnen nicht nur die REST-API-Funktionen angezeigt werden, sondern weil Sie aus dem Browser heraus direkt mit der API interagieren können, indem Sie z.B. Anfragen an den Server senden
Wir stellen die REST-API GUI als Alternative zur Ausführung per Skript im xref:rest_api#rest_api_gui[Kapitel zur REST-API GUI] später vor.


[#structure]
=== Struktur und Inhalt

Die API-Dokumentation nutzt ein responsives Web-Design mit 3 Bereichen:

[{image-border}]
image::restapi_redoc.png[]

* Der linke Navigationsbereich dient der Orientierung, der Suche und dem schnellen Sprung zur genauen Beschreibung der Einträge im mittleren Bereich. Das Inhaltsverzeichnis enthält für jeden API-Endpunkt einen Eintrag. Ein Endpunkt bezeichnet per URL die Ressource, die die API zur Verfügung stellt (z.B. für die Sammlung der Hosts), zusammen mit der Methode, um auf die Ressource zuzugreifen (z.B. GET zur Anzeige eines Hosts). Die Endpunkte sind in mehrere Ordner organisiert.

* Der mittlere Inhaltsbereich enthält die harten Fakten der Dokumentation: alle Informationen zur Definition einer Anfrage (mit Parametern, Wertebereichen, Default-Werten und Beschreibungen) und die zugehörigen Antworten (ebenfalls mit allen Details). Die möglichen Antworten werden in unterschiedlichen Farben dargestellt, je nachdem ob der zurückgelieferte HTTP-Status-Code Erfolg oder einen Fehler signalisiert.

* Der rechte Beispielbereich ([.guihint]#Request samples#) zeigt für den im Inhaltsbereich ausgewählten Endpunkt die Methode und die URL, gefolgt von mehreren Beispielen zu Anfragen: die Payload im JSON-Format (falls relevant für den Endpunkt) und Code-Beispiele z.B. für cURL, HTTPie, Python Requests und Python Urllib. Dann folgen die Antworten passend zum HTTP-Status. Alle Code-Beispiele können über den Knopf [.guihint]#Copy# in die Zwischenablage kopiert werden.

Der Navigationsbereich ist scroll-synchronisiert zu den anderen beiden Bereichen, das heißt, wenn Sie im Inhaltsbereich nach oben oder unten scrollen, scrollt der Navigationsbereich automatisch zum passenden Eintrag des Inhaltsverzeichnisses mit.

Das responsive Web-Design sorgt dafür, dass in einem Browser-Fenster mit geringer Breite der Beispielbereich verschwindet (dafür werden dann die Beispiele unterhalb der zugehörigen Methode angezeigt) und der Navigationsbereich in ein Menü umgewandelt wird.

In allen Bereichen finden Sie Inhalte, die Sie ein- und ausblenden können, zum Beispiel im Navigationsbereich die Einträge für die Endpunkte und im Inhaltsbereich verschachtelte Parameter. Durch Anklicken von [.guihint]#># oder [.guihint]#Expand all# blenden Sie die verborgenen Inhalte ein und mit [.guihint]#&or;# oder [.guihint]#Collapse all# wieder aus.

Wie Sie die API-Dokumentation nutzen können, um aus den Informationen konkrete  Anfragen zu erstellen, an den {CMK}-Server zu senden, ausführen zu lassen und den Erfolg zu kontrollieren: all das erfahren Sie im nächsten Kapitel.


[#using_the_api]
== Die API nutzen


[#auth]
=== Authentifizierung

Um von einem Client aus die REST-API des {CMK}-Servers nutzen zu können, muss der Client seine Identität nachweisen. Die REST-API unterstützt die folgenden Methoden zur Authentifizierung: *Bearer*, *Webserver* und *Cookie* -- in dieser Rangfolge. Das heißt zum Beispiel, dass bei einer erfolgreichen Authentifizierung mit Bearer keine der anderen Methoden mehr geprüft wird.


[#bearerauth]
==== Bearer- oder Header-Authentifizierung

„Bearer“ bezeichnet den Träger oder Inhaber einer Identität. Mit der HTTP Bearer-Authentifizierung authentisiert sich der Client mit den Zugangsdaten eines auf dem {CMK}-Server eingerichteten Benutzers. Idealerweise ist dies der sogenannte xref:wato_user#automation[Automationsbenutzer], der in {CMK} für die Ausführung von Aktionen über eine API vorgesehen ist. Die Bearer-Authentifizierung wird für die Verwendung in Skripten empfohlen.

Für die Authentifizierung benötigen Sie den Benutzernamen und das zugehörige, sogenannte „automation secret for machine accounts“, das heißt das Passwort des Automationsbenutzers. Beide Informationen müssen im Header jeder Anfrage an den {CMK}-Server übermittelt werden. Bei einer neu erstellten Instanz (_site_) ist der Benutzer [.guihint]#automation# bereits angelegt. Sie finden ihn, wie andere Benutzer auch, unter [.guihint]#Setup > Users#. Achten Sie darauf, dass die Rollen und die damit verbundenen Berechtigungen für den Automationsbenutzer so gesetzt sind, dass Sie die Ausführung Ihrer Anfragen erlauben.

Für die in diesem Artikel vorgestellten Skripten wird immer der standardmäßig eingerichtete Automationsbenutzer als Beispiel genommen.


[#webserverauth]
==== Webserver-Authentifizierung

Bei der Webserver-Authentifizierung nutzt die REST-API die HTTP-Authentifizierung, die für den Webserver konfiguriert ist („Basic“ oder „Digest“).

Diese Authentifizierungmethode ist gedacht für große {CMK}-Installationen mit speziellen Anforderungen, die durch den Einsatz und die Konfiguration von Software-Modulen für die Authentifizierung des Apache Webservers realisiert werden. Wenn Sie die die Webserver-Authentifizierung nutzen möchten, müssen Sie den Apache Webserver der {CMK}-Instanz selbst neu konfigurieren.

//Beachten Sie, dass Sie mit dem Kommando xref:omd_basics#omdconfig[omd config] die Möglichkeit haben, die Basic HTTP-Authentifizierung der {CMK}-Instanz einzuschalten ([.guihint]#Web GUI > MULTISITE_COOKIE_AUTH > off#). Bei eingeschalteter Basic Authentifizierung muss sich jeder Benutzer vor dem Zugriff auf eine {CMK}-Website anmelden.


[#cookieauth]
==== Cookie-Authentifizierung

Die Cookie-Authentifizierung ist ein Spezialfall der Authentifizierung per API-Schlüssel. Jeder {CMK}-Benutzer, der in {CMK} angemeldet ist und dadurch ein HTTP Cookie zugewiesen bekommen hat, kann die REST-API nutzen. Die Cookie-Authentifizierung dient zum Ausprobieren und Testen mit der  xref:rest_api#rest_api_gui[REST-API GUI]. Ob Anfragen ausgeführt werden können, hängt davon ab, ob Ihr {CMK}-Benutzerkonto die entsprechenden Berechtigungen besitzt.


[#testing]
=== Die API lokal testen

Um die REST-API zu testen, bietet es sich an, die Anfragen direkt vom {CMK}-Server aus zu stellen, das heißt, in diesem Fall befinden sich Client und Server auf dem gleichen Rechner. Wenn Sie als Instanzbenutzer arbeiten, können Sie zudem lokale Variablen wie z.B. `$OMD_SITE` benutzen, die auf den Namen der Instanz verweist.

In den folgenden Beispielen nutzen wir den in der API-Dokumentation enthaltenen Beispiel-Code für das Kommandozeilenprogramms cURL, das es ermöglicht, ohne Benutzerinteraktion Daten von oder zu einem Server zum Beispiel per HTTP zu übertragen. Das `curl`-Kommando wird innerhalb eines Bash-Skripts ausgeführt.

Zur Vorbereitung erstellen Sie eine Skript-Datei, in die später der Beispiel-Code kopiert wird:

[{shell}]
----
{c-omd} touch rest-api_test.sh
{c-omd} chmod +x rest-api_test.sh
----

Die REST-API gibt alle Antworten im JSON-Format einzeilig aus. Da eine formatierte Ausgabe die Lesbarkeit doch erheblich erleichtert, ist im cURL-Beispiel-Code die formatierte Ausgabe mit Hilfe des Kommandozeilen-JSON-Prozessor `jq` vorgesehen. Sie können mit dem folgenden Kommando überprüfen, ob `jq` installiert ist:

[{shell}]
----
{c-omd} jq --version
jq-1.6
----

und -- falls nicht -- die Software von link:https://stedolan.github.io/jq/download/[dieser Seite] installieren. Falls Sie `jq` nicht nutzen wollen, müssen Sie mit der unformatierten Ausgabe zurechtkommen.

Bevor es los geht, sammeln Sie einige grundlegenden Informationen, die spezifisch für Ihre {CMK}-Konfiguration sind:

[cols=3]
|===
|Variable |Beispielwert |Bedeutung 

|HOST_NAME |myserver |Hostname des {CMK}-Servers
|SITE_NAME |mysite |Name der {CMK}-Instanz
|USERNAME |automation |Name des Automationsbenutzers
|PASSWORD |theautomationsecret |Passwort des Automationsbenutzers
|===


Diese Variablen werden im Beispiel-Code verwendet und müssen von Ihnen  geändert werden, bevor Sie eine Anfrage absenden. In der obigen Tabelle finden Sie auch die Beispielwerte, die im folgenden verwendet werden.


[#making_requests]
=== Anfragen stellen per Skript

Wir werden nun den Umgang mit der REST-API an einem übersichtlichen Beispiel demonstrieren: Sie erstellen einen Host mit seinen Services mit insgesamt drei Anfragen. Prinzipiell gehen Sie dabei genauso vor, wie Sie es auch mit der {CMK}-GUI tun würden:

. Einen Host erstellen
. Eine Service-Erkennung auf dem Host durchführen
. Die Änderungen aktivieren


==== Einen Host erstellen

Öffnen Sie die API-Dokumentation und suchen Sie im linken Navigationsbereich den Eintrag zum Erstellen eines Hosts ([.guihint]#Create a host#):

[{image-border}]
image::restapi_redoc_2pane.png[]

Im mittleren Bereich sehen Sie die Details zur gewählten Anfrage: welche HTTP-Authentifizierung gefordert ist (diese ist identisch für alle Anfragen über die REST-API) und die notwendigen und optionalen Parameter. Notwendig (required) ist der Name des Hosts und der Ordner, in dem er angelegt werden soll. Standardmäßig wird der Host im Hauptordner (main directory) angelegt. Falls Sie den Host in einem anderen Ordner anlegen wollen, müssen Sie sich eventuell zuerst über eine andere API-Anfrage ([.guihint]#Show all folders#) die existierenden Ordner anzeigen lassen, um die ID des gewünschten herauszufinden.

In unserem Beispiel wollen wir den Host `myserver123` mit der IP-Adresse `192.168.0.42` im Hauptordner erstellen.

In der API-Dokumentation klicken Sie im rechten Beispielbereich auf den Knopf [.guihint]#curl# und dann auf [.guihint]#Copy# um den cURL-Beispiel-Code in die Zwischenablage zu kopieren. Öffnen Sie das vorbereitete Skript `rest-api_test.sh` und fügen Sie den Inhalt der Zwischenablage ein:

.rest-api_test.sh
[{file}]
----
#!/bin/bash
HOST_NAME="localhost"
SITE_NAME="mysite"
API_URL="http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0"

USERNAME="automation"
PASSWORD="test123"

out=$(
  curl \
    --request POST \
    --write-out "\nxxx-status_code=%{http_code}\n" \
    --header "Authorization: Bearer $USERNAME $PASSWORD" \
    --header "Accept: application/json" \
    --header "Content-Type: application/json" \
    --data '{
          "attributes": {
            "ipaddress": "192.168.0.123"
          },
          "folder": "\/",
          "host_name": "example.com"
        }' \
    "$API_URL/domain-types/host_config/collections/all")

resp=$( echo "${out}" | grep -v "xxx-status_code" )
code=$( echo "${out}" | awk -F"=" '/^xxx-status_code/ {print $2}')

# For indentation, please install 'jq' (JSON query tool)
echo "$resp" | jq
# echo "$resp"

if [[ $code -lt 400 ]]; then
    echo "OK"
    exit 0
else
    echo "Request error"
    exit 1
fi
----

Im ersten Teil des Beispiel-Codes finden Sie die vier zu ändernden Umgebungsvariablen, dann folgt das `curl`-Kommando mit der POST-Methode auf die Ressource, deren URL in der letzten Zeile steht. In der POST-Methode finden Sie nach den Header-Zeilen (eine davon definiert die HTTP-Authentifizierung) den Datenteil, in dem die Parameter für den neuen Host  festgelegt werden. Die restlichen Zeilen dienen der Aufbereitung der Ausgabe.

Beachten Sie, dass der cURL-Beispiel-Code mehr Parameter enthalten kann, als Sie im konkreten Fall vielleicht benötigen. Für unser Beispiel ist dies aber nicht der Fall, und Sie müssen nur die beiden vorhandenen Parameter `host_name` und `ipaddress` ändern.

Passen Sie nun den Beispiel-Code an, so dass das Resultat ungefähr so aussieht:

.rest-api_test.sh
[{file}]
----
#!/bin/bash
HOST_NAME="myserver"
SITE_NAME="mysite"
API_URL="http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0"

USERNAME="automation"
PASSWORD="theautomationsecret"

out=$(
  curl \
    --request POST \
    --write-out "\nxxx-status_code=%{http_code}\n" \
    --header "Authorization: Bearer $USERNAME $PASSWORD" \
    --header "Accept: application/json" \
    --header "Content-Type: application/json" \
    --data '{
          "attributes": {
            "ipaddress": "192.168.0.42"
          },
          "folder": "\/",
          "host_name": "myserver123"
        }' \
    "$API_URL/domain-types/host_config/collections/all")

resp=$( echo "${out}" | grep -v "xxx-status_code" )
code=$( echo "${out}" | awk -F"=" '/^xxx-status_code/ {print $2}')

# For indentation, please install 'jq' (JSON query tool)
echo "$resp" | jq
# echo "$resp"

if [[ $code -lt 400 ]]; then
    echo "OK"
    exit 0
else
    echo "Request error"
    exit 1
fi
----

Falls der Kommandozeilen-JSON-Prozessor `jq` nicht installiert ist, müssen Sie im obigen Beispiel-Code die Zeile mit `jq` auskommentieren und die darauf folgende Zeile einkommentieren. Das Ergebnis sieht dann so aus:

.rest-api_test.sh
[{file}]
----
# echo "$resp" | jq
echo "$resp"
----

Führen Sie das Skript aus:

[{shell}]
----
{c-omd} ./rest-api_test.sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  1231  100  1078  100   153   5472    776 --:--:-- --:--:-- --:--:--  6248
{
  "domainType": "host_config",
  "id": "#myserver123#",
  "title": null,
  "links": [
    {
      "rel": "self",
      "href": "http://myserver/mysite/check_mk/api/1.0/objects/host_config/myserver123",
      "method": "GET",
      "type": "application/json",
      "domainType": "link"
    },
    {
      "rel": "urn:org.restfulobjects:rels/update",
      "href": "http://myserver/mysite/check_mk/api/1.0/objects/host_config/myserver123",
      "method": "PUT",
      "type": "application/json",
      "domainType": "link"
    },
    {
      "rel": "urn:org.restfulobjects:rels/delete",
      "href": "http://myserver/mysite/check_mk/api/1.0/objects/host_config/myserver123",
      "method": "DELETE",
      "type": "application/json",
      "domainType": "link"
    }
  ],
  "members": {
    "folder_config": {
      "id": "folder_config",
      "memberType": "property",
      "value": "http://myserver/mysite/check_mk/api/1.0/objects/folder_config/58d08ee3599e4cfe89d75bfff2a7eb91",
      "format": "string",
      "title": null
    }
  },
  "extensions": {
    "attributes": {
      "ipaddress": "#192.168.0.42#"
    },
    "is_cluster": false,
    "is_offline": false,
    "cluster_nodes": null
  }
}
#OK#
----

In der Antwort erkennen Sie an den markierten Einträgen, dass der Host erstellt wurde. Die ersten Zeilen enthalten Informationen über die Datenübertragung. Nach der ID des Hosts liefert die API unter `links` eine Auswahl von Anfragen zurück, die auf den gerade erstellten Host angewendet werden können -- wie es sich für eine REST-API gehört. Unter `members` werden Informationen über den Ordner gezeigt und unter `extensions` die Parameter und Attribute inklusive der eingerichteten IP-Adresse.


==== Eine Service-Erkennung auf dem Host durchführen

Nachdem der Host `myserver123` erstellt wurde, können die Services ermittelt werden. Wählen Sie dazu in der API-Dokumentation den Eintrag zur Ausführung einer Service-Erkennung aus ([.guihint]#Execute a service discovery on a host#), kopieren Sie den Beispiel-Code in das Skript und passen Sie es an Ihre Konfiguration an.

Den ersten Teil mit den Umgebungsvariablen können Sie 1:1 aus dem vorherigen Beispiel übernehmen. Im `curl`-Kommando ändern Sie den Namen des Hosts zu `myserver123` und bei Bedarf mit dem Parameter `mode` die Art der Service-Erkennung. Bei dieser Anfrage wird, im Unterschied zur vorherigen, der Host-Name nicht im Datenteil festgelegt, sondern ist Bestandteil der URL in der letzten Zeile des `curl`-Kommandos:

.rest-api_test.sh
[{file}]
----
#!/bin/bash
HOST_NAME="myserver"
SITE_NAME="mysite"
API_URL="http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0"

USERNAME="automation"
PASSWORD="theautomationsecret"

out=$(
  curl \
    --request POST \
    --write-out "\nxxx-status_code=%{http_code}\n" \
    --header "Authorization: Bearer $USERNAME $PASSWORD" \
    --header "Accept: application/json" \
    --header "Content-Type: application/json" \
    --data '{
          "mode": "refresh"
        }' \
    "$API_URL/objects/host/myserver123/actions/discover_services/invoke")

resp=$( echo "${out}" | grep -v "xxx-status_code" )
code=$( echo "${out}" | awk -F"=" '/^xxx-status_code/ {print $2}')

# For indentation, please install 'jq' (JSON query tool)
echo "$resp" | jq
# echo "$resp"

if [[ $code -lt 400 ]]; then
    echo "OK"
    exit 0
else
    echo "Request error"
    exit 1
fi
----

Führen Sie auch dieses Skript aus:

[{shell}]
----
{c-omd} ./rest-api_test.sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   876  100   837  100    39   4082    190 --:--:-- --:--:-- --:--:--  4273
{
  "domainType": "service_discovery",
  "id": "myserver123-services-wato",
  "title": "Services discovery",
  "links": [
    {
      "rel": "self",
      "href": "http://myserver/mysite/check_mk/api/1.0/objects/service_discovery/myserver123-services-wato",
      "method": "GET",
      "type": "application/json",
      "domainType": "link"
    },
    {
      "rel": "urn:org.restfulobjects:rels/update",
      "href": "http://myserver/mysite/check_mk/api/1.0/objects/service_discovery/myserver123-services-wato",
      "method": "PUT",
      "type": "application/json",
      "domainType": "link"
    },
    {
      "rel": "urn:org.restfulobjects:rels/delete",
      "href": "http://myserver/mysite/check_mk/api/1.0/objects/service_discovery/myserver123-services-wato",
      "method": "DELETE",
      "type": "application/json",
      "domainType": "link"
    }
  ],
  "members": {},
  "extensions": {}
}
#OK#
----

Der Erfolg wird am Ende der Ausgabe kurz und bündig mit `OK` gemeldet.


==== Die Änderungen aktivieren

Zum Abschluss müssen die Änderungen aktiviert werden. Die passende Anfrage heißt [.guihint]#Activate pending changes#.

Wie zuvor übernehmen Sie den ersten Teil mit den Umgebungsvariablen aus den vorherigen Beispielen. Ändern Sie im Datenteil des `curl`-Kommandos den Parameter `sites` und setzen ihn auf den Namen der Instanz - dort, wo die Änderungen aktiviert werden sollen:

.rest-api_test.sh
[{file}]
----
#!/bin/bash
HOST_NAME="myserver"
SITE_NAME="mysite"
API_URL="http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0"

USERNAME="automation"
PASSWORD="theautomationsecret"

out=$(
  curl \
    --request POST \
    --write-out "\nxxx-status_code=%{http_code}\n" \
    --header "Authorization: Bearer $USERNAME $PASSWORD" \
    --header "Accept: application/json" \
    --header "Content-Type: application/json" \
    --data '{
          "force_foreign_changes": false,
          "redirect": false,
          "sites": [
            "mysite"
          ]
        }' \
    "$API_URL/domain-types/activation_run/actions/activate-changes/invoke")

resp=$( echo "${out}" | grep -v "xxx-status_code" )
code=$( echo "${out}" | awk -F"=" '/^xxx-status_code/ {print $2}')

# For indentation, please install 'jq' (JSON query tool)
echo "$resp" | jq
# echo "$resp"

if [[ $code -lt 400 ]]; then
    echo "OK"
    exit 0
else
    echo "Request error"
    exit 1
fi
----

Führen Sie das Skript aus:

[{shell}]
----
{c-omd} ./rest-api_test.sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   839  100   704  100   135   3008    576 --:--:-- --:--:-- --:--:--  3585
{
  "domainType": "activation_run",
  "id": "f9c63794-a8e0-4a08-87d9-bd48e17064ee",
  "title": #"Activation f9c63794-a8e0-4a08-87d9-bd48e17064ee was started."#,
  "links": [
    {
      "rel": "self",
      "href": "http://myserver/mysite/check_mk/api/1.0/objects/activation_run/f9c63794-a8e0-4a08-87d9-bd48e17064ee",
      "method": "GET",
      "type": "application/json",
      "domainType": "link"
    },
    {
      "rel": "urn:com.checkmk:rels/wait-for-completion",
      "href": "http://myserver/mysite/check_mk/api/1.0/objects/activation_run/f9c63794-a8e0-4a08-87d9-bd48e17064ee/actions/wait-for-completion/invoke",
      "method": "GET",
      "type": "application/json",
      "domainType": "link"
    }
  ],
  "members": {},
  "extensions": {}
}
#OK#
----

Der markierte Text zeigt, dass die Aktivierung gestartet wurde. Wieder schlägt die REST-API unter `links` zwei sinnvolle Folge-Anfragen vor: um den Status dieser Aktivierung abzufragen und auf deren Abschluss zu warten.


[#rest_api_gui]
=== Anfragen stellen per REST-API GUI

Mit der REST-API GUI erhalten Sie eine neue Perspektive auf die API: Sie können mit dieser GUI aus dem Browser heraus direkt mit der API interagieren, indem Sie Anfragen per cURL-Kommando an den Server senden und postwendend die Antworten sehen. Dafür müssen Sie in der API GUI auf die Code-Beispiele der REST-API-Dokumentation verzichten: beide Sichten sind eben für ihren Anwendungszweck optimiert.

Die REST-API GUI wird aus der gleichen Quelle  wie die REST-API-Dokumentation generiert -- dem OpenAPI-Dokument -- und bietet daher stets die zur API passenden Funktionen an.

Sie öffnen die API GUI in der {CMK}-GUI über die Navigationsleiste im Menü [.guihint]#Help > APIs > REST API interactive GUI#. Die API GUI wird in einem neuen Browser-Fenster (bzw. Browser-Tab) angezeigt:

[{image-border}]
image::restapi_swaggerui.png[]

Im folgenden skizzieren wir, wie Sie die erste Anfrage aus dem obigen Beispiel (einen Host erstellen) statt per Skript auch mit der REST-API GUI ausführen können:

. Authentisieren: Die REST-API GUI bietet nach dem Anklicken des Knopfs [.guihint]#Authorize# (auf der rechten Seite über dem Eintrag des ersten Endpunkt-Ordners) eine Dialogbox zur Eingabe der Authentifizierungsinformationen. Sie brauchen dort aber *keine* Eingaben zu machen, da Sie als angemeldeter {CMK}-Benutzer per xref:rest_api#auth[Cookie-Authentifizierung] berechtigt zur Nutzung der REST-API sind.

. Endpunkt auswählen: Wählen Sie im Ordner [.guihint]#Hosts# den Endpunkt [.guihint]#Create a host# aus und klicken Sie [.guihint]#Try it out#.

. Parameterwerte eingeben: Überschreiben Sie im [.guihint]#Request body# die Beispielwerte für `host_name` und `ipaddress`.

. Anfrage senden: Klicken Sie [.guihint]#Execute#.

. Antwort überprüfen: Unter [.guihint]#Responses# sehen Sie zunächst das gesendete cURL-Kommando und die URL des Endpunkts. Anschließend wird unter [.guihint]#Server response# die Antwort angezeigt mit HTTP-Status-Code und im [.guihint]#Response body# die (mehrzeilig formatierte) REST-API Antwort.

Die REST-API GUI bietet Ihnen also die Möglichkeit, schnell und unkompliziert die Funktionen der API auszuprobieren und sich mit den Details der Eingabewerte und mit konkreten Antworten vertraut zu machen.


[#error_correction]
=== Fehler korrigieren

Im Gegensatz zu den bisher gezeigten Ausgaben bei erfolgreichen Kommandos per Skript, zeigt Ihnen die REST-API Fehler in der folgenden Art an:

[{shell}]
----
{
  "title": "An exception occurred.",
  "status": 401,
  "detail": "There are changes from other users and foreign changes are not allowed in this API call.",
}
----

Je nach Fehler können die in der Ausgabe angezeigten Parameter unterschiedlich sein. Immer erhalten sie aber in `status` den link:https://de.wikipedia.org/wiki/HTTP-Statuscode[HTTP-Status-Code] und in `title` eine Kurzbeschreibung der Fehlerursache.

In den meisten Fällen zeigt Ihnen `detail`, wie der Name schon vermuten lässt, detaillierte Informationen an. Im obigen Beispiel erfahren Sie, dass es zwar ausstehende Änderungen in {CMK} gibt, die aber von einem anderen Benutzer veranlasst wurden. Über die API können nur Änderungen aktiviert werden, die auch über die API durchgeführt wurden.

Auch im nächsten Beispiel stecken die hilfreichen in den detaillierten Informationen:

[{shell}]
----
{
  "title": "Bad Request",
  "status": 400,
  "detail": "These fields have problems: host_name",
  "host_name": [
    "'myserver/123' does not match pattern '[-0-9a-zA-Z_.]+'."
  ]
}
----

Hier liegt das Problem darin, dass ein Parameterwert sich nicht an den gültigen Wertebereich hält (wegen eines Schrägstrichs im Hostnamen).

Die Anzahl der möglichen Fehler ist natürlich sehr viel länger als die beiden, die wir vorgestellt haben. An den gezeigten Beispielen sehen Sie aber, dass die REST-API in der Ausgabe meist genügend Informationen über die Ursache liefert und Ihnen so Anhaltspunkte für den Einstieg in die Analyse und die Fehlerbehebung  gibt.


[#securing]
== Die API absichern

Da beim Zugriff über die REST-API sensible Daten übertragen  und -- je nach Berechtigung des Automationsbenutzers -- umfassende Änderungen an {CMK} durchgeführt werden können, sollten Sie den Zugriff entsprechend absichern. Hier finden Sie einige der Möglichkeiten:

* xref:omd_https#[{CMK} über HTTPS]: Nutzen Sie die API ausschließlich über das Hypertext Transfer Protocol Secure (HTTPS), da Benutzername, Passwort und auch Konfigurationsdaten sonst im Klartext im Netz übertragen werden.

* Geben Sie dem Automationsbenutzer ein Passwort mit einer ausreichenden Länge. Da das Passwort in der Regel nur in einem Skript hinterlegt wird, können Sie problemlos ein sehr langes vergeben.

* Achten Sie auf das Berechtigungskonzept zu den Skripten, mit denen Sie die Anfragen an die API stellen. In den Skripten können sensible Daten, wie Konfigurationsdaten, Passwörter usw. enthalten sein. Stellen Sie daher sicher, dass ausschließlich berechtigte Benutzer und Gruppen diese Skripten lesen können.


[#rest-web-api]
== REST-API und Web-API im Vergleich

In diesem Kapitel erhalten Sie einen Überblick, welche Funktionen Ihnen über die REST-API und über die Web-API zur Verfügung stehen.
Die folgende Tabelle ist gegliedert nach den Endpunkten, die sie im linken Navigationsbereich der REST-API-Dokumentation wiederfinden.
In der Tabelle enthält die Spalte für die REST-API die HTTP-Methoden (bei Mehrdeutigkeit ergänzt um Kontextinformationen) und die Spalte für die Web-API die Befehle.

[cols=4,options="header"]
|===
|Funktion |Aktion |REST-API |Web-API 
.2+|Quittierung von Problemen (_Acknowledge problems_) |für Hosts quittieren |POST host |-
|für Services quittieren |POST service |-
.5+|Wartungszeit (_Downtime_) |anzeigen |GET |-
|alle anzeigen |GET all |-
|für einen Host erstellen |POST host |-
|für einen Service erstellen |POST service |-
|entfernen |POST delete |-
|Host-Status |Hosts eines Zustands anzeigen |GET all |-
.3+|Service-Status |Service auf einem Host anzeigen |GET show_service |-
|Services auf einem Host anzeigen |GET services |-
|Alle Services anzeigen |GET all |-
.10+|Agent |alle Agenten anzeigen |GET all |-
|Zustand der automatischen Agentenverteilung anzeigen |GET automatic-deployment |-
|Backzustand anzeigen |GET baking_status |-
|Konfiguration eines Agenten anzeigen |GET agent_hash |-
|Agent nach Host-Name und Betriebssystem herunterladen |GET download_by_host |-
|Agent nach Hash und Betriebssystem herunterladen |GET download_by_hash |-
|alle Agenten signieren |POST sign |-
|alle Agenten backen |POST bake |bake_agents
|alle Agenten backen und signieren |POST bake_and_sign |-
|Mit {CMK} ausgelieferte Agenten herunterladen |GET download |-
.4+|Aktivierung von Änderungen (_Activate changes_) |auf Abschluss einer Aktivierung warten |GET wait-for-completion |-
|Zustand einer Aktivierung anzeigen |GET activation_run |-
|laufende Aktivierungen anzeigen |GET collections running |-
|ausstehende Änderungen aktivieren |POST |activate_changes
.13+|Business Intelligence (BI) |BI-Regel entfernen |DEL bi_rule |-
|BI-Regel anzeigen |GET bi_rule |-
|BI-Regel erstellen |POST bi_rule |-
|BI-Regel ändern |PUT bi_rule |-
|BI-Aggregat entfernen |DEL bi_aggregation |-
|BI-Aggregat anzeigen |GET bi_aggregation |-
|BI-Aggregat erstellen |POST bi_aggregation |-
|BI-Aggregat ändern |PUT bi_aggregation |-
|alle BI-Pakete anzeigen |GET all bi_pack |-
|BI-Paket entfernen |DEL bi_pack |-
|BI-Paket anzeigen |GET bi_pack |-
|BI-Paket erstellen |POST bi_pack |-
|BI-Paket ändern |PUT bi_pack |-
.8+|Kontaktgruppe (_Contact group_) |alle anzeigen |GET all |get_all_contactgroups
|erstellen |POST |add_contactgroup
|entfernen |DEL |delete_contactgroup
|anzeigen |GET |-
|ändern |PUT |edit_contactgroup
|mehrere ändern |PUT bulk-update |-
|mehrere erstellen |POST bulk-create |-
|mehrere entfernen |POST bulk-delete |-
.8+|Ordner (_Folder_) |alle Hosts eines Ordners anzeigen |GET collections hosts |-
|alle anzeigen |GET all |get_all_folder
|erstellen |POST |add_folder
|entfernen |DEL |delete_folder
|anzeigen |GET |get_folder
|ändern |PUT |edit_folder
|mehrere ändern |PUT bulk-update |-
|verschieben |POST move |-
.12+|Host |alle anzeigen |GET all |get_all_hosts
|erstellen |POST |add_host
|entfernen |DEL |delete_host
|anzeigen |GET |get_host
|ändern |PUT |edit_host
|Cluster-Knoten ändern |PUT nodes |-
|mehrere ändern |PUT bulk-update |-
|umbenennen |PUT rename |-
|Cluster-Host erstellen |POST clusters |-
|mehrere erstellen |POST bulk-create |-
|verschieben |POST move |-
|mehrere entfernen |DEL bulk-delete |delete_hosts
.8+|Host-Gruppe |alle anzeigen |GET all |get_all_hostgroups
|erstellen |POST |add_hostgroup
|entfernen |DEL |delete_hostgroup
|anzeigen |GET |-
|ändern |PUT |edit_hostgroup
|mehrere ändern |PUT bulk-update |-
|mehrere erstellen |POST bulk-create |-
|mehrere entfernen |POST bulk-delete |delete_hosts
.5+|Host-Merkmalsgruppe (_Host tag group_) |entfernen |DEL |-
|anzeigen |GET |-
|ändern |PUT |set_hosttags
|alle anzeigen |GET all |get_hosttags
|erstellen |POST |-
.5+|Passwort (im Passwortspeicher) |entfernen |DEL |-
|anzeigen |GET |-
|ändern |PUT |-
|alle anzeigen |GET all |- 
|erstellen |POST |-
.4+|Regel (_Rule_) |alle anzeigen |GET all |- 
|erstellen |POST |set_ruleset
|entfernen |DEL |-
|anzeigen |GET |-
.2+|Regelsatz (_Rule set_) |durchsuchen |GET all |get_ruleset_info 
|anzeigen |GET |get_ruleset
.5+|Service-Erkennung (_Service discovery_) |Services eines Service-Erkennungszustands anzeigen |GET collections |-
|Zustand eines Jobs zur Service-Erkennung auf mehreren Hosts anzeigen |GET discovery-run |-
|Service-Erkennungszustand eines Services ändern |PUT |-  
|Service-Erkennung auf einem Host ausführen |POST discover_services |discover_services
|Service-Erkennung auf mehreren Hosts ausführen |POST bulk-discovery-start |-
.8+|Service-Gruppe |alle anzeigen |GET all |get_all_servicegroups
|erstellen |POST |add_servicegroup
|entfernen |DEL |delete_servicegroup
|anzeigen |GET |-
|ändern |PUT |edit_servicegroup
|mehrere ändern |PUT bulk-update |-
|mehrere erstellen |POST bulk-create |-
|mehrere entfernen |POST bulk-delete |-
.5+|Zeitperiode (_Time period_) |entfernen |DEL |-
|anzeigen |GET |-
|ändern |PUT |-
|alle anzeigen |GET all |- 
|erstellen |POST |-
.5+|Benutzer (_User_) |entfernen |DEL |delete_users
|anzeigen |GET |-
|ändern |PUT |edit_users
|alle anzeigen |GET all |get_all_users 
|erstellen |POST |add_users
.5+|Instanz (_Site_) |anzeigen |- |get_site
|aktualisieren |- |set_site
|entfernen |- |delete_site
|anmelden |- |login_site
|abmelden |- |logout_site
.3+|Metriken und Graphen (_Metrics and graphs_) |Metriken aller Services eines Hosts anzeigen |- |get_metrics_of_host
|Graph-Informationen eines Services anzeigen |- |get_graph_recipes
|Metriken eines Graphen anzeigen |- |get_graph
.1+|Verschiedenes (miscellaneous) |Versionsinformationen anzeigen |GET version |-
|===

////
TK: Die folgenden 3 Web-API-Befehle auskommentiert, da es für diese Spezialthemen wohl keine REST-API Anfragen geben wird.
|Instanzen eines Benutzers anzeigen |- |get_user_sites
|Host-Namen aller Instanzen anzeigen |- |get_host_names
|Service Level Agreement (SLA)-Informationen anzeigen |- |get_sla
////
