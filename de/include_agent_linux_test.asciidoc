// -*- coding: utf-8 -*-
include::global_attr.adoc[]


[#test]
== Test und Fehlerdiagnose

// Sobald Sie den Agent installiert und registriert haben, stellen Sie sich sicher die Frage, wie Sie ausprobieren können, ob Sie alles richtig gemacht haben.
Ein modulares System kann an vielen Stellen nicht wie vorgesehen funktionieren.
Da mit dem Agenten in der {v21} die beiden Komponenten Agent Controller auf dem Host und Agent Receiver auf dem {CMK}-Server eingeführt wurden, steigt die Zahl der Stellen, an denen etwas schief gehen kann.

Bei der Fehlersuche ist daher eine strukturierte Vorgehensweise sinnvoll.
Selbstverständlich können Sie die hier beschriebene schrittweise Analyse auch nutzen, die Datenerhebung und Kommunikation von {CMK} näher kennenzulernen. 

Alle Möglichkeiten, die es vom {CMK}-Server aus gibt, sind im allgemeinen Kapitel über die Agenten xref:wato_monitoringagents#diagnostics[beschrieben].
Aber natürlich gibt es noch weitere Diagnosemöglichkeiten, wenn man direkt auf dem überwachten Host selbst eingeloggt ist.

Wir arbeiten uns im Folgenden vom Agentenskript über den Agent Controller und den TCP-Port 6556 bis zur {CMK}-Instanz durch.
In den meisten Fällen können Sie nach Korrektur eines Fehlers die Diensteerkennung erneut starten und die Aufnahme ins Monitoring abschließen.


[#script_output]
=== Ausgabe des Agentenskripts

Das Agentenskript ist ein einfaches Shellskript, welches Daten über Ihr System beschafft und als lose formatierten Text ausgibt.
Sie können es direkt auf der Kommandozeile aufrufen.
Da die Ausgabe etwas länger sein kann, ist der Pager `less` zum Scrollen der Ausgabe hier sehr praktisch.
Sie können Ihn mit der Taste Q verlassen:

[{shell-raw}]
----
{c-root} check_mk_agent | less
<<<check_mk>>>
Version: 2.1.0b1
AgentOS: linux
Hostname: mynewhost
AgentDirectory: /etc/check_mk
DataDirectory: /var/lib/check_mk_agent
SpoolDirectory: /var/lib/check_mk_agent/spool
PluginsDirectory: /usr/lib/check_mk_agent/plugins
LocalDirectory: /usr/lib/check_mk_agent/local
AgentController: cmk-agent-ctl 0.1.0
----

So ermitteln Sie, ob in der Ausgabe alle gewünschten Daten enthalten sind – beispielsweise, ob alle installierten Plugins die erwartete Ausgabe liefern.

Sie müssen übrigens nicht unbedingt `root` sein, um den Agenten aufzurufen.
Allerdings werden dann in der Ausgabe einige Informationen fehlen, zu deren Beschaffung `root`-Rechte erforderlich sind (z.B. Multipath-Informationen und die Ausgaben von `ethtool`).


=== Agentenskript im Debug-Modus

Damit eventuelle Fehlerausgaben von nicht funktionierenden Plugins oder Befehlen nicht die eigentlichen Daten „verunreinigen“, unterdrückt das Agentenskript generell den Standardfehlerkanal (STDERR).
Sind Sie auf der Suche nach einem bestimmten Problem, können Sie diesen wieder aktivieren, indem Sie das Agentenskript in einem speziellen Debug-Modus aufrufen.
Das machen Sie mit der Option `-d`.
Dabei werden auch sämtliche Shellbefehle ausgegeben, die das Skript ausführt.

Damit Sie hier mit `less` arbeiten können, müssen Sie Standardausgabe (STDOUT) und Fehlerkanal mit `2>&1` zusammenfassen:

[{shell}]
----
{c-root} check_mk_agent -d 2>&1 | less
----


=== Agent Controller im Dump-Modus

Der Agent Controller stellt ein eigenes Subkommando `dump` bereit, das die vollständige Agentenausgabe anzeigt, wie sie im Monitoring ankommt:

[{shell-raw}]
----
{c-root} cmk-agent-ctl dump | less
<<<check_mk>>>
Version: 2.1.0b1
AgentOS: linux
Hostname: mynewhost
----

So können Sie überprüfen, ob die Daten vom Agentenskript beim Agent Controller angekommen sind.
Diese Ausgabe beweist noch nicht, dass der Agent auch über das Netzwerk erreichbar ist.

In einigen Fällen sieht die Ausgabe wie folgt aus:

[{shell-raw}]
----
ERROR [cmk_agent_ctl] Error collecting monitoring data.

Caused by:
    No such file or directory (os error 2)
----

Dies ist der Fall, wenn der Agent Controller Daemon nicht im Hintergrund läuft – beispielsweise unmittelbar nach einem Update.
Starten Sie diesen Hintergrundprozess neu:

[{shell-raw}]
----
{c-root} systemctl restart cmk-agent-ctl-daemon
----

Schlägt `cmk-agent-ctl dump` erneut fehl, prüfen Sie, ob und wenn, welches Programm an Port 6556 lauscht:

[{shell-raw}]
----
{c-root} ss -tulpn | grep 6556
tcp	LISTEN	0	1024	0.0.0.0:6556 0.0.0.0:*	users:(("cmk-agent-ctl",pid=1861810,fd=9))
----

Ist die Ausgabe leer oder innerhalb der Klammer steht ein anderer Befehl als `cmk-agent-ctl`, sind die Systemvoraussetzungen für die Nutzung des Agent Controllers nicht erfüllt.
Schließen Sie in diesem Fall die Einrichtung ab wie im Artikel xref:agent_linux_legacy#[Linux überwachen im Legacy-Modus] beschrieben.

=== Verbindungstest von außen

Ist sichergestellt, dass lokal das Agentenskript und die mitinstallierten Plugins korrekt ausgeführt werden, können Sie als nächstes vom {CMK}-Server per `netcat` (oder `nc`) prüfen, ob Port 6556 erreichbar ist:
// TK: Die asynchronen Plugins kommen aber bisher (?) nicht vor. 
// MFS: asynchron abgeändert auf [alle] mitinstallierten Plugins, bei Installation aus Bakery nicht ungewöhnlich, dass gleich Plugins ausgeliefert werden

[{shell}]
----
{c-omd} echo | nc 10.76.23.189 6556
16
----

Die Ausgabe `16` zeigt an, dass die Verbindungsaufnahme erfolgreich war und nun der TLS-Handshake stattfinden kann.
// TK: Was hat die 16 mit der Verbindungsaufnahme zu tun?
// MFS: Nix spezielles, die Gegenseite wartet lediglich auf zwei Bytes
Da alles weitere hier TLS verschlüsselt stattfindet, ist keine detaillierte Prüfung möglich.

Schlägt der Verbindungstest von außen fehl, liegt dies meist an der Firewall-Einstellung.
Konfigurieren Sie `iptables` oder `nftables` in diesem Fall so, dass Zugriff auf TCP Port 6556 vom {CMK}-Server aus möglich ist.

*Hinweis:* Falls die Kommunikation zwischen Agent und {CMK}-Server _noch_ unverschlüsselt ist (wie im Legacy-Pull-Modus) oder unverschlüsselt ist und auch bleibt (wie im xref:agent_linux_legacy#[Legacy-Modus]), erhalten Sie mit diesem Kommando statt der `16` die komplette unverschlüsselte Agentenausgabe.

// REMOVE-AFTER-BETA 
// MFS: Derzeit können Hosts mit xinetd registriert werden, dies soll noch im Laufe der Beta verhindert werden, für Beta-Tester ist dieser Abschnitt daher noch relevant:
Bleibt die Ausgabe auch nach Registrierungsversuch unverschlüsselt, verwenden Sie `grep`, um den Status aus der Ausgabe zu ermitteln:

[{shell-raw}]
----
{c-omd} echo | nc 10.76.23.189 6556 | grep -A1 cmk_agent_ctl_status
<<<cmk_agent_ctl_status:sep(0)>>>
{"version":"0.1.0","ip_allowlist":[],"allow_legacy_pull":false, ... }
----

Ist die Variable `allow_legacy_pull` auf `false` gesetzt, erlaubt der Agent Controller selbst keine Klartextausgabe, aber für TCP Port 6556 ist ein anderer Dienst, beispielsweise `xinetd` zuständig.
Dies ist gelegentlich Zustand nach Update eines Systems, das die Voraussetzungen für die Verwendung des Agent Controller nicht erfüllt.
Führen Sie in diesem Fall zuerst eine Deregistrierung durch und schließen Sie dann die Einrichtung ab wie im Artikel xref:agent_linux_legacy#[Linux überwachen im Legacy-Modus] beschrieben.

=== Test mit der {CMK}-Kommandozeile

Statt mit `nc` können Sie mit dem {CMK}-Kommandozeilentool die komplette Agentenausgabe anfordern und sich anzeigen lassen.
Die Optionen `--debug -v` fügen noch einige Debugging-Informationen hinzu. 

[{shell-raw}]
----
{c-omd} cmk --debug -v -d mynewhost
----

// REMOVE-AFTER-BETA
Eventuell enthält die Ausgabe lediglich einen Debug Trace wie folgt:

[{shell-raw}]
----
[TCPFetcher] Execute data source
Traceback (most recent call last):
  File "/omd/sites/mysite/lib/python3/cmk/core_helpers/tcp.py", line 194, in _wrap_tls
    return ctx.wrap_socket(self._socket, server_hostname=str(controller_uuid))
  File "/omd/sites/mysite/lib/python3.9/ssl.py", line 500, in wrap_socket
    return self.sslsocket_class._create(
  File "/omd/sites/mysite/lib/python3.9/ssl.py", line 1040, in _create
    self.do_handshake()
  File "/omd/sites/mysite/lib/python3.9/ssl.py", line 1309, in do_handshake
    self._sslobj.do_handshake()
ssl.SSLError: [SSL: TLSV1_ALERT_ACCESS_DENIED] tlsv1 alert access denied (_ssl.c:1129)
[...]
cmk.utils.exceptions.MKFetcherError: Error establishing TLS connection
----

In diesem Fall sollten Sie zunächst mit `root`-Rechten auf dem neuen Host den Status der Verbindung ermitteln:

[{shell-raw}]
----
{c-root} cmk-agent-ctl status
----

// REMOVE-AFTER-BETA
Zeigt dieses Kommando eine korrekte Registrierung am {CMK}-Server, genügt in vielen Fällen ein einfacher Neustart des Agent Controller Daemons:
// TK: Warum soll ich neustarten, wenn eine korrekte Registrierung angezeigt wird?
// MFS: Die Prüfung der Registrierung ist nur Auslesen der Konfiguration, ist die korrekt, aber der Handshake schlägt fehl, liegt ein internes Problem des Agent Controller Daemons vor, er muss neu gestartet werden, kam auch in den Tagen vor Beta 2 gelegentlich vor, beobachten und Abschnitt nach Beta 3 oder 4 auskommentieren.

[{shell-raw}]
----
{c-root} systemctl restart cmk-agent-ctl-daemon
----
