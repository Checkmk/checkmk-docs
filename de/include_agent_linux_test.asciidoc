// -*- coding: utf-8 -*-
include::global_attr.adoc[]

[#test]
== Test und Fehlerdiagnose

=== Übersicht

Da der neue Agent die beiden Komponenten "Agent Controller" auf dem überwachten Host und den "Agent Receiver" auf dem {CMK}-Server einführt, steigt die Zahl der Stellen, an denen etwas schief gehen kann.
Zunächst ist das Agentenscript weiterhin ein einfaches Shellscript, welches Daten über Ihr System beschafft und als lose formatierten Text ausgibt. Sie können es direkt auf der Kommandozeile aufrufen:

[{shell-raw}]
----
{c-root} check_mk_agent | head -n10
<<<check_mk>>>
Version: 2022.02.21
AgentOS: linux
Hostname: mynewhost
AgentDirectory: /etc/check_mk
DataDirectory: /var/lib/check_mk_agent
SpoolDirectory: /var/lib/check_mk_agent/spool
PluginsDirectory: /usr/lib/check_mk_agent/plugins
LocalDirectory: /usr/lib/check_mk_agent/local
AgentController: cmk-agent-ctl 0.1.0
----

=== Debugmodus

Damit eventuelle Fehlerausgaben von nicht funktionierenden Plugins oder
Befehlen nicht die eigentlichen Daten „verunreinigen“, unterdrückt der
Agent generell den Standardfehlerkanal. Sind Sie auf der Suche nach
einem bestimmten Problem, können Sie diesen wieder aktivieren, indem
Sie den Agenten in einem speziellen Debugmodus aufrufen. Das machen
Sie mit der Option `-d`. Dabei werden auch sämtliche Shellbefehle
ausgegeben, die der Agent ausführt.

Damit Sie hier mit `less` arbeiten können, müssen Sie Standardausgabe
und Fehlerkanal mit `2>&1` zusammenfassen:

[{shell}]
----
{c-root} check_mk_agent -d 2>&1 | less
----

=== Agent-Controller im Dump-Modus

// MFS: Das stimmt so möglicherweise nicht ganz. 
Da Plugins, die asynchron abgefragt werden, in der Script-Ausgabe nicht enthalten sind, stellt der Agent Controller ein eigenes Subkommando `dump` bereit, das die vollständige Agentenausgabe anzeigt, wie sie im Monitoring ankommt.

[{shell-raw}]
----
{c-root} cmk-agent-ctl dump
<<<check_mk>>>
Version: 2022.02.21
AgentOS: linux
Hostname: mynewhost
----

Da die Ausgabe etwas länger sein kann, ist `less` hier sehr praktisch (Sie können es mit der Taste Q verlassen):

[{shell}]
----
{c-root} cmk-agent-ctl dump | less
----

=== Verbindungstest von außen

Ist sichergestellt, dass lokal das Agentenscript und die asynchronen Plugins korrekt ausgeführt werden, können Sie als nächstes vom {CMK}-Server aus zunächst per Netcat prüfen, ob Port 6556 erreichbar ist:

[{shell}]
----
echo -n -e "\x10" | nc 10.76.23.189 6556
16
----

Die Ausgabe `16` zeigt an, dass die Verbindungsaufnahme erfolgreich war. Da alles weitere hier TLS verschlüsselt stattfindet, ist so keine detaillierte Prüfung möglich.

=== Test mit der {CMK}-Kommandozeile

Stattdessen können Sie mit dem {CMK}-Kommandozeilentool die komplette Agentenausgabe anfordern und sich anzeigen lassen. Der folgende Befehl fügt noch einige Debugging-Informationen hinzu. 

[{shell-raw}]
----
{c-omd} cmk --debug  -v -d  mynewhost
----

// REMOVE-AFTER-BETA
Eventuell enthält die Ausgabe lediglich einen Debug Trace wie folgt:

[{shell-raw}]
----
[TCPFetcher] Execute data source
Traceback (most recent call last):
  File "/omd/sites/mysite/lib/python3/cmk/core_helpers/tcp.py", line 194, in _wrap_tls
    return ctx.wrap_socket(self._socket, server_hostname=str(controller_uuid))
  File "/omd/sites/mysite/lib/python3.9/ssl.py", line 500, in wrap_socket
    return self.sslsocket_class._create(
  File "/omd/sites/mysite/lib/python3.9/ssl.py", line 1040, in _create
    self.do_handshake()
  File "/omd/sites/mysite/lib/python3.9/ssl.py", line 1309, in do_handshake
    self._sslobj.do_handshake()
ssl.SSLError: [SSL: TLSV1_ALERT_ACCESS_DENIED] tlsv1 alert access denied (_ssl.c:1129)
[...]
cmk.utils.exceptions.MKFetcherError: Error establishing TLS connection
----


In diesem Fall sollten Sie zunächst mit Rootrechten auf dem neuen Host den Status der Verbindung ermitteln: 

[{shell-raw}]
----
{c-root} service cmk-agent-ctl-daemon status 
----

// REMOVE-AFTER-BETA
Zeigt diese eine korrekte Registrierung am {CMK}-Server, genügt in vielen Fällen ein einfacher Neustart des Agent Controller Daemons:

[{shell-raw}]
----
{c-root} service cmk-agent-ctl-daemon restart
----





////
2.0 Text - MFS: Kann wech. ;-)
=== Übersicht

Sobald Sie den Agent installiert und konfiguriert haben, stellen Sie sich sicher
die Frage, wie Sie ausprobieren können, ob Sie alles richtig gemacht haben. Alle
Möglichkeiten, die es vom {CMK}-Server aus gibt, sind im allgemeinen Kapitel
über die Agenten xref:wato_monitoringagents#diagnostics[beschrieben]. Aber
natürlich gibt es noch weitere Diagnosemöglichkeiten, wenn man direkt auf dem
Zielsystem selbst eingeloggt ist.

Da der „Agent“ im Grunde nichts als ein einfaches Programm ist,
das Daten über Ihr System beschafft und diese als lose formatierten
Text ausgibt, können Sie ihn auch als Programm aufrufen, und zwar
ganz einfach so:

[{shell-raw}]
----
{c-root} check_mk_agent
<<<check_mk>>>
Version: 2.0.0p42
AgentOS: linux
Hostname: myhost123
AgentDirectory: /etc/check_mk
DataDirectory: /var/lib/check_mk_agent
SpoolDirectory: /var/lib/check_mk_agent/spool
PluginsDirectory: /usr/lib/check_mk_agent/plugins
LocalDirectory: /usr/lib/check_mk_agent/local
<<<df>>>
udev              devtmpfs     8155492         4   8155488       1% /dev
tmpfs             tmpfs        1634036      1204   1632832       1% /run
/dev/sda5         ext4       226298268 176973752  37806104      83% /
none              tmpfs              4         0         4       0% /sys/fs/cgroup
----

Da die Ausgabe etwas
länger sein kann, ist `less` auch hier sehr praktisch (Sie können es
mit der Taste Q verlassen):

[{shell}]
----
{c-root} check_mk_agent | less
----

Diese Ausgabe beweist natürlich nicht, dass der Agent auch über das Netzwerk
erreichbar ist. Aber Sie können so testen, ob in der Ausgabe alle gewünschten
Daten enthalten sind.

Sie müssen übrigens nicht unbedingt `root` sein, um den Agenten
aufzurufen. Allerdings werden dann in der Ausgabe eventuell einige
Informationen fehlen, zu deren Beschaffung `root`-Rechte erforderlich
sind (z.B. Multipath-Informationen und die Ausgaben von `ethtool`).

=== Debugmodus

Damit eventuelle Fehlerausgaben von nicht funktionierenden Plugins oder
Befehlen nicht die eigentlichen Daten „verunreinigen“, unterdrückt der
Agent generell den Standardfehlerkanal. Sind Sie auf der Suche nach
einem bestimmten Problem, können Sie diesen wieder aktivieren, indem
Sie den Agenten in einem speziellen Debugmodus aufrufen. Das machen
Sie mit der Option `-d`. Dabei werden auch sämtliche Shellbefehle
ausgegeben, die der Agent ausführt.

Damit Sie hier mit `less` arbeiten können, müssen Sie Standardausgabe
und Fehlerkanal mit `2>&1` zusammenfassen:

[{shell}]
----
{c-root} check_mk_agent -d 2>&1 | less
----
////

////
Sollten wir noch weitere kurze Erklärungen zu 'Agent rules' einfügen, könnte man
die ggf. in einem Kapitel "Erweiterte Konfiguration" zusammenfassen. Solange
'Deaktivieren von Sektionen' hier alleine steht, ist es ein eigenes H2.
== Erweiterte Konfiguration

=== Deaktivieren von Sektionen
////
