include::global_attr.adoc[]
= Docker überwachen
:revdate: 2022-02-17
:title: Docker überwachen
:description: Der Artikel beschreibt, wie Sie ein vollständiges Monitoring für Docker-Nodes und deren Container in {CMK} betreiben und was Sie dabei beachten müssen.

{related-start}
xref:wato_monitoringagents#[Monitoring-Agenten]
xref:agent_linux#[Linux überwachen]
xref:intro_setup_monitor#[Das Monitoring einrichten]
{related-end}

== Einleitung

[{image-left}]
image::docker_logo_breit.png[alt="Company-Logo der Firma Docker, Inc.", width=335]

Docker hat sich weltweit zu einem der am häufigsten verwendeten Softwareprodukte zur Container-Virtualisierung entwickelt. So notwendig eine durchgängige und transparente Überwachung der Container ist, so komplex ist sie aber auch aufgrund von deren dynamischer und vielschichtiger Architektur.

{CMK} kann Docker-Container direkt über den xref:agent_linux#[Linux-Agenten] überwachen. Dabei werden nicht nur
Rahmendaten, wie der Status des Daemons oder des Containers, sondern auch die
Container selbst überwacht. Eine vollständige Liste der aktuell überwachbaren
Dinge finden Sie wie immer im link:https://checkmk.de/cms_check_plugins_catalog.html[Katalog der Check-Plugins^].

Neben den Status- und Inventurinformationen, die {CMK} über die Node
(Docker-Bezeichnung für: Host, auf dem die Container laufen) ermitteln kann, kann
{CMK} auch detaillierte Statusinformationen der Container selbst ermitteln. Hierzu wird
in {CMK} jeder Container als eigenständiger Host angelegt, wenn er überwacht
werden soll. Seine Daten werden im xref:piggyback#[Huckepackverfahren (piggyback)] an diesen Host
geliefert.

In den {CEE} können Sie mithilfe der xref:dcd#[dynamischen Konfiguration]
die Container-Hosts auch automatisch anlegen und entfernen lassen.


== Einrichtung

[#install_agent_plugin]
=== Installation von Agent und Plugins

Damit Sie eine Docker-Node mit {CMK} überwachen können, muss diese zunächst
mit dem normalen xref:agent_linux.html#Installation[Linux-Agenten] überwacht werden.
Dadurch erhalten Sie ein Grundmonitoring des Wirtssystems, jedoch
noch keine Information über den Docker Daemon oder gar über die Container.

Dazu benötigen Sie noch das xref:agent_linux#plugins[Agent-Plugin] `mk_docker.py`, das Sie hier finden: [.guihint]#Setup > Agents > Other operating systems > Plugins#

Installieren Sie das Plugin nach `/usr/lib/check_mk_agent/plugins`. Informationen hierzu finden Sie im Kapitel xref:intro_setup_monitor#download_agent[Das Monitoring einrichten]. In den {CEE} können Sie alternativ auch mit der xref:wato_monitoringagents#bakery[Agentenbäckerei]
arbeiten, welche für Docker den entsprechenden Regelsatz bereitstellt: [.guihint]#Docker node and containers#

Bitte beachten Sie, das die Python-Bibliothek
`docker` benötigt wird (*nicht* `docker-py`). Es ist mindestens Version 2.0.0 notwendig.
Mit `python` auf der Kommandozeile können Sie dies leicht überprüfen:

[{shell}]
----
{c-root} python3
Python 3.8.10 (default, Nov 26 2021, 20:14:08)
[GCC 9.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> *import docker*
>>> *docker.version*
'5.0.3'
----

Falls notwendig, können Sie die Bibliothek mit `pip3` installieren:
[{shell}]
----
{c-root} pip3 install docker
----

*Achtung:* Die Pakete `docker-py` beziehungsweise
`python-docker-py` dürfen nicht installiert sein.  Diese stellen
eine veraltete und nicht kompatible Version der Docker-Bibliothek unter dem
selben Namensraum zur Verfügung! Wenn Sie `docker-py` (oder beide Varianten)
installiert haben, reicht eine alleinige Deinstallation nicht aus, da `pip3`
den Namensraum nicht reparieren kann.  Um sicher zu stellen, dass die korrekte
Version installiert ist, führen Sie in diesem Fall bitte folgende Befehle aus:

[{shell}]
----
{c-root} pip3 uninstall docker-py docker
{c-root} pip3 install docker
----

Wenn Sie jetzt in {CMK} die xref:wato_services#[Serviceerkennung] durchführen und die Änderungen aktivieren,
sollten Sie zunächst einige neue Services finden, welche den Docker Node selbst
betreffen:

[{image-border}]
image::docker_basic_services.png[alt="Ansicht der aktuell in {CMK} gefundenen Docker-Services"]

[#finetuning]
=== Finetuning des Plugins

Sie können verschiedene Parameter des Plugins konfigurieren.
So können Sie zum Beispiel Ressourcen schonen, in dem Sie nicht benötigte Sektionen
deaktivieren, oder -- falls nötig -- den Docker API-Engine-Endpunkt anpassen (der Standard
ist das Unix-Socket `unix://var/run/docker.sock`).

Erstellen Sie dazu auf dem Docker-Host eine Konfigurationsdatei unter `/etc/check_mk/docker.cfg`.
Eine Vorlage mit ausführlichen Erläuterungen hierzu finden Sie im {CMK} Verzeichnis unter
`~/share/check_mk/agents/cfg_examples/docker.cfg`.

In den {EE} können Sie alle Parameter bequem mit der xref:wato_monitoringagents#bakery[Agentenbäckerei]
einstellen.

=== Überwachung der Container

==== Anlegen der Container-Hosts

Das eigentlich Interessante ist natürlich das Überwachen der Docker-Container.
Dies geschieht durch Installation der Plugins automatisch. Allerdings werden
die Services nicht der Docker-Node zugeordnet, sondern {CMK} geht von einem
eigenen Host pro Docker-Container aus.

Der Mechanismus, der hier zum Einsatz kommt, heißt xref:piggyback#[Piggyback] (Huckepack).
Dabei transportiert ein Plugin oder Spezialagent Daten zu anderen Hosts quasi „huckepack“
in seiner Ausgabe mit. {CMK} legt diese Daten im Verzeichnis `tmp/check_mk/piggyback`
ab. Sie brauchen dann nur noch im Setup Hosts mit den richtigen Namen anzulegen und die
Services werden diesen automatisch zugeordnet.

In den {EE} können Sie diese Hosts automatisch anlegen lassen.
Verwenden Sie dazu in der xref:dcd#[dynamischen Konfiguration] den Konnektor [.guihint]#Piggyback#.
Sie können die Hosts auch von Hand anlegen. Beachten Sie dabei Folgendes:

* Der Hostname muss exakt dem Verzeichnis entsprechen, welches in `tmp/check_mk/piggyback` angelegt wird. Per Default ist das die zwölfstellige Short-ID des Containers (z.B. `2ed23056480f`)
* Falls die Container keine eigene IP-Adresse haben (was meist der Fall ist), stellen Sie im Abschnitt [.guihint]#Network address# das Attribut bei [.guihint]#IP address family# auf [.guihint]#No IP# ein.
* Bei [.guihint]#Monitoring agents# stellen Sie [.guihint]#Checkmk agent / API integrations# unbedingt auf [.guihint]#No API integrations, no Checkmk agent# ein.
* Das Feld [.guihint]#Parents# im Abschnitt [.guihint]#Basic settings# können Sie auf den Hostnamen der Docker-Node setzen.
* Wichtig ist ferner, dass die Docker-Node und deren Container von der selben {CMK}-Instanz aus überwacht werden.

Nachdem Sie die Container-Hosts angelegt und die Serviceerkennung durchgeführt haben,
tauchen in dieser weitere Services auf.

Falls Sie in dem Container einen xref:agent_linux.html#Installation[Linux-Agenten] installiert haben,
wird er automatisch ausgeführt. Da allerdings viele Services, welche der Agent innerhalb des
Containers überwacht, eigentlich die Informationen der Node zeigen (z.B. CPU load, Temperatur
und viele weitere Betriebssystemparameter), wurden diese entfernt.

==== Alternative Benennung der Container-Hosts

Als Standardeinstellung wird, wie oben erwähnt, die zwölfstellige Short-ID des Containers als Name des Container-Hosts verwendet. Dies können Sie optional anders konfigurieren. Setzen Sie hierzu in der Konfigurationsdatei `docker.cfg` (siehe xref:finetuning[Finetuning des Plugins]) die Option `container_id` auf `long`, um die vollständige Container-ID als Name zu verwenden, oder auf `name`, um den Containernamen zu verwenden.

Nutzer der {CEE} können dies in der
xref:wato_monitoringagents#bakery[Agentenbäckerei] mit Hilfe der Regel [.guihint]#Docker node and containers#, Option [.guihint]#Host name used for containers# einstellen.

image::docker_host_name_used.png[alt="Auswahl der Namensvarianten in 'Docker node and containers'", width=70%]

Übrigens: Mit dem Regelsatz [.guihint]#Access to Agents > General Settings > Hostname translation for piggybacked hosts#
können Sie recht flexibel Regeln zur Umbenennung von Hostnamen, die in Piggyback-Daten enthalten sind, festlegen. Damit können Sie z.B. auch eine Lösung erstellen, für den Fall, dass Sie auf
zwei verschiedenen Docker-Nodes Container mit dem gleichen Namen haben. 

image::docker_hostname_translation.png[alt="Setzen eines eindeutigen Hostnames mit Hilfe der Regel 'Multiple regular expressions'"]

Im Artikel xref:piggyback#renamehosts[Der Piggyback-Mechanismus] finden Sie weitere Möglichkeiten und eine genauere Beschreibung hierzu.

==== Überwachen des Hoststatus

Da der xref:monitoring_basics#hosts[Hoststatus] eines Containers nicht unbedingt
über xref:cmc_differences#smartping[TCP-Pakete oder ICMP] geprüft werden kann,
muss dieser anders ermittelt werden. Hier bietet sich der zum jeweiligen Container gehörige Service
[.guihint]#Docker container status# an. Dieser prüft ohnehin, ob der Container läuft
oder nicht und kann daher als sicheres Mittel verwendet werden, um den
Hoststatus zu ermitteln. Legen Sie dazu eine Regel in dem Regelset
[.guihint]#Host Check Command# an und setzen Sie die Option [.guihint]#Use the status of the service...# auf den erwähnten Service. Vergessen Sie nicht die Bedingungen so zu setzen,
dass sie nur Container betreffen. In unserem Beispiel liegen alle Container
in einem gleichnamigen Ordner:

image::docker_container_hoststatus.png[alt="Einstellung der Regel 'Use the status of the service' im Regelset 'Host Check Command'"]

==== Den Agent direkt im Container betreiben

Um Details im Container selbst zu überwachen (z.B. laufende Prozesse,
Datenbanken, Logdateien, etc.), ist es notwendig, dass der {CMK}-Agent im Container selbst installiert ist und dort ausgeführt wird. Das gilt insbesondere für das Ausrollen von Agentenplugins.
Die drei Plugins `mem`, `cpu` und `diskstat` (Disk-I/O) funktionieren allerdings auch ohne Agent im Container und
werden vom {CMK}-Agenten auf der Node selbst berechnet.

Gerade für selbst erstellte Docker-Images möchten Sie vielleicht den
Agenten selbst in den Container ausrollen. In diesem Fall werden die
Daten nicht mehr, wie oben beschrieben, von dem Agenten der Docker-Node
berechnet. Stattdessen läuft ein separater Agent in jedem Container.
Der Aufruf erfolgt aber nach wie vor gebündelt über die Docker-Node im
Piggyback-Verfahren.

Der im Container installierte Agent funktioniert allerdings nur dann, wenn in
dem Container auch alle benötigten Befehle vorhanden sind.
Speziell bei minimal gebauten Containern auf Basis von Alpine-Linux kann es
gut sein, dass elementare Dinge wie die Bash nicht vorhanden sind.
In diesem Fall sollten Sie den Container aus der Docker-Node heraus überwachen.

Die Verwendung des Regelsets [.guihint]#Host Check Command# wird in diesem Fall nur
benötigt, wenn der Container nicht pingbar ist, funktioniert aber ansonsten
exakt so wie oben beschrieben.


== Diagnosemöglichkeiten

=== Diagnose für eine Docker-Node

Sollte die Einrichtung nicht klappen, gibt es verschiedene Möglichkeiten
der Analyse des Problems. Prüfen Sie gegebenenfalls, ob
auf dem Host ein {CMK}-Agent der Version {v15} oder höher installiert ist.

Falls die Version des Agenten auf dem Host passt, prüfen Sie als nächstes,
ob die Daten in der Ausgabe des Agenten enthalten sind. Sie können die Ausgabe
als Textdatei über den Button [.guihint]#Download agent output# in der GUI in dem
Menü des Hosts herunterladen:

image::docker_node_dropdown.png[alt="Menü des Hosts für die Auswahl der Option 'Download agent output'", width=65%]

Oder Sie durchsuchen direkt den Agent-Cache. Die Ausgabe in dem folgenden
Beispiel ist für die Anschaulichkeit auf die Ausgaben zur Node gekürzt:

[{shell-raw}]
----
{c-omd} strings tmp/check_mk/cache/mydockerhost | grep "&lt&lt&ltdocker"
<<<docker_node_info>>>
<<<docker_node_disk_usage:sep(44)>>>
<<<docker_node_images>>>
<<<docker_node_network:sep(0)>>>
----

Werden die Sektionen hier nicht geführt, wird die Docker-Installation nicht
erkannt. Für den Service [.guihint]#Docker node info# wird der folgende Befehl
benutzt. Dieser muss auf dem Hostsystem in exakt dieser Form ausführbar
sein. Prüfen Sie dann gegebenenfalls Ihre Docker-Installation:

[{shell}]
----
{c-root} docker info 2>&1
----


=== Diagnose für einen Containerhost

Falls der Containerhost keine Daten erhält bzw. keine Services
erkannt werden, prüfen Sie zuerst, ob die Piggyback-Daten zu diesem Host
vorhanden sind. Der Name des Hosts muss identisch mit der ID des Containers
sein. Alternativ können Sie auch über das Regelset
[.guihint]#Hostname translation for piggybacked hosts# eine manuelle Zuordnung
vornehmen. Hier bietet sich allerdings nur die Option
[.guihint]#Explicit hostname mapping# an:

image::docker_container_namemapping.png[alt="Auswahl der Option 'Explicit hostname mapping' in der Regel des Hosts "]

Um zu prüfen, ob zu einer ID Piggyback-Daten angelegt werden, können Sie
das folgende Verzeichnis prüfen:

[{shell}]
----
{c-omd} ls -l tmp/check_mk/piggyback/
76adfc5a7794  f0bced2c8c96  bf9b3b853834
----

== Hostlabels

In {CMK} gibt es sogenannte xref:labels#[Hostlabels]. Das
Dockermonitoring setzt unter anderem diese automatischen Labels: 

* für die Docker-Node das Label `cmk/docker_object:node`,
* für jeden Container die Labels `cmk/docker_image`, `cmk/docker_image_name`, `cmk/docker_image_version` und `cmk/docker_object`.

Diese Labels können Sie z.B. in Bedingungen
für Ihre xref:wato_rules#[Regeln] verwenden, um Ihre Monitoringkonfiguration abhängig von dem Image, das in einem Container verwendet wird, zu machen.


== Dateien und Verzeichnisse

[cols="30,~"]
|===
|Pfad |Bedeutung 

|tmp/check_mk/piggyback/ |Hier legt {CMK} die Huckepackdaten ab. Für jeden Host wird ein Unterordner mit seinem Namen erzeugt. Darin befindet sich eine Textdatei mit den Daten des Hosts. Dateiname ist der Host, welcher die Daten angeliefert hat.
|tmp/check_mk/cache/ |Hier wird die jeweils jüngste Agentenausgabe aller Hosts temporär gespeichert. Der Inhalt einer Datei zu einem Host ist identisch zu dem Befehl `cmk -d myserver123`.
|===
