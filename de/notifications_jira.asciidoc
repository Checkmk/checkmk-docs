include::global_attr.adoc[]
= Benachrichtigungen per Jira
:revdate: 2021-10-11
:title: Benachrichtigungen per Jira (notifications)
:description: Sie können Benachrichtigungen von {CMK} an Jira senden lassen und damit Jira Issues erstellen und schließen. Wie Sie die Anbindung durchführen, erfahren Sie hier.

{related-start}
xref:notifications#[Benachrichtigungen]
{related-end}


== Funktion

Wenn Sie die Software Jira zum Projektmanagement, zur Software-Entwicklung oder zur Fehlerverfolgung verwenden, können Sie mit den {CEE} Benachrichtigungen aus {CMK} heraus an Jira senden und dort _Issues_ erzeugen.
Dies funktioniert für die Jira Applikationen _Jira Core_, _Jira Software_ und _Jira Service Desk_.
// TK: Jira Software und JSD dürfte klar sein. Ob das auch für Jira Core gilt - und/oder sinnvoll ist?
// SK: Gibt es Jira Core überhaupt noch? Es kann schon sein, dass das noch jemand irgendwo einsetzt, aber wenn ich es richtig verstehe, ist das alles in Jira Work Management aufgegangen.

Unterstützt werden dabei folgende Optionen:

* Issues für Host- und Service-Probleme erzeugen.
* Issues mit definierter Priorität (_priority_) erstellen.
* Issues mit einem definierten _Label_ erstellen.
* Links auf Host/Services in {CMK} aus den erzeugten Jira-Issues setzen.
* Eine _Resolution_ im Issue bei eintretenden {OK}-Zuständen setzen.

Um die Anbindung von {CMK} an Jira einzurichten, legen Sie in Jira zunächst einige neue Felder (_Fields_) an und ermitteln bestimmte Jira-_IDs._
Anschließend konfigurieren Sie die Benachrichtigungsmethode für Jira in {CMK}.


[#config_jira]
== Konfiguration Jira

{CMK} muss bei der Interaktion mit Jira wissen, welche Benachrichtigungen bereits einen Issue erzeugt haben und welche nicht.
Damit das möglich wird, müssen Sie in Jira zwei sogenannte [.guihint]#Custom fields#, also benutzerdefinierte Felder, erstellen -- eines für Benachrichtigungen über Host-Probleme, und eines über Service-Probleme.

Um die Host- und Service-Probleme zuordnen zu können, müssen deren IDs eindeutig sein.
Dies ist der Fall, wenn Ihre Jira-Instanz von genau _einer_ {CMK}-Instanz Benachrichtigungen erhält, da der Monitoring-Kern einer {CMK}-Instanz für die Eindeutigkeit sorgt.
Nun kann es aber sein, dass im verteilten Monitoring mehrere {CMK}-Instanzen Benachrichtigungen senden, falls xref:distributed_monitoring#notifications[dezentrale Benachrichtigungen] konfiguriert sind.
Erhält Ihre Jira-Instanz also von mehreren {CMK}-Instanzen Benachrichtigungen, ist es höchstwahrscheinlich mit der Eindeutigkeit vorbei -- spätestens dann, wenn die ID eines Host-Problems bereits von einer anderen {CMK}-Instanz verwendet wurde.
In einer solchen Konfiguration benötigen Sie ein weiteres benutzerdefiniertes Feld für die {CMK}-Instanz, mit dem die eindeutige Zuordnung wieder möglich wird.

Für die Konfiguration in {CMK} benötigen Sie die Jira-IDs der erstellten benutzerdefinierten Felder -- und zusätzlich die von einigen anderen Feldern, im Ganzen also die folgende Liste:

* Project ID
* Issue type ID
* Priority ID (optional)
* Host custom field ID
* Service custom field ID
* Site custom field ID (optional)
* (Workflow) Transition ID (optional)

Die allermeisten dieser IDs können mit dem unten angegebenem Skript über eine der REST APIs von Jira ausgelesen werden. Jira-Administratoren können die IDs - auch solche, die über die API und somit das Skript nicht abrufbar sind - über die GUI von Jira ermitteln.


[#jira_custom_fields]
=== Einrichten der benutzerdefinierten Felder in Jira


[#jira_host_field]
==== Feld für Host-Probleme erstellen

. Öffnen Sie als Jira-Administrator den Punkt [.guihint]#Administration# in der Kopfleiste: 
+
[{image-border}]
image::jira_admin_settings.png[width=300]

. Wählen Sie nun [.guihint]#Issues# und navigieren Sie im Abschnitt [.guihint]#Fields# zu
[.guihint]#Custom Fields.# Über [.guihint]#Add custom field# - dieser Knopf kann sich je nach Jira Produkt im oberen Drittel des rechten Bildrandes verstecken - können Sie ein neues, benutzerdefiniertes Feld anlegen.

. Wählen Sie im nächsten Fenster [.guihint]#All#, damit alle Feldarten angezeigt werden.
+
[{image-border}]
image::notifications_jira_custom_field.png[]

. Klicken Sie den Feldtyp [.guihint]#Number Field# und anschließend [.guihint]#Next#:
+
[{image-border}]
image::jira_custom_field_2.png[]

. Als [.guihint]#Name# tragen Sie zum Beispiel `CMK_HOST_FIELD` ein. Die [.guihint]#Description# können Sie optional mit einer Beschreibung des neuen Felds befüllen. Bestätigen Sie das ganze durch einen Klick auf [.guihint]#Create#.


[#jira_service_field]
==== Feld für Service-Probleme erstellen

Da Sie auch für Benachrichtigungen über Service-Probleme ein solches Feld benötigen, wiederholen Sie die Prozedur von xref:jira_host_field[oben], dieses Mal aber mit einem entsprechenden Eintrag für Services, z.B. mit dem Feldnamen `CMK_SVC_FIELD`.


[#jira_site_field]
==== Feld für die {CMK}-Instanz erstellen

Auch für das optionale Instanzfeld können Sie im Prinzip der xref:jira_host_field[Anleitung von oben] folgen.
Wählen Sie aber diesmal als Feldtyp [.guihint]#Text Field (single line)# und als Feldname z.B. `CMK_SITE_FIELD`.


[#jira_ids_script]
=== Jira-IDs über externes Skript ermitteln

Sie können die IDs gesammelt mit folgendem Skript abfragen, das die link:https://docs.atlassian.com/software/jira/docs/api/REST/latest[Jira REST-API] nutzt.

Ersetzen Sie dabei `JIRA_USERNAME`, `JIRA_PASSWORD`, `PROJECT_KEY` und `\https://jira.server.your-domain.de` mit den bei Ihnen gültigen Werten.
Den `PROJECT_KEY` können Sie auch ohne administrative Rechte aus der Jira-GUI ermitteln.

.example_script.py
[{file}]
----
#!/usr/bin/env python3

import requests
import sys
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

user = "JIRA_USERNAME"
password = "JIRA_PASSWORD"
project_key = "PROJECT_KEY"
jira_instance = "https://jira.server.your-domain.de"
custom_field_1 = "CMK_HOST_FIELD"
custom_field_2 = "CMK_SVC_FIELD"
custom_field_3 = "CMK_SITE_FIELD" # don't edit if field is not used

def handle_response(user, password, jira_instance, what):
    url = "%s/rest/api/2/%s" % (jira_instance, what)
    sess = requests.Session()
    sess.auth = (user, password)
    response = sess.get(url, verify=False)

    return response

sys.stdout.write("=== IDs for project %s ===\n" % project_key)
infotext = ""
for section, id_name in [ ("Project_ID", "project"),
                          ("Issue", "issuetype"),
                          ("Priority", "priority"),
                          ("Field", "field"),
                        ]:

    json_response = handle_response(user,password,jira_instance,id_name).json()
    if id_name == "project":
        infotext = ""
        for project in json_response:
            if project["key"] == project_key:
                infotext += "%s\n\n" % project.get("id", "Project ID not found")
        if not infotext:
            infotext += "Project ID not found, project name existing?\n\n"
    else:
        types = ""
        for line in json_response:
            if id_name == "field":
                if line["name"].lower() == custom_field_1.lower() or \
                    line["name"].lower() == custom_field_2.lower() or \
                    line["name"].lower() == custom_field_3.lower():
                    types += "%s: %s\n" % (line["name"], line["id"].split("_")[1])
            else:
                types += "%s: %s\n" % (line["name"], line["id"])

        infotext += "=== %s types\n%s\n" % (section, types)

sys.stdout.write(infotext)
----

Die Ausgabe des Skripts sieht dann ungefähr so aus:

[{shell}]
----
=== IDs for project MY_PROJECT ===
10401

=== Issue types
Test case: 10600
Epic: 10000
Task: 10003
Sub-task: 10004
Bug: 10006
Story: 10001
Feedback: 10200
New Feature: 10005
Support: 10500
Improvement: 10002

=== Priority types
Blocker: 1
High: 2
Medium: 3
Low: 4
Lowest: 5
Informational: 10000
Critical impact: 10101
Significant impact: 10102
Limited impact: 10103
Minimal impact: 10104

=== Field types
CMK_HOST_FIELD: 11400
CMK_SVC_FIELD: 11401
CMK_SITE_FIELD: 11403
----


[#jira_ids_gui]
=== Jira-IDs über die GUI ermitteln

Als Alternative zur Skriptausführung können Sie die IDs auch über die Jira-GUI auslesen, wofür Sie sich aber mit einem administrativen Konto in Jira anmelden müssen.
Atlassian, der Hersteller von Jira, hat das Vorgehen am Beispiel der Project ID in einer eigenen link:https://confluence.atlassian.com/jirakb/how-to-get-project-id-from-the-jira-user-interface-827341414.html[Anleitung] beschrieben.

Die IDs der weiteren Felder und Issues types lassen sich ablesen, in dem Sie das jeweilige Element in der Adminoberfläche von Jira editieren. Die ID steht dann im Regelfall als letzter Wert in der Adressleiste Ihres Browsers.


[#config_cmk]
== Konfiguration {CMK}

Wie Sie Benachrichtigungen im Allgemeinen in {CMK} einrichten, haben Sie bereits im Artikel über xref:notifications.html[Benachrichtigungen] erfahren.
Um nun die Jira-Benachrichtigungen zu nutzen, wählen Sie die Benachrichtigungsmethode [.guihint]#JIRA (Enterprise only):#

image::jira_notification_rule.png[alt="Dialog zur Festlegung der Benachrichtigungen an Jira."]

. Im Feld [.guihint]#JIRA URL# tragen Sie die URL Ihrer Jira-Instanz ein, also z.B. `jira.server.your-domain.com`.

. Bei [.guihint]#User Name# und [.guihint]#Password# hinterlegen Sie die Zugangsdaten des Jira-Kontos für den Zugriff.

. Für [.guihint]#Project ID# und [.guihint]#Issue type ID# benötigen Sie die vorher ermittelten IDs in Jira, im Beispiel `10401` für die Project ID und `10006` für den Issue-Typ `Bug`.

. Bei [.guihint]#Host custom field ID#, [.guihint]#Service custom field ID# und (optional) [.guihint]#Site custom field ID# tragen Sie IDs der von Ihnen in Jira angelegten, benutzerdefinierten Felder ein.

. Um in den erzeugten Issues direkt nach {CMK} verlinken zu können, tragen Sie
unter [.guihint]#Monitoring URL# die URL Ihrer {CMK}-Instanz ein, also z.B.: `\https://mycmkserver/mysite`

Weiterhin haben Sie noch die folgenden optionalen Einstellungsmöglichkeiten:

* Mit der [.guihint]#Priority ID# können Sie definieren, mit welcher Priorität die Issues in Jira angelegt werden. Hier können Sie eine der im Skript ausgelesenen `Priority types` eintragen, von `1` bis `5`.

* Die Beschreibungen, die in den Issues für Host- und Service-Probleme erzeugt werden, können Sie über die Optionen [.guihint]#Summary for host notifications# und [.guihint]#Summary for service notifications# ändern.

* Über den Punkt [.guihint]#Label# können Sie definieren, ob Sie bei der Issue-Erzeugung in Jira Label mit übergeben möchten. Wenn Sie Label aktivieren, ohne einen Wert einzutragen, wird `monitoring` gesetzt. +
{CMK} schreibt den Wert des Labels in das Jira-Feld `labels`, was nur gelingt, wenn dieses Feld in Ihrer Jira-Applikation existiert, was z.B. bei _Jira Software_ der Fall ist, nicht aber bei _Jira Service Desk_.

* Wenn Sie bei Benachrichtigungen über eine Zustandsänderung auf {OK} in {CMK} auch eine [.guihint]#Resolution# in den Issue in Jira eintragen lassen wollen, können Sie diese unter [.guihint]#Activate resolution with following resolution transition ID# definieren. +
Um hier die richtige ID ermitteln zu können, benötigen Sie ebenfalls Administrator-Rechte in Jira. Navigieren Sie wieder in den Bereich [.guihint]#Issues# und klicken Sie hier auf [.guihint]#Workflows#. Klicken Sie anschließend in der Zeile des Standard-Workflows des verwendeten Jira-Projekts auf [.guihint]#View#. Sollten Sie nun einen Flowchart sehen, stellen Sie die Anzeige durch einen Klick auf [.guihint]#Text# um. Nun können Sie die gewünschte ID in der Spalte [.guihint]#Transitions (id)# ablesen.

* Mit [.guihint]#Set optional timeout for connections to JIRA# können Sie den Timeout für Verbindungen zu Jira konfigurieren. Wenn Sie hier nichts eintragen, gilt der Standardwert von 10 Sekunden.


[#diagnosis]
== Diagnosemöglichkeiten

Sollten nach der Einrichtung der Benachrichtigungsregel in {CMK} keine Tickets in Jira ankommen, prüfen Sie die zugehörige Log-Datei `~/var/log/notify.log`.
Von Jira kommen hier im Regelfall recht brauchbare Fehlermeldungen zurück, die Ihnen bei der Diagnose tatsächlich helfen können.
Im folgenden listen wir einige Beispiele auf.


[discrete]
=== Fehlermeldung: Unable to create issue, JIRA response code 400, Field 'labels' cannot be set.

Eventuell verfügt Ihr verwendetes Jira-Produkt nicht über Labels.
Schalten Sie in {CMK} die Verwendung von Labels in Ihrer Benachrichtigungsregel einfach ab, indem Sie den Haken vor [.guihint]#Label# wieder entfernen.


[discrete]
=== Fehlermeldung: Unable to create issue, JIRA response code 400, b'project is required'.

Diese Fehlermeldung weist darauf hin, dass die ID nicht korrekt ist, welche Sie in der Benachrichtigungsregel für das betreffende Feld (hier: Project ID) eingetragen haben.


[discrete]
=== Fehlermeldung: Unable to resolve \https://jira.server.your-domain.de/browse/ISSUE-123, JIRA response code 500, b'Internal server error'

Erhalten Sie diese Fehlermeldung, wenn ein Ticket in Jira von {CMK} automatisch geschlossen bzw. in einen anderen Status versetzt werden soll, dann *kann* dies ein Hinweis darauf sein, das die von Ihnen eingetragene Transition ID nicht korrekt ist.
Die Transition ID steht in der Benachrichtigungsregel im Feld [.guihint]#Activate resolution with following resolution transition ID#.
Gleichen Sie diese ID in der Regel erneut mit der Weboberfläche von Jira ab.
