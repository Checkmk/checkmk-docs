// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= Ports
// MA: Wie im Weekly besprochen, wollen wir lieber das Schlagwort am Anfang stehen haben.
:revdate: draft
:title: Von {CMK} genutzte Ports
:description: {CMK} nutzt für die Kommunikation einige Ports, diesen müssen freigegeben sein.

{related-start}
xref:install_packages#[Grundsätzliches zur Installation von {CMK}]
xref:wato#[Die Konfiguration von {CMK}]
xref:wato_monitoringagents#[Monitoring-Agenten]
{related-end}

== Übersicht

Für die Überwachung von Hosts und Services sowie die Kommunikation verschiedener Komponenten einer {CMK}-Installation untereinander verwendet {CMK} in vielen Fällen Datenübertragung über TCP/IP oder UDP/IP.

Diese Liste soll Ihnen einen Überblick verschaffen, welche Ports für welche Funktionalität benötigt werden und die daher in der Firewall-Konfiguration freigeschaltet werden müssen, respektive beim Einsatz von {CMK} in einem Container an diesen gebunden werden müssen.

Die Kommunikationsrichtung ist, wenn nicht anders erwähnt, eingehend zur Komponente in der Kapitelüberschrift.

*Hinweis:* Die Mehrheit der hier aufgeführten Portnummern sind Standardports.
Diese können jederzeit manuell auf andere Ports umgestellt werden. Diejenigen Ports, die nicht standardmässig aktiv sind, sondern stattdessen bei Bedarf freigegeben werden müssen, sind zusätzlich mit einem Vermerk gekennzeichnet.

== Überwachung von Hosts (Agent, SNMP)

[#host_incoming_cmk_outgoing]
=== Überwachter Host

Die folgenden Ports auf überwachten Hosts müssen vom {CMK}-Server aus erreichbar sein.

[cols="10,10,~,~",options="header"]
|===
|Port |Protokoll |Bezeichnung |ergänzende Informationen
|161 |UDP |xref:glossar#snmp[Simple Network Management Protocol (SNMP)]|Via SNMP überwachte Hosts erhalten über diesen Port die Anforderung `GET-REQUEST`
|6556 |TCP |xref:glossar#agent[Agent] |Via {CMK}-Agent überwachte Hosts werden über diesen Port abgefragt, die Kommunikation erfolgt im xref:agent_linux_legacy#[Klartext] oder xref:wato_monitoringagents#[TLS verschlüsselt]
|  (keiner) |ICMP |  Ping | {CMK} überwacht die Erreichbarkeit von Hosts per Ping, ist dies nicht möglich, muss eine Regel xref:hosts_setup#monitoring_agents[_Host Check Command_] verwendet werden
|===

Aktive Checks greifen direkt auf die Ports der überwachten Dienste zu, diese müssen also auch vom {CMK}-Server aus erreichbar sein.
Die Überwachung mit Spezialagenten kann erfordern, andere/weitere Ports zu öffnen.
So benötigt der  xref:datasource_programs#specialagents[Spezialagent] für VMware ESXi (auch NetApp und viele weitere) die Öffnung des Ports 443 auf dem ESXi Server.

[#cmk_incoming_host_outgoing]
=== {CMK}-Server

Die folgenden Ports auf dem {CMK}-Server müssen für die Hosts im Monitoring erreichbar sein.

[cols="10,10,~,~",options="header"]
|===
|Port |Protokoll |Bezeichnung |ergänzende Informationen
|80 |TCP |HTTP (Hypertext Transfer Protocol) |Agent Updater (xref:wato_monitoringagents#bakery[Agentenbäckerei]), Discovery des Agent Controller Ports
|162 |UDP |Simple Network Management Protocol Trap (SNMPTRAP) EC |Empfang von xref:ec#snmp[SNMP-Traps (Event Console)] _(optional aktivierbar)_
|443 |TCP |HTTPS (Hypertext Transfer Protocol over SSL/TLS) |Agent Updater (xref:wato_monitoringagents#bakery[Agentenbäckerei]), Discovery des Agent Controller Ports, mit Transportverschlüsselung
|514 |TCP und UDP |xref:ec#syslogfacility[Syslog (EC)] |Empfang von Syslog-Nachrichten (Event Console) _(optional aktivierbar)_
|6559 |UDP | link:https://checkmk.com/werk/8350[Echtzeitprüfungen^] | Empfang von UDP-Paketen für die Echtzeitprüfungen einzelner Dienste (selten verwendet) _(optional aktivierbar)_
|8000 |TCP |Agent Controller TLS-Registrierung |Wenn mehrere Instanzen auf einem Host laufen, sind eventuell weitere Ports (8001, 8002…) nötig
|===

Die TLS-Registrierung von Agenten nutzt das REST-API auf Port 80/443 zur Discovery des Registrierungs-Ports (meist TCP 8000).
Sind beide nicht erreichbar, kann der Port per xref:agent_linux#networkrequirements[Kommandozeilenoption] angegeben werden.
Falls Port 8000 nicht erreichbar ist, kann auf anderen Hosts im Monitoring eine xref:agent_linux#proxyregister[Registrierung im Auftrag] erfolgen.

== Verteiltes Monitoring

[#remote_incoming_cmk_outgoing]
=== Remote-Instanz

Die folgenden Ports auf Remote-Instanzen müssen durch den als Zentralinstanz arbeitenden {CMK}-Server erreichbar sein.

[cols="10,10,~,~",options="header"]
|===
|Port |Protokoll|Bezeichnung |ergänzende Informationen
|80 |TCP |HTTPS (Hypertext Transfer Protocol) |Synchronisierung im xref:glossar#distributed_monitoring[verteilten Monitoring]
|443 |TCP |HTTPS (Hypertext Transfer Protocol over SSL/TLS) |Synchronisierung im verteilten Monitoring, mit Transportverschlüsselung
// MA: Auch hier wieder: 443 verschüsselt und 80 ist unverschlüsselt.
|6555 |TCP | Notification Spooler | Der xref:distributed_monitoring#notifications[Notification Spooler] dient dem zentralen Versand von Benachrichtigungen (bei Verbindungsaufbau durch die Zentralinstanz) _(optional aktivierbar)_
|6557 |TCP |xref:livestatus#[Livestatus] |Wenn mehrere Instanzen auf einem Host laufen, sind eventuell weitere Ports nötig _(optional aktivierbar)_
|6558 |TCP | |Statusanschluss der Event Console _(optional aktivierbar)_
// MA: Irgendwie wird nicht so richtig klar, dass Port 6557, 6558, 6559, etc. eigentlich nur defaults von uns sind. Das sind keine standardisierten Ports. Man kann auch 34555, 12345 oder 9256 nehmen.
|===

[#cmk_incoming_remote_outgoing]
=== Zentralinstanz

Prinzipiell ist verteiltes Monitoring ohne weitere Hilfsmittel wie Tunneling bereits möglich, wenn die Zentralinstanz eine Verbindung zu den Remote-Instanzen herstellen kann. Die Erreichbarkeit der Zentralinstanz durch Remote-Instanzen ist nur für optionale Funktionalitäten (z.B. Agent Bakery) erforderlich.

Die folgenden Ports auf dem als Zentralinstanz arbeitenden {CMK}-Server müssen durch die zugeordneten Remote-Instanzen erreichbar sein, um die beschriebene Funktionalität bereitzustellen.

[cols="10,10,~,~",options="header"]
|===
|Port |Protokoll |Bezeichnung |ergänzende Informationen
|80 |TCP |HTTP (Hypertext Transfer Protocol) |Für xref:wato_monitoringagents#bakery[Agentenbäckerei] und xref:dcd#[dynamische Host-Konfiguration]
|443 |TCP |HTTPS (Hypertext Transfer Protocol over SSL/TLS) |Für xref:wato_monitoringagents#bakery[Agentenbäckerei] und xref:dcd#[dynamische Host-Konfiguration], mit Transportverschlüsselung
|6555 |TCP | Notification Spooler | Der xref:distributed_monitoring#notifications[Notification Spooler] dient dem zentralen Versand von Benachrichtigungen (bei Verbindungsaufbau durch die Remote-Instanz) _(optional aktivierbar)_
|===

[#loopback]
== Lokale Ports auf dem {CMK}-Server

Die folgenden Ports werden vom {CMK}-Server auf dem lokalen Loopback-Interface genutzt.
Falls Sie auf Ihrem {CMK}-Server eine sehr strenge Firewall-Konfiguration verwenden, müssen diese Ports auf der IP-Adresse 127.0.0.1 (IPv4), respektive ::1 (IPv6) eingehend und ausgehend freigeschaltet werden.

[cols="10,10,~,~",options="header"]
|===
|Port |Protokoll |Bezeichnung |ergänzende Informationen
|5000 |TCP | HTTP Site Apache |Jede {CMK}-Site verfügt über einen eigenen Apache, auf den der extern aufrufbare Apache als Reverse Proxy zugreift, weitere Sites verwenden Port 5001 usw.
|6558 |TCP | |Statusanschluss der Event Console _(optional aktivierbar)_
// MA: Sicher, dass hier ein TCP-Port genutzt wird und nicht ein Unix-Socket? In welchen Fällen wird der TCP-Port genutzt und welchen Vor-/Nachteil hat das für mich?
|===


[#loopbackwindows]
== Lokaler Port auf Windows-Hosts

Der folgende Port wird auf Windows-Hosts im Monitoring zur Kommunikation der beiden Komponenten _Agentenprogramm_ und _Agent Controller_ genutzt.
Falls Sie auf dem überwachten Host eine sehr strenge Firewall-Konfiguration verwenden, muss dieser Port auf der IP-Adresse 127.0.0.1 (IPv4), respektive ::1 (IPv6) eingehend und ausgehend freigeschaltet werden.

[cols="10,10,~,~",options="header"]
|===
|Port |Protokoll |Bezeichnung |ergänzende Informationen
|28250 |TCP | {CMK}-Agent | Das Agentenprogramm öffnet den Port, der für die verschlüsselte Kommunikation mit dem {CMK}-Server zuständige Agentencontroller `cmk-agent-ctl.exe` greift auf ihn zu
|===


[#appliance_cluster]
== {CMK} Appliance Cluster

// These two sentences are copied from appliance_usage.asciidoc – 
// when translating you might copy and paste from there as well
Sie können zwei Checkmk-Appliances ("Knoten") zu einem xref:appliance_usage#_failover_cluster[Failover-Cluster] zusammenschließen.
Dabei werden alle Konfigurationen und Daten zwischen den beiden Geräten abgeglichen.

Die folgenden Ports müssen von beiden Knoten aus ein- und ausgehend freigegeben sein.

[cols="10,10,~,~",options="header"]
|===
|Port |Protokoll |Bezeichnung |ergänzende Informationen
// |80 |TCP |HTTP (Hypertext Transfer Protocol) | Administration über Weboberfläche
// |443 |TCP |HTTPS (Hypertext Transfer Protocol over SSL/TLS) | Administration über Weboberfläche, mit Transportverschlüsselung
|3121 |TCP |Pacemaker | Pacemaker Cluster resource manager
|4321 |UDP |Corosync | Corosync Cluster Engine
|4323 |UDP |Corosync | Corosync Cluster Engine
|7789 |TCP |DRBD | Synchronisierung der DRDB (Distributed Replicated Block Device)
|===

[#misc_ports]
== Ausgehende Ports

Eventuell benötigen Sie, vom {CMK}-Server ausgehend, einige weitere Ports:
// MA: Eigentlich braucht man doch nur Zugang zu anderen Servern und deren eingehenden Ports, oder? Also z.B. dem Port 53 UDP des Nameservers. Ausgehend von der Perspektive, die ketzerische Frage: Sprechen wir dann nicht immer von eingehenden Ports?

* SMTP zur Versendung von Benachrichtigungen vom {CMK}-Server über Mail (je nach Konfiguration des Mailservers Port 25, 465 oder 587 TCP)
* NTP Zeitsynchronisation (Port 123 UDP)
* DNS (Port 53 UDP)
* LDAP Authentifizierung (Port 389 TCP, als LDAPS auf Port 636 TCP)

// Abschließende Gedanken, Grafik wird evaluiert…
// MA: Wenn wir von eingehenden und ausgehenden Ports sprechen wollen, müssen wir eher die Sicht der Firewall einnehmen. Dann ist die Relation aber eine anderen und es geht eher darum, wer mit wem über welche Ports spricht. Eine Grafik ist da eigentlich sehr plastisch und erlaubt es sich besser vorzustellen, wer mit wem und warum über welchen Port spricht.
// MFS: Ich sehe hier keinen Bedarf für eine Grafik. Die Formulierungen "eingehend" und "ausgehend" habe ich versucht, so zu verwenden, dass sie direkt in "incoming" und "outgoing" übersetzbar sind. 
