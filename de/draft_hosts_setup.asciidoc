// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= Verwaltung der Hosts
:revdate: draft
:title: Verwaltung der Hosts - Die zu überwachenden Systeme verwalten
:description: Skalierbarkeit gehört zum Grunddesign von {CMK}. Welche Möglichkeiten es gibt, Hosts leicht zu pflegen und zu strukturieren, erfahren Sie hier. 

{related-start}
xref:wato#[Die Konfiguration von {CMK}]
xref:wato_rules#[Host- und Serviceparameter]
xref:wato_services#[Services verstehen und konfigurieren]
{related-end}

[#intro]
== Einleitung

Die wichtigste Aufgabe beim Einrichten des Monitorings ist das Verwalten der zu überwachenden Systeme -- der xref:glossar#host[_Hosts_.]
Dabei geht es nicht nur darum, dass diese mit den richtigen Stammdaten (z.B. Host-Name, IP-Adresse) eingetragen sind.
Auch Einstellungen für das Monitoring (z.B. Benachrichtigungen, Schwellwerte, usw.) erfordern regelmäßige Pflege.

{CMK} wurde von Anfang an für Umgebungen mit sehr vielen Hosts entworfen.
Um hier die Konfiguration für den Nutzer beherrschbar zu machen, verfolgt {CMK} einen anderen Ansatz als alle anderen Systeme,
die aus dem Ökosystem von Nagios heraus entstanden sind.
Die wichtigsten Prinzipien sind:

* Eine xref:folder[Hierarchie von Ordnern], in denen Hosts abgelegt werden.
* xref:glossar#host_tag[Host-Merkmale] (englisch: _host tags_) und eine darauf aufbauende xref:wato_rules#[regelbasierte] Konfiguration.
* Automatische Erkennung der zu überwachenden xref:wato_services#[Services.]

Generell hat es sich bewährt, sich als Erstes ein Ordnungssystem zu überlegen und dieses danach mit Inhalt zu füllen.
Sie beschäftigen sich also erst mit dem Aufbau der Ordner und ihrer Hierarchie. Danach sortieren Sie die Hosts ein.
// TK: Merker für später: Hier muss auf die hosts_structure verwiesen werden, in denen die Ordnungssysteme (von denen Ordner nur eines sind) vorgestellt werden.

[#folder]
== Ordner und Vererbung

Jeder, der mit Computern arbeitet, kennt das Prinzip von Dateien und Ordnern.
{CMK} verwendet ein analoges Prinzip für die Verwaltung der Hosts, welche quasi die Rolle der Dateien übernehmen.
Da Ordner auch selbst in Ordnern enthalten sein können, ergibt sich eine Baumstruktur.


=== Hierarchie der Ordner

In der Ausgestaltung der Baumstruktur sind Sie völlig frei. Jede Form der Unterscheidung ist möglich.
Drei Kriterien für den Aufbau des Host-Baums sind jedoch verbreitet:

* *Standort* (z.B. München versus Shanghai)
* *Host-Typ* (z.B. Switch versus Loadbalancer)
* *Organisationsstruktur* (z.B. Datenbankgruppe versus Netzwerker)

Natürlich können Sie die Kriterien auch mischen, also z.B. in der ersten Ebene des Baums nach Standort aufteilen und in der zweiten dann nach Host-Typen.

Wenn Sie einfache Dinge lieben, sollten Sie die Hosts nur in die „Blätter“ des Baums packen (auch wenn {CMK} Hosts in mittleren Ordnern erlaubt).
Folgendes Beispiel zeigt eine einfache Baumstruktur nach Host-Typ:
Die Hosts A, B und C sind im Ordner „Servers“ und D, E und F im Ordner „Network“ eingeordnet:

image::wato_folders_step_2.png[alt="Illustration einer Ordnerstruktur mit zwei Unterordnern.",width=430px]


[#inheritance]
=== Vererbung von Attributen

Wenn Sie den Baum geschickt aufbauen, können Sie ihn nutzen, um sinnvoll Attribute zu vererben.
Das ist vor allem bei solchen Attributen nützlich, die bei großen Gruppen von Hosts gleich sind, wie z.B. die SNMP-Community oder Host-Merkmale (_host tags_), mit denen Sie festlegen, ob der Host per {CMK}-Agent oder per SNMP überwacht werden soll.

Folgendes Beispiel zeigt die Vererbung der Merkmale „Criticality“ (mit den Werten `prod` und `test`) und „{CMK} agent“ (mit den Ausprägungen `tcp` und `no-agent`). Das Merkmal `tcp` wird dabei automatisch gesetzt, wenn der {CMK}-Agent und/oder eine API-Integration ausgewählt ist, während `no-agent` die Option der Wahl ist, wenn über SNMP überwacht werden soll.

image::wato_folders_step_4.png[alt="Illustration einer Ordnerstruktur mit zugewiesenen Attributen auf unterschiedlichen Ebenen.",width=500px]

Weiter unten im Baum definierte Attribute haben immer Vorrang.
Direkt beim Host festgelegte Werte überschreiben also alles, was von den Ordnern kommt.
In obigem Beispiel ergeben sich so für den Host A die Merkmale `prod` und `tcp`, für D `prod` und `no-agent` und für den Host F wegen des expliziten Attributs die Werte `test` und `no-agent`.

Ein großer Vorteil dieses Schemas gegenüber dem weit verbreiteten „Copy & Paste“-Ansatz von datenbankorientierten Konfigurationssystemen:
Sie können Attribute auch für solche Hosts festlegen, die erst *in Zukunft* hinzukommen werden.
Das macht die Arbeit für Sie (und Ihre Kollegen) leichter:
Einfach den neuen Host in den richtigen Ordner werfen und alle vordefinierten Attribute stimmen automatisch.

[#create_hosts]
== Hosts im Setup erstellen und bearbeiten

Zur Verwaltung der Ordner und Hosts gelangen Sie mit [.guihint]#Setup > Hosts > Hosts:#

image::hosts_main_directory.png[alt="Ordneransicht 'Main directory' mit mehreren Unterordnern."]

In der Standardansicht sehen Sie hier die (zu Beginn leere) Übersicht der Ordner und darunter tabellarisch die bereits im Monitoring vorhandenen Hosts.
Das Anlegen eines neuen Hosts mit dem Aktionsknopf icon:icon_new[] [.guihint]#Add host#, das icon:icon_clone[alt="Symbol zum Klonen eines Listeneintrags."] Klonen oder das icon:icon_edit[alt="Symbol zum Bearbeiten eines Listeneintrags."] Editieren eines bestehenden Hosts bringt Sie zu der Seite mit den Attributen des Hosts.
Diese sind in mehreren Abschnitten gruppiert, von denen wir hier die Wichtigsten vorstellen.

=== Der Host-Name

Das Feld [.guihint]#Hostname# dient überall innerhalb von {CMK} zur eindeutigen Identifizierung des Hosts.
Wenn möglich sollten Sie den DNS-Namen des Hosts verwenden.
Ist der DNS-Name zu sperrig, können Sie später einen leichter erkennbaren Aliasnamen vergeben.

Änderungen am Host-Namen sind prinzipiell auch später möglich.
Da der Host-Name jedoch an vielen Stellen in {CMK} verwendet wird, sind Änderungen aufwändiger je mehr Monitoring-Daten zum Zeitpunkt der Änderung schon angefallen sind.

image::hosts_new_host_1.png[alt="Dialog mit Eigenschaften eines Hosts: der Host-Name."]

[#dns]
=== Alias und IP-Adresse

Sie können unter [.guihint]#Alias# einen alternativen, beschreibenden Namen für den Host vergeben, welcher an vielen Stellen in der GUI und in Berichten angezeigt wird.
Vergeben Sie keinen Alias, so wird stattdessen der Host-Name verwendet.

image::hosts_new_host_2.png[alt="Dialog mit Eigenschaften eines Hosts: Alias und IP-Adresse."]

Eine IP-Adresse müssen Sie nicht zwangsläufig angeben.
Allerdings kann es selbst bei Verwendung eines auflösbaren Host-Namens sinnvoll sein, diesen noch einmal in das Feld IP-Adresse einzutragen.

Für die Konfiguration der IP-Adresse haben Sie vier Möglichkeiten, die auch den Zeitpunkt der Namensauflösung bestimmen:

[cols="5,65,~", options="header"]
|===
|Möglichkeit |Vorgehen |Wann wird die Namensauflösung durchgeführt?
|1. |Sie geben _keine_ IP-Adresse an. Der Host-Name muss per DNS auflösbar sein. |beim xref:wato#activate_changes[Aktivieren der Änderungen]
|2. |Sie geben eine IPv4-Adresse ein -- in der üblichen Punkt-Notation. |nie
|3. |Sie geben anstelle einer IP-Adresse einen alternativen Host-Namen ein, welcher per DNS auflösbar ist. |beim Ausführen der Checks
|4. |Über den xref:wato_rules#[Regelsatz] [.guihint]#Hosts with dynamic DNS lookup during monitoring# bestimmen Sie Hosts für ein dynamisches DNS. Das Resultat ist analog zu Möglichkeit 3, nur dass für die DNS-Anfrage jetzt das Feld [.guihint]#Hostname# verwendet wird. |beim Ausführen der Checks
|===

Bei der ersten Möglichkeit verwendet {CMK} eine Cache-Datei, um wiederholte DNS-Anfragen während der Aktivierung der Änderungen zu vermeiden.
Dieser Cache ist sehr wichtig für die Beschleunigung des Vorgangs.
Außerdem sorgt er dafür, dass Sie eine geänderte Konfiguration auch dann aktivieren können, wenn das DNS einmal nicht funktioniert.

Der Haken ist, dass {CMK} die Änderung einer IP-Adresse im DNS nicht sofort mitbekommt.
Deswegen gibt es in den Eigenschaften des Hosts (auf der Seite [.guihint]#Properties of host#) den Menüeintrag [.guihint]#Host > Update DNS cache#. Dieser löscht den kompletten DNS-Cache und erzwingt beim nächsten Aktivieren der Änderungen eine neue Auflösung.
Die zugehörige Datei liegt in Ihrer Instanz unter `~/var/check_mk/ipaddresses.cache`.
Das Löschen dieser Datei hat den gleichen Effekt wie die Ausführung von [.guihint]#Update (site) DNS cache#.

{CMK} unterstützt auch Monitoring via IPv6 -- auch im Dualstack.
Die Rangfolge der Auflösung ist hier durch die Betriebssystemeinstellungen (`/etc/gai.conf`) vorgegeben.
In den Feldern [.guihint]#Additional IPv4 addresses# respektive [.guihint]#Additional IPv6 addresses# sind nur IP-Adressen in Punkt- beziehungsweise Doppelpunkt-Notation zugelassen, keine alternativen DNS-Namen.


=== Monitoring-Agenten

Mit den [.guihint]#Monitoring agents# entscheiden Sie, aus welchen Quellen Daten fürs Monitoring verwendet werden.
Die Standardeinstellung sieht die Verwendung des xref:wato_monitoringagents#[{CMK}-Agenten] vor. Darüber hinaus sind zahlreiche alternative oder zusätzliche Überwachungsmöglichkeiten vorgesehen.

Insbesondere das erste Menü entscheidet, welche Daten bei Vorhandensein mehrerer Quellen herangezogen und welche verworfen werden.

image::hosts_new_host_agents.png[alt="Dialog mit Eigenschaften eines Hosts: Monitoring-Agenten."]

Im Menü [.guihint]#{CMK} agent / API integrations# haben Sie folgende Auswahlmöglichkeiten:

[cols="30,~"]
|===
|[.guihint]#API integrations if configured, else {CMK} agent# (Standard) | Monitoring-Daten werden von xref:glossar#api_integrations[Spezialagenten oder per Piggyback] von anderen Hosts geliefert. Sind diese nicht konfiguriert, wird auf die Ausgabe eines Monitoring-Agenten zugegriffen.
|[.guihint]#Configured API integrations and {CMK} agent# | Die Ausgabe eines Monitoring-Agenten wird erwartet. Per Piggyback oder von Spezialagenten gelieferte Daten werden – falls konfiguriert – zusätzlich herangezogen.
|[.guihint]#Configured API integrations, no {CMK} agent#  | Ausschließlich per Piggyback oder von Spezialagenten gelieferte Daten werden für das Monitoring herangezogen.
|[.guihint]#No API integrations, no {CMK} agent# | Ein solcher Host wird agentenlos und nur mit xref:active_checks#[aktiven Checks] oder per xref:glossar#snmp[SNMP] überwacht. Regeln dafür finden Sie u.a. in [.guihint]#Setup > Hosts > HTTP, TCP, Email, ...#. Wenn Sie nicht mindestens einen aktiven Check definieren, erzeugt {CMK} automatisch einen PING-Service. Diese Einstellung finden Sie als Option unter [.guihint]#{CMK} agent / API integrations.#
|===

Mit der folgenden Einstellung [.guihint]#SNMP# konfigurieren Sie die Überwachung per xref:snmp#[SNMP].
Bei Auswahl dieses Feldes erscheint unterhalb von [.guihint]#SNMP# das Feld [.guihint]#SNMP credentials#. Damit können Sie die SNMP-Community festlegen.
Da diese meist für viele Hosts gleich ist, empfiehlt es sich aber eher, diese xref:folder#[Einstellung im Ordner] zu hinterlegen.
Wenn Sie nichts spezifizieren, wird automatisch `public` angenommen.

Das letzte Feld [.guihint]#Piggyback# bezieht sich auf die Verwendung von xref:piggyback#[Piggyback-Daten], welche durch andere Hosts "huckepack" geliefert und als Agentenausgabe diesem Host zugeordnet werden.
Beachten Sie, dass die hier vorgenommene Einstellung zu den Einstellungen des ersten Dropdown-Menüs [.guihint]#Checkmk agent / API integrations# passen muss.
Es kann sonst vorkommen, dass das Ausbleiben erwarteter Monitoring-Daten nicht bemerkt wird.
Aus diesem Grund lautet ein Eintrag explizit [.guihint]#Always use and expect piggyback data#.

Sollen nur von Spezialagenten gelieferte oder per Piggyback empfangene Daten ausgewertet werden, sorgt die Auswahl [.guihint]#Configured API integrations, no Checkmk agent# dafür, dass die beiden Dienste [.guihint]#Check_MK# und [.guihint]#Check_MK Discovery# immer den Zustand {OK} haben.
Bei Hosts ohne eigene IP-Adresse genügt dies jedoch nicht, da kein Ping durchgeführt werden kann.
Sie müssen hier über eine Regel [.guihint]#Setup > Hosts > Host monitoring rules > Host Check Command# bestimmen, wie geprüft werden soll, ob der Host als {UP} bewertet wird. 


[#customattributes]
=== Eigene Attribute (Custom attributes)
 
Über [.guihint]#Eigene Attribute (Custom attributes)# können Sie beliebige Freitextfelder definieren.
In den Standardeinstellungen sind hier [.guihint]#Labels#, [.guihint]#Kritikalität (Criticality)# und [.guihint]#Netzwerksegment (Networking segment)# vorhanden.

image::hosts_new_host_attributes.png[alt="Dialog mit Eigenschaften eines Hosts: Custom attributes."]

Sie können jedoch über [.guihint]#Setup > Hosts > Custom host attributes# eigene Attribute definieren.

image::hosts_setup_custom_attributes.png[alt="Formular zum Erstellen neuer _Custom attributes_."]

Eigene Attribute können beispielsweise ein Vor-Ort-Kontakt, eine Filialnummer, Informationen zur Hardware, Inventarnummern, geographische Koordinaten… sein.
Werte der eigenen Attribute sollten in erster Linie menschlichen Nutzern den Überblick erleichtern, können jedoch auch in Regeln und Filtern eingesetzt werden, wenn beispielsweise xref:draft_host_tags#[Tags oder Labels] zu unflexibel sind.
Eigene Attribute können jedem Abschnitt (Dropdown [.guihint]#Topic#) der Eigenschaften eines Hosts zugeordnet werden.



=== Der Vorstand (Management board)

Die Bezeichnung "Management-Board" steht für separate Steckkarten oder erweiterte BIOS-Funktionalität (Baseboard Management Controller/BMC, Management Engine/ME) zur Überwachung und Verwaltung der Hardware neben dem installierten Betriebssystem.
Derartige Hardware bringt neben Fernsteuerungs- und Fernwartungsfunktionen (bspw. für das Deployment von Betriebssystemen) meist auch eine IPMI- oder SNMP-Schnittstelle mit, über die Gesundheitswerte (Temperaturen und Lüfterdrehzahlen) ausgelesen werden können.
Da Management-Boards über eine eigene IP-Adresse verfügen, würde separates Monitoring die Zuordnung für {CMK}-Nutzer erschweren.
Tragen Sie hier IP-Adresse und Zugriffsmethode ein, wenn der zu überwachende Host über ein Management-Board verfügt.

=== Erstellung / Sperrung (Creation / Locking)

Während die meisten vorher beschriebenen Angaben bearbeitet werden können, stehen im Abschnitt [.guihint]#Creation / Locking# Angaben, die an dieser Stelle nur der Information dienen.

image::hosts_setup_creation_locking.png[alt="Anzeige der Erstell- und Sperrinformationen."]

Zeitpunkt der Erstellung ([.guihint]#Created at#) und Erstellername ([.guihint]#Created by#) werden von Checkmk ermittelt. Für den Erstellernamen gibt es im Wesentlichen drei Möglichkeiten:

* _automation_: der Host wurde durch den xref:wato_user#automation[Automationsbenutzer] erstellt, z.B. auf der Kommandozeile
* _Network scan_: der Host wurde bei einem automatischen xref:folder_network_scan[Netzwerk-Scan] gefunden
* Benutzername, z.B. _cmkadmin_: der Host wurde manuell durch einen Benutzer, zum Beispiel im xref:wato_hosts#create_hosts[Setup], erstellt

Wenn der Host durch den Automationsbenutzer erstellt wurde, ist er durch die zugehörige Instanz gesperrt ([.guihint]#Locked by#). Diese Angabe kann auch für die xref:search[Suche nach Hosts im Setup] genutzt werden. 

Attribute, die hier unter [.guihint]#Gesperrte Attribute (Locked attributes)# stehen, können in den Eigenschaften des Hosts nicht mehr bearbeitet werden.
//SP: Man kann im dcd festlegen, welche Attribute hierfür übergeben und damit blockiert werden. Nach Erweiterung des dcd Artikels hier Link hinzufügen.

=== Speichern und weiter

Beim Erstellen oder Klonen eines Hosts ist nach der Festlegung der Eigenschaften der nächste sinnvolle Schritt [.guihint]#Save & go to service configuration.#
Damit gelangen Sie in die automatische Service-Erkennung, die wir im nächsten Kapitel erklären.

Dagegen bringt Sie [.guihint]#Save & go to connection tests# zum Verbindungstest. Damit können Sie zuerst einmal testen, ob Sie mit den festgelegten Einstellungen überhaupt Daten von dem Host - sei es per Agent oder was auch immer Sie vorher konfiguriert haben - bekommen.
Einzelheiten zum Verbindungstest finden Sie im xref:wato_monitoringagents#diagnosticpage[Artikel über die Monitoring-Agenten].

[#bulk_operations]
=== Bulk-Aktionen

Gelegentlich kommt es vor, dass Sie Dinge wie Löschen, Verschieben, Editieren oder Service-Erkennung für eine ganze Reihe von Hosts gleichzeitig
durchführen möchten.
Dazu gibt es in {CMK} die sogenannten „Bulk-Aktionen“.

Sie finden diese Aktionen auf der Seite eines geöffneten Ordners im Menü [.guihint]#Hosts# im Abschnitt [.guihint]#On selected hosts#:

image::hosts_bulk_actions.png[alt="Menü 'Hosts' mit den Bulk-Aktionen.",width=40%]

Die Aktionen beziehen sich immer auf die Hosts, die direkt im angezeigten Ordner liegen -- und von Ihnen ausgewählt wurden. 
Dazu dienen die Checkboxen in der ersten Spalte der Host-Liste. 
Wenn Sie das Kreuz im Spaltentitel anklicken, werden alle Hosts ausgewählt -- und nach erneutem Klick wieder abgewählt.

Hier einige Hinweise zu den angebotenen Aktionen:

* [.guihint]#Delete hosts# - Löscht die Hosts -- nach Bestätigung der Nachfrage.

* [.guihint]#Edit attributes# - Ändert ein oder mehrere Attribute der Hosts.
Das Attribut wird dadurch in die Hosts explizit eingetragen.
+
*Achtung:* Es ist ein Unterschied, ob ein Host ein Attribut von einem Ordner erbt oder es explizit gesetzt ist, wie durch diese Aktion.
Warum? In letzterem Fall wird eine Änderung der Attribute im Ordner keine Wirkung haben, da Werte, die direkt beim Host festgelegt sind, immer Vorrang haben. Aus diesem Grund gibt es auch die folgende Aktion.

* [.guihint]#Remove explicit attribute settings# - Entfernt von den Hosts explizite Attribute und setzt die Vererbung wieder in Kraft.
Das Gleiche würden Sie erreichen, wenn Sie jeden Host einzeln auswählen und die Checkboxen bei den betroffenen Attributen abwählen würden.
+
Generell ist es eine gute Idee, so wenig explizite Attribute wie möglich zu verwenden.
Wenn alles korrekt über die Ordner vererbt wird, vermeidet dies Fehler und ermöglicht das bequeme Aufnehmen von neuen Hosts.

* [.guihint]#Remove TLS registration# - Entfernt von den Hosts die TLS-Registrierung, z.B. um die Registrierung auf den unverschlüsselten Modus zurückzusetzen.

* [.guihint]#Discover services# - xref:wato_services#bulk_discovery[Service-Erkennung für viele Hosts] gleichzeitig durchführen.

* [.guihint]#Detect network parent hosts# - xref:parents_scan[Parents per Scan] anlegen lassen.

* [.guihint]#Move to other folder# - Verschiebt die Hosts in einen anderen Ordner. Nach Auswahl dieses Eintrags werden Ihnen die bestehenden Ordner als mögliche Ziele angeboten.


[#services]
== Services konfigurieren

Der nächste Schritt nach dem Anlegen eines Hosts ist die Konfiguration der darauf zu überwachenden Services.
Alle Einzelheiten der automatischen Erkennung und Konfiguration der Services erfahren Sie im Artikel xref:wato_services#[Services verstehen und konfigurieren].
Wir schildern hier nur das Wichtigste.

Zur Liste der konfigurierten Services eines Hosts gelangen Sie auf den folgenden Wegen:

* Im Setup über die Host-Liste: +
Wählen Sie [.guihint]#Setup > Hosts > Hosts#. In der Host-Liste klicken Sie auf icon:icon_services[alt="Symbol zur Anzeige der konfigurierten Services."].

* Im Setup über die Eigenschaften eines Hosts: +
Wählen Sie [.guihint]#Setup > Hosts > Hosts#. In der Host-Liste klicken Sie den Host an. Auf der Seite [.guihint]#Properties of host# wählen Sie im Menü [.guihint]#Host > Save & go to service configuration#. Wenn Sie stattdessen im Menü [.guihint]#Host > Service configuration# wählen, kommen Sie ebenfalls zur Service-Liste -- ohne allerdings die Host-Eigenschaften zu speichern.

* Im Monitoring über die Liste der Services: +
Wählen Sie das Menü [.guihint]#Host# und dort im Abschnitt [.guihint]#Setup# den Eintrag [.guihint]#Service configuration#. Ein kleines Zahnradsymbol am Icon zeigt, dass dieser Menüeintrag in eine Seite im Setup führt. So kommen Sie direkt zur Konfiguration der Services.

Egal für welchen Weg Sie sich entscheiden, das Ergebnis sollte ungefähr so aussehen:

image::hosts_services.png[alt="Liste der auf dem Host gefundenen Services."]

Die wichtigsten Aktionen werden Ihnen in der Aktionsleiste angeboten, weitere finden Sie im Menü [.guihint]#Actions.#
Zu den möglichen Aktionen einige Hinweise:

* Der Knopf [.guihint]#Accept all# ist meist die beste Aktion für einen neuen Host. Dies ist auch die richtige Wahl für bestehende Hosts, bei denen Services gefunden wurden, die aktuell nicht überwacht werden. Diese finden Sie im Abschnitt [.guihint]#Undecided services (currently not monitored#). [.guihint]#Accept all# fügt die fehlenden Services hinzu, entfernt verschwundene Services und übernimmt gefundene Host-Labels. 

* Der Knopf [.guihint]#Rescan# sorgt dafür, dass frische, vollständige Daten vom Zielgerät geholt werden.
Um einen schnellen Seitenaufbau zu ermöglichen, arbeitet {CMK} mit gecachten Dateien, die beim normalen Monitoring aufgezeichnet werden.
Bei SNMP-Geräten löst der Knopf daher eine aktive Suche nach neuen Check-Plugins aus und findet eventuell weitere Services.

* Der Knopf [.guihint]#Monitor undecided services# übernimmt die entsprechenden Hosts ins Monitoring, allerdings ohne Übernahme der Host-Labels.

* [.guihint]#Remove vanished services# entfernt nicht mehr vorhandene Dienste.
Das ist bei Services nützlich, die sich bei der Erkennung einen aktuellen Zustand merken (z.B. den aktuellen Zustand der Ports eines Switches oder von Dateisystemen und ihren Mountpoints).

* Nach jeder Änderung ist ein xref:wato#activate_changes[Aktivieren der Änderungen] nötig, um diese wirksam zu machen.

* Alles Weitere erfahren Sie im Artikel über die xref:wato_services#[Service-Konfiguration.]

[#import]
== Hosts über CSV-Daten importieren

Wenn Sie eine größere Anzahl von Hosts auf einmal in {CMK} eintragen möchten, können Sie sich die Arbeit einfacher machen. Importieren Sie die Hosts mithilfe einer CSV-Datei.
Vor allem in zwei Anwendungsfällen ist dies eine Unterstützung:

* Sie wollen Hosts aus einem anderen Monitoring-System übernehmen, welches den Export in strukturierten Datenformaten anbietet. Dann können Sie sich daraus eine CSV-Datei erstellen lassen und für den {CMK}-Import nutzen.

* Sie wollen viele neue Hosts auf einmal anlegen. In diesem Fall schreiben Sie diese in eine Excel-Tabelle. Anschließend importieren Sie diese Liste als CSV-Datei.


{CMK} ist beim Einlesen von CSV-Daten recht flexibel.
Im einfachsten Fall haben Sie schlicht eine Datei, in der in jeder Zeile ein Host-Name steht, der per DNS auflösbar ist:

.import.csv
[{file}]
----
myserver01
myserver02
----

Sie können beim Import auch gleich weitere Attribute übergeben. Eine Übersicht aller möglichen Attribute finden Sie am Ende dieses Abschnitts.
Enthält die CSV-Datei in der ersten Zeile die Namen der Attribute, kann {CMK} diese sogar automatisch zuordnen.
{CMK} ist dabei, so weit wie möglich, tolerant gegenüber einer genauen Schreibweise.
In folgender Datei z.B. kann {CMK} automatisch alle Spalten korrekt zuordnen:

.import.csv
[{file}]
----
hostname;ip address;alias;agent;snmp_ds
lnx17.example.com;192.168.178.48;Webserver;cmk-agent;
lnx18.exmpl.com;192.168.178.55;Backupserver;cmk-agent;
switch47-11;;Switch47;no-agent;snmp-v2
----

Das Vorgehen ist wie folgt:
Wählen oder erstellen Sie einen Ordner, in den der Import erfolgen soll.
Wechseln Sie in diesen Ordner ([.guihint]#Setup > Hosts > ...#) und wählen Sie im Menü [.guihint]#Hosts# den Eintrag icon:icon_bulk_import[alt="Symbol zum Import mehrerer Hosts im CSV-Dateiformat."] [.guihint]#Import hosts via CSV file#.

Auf der folgenden Seite laden Sie mit [.guihint]#Upload CSV File# die Datei hoch. Alternativ wählen Sie [.guihint]#Content of CSV File# und kopieren den Inhalt der Datei in das Textfeld unter der Liste.
Sie können auf den neu importierten Hosts sofort eine automatische Service-Erkennung ausführen lassen. Wählen Sie dafür die Option [.guihint]#Perform automatic service discovery#:

image::hosts_bulk_import_step1.png[alt="Dialog zur Eingabe der CSV-Daten für den Import."]

Per Klick auf icon:icon_save[alt="Symbol zum Sichern der Eingaben."] [.guihint]#Upload# kommen Sie zur nächsten Seite:

image::hosts_bulk_import_step2.png[alt="Dialog zur Kontrolle der CSV-Daten für den Import."]

Die Auswahl eines Trennzeichens ([.guihint]#field delimiter#) ist für dieses Beispiel nicht notwendig. Das Semikolon wurde bereits korrekt interpretiert. {CMK} erkennt gebräuchliche Trennzeichen, wie z.B. Tabulator oder Semikolon automatisch.
Aber wählen Sie hier die Option [.guihint]#Has title line.#, um die Überschriften zu berücksichtigen.
Unter [.guihint]#Preview# sehen Sie die Vorschau der Tabelle.

Falls die automatische Erkennung einer Spalte nicht klappt, können Sie auch manuell das Attribut auswählen, welches zugeordnet werden soll. Nutzen Sie dafür die jeweilige Liste.
Bei den Host-Merkmalen ([.guihint]#Tag#) muss in der CSV-Datei unbedingt die interne ID des Merkmals stehen (hier z.B. `cmk-agent` und nicht der in der GUI sichtbare Titel [.guihint]#{CMK} agent / API integrations#).
Wie die internen IDs der Host-Merkmale genau lauten, können Sie unter [.guihint]#Setup > Hosts > Tags# nachsehen. Die IDs der  vordefinierten ([.guihint]#builtin#) Merkmale finden Sie in der Tabelle im Artikel xref:wato_rules#predefined_tags[Host-Merkmale.]

Starten Sie den Import durch Klick auf icon:icon_save[alt="Symbol zum Sichern der Eingaben."] [.guihint]#Import#.
Falls Sie die Option [.guihint]#Perform automatic service discovery# gewählt haben, landen Sie auf der Seite xref:wato_services#bulk_discovery[Bulk discovery] und sollten diese noch bearbeiten. 
Nach Abschluss der Service-Erkennung fehlt nur noch die gewohnte Aktivierung der Änderungen, dann befinden sich alle neuen Hosts im Monitoring.

=== Übersicht der möglichen Attribute

[cols="~,~"]
|===
|Attribut |Bedeutung

|Hostname |Name des Hosts
|Alias |Aliasbezeichnung des Hosts
|Monitored on site |Instanz, auf der dieser Host überwacht wird
|IPv4 address |IPv4-Adresse
|IPv6 address |IPv6-Adresse
|SNMP community |SNMP-Community
|Tag: Criticality |Merkmal: Kritikalitätszustand
|Tag: Networking Segment |Merkmal: Netzwerksegment
|Tag: Checkmk agent / API integrations |Merkmal: Checkmk-Agent / API-Integration
|Tag: Piggyback |Merkmal: Piggyback
|Tag: SNMP |Merkmal: SNMP
|Tag: IP address family |Merkmal: IP Adressfamilie

|===

[#folder_network_scan]
== Netzwerk-Scan für Ordner durchführen

=== Das Prinzip

{CMK} bietet die Möglichkeit Ihr Netzwerk - oder auch nur Teile davon - automatisch und regelmäßig nach (neuen) Hosts zu durchsuchen.
Dieser Netzwerk-Scan wird auf Ebene der Ordner in der Host-Verwaltung von {CMK} eingerichtet.
Im Hintergrund läuft dafür minütlich ein Cronjob. Dieser prüft alle Ordner dahingehend, ob wieder ein entsprechender Scan ansteht.
Der Cronjob prüft dafür die beiden Einstellungen [.guihint]#Scan interval# und [.guihint]#Time allowed#.
Wenn das Intervall abgelaufen ist und der Server sich innerhalb der für den Scan erlaubten Zeitspanne befindet, wird der Scan gestartet.
Ein neu eingerichteter Netzwerk-Scan würde also innerhalb einer Minute nach dem Klick auf [.guihint]#Save# starten, sofern Sie die [.guihint]#Time allowed# nicht verändert wurde.

Sobald ein Scan startet, passieren im Grunde drei Dinge:

. {CMK} ermittelt zuerst die IP-Adressen, die gescannt werden sollen.
Aus den konfigurierten Adressbereichen werden dabei alle Adressen entfernt, die bereits in der Konfiguration Ihrer Hosts in einem beliebigen Ordner verwendet werden.
. Die ermittelten Adressen werden nun gepingt. Wenn es auf einer Adresse eine Antwort auf diesen Ping gibt, wird versucht einen Host-Namen zu ermitteln.
. Zuletzt werden die Hosts in dem Ordner erzeugt. Ausgelassen werden dabei alle Hosts mit Namen, falls es den Host-Namen bereits in der Instanz gibt.


=== Netzwerk-Scan einrichten

Wie oben bereits angesprochen, wird der Netzwerk-Scan auf Ebene der Ordner eingerichtet.
Öffnen Sie zuerst [.guihint]#Setup > Hosts > Hosts#. Navigieren Sie dann in einen beliebigen Ordner oder verbleiben Sie im Ordner [.guihint]#Main#.
Über das Menü [.guihint]#Folder > Properties# finden Sie den Kasten [.guihint]#Network Scan#.

image::wato_host_network_scan_new.png[alt="Deaktivierter Kasten _Network Scan_ in den Eigenschaften eines Ordners".]

Aktivieren Sie den Netzwerk-Scan über die entsprechende Checkbox.

image::wato_host_network_scan_activated.png[alt="Aktivierter aber unkonfigurierter Abschnitt _Network Scan_".]

Legen Sie anschließend bei [.guihint]#IP ranges to scan# die IP-Adressen fest, welche {CMK} für Sie automatisch überwachen soll.
Für diese Festlegung haben Sie die Wahl zwischen einzelnen IP-Adressen, IP-Bereichen und ganzen Netzwerken.
Wir empfehlen die Adressbereiche nicht zu groß zu wählen, da es ansonsten zu sehr langen Laufzeiten des Netzwerk-Scans kommen kann.
Bei der Wahl eines Netzwerks empfehlen wir die Netzmaske von /21 nicht zu unterschreiten, was 2048 IP-Adressen entspricht.
Die Anzahl von 2048 IP-Adressen sollten Sie auch bei Auswahl über [.guihint]#IP-Range# nicht überschreiten.
Dies kann natürlich nur eine grobe Empfehlung sein, da Ihr (Firmen-)Netzwerk womöglich mit größeren Adressbereichen problemlos klarkommt.

Über die folgende Option [.guihint]#IP ranges to exclude# können Sie Teile aus dem oberhalb konfigurierten Adressbereich ausnehmen.
Die Option bietet sich auch an, um bereits bekannte und überwachte Hosts bzw. IP-Adressen aus dem Netzwerk-Scan auszuschließen.
So können Sie verhindern, dass Dubletten von Hosts angelegt werden.

Mit den folgenden beiden Optionen [.guihint]#Scan interval# und [.guihint]#Time allowed# können Sie festlegen, wie häufig der Scan laufen soll und zu welcher Zeit Sie dies erlauben möchten.

Mit die wichtigste Überlegung bei der Einrichtung des Netzwerk-Scans ist, wie Sie mit gefundenen Hosts umgehen wollen.
Hierbei fällt der Option [.guihint]#Set criticality host tag# eine zentrale Rolle zu:

* Standardmäßig ist [.guihint]#Do not monitor this host# ausgewählt.
Dies legt fest, dass die gefundenen Hosts erst einmal nur in die xref:wato_hosts#[Host-Verwaltung] aufgenommen werden.
Ein Monitoring findet so also erst einmal nicht statt.
Ein Ansatz könnte hier sein, die gefundenen Hosts _manuell_ in Ihre bestehende Host-Struktur zu überführen -- zum Beispiel mithilfe der Funktion [.guihint]#Move this host to another folder.#
Nach dem Verschieben müssen Sie dann noch das Host-Merkmal [.guihint]#Criticality# anpassen oder entfernen.
Bei einer größeren Zahl von Hosts können Sie hierfür die Funktion [.guihint]#Remove explicit attribute settings# in [.guihint]#Setup > Hosts > Hosts# verwenden.

* Wählen Sie stattdessen hier als Host-Merkmal [.guihint]#Productive system# aus, werden die gefundenen Hosts - bei entsprechender Konfiguration mit dem Regelsatz xref:wato_services#discovery_auto[[.guihint]#Periodic service discovery#] - auch direkt ins Monitoring aufgenommen.

Beachten Sie vor Verwendung des Netzwerk-Scans auch die folgenden grundsätzlichen Überlegungen:

* Der Scan läuft über einen Ping ab.
Das bedeutet auch, dass Geräte, die nur über SNMP überwacht werden können, zwar womöglich gefunden, aber nicht automatisch überwacht werden, da die [.guihint]#SNMP credentials# nicht konfiguriert sind.
* Bei neuen Windows-Hosts ist ohne eine entsprechende Konfiguration durch z.B. Gruppenrichtlinien der sogenannte _Echo Request_ in der Firewall deaktiviert.
Solche Windows-Hosts werden dem Scan also nicht antworten und somit auch nicht gefunden werden.
* {CMK} kann Ihnen zu den gefundenen Hosts nur dann saubere Daten liefern, wenn Ihr Netzwerk und Ihre Instanz entsprechend konfiguriert sind.
Widersprüchliche Einträge im DNS und Ihrer {CMK}-Instanz können zu Dubletten führen. Eine Dublette wird angelegt, wenn der Host mit Namen (aber ohne IP-Adresse) in {CMK} bereits eingerichtet ist und nun über seine IP-Adresse unter einem anderen Namen gefunden wird.

[#search]
== Hosts im Setup suchen

Es gibt einen komfortablen Weg, um in der xref:user_interface#search_setup[Konfigurationsumgebung] (im [.guihint]#Setup#-Menü) gezielt nach Hosts zu suchen. Diese hat zwei Vorteile:

* Sie können Hosts nach verschiedenen Kriterien suchen lassen.
* Die gefundenen Hosts werden auf einer Ergebnisseite gelistet, von der aus Sie die weiter oben vorgestellten xref:bulk_operations[Bulk-Aktionen] starten können.

Sie finden diese Suche unter [.guihint]#Setup >  Hosts > Hosts# auf der Seite eines geöffneten Ordners im Menü [.guihint]#Display > Search hosts#.
Die Suche geht immer vom aktuellen Ordner aus, rekursiv in alle Unterordner.
Um global zu suchen, verwenden Sie einfach die Suche vom Hauptordner [.guihint]#Main# aus:

image::hosts_search.png[alt="Dialog zur Suche nach Hosts in einem Ordner."]

Beim Feld [.guihint]#Hostname# wird eine Wortteilsuche (_Infix-Suche_) verwendet -- der eingegebene Text wird, an beliebiger Stelle, im Host-Namen gesucht.
Ferner können Sie die Suche auch über andere Attribute einschränken.
Alle Bedingungen werden mit _UND_ verknüpft.
Das Beispiel aus dem Bild oben sucht also alle Hosts mit [.guihint]#my# im Namen, die gleichzeitig das Merkmal [.guihint]#Test system# haben.

Mit [.guihint]#Submit# starten Sie die Suche.
Die Ergebnisseite verhält sich fast wie ein normaler Ordner.
Das bedeutet, dass Sie hier die Bulk-Aktionen nutzen können, die im Menü [.guihint]#Hosts# im Abschnitt [.guihint]#On selected hosts# angeboten werden, um z.B. alle gefundenen Hosts in einen bestimmten Ordner zu verschieben.

Sie können die Suche auf der Ergebnisseite mit [.guihint]#Refine search# weiter anpassen und verfeinern.

[#rename]
== Hosts umbenennen

Das Umbenennen von Hosts ist auf den ersten Blick eine einfache Sache.
Bei näherem Hinsehen entpuppt es sich aber als komplexe Operation.
Der Grund ist, dass {CMK} den Namen des Hosts als eindeutigen Schlüssel für den Host verwendet -- und das an zahlreichen Stellen.
Dazu gehören Dateinamen, Logdaten, xref:glossar#rule[Regeln], xref:glossar#dashboard[Dashboards], Berichte, xref:glossar#bi[BI-Aggregate] und vieles mehr.
Auch taucht der Host-Name in URLs auf.

Um einen Host an allen Stellen sauber umzubenennen, stellt {CMK} im [.guihint]#Setup# zwei Aktionen bereit.
Sie können entweder einen einzelnen Host umbenennen (in den Eigenschaften des Hosts im Menü [.guihint]#Host > Rename#) oder in einem Ordner mehrere Hosts gleichzeitig (im Menü [.guihint]#Hosts > Rename multiple hosts#).

*Wichtig:* Bei Änderungen an vielen Stellen und für mehrere Hosts kann auch einmal etwas schiefgehen. Vergewissern Sie sich daher, dass Sie über ein aktuelles xref:backup#[Backup] Ihrer Instanz verfügen -- bevor Sie die Umbenennungsaktion starten.

Das [.guihint]#Bulk renaming of hosts# ermöglicht die gleichzeitige, systematische Namensanpassung für mehrere Hosts:

image::hosts_bulk_renaming.png[alt="Dialog zur Umbenennung mehrerer Hosts."]

Im Feld [.guihint]#Hostname matching# geben Sie zunächst optional einen regulären Ausdruck an, der mit dem *Anfang* der Host-Namen übereinstimmt, die Sie umbenennen möchten -- hier im Beispiel also alle Hosts, deren Namen mit `lnx` beginnen.
Dann fügen Sie mit [.guihint]#Add renaming# eine oder mehrere Operationen ein. Diese werden *der Reihe nach* auf die Host-Namen angewendet.
In obigem Beispiel wird von allen Host-Namen zunächst mit [.guihint]#Drop Domain Suffix# alles ab dem ersten `.` abgeschnitten und danach mit [.guihint]#Add Suffix# die Endung `-linuxserver` angefügt.

Es stehen weitere Operationen zur Verfügung, die großteils selbsterklärend sind.
Ansonsten können Sie durch Einblenden der xref:user_interface#inline_help[Inline-Hilfe] weitere Informationen erhalten.

Nach dem Start der Umbenennung mit icon:icon_save[alt="Symbol zum Sichern der Eingaben."] [.guihint]#Bulk rename# und Bestätigung der obligatorischen „Sind Sie sicher...?“ Frage &#8230;

image::hosts_bulk_renaming_sure.png[alt="Dialog zur Bestätigung der Host-Umbenennung."]

&#8230; kann es eine Weile dauern.
Während der Umbenennung wird das Monitoring *komplett gestoppt!*
Dies ist notwendig, um alles in einem konsistenten Zustand zu halten.
Am Ende erhalten Sie eine Übersicht, wo genau Umbenennungen durchgeführt wurden:

image::hosts_bulk_bulk_renaming_result.png[alt="Ergebnis der Host-Umbenennung."]

[#rest_api]
== REST-API-Anfragen für Hosts und Ordner

Viele der Aktionen, die in diesem Artikel beschrieben sind,
können Sie auch mit der {CMK} REST-API ausführen.
Dies ist besonders dann interessant, wenn Sie viele Objekte in Ihrer Instanz zu verwalten haben und
Aktionen automatisieren wollen, z.B. Die Erstellung vieler Hosts,
um die Fehleranfälligkeit oder den manuellen Wartungsaufwand zu reduzieren.

Wenn Kommandozeile, Skripte und APIs nicht Ihre Werkzeuge der 1. Wahl sind,
reicht es an dieser Stelle aus zu wissen, dass es diese API gibt -- und
damit ein mächtiges Hilfsmittel als Alternative zur Verwaltung über die Weboberfläche,
auf das Sie bei Bedarf zurückgreifen können.

Im Artikel zur xref:rest_api#[REST-API] erhalten Sie eine Einführung zur Anwendung dieser API und
die Referenz-Dokumentation finden Sie in der xref:rest_api#rest_api_gui[Weboberfläche] Ihrer {CMK}-Instanz.
Dort können Sie sich mit der Syntax der Anfragen und der Struktur der Antworten vertraut machen.
Auf alle wichtigen Einträge zur REST-API können Sie in der {CMK}-Weboberfläche über die Navigationsleiste im Menü [.guihint]#Help > Developer resources# zugreifen.

Schließlich finden Sie im Artikel zur REST-API xref:rest_api.html#examples[Beispiele],
wie Sie auf der Kommandozeile Aktionen für Hosts und Ordner ausführen können,
z.B. die Ordnerstruktur und die Hosts eines Ordners anzeigen,
einen Host in einem bestimmten Ordner erstellen und vieles mehr.

[#files]
== Dateien und Verzeichnisse

[cols="40,~",options="header"]
|===
|Pfad
|Bedeutung
|`~/etc/check_mk/conf.d/wato/`
|In diesem Verzeichnis wird die Ordnerstruktur im Setup unterhalb des Ordners [.guihint]#Main# durch eine Unterverzeichnisstruktur abgebildet.
Wird in der GUI ein Ordner angelegt, wird im Dateisystem auch ein neues Verzeichnis erstellt.
Dabei sorgt {CMK} dafür, dass die Namen der Verzeichnisse eindeutig sind und nur Zeichen verwendet werden, die im Dateisystem erlaubt sind.
So wird etwa ein Leerzeichen durch einen Unterstrich ersetzt.
|`~/etc/check_mk/conf.d/wato/hosts.mk`
|Konfigurationsdatei für alle Hosts im Ordner [.guihint]#Main.# Für Hosts in Unterordnern von [.guihint]#Main# gibt es jeweils eine gleichnamige Datei in den zugehörigen Unterverzeichnissen.
|`~/etc/check_mk/conf.d/wato/.wato`
|Diese versteckte Datei enthält den Anzeigenamen in der GUI ([.guihint]#Main#) und alle weiteren Eigenschaften dieses Verzeichnisses.
Eine Datei `.wato` existiert in jedem Unterverzeichnis.
Wird ein Ordner in der GUI umbenannt, wird in dieser Datei nur der Parameter `title` für den Anzeigenamen geändert.
Der Name des Verzeichnisses im Dateisystem bleibt unverändert.
|`~/etc/check_mk/(conf.d\|multisite.d)/wato/tags.mk`
| In diesen Dateien befinden sich die Definitionen aller xref:hosttags[Host-Merkmale].
|===
