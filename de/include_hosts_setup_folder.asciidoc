// -*- coding: utf-8 -*-
include::global_attr.adoc[]

[#folder]
== Ordner und Vererbung

Jeder, der mit Computern arbeitet, kennt das Prinzip von Dateien und Ordnern.
{CMK} verwendet ein analoges Prinzip für die Verwaltung der Hosts, welche quasi die Rolle der Dateien übernehmen.
Da Ordner selbst in Ordnern enthalten sein können, ergibt sich eine Baumstruktur.


=== Hierarchie der Ordner

Im Aufbau der Baumstruktur sind Sie völlig frei. Jede Form der Unterscheidung ist möglich.
Drei Kriterien für den Aufbau des Host-Baums sind jedoch verbreitet:

* *Standort* (z.B. München versus Shanghai)
* *Host-Typ* (z.B. Switch versus Loadbalancer)
* *Organisationsstruktur* (z.B. Datenbankgruppe versus Netzwerker)

Natürlich können Sie das auch mischen, also z.B. in der ersten Ebene des Baums nach Standort und in der zweiten dann nach Host-Typen aufteilen.

Wenn Sie einfache Dinge lieben, sollten Sie die Hosts nur in die „Blätter“ des Baums packen (auch wenn {CMK} Hosts in mittleren Ordnern erlaubt).
Folgendes Beispiel zeigt eine einfache Baumstruktur nach Host-Typ:
Die Hosts A, B und C sind im Ordner „Servers“ und D, E und F im Ordner „Network“ eingeordnet:

image::wato_folders_step_2.png[alt="Illustration einer Ordnerstruktur mit zwei Unterordnern.",width=430px]


[#inheritance]
=== Vererbung von Attributen

Wenn Sie den Baum geschickt aufbauen, können Sie ihn nutzen, um sinnvoll Attribute zu vererben.
Das ist vor allem bei solchen Attributen nützlich, die bei großen Gruppen von Hosts gleich sind, wie z.B. die SNMP-Community oder Host-Merkmale (_host tags_), mit denen Sie festlegen, ob der Host per {CMK}-Agent oder per SNMP überwacht werden soll.

Folgendes Beispiel zeigt die Vererbung der Merkmale „Criticality“ (mit den Werten `prod` und `test`) und „{CMK} agent“ (mit den Ausprägungen `tcp` und `no-agent`). Das Merkmal `tcp` wird dabei automatisch gesetzt, wenn der {CMK}-Agent und/oder eine API-Integration ausgewählt ist, während `no-agent` die Option der Wahl ist, wenn über SNMP überwacht werden soll.

image::wato_folders_step_4.png[alt="Illustration einer Ordnerstruktur mit zugewiesenen Attributen auf unterschiedlichen Ebenen.",width=500px]

Weiter unten im Baum definierte Attribute haben immer Vorrang.
Direkt beim Host festgelegte Werte überschreiben also alles, was von den Ordnern kommt.
In obigem Beispiel ergeben sich so für den Host A die Merkmale `prod` und `tcp`, für D `prod` und `no-agent` und für den Host F wegen des expliziten Attributs die Werte `test` und `no-agent`.

Ein großer Vorteil dieses Schemas gegenüber dem weit verbreiteten „Copy & Paste“-Ansatz von datenbankorientierten Konfigurationssystemen:
Sie können Attribute auch für solche Hosts festlegen, die erst *in Zukunft* hinzukommen werden.
Das macht die Arbeit für Sie (oder Ihre Kollegen) leichter:
Einfach den neuen Host in den richtigen Ordner werfen und alle Einstellungen stimmen automatisch.
