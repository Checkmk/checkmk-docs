// -*- coding: utf-8 -*-
// IGNORE 0b1 mitentwickeln Dropdown
include::global_attr.adoc[]
= {CMK} in Grafana integrieren
:revdate: draft
:title: {CMK} in Grafana integrieren
:description: Grafana-Dashboards mit Daten aus dem {CMK}-Monitoring können Sie leicht erstellen mit dem {CMK}-Plugin für Grafana.

{related-start}
xref:monitoring_kubernetes#[Kubernetes überwachen]
xref:monitoring_docker#[Docker überwachen]
{related-end}

[#intro]
== Einleitung

[{image-left}]
image::grafana_logo.png[width=168]

{CMK} verfügt mit seinem integrierten xref:graphing#[Graphing-System] über ein umfangreiches System zum Aufzeichnen und Visualisieren von xref:glossar#metric[Metriken.]
Dennoch kann es sinnvoll sein, link:https://grafana.com/[Grafana^] als externes Graphing-System anzubinden,
z.B. weil Sie Grafana bereits nutzen und die Daten von {CMK} mit Daten aus anderen Systemen in gemeinsamen Dashboards zusammenführen möchten.

Beginnend mit Version {v20} ist es in allen {CMK}-Editionen möglich, {CMK} direkt als Datenquelle in Grafana 8.x anzusprechen und einzelne Metriken oder sogar ganze Graphen, wie sie in {CMK} vordefiniert sind, in Grafana anzeigen zu lassen.
Zusätzlich können Sie dynamisch eigene Graphen erstellen lassen, indem Sie über xref:regexes#[reguläre Ausdrücke] eine Gruppe von Hosts und Services bestimmen, von denen bestimmte Metriken in dem Graphen berücksichtigt werden sollen.

Dieser Artikel beschreibt, wie Sie Ihre Metriken aus {CMK} in Grafana abrufen und darstellen.
Eine ausführliche Anleitung, wie Sie Grafana nutzen und konfigurieren können, finden Sie in der link:https://grafana.com/docs/[Dokumentation bei Grafana Labs^].

Das Grafana-Plugin wird unabhängig von {CMK} entwickelt und in einem eigenen link:https://github.com/Checkmk/grafana-checkmk-datasource[Github-Repository] gepflegt.
Da die Installation des Plugins in Grafana erfolgt, ist eine Auslieferung zusammen mit {CMK} nicht sinnvoll.
// Eine Aufnahme in die offizielle Plugin-Sammlung von Grafana wird gerade durch die Grafana-Maintainer geprüft.
// Ist diese Prüfung abgeschlossen, wird die Installation direkt aus der Grafana-Oberfläche möglich sein.

[#installation]
== Das Plugin in Grafana installieren

Je nach Installationsart Ihres Grafana-Servers und Ihrer {CMK}-Edition kommen verschiedene Methoden der Plugin-Installation in Frage.
Einzige Einschränkung hierbei: Nutzer des Grafana Cloud Angebotes müssen die {CCE} verwenden.
On-Premise-Installationen von Grafana können an alle {CMK}-Editionen angebunden werden.

[#installation_cli]
=== Installation auf der Kommandozeile ({CE}, eigener Grafana-Server)

Diese Installationsart setzt {CCE} voraus.
Bei Betrieb von Grafana auf einem eigenen Server ist die Installation aus dem Marketplace via Kommandozeile möglich:

[{shell-raw}]
----
{c-root} grafana-cli plugins install checkmk-cloud-datasource
----

Starten Sie den Grafana-Serverdienst neu:

[{shell}]
----
{c-root} systemctl restart grafana-server
----

Anschließend ist das Plugin in der Oberfläche von Grafana verfügbar und kann eingerichtet werden.

[#installation_marketplace]
=== Installation aus dem Marketplace ({CE}, Grafana Cloud)

Loggen Sie sich zuerst an der Grafana-Instanz ein, in der Sie die {CMK}-Datenquelle installieren wollen.
Rufen Sie dann die link:https://grafana.com/grafana/plugins/checkmk-cloud-datasource/?tab=installation[Seite der Datenquelle im Marketplace^] auf.
Im Reiter "Installation" setzen Sie ein Häkchen bei der Grafana-Instanz, die das Plugin erhalten soll und klicken anschließend auf den Install-Button.
Bis das Plugin im Web-Interface der Grafana-Installation verfügbar ist, können wenige Minuten vergehen.

[#installation_zip]
=== Installation aus Zip-Archiv (alle Editionen, eigener Grafana-Server)

Auf der link:https://github.com/Checkmk/grafana-checkmk-datasource/releases[Release-Seite des GitHub-Repositories^] finden Sie zwei Varianten des Plugins als Zip-Archive:

* Die oben erwähnte signierte als `checkmk-cloud-datasource-X.Y.Z.zip`, die nur mit der {CE} genutzt werden kann.
* Eine Variante, die das alte Namensschema `tribe29-checkmk-datasource-X.Y.Z.zip` nutzt, für alle Editionen von {CMK} {v21} an aufwärts.

Laden Sie einfach die aktuellste Version als Zip-Datei herunter und kopieren Sie sie, z.B. mit `scp`, auf den Grafana-Server.

[{image-border}]
image::grafana_download_plugin.png[]

Alternativ können Sie die Datei natürlich auch direkt über die Kommandozeile laden.
Beachten Sie, dass Sie dafür die aktuelle Version wissen müssen – im folgenden Beispiel schreiben wir die Version in die Variable `$plugvers`.

[{shell-raw}]
----
{c-root} plugvers='3.1.1'
{c-root} wget https://github.com/Checkmk/grafana-checkmk-datasource/releases/download/v${plugvers}/tribe-29-checkmk-datasource-${plugvers}.zip
----

Entpacken Sie jetzt das Zip-Archiv:

[{shell}]
----
{c-root} unzip tribe-29-checkmk-datasource-${plugvers}.zip
----

Erstellen Sie ein Plugin-Verzeichnis falls dieses noch nicht existiert und machen Sie den Grafana-Nutzer (meist `grafana`) zu dessen Eigentümer:

[{shell}]
----
{c-root} mkdir -p /var/lib/grafana/plugins
{c-root} chown grafana:grafana /var/lib/grafana/plugins
----

Verschieben Sie den entstandenen Ordner in das Plugin-Verzeichnis von Grafana.
Üblicherweise ist das der Pfad `/var/lib/grafana/plugins/`:

[{shell}]
----
{c-root} mv -v tribe-29-checkmk-datasource /var/lib/grafana/plugins/tribe-29-checkmk-datasource
----

Ändern Sie den Eigentümer auf den Grafana-Nutzer:

[{shell}]
----
{c-root} chown -R grafana:grafana /var/lib/grafana/plugins/tribe-29-checkmk-datasource
----

_Installation über das Klonen des Git-Archivs_ (wie es zuvor in diesem Dokument beschrieben wurde) ist nicht mehr möglich.
Falls Sie am Plugin mitentwickeln wollen, lesen Sie bitte die link:https://github.com/Checkmk/grafana-checkmk-datasource/blob/main/DEVELOPMENT.md[Hinweise für Entwickler^].


[#allow_unsigned]
==== Nicht signierte Plugins zulassen

Seit Grafana 8.0 ist es nicht mehr ohne Weiteres möglich, externe Plugins einzubinden, solange sie nicht signiert sind.
Das trifft auch auf das {CMK}-Plugin zu, so dass Sie einen zusätzlichen Schritt benötigen.

Passen Sie dazu die Konfigurationsdatei `/etc/grafana/grafana.ini` im Abschnitt `[plugins]` an.
Ändern Sie hier die Zeile `;allow_loading_unsigned_plugins =` wie folgt.
Achten Sie dabei darauf, das Semikolon am Zeilenanfang zu entfernen:

./etc/grafana/grafana.ini
[source,ini]
----
[plugins]
allow_loading_unsigned_plugins = tribe-29-checkmk-datasource
----

Mit dieser Einstellung fügen Sie eine Ausnahme für dieses eine Plugin hinzu.
Sollten Sie Grafana in einem (Docker-) Container einsetzen, verlinken Sie entweder die angepasste INI-Datei in den Container oder erstellen ein `Volume`, welches Sie auf das Verzeichnis im Container (`/etc/grafana`) mappen.
Es folgt ein Beispiel, wie Sie mit `--mount` die INI-Datei verlinken.
Beachten Sie, dass es sich hier nur um ein Beispiel handelt und wahrscheinlich nicht direkt auf Ihre Umgebung passt:

[{shell}]
----
{c-user} sudo docker run -d pass:q[*--mount type=bind,source=/home/user/grafana/grafana.ini,target=/etc/grafana/grafana.ini*] -p 3000:3000 --name grafana -v grafana-plugins:/var/lib/grafana/plugins -v grafana-db:/var/lib/grafana grafana/grafana
----

[#restart]
==== Neustart des Grafana-Dienstes

Nach Änderung der Konfigurationsdatei, Updates oder der Installation des Plugins starten Sie den Grafana-Serverdienst neu:

[{shell}]
----
{c-root} systemctl restart grafana-server
----

Anschließend ist das Plugin in der Oberfläche von Grafana verfügbar und kann aktiviert und eingerichtet werden.

[#create_user]
== Grafana-Nutzer in Checkmk erstellen

Die Grafana-Anbindung benötigt auf Seite von {CMK} einen Nutzer, der über ausreichende Berechtigungen verfügt.
Normale Gast- oder Monitoring-Nutzer genügen nicht, aus Sicherheitsgründen sollten Sie jedoch keinen Administrator verwenden.
Der einfachste Weg zu einem "passenden" Nutzer ist, die xref:wato_user#roles[Nutzerrolle] des Gastnutzers (`guest`) zu klonen und mit der zusätzlichen Berechtigung [.guihint]#User management# zu versehen.
Falls Sie Ihre Grafana-Nutzerrolle auf einer anderen Rolle basieren lassen, achten Sie darauf, dass die Berechtigung [.guihint]#See all host and services# gesetzt ist.

Ist die Rolle erstellt, legen Sie einen oder mehrere Grafana-Nutzer an.
Der Rolle zugewiesene Rechte können Sie später weiter einschränken, beispielsweise wird kein Zugriff auf BI oder Event Console benötigt.

[#activate]
== Plugin aktivieren und einrichten

Nachdem die notwendigen Dateien installiert wurden, können Sie das Plugin in Grafana aktivieren.
Wechseln Sie dazu in die Konfiguration und wählen den Reiter [.guihint]#Data sources# aus.
Hier können Sie über den Button [.guihint]#Add data source# eine neue Datenquelle hinzufügen:

image::grafana_plugins_overview.png[]

Den Eintrag zu {CMK} finden Sie unten in der Kategorie [.guihint]#Others#:

image::grafana_plugin_cmk.png[]

Die Konfigurationsmaske zu der Datenquelle ist recht einfach gehalten.
Geben Sie hier die URL zu Ihrer Instanz, den Typ Ihrer Edition und einen Benutzer an, der Rechte hat, auf das REST-API zuzugreifen, z.B. den Automationsbenutzer.
*Wichtig*: Wenn Sie {CMK} in einer xref:distributed_monitoring#[verteilten Umgebung] verwenden, dann geben Sie hier die URL zu Ihrer Zentralinstanz an:

image::grafana_plugin_config.png[]

Falls Sie mehrere {CMK}-Instanzen anbinden möchten, können Sie die einzelnen Verbindungen optional mit einem eindeutigen Namen versehen.
Ansonsten lassen Sie den Standard `Checkmk` respektive `Checkmk for Cloud Edition` einfach stehen.

Nachdem Sie die Verbindung Mit dem Button [.guihint]#Save & test# gespeichert haben, steht sie Ihnen als Datenquelle in Grafana zur Verfügung und Sie können Ihre ersten Graphen konfigurieren.

// MA: Mir fehlt hier noch ein Hinweis auf die ausgewählte Edition. Hier wäre
// MA: vielleicht auch ein Link zu den Unterschieden in unserem Graphing nützlich
// MA: (zum Weiterlesen), welche Features das Graphing Checkmk in der RAW-Edition
// MA: unterstützt.
// MFS: Laut https://docs.checkmk.com/master/de/graphing.html ist der Unterschied vor allem: Graphensammlungen und benutzerdefinierte Graphen
// MFS: Wenn Unterscheide zwischen CRE und CEE erklärt werden sollten, dann IMHO eher in der Einleitung.
// MFS: Allerdings halte ich die Motivation schwierig erklärbar: Wollen wir CRE-Nutzer ansprechen, die CEE Features für lau haben wollen oder alle Nutzer, die Flexibilität suchen, die CMK nicht abbilden möchte?
// MA: Die Motivation ist, dass die Nutzung des Grafana-Plugins unterschiedlich ist, je nachdem, welche Edition man nutzt. Wenn jetzt hier fehlt, dass man das einstellen muss, fragt sich der Nutzer ggf., weshalb er es überhaupt einstellen soll.

[#graphs]
== Graphen erstellen

[#emptydash]
=== Ein leeres Dashboard erzeugen

Unter [.guihint]#Home > Dashboards# finden Sie ein Dropdown-Menü, welches mit dem Pluszeichen gekennzeichnet ist.
Klicken Sie dort auf [.guihint]#New dashboard#, um ein neues Dashboard zu erstellen:

image::grafana_new_dashboard.png[]


[#singlemetric]
=== Eine einzelne Metrik eines Hosts anzeigen

Das simpelste Dashboard zeigt einen einzigen Graphen eines Services eines Hosts. 
Dies kann auch die Metrik eines xref:glossar#local_check[lokalen Checks] sein, für den keine vorgefertigten Graphen existieren.
In einem bestehenden oder dem eben erzeugten Dashboard erstellen Sie eine neue Visualisierung.
Wählen Sie hier zuerst [.guihint]#Add visualization# aus:

image::grafana_dashboard_addpanel.png[]

Mit Erstellung der Visualisierung gelangen Sie zur Auswahl der Datenquelle.
Nach der Auswahl von [.guihint]#Checkmk# befinden Sie sich direkt im Editiermodus der Abfrage (_Query_) für das neu erstellten Panel.

Der Zugriff auf zu visualisierende Daten unterscheidet sich etwas zwischen der {CRE} und den kommerziellen Editionen:
In der {RE} arbeiten Sie mit vordefinierten Menüs für Instanz, Host-Name, Service und so weiter.
In den kommerziellen Editionen haben Sie die Möglichkeit, Kaskaden von Filtern zu bestimmen.
Dies erlaubt eine sehr detaillierte Auswahl auch unter Verwendung regulärer Ausdrücke.
Das folgende einfache Beispiel ist so gewählt, dass Sie es mit beiden Editionen durchspielen können.

Wählen Sie zunächst die [.guihint]#Site#, danach filtern Sie nach einem [.guihint]#Hostname# im Monitoring.
Nutzen Sie für den ersten Test einen beliebigen Host, der den Windows- oder Linux-Agenten nutzt.
Als [.guihint]#Service# wählen Sie [.guihint]#Check_MK#.
Setzen Sie den Typ der [.guihint]#Aggregation# auf [.guihint]#Lines#.
Als [.guihint]#Graph type# stehen [.guihint]#Single metric# oder [.guihint]#Template# (Vorlagen) zur Auswahl:
Templates übernehmen Metriken aus {CMK}, welche auch kombinierte Graphen enthalten können.
Unsere Screenshots zeigen hier die [.guihint]#Single metric#, welche die Gesamtausführungszeit des Agenten ([.guihint]#Time spent waiting for Checkmk agent#) enthält.

.Auswahl der Metriken über Filter in den kommerziellen Editionen
image::grafana_dashboard_single_config.png[]

.Auswahl der Metriken über vordefinierte Menüs in der {RE}
image::grafana_dashboard_single_config_cre.png[]

Grafana zeigt das Ergebnis direkt an.
Mit dem Knopf [.guihint]#Apply# können Sie den Graphen anwenden ohne das Dashboard zu sichern.
Mit [.guihint]#Save# werden Sie aufgefordert, einen Titel für das neue [.guihint]#Dashboard# anzugeben und speichern schließlich das neu erstellte Dashboard.

.Neues Dashboard mit wiedererkennbarer Benennung
image::grafana_dashboard_single_view.png[]


[#predefined]
=== Einen vordefinierten Graphen aus {CMK} anzeigen

Die Entwickler von {CMK} haben bereits viele korrespondierende Metriken in gemeinsamen Graphen zusammengefasst, damit Nutzer leichter einen Überblick über verschiedene Aspekte einer einzigen Ressource erhalten.
Sie können die Metriken aus einem solchen vorgefertigten Graphen direkt in Grafana anzeigen lassen.

Die Vorgehensweise entspricht zunächst der im vorherigen Abschnitt erläuterten.
Allerdings wählen Sie zum Abschluss als [.guihint]#Graph type# den Eintrag [.guihint]#Predefined graph# und den zu verwendenden [.guihint]#Predefined graph# des Services.

// Sollten Sie eine Fehlermeldung erhalten, dass die Auswahl kombinierter Metriken mit mehr als 100 Elementen unzulässig ist, schränken Sie mit weiteren Filtern ein.
// Stellen Sie im Zweifel die Filter nach vorne, die eine deutliche Einschränkung der Ergebnismenge versprechen.

image::grafana_dashboard_predefined_config.png[]

Sind Sie mit der getroffenen Auswahl zufrieden, klicken Sie den Button [.guihint]#Apply#.
Der Graph ist nun im gewählten Dashboard verfügbar.

image::grafana_dashboard_predefined_view.png[]


[#complexgraphs]
=== Komplexe Graphen erstellen

Gerade in einem dynamischen Cluster möchte man oft den gesamten Verlauf einer Metrik über alle beteiligten Hosts verfolgen können, ohne einen Graphen jedes Mal anpassen zu müssen, wenn ein neuer Knoten hinzukommt oder wegfällt.
Um dies zu erreichen, haben Sie verschiedene Möglichkeiten, Graphen dynamisch anzupassen.

Die erste Möglichkeit besteht in der Filterung nach [.guihint]#Host Labels# oder [.guihint]#Host Tags# statt der Auswahl einzelner Hosts.
Eine weitere Möglichkeit ist die Verwendung xref:regexes#[regulärer Ausdrücke.]
Sie können reguläre Ausdrücke auf Hosts oder Services anwenden.
Im Beispiel matcht `pass:[filesystem]` alle Services, die `filesystem` enthalten – egal, wie viele Dateisysteme ein Host eingebunden hat.

image::grafana_dashboard_combined_config.png[]

Mit `pass:[filesystem.*nvme]` würden Sie die Auswahl auf alle Dateisysteme auf NVMe-Laufwerken einschränken, ganz gleichen welchen Dateisystemtyp diese nutzen, da der Teil des Strings zwischen `filesystem` und `nvme` beliebig sein kann.

Zusätzlich zu den erweiterten Filtermöglichkeiten bestimmen Sie mit [.guihint]#Aggregation# die Darstellung der Metriken im Graphen und mit [.guihint]#Graph#, welcher Graph als Referenz herangezogen werden soll.
Beachten Sie, dass nur dann Metriken zu einem Host/Service angezeigt werden, wenn dieser auch über den ausgewählten Graphen verfügt.
Der Graph sieht dann zum Beispiel so aus:

image::grafana_dashboard_combined_view.png[]

[#transform]
=== Umbenennung über reguläre Ausdrücke

Im Editiermodus jedes Panels finden Sie einen Reiter [.guihint]#Transform#.
Mit dem hier vorhandenen Unterpunkt [.guihint]#Rename by regex# können
Sie die Bezeichnung von Metriken umsortieren oder nicht benötigte Informationen unterdrücken.
Unser folgendes Beispiel sucht zwei durch Komma und folgendes Leerzeichen getrennte Zeichengruppen, vertauscht diese und stellt explizit `Service` und `Host` vorne an:

image::grafana_series_renaming_regex.png[]

Die Variablen `$1` und `$2` entsprechen hierbei den in der Zeile darüber "eingefangenen" Zeichenketten (_Match-Gruppen_ oder _Capture Groups_).
Grafana erlaubt auch verschachtelte Match-Gruppen.
Einen Überblick über deren Möglichkeiten zeigt der entsprechende Abschnitt im xref:regexes#matchgroups[Artikel zu regulären Ausdrücken].

[#variables]
== Flexiblere Graphen mit Variablen

Über Variablen können Sie Dashboards flexibel mit Graphen versehen.
So haben Sie die Möglichkeit per Dropdown-Auswahl den Host einer bestimmten Metrik zu bestimmen oder Sie nutzen Variablen, um Graphen für mehrere Hosts auf einen Schlag einem Dashboard hinzuzufügen.
Dieser Artikel kann und soll nicht die link:https://grafana.com/docs/grafana/latest/dashboards/variables/[Dokumentation bei Grafana^] ersetzen.
In erster Linie wollen wir einen Überblick der Einsatzmöglichkeiten und einen Einstieg in das Thema vermitteln.

Variablen können aus _Queries_ erstellt werden, in diesem Fall können Sie auf Sites, Hosts oder Dienste filtern.
Alternativ haben Sie die Möglichkeit, _Mengen_ oder _Freitextfelder_ zu definieren, was beliebige Filter ermöglicht.

[#variable_create]
=== Variablen erstellen

Jede Variable ist eine Eigenschaft eines Dashboards.
Sie muss in den Einstellungen des Dashboards erstellt werden und kann dann nur innerhalb dieses Dashboards verwendet werden.
Da _Query_ die umfangreichste Konfiguration erfordert, zeigen wir dessen Verwendung in unserem Beispiel.

Die relevanten Eigenschaften einer Variablen sind ihr Typ und ihr Name, alle anderen Eigenschaften dienen nur der Übersichtlichkeit im Dashboard.
Der Name sollte Unterscheidungen unterstützen, wenn Sie also planen, mehrere Variablen zur Auswahl von Hosts aus verschiedenen Untermengen zu nutzen, verwenden Sie statt `host` wie im Beispiel einen Namen, der auf diese Menge referenziert, zum Beispiel `host_from_linuxservers`.

.Erstellung einer Variable `host` in den Dashboard-Eigenschaften
image::grafana_variable_name.png[]

Achten Sie bei der Wahl der Datenquelle darauf, dass eine {CMK}-Verbindung ausgewählt ist.
Den gewählten Objekttyp können sie weiter einschränken, zum Beispiel mit regulären Ausdrücken.
Verwendete Filter werden auf dem {CMK}-Server ausgewertet.
Dagegen werden die folgenden Felder [.guihint]#Regex# und [.guihint]#Sort# von Grafana ausgewertet.

.Mit Filtern legen Sie fest, welche Werte die Variable annehmen kann
image::grafana_variable_query.png[]

Die beiden Checkboxen für [.guihint]#Selection options# sind von der späteren Verwendung abhängig.
Sie können diese bei Bedarf jederzeit anpassen.
Speichern Sie die Variablen mittels Button [.guihint]#Save dashboard#, wenn Sie alle Einstellungen vorgenommen haben.

[#variable_use]
=== Variablen für Graphen nutzen

Sie können die vergebenen Variablen nun in die dafür passenden Felder eintragen um einen flexiblen Graphen zu erstellen.
Die Verwendung der Variablen ist zudem im Titel des Graphen möglich.

.Der Zugriff auf Variablennamen geschieht wie in einigen Shells über das vorangestellte Dollarsymbol
image::grafana_variable_use.png[]

Im Dashboard wird für jede Variable eine Dropdown-Auswahl angezeigt, über das sie einstellen, für welche Variablenwerte (Hosts, Services...) Sie das Dashboard anzeigen lassen.
Wenn Sie Mehrfachauswahl aktiviert haben, können Sie in den Einstellungen des Panels die Option [.guihint]#Repeat by variable# setzen, um das Panel für jeden ausgewählten Variablenwert anzuzeigen.

.Dropdown-Auswahl der referenzierten Hosts mit Möglichkeit der Mehrfachauswahl
image::grafana_variable_panel.png[]

[#files]
== Dateien und Verzeichnisse

[cols="30,~",options="header"]
|===
|Pfad |Bedeutung
|`/var/lib/grafana/plugins/` |Hier sucht Grafana nach (neuen) Plugins. Jedes Plugin bekommt dabei ein eigenes Unterverzeichnis. Das Plugin von {CMK} legen Sie daher hier ab.
|`/etc/grafana/` |Konfigurationsverzeichnis von Grafana.
|`/etc/grafana/grafana.ini` |Zentrale Konfigurationsdatei von Grafana. Hier legen Sie fest, welche nicht signierten Plugins Sie zulassen.
|===
