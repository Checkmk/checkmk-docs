//encoding: utf-8
include::global_attr.adoc[]
= {CMK} in Grafana integrieren
:revdate: draft
:title: {CMK} in Grafana integrieren
:description: Grafana-Dashboards mit Daten aus dem {CMK}-Monitoring können Sie leicht erstellen mit dem {CMK}-Plugin für Grafana.

{related-start}
xref:views#[Ansichten von Hosts und Services (Views)]
xref:web_api_references#[Befehlsreferenz der HTTP-API]
xref:monitoring_kubernetes#[Kubernetes überwachen]
xref:monitoring_docke#[Docker überwachen]
{related-end}
// TK: Den Link zu Views würde ich rausnehmen


== Einleitung

[{image-left}]
image::grafana_logo.png[width=168]

{CMK} verfügt mit seinem integrierten xref:graphing#[Graphingsystem] über ein umfangreiches System zum Aufzeichnen und Visualisieren von xref:glossar#metric[Metriken.]
Dennoch kann es sinnvoll sein, link:https://grafana.com/[Grafana^] als externes Graphingsystem anzubinden,
z.B. weil Sie Grafana bereits nutzen und die Daten von {CMK} mit Daten aus anderen Systemen in gemeinsamen Dashboards zusammenführen möchten.

Beginnend mit Version {v20} ist es in allen {CMK}-Editionen möglich, {CMK} direkt als Datenquelle in Grafana 8.x anzusprechen und einzelne Metriken oder sogar ganze Graphen, wie sie in {CMK} vordefiniert sind, in Grafana anzeigen zu lassen.
Zusätzlich können Sie dynamisch eigene Graphen erstellen lassen, indem Sie über xref:regexes#[reguläre Ausdrücke] eine Gruppe von Hosts und Services bestimmen, von denen bestimmte Metriken in dem Graphen berücksichtigt werden sollen.

Dieser Artikel beschreibt, wie Sie Ihre Metriken aus {CMK} in Grafana abrufen und darstellen.
Eine ausführliche Anleitung, wie Sie Grafana nutzen und konfigurieren können, finden Sie in der link:https://grafana.com/docs/[Dokumentation bei Grafana Labs^].

Da das Plugin für Grafana parallel zu {CMK} entwickelt wird, wird es nicht mit {CMK} zusammen ausgeliefert.
// TK: Dieser Bezug it unklar. Besser so: nicht gemeinsam (oder unabhängig?) mit {CMK} entwickelt wird.
// TK: Das Plugin fällt vom Himmel. Einen Satz spendieren, dass die Integration als Plugin für Grafana realisiert ist.
Sie können den aktuellen Entwicklungsstand aber direkt über das link:https://github.com/tribe29/grafana-checkmk-datasource[Archiv auf GitHub^] einsehen.

Eine Integration direkt in Grafana befindet sich derzeit noch in der Prüfung.
Sobald das Plugin offiziell aufgenommen wurde, können Sie es auch direkt über die Oberfläche von Grafana installieren.
// TK: Wer prüft und nimmt auf? Grafana


== Das Plugin in Grafana einrichten

=== Plugin installieren

Um das Plugin benutzen zu können, haben Sie zwei Möglichkeiten, es Grafana bekannt zu machen:

* Sie laden die ZIP-Datei aus dem link:https://github.com/tribe29/grafana-checkmk-datasource[GitHub-Repository^] herunter und legen die Inhalte manuell in das Plugin-Verzeichnis von Grafana.
* Sie klonen das GitHub-Projekt direkt in das Plugin-Verzeichnis.


==== Installation der ZIP-Datei

Dieser Variante ist die einfachste und dann zu bevorzugen, wenn Sie `git` auf dem Grafana-Server nicht installiert haben und dies auch nicht können/wollen.
Laden Sie einfach die aktuellste Version als ZIP-Datei herunter und kopieren Sie diese, z.B. mit `scp`, auf den Grafana-Server:

[{image-border}]
image::grafana_download_plugin.png[]

Alternativ können Sie die Datei natürlich auch direkt über die Kommandozeile laden.
Beachten Sie, dass Sie dafür die korrekte Version wissen müssen.
In folgendem Befehl wird der Dateiname, so wie er lokal gespeichert werden soll, mit der `wget`-Option `-O` festgelegt, da die Datei sonst einfach `2.0b2.zip` heißen würde:

[{shell-raw}]
----
{c-root} wget -O grafana-checkmk-datasource-2.0b2.zip https://github.com/tribe29/grafana-checkmk-datasource/archive/refs/tags/2.0b2.zip
----

Entpacken Sie jetzt den Inhalt der Datei in das Plugin-Verzeichnis von Grafana.
Üblicherweise ist das der Pfad `/var/lib/grafana/plugins/`:

[{shell}]
----
{c-root} unzip grafana-checkmk-datasource-2.0b2.zip && \
mv -v grafana-checkmk-datasource-2.0b2 /var/lib/grafana/plugins/grafana-checkmk-datasource
----

Danach können Sie das Plugin in der Oberfläche von Grafana aktivieren und einrichten.


==== Installation über das Klonen des Git-Archivs

Die oben beschriebene Variante hat die wenigsten Voraussetzungen und ist auch für weniger versierte Nutzer leicht umsetzbar.
Falls Sie aber das Plugin direkt aus dem Git-Archiv beziehen, haben Sie dadurch verschiedene Vorteile:

* Die Aktualisierung auf eine neue Version geht schnell über diesen Befehl: `git pull`
* Sie haben die Möglichkeit, direkt den aktuellen Entwicklungsstand aus dem Archiv zu nutzen, wenn Sie ein neues Features testen wollen: `git checkout develop`

Um das Plugin mit Hilfe einer Kopie des Archivs zu nutzen, benötigen Sie zwingend das Programm `git`.
Das Vorgehen ist danach recht einfach.
Klonen Sie das Archiv in das Plugin-Verzeichnis von Grafana:

[{shell-raw}]
----
{c-root} cd /var/lib/grafana/plugins/ && git clone https://github.com/tribe29/grafana-checkmk-datasource.git
Cloning into 'grafana-checkmk-datasource'...
remote: Enumerating objects: 541, done.
remote: Total 541 (delta 0), reused 0 (delta 0), pack-reused 541
Receiving objects: 100% (541/541), 291.55 KiB | 0 bytes/s, done.
Resolving deltas: 100% (374/374), done.
Checking connectivity... done.
----

Da der Master-Branch immer die aktuellste Version abbildet, brauchen Sie nach einer neuen Veröffentlichung lediglich folgenden Befehl auszuführen, um das Plugin auf dem Grafana-Server zu aktualisieren:

[{shell}]
----
{c-root} cd /var/lib/grafana/plugins/grafana-checkmk-datasource && git pull
----

Bei der Verwendung des Development-Trees müssen Sie fehlende Cache-Verzeichnisse etc. anlegen.
Dies erledigt das folgende Kommando:

[{shell}]
----
{c-root} cd /var/lib/grafana/plugins/grafana-checkmk-datasource && yarn run build
----


=== Nicht signierte Plugins zulassen

Seit Grafana 8.0 ist es nicht mehr ohne Weiteres möglich, externe Plugins einzubinden, solange sie nicht signiert sind.
Das trifft auf das noch in der Entwicklung befindliche {CMK}-Plugin zu, so dass Sie einen zusätzlichen Schritt benötigen.

Passen Sie dazu die Konfigurationsdatei `/etc/grafana/grafana.ini` an und ändern Sie die Zeile `;allow_loading_unsigned_plugins =` wie folgt.
Beachten Sie dabei das Semikolon am Zeilenanfang zu entfernen:

./etc/grafana/grafana.ini
[source,ini]
----
allow_loading_unsigned_plugins = tribe-29-checkmk-datasource
----

Mit dieser Einstellung fügen Sie lediglich eine Ausnahme für dieses eine Plugin hinzu.
Sollten Sie Grafana in einem (Docker)-Container einsetzen, verlinken Sie entweder die angepasste INI-Datei in den Container oder erstellen ein `Volume`, welches Sie auf das Verzeichnis im Container (`/etc/grafana`) mappen.
Es folgt ein Beispiel, wie Sie mit `--mount` die INI-Datei verlinken.
Beachten Sie, dass es sich hier nur um ein Beispiel handelt und wahrscheinlich nicht direkt auf Ihre Umgebung passt:

[{shell}]
----
{c-user} sudo docker run -d pass:q[*--mount type=bind,source=/home/user/grafana/grafana.ini,target=/etc/grafana/grafana.ini*] -p 3000:3000 --name grafana -v grafana-plugins:/var/lib/grafana/plugins -v grafana-db:/var/lib/grafana grafana/grafana
----


=== Neustart des Grafana-Dienstes

// MFS: Wann ist der Neustart des Grafana-Servers nötig?
Nach Änderung der Konfigurationsdatei, Updates oder der Installation des Plugins starten Sie den Grafana-Serverdienst neu:

[{shell}]
----
{c-root} service grafana-server restart
----

Anschließend ist das Plugin in der Oberfläche von Grafana verfügbar und kann aktiviert und eingerichtet werden.


=== Plugin aktivieren und einrichten

Nachdem die notwendigen Dateien installiert wurden, können Sie das Plugin in Grafana aktivieren.
Wechseln Sie dazu in die Konfiguration und wählen den Reiter [.guihint]#Data sources# aus.
Hier können Sie über den Knopf [.guihint]#Add data source# eine neue Datenquelle hinzufügen:

image::grafana_plugins_overview.png[]

Den Eintrag zu {CMK} finden Sie unten in der Kategorie [.guihint]#Others#:

image::grafana_plugin_cmk.png[]

Die Konfigurationsmaske zu der Datenquelle ist recht einfach gehalten.
// MFS: Wir sollten hier entweder die exakten benötigten Rechte herausfinden oder darauf hinarbeiten, dass die Abhängigkeit vom Web-API bald entfernt wird.
Geben Sie hier die URL zu Ihrer Instanz und einen Nutzer an, der Rechte hat, auf das Web-API zuzugreifen.
*Wichtig*: Wenn Sie {CMK} in einer xref:distributed_monitoring#[verteilten Umgebung] verwenden, dann geben Sie hier die URL zu Ihrer Zentralinstanz an:

image::grafana_plugin_config.png[]

Falls Sie mehrere {CMK}-Instanzen anbinden möchten, können Sie die einzelnen Verbindungen optional mit einem eindeutigen Namen versehen.
Ansonsten lassen Sie den Standard `tribe-29-checkmk-datasource` einfach stehen.
// TK: {CMK} ersetzt durch tribe-29-checkmk-datasource

Nachdem Sie die Verbindung Mit dem Knopf [.guihint]#Save & test# gespeichert haben, steht sie Ihnen als Datenquelle in Grafana zur Verfügung und Sie können Ihre ersten Graphen konfigurieren.


== Graphen erstellen

=== Ein leeres Dashboard erzeugen

Dashboards werden in Grafana über das Pluszeichen auf der rechten Seite erzeugt.
// TK: rechte Seite? Im Screebshot ist es die linke.
Klicken Sie auf [.guihint]#Dashboard#, um ein neues Dashboard zu erstellen:

image::grafana_new_dashboard.png[width=420]


[#singlemetric]
=== Eine einzelne Metrik eines Hosts anzeigen

Das simpelste Dashboard zeigt einen einzigen Graphen eines Services eines Hosts. 
Dies kann auch die Metrik eines xref:glossar#local_check[lokalen Checks] sein, für den keine vorgefertigten Graphen existieren.
In einem bestehenden oder dem eben erzeugten Dashboard erstellen Sie ein neues [.guihint]#panel#:
Wählen Sie hier zuerst [.guihint]#Add Query# aus:
// TK: Im Screenshot gibt es kein Add Query.

image::grafana_dashboard_addpanel.png[]

Mit Erstellung des Panels gelangen Sie sofort zum Hinzufügen einer neuen Abfrage (_Query_).
Als [.guihint]#Data source# wählen Sie im Dropdown-Menü [.guihint]#tribe-29-checkmk-data-source# aus.
Danach können Sie die Abfrage noch auf eine {CMK}-Instanz ([.guihint]#Site#) begrenzen.
// TK: Im Screenshot gibt es kein [.guihint]#Site#.
Filtern Sie nun weiter nach [.guihint]#Hostname# und [.guihint]#Service#.
Zum Schluss wählen Sie die [.guihint]#Aggregation# (im Beispiel [.guihint]#Lines#), als [.guihint]#Graph type# den Typen [.guihint]#Single metric# und schließlich die anzuzeigende Metrik des Services (bei Services, die mehrere Metriken beinhalten).

image::grafana_dashboard_single_config.png[]

Grafana zeigt das Ergebnis direkt an.
Sobald Sie oben rechts auf das Speichern-Symbol geklickt haben, werden Sie aufgefordert, einen Titel für das [.guihint]#Panel# anzugeben.
// TK: Speichern-Symbol: Soll das ganz rechts dieser Zwitter aus Monitor und Drucker sein? oder doch die gute alte Diskette? die ist aber in der Mitte.
Danach gelangen Sie zurück zum Dashboard:

image::grafana_dashboard_single_view.png[]


[#predefined]
=== Einen vordefinierten Graphen aus {CMK} anzeigen

// MFS: ursprünglich, sieht aus, als wäre magischer Feenstaub in CMK für Zusammenfassung verantwortlich, tatsächlich ist es harte Arbeit der Programmierenden:
// {CMK} fasst bereits automatisch Metriken sinnvoll in Graphen zusammen, um inhaltlich ähnliche Metriken schnell miteinander vergleichen zu können.
// MFS: Ich habe abgeändert zu: 
Entwickler von {CMK} haben die Möglichkeit, korrespondierende Metriken in einem Graphen zusammenzufassen, um so einen Überblick über verschiedene Aspekte einer Ressource zu erhalten.
// TK: Das klingt jetzt aber so, als ob die Entwickler das für sich selber machen und nicht für die User. Evtl. ändern zu: ... einer Ressource zu präsentieren.
Sie können die Metriken aus einem solchen vorgefertigten Graphen direkt in Grafana anzeigen lassen. 

Die Vorgehensweise entspricht zunächst der im vorherigen Abschnitt erläuterten.
Allerdings wählen Sie zum Abschluss als [.guihint]#Graph type# den Eintrag [.guihint]#Template# und das zu verwendende [.guihint]#Template# des Services.

// Sollten Sie eine Fehlermeldung erhalten, dass die Auswahl kombinierter Metriken mit mehr als 100 Elementen unzulässig ist, schränken Sie mit weiteren Filtern ein.
// Stellen Sie im Zweifel die Filter nach vorne, die eine deutliche Einschränkung der Ergebnismenge versprechen.

image::grafana_dashboard_predefined_config.png[]

Sind Sie mit der getroffenen Auswahl zufrieden, klicken Sie das Speichern-Symbol und geben einen Titel für das Panel an.
Der Graph ist nun im gewählten Dashboard verfügbar. 

image::grafana_dashboard_predefined_view.png[]


[#complexgraphs]
=== Komplexe Graphen erstellen

Gerade in einem dynamischen Cluster möchte man oft den gesamten Verlauf einer Metrik über alle beteiligten Hosts verfolgen können, ohne einen Graphen jedes Mal anpassen zu müssen, wenn ein neuer Knoten hinzukommt oder wegfällt.
Sie haben daher verschiedene Möglichkeiten, Graphen dynamisch anzupassen.

Die erste Möglichkeit besteht in der Filterung nach [.guihint]#Host Labels# oder [.guihint]#Host Tags# statt der Auswahl einzelner Hosts.
Eine weitere Möglichkeit ist die Verwendung xref:regexes#[regulärer Ausdrücke.]
Sie können reguläre Ausdrücke auf Hosts oder Services anwenden.
Im Beispiel matcht `pass:[Filesystem.*]` alle Services, die mit `Filesystem` beginnen -- Egal, wieviele Dateisysteme ein Host eingebunden hat.
// TK: Im Screenshot ist filesystem.* zu sehen.

// Sie haben daher zusätzlich die Möglichkeit, Graphen dynamisch mit Hilfe von regulären Ausdrücken zu erstellen. 
////
Stellen Sie den [.guihint]#Mode# in einem neuen [.guihint]#Panel# dafür auf _combined
Graph_ um. Die allgemeinen Einstellungsmöglichkeiten bleiben
dadurch unverändert, aber Sie können nun von einem oder mehreren
Hosts und Services Metriken zusammenfassen. Dabei haben Sie auf alle
xref:regexes#characters[regulären Ausdrücke] Zugriff, die Sie auch sonst von
{CMK} kennen. Beachten Sie, dass auch für die Hosts an dieser
Stelle reguläre Ausdrücke benutzt werden können. Der Ausdruck `pass:[.*]` im
Feld [.guihint]#Service Regex# dient nur der Verdeutlichung; es würde auch ohne funktionieren.
////

image::grafana_dashboard_combined_config.png[]

Zusätzlich zu den erweiterten Filtermöglichkeiten bestimmen Sie mit [.guihint]#Aggregation# die Darstellung der Metriken im Graphen und mit [.guihint]#Graph#, welcher Graph als Referenz herangezogen werden soll.
Beachten Sie, dass nur dann Metriken zu einem Host/Service angezeigt werden, wenn dieser auch über den ausgewählten Graphen verfügt.
Der Graph sieht dann zum Beispiel so aus:

image::grafana_dashboard_combined_view.png[]


== Änderungen gegenüber früheren Versionen
// TK: Hier fehlt, dass es um die Plugin-Versionen geht.
// TK: Ohne die Referenzversionen (von bis), in denen die Änderungen passiert sind, ist das unvollständig.


=== Weggefallene Variablen

Frühere Beta-Versionen haben zugelassen, die angezeigten Metriknamen mittels Variablen zu steuern.
Hier waren folgende Variablen erlaubt:

[cols="25,~",options="header"]
|===
|Variable |Beschreibung 
|`$title` |Der Titel der Metrik, wie er auch in {CMK} dargestellt werden würde.
|`$site` |Die {CMK}-Instanz, auf der der Host und seine Metrik überwacht wird.
|`$host` |Der Host, dem die Metrik zugeordnet ist.
|`$service` |Der Service, dem die Metrik ist.
|===

Diese Funktion wurde mit der 2.0 Reihe des Plugins entfernt, weil sie letztlich Funktionalität dupliziert, die Teil von Grafana ist.


=== Umbenennung über reguläre Ausdrücke

Mit dem Reiter [.guihint]#Transform# und dem hier vorhandenen Unterpunkt [.guihint]#Rename by regex# können Sie die Bezeichnung von Metriken umsortieren oder nicht benötigte Informationen unterdrücken.
Unser folgendes Beispiel benennt `Service` und `Host` explizit und entfernt alle Zeichen vor dem letzten Schrägstrich:

image::grafana_series_renaming_regex.png[]

Die Variablen `$1` bis `$3` entsprechen hierbei den in der Zeile darüber "eingefangenen" Zeichenketten (_Match-Gruppen_ oder _Capture Groups_).
Grafana erlaubt auch verschachtelte Match-Gruppen.
Einen Überblick über deren Möglichkeiten zeigt der entsprechende Abschnitt im xref:regexes#matchgroups[Artikel zu regulären Ausdrücken].

////
Über diese Variablen können Sie auch dann, wenn Sie mehrere Metriken in
einem Graphen anzeigen lassen, sehr einfach die Bezeichnungen anpassen.
Im nachfolgenden Beispiel haben wir im Feld [.guihint]#Label Format# den
folgenden Ausdruck verwendet:

.Label Format
[{file}]
----
$host/$service: $title
----

Das Ergebnis sieht dann so aus:

image::grafana_series_renaming.png[]
////

// MFS: Ebenfalls entfallen
////
=== Automatische Kommentare

Grafana unterstützt das Setzen von Kommentaren in den Graphen. Kommentare markieren dann ein Ereignis direkt in dem Graphen und ermöglichen es so, zu bestimmten Zeitpunkten einen Kommentar zu hinterlassen. Die Statusänderungen eines oder mehrerer Services können Sie sich aber auch automatisch anzeigen lassen, indem Sie eine [.guihint]#Annotation-Query# hinzufügen.

Sie gelangen zu der Konfiguration, indem Sie auf das Zahnradsymbol des Dashboards klicken und dann die Konfiguration für die [.guihint]#Annotations# öffnen:

image::grafana_anno_config1.png[]

Erstellen Sie dort mit dem Knopf [.guihint]#Add Annotation Query# eine neue
Abfrage. Die [.guihint]#Data source# setzen Sie dabei auf {CMK} und vergeben unter
[.guihint]#Name# den Anzeigenamen, wie die Query später in dem Dashboard zu sehen
sein soll. Zusätzlich bestimmen Sie, ob die [.guihint]#Annotation-Query# direkt
aktiviert (_Enabled_) oder unsichtbar (_Hidden_) ist. Auch die
Farbe der Kommentare können Sie hier bei Bedarf festlegen. In diesem Beispiel
haben wir Gelb ausgesucht, da die Abfrage ausschließlich {WARN} anzeigen soll:

image::grafana_anno_config2.png[]

Die eigentliche Abfrage funktioniert dann ähnlich wie beim Erstellen
eines Graphen. Einzig die abzufragende Instanz müssen Sie explizit
bestimmen, da hier keine Abfrage über alle {CMK}-Instanzen möglich
ist. Zuletzt bestimmen Sie dann noch den anzuzeigenden Status von
einem oder mehreren Services:

image::grafana_anno_config3.png[]

*Wichtig*: Schränken Sie die anzuzeigenden Daten so weit wie möglich ein, denn Kommentare werden auf allen kompatiblen Graphen auf dem Dashboard angezeigt. Erstellen Sie im Zweifel lieber mehrere kleine [.guihint]#Annotation-Queries# als eine große Abfrage.

Nachdem Sie die Konfiguration über den Knopf [.guihint]#Add# hinzugefügt und die neuen
Einstellungen des Dashboards gespeichert haben, gehen Sie zurück in Ihr
Dashboard. Falls Sie die Abfrage direkt bei der Einrichtung
aktiviert haben, sehen Sie unter Umständen bereits automatisch erzeugte
Kommentare in Ihren Graphen:

image::grafana_anno_view.png[]
////


== Dateien und Verzeichnisse

[cols="30,~",options="header"]
|===
|Pfad |Bedeutung 
|`/var/lib/grafana/plugins/` |Hier sucht Grafana nach (neuen) Plugins. Jedes Plugin bekommt dabei ein eigenes Unterverzeichnis. Das Plugin von {CMK} legen Sie daher hier ab.
|===
