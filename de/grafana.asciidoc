//encoding: utf-8
include::global_attr.adoc[]
= {CMK} in Grafana integrieren
:revdate: 2022-06-03
:title: {CMK} in Grafana integrieren
:description: Grafana-Dashboards mit Daten aus dem {CMK}-Monitoring können Sie leicht erstellen mit dem {CMK}-Plugin für Grafana.

{related-start}
xref:web_api_references#[Befehlsreferenz der HTTP-API]
xref:monitoring_kubernetes#[Kubernetes überwachen]
xref:monitoring_docker#[Docker überwachen]
{related-end}


== Einleitung

[{image-left}]
image::grafana_logo.png[width=168]

{CMK} verfügt mit seinem integrierten xref:graphing#[Graphingsystem] über ein umfangreiches System zum Aufzeichnen und Visualisieren von xref:glossar#metric[Metriken.]
Dennoch kann es sinnvoll sein, link:https://grafana.com/[Grafana^] als externes Graphingsystem anzubinden,
z.B. weil Sie Grafana bereits nutzen und die Daten von {CMK} mit Daten aus anderen Systemen in gemeinsamen Dashboards zusammenführen möchten.

Beginnend mit Version {v20} ist es in allen {CMK}-Editionen möglich, {CMK} direkt als Datenquelle in Grafana 8.x anzusprechen und einzelne Metriken oder sogar ganze Graphen, wie sie in {CMK} vordefiniert sind, in Grafana anzeigen zu lassen.
Zusätzlich können Sie dynamisch eigene Graphen erstellen lassen, indem Sie über xref:regexes#[reguläre Ausdrücke] eine Gruppe von Hosts und Services bestimmen, von denen bestimmte Metriken in dem Graphen berücksichtigt werden sollen.

Dieser Artikel beschreibt, wie Sie Ihre Metriken aus {CMK} in Grafana abrufen und darstellen.
Eine ausführliche Anleitung, wie Sie Grafana nutzen und konfigurieren können, finden Sie in der link:https://grafana.com/docs/[Dokumentation bei Grafana Labs^].

Das Grafana-Plugin wird unabhängig von {CMK} entwickelt und in einem eigenen link:https://github.com/tribe29/grafana-checkmk-datasource[Github-Repository] gepflegt.
Da die Installation des Plugins in Grafana erfolgt, ist eine Auslieferung zusammen mit {CMK} nicht sinnvoll.
Eine Aufnahme in die ofizielle Plugin-Sammlung von Grafana wird gerade durch die Grafana-Maintainer geprüft.
Ist diese Prüfung abgeschlossen, wird die Installation direkt aus der Grafana-Oberfläche möglich sein.


== Das Plugin in Grafana einrichten

=== Plugin installieren

Um das Plugin benutzen zu können, haben Sie zwei Möglichkeiten, es Grafana bekannt zu machen:

* Sie laden die ZIP-Datei aus dem link:https://github.com/tribe29/grafana-checkmk-datasource[GitHub-Repository^] herunter und legen die Inhalte manuell in das Plugin-Verzeichnis von Grafana.
* Sie klonen das GitHub-Projekt direkt in das Plugin-Verzeichnis.


==== Installation der ZIP-Datei

Dieser Variante ist die einfachste und dann zu bevorzugen, wenn Sie `git` auf dem Grafana-Server nicht installiert haben und dies auch nicht können/wollen.
Laden Sie einfach die aktuellste Version als ZIP-Datei herunter und kopieren Sie diese, z.B. mit `scp`, auf den Grafana-Server:

[{image-border}]
image::grafana_download_plugin.png[]

Alternativ können Sie die Datei natürlich auch direkt über die Kommandozeile laden.
Beachten Sie, dass Sie dafür die korrekte Version wissen müssen.
In folgendem Befehl wird der Dateiname, so wie er lokal gespeichert werden soll, mit der `wget`-Option `-O` festgelegt, da die Datei sonst einfach `2.0b2.zip` heißen würde:

[{shell-raw}]
----
{c-root} wget -O grafana-checkmk-datasource-2.0b2.zip https://github.com/tribe29/grafana-checkmk-datasource/archive/refs/tags/2.0b2.zip
----

Entpacken Sie jetzt das Zip-Archiv:

[{shell}]
----
{c-root} unzip grafana-checkmk-datasource-2.0b2.zip
----

Verschieben Sie den entstandenen Ordner in das Plugin-Verzeichnis von Grafana.
Üblicherweise ist das der Pfad `/var/lib/grafana/plugins/`:

[{shell}]
----
{c-root} mv -v grafana-checkmk-datasource-2.0b2 /var/lib/grafana/plugins/grafana-checkmk-datasource
----

Ändern Sie den Eigentümer auf den Grafana-Nutzer (meist `grafana`):

[{shell}]
----
{c-root} chown -R grafana:grafana /var/lib/grafana/plugins/grafana-checkmk-datasource
----

Anschließend fahren Sie mit der xref:allow_unsigned[Anpassung der Berechtigungen] fort.


==== Installation über das Klonen des Git-Archivs

Die oben beschriebene Variante hat die wenigsten Voraussetzungen und ist auch für weniger versierte Nutzer leicht umsetzbar.
Falls Sie aber das Plugin direkt aus dem Git-Repository beziehen, haben Sie dadurch verschiedene Vorteile:

* Die Aktualisierung auf eine neue Version geht schnell über diesen Befehl: `git pull`
* Sie haben die Möglichkeit, direkt den aktuellen Entwicklungsstand aus dem Archiv zu nutzen, wenn Sie ein neues Features testen wollen: `git checkout develop`

Um das Plugin mit Hilfe einer Kopie des Archivs zu nutzen, benötigen Sie zwingend das Programm `git`.
Das Vorgehen ist danach recht einfach.
Wechseln Sie zunächst in das Plugin-Verzeichnis von Grafana, klonen Sie dort das Git-Repository:

// MA: Ob wir hier voraussetzen können, dass man sich bereits im Pluginverzeichnis
// MA: befindet? Das würde den Befehl einfacher machen. Vor allem auch, weil Du
// MA: Dich danach auf diesen Pfad auch weiterhin beziehst.
// MFS: Schwierig, zwischendurch mal ne Shell zugemacht o.ä. …
// MFS: Auch hier zwei Prompts
// MA: Ich hab eher an so etwas gedacht. Mit einem Hinweis auf den Pfad:
////
----
root@linux:/var/lib/grafana/plugins# git clone https://github.com/tribe29/grafana-checkmk-datasource.git
Cloning into 'grafana-checkmk-datasource'...
remote: Enumerating objects: 541, done.
remote: Total 541 (delta 0), reused 0 (delta 0), pack-reused 541
Receiving objects: 100% (541/541), 291.55 KiB | 0 bytes/s, done.
Resolving deltas: 100% (374/374), done.
Checking connectivity... done.
----
////

[{shell-raw}]
----
{c-root} cd /var/lib/grafana/plugins && git clone https://github.com/tribe29/grafana-checkmk-datasource.git
Cloning into 'grafana-checkmk-datasource'...
remote: Enumerating objects: 541, done.
remote: Total 541 (delta 0), reused 0 (delta 0), pack-reused 541
Receiving objects: 100% (541/541), 291.55 KiB | 0 bytes/s, done.
Resolving deltas: 100% (374/374), done.
Checking connectivity... done.
----

Da der Main-Branch immer die aktuellste Version abbildet, brauchen Sie nach einer neuen Veröffentlichung lediglich folgenden Befehl auszuführen, um das Plugin auf dem Grafana-Server zu aktualisieren:

[{shell}]
----
{c-root} cd /var/lib/grafana/plugins/grafana-checkmk-datasource && git pull
----

Bei der Verwendung des Development Trees fehlen noch einige notwendige Dateien und Verzeichnisse, um das Plugin in Grafana nutzen zu können.
So ist das Plugin in Typescript programmiert, welches nicht direkt interpretiert werden kann, sondern vorher nach JavaScript kompiliert werden muss.
Über folgendes Kommando erledigt das Programm `yarn` das Bauen der fehlenden Dateien für Sie:

[{shell}]
----
{c-root} cd /var/lib/grafana/plugins/grafana-checkmk-datasource && yarn run build
----
// MA: Entweder mit && verknüpfen, oder den Pfad im Prompt hinterlegen, oder zwei prompts rausschreiben. Hauptsache es ist einheitlich über den gesamten Artikel hinweg.

Korrigieren Sie wie oben gezeigt nach jeder Änderung des Plugins die Eigentümerschaft:

[{shell}]
----
{c-root} chown -R grafana:grafana /var/lib/grafana/plugins/grafana-checkmk-datasource
----


[#allow_unsigned]
=== Nicht signierte Plugins zulassen

Seit Grafana 8.0 ist es nicht mehr ohne Weiteres möglich, externe Plugins einzubinden, solange sie nicht signiert sind.
Das trifft auch auf das {CMK}-Plugin zu, so dass Sie einen zusätzlichen Schritt benötigen.

Passen Sie dazu die Konfigurationsdatei `/etc/grafana/grafana.ini` im Abschnitt `[plugins]` an.
Ändern Sie hier die Zeile `;allow_loading_unsigned_plugins =` wie folgt.
Achten Sie dabei darauf, das Semikolon am Zeilenanfang zu entfernen:

./etc/grafana/grafana.ini
[source,ini]
----
[plugins]
allow_loading_unsigned_plugins = tribe-29-checkmk-datasource
----

Mit dieser Einstellung fügen Sie eine Ausnahme für dieses eine Plugin hinzu.
Sollten Sie Grafana in einem (Docker-) Container einsetzen, verlinken Sie entweder die angepasste INI-Datei in den Container oder erstellen ein `Volume`, welches Sie auf das Verzeichnis im Container (`/etc/grafana`) mappen.
Es folgt ein Beispiel, wie Sie mit `--mount` die INI-Datei verlinken.
Beachten Sie, dass es sich hier nur um ein Beispiel handelt und wahrscheinlich nicht direkt auf Ihre Umgebung passt:

[{shell}]
----
{c-user} sudo docker run -d pass:q[*--mount type=bind,source=/home/user/grafana/grafana.ini,target=/etc/grafana/grafana.ini*] -p 3000:3000 --name grafana -v grafana-plugins:/var/lib/grafana/plugins -v grafana-db:/var/lib/grafana grafana/grafana
----


=== Neustart des Grafana-Dienstes

Nach Änderung der Konfigurationsdatei, Updates oder der Installation des Plugins starten Sie den Grafana-Serverdienst neu:

[{shell}]
----
{c-root} systemctl restart grafana-server
----

Anschließend ist das Plugin in der Oberfläche von Grafana verfügbar und kann aktiviert und eingerichtet werden.


=== Plugin aktivieren und einrichten

Nachdem die notwendigen Dateien installiert wurden, können Sie das Plugin in Grafana aktivieren.
Wechseln Sie dazu in die Konfiguration und wählen den Reiter [.guihint]#Data sources# aus.
Hier können Sie über den Button [.guihint]#Add data source# eine neue Datenquelle hinzufügen:

image::grafana_plugins_overview.png[]

Den Eintrag zu {CMK} finden Sie unten in der Kategorie [.guihint]#Others#:

image::grafana_plugin_cmk.png[]

Die Konfigurationsmaske zu der Datenquelle ist recht einfach gehalten.
// MFS: Wir sollten hier entweder die exakten benötigten Rechte herausfinden oder darauf hinarbeiten, dass die Abhängigkeit vom Web-API bald entfernt wird.
// MA: Zustimmung unabhängig von der genutzten API.
Geben Sie hier die URL zu Ihrer Instanz, den Typ Ihrer Edition und einen Automationsbenutzer an, der Rechte hat, auf das Web-API zuzugreifen.
// TK: Müsste es hier nicht heissen: ... und einen Benutzer an, der Rechte hat, auf das Web-API zuzugreifen, z.B. den Automationsbenutzer.
*Wichtig*: Wenn Sie {CMK} in einer xref:distributed_monitoring#[verteilten Umgebung] verwenden, dann geben Sie hier die URL zu Ihrer Zentralinstanz an:

image::grafana_plugin_config.png[]

Falls Sie mehrere {CMK}-Instanzen anbinden möchten, können Sie die einzelnen Verbindungen optional mit einem eindeutigen Namen versehen.
Ansonsten lassen Sie den Standard `tribe-29-checkmk-datasource` einfach stehen.

Nachdem Sie die Verbindung Mit dem Button [.guihint]#Save & test# gespeichert haben, steht sie Ihnen als Datenquelle in Grafana zur Verfügung und Sie können Ihre ersten Graphen konfigurieren.

// MA: Mir fehlt hier noch ein Hinweis auf die ausgewählte Edition. Hier wäre
// MA: vielleicht auch ein Link zu den Unterschieden in unserem Graphing nützlich
// MA: (zum Weiterlesen), welche Features das Graphing Checkmk in der RAW-Edition
// MA: unterstützt.
// MFS: Laut https://docs.checkmk.com/master/de/graphing.html ist der Unterschied vor allem: Graphensammlungen und benutzerdefinierte Graphen
// MFS: Wenn Unterscheide zwischen CRE und CEE erklärt werden sollten, dann IMHO eher in der Einleitung.
// MFS: Allerdings halte ich die Motivation schwierig erklärbar: Wollen wir CRE-Nutzer ansprechen, die CEE Features für lau haben wollen oder alle Nutzer, die Flexibilität suchen, die CMK nicht abbilden möchte?
// MA: Die Motivation ist, dass die Nutzung des Grafana-Plugins unterschiedlich ist, je nachdem, welche Edition man nutzt. Wenn jetzt hier fehlt, dass man das einstellen muss, fragt sich der Nutzer ggf., weshalb er es überhaupt einstellen soll.

== Graphen erstellen

=== Ein leeres Dashboard erzeugen

Dashboards werden in Grafana über das Pluszeichen auf der linken Seite erzeugt.
Klicken Sie auf [.guihint]#Dashboard#, um ein neues Dashboard zu erstellen:

image::grafana_new_dashboard.png[width=420]


[#singlemetric]
=== Eine einzelne Metrik eines Hosts anzeigen

Das simpelste Dashboard zeigt einen einzigen Graphen eines Services eines Hosts. 
Dies kann auch die Metrik eines xref:glossar#local_check[lokalen Checks] sein, für den keine vorgefertigten Graphen existieren.
In einem bestehenden oder dem eben erzeugten Dashboard erstellen Sie ein neues [.guihint]#panel#.
Wählen Sie hier zuerst [.guihint]#Add Panel# aus:

image::grafana_dashboard_addpanel.png[]

Mit Erstellung des Panels gelangen Sie sofort zum Hinzufügen einer neuen Abfrage (_Query_).
Als [.guihint]#Data source# wählen Sie im Menü [.guihint]#tribe-29-checkmk-data-source# aus.

Der Zugriff auf zu visualisierende Daten unterscheidet sich etwas zwischen {CRE} und {CEE}:
In der {RE} arbeiten Sie mit vordefinierten Menüs für Instanz, Host-Name, Sevice und so weiter.
In den {EE} haben Sie die Möglichkeit, Kaskaden von Filtern zu bestimmen.
Dies erlaubt eine sehr detaillierte Auswahl auch unter Verwendung regulärer Ausdrücke.
Das folgende einfache Beispiel ist so gewählt, dass Sie es mit beiden Editionen durchspielen können.

Wählen Sie zunächst die [.guihint]#Site#, danach filtern Sie nach einem [.guihint]#Hostname# im Monitoring.
Nutzen Sie für den ersten Test einen beliebigen Host, der den Windows- oder Linux-Agenten nutzt.
Als [.guihint]#Service# wählen Sie [.guihint]#Check_MK#.
Setzen Sie den Typ der [.guihint]#Aggregation# auf [.guihint]#Lines#.
Als [.guihint]#Graph type# stehen [.guihint]#Single metric# oder [.guihint]#Template# (Vorlagen) zur Auswahl:
Templates übernehmen Metriken aus {CMK}, welche auch kombinierte Graphen enthalten können.
Unsere Screenshots zeigen hier die [.guihint]#Single metric#, welche die Gesamtausführungszeit des Agenten ([.guihint]#Time spent waiting for Checkmk agent#) enthält.

.Auswahl der Metriken über Filter in den {CEE}
image::grafana_dashboard_single_config.png[]

.Auswahl der Metriken über vordefinierte Menüs in der {CRE}
image::grafana_dashboard_single_config_cre.png[]

Grafana zeigt das Ergebnis direkt an.
Klicken Sie zunächst auf [.guihint]#Apply#, um den Graphen zu sichern.
Dies bringt Sie zurück zum Dashboard, wo Sie oben rechts auf das Diskettensymbol ([.guihint]#Save dashboard#) klicken, um es zu speichern.
Hier werden Sie aufgefordert, einen Titel für das neue [.guihint]#Dashboard# anzugeben.
// TK: Speichern-Symbol: Soll das ganz rechts dieser Zwitter aus Monitor und Drucker sein? oder doch die gute alte Diskette? die ist aber in der Mitte.
// MA: An der Stelle gibt es kein Speichern-Symbol, sondern den "Apply"-Button. Aber man ist nie gezwungen, dem Panel einen Titel zu geben. Lediglich bei einem Dashboard ist das verpflichtend.
// MFS: Save speichert das gesamte Dashboard, Apply nimmt Änderungen des Panels vor. Dazu gibt es noch das Diskettensymbol und je nach Größe des Viewports komplett andere Seitenlayouts. Ich glaube, wir finden gerade Inkonsistenzen in der UX von Grafana.
// MA: Man sieht den Button aber nirgendwo in einem Screenshot. Daher die Verwirrung, zumindest bei mir, was genau gemeint ist.
// Danach gelangen Sie zurück zum Dashboard:

.Neues Dashboard mit wiedererkennbarer Benennung
image::grafana_dashboard_single_view.png[]


[#predefined]
=== Einen vordefinierten Graphen aus {CMK} anzeigen

Die Entwickler von {CMK} haben bereits viele korrespondierende Metriken in gemeinsamen Graphen zusammengefasst, damit Nutzer leichter einen Überblick über verschiedene Aspekte einer einzigen Ressource erhalten.
Sie können die Metriken aus einem solchen vorgefertigten Graphen direkt in Grafana anzeigen lassen.

Die Vorgehensweise entspricht zunächst der im vorherigen Abschnitt erläuterten.
Allerdings wählen Sie zum Abschluss als [.guihint]#Graph type# den Eintrag [.guihint]#Template# und das zu verwendende [.guihint]#Template# des Services.

// Sollten Sie eine Fehlermeldung erhalten, dass die Auswahl kombinierter Metriken mit mehr als 100 Elementen unzulässig ist, schränken Sie mit weiteren Filtern ein.
// Stellen Sie im Zweifel die Filter nach vorne, die eine deutliche Einschränkung der Ergebnismenge versprechen.

image::grafana_dashboard_predefined_config.png[]

Sind Sie mit der getroffenen Auswahl zufrieden, klicken Sie den Button [.guihint]#Apply#.
Der Graph ist nun im gewählten Dashboard verfügbar.

image::grafana_dashboard_predefined_view.png[]


[#complexgraphs]
=== Komplexe Graphen erstellen

Gerade in einem dynamischen Cluster möchte man oft den gesamten Verlauf einer Metrik über alle beteiligten Hosts verfolgen können, ohne einen Graphen jedes Mal anpassen zu müssen, wenn ein neuer Knoten hinzukommt oder wegfällt.
Um dies zu erreichen, haben Sie verschiedene Möglichkeiten, Graphen dynamisch anzupassen.

Die erste Möglichkeit besteht in der Filterung nach [.guihint]#Host Labels# oder [.guihint]#Host Tags# statt der Auswahl einzelner Hosts.
Eine weitere Möglichkeit ist die Verwendung xref:regexes#[regulärer Ausdrücke.]
Sie können reguläre Ausdrücke auf Hosts oder Services anwenden.
Im Beispiel matcht `pass:[filesystem]` alle Services, die `filesystem` enthalten -- egal, wieviele Dateisysteme ein Host eingebunden hat.

image::grafana_dashboard_combined_config.png[]

Mit `pass:[filesystem.*nvme]` würden Sie die Auswahl auf alle Dateisysteme auf NVME-Laufwerken einschränken, ganz gleichen welchen Dateisystemtyp diese nutzen, da der Teil des Strings zwischen `filesystem` und `nvme` beliebig sein kann.

Zusätzlich zu den erweiterten Filtermöglichkeiten bestimmen Sie mit [.guihint]#Aggregation# die Darstellung der Metriken im Graphen und mit [.guihint]#Graph#, welcher Graph als Referenz herangezogen werden soll.
Beachten Sie, dass nur dann Metriken zu einem Host/Service angezeigt werden, wenn dieser auch über den ausgewählten Graphen verfügt.
Der Graph sieht dann zum Beispiel so aus:

image::grafana_dashboard_combined_view.png[]

== Änderungen gegenüber früheren Versionen

=== Weggefallene Variablen

Versionen des Plugins vor 2.0b1 haben zugelassen, die angezeigten Metriknamen mittels Variablen zu steuern.
Hier waren folgende Variablen erlaubt:

[cols="25,~",options="header"]
|===
|Variable |Beschreibung
|`$title` |Der Titel der Metrik, wie er auch in {CMK} dargestellt werden würde.
|`$site` |Die {CMK}-Instanz, auf der der Host und seine Metrik überwacht wird.
|`$host` |Der Host, dem die Metrik zugeordnet ist.
|`$service` |Der Service, dem die zugeordnet Metrik ist.
|===

Diese Funktion wurde mit der Version 2.0b1 des Grafana-Plugins entfernt, weil sie letztlich Funktionalität duplizierte, die inzwischen Teil von Grafana ist.


=== Umbenennung über reguläre Ausdrücke

Im Editiermodus jedes Panels finden Sie einen Reiter [.guihint]#Transform#.
Mit dem hier vorhandenen Unterpunkt [.guihint]#Rename by regex# können
Sie die Bezeichnung von Metriken umsortieren oder nicht benötigte Informationen unterdrücken.
Unser folgendes Beispiel sucht zwei durch Komma und folgendes Leerzeichen getrennte Zeichengruppen, vertauscht diese und stellt explizit: `Service` und `Host` vorne an:

image::grafana_series_renaming_regex.png[]

Die Variablen `$1` und `$2` entsprechen hierbei den in der Zeile darüber "eingefangenen" Zeichenketten (_Match-Gruppen_ oder _Capture Groups_).
Grafana erlaubt auch verschachtelte Match-Gruppen.
Einen Überblick über deren Möglichkeiten zeigt der entsprechende Abschnitt im xref:regexes#matchgroups[Artikel zu regulären Ausdrücken].

== Dateien und Verzeichnisse

[cols="30,~",options="header"]
|===
|Pfad |Bedeutung
|`/var/lib/grafana/plugins/` |Hier sucht Grafana nach (neuen) Plugins. Jedes Plugin bekommt dabei ein eigenes Unterverzeichnis. Das Plugin von {CMK} legen Sie daher hier ab.
|`/etc/grafana/` |Konfigurationsverzeichnis von Grafana.
|`/etc/grafana/grafana.ini` |Zentrale Konfigurationsdatei von Grafana. Hier legen Sie fest, welche unsignierten Plugins Sie zulassen.
|===
