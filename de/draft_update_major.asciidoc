include::global_attr.adoc[]
= Update auf Version {v21}
:revdate: draft
:title: Update auf Version {v21}
:description: Was es beim Update von {CMK} Version 2.0.0 auf 2.1.0 zu beachten gibt, erfahren Sie in diesem Artikel.

{related-start}
xref:update#[Updates und Upgrades]
xref:install_packages#[Grundsätzliches zur Installation von {CMK}]
{related-end}


[#intro]
== Einleitung

In diesem Artikel finden Sie die wichtigsten Themen, die für das Update Ihrer {CMK}-Version {v20} auf {v21} relevant sind.

Wir empfehlen Ihnen, vor dem Update den kompletten Artikel durchzulesen, damit Sie genau wissen, was auf Sie zukommt: vor, während und nach dem Update.


[#prep]
== Vorbereitungen

In diesem Kapitel erhalten Sie die Übersicht der Themen, um die Sie sich kümmern sollten, bevor Sie das Update durchführen.
Nicht jedes der Themen wird wahrscheinlich für Sie relevant sein:
Bei einem solchen können Sie intern einen Haken setzen und sich gleich das nächste Thema vornehmen.


// {v20} Thema - auch gültig für {v21}
[#backup]
=== Backup

Wie vor dem Update jeder produktiven Software sollten Sie auch vor dem Update von {CMK} die Aktualität Ihrer Backups prüfen.

*Betrifft Sie das?* Ja.

*Was müssen Sie tun?*  Wenn Sie Ihre Backups automatisiert über [.guihint]#Setup > Maintenance > Backups# erstellen, prüfen Sie dort, ob die letzten Backup-Aufträge fehlerfrei durchgelaufen sind.

Weitere Informationen finden Sie in den Artikeln zu xref:backup#[Backups] und zum Thema xref:omd_basics#backup[Instanzen sichern und wiederherstellen.]


// {v20} Thema - auch gültig für {v21}
// TK: Muss umgeschrieben werden: Falls Distro-Update notwendig sein sollte (aus welchen Gründen auch immer): dann so vorgehen
// TK: Für abgekündigte Linux-Distros gab es in der 2.0.0 (inkompatible) Werks: #10315+#10317 SLES 12 SP1+SP2, Werk #10312 Ubuntu 18.10, Werk #11957 Ubuntu 19.10
// TK: In der 2.1.0 haben wir keine abgekündigten Distros/keine Werks. Einzig Ubuntu 20.10 wurde in der 2.0 unterstützt, jetzt nicht mehr.
[#linux_versions]
=== Linux-Distributionsversionen

In der {CMK} Version {v20} werden einige veraltete Linux-Distributionsversionen nicht mehr unterstützt.

*Betrifft Sie das?* Das betrifft Sie, wenn auf Ihrem {CMK}-Server eine der folgenden, in der {v16} noch unterstützten, Versionen installiert ist:

* Red Hat Enterprise Linux (RHEL) und CentOS Version 6.x
* SUSE Linux Enterprise Server (SLES) Version 12 SP1 oder SP2
* Debian Version 8.0
* Ubuntu Version 14.04, 18.10, 19.04 oder 19.10

*Was müssen Sie tun?* Führen Sie vor dem Update von {CMK} zuerst ein Update der Linux-Distribution durch.
Achten Sie darauf, dass die Ziel-Version der Linux-Distribution von {CMK} {v16} *und* {v20} unterstützt wird.

Welche Linux-Distributionsversionen {CMK} unterstützt, erfahren Sie im xref:install_packages#supported_distributions[Artikel zur Installation] und auf der link:https://checkmk.com/download[Download-Seite^] nachdem Sie die {CMK}-Version und Ihre Linux-Distribution ausgewählt haben.

Sollte es nun notwendig sein, vor dem Update von {CMK}, ein Upgrade von Linux vorzunehmen, so empfehlen wir die folgende Vorgehensweise:

. Stoppen Sie zunächst Ihre {CMK}-Instanz:
+
[{shell}]
----
{c-root} omd stop mysite
----

[start=2]
. Hängen Sie das `tmp`-Verzeichnis der Instanz aus:
+
[{shell}]
----
{c-root} umount /opt/omd/sites/mysite/tmp
----

[start=3]
. Verschieben Sie das gesamte `omd`-Verzeichnis, damit hieran im nächsten Schritt keine ungewollten Änderungen auftreten können.
Bei einem Release-Upgrade werden im Regelfall alle Pakete entfernt, deren Abhängigkeiten nicht mehr erfüllt werden können.
Zu diesen Paketen würde auch {CMK} gehören.
Um hier einen Datenverlust zu verhindern, ist dieser Schritt notwendig und kann per `mv` durchgeführt werden.
+
[{shell}]
----
{c-root} mv /opt/omd /opt/omd.bak
----

[start=4]
. Führen Sie das Upgrade von Linux entsprechend der Anleitung des jeweiligen Distributors durch.

. Nach dem erfolgreichen Upgrade Ihrer Linux-Distribution müssen Sie nun das in Sicherheit gebrachte `omd`-Verzeichnis wieder an Ort und Stelle verschieben:
+
[{shell}]
----
{c-root} mv /opt/omd.bak /opt/omd
----

[start=6]
. Installieren Sie nun das zur neuen Version der verwendeten Distribution passende Paket von {CMK}.
*Wichtig:* Die Versionsnummer von {CMK} muss exakt der vorher verwendeten entsprechen.
Wenn Sie also vor dem Upgrade der Distribution {CMK} 1.6.0p22 verwendet haben, so installieren Sie nun die 1.6.0p22, die zu Ihrer neuen Linux-Distributionsversion passt.
+
Im Falle von Ubuntu würde an dieser Stelle der folgende Befehl genügen:
+
[{shell}]
----
{c-root} apt install /tmp/check-mk-enterprise-1.6.0p22_0.focal_amd64.deb
----
+
*Hinweis:* Geben Sie bei der Installation per `apt install` den vollständigen Pfad zur .deb-Datei an.

Halten Sie sich bei der Neu-Installation von {CMK} an die jeweilige xref:install_packages#distribution_instructions[detaillierte Installationsanleitung] für Ihre Distribution.


// Neues {v21} Thema
[#agents]
=== Die Agenten für Linux und Windows
// TK: Muss das Thema auch in Nachbereitungen behandelt werden?

*Betrifft Sie das?* 

*Was müssen Sie tun?* 


// {v20} Thema - auch gültig für {v21}
[#local_files]
=== Lokale Dateien

Mit lokalen Dateien können Sie die von {CMK} bereitgestellte Funktionalität anpassen und erweitern.
Diese Dateien befinden sich im lokalen Teil der Instanzverzeichnisstruktur, d.h. in `~/local`.
Lokale Dateien können bei einem Update Probleme bereiten, da sie eventuell nicht mehr zur neuen {CMK}-Version passen.

*Betrifft Sie das?* Da es für {CMK} bei einem Update nicht möglich ist, die lokalen Anpassungen und jede von einem Drittanbieter hergestellte Erweiterung abzufangen und zu behandeln, sollten Sie Ihre {CMK}-Instanz vor einem Update daraufhin überprüfen, ob lokale Dateien bei Ihnen verwendet werden und gegebenenfalls welche.

*Was müssen Sie tun?* Verschaffen Sie sich einen Überblick über die lokalen Dateien Ihrer {CMK}-Instanz, indem Sie als Instanzbenutzer das folgende Kommando ausführen (bei dem die Option `-L` dafür sorgt, dass auch symbolischen Links gefolgt wird):

[{shell}]
----
{c-omd} find -L ~/local -type f
----

In einer frischen Installation von {CMK} wird Ihnen derzeit nur eine Datei namens `README.TXT` aufgelistet.
Alles, was darüber hinaus angezeigt wird, sollte ganz oben auf Ihrer Liste zur Fehlerdiagnose stehen, falls es beim Update Probleme gibt.
Besondere Aufmerksamkeit verdienen Checkplugins, die immer noch der alten, bis zur Version {v16} gültigen, Check-API folgen.
Wir gehen darauf im nächsten Kapitel genauer ein.


// {v20} Thema - auch gültig für {v21}
[#check-api]
=== Die Check-API

In {CMK} {v20} wurde eine neue Check-API eingeführt, die die Checkplugins neu strukturiert, um ihre Handhabung zu vereinheitlichen und zu vereinfachen.
Da es aber eine große Zahl von Checks gibt, die nach der alten, bis zur Version {v16} gültige Check-API programmiert wurden, kann es sein, dass die Migration von der alten auf die neue Check-API auch in der Version {v21} ein Thema für Sie ist.
Die große Zahl existierender Checks ist auch der Grund, warum die alte Check-API für eine Übergangszeit weiterhin unterstützt wird.

*Betrifft Sie das?* Das Thema Check-API betrifft Sie, wenn Sie die mit {CMK} ausgelieferten um Ihre eigenen, selbstgeschriebenen Checks erweitert haben und/oder wenn Sie Plugins aus anderen Quellen nutzen (z.B. von der link:https://exchange.checkmk.com/[{CMK} Exchange^] heruntergeladen haben) -- und von diesen Checkplugins noch einige der alten Check-API folgen.
Die betroffenen Dateien finden Sie in den xref:local_files[lokalen Dateien] Ihrer Instanz.

*Was müssen Sie tun?* Wir versuchen Ihnen den Umstieg auf die neue Check-API so leicht und komfortabel wie möglich zu machen:

So wie beim Update auf die Version {v20} versucht {CMK} auch beim Update auf die Version {v21}  alle lokalen Plugins aus den Verzeichnissen `~/local/share/check_mk/checks` und `~/local/share/check_mk/inventory` automatisch auf die neue Check-API zu migrieren.
Diese „Automigration“ passiert zur Laufzeit; die Plugindateien werden nicht verändert.
Wie Sie sich nach dem Update die Ergebnisse anzeigen lassen können, erfahren Sie im Kapitel xref:automigration[Automigration auf die Check-API überprüfen].

Die Chancen stehen zwar gut, dass die Automigration Ihrer Checkplugins reibungslos funktioniert, dennoch erfordert die ebenfalls in der Version {v20} durchgeführte Umstellung auf Python 3 möglicherweise einige Anpassungen.
Durch die neue Check-API und die Code-Basis Python 3 gibt es gleich zwei gute Gründe, Ihre selbstgeschriebenen Checkplugins zu überarbeiten.
Wir informieren Sie ausführlich über die notwendigen Schritte im link:https://blog.checkmk.com/de/migration-von-checkplugins-auf-checkmk-2.0[Blogpost zur Migration von Checkplugins.^]

Zu guter Letzt punktet die neue Check-API mit verbesserter Dokumentation:
Es gibt einen einführenden Artikel zur xref:devel_check_plugins#[Programmierung eigener Checkplugins] mit der neuen Check-API und Sie können in {CMK} {v20} die stets aktuelle Plugin-API-Referenzdokumentation über die {CMK}-Oberfläche aufrufen -- im neuen [.guihint]#Help#-Menü der Navigationsleiste. 


// {v20} Thema - auch gültig für {v21}
[#incompatible_mkps]
=== Inkompatible und obsolete MKPs

Über die {CMK} Erweiterungspakete (MKPs) lässt sich Ihr Monitoring-System recht einfach und bequem erweitern.
Auf der einen Seite kommt es dabei vor, dass solche MKPs nicht weiter gepflegt werden und dann ggf. mit neuen Versionen von {CMK} nicht mehr kompatibel sind.
Auf der anderen Seite nehmen wir immer wieder neue Plugins und Funktionserweiterungen in {CMK} auf, weshalb MKPs mitunter obsolet werden.
Ihre Funktionalität wird schlicht von {CMK} selbst sichergestellt.

*Betrifft Sie das?* Falls Sie MKPs installiert haben, ist aus diesem Grund eine Prüfung dieser MKPs dringend geboten -- besonders vor einem umfangreichen Update.
So verhindern Sie, dass inkompatible Pakete das Update behindern oder im Anschluss an das Update doppelte oder zumindest sehr ähnliche Services entstehen.

*Was müssen Sie tun?* Prüfen Sie hierzu Ihre installierten MKPs gegen unseren link:https://checkmk.com/de/integrations[Katalog der Checkplugins^] und entfernen Sie Pakete, welche inzwischen nativ von {CMK} bereitgestellt werden.
Bei dieser Gelegenheit können Sie auch MKPs entfernen, die eventuell nur mal für einen Probelauf installiert worden sind.
Eine Auflistung finden Sie über [.guihint]#Setup > Maintenance > Extension packages#.
Auf der Kommandozeile können Sie sich installierte Erweiterungen und auch unpaketierte Dateien mit den folgenden Befehlen anzeigen lassen:

[{shell}]
----
{c-omd} mkp list
{c-omd} mkp find
----

Sollten Sie über die Prüfung der installierten MKPs und dem Abgleich mit unserem Katalog nicht alle Pakete zuordnen können, empfiehlt sich der hiernach beschriebene xref:dry_run[Probelauf des Updates,] um dabei Inkompatibilitäten zu identifizieren und dann in Ihrem produktiven Monitoring vor dem Update zu entfernen.


// {v20} Thema - auch gültig für {v21}
[#incompatible]
=== Inkompatible Änderungen

Wie in jeder {CMK} Version, so gibt es auch in der aktuellen Version {v21} Änderungen der Software, die Rückwirkungen auf ihre {CMK}-Installation haben _können_.
Eine sogenannte _inkompatible Änderung_ kann erfordern, dass Sie manuell Anpassungen durchführen müssen, damit bestehende Funktionen weiterhin wie gewohnt ablaufen und/oder neue Funktionen genutzt werden können.

*Betrifft Sie das?* In aller Regel wird es inkompatible Änderungen geben, die auch Ihre {CMK}-Installation betreffen.
Eine generelle Aussage ist aber leider unmöglich.
In diesem Artikel haben wir diejenigen Themen zusammengetragen, die für alle oder die meisten {CMK}-Installationen zutreffen.
Es kann aber sein, dass es darüber hinaus weitere, für Sie relevante Änderungen gibt, zum Beispiel bei Checks, die Sie in Ihrer Installation verwenden.

*Was müssen Sie tun?* Nachdem Sie das xref:update[Update] durchgeführt haben, werden Ihnen in der {CMK}-Oberfläche Anzahl und Inhalt der inkompatiblen Änderungen angezeigt, und Sie werden aufgefordert, diese zu prüfen und zur Kenntnis zu nehmen.
Also werden Sie auf jeden Fall mit diesem Thema konfrontiert werden -- allerdings erst, nachdem Sie das Update durchgeführt haben.

Es ist daher eine gute Idee, sich bereits *vor* dem Update einen Überblick über die inkompatiblen Änderungen zu verschaffen:
Öffnen Sie die Liste der link:https://checkmk.com/de/werks/[Werks.^]
(Die Software-Entwicklung von {CMK} ist in sogenannten Werks organisiert.)
Filtern Sie die Werkliste nach {CMK} 2.1 *und* nach Kompatibilität, d.h. markieren Sie die Checkbox [.guihint]#Only show incompatible.#
In der Beschreibung eines Werks finden Sie Hinweise, was gegebenenfalls zu tun ist, um die Änderung kompatibel zu machen.

Die frustrierende Nachricht: Die Werkliste einer Version ist sehr, sehr lang -- selbst wenn Sie nur die inkompatiblen Änderungen enthält.
Die tröstliche Nachricht: An der Anzahl der Änderungen können Sie sehen, wie groß unsere Anstrengungen sind, {CMK} für Sie zu verbessern.


[#update]
== Update

[#dry_run]
=== Best Practises beim Update

Im Folgenden beschreiben wir bewährte Vorgehensweisen (_best practises_), welche wir selbst bei Updates von großen {CMK}-Umgebungen befolgen.
Diese sind sicherlich nicht in jeder Umgebung Pflicht, Sie können Ihnen den Prozess des Updates jedoch erleichtern.


==== Betriebssystem aktualisieren

Das Betriebssystem auf einem {CMK}-Server sollte ohnehin immer auf dem aktuellen Stand sein.
Vor einem Update von {CMK} schadet es aber bestimmt nicht, sich dessen noch einmal zu versichern:
mithilfe von `apt` (für Debian und Ubuntu), `yum` (für Red Hat Enterprise Linux (RHEL) basierte Systeme) oder `zypper` (für SUSE Linux Enterprise Server).


// {v20} Thema - auch gültig für {v21}
==== {CMK}-Version {v20} aktualisieren
// Werk #13320: omd update: Add version compatibility barrier > Vorbereitungen

Ein xref:update#update_major_version[Update auf eine Major-Version] wie {v21} sollten Sie nur von der vorherigen Major-Version {v20} aus durchführen.

Ein Update auf die Version {v21} setzt zurzeit kein bestimmtes {v20} Patch Release voraus.
Es gibt jedoch gute Gründe, den Sprung auf die {v21} nur vom neuesten {v20} Patch Release aus zu starten, da z.B. ein {v20} Patch Korrekturen enthalten kann, die den Update auf die Version {v21} erleichtern.

Daher empfehlen wir, zuerst {CMK} auf das neueste {v20} Patch Release zu aktualisieren und erst dann das Update auf die {v21} durchzuführen.


==== Probelauf des Updates durchführen

In großen Umgebungen, in denen auch das Zurückspielen eines selbstverständlich vorhandenen Backups Ihrer {CMK}-Umgebung mit einem gewissen zeitlichen Aufwand verbunden wäre, empfiehlt es sich, vor dem Update der produktiven Umgebung, einen Test mit einer geklonten Instanz durchzuführen.
Zu diesem Zweck können Sie beispielsweise das letzte reguläre Backup Ihrer Instanz unter einem anderen Namen wiederherstellen.

[{shell}]
----
{c-root} omd restore newsite /path/to/backup
----

*Alternativ* können Sie Ihre Instanz auch per `omd cp` kopieren.
Dafür muss die Instanz allerdings kurzzeitig gestoppt werden:

[{shell}]
----
{c-root} omd stop mysite
{c-root} omd cp mysite newsite
----

Führen Sie das Update im Anschluss erst einmal auf dieser neuen geklonten Instanz durch,um hier beispielsweise die oben angesprochenen lokalen Änderungen in der neuen Umgebung zu prüfen.


==== Agenten-Update vorübergehend abschalten

{cee-only}
Wenn Sie die automatische Agenten-Updates verwenden, sollten Sie überlegen, diese vor dem Update auf {CMK} {v21} vorübergehend zu deaktivieren.
Dazu wählen Sie zuerst [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX# und auf der folgenden Seite den Menüeintrag [.guihint]#Agents > Automatic updates.#
Durch Klick auf den Knopf icon:icon_edit[alt="Symbol zum Bearbeiten eines Listeneintrags."] vor dem [.guihint]#Master switch# können Sie den Agenten-Update abschalten.

// TK: Screenshot-Update notwendig - mit Master switch abgeschaltet
image::update_20_automatic_agent_updates.png[]

Nach dem erfolgreichen Update auf {CMK} {v21} können Sie den Agenten-Update auf gleichem Weg wieder anschalten.

Wir empfehlen an dieser Stelle das automatische Agenten-Update erstmal nur für einzelne Hosts oder Host-Gruppen wieder zu aktivieren.
Auf diese Weise wird der neue Agent nicht gleich auf all Ihre Server ausgerollt und Sie können sich auf einigen wenigen Systemen mit den neu angelieferten Daten vertraut machen.
Auch aufgrund der deutlich gestiegenen Zahl an mitgelieferten Check-Plugins könnten Sie eine ganze Reihe neuer Services finden, welche Sie dann auf den von Ihnen gewählten Testsystemen richtig einstellen können.
Eventuell sind für neue Services auch neue Schwellwerte vonnöten.
Wenn Sie dies erst einmal im Kleinen angehen, ersparen Sie sich ggf. einige Fehlalarme.

Auf der oben angegebenen Seite können Sie dafür einfach ein paar Hosts oder Host-Gruppen in die entsprechenden Felder eintragen und dann den [.guihint]#Master switch# wieder aktivieren.

image::update_20_activate_update_on_selected_hosts.png[]

Sobald Sie mit den Ergebnissen zufrieden sind, müssen Sie nur daran denken, diese Einschränkungen auf explizite Hosts und Host-Gruppen wieder zu entfernen.


// {v20} Thema - auch gültig für {v21}
[#update_distributed_monitoring]
=== Update im verteilten Monitoring
// Major-Version in distributed monitoring: Version barrier introduced for sites in distributed monitoring. Version barrier introduced also between CME and other editions
// TK: Kein Hinweis über die Reihenfolge: Zuerst Remote-Instanzen, dann Zentralinstanz? 
// TK: Versionsgrenze im verteilten Monitoring: Remote-Instanzen dürfen eine Major-Version höher sein als Zentralinstanz
// TK: Abschnitte auflösen: Empfohlenes Vorgehen als intro,Sukzessives Vorgehen raus, Vorgehen im laufenden Betrieb als "Standard"

Es gibt unterschiedliche Vorgehensweisen, um die Aktualisierung durchzuführen:
In einem Rutsch, sukzessiv mit unterbundenen Konfigurationsänderungen sowie im laufenden Betrieb.
In jedem Fall sollten Sie vorher Backups anlegen.


==== Empfohlenes Vorgehen

Das empfohlene, sichere Vorgehen für ein Update des gesamten Monitorings sieht wie folgt aus:

. Alle Instanzen stoppen.
. Updates durchführen.
. Die aktualisierten Instanzen wieder starten.


==== Sukzessives Vorgehen

Das Standardvorgehen verlangt bei größeren Installationen gute Planung und ein wenig Zeit -- das Monitoring wird einige Zeit offline sein.
Alternativ können Sie jegliche Konfigurationsänderungen über eine globale Einstellung unterbinden, so dass nur noch der Admin manuell Änderungen durchführen kann.
Auf diese Weise können Sie dann nach und nach Instanzen aktualisieren.
Rufen Sie dazu in der zentralen {v20}-Instanz [.guihint]#Setup > General > Read only mode# auf und aktivieren Sie den Nur-Lesen-Modus:

// TK: Screenshot-Update notwendig
// TK: Im Screenshot sollte bei Enabled > Enabled permanently statt Disabled zu sehen sein.
image::update_20_readonly.png[]

Sie können den Modus dauerhaft oder für eine bestimmte Zeitspanne aktivieren und eine zusätzliche Erklärung anhängen.
So lange der Modus aktiv ist, sehen alle Nutzer in allen Einstellungsdialogen folgenden Warnhinweis -- inklusive Ihrer Begründung:

// TK: Screenshot-Update notwendig
image::update_20_readonly_warning.png[]

Den Hinweis [.guihint]#But you are allowed to make changes anyway.# sehen natürlich nur Sie als Admin.


[#live_update]
==== Vorgehen im laufenden Betrieb

Es gibt noch eine dritte Variante, das Update im laufenden Betrieb.
Diese Variante wird unter anderem benötigt, wenn man eine große Menge von verteilten Instanzen verwaltet, die aus technischen oder organisatorischen Gründen nicht in einem Rutsch aktualisiert werden können.

Dieses Vorgehen wird *nicht empfohlen und geschieht auf eigenes Risiko!*

In einem Mischbetrieb mit verschiedenen Versionen sind Grundfunktionalitäten gegeben.
Einige Features von {CMK} funktionieren in diesem Modus gar nicht oder nur eingeschränkt.
Bevor Sie sich für diesen Vorgehen entscheiden, müssen Sie das Update für Ihr individuelles Set an Features testen.
Stellen Sie zudem sicher, dass Ihre Datensicherung läuft und funktioniert.
Es kann bei diesem Vorgehen durchaus passieren, dass größere Probleme auftreten.
Das lässt sich am ehesten vermeiden, indem Sie die zentrale Instanz *zuletzt* aktualisieren.

Beachten Sie auch dazu auch die Hinweise im xref:distributed_monitoring_sync[Ausblick] zu dem Kompatibilitätsmodus.


=== Das Update durchführen

Am eigentlichen Update der Software hat sich in der {CMK} {v21} nichts Grundlegendes geändert, d.h. Sie installieren die neue Version, führen das Update der {CMK}-Instanz durch, kümmern sich um Konflikte (falls es denn welche geben sollte) und überprüfen und bestätigen die inkompatiblen Änderungen.

Führen Sie die Update-Prozedur so aus, wie sie im xref:update#detailed[Artikel zu Updates und Upgrades] beschrieben ist.


[#follow-up]
== Nachbereitungen


[#gui]
=== Änderungen der Benutzeroberfläche
// Werk #13736 - Remove obsolete sidebar snapins
// Im xref:intro_welcome#[Leitfaden für Einsteiger] finden Sie eine ausführliche Einführung in die wichtigsten Elemente der xref:intro_gui#[neuen GUI].


[#automigration]
=== Automigration auf die Check-API überprüfen
// Werk #10601: Auto migration of check plugins to new section definitions

Sie können überprüfen, ob alle lokalen Plugins aus den Verzeichnissen `~/local/share/check_mk/checks` und `~/local/share/check_mk/inventory` automatisch auf die neue xref:check-api[Check-API] migriert werden können.

*Betrifft Sie das?* Diese Überprüfung ist sinnvoll, wenn in Ihren lokalen Dateien Checkplugins existieren, die nach der alten, bis zur Version {v16} gültigen Check-API programmiert wurden.

*Was müssen Sie tun?* Führen Sie als Instanzbenutzer das folgende Kommando aus:

[{shell}]
----
{c-omd} cmk -R
Failed to auto-migrate legacy plugin to check plugin: mssql_counters
Please refer to Werk 10601 for more information.
----

Die Meldung oben zeigt, dass ein Plugin nicht automatisch migriert werden konnte.
Alle gelisteten Plugins müssen von Ihnen manuell migriert werden.
Es gibt einige Gründe, aus denen eine Automigration nicht durchgeführt werden kann und die Sie im genannten link:https://checkmk.com/werk/10601[Werk #10601] nachlesen können.
Wie Sie die manuelle Migration durchführen, erfahren Sie im link:https://blog.checkmk.com/de/migration-von-checkplugins-auf-checkmk-2.0[Blogpost zur Migration von Checkplugins.]


// {v20} Thema - auch gültig für {v21}
[#service_discovery]
=== Neue Services erkennen

Wie jede Hauptversion, so bringt auch {CMK} {v21} eine ganze Reihe neuer Checkplugins mit sich.
Sollten Sie den xref:wato_services#discovery_check["Discovery Check"] nicht einsetzen, d.h. das automatische Update der Service-Konfiguration über die periodische Service-Erkennung, werden Sie auf einer ganzen Reihe von Hosts die Suche nach Services durchführen müssen.

Wenn Ihre Hosts entsprechend organisiert sind (z.B. in Ordnern), können Sie hierfür zumeist mit der Funktion [.guihint]#Bulk discovery# arbeiten.
Diese finden Sie unter [.guihint]#Setup > Hosts > Hosts# und dann im Menü [.guihint]#Hosts > Discover services.#

Im Folgenden listen wir einige Bereiche mit den meisten Neuerungen auf.


// Neues {v21} Thema
[#service_check_mk_agent]
==== Check_MK und Check_MK Agent
// Werk #13697: "Check_MK Agent" service: Combine with new plugin service


// Neues {v21} Thema
[#cluster_services]
==== Cluster-Services
// Werk #12908: Add predefined cluster modes for all services
// Das Thema ist nicht korrekt einsortiert, da es hier nicht um neue Services geht, sondern um den Zustand existierender Services.


// Neues {v21} Thema
[#kubernetes]
=== Komplett überarbeitetes Kubernetes-Monitoring

*Betrifft Sie das?* 

*Was müssen Sie tun?* 


// Neues {v21} Thema
[#encrypt_notification_spooler]
=== Benachrichtigungs-Spooler verschlüsseln
// Werk #13610: Notification spooler connections can now be encrypted

*Betrifft Sie das?* 

*Was müssen Sie tun?* 


// Neues {v21} Thema
[#rest-api]
=== REST-API ersetzt Web-API
// Werk #13640: Deprecation of Web API
// TK: Die noch fehlenden Funktionen Sites, Metrics & Graphs kommen in einem 2.1p Release.

*Betrifft Sie das?* 

*Was müssen Sie tun?* 


[#outlook]
== Ausblick

In diesem Kapitel geht es um Themen, die nicht die aktuelle {CMK} Version {v21}, sondern eine der darauf folgenden Versionen betreffen.


// Neues {v21} Thema
[#web-api]
=== Entfernung der Web-API
// Werk #13640: Deprecation of Web API

Die Web-API (auch HTTP-API genannt) wird in der nächsten {CMK}-Version (zur Zeit geplant als 2.2.0) entfernt.
Die Web-API wird ersetzt durch die in der {v20} eingeführte xref:rest_api#[REST-API].


// Neues {v21} Thema
[#kubernetes_20]
=== Entfernung des {v20} Kubernetes Spezialagenten
// Werk #13561: agent_kubernetes: deprecate special agent and associated checks


// Neues {v21} Thema
[#nsca]
=== Keine Unterstützung mehr für NSCA
// Werk #13644: Deprecating NSCA as part of Checkmk

