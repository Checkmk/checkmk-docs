include::global_attr.adoc[]
= Update auf Version {v21}
:revdate: draft
:title: Update auf Version {v21}
:description: Was es beim Update von {CMK} Version 2.0.0 auf 2.1.0 zu beachten gibt, erfahren Sie in diesem Artikel.

{related-start}
xref:update#[Updates und Upgrades]
xref:install_packages#[Grundsätzliches zur Installation von {CMK}]
{related-end}


////
TK: Neue Kandidaten zur Aufnahme (u.a. durch grobe Auswertung der inkompatiblen Werks):
- Neue Linux- und Windows-Agenten mit Registrierung > Vorbereitungen, Nachbereitungen(?)
- https://checkmk.com/de/werk/13640 - Werk #13640: Deprecation of Web API. > Nachbereitungen, Ausblick
Die noch fehlenden Funktionen Sites, Metrics & Graphs kommen in einem 2.1p Release.
- https://checkmk.com/de/werk/13320 - Werk #13320: omd update: Add version compatibility barrier > Vorbereitungen
- Major-Version in distributed monitoring: Version barrier introduced for sites in distributed monitoring. Version barrier introduced also between CME and other editions > ? > Werk? > Update
- https://checkmk.com/de/werk/13561 - Werk #13561: agent_kubernetes: deprecate special agent and associated checks > Nachbereitungen, Ausblick
- https://checkmk.com/de/werk/13697 - Werk #13697: "Check_MK Agent" service: Combine with new plugin service > Nachbereitungen
- https://checkmk.com/de/werk/12908 - Werk #12908: Add predefined cluster modes for all services > Vorbereitungen(?), Nachbereitungen
- https://checkmk.com/de/werk/13644 - Werk #13644: Deprecating NSCA as part of Checkmk > Ausblick 
- https://checkmk.com/de/werk/13610 - Werk #13610: Notification spooler connections can now be encrypted > Nachbereitungen
- #13736 - Einige (7?) Snapins entfernt > Nachbereitungen? > eher nicht
////


[#intro]
== Einleitung

In diesem Artikel finden Sie die wichtigsten Themen, die für das Update Ihrer {CMK}-Version {v20} auf {v21} relevant sind.

Wir empfehlen Ihnen, vor dem Update den kompletten Artikel durchzulesen, damit Sie genau wissen, was auf Sie zukommt: vor, während und nach dem Update.


[#prep]
== Vorbereitungen

In diesem Kapitel erhalten Sie die Übersicht der Themen, um die Sie sich kümmern sollten, bevor Sie das Update durchführen.
Nicht jedes der Themen wird wahrscheinlich für Sie relevant sein:
Bei einem solchen können Sie intern einen Haken setzen und sich gleich das nächste Thema vornehmen.


// TK: Thema auch für 2.1.0
[#backup]
=== Backup

Wie vor dem Update jeder produktiven Software sollten Sie auch vor dem Update von {CMK} die Aktualität Ihrer Backups prüfen.

*Betrifft Sie das?* Ja.

*Was müssen Sie tun?*  Wenn Sie Ihre Backups automatisiert über [.guihint]#Setup > Maintenance > Backups# erstellen, prüfen Sie dort, ob die letzten Backup-Aufträge fehlerfrei durchgelaufen sind.

Weitere Informationen finden Sie in den Artikeln zu xref:backup#[Backups] und zum Thema xref:omd_basics#backup[Instanzen sichern und wiederherstellen.]


// TK: Thema nur für 2.0.0
////
[#dokuwiki]
=== DokuWiki

Das DokuWiki ist nicht länger Bestandteil der {CMK}-Software.

*Betrifft Sie das?* Das betrifft Sie, wenn Sie das Wiki bisher beispielsweise zur Bereitstellung von Informationen in Form von Notizen (_notes_) oder über das Seitenleisten-Snapin [.guihint]#WIKI# in {CMK} genutzt haben.

*Was müssen Sie tun?*

Ein wichtiger Hinweis vorweg:
Die in {CMK} gespeicherten DokuWiki-Daten werden beim Update auf {CMK} {v20} nicht gelöscht.
Nur die Software selbst wird aus den entsprechenden Verzeichnissen entfernt.
Sie könnten Ihre Daten aus DokuWiki demnach auch noch jederzeit nach dem Update auf die Version {v20} umziehen.

Wenn Sie bisher das mitgelieferte DokuWiki verwendet haben und die Informationen auch weiterhin verwenden wollen, so empfehlen wir DokuWiki separat zu installieren.
Eine entsprechende Anleitung dazu finden Sie auf den Seiten des Projekts link:https://www.dokuwiki.org/Install[dokuwiki.org].

Da alle Artikel und weiteren Texte und Strukturen in DokuWiki nur aus Textdateien und Verzeichnissen bestehen, ist der Umzug auf einen anderen Server tatsächlich ausgesprochen einfach.
Kopieren Sie hierzu einfach den Inhalt des Ordners `~/var/dokuwiki/data` aus Ihrer {CMK}-Instanz in das gleichnamige Verzeichnis Ihrer neuen DokuWiki-Installation.

Wenn Sie auf die Informationen im DokuWiki bisher in erster Linie über das Icon für [.guihint]#Notes# icon:icon_notes[] in Ihren Service- und Host-Views zugegriffen haben, sollten Sie nach dem Umzug von DokuWiki auch die URL in den Regeln [.guihint]#Notes URL for Hosts# und [.guihint]#Notes URL for Services# anpassen.
Falls Sie stattdessen ein [.guihint]#Custom Icon# für diesen Zweck erstellt haben, ändern Sie die URL entsprechend unter [.guihint]#Global Settings > Custom icons and actions#.
////


// TK: Thema auch für 2.1.0
// TK: Muss umgeschrieben werden: Falls Distro-Update notwendig sein sollte (aus welchen Gründen auch immer): dann so vorgehen
// TK: Für abgekündigte Linux-Distros gab es in der 2.0.0 (inkompatible) Werks: #10315+#10317 SLES 12 SP1+SP2, Werk #10312 Ubuntu 18.10, Werk #11957 Ubuntu 19.10
// TK: In der 2.1.0 haben wir keine abgekündigten Distros/keine Werks. Einzig Ubuntu 20.10 wurde in der 2.0 unterstützt, jetzt nicht mehr.
[#linux_versions]
=== Linux-Distributionsversionen

In der {CMK} Version {v20} werden einige veraltete Linux-Distributionsversionen nicht mehr unterstützt.

*Betrifft Sie das?* Das betrifft Sie, wenn auf Ihrem {CMK}-Server eine der folgenden, in der {v16} noch unterstützten, Versionen installiert ist:

* Red Hat Enterprise Linux (RHEL) und CentOS Version 6.x
* SUSE Linux Enterprise Server (SLES) Version 12 SP1 oder SP2
* Debian Version 8.0
* Ubuntu Version 14.04, 18.10, 19.04 oder 19.10

*Was müssen Sie tun?* Führen Sie vor dem Update von {CMK} zuerst ein Update der Linux-Distribution durch.
Achten Sie darauf, dass die Ziel-Version der Linux-Distribution von {CMK} {v16} *und* {v20} unterstützt wird.

Welche Linux-Distributionsversionen {CMK} unterstützt, erfahren Sie im xref:install_packages#supported_distributions[Artikel zur Installation] und auf der link:https://checkmk.com/download[Download-Seite^] nachdem Sie die {CMK}-Version und Ihre Linux-Distribution ausgewählt haben.

Sollte es nun notwendig sein, vor dem Update von {CMK}, ein Upgrade von Linux vorzunehmen, so empfehlen wir die folgende Vorgehensweise:

. Stoppen Sie zunächst Ihre {CMK}-Instanz:
+
[{shell}]
----
{c-root} omd stop mysite
----

[start=2]
. Hängen Sie das `tmp`-Verzeichnis der Instanz aus:
+
[{shell}]
----
{c-root} umount /opt/omd/sites/mysite/tmp
----

[start=3]
. Verschieben Sie das gesamte `omd`-Verzeichnis, damit hieran im nächsten Schritt keine ungewollten Änderungen auftreten können.
Bei einem Release-Upgrade werden im Regelfall alle Pakete entfernt, deren Abhängigkeiten nicht mehr erfüllt werden können.
Zu diesen Paketen würde auch {CMK} gehören.
Um hier einen Datenverlust zu verhindern, ist dieser Schritt notwendig und kann per `mv` durchgeführt werden.
+
[{shell}]
----
{c-root} mv /opt/omd /opt/omd.bak
----

[start=4]
. Führen Sie das Upgrade von Linux entsprechend der Anleitung des jeweiligen Distributors durch.

. Nach dem erfolgreichen Upgrade Ihrer Linux-Distribution müssen Sie nun das in Sicherheit gebrachte `omd`-Verzeichnis wieder an Ort und Stelle verschieben:
+
[{shell}]
----
{c-root} mv /opt/omd.bak /opt/omd
----

[start=6]
. Installieren Sie nun das zur neuen Version der verwendeten Distribution passende Paket von {CMK}.
*Wichtig:* Die Versionsnummer von {CMK} muss exakt der vorher verwendeten entsprechen.
Wenn Sie also vor dem Upgrade der Distribution {CMK} 1.6.0p22 verwendet haben, so installieren Sie nun die 1.6.0p22, die zu Ihrer neuen Linux-Distributionsversion passt.
+
Im Falle von Ubuntu würde an dieser Stelle der folgende Befehl genügen:
+
[{shell}]
----
{c-root} apt install /tmp/check-mk-enterprise-1.6.0p22_0.focal_amd64.deb
----
+
*Hinweis:* Geben Sie bei der Installation per `apt install` den vollständigen Pfad zur .deb-Datei an.

Halten Sie sich bei der Neu-Installation von {CMK} an die jeweilige xref:install_packages#distribution_instructions[detaillierte Installationsanleitung] für Ihre Distribution.


// TK: Thema nur für 2.0.0
////
[#forecast_graphs]
=== Software für Forecast Graphs

Um in {CMK} {v16} das Feature zu xref:forecast_graphs#[Vorhersagegraphen] (_forecast graphs_) nutzen zu können, ist die Installation von zusätzlicher Software (u.&thinsp;a. Prophet von Facebook) notwendig. Ab {v20} verfügt {CMK} über eine komplett eigenständige Implementierung dieser Vorhersagefunktion, ohne dass weitere Softwarepakete installiert werden müssen.

*Betrifft Sie das?* Falls Sie die in {CMK} {v16} eingeführten Forecast Graphs verwendet haben, ist es sehr zu empfehlen, das dafür installierte Python und Prophet wieder aus Ihren Instanzen zu entfernen. 

*Was müssen Sie tun?* Das Skript, welches Sie für die Installation von Prophet und seinen Abhängigkeiten verwendet haben, erledigt für Sie auch die Entfernung dieser Pakete. Rufen Sie es dazu einfach mit der Option `-u` auf. In einem verteilten Monitoring müssen Sie diesen Schritt auf jeder Instanz wiederholen, auf der Sie Prophet installiert haben.

[{shell}]
----
{c-omd} bin/install_fbprophet -u
----

//SK: Leider bleiben so derzeit noch diverse Kalender-Pakete in ~/local/lib/python/ liegen. Ich versuche zu klären, ob diese per rm -r ~/local/lib/python gefahrlos gelöscht werden können.
////


// TK: Thema auch für 2.1.0
[#local_files]
=== Lokale Dateien

Mit lokalen Dateien können Sie die von {CMK} bereitgestellte Funktionalität anpassen und erweitern.
Diese Dateien befinden sich im lokalen Teil der Instanzverzeichnisstruktur, d.&thinsp;h. in `~/local`.
Lokale Dateien können bei einem Update Probleme bereiten, da sie eventuell nicht mehr zur neuen {CMK}-Version passen.

*Betrifft Sie das?* Da es für {CMK} bei einem Update nicht möglich ist, die lokalen Anpassungen und jede von einem Drittanbieter hergestellte Erweiterung abzufangen und zu behandeln, sollten Sie Ihre {CMK}-Instanz vor einem Update daraufhin überprüfen, ob lokale Dateien bei Ihnen verwendet werden und gegebenenfalls welche.

*Was müssen Sie tun?* Verschaffen Sie sich einen Überblick über die lokalen Dateien Ihrer {CMK}-Instanz, indem Sie als Instanzbenutzer das folgende Kommando ausführen (bei dem die Option `-L` dafür sorgt, dass auch symbolischen Links gefolgt wird):

[{shell}]
----
{c-omd} find -L ~/local -type f
----

In einer frischen Installation von {CMK} wird Ihnen derzeit nur eine Datei namens `README.TXT` aufgelistet.
Alles, was darüber hinaus angezeigt wird, sollte ganz oben auf Ihrer Liste zur Fehlerdiagnose stehen, falls es beim Update Probleme gibt.
// Besondere Aufmerksamkeit verdienen Skripte und Checkplugins, die in Python 2 geschrieben sind und Checkplugins, die der alten Check-API folgen. Auf beide Themen gehen wir genauer ein in den beiden folgenden Kapiteln.


// TK: Thema nur für 2.0.0
////
[#python3]
=== Code-Basis Python 3
// Werk #11080: Port Checkmk to Python 3

Der größte Teil von {CMK} ist in der Programmiersprache Python geschrieben -- über 10 Jahren lang in Python 2.
Mit der Version {v20} haben wir nun den großen Schritt gemacht und {CMK} auf Python 3 portiert.
Dieser Schritt war aufwendig, aber notwendig, um {CMK} effizient und sicher weiter entwickeln zu können.

Bis einschließlich zur Version {v16} wird {CMK} mit Python 2.7 und allen notwendigen Drittanbieter-Modulen (_third-party modules_) ausgeliefert.
*Statt* mit Python 2.7 wird {CMK} {v20} mit Python 3.8 und ebenfalls allen notwendigen Drittanbieter-Modulen ausgeliefert.

*Betrifft Sie das?* Dieser Python Versionswechsel ist für Sie relevant, wenn Sie in Python 2 geschriebene xref:local_files[lokale Dateien] (Skripte oder Plugins) verwenden.

*Was müssen Sie tun?* Ändern Sie in Skripten den link:https://de.wikipedia.org/wiki/Shebang[„Shebang“^] und passen Sie den Code von Python 2 auf 3 an.

In einem Skript, das direkt aus einem Cronjob oder dem Core aufgerufen wird, z.B. ein Benachrichtigungsskript, haben Sie in der Vergangenheit oft den folgenden Shebang verwendet:

.mylocalscript
[{file}]
----
#!/usr/bin/env python
----

Damit haben Sie das in der Version {v16} ausgelieferte Python 2.7 verwendet.
Da dieses nicht mehr existiert, wird ohne eine Änderung dieser Zeile die Python-Version des Betriebssystems verwendet.
Welche das ist, hängt von Ihrem Betriebssystem ab und kann mit dem folgenden Kommando abgefragt werden.

[{shell}]
----
{c-omd} python --version
Python 2.7.18
----

Wir empfehlen, den Shebang so zu ändern:

.mylocalscript
[{file}]
----
#!/usr/bin/env python3
----

Damit können Sie wieder das Python verwenden, das mit {CMK} {v20} geliefert wird.

Danach müssen Sie möglicherweise in Ihren Skripten einige Anpassungen vornehmen, um Ihren Code von Python 2 auf 3 umzustellen.
Was dafür zu tun ist, erfahren Sie im nächsten Kapitel zur neuen Check-API.
////


// TK: Thema nur für 2.0.0
////
[#check-api]
=== Die neue Check-API

{CMK} {v20} führt eine neue Check-API ein, die die Checkplugins neu strukturiert, um ihre Handhabung zu vereinheitlichen und zu vereinfachen.

Da es aber eine große Zahl von Checks gibt, die nach der alten, bis zur Version {v16} gültige Check-API programmiert wurden, wird die alte Check-API für eine Übergangszeit weiterhin unterstützt.

*Betrifft Sie das?* Die neue API betrifft Sie, wenn Sie die mit {CMK} ausgelieferten um Ihre eigenen, selbstgeschriebenen Checks erweitert haben und/oder wenn Sie Plugins aus anderen Quellen nutzen und diese z.B. von der link:https://exchange.checkmk.com/[{CMK} Exchange] heruntergeladen haben. Die betroffenen Dateien finden Sie in den xref:local_files[lokalen Dateien] Ihrer Instanz.

*Was müssen Sie tun?* Wir versuchen Ihnen den Umstieg auf die neue Check-API so leicht und komfortabel wie möglich zu machen:

Nach dem Update auf die Version {v20} versucht {CMK} alle lokalen Plugins aus den Verzeichnissen `~/local/share/check_mk/checks` und `~/local/share/check_mk/inventory` automatisch auf die neue Check-API zu migrieren.
Diese „Automigration“ passiert zur Laufzeit; die Plugindateien werden nicht verändert.
Wie Sie sich nach dem Update die Ergebnisse anzeigen lassen können, erfahren Sie im Kapitel xref:automigration[Automigration auf die neue Check-API überprüfen].

Die Chancen stehen zwar gut, dass die Automigration Ihrer Checkplugins reibungslos funktioniert, dennoch erfordert die  Umstellung auf Python 3 möglicherweise einige Anpassungen.
Durch die Einführung der neuen Check-API und durch die Änderung der Code-Basis auf Python 3 gibt es gleich zwei gute Gründe, Ihre selbstgeschriebenen Checkplugins zu überarbeiten.
Wir informieren Sie ausführlich über die notwendigen Schritte im link:https://blog.checkmk.com/de/migration-von-checkplugins-auf-checkmk-2.0[Blogpost zur Migration von Checkplugins.]

Zu guter Letzt punktet die neue Check-API mit verbesserter Dokumentation:
Es gibt einen einführenden Artikel zur xref:devel_check_plugins#[Programmierung eigener Checkplugins] mit der neuen Check-API und Sie können in {CMK} {v20} die stets aktuelle Plugin-API-Referenzdokumentation über die {CMK}-Oberfläche aufrufen -- im neuen [.guihint]#Help#-Menü der Navigationsleiste. 
////


// TK: Thema auch für 2.1.0
[#incompatible_mkps]
=== Inkompatible und obsolete MKPs

Über die {CMK} Erweiterungspakete (MKPs) lässt sich Ihr Monitoringsystem recht einfach und bequem erweitern.
Auf der einen Seite kommt es dabei vor, dass solche MKPs nicht weiter gepflegt werden und dann ggf. mit neuen Versionen von {CMK} nicht mehr kompatibel sind.
Auf der anderen Seite nehmen wir immer wieder neue Plugins und Funktionserweiterungen in {CMK} auf, weshalb MKPs mitunter obsolet werden.
Ihre Funktionalität wird schlicht von {CMK} selbst sichergestellt.

*Betrifft Sie das?* Falls Sie MKPs installiert haben, ist aus diesem Grund eine Prüfung dieser MKPs dringend geboten -- besonders vor einem so umfangreichen Update.
So verhindern Sie, dass inkompatible Pakete das Update behindern oder im Anschluss an das Update doppelte oder zumindest sehr ähnliche Services entstehen.

*Was müssen Sie tun?* Prüfen Sie hierzu Ihre installierten MKPs gegen unseren link:https://checkmk.com/de/integrations[Katalog der Checkplugins^] und entfernen Sie Pakete, welche inzwischen nativ von {CMK} bereitgestellt werden.
Bei dieser Gelegenheit können Sie auch MKPs entfernen, die eventuell nur mal für einen Probelauf installiert worden sind.
Eine Auflistung finden Sie über [.guihint]#Setup > Maintenance > Extension packages#.
Auf der Kommandozeile können Sie sich installierte Erweiterungen und auch unpaketierte Dateien mit den folgenden Befehlen anzeigen lassen:

[{shell}]
----
{c-omd} mkp list
{c-omd} mkp find
----

Sollten Sie über die Prüfung der installierten MKPs und dem Abgleich mit unserem Katalog nicht alle Pakete zuordnen können, empfiehlt sich der hiernach beschriebene xref:dry_run[Probelauf des Updates,] um dabei Inkompatibilitäten zu identifizieren und dann in Ihrem produktiven Monitoring vor dem Update zu entfernen.


// TK: Thema auch für 2.1.0
[#incompatible]
=== Inkompatible Änderungen

Wie in jeder {CMK} Version, so gibt es auch in der aktuellen Version {v21} Änderungen der Software, die Rückwirkungen auf ihre {CMK}-Installation haben _können_.
Eine sogenannte _inkompatible Änderung_ kann erfordern, dass Sie manuell Anpassungen durchführen müssen, damit bestehende Funktionen weiterhin wie gewohnt ablaufen und/oder neue Funktionen genutzt werden können.

*Betrifft Sie das?* In aller Regel wird es inkompatible Änderungen geben, die auch Ihre {CMK}-Installation betreffen.
Eine generelle Aussage ist aber leider unmöglich.
In diesem Artikel haben wir diejenigen Themen zusammengetragen, die für alle oder die meisten {CMK}-Installationen zutreffen.
Es kann aber sein, dass es darüber hinaus weitere, für Sie relevante Änderungen gibt, zum Beispiel bei Checks, die Sie in Ihrer Installation verwenden.

*Was müssen Sie tun?* Nachdem Sie das xref:update[Update] durchgeführt haben, werden Ihnen in der {CMK}-Oberfläche Anzahl und Inhalt der inkompatiblen Änderungen angezeigt, und Sie werden aufgefordert, diese zu prüfen und zur Kenntnis zu nehmen.
Also werden Sie auf jeden Fall mit diesem Thema konfrontiert werden -- allerdings erst, nachdem Sie das Update durchgeführt haben.

Es ist daher eine gute Idee, sich bereits *vor* dem Update einen Überblick über die inkompatiblen Änderungen zu verschaffen:
Öffnen Sie die Liste der link:https://checkmk.com/de/werks/[Werks.^]
(Die Software-Entwicklung von {CMK} ist in sogenannten Werks organisiert.)
Filtern Sie die Werkliste nach {CMK} 2.1 *und* nach Kompatibilität, d.h. markieren Sie die Checkbox [.guihint]#Only show incompatible.#
In der Beschreibung eines Werks finden Sie Hinweise, was gegebenenfalls zu tun ist, um die Änderung kompatibel zu machen.

Die frustrierende Nachricht: Die Werkliste einer Version ist sehr, sehr lang -- selbst wenn Sie nur die inkompatiblen Änderungen enthält.
Die tröstliche Nachricht: An der Anzahl der Änderungen können Sie sehen, wie groß unsere Anstrengungen sind, {CMK} für Sie zu verbessern.


// TK: Thema auch für 2.1.0
// TK: Bis zum verteilten Monitoring bereits auf 2.1 gehoben
[#update]
== Update

[#dry_run]
=== Best Practises beim Update

Im Folgenden beschreiben wir bewährte Vorgehensweisen (_best practises_), welche wir selbst bei Updates von großen {CMK}-Umgebungen befolgen.
Diese sind sicherlich nicht in jeder Umgebung Pflicht, Sie können Ihnen den Prozess des Updates jedoch erleichtern.


==== Betriebssystem aktualisieren

Das Betriebssystem auf einem {CMK}-Server sollte ohnehin immer auf dem aktuellen Stand sein.
Vor einem Update von {CMK} schadet es aber bestimmt nicht, sich dessen noch einmal zu versichern:
mithilfe von `apt` (für Debian und Ubuntu), `yum` (für Red Hat Enterprise Linux (RHEL) basierte Systeme) oder `zypper` (für SUSE Linux Enterprise Server).


==== {CMK}-Version {v20} aktualisieren

Ein xref:update#update_major_version[Update auf eine Major-Version] wie {v21} sollten Sie nur von der vorherigen Major-Version {v20} aus durchführen.

Ein Update auf die Version {v21} setzt zurzeit kein bestimmtes {v20} Patch Release voraus.
Es gibt jedoch gute Gründe, den Sprung auf die {v21} nur vom neuesten {v20} Patch Release aus zu starten, da z.B. ein {v20} Patch Korrekturen enthalten kann, die den Update auf die Version {v21} erleichtern.

Daher empfehlen wir, zuerst {CMK} auf das neueste {v20} Patch Release zu aktualisieren und erst dann das Update auf die {v21} durchzuführen.


==== Probelauf des Updates durchführen

In großen Umgebungen, in denen auch das Zurückspielen eines selbstverständlich vorhandenen Backups Ihrer {CMK}-Umgebung mit einem gewissen zeitlichen Aufwand verbunden wäre, empfiehlt es sich, vor dem Update der produktiven Umgebung, einen Test mit einer geklonten Instanz durchzuführen.
Zu diesem Zweck können Sie beispielsweise das letzte reguläre Backup Ihrer Instanz unter einem anderen Namen wiederherstellen.

[{shell}]
----
{c-root} omd restore newsite /path/to/backup
----

*Alternativ* können Sie Ihre Instanz auch per `omd cp` kopieren.
Dafür muss die Instanz allerdings kurzzeitig gestoppt werden:

[{shell}]
----
{c-root} omd stop mysite
{c-root} omd cp mysite newsite
----

Führen Sie das Update im Anschluss erst einmal auf dieser neuen geklonten Instanz durch,um hier beispielsweise die oben angesprochenen lokalen Änderungen in der neuen Umgebung zu prüfen.


==== Agenten-Update vorübergehend abschalten

{cee-only}
Wenn Sie die automatische Agenten-Updates verwenden, sollten Sie überlegen, diese vor dem Update auf {CMK} {v21} vorübergehend zu deaktivieren.
Dazu wählen Sie zuerst [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX# und auf der folgenden Seite den Menüeintrag [.guihint]#Agents > Automatic updates.#
Durch Klick auf den Knopf icon:icon_edit[alt="Symbol zum Bearbeiten eines Listeneintrags."] vor dem [.guihint]#Master switch# können Sie den Agenten-Update abschalten.

// TK: Screenshot-Update notwendig
image::update_20_automatic_agent_updates.png[]

Nach dem erfolgreichen Update auf {CMK} {v21} können Sie den Agenten-Update auf gleichem Weg wieder anschalten.

Wir empfehlen an dieser Stelle das automatische Agenten-Update erstmal nur für einzelne Hosts oder Host-Gruppen wieder zu aktivieren.
Auf diese Weise wird der neue Agent nicht gleich auf all Ihre Server ausgerollt und Sie können sich auf einigen wenigen Systemen mit den neu angelieferten Daten vertraut machen.
Auch aufgrund der deutlich gestiegenen Zahl an mitgelieferten Check-Plugins könnten Sie eine ganze Reihe neuer Services finden, welche Sie dann auf den von Ihnen gewählten Testsystemen richtig einstellen können.
Eventuell sind für neue Services auch neue Schwellwerte vonnöten.
Wenn Sie dies erst einmal im Kleinen angehen, ersparen Sie sich ggf. einige Fehlalarme.

Auf der oben angegebenen Seite können Sie dafür einfach ein paar Hosts oder Host-Gruppen in die entsprechenden Felder eintragen und dann den [.guihint]#Master switch# wieder aktivieren.

image::update_20_activate_update_on_selected_hosts.png[]

Sobald Sie mit den Ergebnissen zufrieden sind, müssen Sie nur daran denken, diese Einschränkungen auf explizite Hosts und Host-Gruppen wieder zu entfernen.


// TK: Thema auch für 2.1.0
// TK: Gilt das weiterhin für die 2.1.0?
// TK: Empfohlenes Vorgehen (Nr. 1) vs. Sukzessives Vorgehen (=Standardvorgehen?) (Nr. 2)
// TK: Kein Hinweis über die Reihenfolge: Zuerst Remote-Instanzen, dann Zentralinstanz? 
// TK: Versionsgrenze im verteilten Monitoring: Remote-Instanzen dürfen eine Major-Version höher sein als Zentralinstanz
[#update_distributed_monitoring]
=== Update im verteilten Monitoring

Es gibt unterschiedliche Vorgehensweisen, um die Aktualisierung durchzuführen:
In einem Rutsch, sukzessiv mit unterbundenen Konfigurationsänderungen sowie im laufenden Betrieb.
In jedem Fall sollten Sie vorher Backups anlegen.


==== Empfohlenes Vorgehen

Das empfohlene, sichere Vorgehen für ein Update des gesamten Monitorings sieht wie folgt aus:

. Alle Instanzen stoppen.
. Updates durchführen.
. Die aktualisierten Instanzen wieder starten.


==== Sukzessives Vorgehen

Das Standardvorgehen verlangt bei größeren Installationen gute Planung und ein wenig Zeit -- das Monitoring wird einige Zeit offline sein.
Alternativ können Sie jegliche Konfigurationsänderungen über eine globale Einstellung unterbinden, so dass nur noch der Admin manuell Änderungen durchführen kann.
Auf diese Weise können Sie dann nach und nach Instanzen aktualisieren.
Rufen Sie dazu in der zentralen {v20}-Instanz [.guihint]#Setup > General > Read only mode# auf und aktivieren Sie den Nur-Lesen-Modus:

// TK: Screenshot-Update notwendig
// TK: Im Screenshot sollte bei Enabled > Enabled permanently statt Disabled zu sehen sein.
image::update_20_readonly.png[]

Sie können den Modus dauerhaft oder für eine bestimmte Zeitspanne aktivieren und eine zusätzliche Erklärung anhängen.
So lange der Modus aktiv ist, sehen alle Nutzer in allen Einstellungsdialogen folgenden Warnhinweis -- inklusive Ihrer Begründung:

// TK: Screenshot-Update notwendig
image::update_20_readonly_warning.png[]

Den Hinweis [.guihint]#But you are allowed to make changes anyway.# sehen natürlich nur Sie als Admin.


[#live_update]
==== Vorgehen im laufenden Betrieb

Es gibt noch eine dritte Variante, das Update im laufenden Betrieb.
Diese Variante wird unter anderem benötigt, wenn man eine große Menge von verteilten Instanzen verwaltet, die aus technischen oder organisatorischen Gründen nicht in einem Rutsch aktualisiert werden können.

Dieses Vorgehen wird *nicht empfohlen und geschieht auf eigenes Risiko!*

In einem Mischbetrieb mit verschiedenen Versionen sind Grundfunktionalitäten gegeben.
Einige Features von {CMK} funktionieren in diesem Modus gar nicht oder nur eingeschränkt.
Bevor Sie sich für diesen Vorgehen entscheiden, müssen Sie das Update für Ihr individuelles Set an Features testen.
Stellen Sie zudem sicher, dass Ihre Datensicherung läuft und funktioniert.
Es kann bei diesem Vorgehen durchaus passieren, dass größere Probleme auftreten.
Das lässt sich am ehesten vermeiden, indem Sie die zentrale Instanz *zuletzt* aktualisieren.

Beachten Sie auch dazu auch die Hinweise im xref:distributed_monitoring_sync[Ausblick] zu dem Kompatibilitätsmodus.


=== Das Update durchführen

Am eigentlichen Update der Software hat sich in der {CMK} {v21} nichts Grundlegendes geändert, d.h. Sie installieren die neue Version, führen das Update der {CMK}-Instanz durch, kümmern sich um Konflikte (falls es denn welche geben sollte) und überprüfen und bestätigen die inkompatiblen Änderungen.

Führen Sie die Update-Prozedur so aus, wie sie im xref:update#detailed[Artikel zu Updates und Upgrades] beschrieben ist.


[#follow-up]
== Nachbereitungen

// TK: Thema nur für 2.0.0
////
[#gui]
=== Die neue Benutzeroberfläche
*Die* nicht zu übersehende Neuerung in der {CMK} Version {v20} ist die komplett neu gestaltete Benutzeroberfläche (_GUI_), wie sie sich Ihnen nach der Anmeldung präsentiert:

image::gui.png[]

Die folgende Übersicht ist für  den eiligen Versionsumsteiger gedacht und zeigt, wo sich die wichtigsten der wohlbekannten GUI-Elemente aus der Version {v16} in der Version {v20} befinden:

[cols=3]
|===
|Vorher |Jetzt |Anmerkung

|- |Navigationsleiste |Die neue Navigationsleiste ist stets auf der linken Seite und bietet neue Menüs, am wichtigsten: [.guihint]#Setup# und [.guihint]#Monitor#.
|Seitenleiste |Seitenleiste |Die Seitenleiste befindet sich standardmäßig auf der rechten Seite und  zeigt wichtige Zustandsinformationen für den Operator. Die Seitenleiste kann wie gewohnt um Snapins erweitert werden.
|Seitenleiste > {CMK}-Logozeile mit Informationen über {CMK}-Edition, Version, Zahl inkompatibler Änderungen und Link zu den Release notes |[.guihint]#Help#-Menü |Im [.guihint]#Help#-Menü der Navigationsleiste wird die {CMK}-Edition und -Version angezeigt. Die Zahl nicht kompatibler Änderungen nach einem Update wird gegebenenfalls im Symbol des [.guihint]#Help#-Menüs eingeblendet. Zum Aufruf der Release notes gibt es [.guihint]#Help#-Menüeinträge.
|[.guihint]#WATO - Configuration# |[.guihint]#Setup#-Menü |Das [.guihint]#Setup#-Menü in der Navigationsleiste ersetzt das Snapin [.guihint]#WATO - Configuration# in der Seitenleiste. Für die Seitenleiste gibt es die beiden Snapins [.guihint]#Setup# und [.guihint]#Quick Setup#.
|[.guihint]#WATO > Host & Service Parameters# |[.guihint]#Setup#-Menü |Die Kategorien der Regelsätze finden sich, komplett überarbeitet, im [.guihint]#Setup#-Menü unter [.guihint]#Hosts#, [.guihint]#Services# und [.guihint]#Agents#.
|[.guihint]#WATO > Monitoring Agents# |[.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX# |Zugang zur Agentenbäckerei in den {CEE}.
|- |Suchfeld im [.guihint]#Setup#-Menü |Neu ist die Suche in der Konfigurationsumgebung (u.a. nach Regelsätzen und globalen Einstellungen).
|[.guihint]#Views# |[.guihint]#Monitor#-Menü |Das [.guihint]#Monitor#-Menü in der Navigationsleiste ersetzt das Snapin [.guihint]#Views# in der Seitenleiste, das aber weiterhin verfügbar ist.
|[.guihint]#Quicksearch# |Suchfeld im [.guihint]#Monitor#-Menü |Das Snapin [.guihint]#Quicksearch# für die Seitenleiste ist weiterhin verfügbar.
|Hauptseite > Kopfzeile mit Benutzernamen, Zeit und Buchsymbol zur Einblendung der Hilfetexte |Hauptseite > Kopfzeile mit Anzahl der noch nicht aktivierten Änderungen |Der aktuelle Benutzername mit zugewiesener Rolle wird im [.guihint]#User#-Menü der Navigationsleiste angezeigt. Die Hilfetexte können auf jeder Hauptseite im [.guihint]#Help#-Menü unter [.guihint]#Context sensitive help# ein- und wieder ausgeblendet werden.
|Hauptseite mit Aktionsknöpfen (_buttons_) |Hauptseite mit Breadcrumb, Menüleiste und Aktionsleiste |Die „Breadcrumb“-Navigation zeigt den Pfad zur aktuellen Seite, darunter folgt die kontext-spezifische Menüleiste und wiederum darunter eine Aktionsleiste mit Knöpfen für die wichtigsten Menüeinträge.
|===

Im xref:intro_welcome#[Leitfaden für Einsteiger] finden Sie eine ausführliche Einführung in die wichtigsten Elemente der xref:intro_gui#[neuen GUI].
////


// TK: Thema nur für 2.0.0
////
[#fetcher_checker]
=== Fetcher und Checker

In {CMK} {v20} hat sich das Prinzip der Hilfsprozesse sehr stark verändert.
Bis {CMK} {v16} waren die {CMK} Helper dafür zuständig, Checks durchzuführen.
Die {CMK} Helper-Prozesse blieben dauerhaft und sorgten so für eine deutliche Verbesserung der Performance, weil auf die zeitintensive Erzeugung neuer Prozesse verzichtet werden konnte.

In {CMK} {v20} verrichten diese Hilfsprozesse ihre Aufgaben noch spezialisierter und zielgerichteter.
Statt, wie bis zur {v16}, die Informationen abzuholen *und* anschließend auszuwerten, ist der eine Teil der Hilfsprozesse nur für das Abholen der Informationen zuständig.
Diese Helper heißen _{CMK} Fetcher_.
Der andere Teil hingegen kümmert sich darum, die von den Fetchern übergebenen Informationen auszuwerten.
Diese Prozesse nennen wir _{CMK} Checker_.

*Betrifft Sie das?* Kurz: ja -- sofern Sie die {CEE} nutzen, in der die genannten Prozesse verfügbar sind.
Jeder Administrator der {CMK} {v20} {EE} sollte sich mit diesem Punkt in den [.guihint]#Global settings# auseinandersetzen.

*Was müssen Sie tun?* Sie müssen in [.guihint]#Setup > General > Global settings# die Werte für [.guihint]#Maximum concurrent Checkmk fetchers# und [.guihint]#Maximum concurrent Checkmk checkers# anpassen.

Für die Checker lässt sich klar sagen, dass der Wert auf keinen Fall größer sein sollte, als Ihr Server parallel Prozesse abarbeiten kann.
Im Regelfall entspricht diese Zahl der Anzahl an Rechenkernen Ihres {CMK}-Servers.
Dies wäre aber das absolute Maximum, dessen Überschreitung keinen Sinn ergibt.

Im Falle der Fetcher hingegen ist der verfügbare Arbeitsspeicher des Servers der limitierende Faktor.
Als Ausgangswert wird hier die Zahl der [.guihint]#Maximum concurrent Check_MK checks# aus {CMK} {v16} übernommen.
Um hier eine gute Einstellung zu finden, empfehlen wir die Aktivierung des Seitenleistenelements [.guihint]#Core statistics#.
Darin werden Ihnen die prozentualen Auslastungen der Fetcher und Checker angezeigt. Sollten die Fetcher hier regelmäßig nah bei 100 % liegen, müssen Sie deren Anzahl erhöhen, um ein performantes System zu erhalten.
Wir empfehlen die Fetcher so einzustellen, dass deren Auslastung wenige Minuten nach dem Neustart einer Instanz bei 80 % liegt.

Ausführliche Informationen finden Sie xref:cmc_differences#fetcher_checker[hier].
////


// TK: Thema nur für 2.0.0
////
[#automigration]
=== Automigration auf die neue Check-API überprüfen
// Werk #10601: Auto migration of check plugins to new section definitions

Sie können überprüfen, ob alle lokalen Plugins aus den Verzeichnissen `~/local/share/check_mk/checks` und `~/local/share/check_mk/inventory` automatisch auf die neue Check API migriert werden können.

*Betrifft Sie das?* Diese Überprüfung ist sinnvoll, wenn in Ihren lokalen Dateien Checks existieren, die nach der alten, bis zur Version {v16} gültigen Check-API programmiert wurden.

*Was müssen Sie tun?* Führen Sie als Instanzbenutzer das folgende Kommando aus:

[{shell}]
----
{c-omd} cmk -R
Failed to auto-migrate legacy plugin to check plugin: mssql_counters
Please refer to Werk 10601 for more information.
----

Die Meldung oben zeigt, dass ein Plugin nicht automatisch migriert werden konnte.
Alle gelisteten Plugins müssen von Ihnen manuell migriert werden.
Es gibt einige Gründe, aus denen eine Automigration nicht durchgeführt werden kann und die Sie im genannten link:https://checkmk.com/werk/10601[Werk #10601] nachlesen können.
Wie Sie die manuelle Migration durchführen, erfahren Sie im link:https://blog.checkmk.com/de/migration-von-checkplugins-auf-checkmk-2.0[Blogpost zur Migration von Checkplugins.]
////


// TK: Thema auch für 2.1.0?
// TK: Evtl. umschreiben, so dass keine konkreten Services mehr genannt werden?
[#service_discovery]
=== Neue Services erkennen

{CMK} {v20} bringt eine ganze Reihe neuer Checkplugins mit sich.
Sollten Sie das automatische Update der Service-Konfiguration über die periodische Service-Erkennung nicht einsetzen, werden Sie auf einer ganzen Reihe von Hosts die Suche nach Services durchführen müssen.

Wenn Ihre Hosts entsprechend organisiert sind (z.B. in Ordnern), können Sie hierfür zumeist mit der Funktion [.guihint]#Bulk discovery# arbeiten.
Diese finden Sie unter [.guihint]#Setup > Hosts > Hosts# und dann im Menü [.guihint]#Hosts > Discover services.#

Im Folgenden listen wir einige Bereiche mit den meisten Neuerungen auf.

==== MySQL-Server

Insbesondere auf Servern auf denen MySQL läuft, wird Ihnen {CMK} eine ganze Reihe neuer Services für die Überwachung anbieten.

==== Netzwerkgeräte

In den Bezeichnungen von Netzwerkgeräten haben sich in vielen IT-Landschaften in der Vergangenheit Sonderzeichen eingeschlichen: von Größer- und Kleinerzeichen, über Pipe-Zeichen (`|`) bis hin zu Umlauten.
{CMK} {v20} wird diese Sonderzeichen gänzlich anders behandeln, damit es hier zu weniger Problemen kommt.
Unabhängig davon, ob eine solche Benamung gut und sinnvoll ist, muss auf den entsprechenden Geräten eine Service-Erkennung gestartet werden.

==== Kernel-Services

Die drei Services [.guihint]#Kernel Process Creations#, [.guihint]#Kernel Major Page Faults# und [.guihint]#Kernel Context Switches# sind in {CMK} {v20} zu einem Service mit dem Namen [.guihint]#Kernel Performance# zusammengefasst.
Auf den {CMK}-Servern selbst muss also auch eine neue Service-Erkennung angestoßen werden.
Dies sollte natürlich auf jeder Instanz gemacht werden.
Auf der Kommandozeile können Sie dies mit dem folgenden Befehl erledigen:

[{shell}]
----
{c-omd} cmk -IIv --plugins kernel,kernel_performance
----


// TK: Thema nur für 2.0.0
////
[#diagnostics]
== Diagnosemöglichkeiten

[#inconsistent_use_of_tabs]
=== Fehlermeldung: inconsistent use of tabs

Python 3 ist - auch bei den Anforderungen an eine korrekte Syntax - deutlicher strikter als die Vorgängerversion.
In der Beta-Phase von {CMK} {v20} sind uns immer wieder Plugins untergekommen, in denen schon kleine Fehler ein erfolgreiches Update behindern konnten.
Wenn beim Update oder beim anschließenden Start der Instanz der Fehler „inconsistent use of tabs“ auftritt, empfehlen wir das betroffene Plugin mit folgenden Befehl zu entfernen.

[{shell}]
----
{c-omd} mkp remove _NameOfPlugin_
----
////


[#outlook]
== Ausblick

In diesem Kapitel geht es um Themen, die nicht die aktuelle {CMK} Version {v21}, sondern eine der darauf folgenden Versionen betreffen.


// TK: Thema nur für 2.0.0 > Rausnehmen?
[#distributed_monitoring_sync]
=== Verteiltes Monitoring
//Werk #11072: Distributed environments: Improve config synchronization

Die Art der Synchronisation der Konfigurationsdateien zwischen den Instanzen im verteilten Monitoring hat sich in der Version {v20} geändert.
So werden in der Version {v16} *alle* Konfigurationsdateien zwischen der Zentralinstanz (_central site_) und den fernen Instanzen (_remote sites_) synchronisiert;
in der {v20} inkrementell nur noch die, die sich geändert haben.

Um das Update aller im verteilten Monitoring beteiligten Instanzen im laufenden Betrieb auf die {v20} grundsätzlich zu ermöglichen, funktioniert die Synchronisation für eine Übergangszeit auch in dieser gemischten Umgebung, indem nur dann eine inkrementelle Synchronisation ausgeführt wird, wenn beide Instanzen auf der Version {v20} sind.
Andernfalls wird die alte Methode verwendet.
Beachten Sie hier unbedingt die Hinweise zu dem xref:live_update[Update in verteilten Umbegungen].

Dieser Kompatibilitätsmodus wird in der nächsten {CMK}-Version (zur Zeit geplant als {v21}) entfernt.
Wir empfehlen, alle im verteilten Monitoring beteiligen Instanzen zügig auf die Version {v20} upzudaten.


// TK: Thema auch für 2.1.0 > umgeschrieben
[#web-api]
=== Entfernung der Web-API

Die Web-API (auch HTTP-API genannt) wird in der nächsten {CMK}-Version 2.2.0 entfernt.
Die Web-API wird ersetzt durch die in der {v20} eingeführte xref:rest_api#[REST-API].
