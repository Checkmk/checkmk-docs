// -*- coding: utf-8 -*-
include::global_attr.adoc[]


[#architecture]
== Architektur des Agenten

Mit dem in der {v21} eingeführten neuen Agenten sind mehr Software-Komponenten als zuvor in die Kommunikation involviert.
Daher stellen wir die Komponenten und ihr Zusammenspiel kurz vor.
Die Architektur ist beim Linux-Agenten und beim xref:agent_windows#agent_architecture[Windows-Agenten] identisch.
Nur die technische Realisierung ist spezifisch für die Betriebssysteme.

.Zusammenspiel der Software-Komponenten
[{image-border}]
image::agent_linux_communication_flow.png[alt="Illustration der Kommunikation zwischen Agent und Instanz."]

Das *Agentenskript* `check_mk_agent` ist und bleibt zuständig für die Sammlung der Monitoring-Daten.
Für die Datensammlung ruft es der Reihe nach vorhandene Systembefehle auf.
Um auch diejenigen Informationen zu erhalten, zu deren Beschaffung `root`-Rechte erforderlich sind, wird `check_mk_agent` unter `root` ausgeführt.

Das Agentenskript ist:

* minimalistisch, denn es begnügt sich mit minimalen Ressourcen an RAM, CPU, Plattenplatz und Netzwerk.
* sicher, denn es erlaubt keinerlei Zugriffe aus dem Netzwerk.
* leicht erweiterbar, denn Sie können Plugins in einer beliebigen Programmier- oder Skriptsprache schreiben und vom Agentenskript ausführen lassen.
* transparent, denn es ist ein Shellskript, in dem Sie sehen können, welche Befehle es aufruft.

Der *Agent Controller* `cmk-agent-ctl.exe` ist die Komponente des Agenten, die für den Transport der vom Agentenskript gesammelten Daten zuständig ist.
Er wird unter dem Benutzer `cmk-agent` ausgeführt, der nur beschränkte Rechte besitzt, z.B. keine Login-Shell hat und nur zur Datenübertragung genutzt wird.
Der Benutzer `cmk-agent` wird während der Installation des Agentenpakets angelegt.
Der Agent Controller wird als Daemon von `systemd` gestartet und ist als Service an diesen gekoppelt.
Er lauscht am TCP-Port 6556 auf eingehende Verbindungen der {CMK}-Instanz und fragt das Agentenskript über einen Unix-Socket (einer `systemd` Unit) ab.

Wozu wird nun der Agent Controller gebraucht -- bisher funktionierte es doch auch sehr gut ohne ihn?
Nun, die Software-Architektur des Agenten ist die Voraussetzung dafür, neue Funktionen anzubieten, die mit dem minimalistischen Design des Agentenskripts nicht umsetzbar sind, wie beispielsweise die Verschlüsselung der Kommunikation per Transport Layer Security (TLS), Datenkomprimierung und die Umkehrung der Kommunikationsrichtung.
Bisher war es stets der {CMK}-Server, der die Kommunikation initiierte und die Daten vom Agenten abfragte -- im sogenannten Pull-Modus.

Mit dem Agent Controller wird die Voraussetzung geschaffen, zukünftig zusätzlich den Push-Modus zu realisieren, in dem die Initiative vom Agenten ausgeht.
Der Push-Modus ist für eine Cloud-basierte Konfiguration und in einigen abgeschotteten Netzwerken erforderlich.
In beiden Fällen kann der {CMK}-Server nicht auf das Netzwerk zugreifen, in dem sich die zu überwachenden Hosts befinden.
Daher sendet der Agent von sich aus regelmäßig die Daten an den {CMK}-Server.
Agent Controller und Agent Receiver sind bereits für den Push-Modus vorbereitet, auch wenn dieser Modus erst mit der nächsten {CMK}-Version für die neue {CMK} Plus Edition (CPE) verfügbar sein wird.

Der *Agent Receiver* `agent-receiver` ist die Komponente des {CMK}-Servers, die als genereller Endpunkt für die Kommunikation des Agent Controllers dient, z.B. für die Registrierung der Verbindung.
Er wird auch zukünftig die vom Agent Controller im Push-Modus gesendeten Daten empfangen.
Im Pull-Modus erfolgt der Datenaustausch mit den xref:cmc_differences.html#fetcher_checker[{CMK}-Fetchern] der Instanz.

TLS-Verschlüsselung und Datenkomprimierung werden über den Agent Controller und den Agent Receiver realisiert, d.h. {CMK}-Server und Agent müssen mindestens Version {v21} haben.
Dabei ist nach der Installation der erste Schritt die Registrierung des Agent Controller beim Agent Receiver der {CMK}-Instanz, mit der ein Vertrauensverhältnis hergestellt wird.
Bei der Registrierung wird bereits die TLS-Verschlüsselung der Kommunikation eingerichtet.
