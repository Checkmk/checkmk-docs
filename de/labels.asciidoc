include::global_attr.adoc[]
= Labels
:revdate: 2021-08-20
:title: Labels
:description: In diesem Artikel erfahren Sie, wie Sie in {CMK} mit Host- und Service-Labels bekannte Strukturierungsmarker aus anderen Umgebungen nutzen können.

{related-start}
xref:wato_hosts#[Verwaltung der Hosts]
xref:wato_rules#[Host- und Serviceparameter]
xref:notifications#[Benachrichtigungen]
{related-end}


== Einleitung

// Labels neu in {v16}
{CMK} unterstützt das Konzept der Labels, von denen Sie beliebig viele einem Host zuweisen können.
Dabei verhalten sich Labels und Host-Merkmale (_host tags_) recht ähnlich:

* Labels werden wie Merkmale an Hosts „gehängt“.
* Labels können wie Merkmale als Bedingungen in Regeln verwendet werden.
* Labels sind ähnlich wie Merkmale nach dem Prinzip `Schlüssel:Wert` aufgebaut.

Warum gibt es hier also ein neues Konzept? Nun -- die
IT-Welt ändert sich und wird viel dynamischer. Cloud- und
Containersysteme wie xref:monitoring_aws#[Amazon Web Services (AWS)], xref:monitoring_azure#[Microsoft Azure] und
xref:monitoring_kubernetes#[Kubernetes] erzeugen und löschen selbständig Objekte,
die in {CMK} Hosts entsprechen. In diesen Technologien spielen Labels/Merkmale
eine große Rolle, denn sie stellen die Verbindung zwischen den überwachten
Objekten und ihrer Bedeutung her. Die Host-Namen hingegen werden zunehmend
zufällig und nichtssagend.

{CMK} kann mit der xref:dcd#[dynamischen Host-Konfiguration] solche dynamischen
Hosts automatisch anlegen und bekommt dabei auch die Information über
die dort bereits vorhandenen Labels/Merkmale. Diese können Sie dann für
Regelbedingungen, Suchen, Auswertungen, Dashboards und andere Aufgaben verwenden.

Natürlich stellt sich die Frage, warum wir solche dynamischen Labels nicht
einfach auf das vorhandene Konzept der Host-Merkmale abbilden. Und in der Tat
ist das auch erst einmal sehr naheliegend.
Allerdings haben Host-Merkmale eine sehr wichtige Eigenschaft, die das sehr
schwierig und kompliziert machen würde: Welche Merkmalsgruppen und Merkmale es gibt,
legen Sie bei {CMK} starr fest. Alles ist wohldefiniert. Jeder Host hat aus
jeder Gruppe genau einen Tag. Alle können sich darauf verlassen. Tippfehler
in der Schreibweise von Tags können nicht vorkommen, eben sowenig Hosts,
die sich nicht an das Schema halten. Denn dessen Einhaltung wird von {CMK}
streng kontrolliert. Bei sehr heterogenen Umgebungen mit vielen Tausend
manuell gepflegten Hosts ist das wichtig und nützlich.

Dynamische Labels von Kubernetes und Co hingegen sind quasi
„Freiform“. Und selbst wenn diese einem Schema folgen, ist dieses {CMK} überhaupt
nicht bekannt. Außerdem überwachen Sie vielleicht mehrere unterschiedliche
Plattformen, die wiederum Labels auf sehr unterschiedliche Art einsetzen.

Deswegen wurde mit den {CMK}-Labels ein Konzept eingeführt,
welches bestens auf die wachsende Dynamik passt. Und Sie können die Labels
natürlich auch ohne Anbindung an Cloud-Umgebungen nutzen.

Für die Beantwortung der Frage "Wann soll man Labels nehmen und wann Host-Merkmale?" hilft vielleicht die folgende Überlegung: 
Labels können vorhanden sein, Host-Merkmale sind es immer.
Daher eignen sich Host-Merkmale für Eigenschaften, die immer da sind (oder zumindest sein sollen) und in der Regel durch den {CMK}-Administrator für das gesamte zu überwachende System und für alle {CMK}-Benutzer vorgegeben werden.
Einzelne {CMK}-Benutzer können die spezifischen Anforderungen in ihrem Verantwortungsbereich mit Labels umsetzen.
Für eine überschaubare lokale Struktur können die Labels die Lücken füllen, die von der globalen Administration freigelassen wurden, und dabei ihre Vorteile ausspielen: Sie sind schnell und einfach erstellt -- und auch wieder gelöscht.

Hier sind die Besonderheiten von Labels:

* Labels müssen nirgendwo vordefiniert werden. Es gibt kein fixes Schema für Labels. Alles ist Freiform. Alles ist erlaubt.
* Jeder Host kann beliebig viele Labels haben. Diese können manuell gepflegt sein, über xref:wato_rules#[Regeln] definiert werden oder automatisch entstehen.
* Labels sind nach dem Prinzip `Schlüssel:Wert` aufgebaut. Pro Schlüssel darf ein Host nur einen Wert haben. Also kann ein Host, der das Label `foo:bar` hat, nicht gleichzeitig `foo:bar2` haben.
* Anders als die Host-Merkmale dürfen sowohl der Schlüssel als auch der Wert -- bis auf den Doppelpunkt -- *beliebige Zeichen* enthalten.
* Es gibt keine Unterscheidung zwischen ID und Titel (oder angezeigtem Namen): Der Schlüssel des Labels ist beides gleichzeitig.

Labels haben folgende Aufgaben:

* Sie bilden eine Grundlage für Bedingungen in Konfigurationsregeln, z.B. „Alle Hosts mit dem Label `os:windows` sollen so und so überwacht werden.“
* Sie können sehr einfach zusätzliche Informationen oder Anmerkungen zu einem Host speichern (z.B. `Location:RZ 74/123/xyz`) und diese z.B. in xref:views#[Tabellenansichten] anzeigen lassen.


[#create_labels]
== Labels erstellen


[#explicit]
=== Explizite Labels

Einem Host können auf verschiedenen Wegen Labels zugeordnet werden.
////
MA: Hier werden Wege genannt, aber es werden nachfolgend nur zwei beschrieben.
MA: Inzwischen gibt es auch automatische Labels über die Service-Discovery.
MA: Diese werden nicht mehr über die HW/SW-Inventoy angelegt, sondern über die
MA: Check-Plugins selbst. Hier gibt es auch einige, die wir inzwischen
MA: angelegen. Die sollen auch irgendwo beschreiben sein. Ich schau da ggfs.
MA: noch einmal nach.
TK: Die 3. Möglichkeit (Automatisch zugewiesene Labels) soll als neues Kapitel vor "Labels im Discovery Check"
TK: hinzugefügt werden, nachdem geklärt ist, wie die von CMK erzeugten Labels dokumentiert werden:
TK: CMK-7206 und CMK-7660
////
Die erste davon ist einfach:
Auf der Seite mit den Host-Eigenschaften, die angezeigt wird, wenn Sie im xref:user_interface#setup_menu[Setup] einen xref:wato_hosts#labels[Host erstellen] oder bearbeiten, können Sie diesem beliebig viele Labels verpassen:

//TK: Screenshot neu ziehen nachdem der Fix da ist zum Thema " Kein Zeilenumbruch bei Leerzeichen in Labeldefinition" (Ticketnummer finde ich grad nicht)  
image::labels_host_properties.png[alt="Dialog mit Eigenschaften eines Hosts zum Definieren von Labels."]

Aktivieren Sie [.guihint]#Labels# mit der Checkbox, klicken Sie dann in das Feld [.guihint]#Add some label#, geben Sie die Label-Definition in der Form `Schlüssel:Wert` ein und schließen diese mit [Enter] ab.

Ein bestehendes Label können Sie durch einen Klick in dessen Text editieren oder mit dem kleinen Kreuz wieder entfernen.

*Hinweis:* Sowohl der Schlüssel als auch der Wert eines Labels dürfen _jedes beliebige Zeichen_
enthalten -- außer dem Doppelpunkt! Allerdings sollten Sie sich genau überlegen, wie Sie es mit
der Groß-/Kleinschreibung halten. Denn wenn Sie später Bedingungen über Labels definieren,
dann muss die Schreibweise sowohl beim Schlüssel als auch beim Wert strikt beachtet werden.

Natürlich können Labels auch von einem Ordner vererbt werden. Wie andere
Attribute auch, können Labels in Unterordnern oder beim Host dann nach Bedarf
wieder überschrieben werden -- und zwar *pro Label*.  Wird im Ordner
z.B. das Label `location:munich` gesetzt, so wird dies an alle Hosts
in diesem Ordner vererbt, welche nicht selbst das Label `location`
definiert haben. Andere Labels, die ein Hosts eventuell hat, bleiben dadurch
unberührt.

Beim Host oder beim Ordner explizit definierte Labels werden in der Liste der Hosts violett dargestellt:

image::labels_host_list.png[alt="Listeneintrag eines Hosts mit den zugewiesenen expliziten Labels."]


[#rules]
=== Labels über Regeln erzeugen

Wie in {CMK} üblich, können Attribute auch per xref:wato_rules#[Regeln] den
Hosts und Services zugeordnet werden. Damit werden Sie unabhängig von der
Ordnerstruktur. Dies gilt auch für die Labels.
Dazu gibt es den Regelsatz [.guihint]#Host labels#, den Sie schnell über die xref:user_interface#search_setup[Suche im Setup-Menü] finden können.

Folgende Regel fügt allen Hosts im Ordner [.guihint]#Bavaria# mit dem Host-Merkmal [.guihint]#Real Hardware# das Label [.guihint]#hw:real# hinzu:

image::labels_rule_host_labels.png[alt="Regel für die Festlegung von Labels für Hosts."]

Vielleicht fällt Ihnen auf, dass bei den Bedingungen zu dieser Regel Labels
_nicht_ verwendet werden können. Das ist kein Fehler, sondern Absicht und
vermeidet rekursive Abhängigkeiten und andere Anomalien.

Über Regeln hinzugefügte Labels werden rot dargestellt, tauchen allerdings nicht in der Host-Liste im Setup auf,
sondern nur in der xref:views[Statusansicht des Hosts].


////
H2:Automatische Labels

Die dritte Art, wie Labels entstehen können, ist vollautomatisch. Verschiedene Datenquellen,
wie z.B. die Spezialagenten für das Überwachen von Cloud- und Containersystemen sowie
das Agentenplugin der xref:inventory#[Hardware-/Softwareinventur] erzeugen automatisch Labels.
Solche Labels werden orange dargestellt.

Das Schöne: Sie müssen gar nichts konfigurieren. Sobald diese Datenquellen aktiv sind, entstehen
die entsprechenden Labels. Hierzu einige Details:

H3:Hardware-/Softwareinventur

Das Inventursystem von {CMK} findet statische Informationen zur Hardware, zum
Betriebssystem und zur Software, die auf einem Host installiert ist. Davon
abhängig können automatisch Labels generiert werden. Diese finden Sie in
der Darstellung des Inventurbaums im Pfad [.guihint]#Software > Applications > Check_MK > Discovered host labels#:

BI:label_by_inventory.png

H3:AWS

Labels von Objekten in xref:monitoring_aws#[Amazon Web Services (AWS)]
(AWS verwendet hierfür den Begriff _Tags_) werden beim Überwachen mit
{CMK} automatisch übernommen.

H3:Azure

Auch bei Azure heißen die Labels _Tags_. Details zu Labels bei der Überwachung von Azure mit {CMK} finden
Sie in einem eigenen xref:monitoring_azure#[Artikel].

H3:Kubernetes

Vor allem Kubernetes arbeitet intensiv mit Labels -- welche dort auch
so heißen. Dabei wird unterschieden zwischen automatischen Labels
(z.B. `pod_id`, `pod_name` und `pod_namespace`), und
solchen, die der Administrator selbst vergibt. Beide Arten wandern direkt
nach {CMK} als automatische Labels.
////


[#discovery_check]
=== Labels im Discovery Check

Falls Sie den xref:wato_services#discovery_check[Discovery Check] aktiviert haben -- und das
ist bei neuen Installationen per Default der Fall -- wird dieser Sie warnen, wenn neue
Host-Labels gefunden wurden, welche noch nicht in die Host-Eigenschaften im Setup aufgenommen
wurden. Das sieht dann z.B. so aus:

image::labels_discovery_check.png[alt="Service-Liste mit dem Service 'Check_MK Discovery'."]

Sie haben zwei Möglichkeiten, auf diese Warnung zu reagieren.
Die erste ist das Aufnehmen der neuen Labels, indem Sie im Setup die Service-Konfiguration des Hosts aufrufen und mit dem Menüeintrag [.guihint]#Hosts > Update host labels# die Konfiguration der Labels aktualisieren.
Der Discovery Check wird bei der nächsten Ausführung (in bis zu zwei Stunden) dann wieder {OK}, selbst wenn Sie die Änderungen noch nicht aktiviert haben. 
Wenn Sie nicht so lange warten wollen, können Sie den Service auch sofort manuell aktualisieren durch Auswahl von [.guihint]#Reschedule check# im Aktionsmenü des Services.

Wenn das viele Hosts auf einmal betrifft, werden Sie sicher nicht für jeden
einzelnen die Service-Konfiguration besuchen wollen.
Führen Sie hier am besten die xref:wato_hosts#bulk_operations[Bulk-Aktion] zur Service-Erkennung durch ([.guihint]#Discover services#) und wählen Sie als Modus [.guihint]#Only discover new host labels# -- oder alternativ [.guihint]#Add unmonitored services and new host labels#, wenn Sie bei der Gelegenheit auch gleich neue Services aufnehmen wollen.

Die zweite Art, den Discovery Check grün zu bekommen, ist, dass Sie diesen so umkonfigurieren, dass er neue Labels nicht mehr anmahnt.
Gehen Sie dazu in den Regelsatz [.guihint]#Periodic service discovery# und editieren Sie die bestehende Regel.
Dort finden Sie die Option [.guihint]#Severity of new host labels#:

image::labels_rule_periodic_service_discovery.png[alt="Regel für die regelmäßige Service-Erkennung."]

Diese ist per Default auf [.guihint]#Warning# eingestellt. Wählen Sie hier [.guihint]#OK - do not alert, just display# und der Check wird Ruhe geben.


[#sequence]
=== Reihenfolge der Labelzuordnung

Theoretisch kann es sein, dass das gleiche Label in mehreren Quellen gleichzeitig
und mit unterschiedlichen Werten definiert wird. Deswegen gibt es folgende Reihenfolge
des Vorrangs:

. Zuerst gelten die expliziten Labels, also solche, die Sie im Setup direkt dem Host oder Ordner zuordnen.
. An zweiter Stelle gelten Labels, die per Regeln erzeugt werden.
. An letzter Stelle stehen die automatisch erzeugten Labels.

Durch diese Vorrangregeln haben Sie stets die letztgültige Kontrolle über die Labels.


[#conditions]
== Labels als Bedingungen in Regeln


[#rule_conditions]
=== Bedingungen in Regeln

Eine wichtige Funktion von Labels ist die gleiche wie bei Host-Merkmalen: Nämlich ihre
Verwendung als Bedingung in xref:wato_rules#[Regeln]. Das ist vor allem bei automatisch
erzeugten Labels interessant, weil Sie so ihr Monitoring vollautomatisch
aufgrund von Informationen aus AWS, Azure, Kubernetes und Co anpassen können.

Folgendes Beispiel zeigt eine Regel, deren Bedingung so definiert ist, dass sie genau dann gilt, wenn der Host
das Label `state:bavaria`, aber nicht das Label `environment:test` hat:

image::labels_conditions.png[alt="Dialog zur Festlegung der Bedingungen mit Labels."]

Sie können in einer Regel sowohl Labels als auch Host-Merkmale verwenden. Diese werden
automatisch UND-verknüpft. Die Regel greift also nur dann, wenn
beide Bedingungen gleichzeitig erfüllt sind.

Beachten Sie, dass bei Labels die exakte Schreibweise wichtig ist.
Da Labels ohne Vorgaben festgelegt werden können, kann {CMK} Vertipper nicht erkennen. 
Immerhin: Beim Eintippen eines Labels schlägt {CMK} bereits existierende Labels vor, sofern sie zu ihrer bisherigen Eingabe passen.
Bei den Vorschlägen wird nicht nach Host- und Service-Labels unterschieden: es werden alle passenden Labels angeboten.

Falls das im Einzelfall
Schwierigkeiten bereitet, ist es eventuell günstiger, wenn Sie mit Host-Merkmalen
arbeiten -- denn diese arbeiten mit definierten Werten anstelle von freier Texteingabe.


[#notification_conditions]
=== Bedingungen in Benachrichtigungsregeln

Auch in xref:notifications#rules[Benachrichtigungsregeln] können Sie Labels als Bedingungen nutzen.
Das funktioniert analog zu den anderen verfügbaren xref:notifications#rule_conditions[Bedingungen], so dass Sie sich hier nicht
umgewöhnen müssen.
Wählen Sie [.guihint]#Match host labels# und geben Sie einfach ein, welche Labels ein Host oder Service haben muss, damit durch die Regel eine Benachrichtigung ausgelöst wird. Auch hier werden mehrere Labels durch die UND-Verknüpfung verbunden.


[#views]
== Labels in Tabellenansichten

Bisher haben wir fast ausschließlich über die Labels im Setup (oder der Konfigurationsumgebung) gesprochen.
Auch in der Monitoring-Umgebung sind die Labels sichtbar, z.B. in der Statusansicht eines Hosts:

image::labels_host_status.png[alt="Dialog mit dem Host-Status und den zugewiesenen Labels."]

Hier sehen Sie die Labels in den unterschiedlichen Farben, je nachdem, wie sie erzeugt wurden: Explizite Labels in violett, durch Regeln erzeugte in rot und per Discovery Check angelegte in gelb-ocker.

Die Farbtupfer der Label stechen nicht nur optisch aus der Ansicht hervor, sie sind dazu auch noch praktisch, weil  anklickbar und führen Sie dann zu einer Suche nach allen Hosts mit diesem Label weiter:

image::labels_search_filterbar.png[alt="Filterleiste mit Filter zur Suche nach einem Label.",width=60%]

Sie können die Suche durch Hinzufügen weiterer Labels verfeinern (die dann wieder UND-verknüpft werden) und die Suche nach Labels natürlich auch mit den anderen verfügbaren Suchparametern kombinieren.


[#service_labels]
== Service-Labels

Auch Services können Labels haben. Diese sind ähnlich zu den Host-Labels, allerdings
mit ein paar kleinen Unterschieden:

* Sie können Service-Labels nicht explizit vergeben. Diese können nur durch Regeln ([.guihint]#Service labels#) oder automatisch entstehen.
* Auch mit Service-Labels können Sie Bedingungen formulieren. In einem Regelsatz werden Ihnen die Service-Labels nur dann zur Eingabe angeboten, wenn die Regel auf einen Service matchen kann.
