// -*- coding: utf-8 -*-
// IGNORE Sicherungsfähige AUTORITÄT\SYSTEM Datafiles MSSQL datafile mssql msoledbsql sqlncli11 ini vbs sqloledb Securables
include::global_attr.adoc[]
= MSSQL überwachen
:revdate: draft
:title: MSSQL überwachen
:description: Mit dem {CMK} Plugin für Windows, Linux, Solaris und AIX überwachen Sie vollumfänglich Microsoft SQL.
:keywords: sql, db, database

{related-start}
link:agent_linux.html[Linux überwachen]
link:wato_monitoringagents.html[Monitoring-Agenten]
link:https://checkmk.com/de/integrations[Katalog der Check-Plugins^]
{related-end}

== Einleitung


{CMK} erlaubt Ihnen die umfangreiche Überwachung von Microsoft SQL Server. Eine vollständige Liste der Überwachungsmöglichkeiten können
Sie in unserem link:https://checkmk.com/integrations?tags=mssql[Katalog der Check-Plugins] nachlesen.
Unter anderem kann {CMK} die folgenden Werte überwachen:

* link:https://checkmk.com/integrations/mssql_availability_groups[MS SQL: Availability Groups^]
* link:https://checkmk.com/integrations/mssql_instance[MS SQL: General State^]
* link:https://checkmk.com/integrations/mssql_datafiles[MS SQL: Size of Datafiles^]
* link:https://checkmk.com/integrations/mssql_connections[MS SQL Database: Connections^]
* link:https://checkmk.com/integrations/mssql_jobs[MS SQL Database: Jobs^]
* link:https://checkmk.com/integrations/mssql_databases[MS SQL Database: Properties^]
* link:https://checkmk.com/integrations/mssql_blocked_sessions[MS SQL Server: Blocked Sessions^]
* link:https://checkmk.com/integrations/mssql_counters_cache_hits[MS SQL Server: Cache Hit Ratio^]
* link:https://checkmk.com/integrations/mssql_counters_pageactivity[MS SQL Server: Page Activity^]
* link:https://checkmk.com/integrations/mssql_counters_locks[MS SQL Tablespaces: Locks per Second^]
* link:https://checkmk.com/integrations/mssql_tablespaces[MS SQL Tablespaces: Size Information^]
* link:https://checkmk.com/integrations/mssql_counters_transactions[MS SQL Tablespaces: Transactions per Second^]

Um die Datenbanken überwachen zu können, benötigen Sie neben dem {CMK}-Agenten lediglich das Agenten-Plugin auf dem Datenbankserver.
Zusätzliche Software wird weder auf dem {CMK}- noch auf dem Datenbankserver benötigt.

Im Folgenden wird die Einrichtung für Windows-Hosts beschrieben.
Weiter unten gehen wir auf die Einrichtung über die xref:monitoring_mysql#bakery[Agent Bakery] ein.


== Einrichten der Überwachung

=== Verwendung des Systembenutzers

Wenn Sie den Systembenutzer (NT AUTORITÄT\SYSTEM) für das Monitoring verwenden können, achten Sie darauf, dass diese Anmeldung (Login), mindestens Berechtigungen für die folgenden [.guihint]#Sicherungsfähige Elemente (Securables)# benötigt:

* _Verbindung mit beliebiger Datenbank (Connect any database)_
* _View Server State_
* _Connect SQL_

In Abhängigkeit davon, welche Datenbanken Ihrer Instanzen Sie überwachen möchten und je nachdem über welche Serverrollen und Mappings der Systembenutzer (NT AUTORITÄT\SYSTEM) bereits verfügt, kann es notwendig sein, auch die Berechtigung für [.guihint]#Connect Any Database# zu erteilen.


[#benutzereinrichten]
=== Exkurs: Neuen Benutzer einrichten

Sollte es unbedingt notwendig sein, dass in Ihrem Unternehmen nicht der Systembenutzer verwendet wird, so müssen Sie in den zu überwachenden
Instanzen einen passenden Datenbankbenutzer für das Monitoring anlegen.
Die Grundvoraussetzung in MSSQL ist, dass die [.guihint]#Server authentication# auf [.guihint]#SQL Server and Windows Authentication mode# gestellt ist.
Wenn Sie nicht den Windows-eigenen Systembenutzer verwenden können, dürfte diese Voraussetzung zwar bereits erfüllt sein, sie soll aber auch nicht unerwähnt bleiben.
Melden Sie sich nun mit einem Benutzer mit ausreichenden
Zugriffsberechtigungen in MSSQL an und erstellen Sie über das Microsoft SQL Server Management Studio einen neuen Datenbankbenutzer.

image::mssql_new_user.png[alt="Auswahl der Option 'New Login...' in MSSQL.", width=38%]

Dieser neu angelegte Benutzer benötigt die oben genannte Berechtigung. Gehen Sie in den [.guihint]#Objekt-Explorer#.
Öffnen Sie [.guihint]#Sicherheit > Anmeldungen# und öffnen Sie die Eigenschaften der Anmeldung, welche Sie für das Agentenplugin konfiguriert haben.
Unter [.guihint]#Sicherungsfähige Elemente# finden Sie die explizite Berechtigung [.guihint]#Verbindung mit beliebiger Datenbank herstellen#, welche Sie erteilen müssen.

image::mssql_permissions.png[alt="Berechtigung 'Connect any database' erteilen."]

Alternativ können Sie den Benutzer und die Berechtigungen auch über die Befehlszeile erzeugen.
Im folgenden Beispiel wird das für den Benutzer `checkmk` erledigt:


[{sql}]
----
mssql> USE master;
      CREATE USER checkmk WITH PASSWORD = 'MyPassword123';
      GO
----

und danach:

[{sql}]
----
mssql> USE master;
      GRANT CONNECT ANY DATABASE TO checkmk;
      GO
----

==== Konfigurationsdatei erstellen

Auf dem Windows-Host legen Sie im unten angegebenen Verzeichnis eine Datei
names `mssql.ini` an.

.C:\ProgramData\checkmk\agent\config\mssql.ini
[{ini}]
----
[client]
user=checkmk
password=MyPassword123
----

Sollten Sie auf dem Host mehrere MSSQL-Instanzen mit verschiedenen Nutzernamen und Passwörtern betreiben, erstellen Sie einfach pro Instanz eine .ini-Datei nach dem folgenden Namensschema: `mssql_INSTANZ-ID.ini`


=== Plugin installieren

Der Agent für Windows wird standardmäßig bereits mit einer ganzen Reihe von Plugins ausgeliefert.
Deshalb finden Sie auch das Plugin für die Überwachung von MSSQL
nach der Installation des Agenten bereits auf Ihrem Host.
Dieses kopieren Sie für die Verwendung nur noch in das richtige Verzeichnis.

[{powershell}]
----
PS> copy "c:\Program Files (x86)\checkmk\service\plugins\mssql.vbs" c:\ProgramData\checkmk\agent\plugins\
----


=== Services einrichten

Nachdem Sie das Plugin nun installiert und konfiguriert haben, können Sie für diesen Host eine xref:hosts_setup#services[Service-Erkennung] durchführen.
Der folgende Screenshot zeigt dabei nur eine Auswahl der auffindbaren Services:

image::mssql_discovery.png[alt="Auszug der Service-Erkennung."]


== Erweiterte Konfiguration

=== Asynchrone Ausführung des Plugins

Das Plugin für die Überwachung von MSSQL kann - wie so viele andere -
asynchron ausgeführt werden, um beispielsweise längeren Laufzeiten bei großen MSSQL-Instanzen Rechnung zu tragen.

Um das Plugin unter Windows asynchron auszuführen, passen Sie die Konfiguration des Agenten an und erweitern die Sektion `execution` unter
`plugins` um den folgenden Eintrag:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{yaml}]
----
plugins:
    execution:
        - pattern: mssql.vbs
          cache_age: 300
          async: yes
----

Eine detaillierte Anleitung zur asynchronen Ausführung von Plugins auf einem
Windows-Host finden Sie im Artikel über den
xref:agent_windows#customizeexecution[Windows-Agenten].


=== Schwellwerte konfigurieren

==== Verbindungen überwachen

Für die Auslastung der durch MSSQL vorgegebenen maximalen Anzahl an
gleichzeitigen Verbindungen können Sie eigene Schwellwerte vorgeben, da diese viel stärker als bei anderen Services vom Aufbau Ihrer MSSQL-Instanz abhängig sind.
Die Einrichtung entsprechender Schwellwerte lässt sich mit einer Regel aus dem Satz [.guihint]#MSSQL Connections# im Handumdrehen bewerkstelligen.

image::mssql_connections.png[alt="Einstellung der oberen Schwellwerte für aktive Verbindungen."]


==== Dateigröße überwachen

Auch für die Größe einzelner Dateien in MSSQL können Sie Schwellwerte festlegen.
Dazu verwenden Sie die Regel [.guihint]#MSSQL datafile sizes.#

image::mssql_size_datafile.png[alt="Einstellung der genutzten Dateigrößen."]



[#bakery]
== Konfiguration über die Agent Bakery

{cee-only}
Die Einrichtung wird in den kommerziellen Editionen mittels der xref:wato_monitoringagents#bakery[Agent Bakery]
sehr vereinfacht, da Syntaxfehler in den Konfigurationsdateien vermieden werden und Anpassungen an sich verändernde Umgebungen einfach bewerkstelligt werden können.
Der wesentliche Unterschied zu einer manuellen Installation ist, dass
Sie nur noch dann auf dem MSSQL-Host auf der Kommandozeile arbeiten müssen, wenn Sie spezielle MSSQL-spezifische Konfigurationen vornehmen möchten.

Für die erste Einrichtung reicht es, wenn Sie den
xref:monitoring_mssql#benutzereinrichten[Datenbankbenutzer auf dem MSSQL-Host einrichten] und eine entsprechende Regel in der Bakery anlegen.
Sie finden den Regelsatz unter [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules#.
In dem Suchfeld können Sie dann nach `mssql` suchen:

[{image-border}]
image::mssql_bakery_ruleset_search.png[alt="Anzeige der Regel 'Microsoft SQL Server' in der Suchmaske der Agentenregeln."]

Wählen Sie in der neuen Regel im Abschnitt [.guihint]#Microsoft SQL Server (Windows)# idealerweise die Option [.guihint]#System Authentication# für eine einfache und problemlose Anbindung.

image::mssql_bakery.png[alt="Mögliche Einstellungen für den MSSQL Server in der Bakery."]

Entscheiden Sie sich stattdessen für die Option [.guihint]#Database User Credentials#, so müssen Sie zusätzlich [.guihint]#User ID# und [.guihinnt]#Password# des gewünschten Datenbanknutzers angeben (z.B. des Benutzers, den Sie im xref:benutzereinrichten[Exkurs: Neuen Benutzer einrichten] angelegt haben).


== Diagnosemöglichkeiten

Sollte es beispielsweise bei der Einrichtung der Überwachung zu unerwartetem
Verhalten oder Problemen kommen, so empfiehlt sich eine Prüfung direkt auf einem betroffenen Host.
Da es sich bei dem Plugin für die Überwachung von MSSQL um Shell- bzw. Visual Basic-Skripte handelt, können diese leicht auch ohne den Agenten ausgeführt werden.
Der Shell bzw. der Kommandozeile muss vorher nur das jeweilige Konfigurationsverzeichnis bekannt gemacht werden.

Um das Check-Plugin manuell anführen zu können, öffnen Sie
zuerst eine Kommandozeile mit Admin-Rechten.
Setzen Sie in dieser Kommandozeile nun die Umgebungsvariable `MK_CONFDIR`.
Diese wird benötigt, damit das Plugin Ihre Konfigurationsdateien finden kann.

[{powershell}]
----
PS> set MK_CONFDIR=c:\ProgramData\checkmk\agent\config
----

*Wichtig:* Auch hier ist die gesetzte Umgebungsvariable nicht permanent,
sondern besteht nur, solange diese Kommandozeile offen ist.

Bei der eigentlichen Ausführung des Plugins empfiehlt es sich, die Ausgabe auf die Kommandozeile umzulenken.
Zu diesen Zwecks liefert Windows das Bordwerkzeug `cscript` mit.

[{powershell}]
----
PS> cscript c:\ProgramData\checkmk\agent\plugins\mssql.vbs
----


=== Mögliche Fehler und Fehlermeldungen

==== Failed to connect to database

Es gibt drei verschiedene Treiber mit deren Hilfe Checkmk alternativ versucht sich mit der MSSQL-Datenbank zu verbinden: msoledbsql, sqloledb und sqlncli11.

Standardmäßig sind alle drei in der Regel vorhanden und werden beim Verbindungsaufbau nacheinander getestet.
In einzelnen Fällen kann es vorkommen, dass diese sukzessive Abarbeitung zu Fehlermeldungen führt.
Gegebenenfalls müssen Sie dann ein oder sogar zwei der genannten Treiber aus der Syntax des Aufrufs entfernen.


==== mssql.vbs: "no backup found"

Meldet ein Plugin "no backup found", so sollten Sie als erstes manuell prüfen, ob ein Backup vorhanden ist.
Ist ein Backup vorhanden und das Problem besteht dennoch weiter, so liegt dies möglicherweise an den Namenskonventionen auf der MSSQL-Seite.

Checkmk interpretiert Hostnamen grundsätzlich in Kleinbuchstaben, werden diese aber im Rahmen der Backups vom Host beispielsweise in Großbuchstaben übermittelt, so entstehen Verständigungsprobleme.

Sie können dann den Wert der `serverproperty('collation')` auf der MSSQL-Seite prüfen.
Ist hier zum Beispiel `SQL_Latin1_General_CP1_CS_AS` gesetzt, so steht „CS“ für „Case Sensitive“.
Das Plugin kann den Host-Namen dann nicht anpassen und es kann zu Problemen aufgrund der Schreibweise kommen.
Ein Wechsel auf `SQL_Latin1_General_CP1_CI_AS`, d.h. auf „CI“ für „Case Insensitive“ sollte das Problem beheben.

Alternativ können Sie natürlich auch die Schreibweise des ursprünglichen Namens des MSSQL-Servers ändern.
Dies ist nur nicht in jedem Unternehmen und in jeder Umgebung möglich.


== Dateien und Verzeichnisse

=== Auf dem MSSQL-Host

==== Windows

[cols="55,~",options="header"]
|===
|Pfad |Verwendung
|`C:\ProgramData\checkmk\agent\plugins\` |übliches Plugins-Verzeichnis
|`C:\ProgramData\checkmk\agent\config\` | übliches Konfigurationsverzeichnis
|===


=== Auf dem {CMK}-Server

[cols="55,~",options="header"]
|===
|Pfad |Verwendung
|`share/check_mk/agents/plugins/mssql` |Das Plugin, welches auf dem MSSQL-Host die Daten holt.
|===



