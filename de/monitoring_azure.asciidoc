include::global_attr.adoc[]
= Microsoft Azure überwachen
:revdate: 2021-12-30
:title: Microsoft Azure überwachen
:description: Die Integration von Microsoft Azure in {CMK} ermöglicht die nahtlose Überwachung von Cloud und On-Premises in einer Oberfläche und wird hier im Detail beschrieben.

== Einleitung

[{image-left}]
image::azure_logo.png[width=140]

Azure ist Microsofts Antwort auf die Cloud und ermöglicht Benutzern die
Nutzung der Ansätze der Infrastructure as a Service (IaaS), Platform as a
Service (PaaS) und Software as a Service (SaaS).

Auch wenn einem Microsoft das Betreiben der entsprechenden Hard- und
Softwarekomponenten abnimmt, ist ein eigenes Monitoring hier trotzdem
nötig und sinnvoll. Allerdings muss dies auf andere Art erfolgen als
// MA: Weshalb ist das sinnvoll und nötig? Warum ist es sinnvoller die API zu nutzen, als Agenten auf den VMs zu installieren?
mit einem normalen {CMK}-Agenten. Seit Version {v15}p12 unterstützt {CMK} das Überwachen
von Azure durch einen eigenen xref:datasource_programs#[Spezialagenten] sowie
eine Reihe von Check-Plugins. Aktuell sind dies die folgenden:

* link:https://checkmk.de/cms_check_azure_agent_info.html[Microsoft Azure Agent Info]
* link:https://checkmk.de/cms_check_azure_databases.html[Microsoft Azure SQL Databases]
* link:https://checkmk.de/cms_check_azure_databases_cpu.html[Microsoft Azure SQL Databases: CPU utilization]
* link:https://checkmk.de/cms_check_azure_databases_connections.html[Microsoft Azure SQL Databases: Connections]
* link:https://checkmk.de/cms_check_azure_databases_deadlock.html[Microsoft Azure SQL Databases: Deadlocks]
* link:https://checkmk.de/cms_check_azure_databases_storage.html[Microsoft Azure SQL Databases: Storage]
* link:https://checkmk.de/cms_check_azure_databases_dtu.html[Microsoft Azure SQL Databases: Throughput units]
* link:https://checkmk.de/cms_check_azure_storageaccounts.html[Microsoft Azure Storage Accounts]
* link:https://checkmk.de/cms_check_azure_storageaccounts_flow.html[Microsoft Azure Storage Accounts: Data flow]
* link:https://checkmk.de/cms_check_azure_storageaccounts_performance.html[Microsoft Azure Storage Accounts: Performance]
* link:https://checkmk.de/cms_check_azure_virtualmachines.html[Microsoft Azure Virtual Machines]
* link:https://checkmk.de/cms_check_azure_virtualmachines_summary.html[Microsoft Azure Virtual Machines: Summary]
* link:https://checkmk.de/cms_check_azure_virtualnetworkgateways.html[Microsoft Azure Virtual Network Gateways]
* link:https://checkmk.de/cms_check_azure_sites.html[Microsoft Azure Webserver]

Da wir die Unterstützung des Azure-Monitorings fortlaufend weiterentwickeln,
werden weitere Plugins hinzukommen. Bitte beachten Sie auch, dass bis zur
Version {v16} noch strukturelle Änderungen an der Umsetzung
möglich sind und Sie daher Ihre Konfiguration eventuell nocheinmal anpassen
müssen.


== Azure für {CMK} vorbereiten

=== App anlegen

Um Azure mit {CMK} zu überwachen, benötigen Sie Ihre Subskriptions-ID
und Ihre Tenant-ID (auch bekannt als „Directory-ID“).

Registrieren Sie zunächst das {CMK}-Monitoring als App, damit Sie mit der API von Azure arbeiten können. Sie die Option dafür im
link:https://portal.azure.com[Azure-Portal] unter
[.guihint]#Azure Active Directory > App registrations > New registration#:

[{image-border}]
image::azure_register_1.png[]

Vergeben Sie einen Namen Ihrer Wahl. Im Beispiel verwenden wir `my-check-mk-app`.
Dieser ist jedoch nur informativ. Der Bezug auf die App wird stattdessen über eine UUID
hergestellt, die Sie in einem späteren Schritt angezeigt bekommen.  Im
Abschnitt [.guihint]#Supported account types# müssen Sie nichts ändern.
Die [.guihint]#Redirect URI# können Sie optional setzen.
// MA: Ist hier nicht eher die Sign-on URL gemeint? Home Page kommt ja erst im nächsten Screenshot. Wird das eine aus dem anderen generiert? Dann wäre es ja nicht egal, was ich da eintrage.

Wählen Sie nach dem Anlegen die neue App in der Liste der Apps aus.
Wenn diese in der Liste nicht angezeigt wird, dann stellen
Sie die Auswahl [.guihint]#My apps# auf [.guihint]#All apps# um. In den Details der App
finden Sie auch die [.guihint]#Application (client) ID#, welche Sie später benötigen. Die [.guihint]#Object-ID#
ist nicht notwendig.

[{image-border}]
image::azure_register_2.png[]


=== Rechtevergabe für die App

Damit Ihre neue App Zugriffsrechte auf die Monitoring-Daten bekommt, müssen Sie
diese hier vergeben. Wählen Sie dazu in der Hauptnavigation auf der linken
Seite den Punkt [.guihint]#All resources# und hierin den Punkt [.guihint]#Subscriptions#:

[{image-border}]
image::azure_subscriptions.png[]

In der Navigation dieser Seite gehen Sie auf [.guihint]#Access Control (IAM)# und dort
auf [.guihint]#Add# und [.guihint]#Add role assignment#:

[{image-border}]
image::azure_access_control.png[]

Tragen Sie nun die Rolle [.guihint]#Reader#, bei [.guihint]#Assign access to# den Wert
[.guihint]#Azure AD user, group, or service principal# und bei [.guihint]#Select# den Namen
Ihrer neuen App ein:

image::azure_role_assignment.jpg[width=380]


=== Schlüssel für die App anlegen

Nun brauchen Sie noch einen Schlüssel (ein Secret), mit dem sich {CMK} bei der
API anmelden kann. Diesen legen Sie bei den Eigenschaften der App unter
[.guihint]#Certificates & secrets# an. Der Eintrag dazu heißt [.guihint]#Client secrets#.
Wir wählen hier [.guihint]#New client secret#.

[{image-border}]
image::azure_register_5.png[]

Microsoft möchte im folgenden Fenster, dass Sie in das Feld [.guihint]#Description#
einen Namen Ihrer Wahl eintragen. Wir wählen hier `my-check-mk-key`.
Vergessen Sie nicht, bei [.guihint]#Expires# eine für Sie passende Wahl zu treffen.

image::azure_register_6.png[width=175]

Die Einrichtung unter Azure ist nun abgeschlossen und Sie sollten jetzt
über die folgenden vier Informationen verfügen:

. Ihre Subskriptions-ID
. Ihre Tenant-ID (auch bekannt als „Directory-ID“).
. Die Application-ID (Client-ID) der App [.guihint]#my-check-mk-app#
. Das Geheimnis des Keys [.guihint]#my-check-mk-key# zu dieser App

Falls Sie Ihrer Tenant-ID nicht zur Hand haben, finden Sie diese wenn Sie
mit der Maus über Ihren Login-Namen fahren im in der aufpoppenden Hilfe unter
[.guihint]#Directory: Standardverzeichnis....#:

image::azure_register_tenant_id.png[width=600]

Die Subscriptions-ID können Sie z.B. auf der Seite [.guihint]#Cost Management + Billing#
unter [.guihint]#My subscriptions# einsehen. *Wichtig*: Microsoft zeigt inzwischen
nicht mehr einen Hash, sondern einen von Menschen lesbaren Namen als ID an. Sie
können diesen ganz normal nutzen.


== Überwachung in {CMK} einrichten

=== Azure-Host

Auch wenn Sie es bei Azure nicht mit einem physikalischen Host zu tun haben,
legen Sie in {CMK} für Ihr Azure-Directory einen Host an. Den Hostnamen
können Sie nach Belieben vergeben. Wichtig: Da Azure ein Dienst ist und daher
keine IP-Adresse oder DNS-Namen hat (den Zugriff macht der Spezial-Agent von
selbst), müssen Sie die [.guihint]#IP Address Family# auf auf [.guihint]#No IP# einstellen.

image::azure_wato_no_ip.png[]

Speichern Sie am besten mit [.guihint]#Save & Finish#, da die Serviceerkennung
natürlich noch nicht funktionieren kann.

=== Den Azure-Agent konfigurieren

Da Azure nicht über den normalen {CMK}-Agenten abgefragt werden
kann, richten Sie jetzt den Azure-Spezialagenten ein, welcher auch als
xref:datasource_programs#[Datenquellenprogramm] bezeichnet wird. Hierbei kontaktiert
{CMK} den Zielhost nicht wie üblich über TCP Port 6556, sondern ruft
stattdessen ein Hilfsprogramm auf, welches mit dem Zielsystem über ein
die anwendungsspezifische API von Azure kommuniziert.

Dazu legen Sie unter [.guihint]#Setup > Agents > VM, Cloud, Container > Microsoft Azure#
eine Regel an, deren xref:wato_rules#conditions[Bedingungen] ausschließlich auf den gerade angelegten Azure-Host
greifen. Dort finden Sie die Eingabefelder für die IDs und das Secret:

image::azure_agent_rule.png[]

Hier können Sie auch die Ressourcengruppen oder Ressourcen auswählen, die
Sie überwachen möchten. Wenn Sie [.guihint]#explicitely specified groups# *nicht*
angekreuzt haben, werden automatisch alle Ressourcegruppen überwacht.

=== Test

Wenn Sie jetzt eine Serviceerkennung auf dem Azure-Host machen, sollte auf
diesem ein einziger Service mit dem Namen [.guihint]#Azure Agent Info# erkannt werden:

image::azure_services_ok.png[]

Falls der Zugriff auf die API nicht klappt (z.B. wegen einer falschen ID oder
fehlerhaften Berechtigungen), erscheint im Statustext von [.guihint]#Azure Agent Info#
eine Fehlermeldung der Azure-API:

image::azure_services_fail.png[]

=== Ressourcegruppen als Hosts verfügbar machen

Aus Gründen der Übersichtlichkeit ist das Azure-Monitoring von {CMK}
so aufgebaut, dass jede Azure-Ressourcengruppe durch einen (sozusagen
logischen) Host im {CMK} repräsentiert wird. Dies geschieht mit Hilfe des
xref:piggyback#[Piggyback-Verfahrens]. Dabei werden Daten, die vom Azure-Host
per Spezialagenten abgerufen werden, innerhalb von {CMK} an diese
Ressourcengruppen-Hosts umgeleitet.

Die Ressourcengruppen-Hosts erscheinen nicht automatisch im {CMK}. Legen Sie
diese Hosts entweder von Hand an oder optional mit dem neuen xref:dcd#[Dynamic Configuration Daemon (DCD)].  Wichtig
dabei ist, dass die Namen der Hosts exakt mit den Namen der Ressourcengruppen
übereinstimmen -- und zwar auch die Groß-/Kleinschreibung! Wenn Sie sich über
die genaue Schreibung der Gruppen unsicher sind, können Sie diese direkt
aus dem Service [.guihint]#Azure Agent Info# auf dem Azure-Host ablesen.

Übrigens: mit dem Hilfsskript `find_piggy_orphans` aus dem
Treasures-Verzeichnis finden Sie alle Piggyhosts, für es Daten gibt, die
aber noch nicht als Host im {CMK} angelegt sind:

[{shell}]
----
{c-omd} share/doc/check_mk/treasures/find_piggy_orphans
Glastonbury
Woodstock
----

Konfigurieren Sie die Ressourcengruppen-Hosts ohne IP-Adresse (analog zum
Azure-Host) und wählen Sie als Agent [.guihint]#No API integrations, no Checkmk agent# und als Piggyback [.guihint]#Always use and expect piggyback data# aus.

image::wato_host_no_agent.png[]

Wenn Sie jetzt die Serviceerkennung zu einem dieser Ressourcengruppen-Hosts machen,
finden Sie dort weitere Services, welche speziell diese Ressourcengruppe betreffen:

image::azure_services_piggy.png[]

==== Andere Namen für die Ressourcengruppen-Hosts wählen

*Tipp:* Wenn Sie die Namen der Ressourcengruppen-Hosts frei wählen möchten,
können Sie mit der Regel
[.guihint]#Setup > Agents > Access to Agents > Hostname translation for piggybacked hosts#
eine Umrechnung von Ressourcengruppen zu Hosts definieren.

=== Virtuelle Maschinen (VMs)

Wenn Sie über Azure virtuelle Maschinen überwachen, welche Sie gleichzeitig als normale Host
in {CMK} haben, können Sie die Azure-Services, welche sich auf diese VMs beziehen, anstelle
zu den Ressourcengruppen-Hosts direkt zu den VM-Hosts in {CMK} zuordnen lassen. Wählen
Sie dazu in der Azure-Regel bei der Option [.guihint]#Map data relating to VMs# die Einstellung
[.guihint]#Map data to the VM itself#. Damit dies funktioniert, muss der {CMK}-Host der VM im Monitoring
den exakt gleichen Namen haben wie die entsprechende VM in Azure.

=== Rate-Limit der API-Abfragen

Stand heute sind die API-Abfragen, die {CMK} zum Monitoring benötigt,
bei Azure kostenlos (im Gegensatz zu xref:monitoring_aws#[AWS]). Allerdings gibt
es eine Begrenzung in der Anzahl der Abfragen pro Zeit („Rate Limit“). Pro
Application-ID liegt die Grenze bei 12.000 Leseabfragen pro Stunde.

Aufgrund der Bauart der API benötigt {CMK} pro abgefragte Ressource
mindestens eine oder mehrere Abfragen. Daher skaliert die Gesamtzahl der
benötigten Abfragen linear mit der Anzahl der überwachten Ressourcen. Wird
das Ratelimit erreicht oder überschritten, scheitert die Abfrage mit einem
HTTP-Code 429 (Too many requests) und der {CMK}-Service des Azure-Hosts
geht auf kritisch.

Das Rate-Limit ist von Azure als sogenannter „Token Bucket“
Algorithmus realisiert. Alles beginnt damit, dass Sie ein „Guthaben“ von 12.000
verbleibenden Abfragen haben. Jede Abfrage verbraucht davon einen. Gleichzeitig
kommen 3,33 Abfragen pro Sekunde zum Guthaben dazu. In der Ausgabe des Services
[.guihint]#Azure Agent Info# sehen Sie, wie viele Abfragen aktuell noch übrig sind.

Konkret bedeutet das:

* Wenn Ihre Abfragerate ausreichend klein ist, sind die verfügbaren Abfragen immer knapp unter 12.000.
* Wenn Ihre Rate zu hoch ist, sinkt das Guthaben langsam auf 0 und es werden dann sporadisch Fehler bei der Abfrage auftreten.

In diesem Fall können Sie die Abfragerate reduzieren, indem Sie weniger
Ressourcengruppen oder Ressourcen abfragen oder indem Sie das Check-Intervall
des aktiven Checks {CMK} auf dem Azure-Host reduzieren. Dies geht
mit der Regel [.guihint]#Monitoring Configuration > Normal check interval for service checks#.

Damit Sie rechtzeitig reagieren können, überwacht der Service
[.guihint]#Azure Agent Info# die Anzahl der verbleibenden Abfragen und warnt Sie rechtzeitig
vorher. Per Default ist die Warnschwelle bei 50% und die kritische Schwelle
bei 25% verbleibender Abfragen.

