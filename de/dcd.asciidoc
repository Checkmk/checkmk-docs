// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= Dynamische Host-Konfiguration
:revdate: 2022-05-25
:title: Dynamische Host-Konfiguration - Überwachen von dynamischen Infrastrukturen
:description: {CMK} kann flüchtige Infrastrukturen durch dynamisches Hinzufügen und Löschen von Hosts in einem vollautomatischen Verfahren verwalten.

{related-start}
xref:piggyback#[Der Piggyback-Mechanismus]
xref:monitoring_aws#[Amazon Web Services (AWS) überwachen]
xref:monitoring_azure#[Microsoft Azure überwachen]
xref:monitoring_kubernetes#[Kubernetes überwachen]
xref:monitoring_docker#[Docker überwachen]
xref:monitoring_vmware#[VMWare ESXi überwachen]
{related-end}


== Einleitung

[{image-left}]
image::dcd_large_icon_dcd_connections.png[alt="Symbol für Dynamische Host-Konfiguration.",width=100%]

In Cloud- und Containerumgebungen ist es immer öfter der Fall, dass zu überwachende
Hosts automatisch entstehen und vergehen. Die Konfiguration des Monitorings hier
aktuell zu halten, ist manuell nicht mehr sinnvoll möglich. Aber auch klassische
Infrastrukturen wie z.B. VMware-Cluster können sehr dynamisch sein, und selbst wenn
eine manuelle Pflege hier noch möglich ist, ist sie doch auf jeden Fall lästig.

Die {CEE} von {CMK} unterstützen Sie bei diesem
Thema mit einem smarten Werkzeug: dem _Dynamic Configuration Daemon_
oder kurz _DCD_. Die dynamische Konfiguration von Hosts bedeutet, dass
aufgrund von Informationen aus der Überwachung von xref:monitoring_aws#[AWS],
xref:monitoring_azure#[Azure], xref:monitoring_kubernetes#[Kubernetes],
xref:monitoring_vmware#[VMware] und anderen Quellen vollautomatisch Hosts in das
Monitoring aufgenommen, aber auch wieder entfernt werden können.

Der DCD ist dabei sehr generisch gehalten und nicht auf das Anlegen von Hosts
beschränkt. Er bildet die Grundlage für künftige Erweiterungen von {CMK},
welche dynamisch die Konfiguration anpassen. Das kann z.B. auch
das Verwalten von Benutzern bedeuten. Zu diesem Zweck arbeitet der DCD
mit sogenannten _Konnektoren_. Jeder Konnektor kann aus einer ganz
bestimmten Art von Quelle Informationen holen und hat dazu seine eigene
spezifische Konfiguration.

Mit speziellen Konnektoren wird es in Zukunft noch einfacher werden,
Hosts aus einer vorhandenen CMDB automatisch nach {CMK} zu übernehmen.


== Verwalten von Hosts mit dem DCD

=== Der Piggyback-Konnektor

Derzeit ist der DCD von {CMK}
nur mit einem einzigen Konnektor ausgestattet: demjenigen für
xref:piggyback#[Piggyback-Daten]. Dieser ist jedoch sehr universell, denn der
Piggyback-Mechanismus wird von {CMK} in allen Situationen verwendet, wo die
Abfrage von einem Host (meist per Spezialagent) Daten zu anderen Hosts liefert
(meist virtuelle Maschinen oder Cloud-Objekte).

Hier sind einige Beispiele,
wo {CMK} bei der Überwachung Piggyback einsetzt:

* xref:monitoring_aws#[AWS]
* xref:monitoring_azure#[Azure]
* xref:monitoring_kubernetes#[Kubernetes]
* xref:monitoring_docker#[Docker]
* xref:monitoring_vmware#[VMware]

In allen diesen Fällen werden beim Monitoring automatisch Daten zu anderen
Hosts (z.B. den VMs) geholt, die nicht direkt per Netzwerk angesprochen werden und auf
denen auch kein {CMK}-Agent laufen muss. Mit dem DCD können Sie solche Hosts
automatisch ins Monitoring aufnehmen und auch wieder entfernen lassen, um so immer
zeitnah die Realität abzubilden.

Dazu analysiert der DCD die vorhandenen Piggyback-Daten, vergleicht, welche
der Hosts bereits im Setup vorhanden sind und legt die fehlenden Hosts neu
an bzw. entfernt inzwischen weggefallene.  Dabei sind Hosts, welche vom DCD
automatisch angelegt wurden, trotzdem für Sie in der Setup-GUI editierbar.

[#user_automation]
=== Der Benutzer 'automation'

// MFS: Bitte CMK-10478 beobachten, möglicherweise wird die UX hier noch intuitiver gestaltet.
In {CMK} gibt es standardmässig den Benutzer xref:wato_user#automation[automation].
Dieser Benutzer wird von {CMK} angelegt, um automatisierte Abrufe durchführen zu können.
Ein existierender Automatisierungsbenutzer ist auch für die dynamische Host-Konfiguration zwingend notwendig.

Haben Sie, aus welchen Gründen auch immer, in Ihrem System diesen Benutzer gelöscht oder geändert, so müssen Sie einen anderen Benutzer mit automatisiertem Zugriff auf die API schaffen.
In diesem Fall öffnen Sie über [.guihint]#Setup > General > Global settings# die globalen Grundeinstellungen:

image::dcd_basic_settings.png[alt="Automationsbenutzer in den Grundeinstellungen."]

Mit einem Klick auf [.guihint]#Credentials: Use "Checkmk Automation" user# kommen Sie zur Bearbeitungsseite der Web-API Verbindung:

image::dcd_connection_WebAPI.png[alt="Umstellung des Automationsbenutzers."]

Hier können Sie einen anderen Benutzer und dessen Zugriffsdaten (Name, Passwort) eintragen oder Änderungen am bestehenden Automationsbenutzer eintragen.
Sobald Sie die Änderungen mit icon:icon_save[alt="Symbol für das Speichern."] [.guihint]#Save# gespeichert haben, wird der definierte Benutzer für die Automatisierung genutzt und Sie können mit der dynamischen Host-Konfiguration fortfahren.


=== Dynamische Konfiguration einrichten

==== Sind Piggyback-Daten da?

Als einzige Voraussetzung, um den DCD zu nutzen, benötigen Sie
Piggyback-Daten. Diese haben Sie immer dann, wenn Sie das Monitoring für AWS,
Azure und Co. korrekt aufgesetzt haben. Sie können das auch leicht auf der
Kommandozeile überprüfen, denn die Piggyback-Daten werden von {CMK} im Verzeichnis `tmp/check_mk/piggyback`
angelegt:

[{shell}]
----
{c-omd} ls tmp/check_mk/piggyback
myvm01  myvm02  myvm03
----

Wenn dieses Verzeichnis nicht leer ist, dann wurden in dieser Instanz Piggyback-Daten erzeugt.


==== Generelle Einstellungen eines Konnektors

Gehen Sie nun in die Host-Verwaltung.
Der Menüeintrag [.guihint]#Setup > Hosts > Dynamic host management# bringt Sie zur Konfiguration
des DCD beziehungsweise dessen Konnektoren:

image::dcd_connections_empty.png[alt="Die Seite 'Dynamic host management' mit leerer Konnektorenliste."]

Legen Sie mit icon:icon_new[] [.guihint]#Add connection# eine neue Verbindung an.
Der erste Teil der Konfiguration sind die [.guihint]#General Properties#:

image::dcd_connection_general.png[alt="Allgemeine Eigenschaften beim Hinzufügen eines neuen Konnektors."]

Hier vergeben Sie, wie so oft, eine eindeutige ID dieses Konnektors und
einen Titel. Wichtig ist ferner die Auswahl der {CMK}-Instanz, auf der dieser
Konnektor laufen soll. Da Piggyback-Daten immer nur lokal verarbeitet werden
können, muss der Konnektor immer einer konkreten Instanz zugeordnet werden.


==== Eigenschaften des Konnektors

Der zweite Teil sind die [.guihint]#Connection Properties#:

image::dcd_connection_properties.png[alt="Einstellungen des Konnektors im Detail."]

Hier ist bereits der Konnektor [.guihint]#Piggyback data# vorausgewählt
(und aktuell auch der einzig mögliche).

Mit dem [.guihint]#Sync interval# bestimmen Sie, wie oft der Konnektor nach neuen Hosts suchen
soll. Wenn Sie den regulären Check-Zeitraum von einer Minute beibehalten haben, macht es
keinen Sinn, das wesentlich öfter zu machen, da ja maximal einmal pro Minute eine Änderung
der Piggyback-Daten stattfinden kann. In dynamischeren Umgebungen können Sie sowohl
Check-Zeitraum als auch Konnektorintervall auch auf deutlich kleinere Werte einstellen.
Dies hat allerdings auch eine höhere CPU-Auslastung auf dem {CMK}-Server zur Folge.

Wichtig ist jetzt, dass Sie unter [.guihint]#Piggyback creation options# mindestens ein neues Element hinzufügen ([.guihint]#Add new element#).
Damit gelangen Sie zu den Einstellungen für automatisch erzeugte Hosts:

image::dcd_connection_properties_2.png[alt="Ordner, in dem Hosts erstellt werden und Datenquellen, die hierfür herangezogen werden."]

Hier können Sie zwei wichtige Dinge festlegen: In welchem Ordner die Hosts erzeugt werden sollen (hier z.B. [.guihint]#AWS Cloud 02#)
und welche Host-Attribute gesetzt werden sollen (für letzteres müssen Sie den xref:intro_gui#show_less_more[Show-more-Modus] aktiviert haben). Vier wichtige Attribute sind dabei voreingestellt, welche für piggybacked Hosts
meistens Sinn ergeben:

. Kein Monitoring per SNMP.
. Kein {CMK}-Agent auf dem Host selbst (Daten kommen ja per Piggyback).
. Piggyback-Daten werden immer erwartet (und es gibt einen Fehler, wenn diese fehlen).
. Die Hosts haben keine IP-Adresse.

*Wichtig:* Nur wenn Sie [.guihint]#Delete vanished hosts# aktivieren, werden Hosts auch
wieder entfernt, wenn Sie in Ihrer dynamischen Umgebung verschwunden sind.

Möchten Sie nicht automatisch alle Hosts anlegen,
so können Sie das mit der Option [.guihint]#Only add matching hosts# mit einem xref:regexes#[regulären Ausdruck]
einschränken. 
*Wichtig:*Gemeint sind hier die Hosts, welche _angelegt_ werden und _nicht_
die Hosts, über die Sie die Überwachung von z.B. AWS eingerichtet haben.

Letzteres können Sie mit der Option [.guihint]#Restrict source hosts# erreichen. Diese
bezieht sich auf die Namen der Hosts, welche Piggyback-Daten _erzeugen_.


==== Änderungen aktivieren

Zwei weitere Optionen befassen sich mit dem automatischen Aktivieren von
Änderungen -- für den Fall, dass wirklich Hosts angelegt oder entfernt
wurden. Denn nur dadurch tauchen diese dann auch im Monitoring auf.

Wenn das xref:wato.html#activate_changes[Aktivieren der Änderungen] bei Ihrer Instanz sehr lange dauert, können Sie mit
[.guihint]#Group "Activate changes"# dafür sorgen, dass das nach Möglichkeit nicht bei jedem neuen
Host sofort passiert, sondern nachdem einige „zusammengekommen" sind.

Ferner können Sie das automatische Aktivieren von Änderungen auch für bestimmte Tageszeiten
komplett verbieten -- z.B. für die Tageszeiten, wo ihr Monitoring-System aktiv betreut wird.
Denn wenn der DCD Änderungen aktiviert, werden auch alle anderen Änderungen aktiv, die Sie
oder ein Kollege gerade gemacht haben!

Nachdem Sie gespeichert haben, erscheint der Konnektor in der Liste. Er kann aber erst ausgeführt werden, wenn Sie die Änderungen aktiviert haben.
Erst dadurch nimmt er seinen Dienst auf. Lassen Sie sich daher nicht von der Meldung
[.guihint]#Failed to get the status from DCD (The connection 'piggy01' does not exist)#
irritieren, welche zunächst nach dem Speichern erscheint.


== Den Konnektor in Betrieb nehmen

=== Erstes Aktivieren

Nach dem Speichern der Konnektoreigenschaften und einem Aktivieren der Änderungen nimmt die
Verbindung automatisch ihren Betrieb auf. Das kann so schnell gehen, dass Sie bereits
direkt nach dem Aktivieren der Änderungen sehen, wie Hosts im Monitoring angelegt wurden:

image::dcd_pending_changes.png[alt="Liste der anstehenden Änderungen unmittelbar vor der automatischen Übernahme ins Monitoring."]

Wenn Sie diese Seite kurz darauf neu laden, sind diese Änderungen wahrscheinlich schon
wieder verschwunden, weil sie ja vom DCD automatisch aktiviert wurden. Die neuen Hosts
sind dann bereits im Monitoring und werden regelmäßig überwacht.


== Automatisches Löschen von Hosts

=== Wann werden Hosts entfernt?

Wie oben erwähnt, können Sie den DCD selbstverständlich Hosts, die es
„nicht mehr gibt“, automatisch aus dem Monitoring löschen lassen. Das klingt erst einmal
sehr logisch. Was _genau_ das „nicht mehr gibt“ allerdings bedeutet, ist
auf den zweiten Blick doch etwas komplexer, da es verschiedene Fälle zu
betrachten gibt. Wir gehen in folgender Übersicht davon aus, dass Sie
die Löschoption aktiviert haben. Denn sonst werden grundsätzlich nie
Hosts automatisch entfernt.

[cols="30,~"]
|===
|Situation |Was geschieht? 

|Entfernen eines DCD-Konnektors |Wenn Sie einen DCD-Konnektor stilllegen ([.guihint]#do not activate this dynamic configuration connection#) oder ganz entfernen, bleiben alle Hosts, die durch diesen Konnektor erzeugt wurden, erhalten. Bei Bedarf müssen Sie diese von Hand löschen.
|Piggybacked Host wird nicht mehr überwacht |Wenn Sie den Host, über den Sie Ihre Cloud- oder Containerumgebung überwachen, aus dem Monitoring entfernen, erzeugt dieser natürlich keine Piggyback-Daten mehr. In diesem Fall werden die automatisch erzeugten Hosts _nach einer Stunde_ automatisch entfernt.
|Piggybacked Host ist nicht erreichbar |Wenn Ihre Cloud-Umgebung mal nicht erreichbar ist, und der {CMK}-Service, der diese abfragt, auf {CRIT} geht, so bleiben die erzeugten Hosts _auf unbestimmte Zeit_ im Monitoring. Hier gibt es keinen einstündigen Timeout!
|Der {CMK}-Server selbst ist gestoppt |Ein Stoppen des ganzen Monitorings führt zwar dazu, dass Piggyback-Daten veralten. Aber natürlich werden angelegte Hosts deswegen _nicht_ gelöscht. Das gleiche gilt, wenn der {CMK}-Server neu gebootet wird (wodurch vorübergehend alle Piggyback-Daten verloren gehen, da diese in der RAM-Disk liegen).
|Ein Host ist nicht mehr in den Piggyback-Daten enthalten |Das ist quasi der Normalfall: Ein Host in der Cloud-/Containerumgebung ist verschwunden. In diesem Fall wird er _sofort_ aus dem Monitoring entfernt.
|===


=== Konfigurationsmöglichkeiten

Neben der Frage, ob Hosts überhaupt automatisch entfernt werden sollen, gibt es bei den Konnektoreigenschaften
noch drei weitere Optionen, die das Löschen beeinflussen und die wir vorhin übersprungen haben:

image::dcd_deletion_tuning.png[alt="Feineinstellungen zum automatischen Löschen von Hosts."]

Die erste Einstellung -- [.guihint]#Prevent host deletion right after initialization# -- betrifft einen
kompletten Neustart des {CMK}-Servers selbst. Denn in dieser Situation fehlen erst einmal Piggyback-Daten
von allen Hosts, bis diese zum ersten Mal abgefragt wurden. Um ein sinnloses Löschen und Wiedererscheinen von
Hosts zu vermeiden (welches auch mit wiederholten Benachrichtigungen zu schon bekannten Problemen einhergeht), wird
standardmäßig in den ersten 10 Minuten auf ein Löschen generell verzichtet. Diese Zeit können Sie hier
einstellen.

Die Option [.guihint]#Validity of missing data# behandelt den
Fall, dass ein Host, aufgrund dessen Monitoring-Daten etliche Hosts automatisch angelegt wurden,
keine Piggyback-Daten mehr liefert. Das kann z.B. der Fall sein, wenn ein Zugriff
auf AWS und Co. nicht mehr funktioniert. Oder natürlich auch, wenn Sie den Spezialagenten aus der
Konfiguration entfernt haben. Die automatisch erzeugten Hosts bleiben dann noch die eingestellte
Zeit im System, bevor sie aus der Setup-GUI entfernt werden.

Die Option [.guihint]#Validity of outdated data# ist
ähnlich, behandelt aber den Fall, dass schon noch Piggyback-Daten kommen, allerdings für manche Hosts
nicht mehr. Das ist der normale Fall wenn z.B. virtuelle Maschinen oder Cloud-Dienste nicht mehr
vorhanden sind. Wenn Sie möchten, dass die entsprechenden Objekte aus {CMK} dann zeitnah verschwinden,
dann setzen Sie hier eine entsprechend kurze Zeitspanne.


== Diagnose

=== Ausführungshistorie

Wenn Sie dem DCD bei der Arbeit zusehen möchten, finden Sie in der Liste der Konnektoren bei jedem Eintrag
das Symbol icon:icon_dcd_history[]. Dieses führt Sie zur Ausführungshistorie:

image::dcd_execution_history.png[alt="Ausführungshistorie bei Suche und Anlegen neuer Hosts."]

// MFS: Das ist nicht mehr korrekt, Klammern oder 🕱 werden einfach gestrippt. Muss man leider schwammiger formulieren. :-/
////
Im abgebildeten Beispiel sehen Sie einen Fehler, der beim Erzeugen der Konfiguration auftritt: Der
Host mit dem Namen `Guest_Introspection_(4)` konnte nicht angelegt werden, weil durch die
runden Klammern im Namen sich kein für {CMK} gültiger Hostname ergibt.
////
// ML: Irgendwo und -wann sollten ungültige Hostnamen erläutert werden (wato_hosts?), dann hier verlinken.

Sollte aus irgendwelchen Gründen die Erstellung eines Hosts fehlschlagen, sehen Sie dies in der Ausführungshistorie.

=== Audit log

Mit [.guihint]#Setup > General > Audit log# öffnen Sie eine Seite mit der Liste aller Änderungen, die in
der Setup-GUI gemacht wurden -- egal ob diese bereits aktiviert wurden oder nicht. Suchen Sie nach
Einträgen vom Benutzer `automation` bzw. dem Benutzer, den Sie stattdessen autorisiert haben (siehe hierzu Abschnitt xref:user_automation[Der Benutzer 'automation']). Unter diesem Account arbeitet der DCD und erzeugt
Änderungen. So können Sie nachvollziehen, wann er welchen Host angelegt oder entfernt hat.


=== Log-Datei des DCD

Die Log-Datei des DCD ist `var/log/dcd.log`.
Hier ist ein Beispiel, welches zu obiger Abbildung passt. Auch hier finden Sie die Fehlermeldung,
dass ein bestimmter Host nicht angelegt werden konnte:

.var/log/dcd.log
[{file}]
----
2021-11-10 14:45:22,916 [20] [cmk.dcd] ---------------------------------------------------
2021-11-10 14:45:22,916 [20] [cmk.dcd] Dynamic Configuration Daemon (2.0.0p14) starting (Site: mysite, PID: 7450)...
2021-11-10 14:45:22,917 [20] [cmk.dcd.ConnectionManager] Initializing 0 connections
2021-11-10 14:45:22,918 [20] [cmk.dcd.ConnectionManager] Initialized all connections
2021-11-10 14:45:22,943 [20] [cmk.dcd.CommandManager] Starting up
2021-11-10 15:10:58,271 [20] [cmk.dcd.Manager] Reloading configuration
2021-11-10 15:10:58,272 [20] [cmk.dcd.ConnectionManager] Initializing 1 connections
2021-11-10 15:10:58,272 [20] [cmk.dcd.ConnectionManager] Initializing connection 'piggy01'
2021-11-10 15:10:58,272 [20] [cmk.dcd.ConnectionManager] Initialized all connections
2021-11-10 15:10:58,272 [20] [cmk.dcd.ConnectionManager] Starting new connections
2021-11-10 15:10:58,272 [20] [cmk.dcd.piggy01] Starting up
2021-11-10 15:10:58,273 [20] [cmk.dcd.ConnectionManager] Started all connections
----


[#files]
== Dateien und Verzeichnisse

[cols="30,~"]
|===
|Pfad |Bedeutung 

|`tmp/check_mk/piggyback` |Hier entstehen Piggyback-Daten. Für jeden in den Piggyback-Daten enthaltenen piggybacked Host entsteht ein Verzeichnis.
|`var/log/dcd.log` |Logdatei des Dynamic Configuration Daemon (DCD)
|===
