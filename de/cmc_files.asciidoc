include::global_attr.adoc[]
= Dateien und Verzeichnisse des CMC
:revdate: 2021-09-15
:title: Dateien und Verzeichnisse des CMC
:description: Diese Übersicht stellt alle wichtigen Dateien und Verzeichnisse zusammen, die den {CMK} Micro Core (CMC) betreffen.

{related-start}
link:cmc.html[Der {CMK} Micro Core (CMC)]
link:cmc_differences.html[Besonderheiten des CMC]
link:cmc_migration.html[Migration auf den CMC]
{related-end}

Folgende Übersicht zeigt Ihnen alle wichtigen Dateien und Verzeichnisse, die den xref:cmc#[{CMK} Micro Core (CMC)] betreffen. 
Alle Pfade sind relativ vom Home-Verzeichnis der Instanz angegeben. 
Heißt die Instanz z.B. `mysite`, so sind alle Pfade von `/omd/sites/mysite` aus zu verstehen.


==  Laufzeitdaten

[cols="45,~",options=header]
|===
|Pfad |Bedeutung 
|`var/log/cmc.log` |In dieser Datei finden Sie Meldungen zum Start und Stop des CMC und evtl. Warnungen oder Fehler genereller Art. Die Historie von Hosts und Services (bei Nagios beides in `var/nagios/nagios.log` enthalten) ist beim CMC in eine eigene Datei `history` ausgelagert.
|`var/check_mk/core/` |Verzeichnis mit allen Laufzeitdaten des CMC.
|`var/check_mk/core/config` |Konfiguration für den Kern mit allen statischen Daten zu Hosts, Services, Gruppen, Benutzern und globalen Einstellungen. Diese Datei entspricht bei Nagios den Dateien unter `etc/nagios/conf.d`.
|`var/check_mk/core/state` |Aktueller Laufzeitzustand des Kerns. Die Datei speichert Informationen über den aktuellen Status von Hosts und Services sowie über xref:basics_downtimes#[Wartungszeiten], xref:basics_ackn#[Quittierungen] und Kommentare. Die Datei wird regelmäßig und beim Anhalten des Kerns aktualisiert. Wenn sie beim Start des Kerns nicht vorhanden oder nicht kompatibel ist, beginnt der Kern mit einem leeren Zustand. Die Datei entspricht der Datei `var/nagios/retention.dat` von Nagios, ist aber binär kodiert. 
|`var/check_mk/core/state.*` |Sicherheitskopien des Status nach Migration von einer alten CMC-Version oder wenn der CMC feststellt, dass die Zahl der Hosts in der Konfiguration stark gesunken ist. So können Sie zum alten Status zurückkehren (und Ihre Wartungszeiten und Quittierungen wiederbekommen), wenn Sie z.B. durch eine Fehlkonfiguration alle Hosts vorübergehend aus dem Monitoring entfernt hatten.
|`var/check_mk/core/core` |Diese Datei ist normalerweise nicht vorhanden. Falls doch, deutet sie auf einen früheren Absturz des Kerns hin und hilft den Entwicklern beim Finden der Fehlerursache.
|`var/check_mk/core/history` |In dieser Datei ist die Historie aller Hosts und Services im Textformat gespeichert. Sie entspricht vom Inhalt und Aufbau der Datei `var/nagios/nagios.log` von Nagios und ist mit ihr weitgehend kompatibel.
|`var/check_mk/core/archive/` |In dieses Verzeichnis werden alte Versionen von `history` bei der Rotation der Log-Dateien verschoben. Nur wenn diese Dateien unkomprimiert vorhanden sind, kann man mit Livestatus und Multisite auf historische Daten zugreifen (Events, Verfügbarkeit).
|`tmp/run/live` |Livestatus-Socket des CMC. Es befindet sich an der gleichen Stelle, wie das von Nagios. Da der CMC Livestatus-kompatibel zu Nagios und Icinga ist, können so alle Erweiterungen, die auf Livestatus basieren, ohne Anpassung genutzt werden (z.B. xref:nagvis#[NagVis]).
|`tmp/run/cmc.pid` |Aktuelle Prozess-ID des CMC.
|===


==  Konfiguration

Der CMC hat keine eigene Konfigurationsdatei. 
Alle Einstellungen für den CMC finden Sie in der Weboberfläche von {CMK} unter icon:icon_configuration[alt="Symbol für die globalen Einstellungen."] [.guihint]#Global settings > Monitoring Core#.
Sie werden zusammen mit den anderen globalen Einstellungen in `etc/check_mk/conf.d/wato/global.mk` gespeichert.


==  Software
[cols="45,~",options=header]
|===
|Pfad |Bedeutung 
|`bin/cmc` |Ausführbares Programm für den CMC selbst. Dieses ist in pass:[C++] entwickelt und benötigt außer der Standard-pass:[C++]-Bibliothek keine weiteren Bibliotheken (insbesondere kein Boost). Zu Testzwecken kann man den CMC auch von Hand aufrufen (probieren Sie: `cmc --help`).
|`etc/init.d/cmc` |Startskript des CMC.
|`lib/cmc/icmpsender` |Hilfsprozess, der vom CMC gestartet wird und das Senden von ICMP-Paketen für das xref:cmc_differences#smartping[Smart Ping] übernimmt. Dieser muss unbedingt mit Set User ID (SUID) für root installiert sein.
|`lib/cmc/icmpreceiver` |Hilfsprozess, der vom CMC gestartet wird und das Empfangen von ICMP- und TCP-Verbindungspaketen für das Smart Ping übernimmt. Dieser muss unbedingt mit Set User ID (SUID) für root installiert sein.
// TK: SUID für icmpsender und icmpreceiver in den beiden obigen Zeilen: Ist dem (noch) so? Ich seh das Bit nicht bei den Dateirechten.
|`lib/cmc/checkhelper` |Hilfsprozess xref:cmc_differences#checkhelper[Check Helper], der vom CMC mehrfach gestartet wird und das effiziente Ausführen von aktiven Checks übernimmt.
|`bin/fetcher` |Hilfsprozess xref:cmc_differences#fetcher_checker[Checkmk Fetcher], der vom CMC mehrfach gestartet wird und die Informationen von den Agenten aus dem Netzwerk abruft.
// |`share/check_mk/web/plugins/wato/cmc.py` |WATO-Erweiterungen mit globalen Einstellungen und Regelsätzen für den CMC.
// TK: Rausgenommen, da die Datei inzwischen unterhalb der SW liegt: version/lib/python3/cmk/gui/cee/plugins/wato/cmc.py
// |`share/check_mk/web/plugins/sidebar/cmc.py` |Ein Sidebarplugin für Multisite mit Performancedaten zum CMC.
// TK: Rausgenommen, da die Datei inzwischen unterhalb der SW liegt: version/lib/python3/cmk/gui/cee/plugins/sidebar/cmc.py
// |`share/check_mk/modules/cmc.py` |{CMK}-Modul, das die Konfiguration für den CMC erzeugt.
// TK: Rausgenommen, da es die Datei nicht mehr gibt.
// |`share/check_mk/modules/rrd.py` |{CMK}-Modul für das Anlegen von RRD-Dateien.
// TK: Rausgenommen, da es nur noch diese beiden Dateien unterhalb der SW gibt: version/lib/python3/cmk/base/rrd.py, version/lib/python3/cmk/base/cee/rrd.py
|===


