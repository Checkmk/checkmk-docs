// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= Host-Merkmale
:revdate: draft
:title: Host-Merkmale
:description: 

{related-start}
{related-end}


== Einführung
////
Glossar:
Host-Merkmale (englisch host tags) sind Schlagworte, die Hosts zugeordnet werden können, um diese später etwa im Monitoring für Tabellenansichten oder in der Konfiguration für Regeln gezielt ansprechen zu können. Host-Merkmale sind in Gruppen eingeteilt, beispielsweise lässt sich eine Merkmalsgruppe Betriebssysteme mit den Merkmalen Linux und Windows einrichten. Einige Merkmalsgruppen sind bereits vordefiniert, etwa zur Art des verwendeten Checkmk-Agenten oder zur IP-Adressfamilie, über die festgehalten wird, ob ein Host über IPv4, IPv6 oder beide Versionen überwacht werden soll. Sie haben außerdem vorher festgelegte Werte und einen Standard, welcher jedem Host zugeordnet ist, solange er nicht mit einer anderen Option aus der Gruppe überschrieben wurde.
////

Host-Merkmale (englisch _host tags_) sind Schlagworte, die Hosts zugeordnet werden können, um diese zu strukturieren und zu organisieren, etwa nach Wichtigkeit, IP-Adressfamilie oder nach dem Weg, auf dem der Host seine Daten erhält.
So werden Host-Merkmale über die xref:hosts_structure#folder[Ordnerstruktur] in {CMK} vererbt und können als Bedingung in einer xref:wato_rules#[Regel] ausgewählt werden, um Hosts gezielt anzusprechen.

Host-Merkmale sind aber nicht nur bei in der Konfiguration sondern auch im Monitoring nützlich.
Zum Beispiel gibt es in xref:views#filter_context[Tabellenansichten] einen Filter für Host-Merkmale und das xref:glossar#snapin[Snapin] [.guihint]#Virtual Host Tree# kann Ihre Ordner anhand der Merkmale in einem Baum anordnen.

Und auf der Kommandozeile können Sie bei vielen Befehlen mit der Syntax `@foo` alle Hosts mit dem Merkmal `foo` auswählen.

Damit alles richtig Sinn ergibt, sollten Sie Ihr eigenes Schema für Host-Merkmale einrichten, welches für Ihre Umgebung optimal passt und mit den anderen Möglichkeiten der xref:hosts_structure#[Strukturierung von Hosts] zusammenpasst.
Aber bevor wir Ihnen zeigen, wie Sie im [.guihint]#Setup# eigene Host-Merkmale definieren können, klären wir zunächst einige Begriffe.


[#auxtags]
== Host-Merkmalsgruppen, Checkbox-Merkmale, Themen und Hilfsmerkmale

Host-Merkmale sind in Gruppen organisiert, den sogenannten *Host-Merkmalsgruppen* (_host tag groups_).
Dabei kann ein Host aus jeder Gruppe maximal ein Merkmal haben.
Ein gutes Beispiel für eine Host-Merkmalsgruppe ist z.B. _Datacenter_ mit den möglichen Merkmalen _DC 1_ und _DC 2_.
Damit wäre dann jeder Host genau einem der beiden Rechenzentren zugeordnet.
Möchten Sie Hosts anlegen, die in keinem der beiden Rechenzentren stehen, so brauchen Sie eine dritte Auswahlmöglichkeit, z.B. _Not in a datacenter_.

Manche Anwender haben versucht, die Anwendung, die auf einem Host läuft, in einer Merkmalsgruppe abzubilden.
Die Gruppe hieß z.B. _Anwendung_ und hatte die Ausprägungen _Oracle_, _SAP_, _MS Exchange_, usw.
Das geht solange gut, bis der Tag kommt, an dem ein Host _zwei_ Anwendungen hat -- und der kommt sicher!

Die richtige Lösung ist hier eine andere:
Erzeugen Sie _pro_ Anwendung eine eigene Merkmalsgruppe, die nur nur zwei Möglichkeiten anbietet: _Ja_ oder _Nein_.
{CMK} vereinfacht dieses Vorgehen, indem es Ihnen erlaubt, Merkmalsgruppen mit nur einem _einzigen_ Merkmal anzulegen, die sogenannten *Checkbox-Merkmale* (_checkbox tags_).
Für das obige Beispiel einer Anwendung können Sie dann eine Merkmalsgruppe _Oracle_ mit dem einzigen Merkmal _Yes_ erzeugen -- d.h. das _No_ können Sie sich sparen.
Ein Checkbox-Merkmal wird in den Host-Eigenschaften nicht als Liste, sondern als eben eine Checkbox dargestellt.
Ein Ankreuzen der Checkbox setzt das Merkmal, andernfalls entfällt das Merkmal.

Damit das Ganze nicht unübersichtlich wird, wenn Sie sehr viele Host-Merkmalsgruppen haben (z.B. weil Sie sehr viele verschiedene Anwendungen abbilden), können Sie die Merkmalsgruppen zu *Themen* (_topics_) zusammenfassen.
Alle Merkmalsgruppen des gleichen Themas sind dann

* in den Host-Eigenschaften in einem eigenen Kasten zusammengefasst und
* bei den Bedingungen der Regel als Text vor der Merkmalsgruppe angezeigt.

Die Themen haben also „nur“ eine optische Funktion und keine Auswirkung auf die eigentliche Konfiguration.

*Hilfsmerkmale* (_Englisch: Auxiliary tags_) lösen folgendes Problem:
Stellen Sie sich vor, dass Sie eine Merkmalsgruppe _Betriebssystem_ definieren, mit
den Ausprägungen _Linux_, _AIX_, _Windows 2008_ und _Windows 2012_.
Nun möchten Sie eine Regel definieren, welche für alle Windows-Hosts gelten soll.
Das geht so überhaupt nicht, da Sie in einer Bedingung wie oben gezeigt pro Gruppe immer nur ein Tag auswählen können.

Um das Problem zu lösen, können Sie das Hilfsmerkmal _Windows_ definieren.
Dann ordnen Sie den beiden Merkmalen _Windows 2008_ und _Windows 2012_ dieses Hilfsmerkmal zu.
Ein Host, der eines der beiden Merkmale hat, erhält dann von
{CMK} _automatisch_ immer auch das Hilftstag _Windows_.
In den Regeln erscheint _Windows_ als eigenes Merkmal für die Formulierung von Bedingungen.


[#predefined_tags]
== Vordefinierte Merkmale

//SK: Ich habe 06.12.2021 ein paar Änderungen der Übersetzung des Begriffs "Tag group" über Weblate eingekippt. Sobald die Änderung in der deutschsprachigen GUI sichtbar sind, kann dann hier auch der Verweis auf die "Tag-Gruppen" entfernt werden.

{CMK} richtet bei der Installation mehrere Merkmalsgruppen bzw. Tag-Gruppen für Sie ein:

[cols="^,^,^,m", options="header"]

|===

| Tag-Gruppe
| id
| Zweck
| Wahlmöglichkeiten

| [.guihint]#Checkmk Agent / API integrations#
| agent
| Legt fest, auf welche Art der Host Daten von seinem xref:wato_monitoringagents#[Agenten] bekommt.| cmk-agent, all-agents, special-agents, no-agent
|[.guihint]#Criticality# |criticality|Wichtigkeit (Servicelevel) des Systems. Für das Merkmal _Do not monitor this host_ wird eine  Regel mit ausgeliefert, welche die Überwachung des Hosts abschaltet. Die anderen Merkmale sind nur  Beispiele und ohne Funktion. Sie können diese aber Hosts zuweisen und dann in Regeln verwenden.|prod, critical, test, offline
|[.guihint]#Networking Segment# |networking|Verstehen Sie diese Merkmalsgruppe nur als Beispiel. Für das Merkmal _WAN (high latency)_ ist eine  Beispielregel hinterlegt, welche die Schwellwerte für PING-Antwortzeiten an die längeren Laufzeiten im  WAN anpasst.|lan, wan , dmz
|[.guihint]#IP address family# |address_family|Legt fest, ob der Host per IPv4 oder IPv6 oder beidem überwacht werden soll. Diese Gruppe hat den  Status _builtin_ und kann nicht modifiziert werden. Das ist notwendig, da die Tags intern von  {CMK} bei der Konfigurationserzeugung benötigt werden.|"ip-v4-only" "ip-v6-only" "ip-v4v6" "no-ip"
|[.guihint]#SNMP# |snmp_ds |Hier wird bestimmt, ob SNMP-Daten ausgewertet werden.|"no-snmp" "snmp-v2" "snmp-v1"
|[.guihint]#Piggyback# |piggyback |Dieses Merkmal legt fest, ob und wie Huckepackdaten für entsprechende Hosts erwartet/verarbeitet werden.| "auto-piggyback" "piggyback" "no-piggyback"
|===


=== Ändern von vordefinierten Merkmalsgruppen

Theoretisch können Sie die vordefinierten Merkmalsgruppen (_predefined tag groups_) anpassen, solange diese nicht als [.guihint]#builtin# markiert sind.
Änderungen in [.guihint]#Criticality# oder [.guihint]#Network Segment# sind unkritisch.
Diese sind nur als Beispiel vorgesehen.
Die Gruppe [.guihint]#Agent Type# jedoch sollten Sie auf keinen Fall ändern oder
erweitern -- auch wenn diese nicht als [.guihint]#builtin# gekennzeichnet ist!
Die Merkmale dieser Gruppe werden intern von {CMK} referenziert.

== Merkmalsgruppen erstellen

Das Erzeugen von eigenen Merkmalen geschieht über [.guihint]#Setup > Hosts >
Tags#. Dieses sieht bei einem frisch aufgesetzten System je nach {CMK}-Version
etwa so aus:

image::rules_hosttags_main.png[alt="Eine Liste aller eingebauten Host-Merkmalsgruppen."]

Das Anlegen einer neuen Merkmalsgruppe geschieht mit dem Knopf
icon:icon_new[alt="Symbol zum Anlegen einer neuen Merkmalsgruppe."]
[.guihint]#Add tag group# und bringt Sie zu folgenden Eingabemasken:

image::rules_hosttags_config_properties.png[]

Die *[.guihint]#Tag group ID#* wird intern als ID für die Merkmalsgruppe verwendet. Diese
muss eindeutig sein und kann später nicht geändert werden. Es gelten die üblichen
Regeln für erlaubte Zeichen (nur Buchstaben, Ziffern, Unterstrich).

Der *[.guihint]#Title#* wird überall in der GUI verwendet, wo es um die Merkmalsgruppe
geht. Da dies ein reiner Anzeigetext ist, kann er jederzeit geändert werden, ohne
dass das einen Einfluss auf die bestehende Konfiguration hat.

Das *[.guihint]#Topic#* können Sie leer lassen. Dann wird Ihre Merkmalsgruppe zusammen mit
den mitgelieferten Gruppen angezeigt. Sie können aber auch eigene Themen anlegen und damit
Ihre Merkmale übersichtlich zusammenfassen.

Am wichtigsten sind natürlich die *[.guihint]#Choices#* im nächsten Kasten.

image::rules_hosttags_config_choices.png[]

Wichtig ist, dass
auch hier die *[.guihint]#Tag ID#* jeweils eindeutig sein muss -- und zwar nicht nur
innerhalb der Gruppe, sondern über alle Gruppen hinweg!  Im Zweifelsfall
können Sie einfach mit Präfixen arbeiten, z.B. `loc_dc01` anstelle
von nur `dc01`.

Die Reihenfolge, welche Sie wie gewohnt mit dem Knopf
icon:icon_drag[] ändern können, hat nicht nur eine optische Funktion:
*Das erste Merkmal in der Liste gilt als Defaultwert*! Das bedeutet, dass
alle Hosts, die keine explizite Einstellung für diese Merkmalsgruppe haben, automatisch
auf diesen Wert gesetzt werden.

Unter *[.guihint]#Auxiliary tags#* können Sie dem Merkmal Hilfsmerkmale
zuordnen, die automatisch dem Host hinzugefügt werden sollen, wenn dieses Merkmal
gewählt ist.


== Hilfsmerkmale erstellen

Neue Hilfsmerkmale (Auxiliary Tags) können Sie über icon:icon_aux_tag[alt="Symbol zum Anlegen von Hilfsmerkmalen."] [.guihint]#Add aux tag# erstellen. Im folgenden
Dialog vergeben Sie wieder eine unveränderliche ID und einen aussagekräftigen Titel. Wie schon
bei den Merkmalsgruppen lässt sich hier zudem ein [.guihint]#Topic# angeben.

image::rules_hosttags_auxtag_basic.png[]

Die Zuordnung/Nutzung dieser Hilfsmerkmale erfolgt dann direkt in den
Merkmalsgruppen bei den einzelnen Auswahlmöglichkeiten.


== Löschen und Ändern von bestehenden Merkmalen und Merkmalsgruppen

Das Ändern der bestehenden Merkmalsgruppenkonfiguration mag auf den ersten Blick
wie eine einfache Operation aussehen. Das ist aber leider nicht immer so, da es
größere Auswirkungen auf Ihre bestehende Konfiguration haben kann.
Änderungen, die lediglich die Anzeige betreffen oder nur neue Auswahlen
hinzufügen, sind unproblematisch und haben keine Auswirkung auf die
bestehenden Hosts und Regeln:

* Änderung im Titel oder Thema von Merkmalen und Merkmalsgruppen
* Hinzufügen eines weiteren Merkmals zu einer Merkmalsgruppe

Alle anderen Änderungen können Auswirkungen auf bestehende Hosts oder Regeln
haben, die die betroffenen Merkmale verwenden. {CMK} verbietet dabei nicht einfach
solche Änderungen, sondern versucht für Sie, Ihre bestehende Konfiguration so
anzupassen, dass alles wieder Sinn ergibt. Was das genau bedeutet, hängt von der
Art der Operation ab.

=== Löschen von Merkmalsgruppen

Von allen Hosts wird die Information über die betroffenen Merkmale entfernt.
Falls die Merkmalsgruppe in vorhandenen Regeln als Bedingung verwendet wird,
bekommen Sie folgende Warnung:

image::rules_hosttags_delete.png[]

Sie müssen sich hier entscheiden, ob Sie aus den bestehenden Regeln die
Bedingungen entfernen möchten oder ob Sie die ganzen Regeln löschen möchten.
Beides kann sinnvoll sein und {CMK} kann nicht für Sie entscheiden, was hier
besser ist. Wenn Sie sich nicht sicher sind, sollten Sie die Regelsätze (hier in
der Warnung verlinkt) von Hand durchgehen und alle Bedingungen der betroffenen
Gruppe von Hand entfernen oder abändern.


=== Löschen von einzelnen Merkmalen

Das Löschen von Merkmalen erreichen Sie durch Editieren der Gruppe, Entfernen
des Merkmals und anschließendes Speichern. Dabei kann es zu einer ähnlichen
Warnung wie beim Entfernen einer Merkmalsgruppe kommen.

Hosts, die das betroffene Merkmal gesetzt hatten, werden automatisch auf den Defaultwert gesetzt.
Dies ist (wie oben beschrieben) stets das oberste Merkmal in der Liste.

Regeln, die eine _negative_ Bedingung auf das Merkmal haben, verlieren
einfach diese Bedingung -- ohne Rückfrage. Wenn Sie z.B. eine Regel haben
für alle Hosts, die *nicht* das Merkmal `loc_dc2` haben und Sie entfernen
das Merkmal `loc_dc2` komplett aus der Konfiguration, dann ist augenscheinlich
auch diese Bedingung überflüssig.

Falls jedoch eine _positive_ Bedingung mit dem Merkmal existiert, kommt es
wieder zu obiger Warnung und Sie müssen entscheiden, wie die Konfiguration
angepasst werden soll.


=== Umbenennen von Merkmal-IDs

Anders als bei den Merkmalsgruppen können Sie die IDs von Merkmalen tatsächlich nachträglich
ändern. Dies ist sozusagen eine Ausnahme vom {CMK}-Prinzip, nach dem IDs, wenn
einmal vergeben, unveränderlich sind. Es kann aber nützlich sein, wenn Sie z.B. einen
Datenimport von einem bestehenden System vorbereiten wollen, und sich dafür an ein
vorhandenes, unterschiedliches Tagschema anpassen müssen.

Um Merkmal-IDs umzubenennen, gehen Sie in den Editiermodus der Merkmalsgruppe und ändern Sie
dort einfach die IDs, wobei Sie *die Titel unverändert lassen.* Letzteres
ist wichtig, damit {CMK} überhaupt erkennt, dass es sich um eine Umbenennung
handelt und nicht einfach eine Merkmal-ID entfernt und eine neue hinzugefügt
wurde.

Bevor {CMK} mit der Anpassung der Konfiguration zu Werke geht, werden Sie
nochmal über die Konsequenzen aufgeklärt:

image::rules_hosttags_rename.png[]

{CMK} wird nun alle betroffenen Hosts, Folder und Regeln entsprechend anpassen.

Bitte beachten Sie, dass es trotzdem noch Situationen geben kann, in denen
Sie an anderen Stellen manuell nacharbeiten müssen. So sind z.B. Merkmal-IDs
Bestandteile von URLs, welche Views aufrufen, die nach Merkmalen filtern. {CMK} kann
diese URLs nicht für Sie anpassen. Auch Filter-Konfigurationen in Reports
und Dashboards können nicht automatisch angepasst werden. Es ist also sicher
eine gute Idee, sich über das Merkmalschema am Anfang genügend Gedanken zu
machen, so dass Sie Umbenennungen später nach Möglichkeit vermeiden können.


== Baumansicht aus Host-Merkmalen erstellen

Hosts werden in {CMK} in der Regel in Ordnern organisiert, woraus sich eine natürliche Hierarchie ergibt.
Diese können Sie als Baumansicht am unteren Ende des Seitenleisten-Snapins [.guihint]#Tree of Folders# darstellen und von dort die Standardansicht für die pro Verzweigung gefilterten Hosts aufrufen.
Das Snapin ergänzt diesen Baum noch um Filtermöglichkeiten für Themen und Optionen für unterschiedliche Ansichten.

Eine solche Baumansicht können Sie aber auch aus xref:wato_rules#hosttags[Host-Merkmalen] erstellen und so eine „virtuelle“ Hierarchie abbilden -- und zwar über das Snapin [.guihint]#Virtual Host Tree#.
Neben den Host-Merkmalen dürfen Sie auch die Ordnerstruktur in derlei Bäume einbauen, wobei sowohl die Anzahl der virtuellen Bäume als auch der jeweiligen Verzweigungen unbeschränkt ist.

Angenommen, Sie haben für Ihre Hosts die drei Merkmalsgruppen _Ort_,
_Geräteklasse_ und _Betriebssystem_ angelegt. Dann bekommen Sie auf
der obersten Baumebene eine Auswahl der Orte zu sehen, darunter der Geräteklassen
und letztlich der Betriebssysteme. Jede Hierarchieebene bringt Sie direkt zur
Ansicht aller Hosts mit eben diesen Merkmalen.

Zum Anlegen eines Virtual Host Tree fügen Sie zunächst das Snapin über
icon:button_sidebar_add_snapin[] unten links in der Seitenleiste zu dieser hinzu.

image::rules_virtual_host_tree_snapin.png[width=42%]

Rufen Sie dann die Einstellungen über [.guihint]#Setup > General > Global
Settings > User Interface > Virtual Host Trees# auf und erstellen Sie einen
neuen Baum über [.guihint]#Create new virtual host tree configuration#.

image::rules_virtual_host_tree_new.png[]

Vergeben Sie anschließend ID und
Titel des Baums und schließen Sie optional leere Baumzweige über ein Häkchen bei
[.guihint]#Exclude empty tag choices# aus. Anschließend fügen Sie über [.guihint]#Add new element#
die gewünschten Merkmalsgruppen in der gewünschten Reihenfolge hinzu. Wenn Sie die
Ordnerhierarchie als oberste Ordnung übernehmen wollen, beginnen Sie einfach
mit [.guihint]#WATO folder tree#. Die Reihenfolge/Hierarchie können Sie freilich wie
üblich über die Anfasser nachträglich ändern.

image::rules_virtual_host_tree_settings.png[]

Speichern Sie noch und übernehmen Sie die Änderungen -- und schon liefert die
Baumstruktur etliche neue Ansichten.

image::rules_virtual_host_tree_views.png[width=42%]

//ML: Ich würde noch irgendwas hier drunter pinnen - Hinweis auf anderes Thema, Warnung, was zu Fehler oder sonstwas. Ein Bild als Abschluss sieht einfach nicht gut aus.
