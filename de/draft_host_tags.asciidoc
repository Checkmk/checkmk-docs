// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= Host-Merkmale
:revdate: draft
:title: Host-Merkmale
:description: 

{related-start}
{related-end}


[#intro]
== Einleitung
////
Glossar:
Host-Merkmale (englisch host tags) sind Schlagworte, die Hosts zugeordnet werden können, um diese später etwa im Monitoring für Tabellenansichten oder in der Konfiguration für Regeln gezielt ansprechen zu können. Host-Merkmale sind in Gruppen eingeteilt, beispielsweise lässt sich eine Merkmalsgruppe Betriebssysteme mit den Merkmalen Linux und Windows einrichten. Einige Merkmalsgruppen sind bereits vordefiniert, etwa zur Art des verwendeten Checkmk-Agenten oder zur IP-Adressfamilie, über die festgehalten wird, ob ein Host über IPv4, IPv6 oder beide Versionen überwacht werden soll. Sie haben außerdem vorher festgelegte Werte und einen Standard, welcher jedem Host zugeordnet ist, solange er nicht mit einer anderen Option aus der Gruppe überschrieben wurde.
////

Host-Merkmale (Englisch: _host tags_) sind Schlagworte, die Hosts zugeordnet werden können, um diese zu strukturieren und zu organisieren, etwa nach Wichtigkeit, IP-Adressfamilie oder nach dem Weg, auf dem der Host seine Daten erhält.
So werden Host-Merkmale über die xref:hosts_structure#folder[Ordnerstruktur] in {CMK} vererbt und können als Bedingung in einer xref:wato_rules#[Regel] ausgewählt werden, um Hosts gezielt anzusprechen.

Host-Merkmale sind aber nicht nur bei in der Konfiguration sondern auch im Monitoring nützlich.
Zum Beispiel gibt es in xref:views#filter_context[Tabellenansichten] einen Filter für Host-Merkmale und das xref:glossar#snapin[Snapin] [.guihint]#Virtual Host Tree# kann Ihre Ordner anhand der Merkmale in einem Baum anordnen.

Und auf der Kommandozeile können Sie bei vielen Befehlen mit der Syntax `@foo` alle Hosts mit dem Merkmal `foo` auswählen.

Damit alles richtig Sinn ergibt, sollten Sie Ihr eigenes Schema für Host-Merkmale einrichten, welches für Ihre Umgebung optimal passt und mit den anderen Möglichkeiten der xref:hosts_structure#[Strukturierung von Hosts] zusammenpasst.
Aber bevor wir Ihnen zeigen, wie Sie im [.guihint]#Setup# eigene Host-Merkmale definieren können, klären wir zunächst einige Begriffe.


[#host_tag_group]
=== Host-Merkmalsgruppen

Host-Merkmale sind in Gruppen organisiert, den sogenannten Host-Merkmalsgruppen (Englisch: _host tag groups_).
Dabei kann ein Host aus jeder Gruppe maximal ein Merkmal haben.
Ein gutes Beispiel für eine Host-Merkmalsgruppe ist z.B. _Datacenter_ mit den möglichen Merkmalen _Datacenter 1_ und _Datacenter 2._
Damit wäre dann jeder Host genau einem der beiden Rechenzentren zugeordnet.
Möchten Sie Hosts anlegen, die in keinem der beiden Rechenzentren stehen, so brauchen Sie eine dritte Auswahlmöglichkeit, z.B. _Not in a datacenter._

Manche Anwender haben versucht, die Anwendung, die auf einem Host läuft, in einer Merkmalsgruppe abzubilden.
Die Gruppe hieß z.B. _Application_ und hatte die Ausprägungen _Oracle_, _SAP_, _MS Exchange_, usw.
Das geht solange gut, bis der Tag kommt, an dem ein Host _zwei_ Anwendungen hat -- und der kommt sicher!


[#checkbox_tag]
=== Checkbox-Merkmale

Die richtige Lösung, um Anwendungen Hosts zuzuordnen, ist eine andere:
Erzeugen Sie _pro_ Anwendung eine eigene Merkmalsgruppe, die nur nur zwei Möglichkeiten anbietet: _Ja_ oder _Nein._
{CMK} vereinfacht dieses Vorgehen, indem es Ihnen erlaubt, Merkmalsgruppen mit nur einem _einzigen_ Merkmal anzulegen, die sogenannten Checkbox-Merkmale (Englisch: _checkbox tags_).
Für das obige Beispiel einer Anwendung können Sie dann eine Merkmalsgruppe _Oracle_ mit dem einzigen Merkmal _Yes_ erzeugen -- d.h. das _No_ können Sie sich sparen.
Ein Checkbox-Merkmal wird in den Host-Eigenschaften nicht als Liste, sondern als eben eine Checkbox dargestellt.
Ein Ankreuzen der Checkbox setzt das Merkmal, andernfalls entfällt das Merkmal.


[#topic]
=== Themen

Damit das Ganze nicht unübersichtlich wird, wenn Sie sehr viele Host-Merkmalsgruppen haben (z.B. weil Sie sehr viele verschiedene Anwendungen abbilden), können Sie die Merkmalsgruppen zu Themen (Englisch: _topics_) zusammenfassen.
Alle Merkmalsgruppen des gleichen Themas

* werden in den Host-Eigenschaften in einem eigenen Kasten zusammengefasst und
* zeigen bei den Bedingungen einer Regel den Namen des Themas vor dem der Merkmalsgruppe, z.B. _Anwendungen / Oracle._

Die Themen haben also „nur“ eine optische Funktion und keine Auswirkung auf die eigentliche Konfiguration.


[#aux_tag]
===  Hilfsmerkmale

Hilfsmerkmale (Englisch: _auxiliary tags_) lösen folgendes Problem:
Stellen Sie sich vor, dass Sie eine Host-Merkmalsgruppe _Betriebssystem_ definieren, mit den Ausprägungen _Linux_, _AIX_, _Windows 2016_ und _Windows 2019_.
Nun möchten Sie eine Regel definieren, welche für alle Windows-Hosts gelten soll.
Das geht so überhaupt nicht, da Sie in einer Bedingung, wie oben gezeigt, pro Gruppe immer nur ein Merkmal auswählen können.

Um das Problem zu lösen, können Sie das Hilfsmerkmal _Windows_ definieren.
Dann ordnen Sie den beiden Merkmalen _Windows 2016_ und _Windows 2019_ dieses Hilfsmerkmal zu.
Ein Host, der eines der beiden Merkmale hat, erhält dann von {CMK} _automatisch_ immer auch das Hilfsmerkmal _Windows_.
In den Regeln erscheint _Windows_ als eigenes Merkmal für die Formulierung von Bedingungen.


[#predefined_tags]
== Vordefinierte Merkmalsgruppen

Den Einstieg in die Konfiguration der Host-Merkmale finden Sie über [.guihint]#Setup > Hosts > Tags:#

[#hosttags_tags_default]
.In einem frisch aufgesetzten System werden nur die vordefinierten Merkmalsgruppen und Hilfsmerkmale aufgelistet
image::hosttags_tags_default.png[alt="Liste aller vordefinierten Host-Merkmalsgruppen."]

{CMK} richtet bei der Installation mehrere Host-Merkmalsgruppen für Sie ein:

[cols="25,25,25,~",options="header"]
|===
|ID
|Titel
|Merkmale
|Zweck
|`criticality`
|Criticality
|Productive system (ID: `prod`), Business critical (ID: `critical`), Test system (ID: `test`), Do not monitor this host (ID: `offline`)
|Wichtigkeit (Service Level) des Systems. Für das Merkmal `offline` wird die Regel [.guihint]#Hosts to be monitored# mit ausgeliefert, welche die Überwachung des Hosts abschaltet. Die anderen Merkmale sind nur Beispiele und ohne Funktion. Sie können diese aber Hosts zuweisen und dann in Regeln verwenden.
|`networking`
|Networking Segment
|Local network (low latency) (ID: `lan`), WAN (high latency) (ID: `wan`), DMZ (low latency, secure access) (ID: `dmz`)
|Verstehen Sie diese Merkmalsgruppe nur als Beispiel. Für das Merkmal `wan` ist die Beispielregel [.guihint]#PING and host check parameters# hinterlegt, welche die Schwellwerte für PING-Antwortzeiten an die längeren Laufzeiten im WAN anpasst.
|`agent`
|Checkmk agent / API integrations
|API integrations if configured, else Checkmk agent (ID: `cmk-agent`), Configured API integrations and Checkmk agent (ID: `all-agents`), Configured API integrations, no Checkmk agent (ID: `special-agents`), No API integrations, no Checkmk agent (ID: `no-agent`)
|Legt fest, auf welche Art der Host Daten von seinem xref:glossar#agent[Agenten] bekommt.
|`piggyback`
|Piggyback
|Use piggyback data from other hosts if present (ID: `auto-piggyback`), Always use and expect piggyback data (ID: `piggyback`), Never use piggyback data (ID: `no-piggyback`)
|Dieses Merkmal legt fest, ob und wie xref:glossar#piggyback[Piggyback-Daten] für den Host erwartet/verarbeitet werden.
|`snmp_ds`
|SNMP
|No SNMP (ID: `no-snmp`), SNMP v2 or v3 (ID: `snmp-v2`), SNMP v1 (ID: `snmp-v1`)
|Hier wird bestimmt, ob SNMP-Daten ausgewertet werden.
|`address_family`
|IP address family
|IPv4 only (ID: `ip-v4-only`), IPv6 only (ID: `ip-v6-only`), IPv4/IPv6 dual-stack (ID: `ip-v4v6`), No IP (ID: `no-ip`)
|Legt fest, ob der Host per IPv4 oder IPv6 oder beidem überwacht werden soll.
|===

Sie können vordefinierte Merkmalsgruppen (Englisch: _predefined tag groups_) anpassen, solange diese nicht als _builtin_ markiert sind (in der Spalte [.guihint]#Actions#).
Die _eingebauten_ Merkmalsgruppen werden intern von {CMK} bei der Konfigurationserzeugung benötigt und sind daher nicht änderbar.
Dagegen sind Änderungen in [.guihint]#Criticality# oder [.guihint]#Network Segment# unkritisch.
Diese sind nur als Beispiel vorgesehen.
// Die Gruppe [.guihint]#Agent Type# jedoch sollten Sie auf keinen Fall ändern oder erweitern -- auch wenn diese nicht als [.guihint]#builtin# gekennzeichnet ist!
// Die Merkmale dieser Gruppe werden intern von {CMK} referenziert.


[#create_tag_group]
== Merkmalsgruppen erstellen

Sie starten die Erstellung von eigenen Host-Merkmalen auf der Seite [.guihint]#xref:hosttags_tags_default[Tag groups]#, die Sie wieder über [.guihint]#Setup > Hosts > Tags# erreichen.

Bevor Sie Host-Merkmale erstellen können, müssen Sie zunächst die Host-Merkmalsgruppe anlegen, die die Merkmale enthalten soll.
Das Anlegen einer neuen Merkmalsgruppe erfolgt mit dem Knopf icon:icon_new[alt="Symbol zum Anlegen einer neuen Merkmalsgruppe."] [.guihint]#Add tag group# und bringt Sie zu folgenden Formularen:

.ID und Titel werden in den Grundeinstellungen der Merkmalsgruppe festgelegt
image::hosttags_group_basic_settings.png[alt="Grundeinstellungen einer Merkmalsgruppe."]

Die [.guihint]#Tag group ID# wird intern als ID für die Merkmalsgruppe verwendet.
Sie muss eindeutig sein und kann später nicht mehr geändert werden.
Es gelten die üblichen Regeln für erlaubte Zeichen (nur Buchstaben, Ziffern, Unterstrich).

Der [.guihint]#Title# wird überall in der GUI verwendet, wo es um die Merkmalsgruppe geht.
Da dies ein reiner Anzeigetext ist, kann er jederzeit geändert werden, ohne dass das einen Einfluss auf die bestehende Konfiguration hat.

Das [.guihint]#Topic# können Sie leer lassen.
Dann wird Ihre Merkmalsgruppe zusammen mit den mitgelieferten Gruppen angezeigt.
Sie können aber auch eigene Themen anlegen und damit Ihre Merkmalsgruppen übersichtlich zusammenfassen.

Am wichtigsten ist der nächste Kasten [.guihint]#Tag choices#, in dem Sie nacheinander alle Host-Merkmale für die neue Merkmalsgruppe festlegen:

.Auch jedes Host-Merkmal benötigt eine ID und einen Titel
image::hosttags_group_tag_choices.png[alt="Liste der zur Merkmalsgruppe gehörenden Host-Merkmale."]

Wichtig ist, dass auch hier die [.guihint]#Tag ID# eindeutig sein muss -- und zwar nicht nur innerhalb der Gruppe, sondern über alle Gruppen hinweg!
Im Zweifelsfall können Sie einfach mit Präfixen arbeiten, z.B. `dc_dc01` anstelle von nur `dc01`.

Die Reihenfolge, welche Sie wie gewohnt mit dem Knopf icon:icon_drag[alt="Symbol zum Verschieben eines Listeneintrags."] ändern können, hat nicht nur eine optische Funktion:
*Das erste Merkmal in der Liste ist der Standardwert*!
Das bedeutet, dass alle Hosts, die keine explizite Einstellung für diese Merkmalsgruppe haben, automatisch auf diesen Wert gesetzt werden.

Unter [.guihint]#Auxiliary tags# können Sie jedem Host-Merkmal Hilfsmerkmale zuordnen, die automatisch dem Host hinzugefügt werden sollen, wenn das Host-Merkmal gewählt ist.


[#create_aux_tag]
== Hilfsmerkmale erstellen

Zusätzlich zu den vordefinierten Host-Merkmalsgruppen richtet {CMK} auch passende xref:aux_tag[Hilfsmerkmale] (Englisch: _auxiliary tags_) ein, die auf der Seite [.guihint]#xref:hosttags_tags_default[Tag groups]# unter den Gruppen aufgelistet werden.

Neue Hilfsmerkmale können Sie mit icon:icon_aux_tag[alt="Symbol zum Anlegen von Hilfsmerkmalen."] [.guihint]#Add aux tag# erstellen.

.Die Grundeinstellungen eines Hilfsmerkmals sind fast identisch zu denen einer Merkmalsgruppe
image::hosttags_auxtag_basic_settings.png[alt="Die Einstellungen eines Hilfsmerkmals."]

Mit der unveränderlichen ID und einem aussagekräftigen Titel sind alle notwendigen Einstellungen eines Hilfsmerkmals gesetzt.
Die Zuordnung von Hilfsmerkmalen zu Host-Merkmalen erfolgt in den xref:create_tag_group[Merkmalsgruppen].


[#edit_delete_tag]
== Merkmalsgruppen und Merkmale ändern und löschen

Das Ändern der bestehenden Merkmalsgruppenkonfiguration mag auf den ersten Blick wie eine einfache Operation aussehen.
Das ist aber leider nicht immer so, da es größere Auswirkungen auf Ihre bestehende Konfiguration haben kann.

Änderungen, die lediglich die Anzeige betreffen oder nur neue Auswahlmöglichkeiten hinzufügen, sind unproblematisch und haben keine Auswirkung auf die bestehenden Hosts und Regeln:

* Änderung im Titel oder Thema von Merkmalen und Merkmalsgruppen
* Hinzufügen eines weiteren Merkmals zu einer Merkmalsgruppe

Alle anderen Änderungen können Auswirkungen auf bestehende Hosts und Regeln haben, die die betroffenen Merkmale verwenden.
{CMK} verbietet dabei nicht einfach solche Änderungen, sondern versucht für Sie, Ihre bestehende Konfiguration so anzupassen, dass alles wieder Sinn ergibt.
Was das genau bedeutet, hängt von der Art der Operation ab.


[#delete_tag_group]
=== Merkmalsgruppen löschen

Mit dem Löschen einer Merkmalsgruppe wird von allen Hosts die Information über die betroffenen Merkmale entfernt.
Falls die Merkmalsgruppe in vorhandenen Regeln als Bedingung verwendet wird, erhalten Sie folgende Warnung:

.Beim Löschen einer Merkmalsgruppe entscheiden Sie, wie die betroffenen Regeln angepasst werden
image::hosttags_delete_warn.png[alt="Warnung beim Löschen einer Merkmalsgruppe."]
// TK: Die im Screenshot gezeigte 2. Alternative bei Gruppen ist merkwürdig, denn wenn ich die Gruppe lösche, muss es eigentlich egal sein, ob ein Merkmal positiv oder negativ verwendet wird.

Sie müssen sich hier entscheiden, ob Sie aus bestehenden Regeln die Bedingungen mit den betroffenen Host-Merkmalen, oder ob Sie die ganzen Regeln löschen möchten.
Beides kann sinnvoll sein und {CMK} kann nicht für Sie entscheiden, was hier besser ist.
Wenn Sie sich nicht sicher sind, sollten Sie die Regeln (die in der Warnung verlinkt sind) von Hand durchgehen und alle Bedingungen der betroffenen Merkmalsgruppe von Hand entfernen oder abändern.


[#delete_tag]
=== Merkmale löschen

Das Löschen von Merkmalen erreichen Sie durch Editieren der Gruppe, Entfernen des Merkmals und anschließendes Speichern.
Dabei kann es zu einer ähnlichen Warnung wie beim Entfernen einer Merkmalsgruppe kommen.

Hosts, die das betroffene Merkmal gesetzt hatten, werden automatisch auf den Standardwert gesetzt.
Dies ist, wie beim xref:create_tag_group[Erstellen einer Merkmalsgruppe] beschrieben, stets das erste Merkmal in der Liste.

Regeln, die eine _negative_ Bedingung auf das Merkmal haben, verlieren einfach diese Bedingung -- ohne Rückfrage.
Wenn Sie z.B. eine Regel haben für alle Hosts erstellt haben, die *nicht* das Merkmal `dc02` haben und Sie entfernen das Merkmal `dc02` komplett aus der Konfiguration, dann ist augenscheinlich
auch diese Bedingung überflüssig.
// TK: Meiner Meinung nach stimmt dieser Absatz nicht: Wenn ich das Merkmal dc02 löschen will, das nur negativ verwendet wird, wird das eben nicht ohne Rückfrage erledigt, sondern ich erhalte obige Warnung.

Falls jedoch eine _positive_ Bedingung mit dem Merkmal existiert, kommt es wieder zu obiger Warnung und Sie müssen entscheiden, wie die Konfiguration angepasst werden soll.


[#rename_tag_id]
=== Merkmal-IDs umbenennen

Anders als bei den Merkmalsgruppen können Sie die IDs von Merkmalen tatsächlich nachträglich ändern.
Dies ist eine Ausnahme vom {CMK}-Prinzip, das IDs unveränderlich sind, wenn sie einmal vergeben wurden.
Diese Ausnahme kann aber nützlich sein, wenn Sie z.B. einen Datenimport von einem anderen System vorbereiten wollen, und dafür das vorhandene, unterschiedliche Merkmalschema in {CMK} anpassen müssen.

Um Merkmal-IDs umzubenennen, editieren Sie die Merkmalsgruppe und ändern dort einfach die IDs der Merkmale, wobei Sie *die Titel unverändert lassen.*
Letzteres ist wichtig, damit {CMK} überhaupt erkennen kann, dass es sich um eine Umbenennung handelt und nicht einfach eine Merkmal-ID entfernt und eine neue hinzugefügt wurde.

Bevor {CMK} mit der Anpassung der Konfiguration zu Werke geht, werden Sie über die Konsequenzen aufgeklärt:

.Die Warnung zeigt Ihnen, wie {CMK} die Umbennung der Merkmal-IDs durchführen wird
image::hosttags_rename_warn.png[alt="Warnung beim Umbenennen von von Merkmal-IDs."]

{CMK} wird nun alle betroffenen Ordner, Hosts und Regeln entsprechend anpassen.





Beachten Sie, dass es trotzdem noch Situationen geben kann, in denen Sie an anderen Stellen manuell nacharbeiten müssen.
So sind z.B. Merkmal-IDs Bestandteile von URLs, welche Views aufrufen, die nach Merkmalen filtern. {CMK} kann
diese URLs nicht für Sie anpassen. Auch Filter-Konfigurationen in Reports
und Dashboards können nicht automatisch angepasst werden. Es ist also sicher
eine gute Idee, sich über das Merkmalschema am Anfang genügend Gedanken zu
machen, so dass Sie Umbenennungen später nach Möglichkeit vermeiden können.


== Baumansicht aus Host-Merkmalen erstellen

Hosts werden in {CMK} in der Regel in Ordnern organisiert, woraus sich eine natürliche Hierarchie ergibt.
Diese können Sie als Baumansicht am unteren Ende des Seitenleisten-Snapins [.guihint]#Tree of Folders# darstellen und von dort die Standardansicht für die pro Verzweigung gefilterten Hosts aufrufen.
Das Snapin ergänzt diesen Baum noch um Filtermöglichkeiten für Themen und Optionen für unterschiedliche Ansichten.

Eine solche Baumansicht können Sie aber auch aus xref:wato_rules#hosttags[Host-Merkmalen] erstellen und so eine „virtuelle“ Hierarchie abbilden -- und zwar über das Snapin [.guihint]#Virtual Host Tree#.
Neben den Host-Merkmalen dürfen Sie auch die Ordnerstruktur in derlei Bäume einbauen, wobei sowohl die Anzahl der virtuellen Bäume als auch der jeweiligen Verzweigungen unbeschränkt ist.

Angenommen, Sie haben für Ihre Hosts die drei Merkmalsgruppen _Ort_,
_Geräteklasse_ und _Betriebssystem_ angelegt. Dann bekommen Sie auf
der obersten Baumebene eine Auswahl der Orte zu sehen, darunter der Geräteklassen
und letztlich der Betriebssysteme. Jede Hierarchieebene bringt Sie direkt zur
Ansicht aller Hosts mit eben diesen Merkmalen.

Zum Anlegen eines Virtual Host Tree fügen Sie zunächst das Snapin über
icon:button_sidebar_add_snapin[] unten links in der Seitenleiste zu dieser hinzu.

image::rules_virtual_host_tree_snapin.png[width=42%]

Rufen Sie dann die Einstellungen über [.guihint]#Setup > General > Global
Settings > User Interface > Virtual Host Trees# auf und erstellen Sie einen
neuen Baum über [.guihint]#Create new virtual host tree configuration#.

image::rules_virtual_host_tree_new.png[]

Vergeben Sie anschließend ID und
Titel des Baums und schließen Sie optional leere Baumzweige über ein Häkchen bei
[.guihint]#Exclude empty tag choices# aus. Anschließend fügen Sie über [.guihint]#Add new element#
die gewünschten Merkmalsgruppen in der gewünschten Reihenfolge hinzu. Wenn Sie die
Ordnerhierarchie als oberste Ordnung übernehmen wollen, beginnen Sie einfach
mit [.guihint]#WATO folder tree#. Die Reihenfolge/Hierarchie können Sie freilich wie
üblich über die Anfasser nachträglich ändern.

image::rules_virtual_host_tree_settings.png[]

Speichern Sie noch und übernehmen Sie die Änderungen -- und schon liefert die
Baumstruktur etliche neue Ansichten.

image::rules_virtual_host_tree_views.png[width=42%]

//ML: Ich würde noch irgendwas hier drunter pinnen - Hinweis auf anderes Thema, Warnung, was zu Fehler oder sonstwas. Ein Bild als Abschluss sieht einfach nicht gut aus.
