include::global_attr.adoc[]
= {CMK}-Server im Docker-Container
:revdate: 2021-04-22
:title: {CMK}-Server im Docker-Container
:description: Nach dem Start eines Docker-Containers folgt seine Pflege. Dieser Artikel beschreibt, welche Besonderheiten dabei zu beachten sind.

{related-start}
link:introduction_docker.html[Installation als Docker-Container]
link:introduction_virt1.html[Installation der virtuellen Appliance]
link:update.html[Updates und Upgrades]
{related-end}



== {CMK} im Docker-Container

In unserer xref:introduction_docker#[Installationsanleitung für {CMK} in Docker]
haben wir Ihnen bereits gezeigt, wie Sie {CMK} in einem Docker-Container aufsetzen
können. Dieser Artikel geht etwas ausführlicher auf die weiteren Einzelheiten
ein.


== Optionale Parameter bei der Einrichtung

Alle folgenden Parameter werden zusätzlich bei der Einrichtung einer
{CMK}-Instanz als Container angegeben und stehen daher
nicht alleine.

[#https]
=== Nutzung von HTTPS

Wenn {CMK} der einzige Webserver auf Ihrer Dockernode ist, können Sie
den Port auch auf den Standard Port (`80`) von HTTP binden. Sobald sie
jedoch mehrere Webserver auf einer Dockernode haben, werden Sie wahrscheinlich
einen Reverse-Proxy wie NGINX nutzen. Dieser leitet die Anfragen an
den richtigen Container weiter. Über diese Technologie können Sie auch
(eventuell bereits vorhandenes) HTTPS nutzen. Der Reverse-Proxy wird dann
über HTTPS angesprochen, während die Kommunikation mit dem Container
weiterhin über HTTP erfolgt.


=== Setzen eines initialen Passworts

In {CMK} wird beim xref:checkmk_getting_started#create_site[Erstellen einer Instanz] ein zufälliges Passwort für den Standardbenutzer
`cmkadmin` gewählt. 

Bei der Erstellung eines {CMK}-Containers können
sie auch ein manuelles Passwort vergeben. Fügen Sie dazu lediglich die
Option `-e CMK_PASSWORD='mypassword'` der Erstellung hinzu.


=== Setzen einer eigenen Instanz-ID

Mit dem Standardbefehl zur Erstellung eines {CMK}-Containers wird
die ID der erzeugten Instanz in dem Container `cmk`. Diese ist
wichtig, um die Instanz über HTTP(S) ansteuern zu können und muss daher
eindeutig sein. Wenn Sie mehrere Container von {CMK} auf der gleichen
Dockernode betreiben wollen, werden Sie die ID manuell setzen müssen, um
die Eindeutigkeit gewährleisten zu können. Sie erreichen das, indem Sie
die Option `-e CMK_SITE_ID=mysite` hinzufügen.


=== Senden von Benachrichtigungen

Eine wichtige Funktionen von {CMK} ist es, im Falle von Problemen
xref:monitoring_basics#notifications[Benachrichtigungen] per E-Mail
zu versenden. {CMK} nutzt in seinen Container-Images Postfix als MTA
(Mail Transfer Agent) für ausgehende E-Mails. Dieser ist so konfiguriert,
dass er die E-Mails nicht direkt an die Empfänger zustellt sondern
grundsätzlich an einen einen weiteren Mailserver (SMTP-Relay-Server,
Smarthost) weiterleiten möchte, welchen Sie außerhalb des Containers
bereitstellen müssen. So ein Relay-Server ist praktisch in jeder
Organisation vorhanden.

Geben Sie bei der Erstellung den Relay-Mailserver an, der die
Benachrichtigungen weiterleiten soll. Dazu setzen Sie mit der Option
`-e` die Variable `MAIL_RELAY_HOST`, wie zum Beispiel `-e
MAIL_RELAY_HOST='mailrelay.mydomain.com'`. Falls der Mailserver einen
korrekten Hostnamen erwartet, fügen sie zusätzlich folgende Option an:
`--hostname 'mymonitoring.mydomain.com'`.

{CMK}-Container unterstützen derzeit keine Konfiguration von
Zugangsdaten für den Smarthost. Falls Sie diese benötigen, können Sie eine
Postfix-Konfiguration oder ein Konfigurationsverzeichnis aus dem Dockernode
in den Container binden.

Falls Sie eine {CEE} verwenden, können Sie Postfix auch komplett umgehen
und die Benachrichtigungen von {CMK} direkt an einen Smarthost weiterleiten
lassen. Dies geschieht per xref:notifications#syncsmtp[synchronem SMTP] und
ist im Artikel über die xref:notifications#[Benachrichtigungen] genauer beschrieben.
Und hier ist auch eine Authentifizierung innerhalb von SMTP möglich.


=== Zugriff auf Livestatus per TCP

Sobald sie mehrere {CMK}-Container/Instanzen miteinander zu einer
verteilten Umgebung verknüpfen wollen, benötigen Sie einen speziellen
TCP-Port für die Schnittstelle Livestatus. Diese Schnittstelle ermöglicht
die Kommunikation der Instanzen untereinander. Binden Sie dafür diesen Port,
wie den Port für HTTP auch, an einen der Dockernodes und aktivieren Sie diesen
TCP-Port in der Instanz für Livestatus: 
`-e CMK_LIVESTATUS_TCP=on -p 6557:6557`.


[#bash]
=== Zugriff per Kommandozeile

In machen Fällen werden Sie Befehle auf der Kommandozeile ausführen
wollen. Da Befehle für eine Instanz immer mit einem speziellen Benutzer
ausgeführt werden, müssen Sie diesen bei dem Login angeben. Der Benutzer hat
in {CMK} immer den gleichen Namen wie die Instanz, die er verwaltet. Mit
der Option `-u cmk` geben Sie den Benutzer `cmk` an:

[{shell}]
----
{c-root} docker container exec -it -u cmk monitoring bash
----

Danach können Sie Ihre xref:cmk_commandline#[Befehle] an die Instanz übergeben.

=== Nutzung der Event Console

{CMK} ist in der Lage SNMP-Traps und Syslog-Nachrichten zu empfangen. Damit
Sie diese Funktion in einem {CMK}-Container nutzen können, müssen sie die
standardisierten Ports mit den folgenden Optionen an den {CMK}-Container
weiterreichen: `-p 162:162/udp -p 514:514/udp -p 514:514/tcp`. Damit
die Instanz selbst auch diese Ports beachtet, schalten Sie danach in der
Instanz mit xref:omd_basics#omd_config[`omd config`] die entsprechenden
Addons ein. Sie finden diese in dem Untermenü `Addons`:

[{shell}]
----
{c-root} docker container exec -it -u cmk monitoring bash
{c-omd} omd config
----


== Eigene Container-Images erstellen

Sie können mit Hilfe unseres Respository auch eigene Images
mit einer {CEE} erstellen. Klonen Sie sich dazu das aktuelle
link:https://github.com/tribe29/checkmk[{CMK}-Git] und navigieren
sie zu dem `docker`-Verzeichnis. Sie können sich nun mit Hilfe Ihrer
Kundendaten ein eigenes Image erstellen:

[{shell}]
----
myuser@myhost:~/git/check_mk/docker$ docker build \
    --build-arg CMK_VERSION=1.5.0p5 \
    --build-arg CMK_EDITION=enterprise \
    --build-arg CMK_DL_CREDENTIALS='myusername:mypassword' \
    -t mycompany/check-mk-enterprise:1.5.0p5
----

Während des Bauprozesses werden zwei externe Dateien benötigt, welche
mit Ihren Kundenlogindaten automatisch von unserem Downloadserver geladen
werden. Um das zu verhindern, können Sie die benötigten Dateien auch vorher
manuell laden und in dem `docker`-Verzeichnis ablegen:

*  Das Installationspaket von {CMK} zu Debian Stretch
*  Der öffentliche GPG-Schlüssel zu dem Installationspaket


[#commands]
== Nützliche Befehle

[cols=2]
|===
|Befehl |Beschreibung 

|docker inspect myContainer |Mit diesem Befehl können Sie allerlei Informationen über einen laufenden Container mit dem Namen `myContainer` bekommen. Unter anderem finden Sie hier, welche Datenspeicher (Volumes) eingebunden sind. Das ist vor allem dann nützlich, wenn Sie dem Volume keinen menschenlesbaren Namen gegeben haben und Ihren xref:update#updatedocker[Container aktualisieren] wollen.
|===


