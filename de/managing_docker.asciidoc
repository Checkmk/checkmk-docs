include::global_attr.adoc[]
= {CMK}-Server im Docker-Container
:revdate: 2018-12-12
:title: {CMK} als Container verwalten
:description: Nach dem Start eines Containers folgt seine Pflege. Dieser Artikel beschreibt, welche Besonderheiten zu beachten sind, wenn checkmk im Container läuft.

{related-start}
link:introduction_docker.html[Installation als Docker-Container]
link:introduction_virt1.html[Installation der virtuellen Appliance]
{related-end}

== {CMK} im Docker-Container

In unserer link:introduction_docker.html[Installationsanleitung für {CMK} in Docker]
haben wir Ihnen bereits gezeigt, wie Sie {CMK} in einem Docker-Container aufsetzen
können. Dieser Artikel geht etwas ausführlicher auf die weiteren Einzelheiten
ein.


== Optionale Parameter bei der Einrichtung

Alle folgenden Parameter werden zusätzlich bei der Einrichtung einer
{CMK}-Instanz als Container angegeben und stehen daher
nicht alleine.

[#https]
=== Nutzung von HTTPS

Wenn {CMK} der einzige Webserver auf Ihrer Dockernode ist, können Sie
den Port auch auf den Standard Port (`80`) von HTTP binden. Sobald sie
jedoch mehrere Webserver auf einer Dockernode haben, werden Sie wahrscheinlich
einen Reverse-Proxy wie NGINX nutzen. Dieser leitet die Anfragen an
den richtigen Container weiter. Über diese Technologie können Sie auch
(eventuell bereits vorhandenes) HTTPS nutzen. Der Reverse-Proxy wird dann
über HTTPS angesprochen, während die Kommunikation mit dem Container
weiterhin über HTTP erfolgt.


=== Setzen eines initialen Passworts

In {CMK} wird bei der Einrichtung einer Instanz ein
link:introduction_packages.html#login[zufälliges Passwort] für den Standardbenutzer
`cmkadmin` erstellt. Bei der Erstellung eines {CMK}-Containers können
sie auch ein manuelles Passwort vergeben. Fügen Sie dazu lediglich die
Option `-e CMK_PASSWORD='mypassword'` der Erstellung hinzu.


=== Setzen einer eigenen Instanz-ID

Mit dem Standardbefehl zur Erstellung eines {CMK}-Containers wird
die ID der erzeugten Instanz in dem Container `cmk`. Diese ist
wichtig, um die Instanz über HTTP(S) ansteuern zu können und muss daher
eindeutig sein. Wenn Sie mehrere Container von {CMK} auf der gleichen
Dockernode betreiben wollen, werden Sie die ID manuell setzen müssen, um
die Eindeutigkeit gewährleisten zu können. Sie erreichen das, indem Sie
die Option `-e CMK_SITE_ID=mysite` hinzufügen.


=== Senden von Benachrichtigungen

Eine wichtige Funktionen von {CMK} ist es, im Falle von Problemen
link:monitoring_basics.html#notifications[Benachrichtigungen] per Email
zu versenden. {CMK} nutzt in seinen Container-Images Postfix als MTA
(Mail Transfer Agent) für ausgehende Emails. Dieser ist so konfiguriert,
dass er die Emails nicht direkt an die Empfänger zustellt sondern
grundsätzlich an einen einen weiteren Mailserver (SMTP-Relay-Server,
Smarthost) weiterleiten möchte, welchen Sie außerhalb des Containers
bereitstellen müssen. So ein Relay-Server ist praktisch in jeder
Organisation vorhanden.

Geben Sie bei der Erstellung den Relay-Mailserver an, der die
Benachrichtigungen weiterleiten soll. Dazu setzen Sie mit der Option
`-e` die Variable `MAIL_RELAY_HOST`, wie zum Beispiel `-e
MAIL_RELAY_HOST='mailrelay.mydomain.com'`. Falls der Mailserver einen
korrekten Hostnamen erwartet, fügen sie zusätzlich folgende Option an:
`--hostname 'mymonitoring.mydomain.com'`.

{CMK}-Container unterstützen derzeit keine Konfiguration von
Zugangsdaten für den Smarthost. Falls Sie diese benötigen, können Sie eine
Postfix-Konfiguration oder ein Konfigurationsverzeichnis aus dem Dockernode
in den Container binden.

Falls Sie eine {CEE} verwenden, können Sie Postfix auch komplett umgehen
und die Alarmierung von {CMK} direkt an einen Smarthost weiterleiten
lassen. Dies geschieht per link:notifications.html#syncsmtp[synchronem SMTP] und
ist im Artikel über die link:notifications.html[Alarmierung] genauer beschrieben.
Und hier ist auch eine Authentifizierung innerhalb von SMTP möglich.


=== Zugriff auf Livestatus per TCP

Sobald sie mehrere {CMK}-Container/Instanzen miteinander zu einer
verteilten Umgebung verknüpfen wollen, benötigen Sie einen speziellen
TCP-Port für die Schnittstelle Livestatus. Diese Schnittstelle ermöglicht
die Kommunikation der Instanzen untereinander. Binden Sie dafür diesen Port,
wie den Port für HTTP auch, an einen der Dockernodes und aktivieren Sie diesen
TCP-Port in der Instanz für Livestatus: `-e CMK_LIVESTATUS_TCP=on
-p 6557:6557`.


[#bash]
=== Zugriff per Kommandozeile

In machen Fällen werden Sie Befehle auf der Kommandozeile ausführen
wollen. Da Befehle für eine Instanz immer mit einem speziellen Benutzer
ausgeführt werden, müssen Sie diesen bei dem Login angeben. Der Benutzer hat
in {CMK} immer den gleichen Namen wie die Instanz, die er verwaltet. Mit
der Option `-u cmk` geben Sie den Benutzer `cmk` an:

[{shell}]
----
{c-root} docker container exec -it -u cmk monitoring bash
----

Danach können Sie Ihre link:cmk_commandline.html[Befehle] an die Instanz übergeben.

=== Nutzung der Event Console

{CMK} ist in der Lage SNMP-Traps und Syslog-Nachrichten zu empfangen. Damit
Sie diese Funktion in einem {CMK}-Container nutzen können, müssen sie die
standardisierten Ports mit den folgenden Optionen an den {CMK}-Container
weiterreichen: `-p 162:162/udp -p 514:514/udp -p 514:514/tcp`. Damit
die Instanz selbst auch diese Ports beachtet, schalten Sie danach in der
Instanz mit link:omd_basics.html#omdconfig[`omd config`] die entsprechenden
Addons ein. Sie finden diese in dem Untermenü `Addons`:

[{shell}]
----
{c-root} docker container exec -it -u cmk monitoring bash
{c-omd} omd config
----


[#update_easy]
== Einen {CMK}-Container aktualisieren

=== Einfaches Update für aktuelle {CMK}-Images

Die Aktualisierung einer {CMK}-Instanz unterscheidet sich je nach Version
des Images. Ab {v15}p13 gestaltet sich der Update-Prozess sehr einfach und
es gibt lediglich die folgenden Vorausetzungen:

* Der Container wird nicht gelöscht, wenn der Container gestoppt wird. Das heißt, die Option `--rm` wurde beim Starten nicht benutzt.
* Sie kennen die ID des Datenspeichers (Volume) zu dem Container. Normalerweise sollten Sie beim Start des Containers seinem Speicher eine eindeutige ID gegeben haben. Wenn Sie sich unsicher sind, wie die ID Ihres Volumes ist, finden Sie link:managing_docker.html#commands[weiter unten Hilfe].

Wenn Sie der link:introduction_docker.html[Einführung zu {CMK} im Container] gefolgt
sind, sollten Sie die ersten beiden Vorausetzungen automatisch erfüllen. Wenn
Ihr Container ein Image nutzt, welches älter als {v15}p13 ist,
folgen Sie bitte den Anweisungen link:managing_docker.html#update_complex[weiter unten].
Ansonsten ist der Aktualisierungsprozess in 3 Schritten erledigt:

. Stoppen Sie den Container. Wenn der {CMK}-Container `myContainer` heißt, lautet der Befehl zum Beispiel: `docker stop myContainer`.
. Entfernen Sie den Container. Der Befehl dazu ist: `docker rm myContainer`.
. Starten Sie einen neuen Container mit der gewünschten Version und binden Sie das bekannte Volume ein. Wenn Ihr Volume `myVolume` heißt, heißt die entsprechende Option `-v myVolume:/omd/sites`.

Danach wird {CMK} automatisch den Rest erledigen und Ihre {CMK}-Instanz
aktualisieren und starten. Sie können sich danach wie gewohnt einloggen.


[#update_complex]
=== Detailliertes Update für frühere {CMK}-Images

Eine Aktualisierung einer {CMK}-Instanz vor {v15}p13 ist komplexer.
Der Grund liegt vor allem in der Architektur von {CMK}, da die Konfiguration
einer Instanz und andere Daten im Zuge eines Versionswechsels ebenfalls
aktualisiert werden müssen. Eine Aktualisierung erfolgt daher -- anders
als oben beschrieben oder link:update.html#execute[auf einem Server direkt] -- in den
folgenden Schritten:


==== Den {CMK}-Container sichern

Wenn Sie den Container wie empfohlen erstellt haben, werden alle Daten in einem
persistenten Dateisystem gespeichert, welches unabhängig von dem Container
ist. Es ist daher nicht ausreichend, von dem Container einen Snapshot zu
erstellen, um die Daten zu sichern. Stoppen Sie daher den Container und
sichern die Daten aus dem Container heraus an eine geeignete Stelle:

[{shell}]
----
{c-root} docker stop monitoring
monitoring
{c-root} docker cp monitoring:/omd/sites - > /my/path/to/backup.tar
----


==== Den {CMK}-Container updaten

Erstellen Sie nun einen zweiten Container mit der neuen Version, damit für
das Update sowohl die alte Version, als auch die gewünschte zur Verfügung
steht. Dabei wird ein Kommando übergeben, um zu verhindern, dass die dabei
gestartet wird. Halten Sie diese Shell offen, um das später das Update
durchführen zu können:

[{shell}]
----
{c-root} sudo docker container run -it --rm --volumes-from monitoring --name monitoring_update checkmk/check-mk-enterprise:1.5.0p6 bash
root@801beb91d3b6:/#
----

{CMK} setzt immer einen Standard, welche {CMK}-Version genutzt werden
soll. Ändern Sie diesen Eintrag auf dem zweiten Container mit dem folgenden
Befehl:

[{shell}]
----
{c-root} docker cp -L monitoring:/omd/versions/default - | docker cp - monitoring_update:/omd/versions/
----

Nun können Sie das Update auf dem zweiten Container durchführen. Beenden
Sie gegebenenfalls die offene Shell, nachdem das Update beendet ist:

[{shell}]
----
{c-root} docker exec -it -u cmk monitoring_update omd update
2018-10-12 14:32:29 - Updating site 'mytest' from version 1.5.0p4.cee to 1.5.0p5.cee...

 [green]#** Updated        *etc/apache/conf.d/omd.conf*
Finished update.
----


==== Den {CMK}-Container austauschen

Nachdem Sie die (Konfigurations-)Daten aktualisiert haben, können sie den
alten Container durch einen neuen ersetzen. Benennen Sie dazu den alten
Container zunächst um:

[{shell}]
----
{c-root} docker rename monitoring monitoring_old
{c-root} 
----

Sie können nun einen Container mit der neuen {CMK}-Version starten und
diesem das aktualisierte Dateisystem von dem alten Container zuordnen:

[{shell}]
----
{c-root} docker container run -dit -p 8080:5000 --tmpfs /omd/sites/cmk/tmp --volumes-from monitoring_old --name monitoring checkmk/check-mk-enterprise:1.5.0p6
----

Auch hier können Sie wieder in Logs sehen, ob der ohne Probleme gestartet
wurde:

[{shell}]
----
{c-root} docker container logs monitoring
// STARTING SITE
Preparing tmp directory /omd/sites/cmk/tmp...OK
Starting mkeventd...OK
Starting liveproxyd...OK
Starting mknotifyd...OK
Starting rrdcached...OK
Starting cmc...OK
Starting apache...OK
Initializing Crontab...OK
// STARTING CRON
// CONTAINER STARTED
----

Abschließend entfernen Sie noch den alten Container:

[{shell}]
----
{c-root} docker rm monitoring_old
----

////
SK: I removed this paragraph for the time being. Currently this does not work.
== Eigene Container-Images erstellen

Sie können mit Hilfe unseres Respository auch eigene Images
mit einer {CEE} erstellen. Klonen Sie sich dazu das aktuelle
link:https://github.com/tribe29/checkmk[{CMK}-Git] und navigieren
sie zu dem `docker`-Verzeichnis. Sie können sich nun mit Hilfe Ihrer
Kundendaten ein eigenes Image erstellen:

[{shell}]
----
UP(myuser@myhost:~/git/check_mk/docker#):docker build \
    --build-arg CMK_VERSION=1.5.0p5 \
    --build-arg CMK_EDITION=enterprise \
    --build-arg CMK_DL_CREDENTIALS='myusername:mypassword' \
    -t mycompany/check-mk-enterprise:1.5.0p5
----

Während des Bauprozesses werden zwei externe Dateien benötigt, welche
mit Ihren Kundenlogindaten automatisch von unserem Downloadserver geladen
werden. Um das zu verhindern, können Sie die benötigten Dateien auch vorher
manuell laden und in dem `docker`-Verzeichnis ablegen:

*  Das Installationspaket von {CMK} zu Debian Stretch
*  Der öffentliche GPG-Schlüssel zu dem Installationspaket
////

== Nützliche Befehle

[cols=2]
|===
|Befehl |Beschreibung 

|docker inspect myContainer |Mit diesem Befehl können Sie allerlei Informationen über einen laufenden Container mit dem Namen `myContainer` bekommen. Unter anderem finden Sie hier, welche Datenspeicher (Volumes) eingebunden sind. Das ist vor allem dann nützlich, wenn Sie dem Volume keinen menschenlesbaren Namen gegeben haben und Ihren Container aktualisieren wollen.
|===



