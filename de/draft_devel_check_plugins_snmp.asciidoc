// -*- coding: utf-8 -*-
// IGNORE 0° 1° Festkommazahl menschenlesbare vorzeichenbehaftete Benachrichtigungs rev23 Routertyp
include::global_attr.adoc[]
= SNMP-basierte Check-Plugins schreiben
:revdate: draft
:title: SNMP-basierte Check-Plugins schreiben
:description: Hier erfahren Sie, wie Sie Check-Plugins für SNMP mithilfe der Check-API entwickeln und in {CMK} nutzen können.

{related-start}
xref:devel_check_plugins#[Agentenbasierte Check-Plugins schreiben]
xref:draft_intro_devel#[Erweiterungen für {CMK} entwickeln]
xref:snmp#[Überwachen via SNMP]
xref:wato_services#[Services verstehen und konfigurieren]
xref:cmk_commandline#[{CMK} auf der Kommandozeile]
{related-end}


[#intro]
== Einleitung

Check-Plugins, die mit SNMP arbeiten, werden auf ähnliche Weise entwickelt wie ihre xref:devel_check_plugins#[agentenbasierten Verwandten.]
Der Unterschied liegt sowohl im Ablauf der Service-Erkennung (Discovery) als auch des Checks selbst.
Bei den agentenbasierten Checks wird mit dem Agentenplugin festgelegt wird, welche Daten an die Checkmk-Site _gesendet_ werden, zudem findet dort oft bereits eine Vorfilterung (aber keine Auswertung) statt.
Im Gegensatz dazu müssen Sie bei SNMP selbst genau festlegen, welche Datenbereiche Sie benötigen und diese explizit _anfordern_.
Diese Bereiche (Äste eines Baumes) oder einzelne Datenfelder (Blätter) werden bei SNMP durch OIDs (_object identifier_) identifiziert.

Ein Komplettabzug aller Daten wäre zwar theoretisch möglich (durch den sogenannten _SNMP-Walk_),
dauert aber selbst bei schnellen Geräten eher im Bereich von Minuten und bei komplexen Switches gern auch über eine Stunde.
Daher scheidet dies bereits bei der Discovery und erst recht beim Check selbst aus.
{CMK} geht hier zielgerichteter vor.
Für das Debugging vorhandener Checks und die Entwicklung eigener Checks stehen dennoch SNMP-Walks in {CMK} zur Verfügung.


Falls Sie noch keine Erfahrung mit SNMP haben, empfehlen wir Ihnen als vorbereitende Lektüre den Artikel über das xref:snmp#[Überwachen via SNMP.]


[#snmp_special]
=== Was bei SNMP anders läuft

Im Vergleich zu einem Check-Plugin für den {CMK}-Agenten gibt es bei SNMP einige Besonderheiten zu beachten.
Bei einem Check-Plugin für SNMP teilt sich die Service-Erkennung in zwei Phasen auf.

Zunächst erfolgt mit der *SNMP-Detection* die Erkennung des Gerätes.
Diese dient dazu, zu ermitteln, welche Check-Plugins denn überhaupt für das jeweilige Gerät interessant sind.
// TK: Die SNMP-Detection checkt doch nur, ob bestimmte OIDs vorhanden sind und/oder bestimmte Werte haben. Was hat das mit Plugins zu tun?
// MFS: Das ist zunächst der Versuch, ein Gerät zu identifizieren.
Dazu werden einige wenige OIDs abgerufen -- und zwar einzelne, ohne SNMP-Walk.
Die wichtigste davon ist die `sysDescr` (OID: `1.3.6.1.2.1.1.1.0`).
Unter dieser OID hält jedes SNMP-Gerät eine Beschreibung von sich selbst bereit, zum Beispiel `Flintstones, Inc. Fred Router rev23`.
// MFS: So ziemlich jede SNMP-Dokumentation verwendet "Flintstones, Inc. Fred Router", meist zusammen mit der Hersteller-ID 4242, die mittlerweile vergeben ist oder der noch nicht vergebenen 424242.
Inc. Fred Router

////
Ausgehend von diesem Text kann man für sehr viele Plugins schon definitiv entscheiden, ob diese hier Sinn ergeben.
// TK: Ach ja? Was entscheide ich denn anhand des oben gezeigten Beispieltextes? Und wie mache ich das? Oder wer macht das?
Wenn der Text noch nicht spezifisch genug ist, werden weitere OIDs geholt und geprüft.
Ergebnis der SNMP-Detection ist dann eine Kandidaten-Liste von Check-Plugins.
// TK: Ich versteh es nicht: Was tue ich hier? Ein Check-Plugin entwickeln - oder Check-Plugins suchen, die auch noch auf dem Gerät laufen?
////

Im zweiten Schritt werden für jeden dieser Kandidaten die jeweils nötigen Monitoring-Daten mit SNMP-Walks geholt.
Diese werden dann zu einer Tabelle zusammengefasst und der *Discovery-Funktion* des Check-Plugins in dem Argument `section` bereitgestellt, welche dann daraus die zu überwachenden Items ermittelt.

Beim *Check* ist dann schon bekannt, welche Plugins für das Gerät ausgeführt werden sollen und die SNMP-Detection entfällt.
// TK: Wie kann etwas entfallen, was vorher noch gar nicht da war?
Hier werden gleich per SNMP-Walks die für die Plugins benötigten Monitoring-Daten geholt und daraus das Argument `section` für die Check-Funktion befüllt.
// TK: gleich? Hier? Die Monitoring-Daten wurden doch gerade schon geholt. Jetzt nochmal?

Was müssen Sie also bei einem SNMP-Check anders machen als bei einem agentenbasierten?

. Sie benötigen _kein_ xref:glossar#agent_plugin[Agentenplugin.]

. Sie legen die für die SNMP-Detection nötigen OIDs fest und die Texte, die diese enthalten sollen.

. Sie entscheiden, welche SNMP-Bereiche für das Monitoring geholt werden müssen.


[#mibs]
=== Keine Angst vor MIBs!

In diesem kurzen Einschub wollen wir auf die berüchtigten SNMP-MIBs eingehen, über die es viele Vorurteile gibt.
Die gute gute Nachricht:
{CMK} benötigt keine MIBs!
Sie können aber eine wichtige Hilfe bei der _Entwicklung_ eines Check-Plugins oder der _Fehlersuche_ in vorhandenen Plugins sein.

Was sind MIBs?
MIB bedeutet wörtlich  _Management Information Base,_ was kaum mehr Information als die Abkürzung beinhaltet.
Konkret ist eine MIB eine auch menschenlesbare Textdatei, welche Äste und Blätter im Baum der SNMP-Daten beschreibt.

OIDs können Äste oder Blätter identifizieren.
In der Beschreibung der Äste finden Sie Informationen zu den System- und Subsysteminformationen, welche der Ast bereithält.
Referenziert eine OID ein Blatt, enthalten die Informationen der MIB Hinweise zum Datentyp (Zeichenkette, Festkommazahl, Hex-String...), dem Wertebereich und der Repräsentation.
So können Temperaturen beispielsweise mal als vorzeichenbehaftete Festkommazahl auf der Celsius-Skala in 0,1° Auflösung gespeichert werden oder mal ohne Vorzeichen in Schritten von 1,0° auf der Kelvin-Skala.

////
Hier steht, welcher Ast im Baum -- also welche _OID_ -- welche Bedeutung hat.
Das umfasst einen Namen für die OID, einen Hinweis, welche Werte diese annehmen kann
(zum Beispiel bei enumerierten Datentypen, die dann Dinge wie `1=up`, `2=down`, etc. festlegen) und manchmal auch noch einen nützlichen Kommentar.
////

{CMK} liefert eine Reihe von frei verfügbaren MIB-Dateien mit aus.
Diese beschreiben sehr allgemeine Bereiche im globalen OID-Baum, enthalten aber keine herstellerspezifischen Bereiche.
Daher helfen sie für selbst entwickelte Check-Plugins nicht viel weiter.

Versuchen Sie also, die für Ihr spezielles Gerät relevanten MIB-Dateien irgendwo auf der Website des Herstellers oder sogar auf dem Management-Interface des Geräts zu finden.
Installieren Sie diese Dateien in der {CMK}-Instanz in das Verzeichnis `~/local/share/check_mk/mibs/`.
Dann können Sie in SNMP-Walks OID-Nummern in Namen übersetzen lassen und so schneller die für das Monitoring interessanten Daten finden.
// TK: Ein SNMP-Walk holt doch die SNMP-Daten. Ist das nicht dasgleiche in Grün? Kann ich nur mit einer MIB aus OIDs Namen machen?
// MFS: Ja, ohne MIBs nur Zahlensalat.
Wie bereits erwähnt, enthalten gut gepflegte MIBs außerdem interessante Informationen in den Kommentaren.
Sie können eine MIB-Datei einfach mit einem Texteditor oder dem Pager `less` ansehen.

[#locating_oids]
== Die richtigen OIDs finden

Die entscheidende Voraussetzung, um ein Check-Plugin zu entwickeln, ist, dass Sie wissen, welche OIDs die relevanten Informationen enthalten.
Für das vorgestellte Beispielszenario gehen wir davon aus, dass Sie einen Schwung Router vom Typ _Flintstones, Inc. Fred Router rev23_ (diesem fiktiven Gerät werden Sie auch häufig in Herstellerdokumentation und MIB-Kommentaren begegnen) frisch in Betrieb genommen haben, dabei aber bei einigen Geräten vergessen haben, Kontakt- und Standortinformationen einzutragen.
Ein selbst geschriebenes Check-Plugin für {CMK} soll nun helfen, diese Geräte zu identifizieren.

*Praxistipp:* Das von uns vorbereitete Beispiel-Plugin ist so geschrieben, dass Sie es mit _beinahe jedem_ SNMP fähigen Gerät durchspielen können.
Lediglich die zu vergleichende Zeichenkette ist anzupassen.
Ist gerade keines zur Hand, finden Sie im Kapitel zur xref:errors[Fehlerbehebung] verschiedene Simulationsmöglichkeiten.

Der erste Schritt dahin ist, einen kompletten SNMP-Walk zu ziehen -- falls das Gerät das nicht verweigert.
// TK: Und wenn? Was dann? Finito?
Dabei werden _alle_ per SNMP verfügbaren Daten abgerufen.
{CMK} kann das sehr einfach für Sie erledigen.
Nehmen Sie dazu zunächst das Gerät, für das Sie ein Check-Plugin entwickeln wollen, xref:snmp#add_device[in das Monitoring auf.]
Stellen Sie sicher, dass es xref:snmp#services[in den Grundfunktionen] überwacht werden kann.
Zumindest müssen die Services [.guihint]#SNMP Info# und [.guihint]#Uptime# gefunden werden und wahrscheinlich auch noch mindestens ein [.guihint]#Interface#.
So stellen Sie sicher, dass der SNMP-Zugriff sauber funktioniert.

Wechseln Sie dann auf die Kommandozeile der {CMK}-Instanz.
Hier können Sie mit folgendem Befehl einen kompletten Walk ziehen -- im folgenden Beispiel für das Gerät mit dem Host-Namen `mydevice01`.
Dabei empfehlen wir, zusätzlich die Option `-v` (für _verbose_) zu verwenden:

[{shell}]
----
{c-omd} cmk -v --snmpwalk mydevice01
mydevice01:
Walk on ".1.3.6.1.2.1"...3898 variables.
Walk on ".1.3.6.1.4.1"...6025 variables.
Wrote fetched data to /omd/sites/mysite/var/check_mk/snmpwalks/mydevice01.
----

Wie bereits erwähnt, kann so ein kompletter SNMP-Walk Minuten oder sogar Stunden dauern (auch wenn letzteres eher selten ist).
Werden Sie also nicht nervös, wenn es hier etwas dauert.
Der Walk wurde nun in der Datei `~/var/check_mk/snmpwalks/mydevice01` gespeichert.
Es handelt sich dabei um eine gut lesbare Textdatei, die etwa so beginnt:

.~/var/check_mk/snmpwalks/mydevice01
[{file}]
----
.1.3.6.1.2.1.1.1.0 Flintstones, Inc. Fred Router rev23
.1.3.6.1.2.1.1.2.0 .1.3.6.1.4.1.424242.2.3
.1.3.6.1.2.1.1.3.0 546522419
.1.3.6.1.2.1.1.4.0 barney@example.com
.1.3.6.1.2.1.1.5.0 big-router-01
.1.3.6.1.2.1.1.6.0 Server room 23, Stonestreet 52, Munich
.1.3.6.1.2.1.1.7.0 42
.1.3.6.1.2.1.1.8.0 27
----

In jeder Zeile steht eine OID und danach deren Wert.
// Der Aufbau ähnelt dem Domänenmodell im Internet: `1.3.6.1.2` entspricht `iso.org.dod.internet.mgmt` und so weiter.
Und gleich in der ersten Zeile finden Sie die wichtigste, nämlich die `sysDescr`.
Diese sollte ein Hardwaremodell eindeutig identifizieren.

Interessant ist auch die zweite Zeile: Unterhalb von `1.3.6.1.4.1` befinden sich Äste, die Hardwarehersteller selbst belegen können, hier hat _Flintstones, Inc._ die fiktive Hersteller-ID `424242`.
Darunter hat das Unternehmen die `2` für Router vergeben und die `3` eben jenem Modell.
Innerhalb dieses Astes finden Sie dann gerätespezifische OIDs.

Nun sind die OIDs nicht sehr aussagekräftig.
Wenn die richtigen MIBs installiert sind, können Sie diese in einem zweiten Schritt in Namen übersetzen lassen.
Am besten leiten Sie die Ausgabe des folgenden Befehls, die sonst im Terminal angezeigt würde, in eine Datei um:

[{shell}]
----
{c-omd} cmk --snmptranslate mydevice01 > /tmp/translated
----

Die Datei `translated` liest sich wie der ursprüngliche Walk, zeigt aber in jeder Zeile nach dem `--&gt;` den Namen der OID:
// TK: Brauch ich für --snmptranslate die zugehörige MIB oder nicht?
// TK: Ich habs für einen SNMP gewalkten Netgear-Switch ausprobiert - und es hat funktioniert - wenn auch nur teilweise für einige OIDs

.translated
[{file},highlight=4]
----
.1.3.6.1.2.1.1.1.0 Flintstones, Inc. Fred Router rev23 --> SNMPv2-MIB::sysDescr.0
.1.3.6.1.2.1.1.2.0 .1.3.6.1.4.1.424242.2.3 --> SNMPv2-MIB::sysObjectID.0
.1.3.6.1.2.1.1.3.0 546522419 --> DISMAN-EVENT-MIB::sysUpTimeInstance
.1.3.6.1.2.1.1.4.0 barney@example.com --> SNMPv2-MIB::sysContact.0
.1.3.6.1.2.1.1.5.0 big-router-01 --> SNMPv2-MIB::sysName.0
.1.3.6.1.2.1.1.6.0 Server room 23, Stonestreet 52, Munich --> SNMPv2-MIB::sysLocation.0
.1.3.6.1.2.1.1.7.0 42 --> SNMPv2-MIB::sysServices.0
.1.3.6.1.2.1.1.8.0 27 --> SNMPv2-MIB::sysORLastChange.0
----

In der obigen Ausgabe hat zum Beispiel die OID `.1.3.6.1.2.1.1.4.0` den Wert `barney@example.com` und den Namen `SNMPv2-MIB::sysContact.0`.
Die zusätzliche Information der Namen für die OIDs gibt wichtige Hinweise, um die interessanten OIDs zu identifizieren.
Für das vorgestellte Beispiel genügen die OIDs `.1.3.6.1.2.1.1.4.0` bis `.1.3.6.1.2.1.1.6.0`.
// Der Rest ist dann Übung, Erfahrung und natürlich Ausprobieren.

[#simple_snmp_plugin]
== Ein einfaches Check-Plugin schreiben

Nun haben Sie die Vorarbeit erledigt: Sie haben jetzt eine Liste der OIDs, die Sie auslesen und auswerten wollen.
Jetzt geht es darum, anhand dieser Notizen {CMK} beizubringen, welche Services erzeugt werden sollen und wann diese auf  {WARN} oder {CRIT} gehen sollen.
Die dafür angewandte Programmierung eines Check-Plugins in Python hat viele Parallelen zum agentenbasierten Check-Plugin.
Da einige Feinheiten zu beachten sind, zeigen wir den vollständigen Aufbau mit allen verwendeten Funktionen.

[#scaffold]
=== Die Datei vorbereiten

Für Ihre eigenen Check-Plugins finden Sie ein Verzeichnis vorbereitet in der `local`-Hierarchie des xref:cmk_commandline#sitedir[Instanzverzeichnisses].
Dieses lautet `~/local/lib/check_mk/base/plugins/agent_based/`.
Hier im Pfad bedeutet `base` den Teil von {CMK}, der für das eigentlich Monitoring und die Benachrichtigungen zuständig ist.
Das `agent_based` ist für alle Plugins, die sich auf den {CMK}-Agenten, aber auch SNMP-Agenten beziehen (also keine Benachrichtigungs-Plugins).
Am einfachsten, Sie wechseln zum Arbeiten dort hinein:

[{shell}]
----
{c-omd} cd local/lib/check_mk/base/plugins/agent_based
----

Das Verzeichnis gehört dem Instanzbenutzer und ist daher für Sie schreibbar.
Sie können Ihr Check-Plugin mit jedem auf dem Linux-System installierten Texteditor bearbeiten.

Legen Sie also die Datei `flintstone_setup_check.py` für das neu zu erstellende Check-Plugin hier an.
Konvention ist, dass der Dateiname den Namen des Checks wiedergibt.
_Pflicht_ ist, dass die Datei mit `.py` endet, denn ab Version {v20} von {CMK} handelt es sich bei den Check-Plugins immer um echte Python-Module.

Ein lauffähiges Grundgerüst (link:https://github.com/Checkmk/checkmk-docs/blob/master/examples/devel_check_plugins_snmp/flintstone_setup_check_bare_minimum.py[Download bei GitHub^]), das Sie im Folgenden Schritt für Schritt weiter ausbauen werden, sieht so aus:

.~/local/lib/check_mk/base/plugins/agent_based/flintstone_setup_check.py
[{python}]
----
#!/usr/bin/env python3

from .agent_based_api.v1 import register, Result, Service, startswith, SNMPTree, State

def parse_flintstone(string_table):
    return {}

def discover_flintstone(section):
    yield Service()

def check_flintstone(section):
    yield Result(state=State.OK, summary="Everything is fine")

register.snmp_section(
    name = "flintstone_base_config",
    parse_function = parse_flintstone,
    detect = startswith(".1.3.6.1.2.1.1.1.0", "Flintstone"),
    fetch = SNMPTree(base='.1.3.6.1.2.1.1', oids=['4.0']),
)

register.check_plugin(
    name = "flintstone_setup_check",
    sections = ["flintstone_base_config"],
    service_name = "Flintstone setup check",
    discovery_function = discover_flintstone,
    check_function = check_flintstone,
)
----

Als erstes müssen Sie die für die Check-Plugins nötigen Funktionen und Klassen aus Python-Modulen importieren.
Die einfachste Methode dafür ist die mit einem `import pass:[*]`, allerdings sollten Sie das vermeiden, da so verschleiert wird, welche Namensräume tatsächlich verfügbar gemacht wurden.

Für unser Beispiel wird also nur das importiert, was im weiteren Verlauf des Artikels genutzt wird:

.~/local/lib/check_mk/base/plugins/agent_based/myhostgroups.py
[{python}]
----
from .agent_based_api.v1 import register, Result, Service, startswith, SNMPTree, State
----

Im Vergleich zum agentenbasierten Check-Plugin sind hier neu `startswith` und `SNMPTree`.
Selbsterklärend ist `SNMPTree`, es handelt sich um eine Klasse zur Darstellung von SNMP-Bäumen.
Die Funktion `startswith()` vergleicht den Inhalt eines SNMP-Blattes mit einer Zeichenkette.
Mehr dazu später.

[#register_snmp_section]
=== Die SNMP-Sektion registrieren

Nachdem Sie die richtigen OIDs herausgefunden haben, geht es an die eigentliche Entwicklung des Check-Plugins.
Beim Registrieren des Plugins legen Sie zwei Dinge fest:

// . Legen Sie für die SNMP-Detection fest, welche OIDs welche Texte enthalten müssen, damit Ihr Plugin ausgeführt werden soll.
// TK: damit Ihr Plugin ausgeführt werden soll? Was bedeutet das genau?
. Sie identifizieren die Hosts, für welche das Plugin ausgeführt werden soll.
Hier geschieht dies mit der Funktion `startswith()`, welche eine Zeichenkette mit dem Inhalt eines SNMP-Blattes – hier `sysDescr.0` vergleicht.
Weitere Zuordnungsmöglichkeiten zeigen wir weiter unten.

. Und Sie deklarieren, welche OID-Äste oder Blätter für das Monitoring geholt werden.
Dies geschieht mit dem Konstruktor der Klasse `SNMPTree`.

// . Schreiben Sie sonst das SNMP-basierte analog zu einem xref:devel_check_plugins#[agentenbasierten Check-Plugin.]

// Die ersten beiden Schritte erfolgen durch die Registrierung der SNMP-Sektion.
// Dies erledigen Sie durch den Aufruf von `register.snmp_section()`.
// Hier geben Sie mindestens drei Argumente an:
// den Namen der Sektion (`name`), die Angaben für die SNMP-Detection (`detect`) und die benötigten OID-Zweige für das Monitoring (`fetch`).

// Hier ist ein Beispiel für ein fiktives Check-Plugin mit dem Namen `foo`:
// TK: Warum wird ein SNMP-Plugin unter agent_based abgelegt?
// MFS: Weil SNMP-Agent auch als Agent gezählt wird.

Erweitern Sie das angefangene Beispiel ein wenig, damit es für eine kleinere Zahl von Geräten ausgeführt wird (hier alle Modelle des _Flintstones, Inc. Fred Router_) und auch dahingehend, dass die OIDs für _Kontakt_, _Hostname_ und _Standort_ abgerufen werden.
Diese drei OIDs stellt jedes Gerät bereit.
Wenn Sie mit dem Beispiel mit echten SNMP fähigen Geräten testen wollen, genügt es daher, den zu erkennenden Modellnamen anzupassen.

.~/local/lib/check_mk/base/plugins/agent_based/flintstone_setup_check.py
[{python}]
----
register.snmp_section(
    name = "flintstone_base_config",
    parse_function = parse_flintstone,
    detect = startswith(
        ".1.3.6.1.2.1.1.1.0",
        "Flintstones, Inc. Fred Router",
    ),
    fetch = SNMPTree(
        base = '.1.3.6.1.2.1.1',
        oids = ['4.0', '5.0', '6.0'],
    ),
)
----

Das Beispiel enthält noch die Parameter `name` mit dem die erzeugte SNMP Sektion identifiziert wird und eine Parse-Funktion, auf die wir später zu sprechen kommen.

[#detect]
==== Die SNMP-Detection

Mit dem Parameter `detect` geben Sie an, unter welchen Bedingungen die Discovery-Funktion überhaupt ausgeführt werden soll.
In unserem Beispiel ist das der Fall, wenn der Wert der OID `.1.3.6.1.2.1.1.1.0` (also die `sysDescr`) mit dem Text `Flintstones, Inc. Fred Router` beginnt (wobei Groß-/Kleinschreibung grundsätzlich nicht unterschieden werden).
Neben `startswith` gibt es noch eine ganze Reihe weiterer möglichen Funktionen zur Identifikation.
Dabei existiert von jedem auch eine negierte Form, welche mit `not_` beginnt.
Beachten Sie, dass jede von diesen separat im `import`-Statement verfügbar gemacht werden muss.

[cols="25,~,25",options="header"]
|===
|Attribut |Bedeutung |Negation
|`equals(oid, "needle")` |Der Wert der OID ist gleich dem Text `needle`. |`not_equals(oid, "needle")`
|`contains(oid, "needle")` |Der Wert der OID enthält an irgendeiner Stelle den Text `needle`. |`not_contains(oid, "needle")`
|`startswith(oid, "needle")` |Der Wert der OID beginnt mit dem Text `needle`. |`not_startswith(oid, "needle")`
|`endswith(oid, "needle")` |Der Wert der OID endet auf den Text `needle`. |`not_endswith(oid, "needle")`
|`matches(oid, regex)` |Der Wert der OID matcht auf den xref:regexes#[regulären Ausdruck] `regex`, und zwar hinten und vorne geankert, also mit einem exakten Match. Wenn Sie nur einen Teilstring benötigen, ergänzen Sie einfach vorne bzw. hinten noch ein `pass:[.*]`. |`not_matches(oid, regex)`
|`exists(oid)` |Die OID ist auf dem Gerät verfügbar. Ihr Wert darf leer sein. |`not_exists(oid)`
|===

Daneben gibt es noch die Möglichkeit, mehrere Attribute mit `all_of` oder `any_of` zu verknüpfen.

`all_of` erfordert mehrere erfolgreiche Prüfungen für eine positive Erkennung des Plugins.
Folgendes Beispiel findet ordnet Ihr Check-Plugin einem Gerät zu, wenn in der `sysDescr` der Text mit `foo` (oder `FOO` oder `Foo`) beginnt *und*
die OID `.1.3.6.1.2.1.1.2.0` den Text `.4.1.11863.` enthält:
// TK: Jetzt kommt schon wieder das Plugin-Zeugs: positive Erkennung des Plugins? Das Bsp. findet das Plugin?
// MFS: fixed it.

[{python}]
----
detect = all_of(
    startswith(".1.3.6.1.2.1.1.1.0", "foo"),
    contains(".1.3.6.1.2.1.1.2.0", ".4.1.11863.")
)
----

`any_of` hingegen ist damit zufrieden, wenn auch nur eines der Kriterien erfüllt ist.
Hier ist ein Beispiel, in dem verschiedene Werte für die `sysDescr` erlaubt sind:

[{python}]
----
detect = any_of(
    startswith(".1.3.6.1.2.1.1.1.0", "foo version 3 system"),
    startswith(".1.3.6.1.2.1.1.1.0", "foo version 4 system"),
    startswith(".1.3.6.1.2.1.1.1.0", "foo version 4.1 system"),
)
----

Übrigens: Kennen Sie sich gut mit xref:regexes#[regulären Ausdrücken] aus?
Dann würden Sie wahrscheinlich das Beispiel vereinfachen und doch wieder mit einer Zeile auskommen:

[{python}]
----
detect = matches(".1.3.6.1.2.1.1.1.0", "FOO Version (3|4|4.1) .*")
----

Und noch ein wichtiger Hinweis:
Die OIDs, die Sie den Erkennungsroutinen eines Plugins übergeben, werden von *jedem* Gerät geholt, welches per SNMP überwacht wird.
// TK: Die OIDs, die Sie von einem Plugin angeben? Wie meinen?
// TK: Warum werden die OIDs von jedem Gerät geholt? Und was heißt hier „im Zweifel"?
Seien Sie daher sehr sparsam bei der Verwendung von herstellerspezifischen OIDs.
Versuchen Sie, Ihre Erkennung so zu gestalten, dass bevorzugt die `sysDescr` (`.1.3.6.1.2.1.1.1.0`) und die `sysObjectID` (`.1.3.6.1.2.1.1.2.0`) verwendet werden.
// TK: Erkennung = SNMP-Detection? "unbedingt" und "ausschließlich" 2 OIDs angeben. Und im nächsten Beispiel folgt dann doch die Abfrage einer herstellerspezifischen OID.
// MFS: Lazy evaluation gleich erklärt.

Falls Sie dennoch eine andere OID zur exakten Identifikation benötigen, verwenden Sie `all_of()` und gehen Sie wie folgt vor:

. Prüfen Sie zunächst auf `sysDescr` oder `sysObjectID`.
. In weiteren Argumenten können Sie dann den Kreis der Gerate weiter einschränken, für die Ihr Plugin ausgeführt werden soll.

// dann reduzieren Sie die Anzahl der Geräte, wo diese angefragt wird, auf ein Minimum, indem Sie zuvor mittels der `sysDescr` so viele Geräte wie möglich bereits ausschließen, zum Beispiel so:
// TK: Je mehr ich lese, desto rätselhafter wird der ganze SNMP-Kram:
// TK: Indem ich die sysDescr hole, schließe ich andere Geräte aus? Wie funktioniert das? Kann mir das jemand erklären? Bitte.

[{python}]
----
detect = all_of(
    startswith(".1.3.6.1.2.1.1.1.0", "Flintstone"),   # first check sysDescr
    contains(".1.3.6.1.4.1.424242.2.3.37.0", "foo"),  # fetch vendor specific OID
)
----

Dies funktioniert dank _lazy evaluation_: Sobald eine der früheren Prüfungen fehlschlägt, wird keine weitere mehr durchgeführt.
// Das `all_of()` funktioniert so, dass bei einem Scheitern der ersten Bedingung die zweite gar nicht erst probiert wird 
// -- und somit die betreffende herstellerspezifische OID auch nicht geholt wird.
Im obigen Beispiel wird die OID `.1.3.6.1.4.1.424242.2.3.37.0` nur bei solchen Geräten geholt, die `Flintstone` in ihrer `sysDescr` haben.

////
Was geschieht, wenn Sie die Deklaration der SNMP-Detection falsch oder zumindest nicht ganz zielsicher gemacht haben?

* Falls die Detection fälschlicherweise Geräte erkennt, auf denen die nötigen OIDs gar nicht vorhanden sind, wird Ihre Discovery-Funktion dann auch keine Services erzeugen.
// TK: Wie das passieren kann, ist mir nicht klar.
Es passiert also nichts „Schlimmes“.
Allerdings wird das die Service-Erkennung auf solchen Geräten verlangsamen, da jetzt jedes mal nutzlos versucht wird, die entsprechenden OIDs abzufragen.

* Falls die Detection eigentlich zulässige Geräte _nicht_ erkennt, werden dort im Monitoring bei der Service-Erkennung auch keine Services gefunden.
////

////
[#fetch]
==== OIDs für das Monitoring holen

Das Wichtigste bei der Registrierung der SNMP-Sektion ist die Angabe, welche OIDs für das Monitoring geholt werden sollen.
In fast allen Fällen benötigt ein Plugin dazu nur ausgewählte Äste aus einer einzigen Tabelle.
Betrachten wir folgendes Beispiel:

[{python}]
----
    fetch = SNMPTree(
        base = '.1.3.6.1.4.1.35424.1.2',
        oids = [
            '4.0',
            '5.0',
            '8.0',
        ],
    ),
----

Das Schlüsselwort `base` gibt hier einen OID-Präfix an.
Alle nötigen Daten liegen unterhalb.
Bei `oids` geben Sie dann eine Liste von Sub-OIDs an, die ab dort geholt werden sollen.

In obigem Beispiel werden dann insgesamt drei SNMP-Walks gemacht, nämlich ausgehend von den OIDs `.1.3.6.1.4.1.35424.1.2.4.0`, `.1.3.6.1.4.1.35424.1.2.5.0` und `.1.3.6.1.4.1.35424.1.2.8.0`.
Dabei ist es wichtig, dass diese Walks die gleiche Anzahl von Variablen holen und dass diese auch einander entsprechen.
Damit ist gemeint, dass zum Beispiel das zweite Element aus jedem der Walks demselben überwachten Objekt entspricht.
// TK: Hintergrund? Kann mir doch egal sein, was diese OIDs liefern, oder? Und wenn nicht, warum nicht? Wo liegt das Problem?

Hier ist ein Beispiel aus dem Check-Plugin `quantum_storage_status`:

[{python}]
----
    fetch = SNMPTree(
       base=".1.3.6.1.4.1.2036.2.1.1",  # qSystemInfo
       oids=[
            "4",  # 0 1 qVendorID
            "5",  # 0 2 qProdId
            "6",  # 0 3 qProdRev
            "7",  # qState
            "12",  # 0 4 qSerialNumber
       ],
    ),
----

Hier wird pro Storage-Gerät jeweils Vendor ID, Product ID, Product Revision, Status und Seriennummer geholt.

Der Discovery- und Check-Funktion werden diese Daten als Tabelle präsentiert, also als Liste von Listen.
Dabei wird die Tabelle so gespiegelt, dass Sie pro Eintrag in der äußeren Liste alle Daten zu einem Item haben.
// TK: Und das ist alles zum Thema Datenstruktur?
Jeder Eintrag hat so viele Elemente, wie Sie bei `oids` angegeben haben.
So können Sie die Liste sehr praktisch mit einer Schleife durchlaufen, zum Beispiel so:

[{python}]
----
    for vendor_id, prod_id, prod_rev, state, serial_number in section:
        ...
----

Beachten Sie:

* Alle Einträge sind _strings_, selbst wenn die betreffenden OIDs eigentlich Zahlen sind.

* Fehlende OIDs werden als leere Strings präsentiert.

* Denken Sie an die Möglichkeit, während der Entwicklung mit `pprint` die Daten formatiert auszugeben.
////

// TK: für später
// === Das Check-Plugin registrieren
// === Die Discovery-Funktion schreiben
// === ie Check-Funktion schreiben
// === Das Check-Plugin testen und aktivieren


=== Die Parse-Funktion schreiben

Auch beim SNMP-basierten Check-Plugin hat die Parse-Funktion die Aufgabe, die erhaltenen Agentendaten in eine gut und vor allem performant zu verarbeitende Form zu bringen.
Die Daten erhalten Sie hier ebenfalls als Liste, allerdings gilt es einige Feinheiten zu beachten, denn es macht einen Unterschied, ob Sie Blätter anfragen oder Äste. Im Beispiel oben werden Blätter angefordert: 

[{python}]
----
    fetch = SNMPTree(
        base = '.1.3.6.1.2.1.1',
        oids = ['4.0', '5.0', '6.0'],
    )
----

Lassen Sie sich in der Parse-Funktion einfach die Rohdaten ausgeben:

[{python}]
----
def parse_flintstone(string_table):
    print(string_table)
    return {}
----

Dann erhalten Sie eine verschachtelte Liste, welche in der ersten Ebene nur ein Element, nämlich eine Liste der abgerufenen Werte enthält:

[{python}]
----
[
    ['barney@example.com', 'big-router-01', 'Server room 23, Stonestreet 52, Munich']
]
----

Ein wenig anders sieht das Ergebnis aus, wenn Sie Äste abrufen, die mehrere Blätter enthalten.
Angenommen, der Routertyp kann mit einer variablen Zahl von Netzwerkkarten bestückt werden, deren Name, Verbindungsstatus und Geschwindigkeit unterhalb von `.1.3.6.1.4.1.424242.2.3.23` ausgelesen werden könnte...

[{python}]
----
    fetch = SNMPTree(
        base = '.1.3.6.1.4.1.424242.2.3.23',
        oids = [
            '6', # alle Namen
            '7', # alle Verbindungsstati
            '8', # alle Geschwindigkeiten
        ],
    )
----

...dann sähe die zweidimensionale Liste möglicherweise so aus:

[{python}]
----
[
    # Name, State, Speed
    ['net0', '1', '1000'],
    ['net1', '0', '100'],
    ['net2', '1', '10000'],
    ['net3', '1', '1000'],
]
----

Alle unter einer OID erhältlichen Blätter werden in eine Tabellenspalte geschrieben. Damit dürfte es offensichtlich sein, dass wegen der Darstellung der Daten nur zusammen passende OIDs abgefragt werden dürfen.
Das zuletzt gezeigte Beispiel ist Teil unseres auf GitHub bereitgestellten link:https://github.com/Checkmk/checkmk-docs/blob/master/examples/devel_check_plugins_snmp/flintstones_fred_router.txt[Beispiel-SNMP-Walks^], den Sie zur Simulation nutzen können.

Zurück zum Beispiel: Die Parse-Funktion kann einfach jedes Element der inneren Liste in ein Schlüssel-Wert-Paar des zurückgegebenen Dictionaries übernehmen:

[{python}]
----
def parse_flintstone(string_table):
    result = {}
    result["contact"] = string_table[0][0]
    result["name"] = string_table[0][1]
    result["location"] = string_table[0][2]
    return result
----

[#register_check_plug-in]
=== Das Check-Plugin registrieren

Die Registrierung des Plugins geschieht exakt wie bei den xref:draft_devel_check_plugins#register_check_plug-in[agentenbasierten Check-Plugins beschrieben].

Da Sie in den meisten Fällen mehrere SNMP-Äste abfragen werden und daraus mehrere SNMP-Sektionen resultieren, ist der Parameter `sections` mit der Liste der auszuwertenden Sektionen in der Regel erforderlich.

[{python}]
----
register.check_plugin(
    name = "flintstone_setup_check",
    sections = ["flintstone_base_config"],
    service_name = "Flintstone setup check",
    discovery_function = discover_flintstone,
    check_function = check_flintstone,
)
----

[#discovery_function]
=== Die Discovery-Funktion schreiben

Auch die Discovery-Funktion entspricht xref:draft_devel_check_plugins#discovery_function[dem Beispiel des agentenbasierten Check-Plugins].
Im Falle eines einzigen Services genügt ein einziges `yield()`:

[{python}]
----
def discover_flintstone(section):
    yield Service()
----

[#check_function]
=== Die Check-Funktion schreiben

Da Sie nur die Geräte suchen, bei denen die besagte Konfiguration fehlt, reicht es, in der Check-Funktion zu prüfen, welche Felder leer sind und entsprechend den Zustand auf {CRIT} zu setzen – oder {OK}, wenn alles da ist:

[{python}]
----
def check_flintstone(section):
    missing = 0
    for e in ["contact", "name", "location"]:
        if section[e] == "":
            missing += 1
            yield Result(state=State.CRIT, summary=f"Missing info: {e}!")
    if missing > 0:
        yield Result(state=State.CRIT, summary=f"Missing fields: {missing}!")
    else:
        yield Result(state=State.OK, summary="All required info is there.")
----

Mit der Erstellung der Check-Funktion ist das Check-Plugin fertig.

Das Check-Plugin haben wir auf link:https://github.com/Checkmk/checkmk-docs/blob/master/examples/devel_check_plugins_snmp/flintstone_setup_check.py[GitHub bereitgestellt^].

[#test]
=== Das Check-Plugin testen und aktivieren

Test und Aktivierung erfolgen xref:draft_devel_check_plugins#test[wie beim agentenbasierten Pendant].
Als erstes ist die Erkennung des Plugins an der Reihe:

[{shell},highlight=12-14]
----
{c-omd} cmk -vI --detect-plugins=flintstone_setup_check mydevice01
Discovering services and host labels on: mydevice01
localhost:
+ FETCHING DATA
[SNMPFetcher] Execute data source
[PiggybackFetcher] Execute data source
No piggyback files for 'mydevice01'. Skip processing.
No piggyback files for '198.51.100.123'. Skip processing.
+ ANALYSE DISCOVERED HOST LABELS
SUCCESS - Found no new host labels
+ ANALYSE DISCOVERED SERVICES
+ EXECUTING DISCOVERY PLUGINS (1)
  1 flintstone_setup_check
SUCCESS - Found 1 services
----

Wie erwartet hat die Service-Erkennung funktioniert, also lassen sie sich das Ergebnis des Checks anzeigen:

[{shell},highlight=7]
----
{c-omd} cmk -v --detect-plugins=flintstone_setup_check mydevice01
+ FETCHING DATA
[SNMPFetcher] Execute data source
[PiggybackFetcher] Execute data source
No piggyback files for 'mydevice01'. Skip processing.
No piggyback files for '198.51.100.123'. Skip processing.
Flintstone setup check [red]#Missing info: contact!(!!), Missing fields: 1!(!!)#
[snmp] Success, [piggyback] Success ...
----

Nach dem Neustart der Monitoring-Kerns ist der neue Check im Monitoring sichtbar:

[{shell}]
----
{c-omd} cmk -R
Generating configuration for core (type nagios)...
Precompiling host checks...OK
Validating Nagios configuration...OK
Restarting monitoring core...OK
----

[#errors]
== Fehler beheben

=== Simulationsmöglichkeiten


[#files]
== Dateien und Verzeichnisse

[cols="45,~",options="header"]
|===
|Pfad |Bedeutung
|`~/local/lib/check_mk/base/plugins/agent_based/` |Ablageort für selbst geschriebene Check-Plugins.
|`~/local/share/check_mk/mibs/` |Legen Sie hier SNMP-MIB-Dateien ab, die automatisch geladen werden sollen.
|===


// TK Reste aus dem Altartikel
////
=== Weitere SNMP-Sonderheiten

// COMMENT[Das fehlt alles noch, OIDCached("1.2.3"), OIDBytes("1.2.3")]

Hier beschreiben wir in Zukunft noch:

* Wie Sie mehrere unabhängige SNMP-Bereiche abrufen können
* Was es mit OIDEnd() auf sich hat
* Weitere Sonderfälle beim Umgang mit SNMP
////
