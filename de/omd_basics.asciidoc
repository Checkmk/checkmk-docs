// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= Instanzen (Sites) mit omd verwalten
:revdate: draft
:title: Instanzen (Sites) mit omd verwalten
:description: {CMK} ermöglicht mit dem Befehl omd die Verwaltung von beliebig vielen Monitoring-Instanzen (monitoring sites) und Software-Versionen auf einem Server.

{related-start}
xref:update#[Updates und Upgrades]
xref:install_packages#[Grundsätzliches zur Installation von {CMK}]
xref:cmk_versions#[{CMK}-Versionen]
{related-end}


== OMD -- Die Open Monitoring Distribution

Das {CMK} Monitoring-System baut auf der _Open Monitoring Distribution_ (OMD) auf.
OMD ist ein von Mathias Kettner gegründetes Open Source Projekt, das sich rund um die komfortable und flexible Installation einer Monitoring-Lösung aus diversen Komponenten dreht.
Die Abkürzung OMD haben Sie bereits als Teil der Namen der installierten RPM/DEB-Pakete kennengelernt.

Eine OMD-basierte Installation zeichnet sich durch diese Eigenschaften aus:

* die Möglichkeit _mehrere_ Monitoring-Instanzen parallel zu betreiben,
* die Möglichkeit, dies in _unterschiedlichen Versionen_ der Monitoring-Software zu tun,
* einen intelligenten und komfortablen Mechanismus zur Aktualisierung (_update_) der Software - auf eine höhere und niedrigere Version,
* einheitliche Dateipfade -- egal welche Linux-Plattform Sie einsetzen,
* eine saubere Trennung von _Daten_ und _Software,_
* eine sehr einfache Installation -- ohne Abhängigkeit von Drittanbieter-Software,
* eine perfekte Vorkonfiguration aller Komponenten.

OMD wird auf der Kommandozeile verwaltet, mit dem Befehl `omd` -- genauer mit einer Reihe von `omd`-Befehlen für die unterschiedlichen Aktionen rund um die Verwaltung der Monitoring-Instanzen, z.B. `omd create` für das Anlegen einer Instanz.
Die wichtigsten `omd`-Befehle werden in diesem Artikel vorgestellt.

Der erste Befehl ist `omd help`, der eine Übersicht der verfügbaren `omd`-Befehle anzeigt.
Hilfe zu einem dieser Befehle erhalten Sie, indem Sie hinter den Befehl die Option `--help` anfügen, z.B. `omd create --help`.
Die beiden Bindestriche vor dem `help` sind dabei wichtig, denn ohne sie hätten Sie mit `omd create help` bereits Ihre erste Instanz mit dem Namen `help` erstellt.


[#omd_create]
== Erstellen von Instanzen

Das vielleicht Beste an OMD ist, dass OMD auf einem Server beliebig viele _Monitoring-Instanzen_ verwalten kann.
Diese heißen auf Englisch _monitoring sites._
Jede Instanz ist ein in sich geschlossenes Monitoring_System, welches von den anderen getrennt läuft.

Eine Instanz hat immer einen eindeutigen Namen, den bei ihrer Erstellung festgelegt wird.
Dieser ist gleichzeitig der Name eines Linux-Benutzers, der dabei angelegt wird.
Der Name folgt also den gleichen Konventionen wie Benutzernamen unter Linux.

Das Erstellen geschieht mit dem Befehl `omd create`.
Dieser muss als `root`-Benutzer ausgeführt werden:

[{shell}]
----
{c-root} omd create mysite
Adding /opt/omd/sites/mysite/tmp to /etc/fstab.
Creating temporary filesystem /omd/sites/mysite/tmp...[green]#OK#
Updating core configuration...
Generating configuration for core (type nagios)...
Precompiling host checks...[green]#OK#
Executing post-create script "01_create-sample-config.py"...[green]#OK#
Restarting Apache...[green]#OK#
Created new site mysite with version 2.1.0p1.cre.

  The site can be started with *omd start mysite*.
  The default web UI is available at *http://linux/mysite/*

  The admin user for the web applications is *cmkadmin* with password: *YzxfoFZh*
  For command line administration of the site, log in with *'omd su mysite'*.
  After logging in, you can change the password for cmkadmin with *'htpasswd etc/htpasswd cmkadmin'*.
----

Bei der Erstellung des Benutzers `cmkadmin` wird ein zufällig generiertes Passwort angelegt und ausgegeben.

Was geschieht beim Anlegen einer Instanz mit dem Namen `mysite`?

* Ein Betriebssystembenutzer `mysite` und eine Gruppe `mysite` werden angelegt.
* Dessen neues Home-Verzeichnis `/omd/sites/mysite` wird angelegt und diesem übereignet.
Dieses Verzeichnis wird auch Instanzverzeichnis (englisch: _site directory_) genannt.
* Dieses Verzeichnis wird mit Konfigurationsdateien und Verzeichnissen gefüllt.
* Für die neue Instanz wird eine Grundkonfiguration erstellt.

*Wichtig:* Vermeiden Sie einen Namen, welcher bereits von einem anderen Dienst belegt ist.
// TK: Was ist hier mit "Dienst" gemeint? Ein Name, der bereits als Benutzer oder Gruppe existiert, wird jedenfalls schonmal abgewiesen.
Eine doppelte Belegung kann zu Problemen führen.


[#user_group_id]
=== Benutzer- und Gruppen-IDs

In manchen Fällen möchte man die Benutzer-/Gruppen-ID des neu anzulegenden Benutzers festlegen.
Dies geschieht mit den Optionen `-u` und `-g`, z.B.:

[{shell}]
----
{c-root} omd create -u 6100 -g 180 mysite
----

Eine Übersicht über weitere Optionen erhalten Sie mit `omd create --help`.
Die wichtigsten Optionen sind:

[cols="10,~"]
|===
|`-u UID` |Der neue Benutzer wird mit der Benutzer-ID `UID` angelegt.
|`-g GID` |Die Gruppe des neuen Benutzers wird mit der Gruppen-ID `GID` angelegt.
|`--reuse` |OMD geht davon aus, dass der neue Benutzer bereits existiert und legt ihn nicht an.
|`-t SIZE` |Das temporäre Dateisystem der neuen Instanz wird mit der Größe `SIZE` angelegt. `SIZE` endet mit `M` (Megabyte), `G` (Gigabyte) oder `%` (Prozent vom RAM). Beispiel: `-t 4G`
|===


[#site_user]
== Instanzbenutzer

Die `omd`-Befehle können Sie als `root`-Benutzer oder als Instanzbenutzer (englisch: _site user_) ausführen.
Unter `root` haben Sie mehr Möglichkeiten.
So kann nur `root` eine Instanz erstellen, was nachvollziehbar ist, denn erst beim Erstellen der Instanz wird der Instanzbenutzer angelegt.
Da Sie unter `root` Befehle für alle existierenden Instanzen ausführen können, müssen Sie den Namen der Instanz, um die es geht, beim `omd`-Befehl mit angeben.

Sobald die Instanz existiert, sollten Sie die weiteren `omd`-Befehle nur noch als Instanzbenutzer ausführen.
Als Instanzbenutzer können Sie alle wichtigen Operationen durchführen, die diese Instanz betreffen.

Der Benutzerwechsel geschieht mit `su`:

[{shell}]
----
{c-root} su - mysite
----

Beachten Sie unbedingt das Minuszeichen nach dem `su`.
Es sorgt dafür, dass der Benutzerwechsel _alle_ Operationen durchläuft, die auch bei einer normalen Anmeldung ablaufen.
Insbesondere werden alle Umgebungsvariablen korrekt gesetzt, und Ihre Sitzung wird als `mysite` im Instanzverzeichnis `/omd/sites/mysite` gestartet.

Alternativ können Sie auch

[{shell}]
----
{c-root} omd su mysite
----

verwenden. Auch damit wird eine Login Shell geöffnet:
// TK: Klarer machen, dass die beiden Kommandos identisch sind, wie Masl neulich herausgefunden hat?

[{shell}]
----
{c-omd}
----

Als Instanzbenutzer brauchen Sie in der Regel bei `omd`-Befehlen keinen Instanznamen mitanzugeben, da so ein Befehl auf die Instanz angewendet wird, unter der Sie angemeldet sind.

// TK: Der folgende Absatz ist neu - und hoffentlich auch korrekt :-)
*Hinweis:* 
Falls Sie mehrere {CMK}-Versionen auf Ihrem {CMK}-Server installiert haben, wird mit jeder dieser Versionen auch die zugehörige OMD-Version mitinstalliert.
Da kann sich mit der Zeit schon eine lange Liste von Software-Versionen ansammeln.
Da sich auch `omd`-Befehle zwischen den Versionen unterscheiden können, ist es manchmal interessant zu wissen, mit welcher OMD-Version Sie gerade arbeiten.
Als Instanzbenutzer nutzen Sie stets die `omd`-Befehle der auf der Instanz aktuell installierten {CMK}-Version.
Als `root`-Benutzer werden die Befehle der Standardversion ausgeführt, die auch bei der Erstellung einer Instanz verwendet wird.
Die Standardversion können Sie sich mit `omd version` anzeigen lassen und mit `omd setversion` ändern -- letzteres allerdings wieder nur als `root`-Benutzer.


[#omd_start_stop]
== Starten und Stoppen von Instanzen

Ihre Instanz ist jetzt bereit, gestartet zu werden.
Sie können das als `root` mit `omd start mysite` machen.
Besser ist es aber, wenn Sie das Arbeiten mit der Instanz grundsätzlich als Instanzbenutzer erledigen:

[{shell}]
----
{c-omd} omd start
Creating temporary filesystem /omd/sites/mysite/tmp...[green]#OK#
Starting agent-receiver...OK
Starting mkeventd...OK
Starting rrdcached...OK
Starting npcd...OK
Starting nagios...OK
Starting apache...OK
Starting redis...OK
Initializing Crontab...OK
----

Wenig überraschend geht das Anhalten mit `omd stop`:

[{shell}]
----
{c-omd} omd stop
Removing Crontab...OK
Stopping redis...killing 484382...OK
Stopping apache...killing 484371...OK
Stopping nagios...OK
Stopping npcd...OK
Stopping rrdcached...waiting for termination...OK
Stopping mkeventd...killing 484279...OK
Stopping agent-receiver...killing 484267...OK
Stopping 1 remaining site processes...[green]#OK#
----

Das Starten und Stoppen einer Instanz ist nichts anderes als das Starten bzw. Stoppen einer Reihe von Diensten.
Diese können auch einzeln verwaltet werden, indem Sie den Namen des Diensts mit angeben, z.B.:

[{shell}]
----
{c-omd} omd start apache
Temporary filesystem already mounted
Starting apache...OK
----

Wie die einzelnen Dienste heißen, erfahren Sie im Verzeichnis `~/etc/init.d`.
Beachten Sie die Tilde am Anfang des Pfadnamens.
Diese steht für das Home-Verzeichnis des Instanzbenutzers (das Instanzverzeichnis).
`~/etc/init.d` und `/etc/init.d` sind unterschiedliche Verzeichnisse.

Neben `start` und `stop` gibt es noch die `omd`-Befehle `restart`, `reload` und `status`.
Das Neuladen von Apache ist z.B. immer nach einer manuellen Änderung der Apache-Konfiguration notwendig:

[{shell}]
----
{c-omd} omd reload apache
Reloading apache
----

Beachten Sie, dass hier nicht der globale Apache-Prozess des Linux-Servers gemeint ist, sondern ein eigener dedizierter Apache-Prozess in der Instanz selbst:

Um nach den ganzen Starts und Stops einen Überblick vom Zustand der Instanz zu erhalten, verwenden Sie einfach `omd status`:

[{shell}]
----
{c-omd} omd status
agent-receiver: [red]#stopped#
mkeventd:       [red]#stopped#
rrdcached:      [red]#stopped#
npcd:           [red]#stopped#
nagios:         [red]#stopped#
apache:         [green]#running#
redis:          [red]#stopped#
crontab:        [red]#stopped#
-----------------------
Overall state:  [yellow]#partially running#
----


[#omd_config]
== Konfigurieren der Komponenten

Wie bereits erwähnt, integriert OMD mehrere Software-Komponenten zu einem Monitoring-System.
Dabei sind manche Komponenten optional und für manche gibt es Alternativen oder verschiedene Betriebseinstellungen.
Dies alles kann komfortabel mit dem Befehl `omd config` konfiguriert werden.
Dabei gibt es einen interaktiven Modus und einen Skriptmodus.


[#interactive_mode]
=== Interaktive Konfiguration

Den interaktiven Modus rufen Sie als Instanzbenutzer einfach so auf: 

[{shell}]
----
{c-omd} omd config
----

.Im `omd config`-Menü navigieren Sie mit den Cursor- und Enter-Tasten
image::omd_basics_omd_config_main.png[alt="Hauptmenü von 'omd config'.",width=300]

Sobald Sie bei laufender Instanz eine Einstellung ändern, wird Sie OMD darauf hinweisen, dass zuvor Ihre Instanz angehalten werden muss und diese bei Bedarf auch stoppen:

.Die Konfiguration kann nur geändert werden, wenn die Instanz nicht läuft
image::omd_basics_omd_config_cannotchange.png[alt="Hinweis zum Ändern einer Einstellung bei gestarteter Instanz.",width=300]

Vergessen Sie nicht, nach getaner Arbeit die Instanz wieder zu starten.
`omd config` wird das _nicht_ automatisch für Sie tun.


[#script_mode]
=== Konfiguration per Skriptmodus

Wer den interaktiven Modus nicht liebt oder mit Skripten arbeiten will, kann die einzelnen Einstellungen als Variablen auch per Kommandozeile setzen.
Dafür gibt es den Befehl `omd config set`.
Folgendes Beispiel setzt die Variable `AUTOSTART` auf `off`:

[{shell}]
----
{c-omd} omd config set AUTOSTART off
----

Sie können `omd config set` auch als `root` aufrufen, wenn Sie den Namen der Instanz als Argument mit angeben:

[{shell}]
----
{c-root} omd config mysite set AUTOSTART off
----

Die aktuelle Belegung aller Variablen zeigt `omd config show`:

[{shell}]
----
{c-omd} omd config show
ADMIN_MAIL: 
AGENT_RECEIVER: on
AGENT_RECEIVER_PORT: 8005
APACHE_MODE: own
APACHE_TCP_ADDR: 127.0.0.1
APACHE_TCP_PORT: 5008
AUTOSTART: off
[...]
----

Die obige Kommandoausgabe zeigt nur die ersten Einträge.


=== Häufig benötigte Einstellungen

In `omd config` gibt es zahlreiche Einstellungen.
Die Wichtigsten sind:

[cols="15,15,~",options="header"]
|===
|Variable |Standard |Bedeutung 
|`AUTOSTART` |`on` |Stellen Sie dies auf `off`, wenn Sie verhindern möchten, dass diese Instanz beim Hochfahren des Rechners automatisch gestartet wird. Das ist vor allem bei Testinstallationen interessant, die normalerweise nicht laufen sollen.
|`CORE` |`nagios` ({RE}), `cmc` ({EE}) |Auswahl des Monitoring-Kerns. In den {CEE} wird neben dem xref:cmc#[{CMK} Micro Core (CMC)] auch noch der klassische Nagios-Kern angeboten. In der {CRE} gibt es nur `nagios` als Monitoring-Kern.
|`MKEVENTD` |`on` |Aktiviert die xref:glossar#ec[Event Console], mit der Sie Syslog-Meldungen, SNMP-Traps und andere Events verarbeiten können.
|`LIVESTATUS_TCP` |`off` |Hiermit erlauben Sie Zugriff auf die Statusdaten dieser Instanz von außen. Damit kann ein xref:glossar#distributed_monitoring[verteiltes Monitoring] aufgebaut werden. Auf der Zentralinstanz kann dann der Status dieser (Remote-) Instanz eingebunden werden. Aktivieren Sie diese Einstellung nur in einem abgesicherten Netzwerk.
|===

*Hinweis:* Diese Variablen sehen Sie unter gleichem Namen auch im interaktiven Modus.


[#omd_cp_mv]
== Kopieren und Umbenennen von Instanzen

[#omd_cp]
=== Kopieren von Instanzen

Manchmal ist es nützlich, eine Kopie einer Instanz zu erzeugen -- sei es zu Testzwecken oder für die Vorbereitung eines xref:update#[Updates.]
Natürlich könnte man jetzt einfach das Verzeichnis `/omd/sites/mysite_old` nach `/omd/sites/mysite_new` kopieren.
Das würde aber nicht so funktionieren wie gewünscht, denn:

* in vielen Konfigurationsdateien ist der Name der Instanz enthalten,
* auch tauchen an etlichen Stellen absolute Pfade auf, die mit `/omd/sites/mysite_old` beginnen,
* und nicht zuletzt muss es auf Betriebssystemebene einen xref:user_group_id[Benutzer samt zugehöriger Gruppe] geben, dem die Instanz gehört und der standardmäßig so heißt, wie die Instanz.

Um das Kopieren einer Instanz zu vereinfachen, gibt es stattdessen den Befehl `omd cp`, welcher all das berücksichtigt.
Führen Sie den Befehl als `root` aus und geben Sie als Argumente einfach den Namen der bestehenden Instanz und dann den Namen der neuen an, z.B.:

[{shell}]
----
{c-root} omd cp mysite_old mysite_new
----

Das Kopieren geht nur, wenn

* die Instanz gestoppt ist und
* keine Prozesse mehr laufen, die dem Instanzbenutzer gehören.

Beides stellt sicher, dass die Instanz zum Zeitpunkt des Kopierens in einem konsistenten Zustand ist und sich auch während des Vorgangs nicht ändert.


[#omd_cp_mv_migration]
=== Migration der Konfiguration

OMD konnte ursprünglich lediglich mit den Dateien umgehen, die beim xref:omd_create[Erstellen der Instanz] mit `omd create` auch tatsächlich angelegt wurden, und die zudem die Instanz-ID (`$OMD_SITE`) enthalten.
Diese Dateien sind im Instanzverzeichnis `~/etc` zu finden mit diesem Befehl:

[{shell}]
----
{c-omd} grep -r $OMD_SITE etc
----

Mit Konfigurationsdateien, die erst später über die Arbeit mit der {CMK}-Instanz entstanden, konnte OMD nichts anfangen (also zum Beispiel den Konfigurationen hinzugefügter Hosts).
Rein technisch betrachtet entspricht dieses Verhalten genau dem Geltungsbereich von OMD.
Die Erwartungshaltung der meisten Benutzer ist aber die, dass ein `omd cp` eine komplett neue Instanz erschafft, die produktiv weitergenutzt werden kann -- inklusive der eigenen Monitoring-Konfiguration.

Seit der {CMK}-Version {v21} kann OMD nunmehr auch die wichtigsten Teile der {CMK}-Konfiguration anpassen.
Sie selbst müssen dafür übrigens im Grunde nichts tun, die gesamte folgend beschriebene Migration findet ganz automatisch statt.

Ein typisches Beispiel dazu:
In den Eigenschaften eines Hosts können Sie über das Attribut [.guihint]#Monitored on site# manuell festlegen, über welche Instanz dieser Host überwacht werden soll, etwa `mysite_old`.
Nach einem `omd cp mysite_old mysite_new` ändert sich der Wert entsprechend auf `mysite_new`.
(Früher hätte dieses Prozedere zu dem Eintrag `Unknown site (mysite_old)` geführt.)

Die technische Umsetzung dieser Migration sieht wie folgt aus:
OMD erkennt Änderungen an der Instanz-ID und führt dann den Befehl `post-rename-site -v -o mysite_new` aus.
Die einzelnen Migrationsschritte werden in der Folge ganz automatisch über die so genannten _rename actions plugins_ abgearbeitet, die Sie im Git-Repository unter link:https://github.com/tribe29/checkmk/tree/master/cmk/post_rename_site/plugins/actions[cmk/post_rename_site/plugins/actions^] finden.

Zur Migration gehört auch, dass Sie über Dinge informiert werden, die *nicht* automatisch migriert werden (können).

Hier ein konkretes Beispiel:
Sie nutzen ein verteiltes Monitoring und benennen sowohl die Zentralinstanz als auch eine Remote-Instanz um.

*Zentralinstanz:* Das Plugin `sites.py` erkennt, dass es sich um eine Zentralinstanz handelt und aktualisiert unter anderem den Wert [.guihint]#URL prefix,# der sich in den Verbindungseinstellungen der lokalen Instanz unter [.guihint]#Setup > General > Distributed Monitoring# findet.

*Remote-Instanz:* Das Plugin `warn_remote_site.py` erkennt, dass es sich um eine Remote-Instanz handelt und weist entsprechend darauf hin, dass die Zentralinstanz manuell geprüft und gegebenenfalls angepasst werden muss.
Das heißt hier konkret: In den Distributed-Monitoring-Einstellungen auf der Zentralinstanz muss in der Verbindungseinstellung zur umbenannten Remote-Instanz deren neuer Name eingetragen werden -- das kann OMD von einem entfernten Rechner aus freilich nicht leisten.

OMD selbst informiert Sie im Terminal ausführlich über das gesamte Prozedere.
Hier sehen Sie beispielhaft die Migrationsmeldungen der `omd cp`-Ausgabe beim Umbenennen einer Zentralinstanz - getrennt nach Erfolgs- und Warnmeldungen.
Die abgearbeiteten _rename actions plugins_ werden dabei einzeln durchnummeriert.
Zunächst die Ausgabe der automatisch erfolgten Migrationsaufgaben (gekürzt):

[{shell}]
----
...
Executing post-cp script "01_cmk-post-rename-site"...
-|  1/6 Distributed monitoring configuration...
-|  2/6 Hosts and folders...
-|  3/6 Update core config...
...
----

Der zweite Teil der Ausgabe enthält nun Hinweise bezüglich Einstellungen, die Sie *möglicherweise* manuell anpassen müssen (stark gekürzt):

[{shell}]
----
...
-|  4/6 Warn about renamed remote site...
-|  5/6 Warn about new network ports...
-|  6/6 Warn about configurations to review...
...
----

Zum Punkt `Warn about configurations to review...` gehören allgemeine Hinweise zu einzelnen Aspekten, die bei einer Migration generell manuell geprüft werden müssen, beispielsweise hartkodierte Filter für Ansichten:

[{shell}]
----
...
-| Parts of the site configuration cannot be migrated automatically. The following
-| parts of the configuration may have to be reviewed and adjusted manually:
-|
-| - Custom bookmarks (in users bookmark lists)
-| - Hard coded site filters in custom dashboards, views, reports
-| - Path in rrdcached journal files
-| - NagVis maps or custom NagVis backend settings
-| - Notification rule "site" conditions
-| - Event Console rule "site" conditions
-| - "site" field in "Agent updater (Linux, Windows, Solaris)" rules (CEE/CME only)
-| - Alert handler rule "site" conditions (CEE/CME only)
-|
-| Done
----

Hier eine Übersicht der derzeit sechs aktiven Plugins - die Reihenfolge entspricht der Nummerierung in den obigen Ausgaben:

[cols="35,~",options="header"]
|===
|Plugin |Funktion
|`sites.py` |Ändert die Instanz-ID in diversen Konfigurationsdateien.
|`hosts_and_folders.py` |Ändert das Instanz-Attribut von Host- und Ordner-Eigenschaften.
|`update_core_config.py` |Aktualisiert die Konfiguration des Kerns (`cmk -U`).
|`warn_remote_site.py` |Hinweise beim Umbenennen einer Remote-Instanz.
|`warn_changed_ports.py` |Hinweise bezüglich Problemen mit mehrfach genutzten Ports.
|`warn_about_not_migrated_configs.py` |Allgemeine Hinweise zu Aspekten, die manuell geprüft werden sollten.|
|===


[#limit_data]
=== Datenmengen einschränken

Wenn Sie mit der Instanz eine größere Zahl von Hosts überwachen, können die Datenmengen, die kopiert werden müssen, schon ganz erheblich sein.
Der Großteil wird dabei durch die Messwerte verursacht, die in den xref:graphing#rrds[Round-Robin-Datenbanken (RRDs)] gespeichert sind.
Aber auch die Log-Dateien mit historischen Ereignissen können größere Datenmengen erzeugen.

Wenn Sie die Historie nicht benötigen (z.B. weil Sie einfach schnell etwas testen möchten), können Sie diese beim Kopieren weglassen.
Dazu dienen folgende Optionen, die Sie bei `omd cp` angeben können:

[cols="10,~"]
|===
|`--no-rrds` |Kopiert die Instanz ohne die RRDs.
|`--no-logs` |Kopiert die Instanz ohne Log-Dateien und übrige historische Daten.
|`-N` |Macht beides: `-N` ist eine Abkürzung für `--no-rrds --nologs`.
|===

Die Reihenfolge der Option(en) ist dabei wichtig:

[{shell}]
----
{c-root} omd cp --no-rrds mysite_old mysite_new
----


[#omd_mv]
=== Instanzen umbenennen

Das Umbenennen einer Instanz erfolgt mit dem Befehl `omd mv`.
Dies geschieht analog zum xref:omd_cp[Kopieren einer Instanz], hat die gleichen Voraussetzungen und wird ebenfalls inklusive der xref:omd_cp_mv_migration[Migration der Konfiguration] durchgeführt.
Die Optionen zum Beschränken der Datenmengen existieren hier nicht, weil die Dateien ja einfach nur in ein anderes Verzeichnis verschoben und nicht dupliziert werden.
Beispiel:

[{shell}]
----
{c-root} omd mv mysite_old mysite_new
----


=== Weitere Optionen

Wie beim Erstellen einer Instanz wird auch beim Kopieren und beim Umbenennen jeweils ein neuer Linux-Benutzer angelegt.
Daher verfügen `omd cp` und `omd mv` auch über einige der Optionen von `omd create`, z.B. zur Festlegung von xref:user_group_id[Benutzer- und Gruppen-IDs].
Genaue Information erhalten Sie mit den Befehlen `omd cp --help` und `omd mv --help`.


[#omd_diff]
== Änderungen in Konfigurationsdateien anzeigen

Beim xref:omd_create[Erstellen einer Instanz] füllt der Befehl `omd create` das Verzeichnis `~/etc` mit vielen vordefinierten Konfigurationsdateien.
Auch unter `~/var` und `~/local` werden etliche Verzeichnisse angelegt.

Nun ist es wahrscheinlich so, dass Sie im Laufe der Zeit einige der Dateien anpassen werden.
Wenn Sie nach einiger Zeit feststellen möchten, welche Dateien nicht mehr dem Auslieferungszustand entsprechen, können Sie das mit dem Befehl `omd diff` herausfinden.
Nützlich ist dies unter anderem vor einem xref:update#[Update von {CMK}], da hier Ihre Änderungen möglicherweise im Konflikt stehen mit Änderungen der Standarddateien.

Bei einem Aufruf ohne weitere Argumente sehen Sie alle geänderten Dateien unterhalb des aktuellen Verzeichnisses:

[{shell}]
----
{c-omd} omd diff
 [green]#pass:[*]# Changed content var/check_mk/wato/auth/auth.php
 [yellow]#!# Changed permissions var/check_mk/wato/auth/auth.php
 [green]#pass:[*]# Changed content etc/htpasswd
 [green]#pass:[*]# Changed content etc/diskspace.conf
 [yellow]#!# Changed permissions etc/diskspace.conf
 [green]#pass:[*]# Changed content etc/auth.secret
 [green]#pass:[*]# Changed content etc/mk-livestatus/xinetd.conf
 [green]#pass:[*]# Changed content etc/omd/allocated_ports
 [green]#pass:[*]# Changed content etc/apache/apache.conf
 [green]#pass:[*]# Deleted etc/apache/apache-own.conf
----

Sie können beim Aufruf auch ein Verzeichnis angeben:

[{shell}]
----
{c-omd} omd diff etc/apache
 [green]#pass:[*]# Changed content etc/apache/apache.conf
 [green]#pass:[*]# Deleted etc/apache/apache-own.conf
----

Wenn Sie die Änderungen in der Datei im Detail sehen möchten, geben Sie einfach den Pfad zur Datei an:

[{shell}]
----
{c-omd} omd diff etc/apache/apache.conf
74,75c74,75
< ServerLimit          64
< MaxClients           64
---
> ServerLimit          128
> MaxClients           128
----


[#omd_update]
== Instanzen aktualisieren

Um die auf der Instanz installierte Monitoring-Software auf eine höhere (aber auch auf eine niedrigere) Version zu aktualisieren, dient der Befehl `omd update`.
Dieser wird ausführlich im Artikel zum xref:#detailed[Update von {CMK}] vorgestellt.
Dort werden auch weitere nützliche `omd`-Befehle rund um das Software-Update beispielhaft gezeigt:

* `omd versions` zur Auflistung aller installierten Software-Versionen,
* `omd sites` zur Auflistung aller existierender Instanzen mit den auf ihnen installierten Versionen,
* `omd version` zur Anzeige der Standardversion, die bei der Erstellung einer Instanz verwendet wird, 
* `omd setversion` zur Festlegung einer anderen Standardversion.

Mit `omd update` wird übrigens auch ein xref:update#updatedemo[Upgrade] auf eine andere Edition durchgeführt, z.B. von der {FE} auf die {SE}.


[#omd_backup_restore]
== Instanzen sichern und wiederherstellen

=== Backup erstellen

Die Instanzverwaltung von {CMK} hat einen eingebauten Mechanismus zum Sichern und Wiederherstellen von {CMK}-Instanzen.
Die Grundlage davon sind die Befehle `omd backup` und `omd restore`, welche alle Daten einer Instanz in ein tar-Archiv einpacken bzw. von dort wieder auspacken.

*Hinweis:* {CMK} bietet auch die Möglichkeit Backup und Restore ohne Kommandozeile über die GUI durchzuführen unter [.guihint]#Setup > Maintenance > Backups.#
Dort können Sie auch verschlüsselte Backups und zeitgesteuerte Backup-Aufträge erstellen.
Im Artikel zu xref:backup#[Backups] erfahren Sie, wie das geht.

Das Sichern einer Instanz mit `omd backup` erfordert keine `root`-Rechte.
Sie können es als Instanzbenutzer ausführen.
Geben Sie einfach als Argument den Namen einer zu erzeugenden Backup-Datei an:

[{shell}]
----
{c-omd} omd backup /tmp/mysite.tar.gz
----

Beachten Sie dabei:

* Der erzeugte Dateityp ist ein gzip-komprimiertes tar-Archiv. Verwenden Sie daher `.tar.gz` oder `.tgz` als Dateiendung.
* Legen Sie die Sicherung *nicht* in das Instanzverzeichnis. Denn dieses wird ja komplett gesichert. So würde jedes weitere Backup _alle_ bisherigen als Kopie enthalten.

Wenn das Zielverzeichnis der Sicherung nicht als Instanzbenutzer schreibbar ist, können Sie die Sicherung auch als `root` durchführen.
Dazu benötigen Sie wie immer als zusätzliches Argument den Namen der zu sichernden Instanz:

[{shell}]
----
{c-root} omd backup mysite /var/backups/mysite.tar.gz
----

Die Sicherung enthält alle Daten der Instanz -- außer den flüchtigen Daten unterhalb von `~/tmp/`.
Sie können mit dem Befehl `tar tzf` einfach einen Blick in die Datei werfen:

[{shell}]
----
{c-omd} tar tvzf /tmp/mysite.tar.gz  | less
lrwxrwxrwx mysite/mysite     0 2022-07-25 11:59 mysite/version -> ../../versions/2.1.0p8.cre
drwxr-xr-x mysite/mysite     0 2022-07-25 17:25 mysite/
-rw------- mysite/mysite   370 2022-07-26 17:09 mysite/.bash_history
-rw-r--r-- mysite/mysite  1091 2022-07-25 11:59 mysite/.bashrc
-rw-r--r-- mysite/mysite    63 2022-07-25 11:59 mysite/.modulebuildrc
-rw-r--r-- mysite/mysite  2066 2022-07-25 11:59 mysite/.profile
drwxr-xr-x mysite/mysite     0 2022-07-25 11:59 mysite/.version_meta/
drwxr-xr-x mysite/mysite     0 2022-07-20 11:40 mysite/.version_meta/skel/
-rw-r--r-- mysite/mysite  1091 2022-06-26 02:03 mysite/.version_meta/skel/.bashrc
-rw-r--r-- mysite/mysite    52 2022-07-20 09:02 mysite/.version_meta/skel/.modulebuildrc
-rw-r--r-- mysite/mysite  2055 2022-06-26 02:03 mysite/.version_meta/skel/.profile
drwxr-xr-x mysite/mysite     0 2022-07-20 11:40 mysite/.version_meta/skel/etc/
drwxr-xr-x mysite/mysite     0 2022-07-20 11:40 mysite/.version_meta/skel/etc/apache/
-rw-r--r-- mysite/mysite  1524 2022-06-26 02:03 mysite/.version_meta/skel/etc/apache/apache-own.conf
----


=== Backup ohne Historie

Der Löwenanteil der zu bewegenden Daten bei einer Instanzsicherung sind die Messwerte und die Log-Dateien mit historischen Ereignissen.
Das gilt beim Sichern genauso wie beim Kopieren einer Instanz.
Wenn Sie diese Daten nicht zwingend benötigen, können Sie diese weglassen und so die Sicherung deutlich schneller und die Ergebnisdatei deutlich kleiner machen.

`omd backup` bietet zum Verzicht auf diese Daten xref:limit_data[die gleichen Optionen] wie `omd cp` beim Kopieren.
Im folgenden Beispiel wird das Backup ohne Messdaten und ohne die in den Log-Dateien gespeicherte Historie erstellt:

[{shell}]
----
{c-omd} omd backup -N /tmp/mysite.tar.gz
----


=== Backup bei laufender Instanz

Ein Backup kann auch von einer laufenden Instanz erstellt werden.
Um einen konsistenten Stand der für das Aufzeichnen der Messdaten verwendeten xref:graphing#rrds[Round-Robin-Datenbanken (RRDs)] zu gewährleisten, versetzt der Befehl `omd backup` den Round-Robin-Cache automatisch in einen Modus, bei dem laufende Updates nur noch in das Journal und nicht mehr in die RRDs geschrieben werden.
Die Journaldateien werden zu allerletzt gesichert.
Damit wird erreicht, dass möglichst viele der Messdaten, die während der Sicherung angefallen sind, noch mitgesichert werden.


=== Restore

Das Zurückspielen einer Sicherung ist ebenso einfach wie das Sichern selbst.
Der Befehl `omd restore` stellt eine Instanz aus einer Sicherung wieder her.
Dies ist sogar als Instanzbenutzer möglich.
Die Instanz muss dabei gestoppt sein.
Die Instanz wird dabei nicht neu angelegt (was `root`-Rechte erfordern würde), sondern komplett geleert und neu befüllt.
Nach dem Restore muss die Instanz dann wieder gestartet werden:

[{shell}]
----
{c-omd} omd stop
{c-omd} omd restore /tmp/mysite.tar.gz
{c-omd} omd start
----







Auch als `root`-Benutzer ist ein Wiederherstellen möglich.
Falls noch eine Instanz mit dem gleichen Namen existiert, müssen Sie diese allerdings vorher löschen.
Das können Sie entweder mit einem `omd rm` erledigen
oder Sie geben einfach die Option `--reuse` mit an. Ein `--kill` sorgt
zusätzlich dafür, dass die noch bestehende Instanz vorher gestoppt wird.
Den Namen der Instanz brauchen Sie beim `restore` nicht anzugeben,
da dieser in der Sicherung enthalten ist:

[{shell}]
----
{c-root} omd restore --reuse --kill /var/backup/mysite.tar.gz
{c-root} omd start mysite
----

Bei Verwendung als `root` können Sie Instanzen auch mit einem anderen
Namen als dem in der Sicherung wiederherstellen. Geben Sie dazu den gewünschten
Namen als Argument hinter dem Wort `restore` an:

[{shell}]
----
{c-root} omd restore mysite2 /var/backup/mysite.tar.gz
Restoring site mysite2 from /tmp/mysite.tar.gz...
 [green]#pass:[*]# Converted      ./.modulebuildrc
 [green]#pass:[*]# Converted      ./.profile
 [green]#pass:[*]# Converted      .pip/pip.conf
 [green]#pass:[*]# Converted      etc/logrotate.conf
----

Die lange Liste der Konvertierungen, die hier stattfinden, hat den gleichen
Grund wie bei dem weiter oben beschriebenen xref:omd_mv[Umbenennen] von Instanzen:
Der Name der Instanz kommt in etlichen Konfigurationsdateien vor und wird hier
automatisch durch den neuen Namen ersetzt.


[#ssh_omd_backup_restore]
=== Livemigration von Instanzen mit Backup & Restore

Die Befehle `omd backup` und `omd restore` können -- in guter alter
Unix-Tradition -- anstelle von Dateien auch über die Standard-Ein-/Ausgabe arbeiten.
Geben Sie hierzu anstelle eines Pfads für die tar-Datei einfach einen Bindestrich
an (`-`).

Auf diese Art können Sie eine Pipe aufbauen und die Daten ohne Zwischendatei
direkt auf einen anderen Rechner „streamen“. Je größer die Sicherung ist, desto
nützlicher ist das, denn so wird kein temporärer Platz im Dateisystem des
gesicherten Servers benötigt.

Folgender Befehl sichert eine Instanz per SSH auf einen anderen Rechner:

[{shell}]
----
{c-root} omd backup mysite - | ssh user@otherserver "cat > /var/backup/mysite.tar.gz"
----

Wenn Sie den SSH-Zugriff umdrehen, sich also lieber vom Sicherungsserver auf
die {CMK}-Instanz verbinden möchten, so geht auch das, wie folgendes Beispiel zeigt.
Dazu muss zuvor ein SSH-Login als Instanz-Benutzer erlaubt werden:

[{shell}]
----
root@otherserver# *ssh mysite@checkmkserver "omd backup -" > /var/backup/mysite.tar.gz*
----

Wenn Sie das geschickt mit einem `omd restore` kombinieren, das die Daten von der
Standardeingabe liest, können Sie eine komplette Instanz im laufenden Betrieb von
einem Server auf einen anderen kopieren -- und das ohne irgendeinen zusätzlichen Platz
für eine Sicherungsdatei:

[{shell}]
----
root@otherserver# *ssh mysite@checkmkserver "omd backup -" | omd restore - *
----

Und jetzt nochmal das Ganze mit umgedrehtem SSH-Zugriff -- diesmal wieder vom Quellsystem
auf das Zielsystem:

[{shell}]
----
{c-root} omd backup mysite - | ssh root@otherserver "omd restore -"
----


[#omd_rm]
== Löschen von Instanzen

Das Löschen einer Instanz geht ebenso einfach wie das xref:omd_create[Erstellen] -- mit dem Befehl `omd rm` als `root`.
Dabei wird die Instanz vorher automatisch gestoppt.

[{shell}]
----
{c-root} omd rm mysite
PLEASE NOTE: This action removes all configuration files
             and variable data of the site.

In detail the following steps will be done:
- Stop all processes of the site
- Unmount tmpfs of the site
- Remove tmpfs of the site from fstab
- Remove the system user <SITENAME>
- Remove the system group <SITENAME>
- Remove the site home directory
- Restart the system wide apache daemon
 (yes/NO): *yes*
----

Man muss wohl nicht extra dazuschreiben, dass hierbei *alle Daten der Instanz gelöscht* werden!

Wenn Sie kein Freund von Sicherheitsabfragen sind oder das Löschen in einem Skript durchführen wollen, können Sie mit der Option `-f` das Löschen erzwingen.

*Achtung:* `-f` muss hier *vor* dem `rm` stehen:

[{shell}]
----
{c-root} omd -f rm mysite
----


[#files]
== Dateien und Verzeichnisse

[cols="30,~",options="header"]
|===
|Pfad |Bedeutung
|`/omd/sites/mysite` |Instanzverzeichnis der Instanz `mysite`.
|`~/etc/` |In diesem Verzeichnis werden die Konfigurationsdateien der Instanz abgelegt.
|===
