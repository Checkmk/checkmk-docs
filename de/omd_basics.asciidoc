include::global_attr.adoc[]
= Monitoring-Instanzen (Sites)
:revdate: draft
:title: Monitoring-Instanzen (Sites) - Instanzen mit {CMK} verwalten
:description: {CMK} ermöglicht die Verwaltung von beliebig vielen Instanzen (Sites) und Software-Versionen auf einem Server.

{related-start}
xref:update#[Updates und Upgrades]
xref:install_packages#[Grundsätzliches zur Installation von {CMK}]
xref:cmk_versions#[{CMK}-Versionen]
{related-end}


== OMD -- Die Open Monitoring Distribution

Das {CMK} Monitoring-System baut auf der _Open Monitoring Distribution_ (OMD) auf.
OMD ist ein von Mathias Kettner gegründetes Open Source Projekt, das sich rund um die komfortable und flexible Installation einer Monitoring-Lösung aus diversen Komponenten dreht.
Die Abkürzung OMD haben Sie bereits als Teil der Namen der installierten RPM/DEB-Pakete kennengelernt.

Eine OMD-basierte Installation zeichnet sich durch diese Eigenschaften aus:

* die Möglichkeit _mehrere_ Monitoring-Instanzen parallel zu betreiben,
* die Möglichkeit, dies in _unterschiedlichen Versionen_ der Monitoring-Software zu tun,
* einen intelligenten und komfortablen Mechanismus zur Aktualisierung (_update_) der Software - auf eine höhere und niedrigere Version,
* einheitliche Dateipfade -- egal welche Linux-Plattform Sie einsetzen,
* eine saubere Trennung von _Daten_ und _Software,_
* eine sehr einfache Installation -- ohne Abhängigkeit von Drittanbieter-Software,
* eine perfekte Vorkonfiguration aller Komponenten.


[#omd_create]
== Erstellen von Instanzen

Das vielleicht Beste an OMD ist, dass OMD auf einem Server beliebig viele _Monitoring-Instanzen_ verwalten kann.
Diese heißen auf Englisch _monitoring sites._
Jede Instanz ist ein in sich geschlossenes Monitoring_System, welches von den anderen getrennt läuft.

Eine Instanz hat immer einen eindeutigen Namen, den bei ihrer Erstellung festgelegt wird.
Dieser ist gleichzeitig der Name eines Linux-Benutzers, der dabei angelegt wird.
Der Name folgt also den gleichen Konventionen wie Benutzernamen unter Linux.

Das Erstellen geschieht mit dem Befehl `omd create`.
Dieser muss als `root` ausgeführt werden:

[{shell}]
----
{c-root} omd create mysite
Adding /opt/omd/sites/mysite/tmp to /etc/fstab.
Creating temporary filesystem /omd/sites/mysite/tmp...[green]#OK#
Updating core configuration...
Generating configuration for core (type nagios)...
Precompiling host checks...[green]#OK#
Executing post-create script "01_create-sample-config.py"...[green]#OK#
Restarting Apache...[green]#OK#
Created new site mysite with version 2.1.0p1.cre.

  The site can be started with *omd start mysite*.
  The default web UI is available at *http://linux/mysite/*

  The admin user for the web applications is *cmkadmin* with password: *YzxfoFZh*
  For command line administration of the site, log in with *'omd su mysite'*.
  After logging in, you can change the password for cmkadmin with *'htpasswd etc/htpasswd cmkadmin'*.
----

Bei der Erstellung des Benutzers `cmkadmin` wird ein zufällig generiertes Passwort angelegt und ausgegeben.

Was geschieht beim Anlegen einer Instanz mit dem Namen `mysite`?

* Ein Betriebssystembenutzer `mysite` und eine Gruppe `mysite` werden angelegt.
* Dessen neues Home-Verzeichnis `/omd/sites/mysite` wird angelegt und diesem übereignet.
Dieses Verzeichnis wird auch Instanzverzeichnis (englisch: _site directory_) genannt.
* Dieses Verzeichnis wird mit Konfigurationsdateien und Verzeichnissen gefüllt.
* Für die neue Instanz wird eine Grundkonfiguration erstellt.

*Wichtig:* Vermeiden Sie einen Namen, welcher bereits von einem anderen Dienst belegt ist.
// TK: Was ist hier mit "Dienst" gemeint? Ein Name, der bereits als benutzer oder Gruppe existiert, wird jedenfalls schonmal abgewiesen.
Eine doppelte Belegung kann zu Problemen führen.


=== Benutzer- und Gruppen-IDs

In manchen Fällen möchte man die Benutzer-/Gruppen-ID des neu anzulegenden Benutzers festlegen.
Dies geschieht mit den Optionen `-u` und `-g`, z.B.:

[{shell}]
----
{c-root} omd create -u 6100 -g 180 mysite
----

Eine Übersicht über weitere Optionen erhalten Sie mit `omd create --help`.
Die wichtigsten Optionen sind:

[cols="10,~"]
|===
|`-u UID` |Der neue Benutzer wird mit der Benutzer-ID `UID` angelegt.
|`-g GID` |Die Gruppe des neuen Benutzers wird mit der Gruppen-ID `GID` angelegt.
|`--reuse` |OMD geht davon aus, dass der neue Benutzer bereits existiert und legt ihn nicht an.
|`-t SIZE` |Das temporäre Dateisystem der neuen Instanz wird mit der Größe `SIZE` angelegt. `SIZE` endet mit `M` (Megabyte), `G` (Gigabyte) oder `%` (Prozent vom RAM). Beispiel: `-t 4G`
|===


[#site_user]
== Instanzbenutzer

Die weitere Verwaltung der Instanz erfolgt nun am Besten immer mit den Rechten des neu angelegten Instanzbenutzers (englisch: _site user_).
Der Benutzerwechsel geschieht mit `su`:

[{shell}]
----
{c-root} su - mysite
----

Beachten Sie unbedingt das Minuszeichen nach dem `su`.
Es sorgt dafür, dass der Benutzerwechsel _alle_ Operationen durchläuft, die auch bei einer normalen Anmeldung ablaufen.
Insbesondere werden alle Umgebungsvariablen korrekt gesetzt, und Ihre Sitzung wird als `mysite` im Site-Verzeichnis `/omd/sites/mysite` gestartet.

Alternativ können Sie auch

[{shell}]
----
{c-root} omd su mysite
----

verwenden. Auch damit wird eine Login Shell geöffnet.

Als Instanzbenutzer können Sie alle wichtigen Operationen durchführen, die diese Instanz betreffen.
Bei allen entsprechenden `omd`-Befehlen entfällt dann natürlich die Angabe des Instanznamens.


[#omd_start_stop]
== Starten und Stoppen von Instanzen

Ihre Instanz ist jetzt bereit, gestartet zu werden.
Sie können das als `root` mit `omd start mysite` machen.
Besser ist es aber, wenn Sie das Arbeiten mit der Instanz grundsätzlich als Instanzbenutzer erledigen:

[{shell}]
----
{c-omd} omd start
Creating temporary filesystem /omd/sites/mysite/tmp...[green]#OK#
Starting agent-receiver...OK
Starting mkeventd...OK
Starting rrdcached...OK
Starting npcd...OK
Starting nagios...OK
Starting apache...OK
Starting redis...OK
Initializing Crontab...OK
----

Wenig überraschend geht das Anhalten mit `omd stop`:

[{shell}]
----
{c-omd} omd stop
Removing Crontab...OK
Stopping redis...killing 484382...OK
Stopping apache...killing 484371...OK
Stopping nagios...OK
Stopping npcd...OK
Stopping rrdcached...waiting for termination...OK
Stopping mkeventd...killing 484279...OK
Stopping agent-receiver...killing 484267...OK
Stopping 1 remaining site processes...[green]#OK#
----

Das Starten und Stoppen einer Instanz ist nichts anderes als das Starten bzw. Stoppen einer Reihe von Diensten.
Diese können auch einzeln verwaltet werden, indem Sie den Namen des Diensts mit angeben, z.B.:

[{shell}]
----
{c-omd} omd start apache
Temporary filesystem already mounted
Starting apache...OK
----

Wie die einzelnen Dienste heißen, erfahren Sie im Verzeichnis `~/etc/init.d`.
Beachten Sie die Tilde am Anfang des Pfadnamens.
Diese steht für das Home-Verzeichnis des Instanzbenutzers (das Instanzverzeichnis).
`~/etc/init.d` und `/etc/init.d` sind unterschiedliche Verzeichnisse.

Neben `start` und `stop` gibt es noch die `omd`-Befehle `restart`, `reload` und `status`.
Das Neuladen von Apache ist z.B. immer nach einer manuellen Änderung der Apache-Konfiguration notwendig:

[{shell}]
----
{c-omd} omd reload apache
Reloading apache
----

Beachten Sie, dass hier nicht der globale Apache-Prozess des Linux-Servers gemeint ist, sondern ein eigener dedizierter Apache-Prozess in der Instanz selbst:

Um nach den ganzen Starts und Stops einen Überblick vom Zustand der Instanz zu erhalten, verwenden Sie einfach `omd status`:

[{shell}]
----
{c-omd} omd status
agent-receiver: [red]#stopped#
mkeventd:       [red]#stopped#
rrdcached:      [red]#stopped#
npcd:           [red]#stopped#
nagios:         [red]#stopped#
apache:         [green]#running#
redis:          [red]#stopped#
crontab:        [red]#stopped#
-----------------------
Overall state:  [yellow]#partially running#
----


[#omd_rm]
== Löschen von Instanzen

Das Löschen einer Instanz geht ebenso einfach wie das Erzeugen -- mit dem Befehl `omd rm` als `root`.
Dabei wird die Instanz vorher automatisch gestoppt.

[{shell}]
----
{c-root} omd rm mysite
PLEASE NOTE: This action removes all configuration files
             and variable data of the site.

In detail the following steps will be done:
- Stop all processes of the site
- Unmount tmpfs of the site
- Remove tmpfs of the site from fstab
- Remove the system user <SITENAME>
- Remove the system group <SITENAME>
- Remove the site home directory
- Restart the system wide apache daemon
 (yes/NO): *yes*
----

Man muss wohl nicht extra dazuschreiben, dass hierbei *alle Daten der Instanz gelöscht* werden!

Wenn Sie kein Freund von Sicherheitsabfragen sind oder das Löschen in einem Skript durchführen wollen, können Sie mit der Option `-f` das Löschen erzwingen.

*Achtung:* `-f` muss hier *vor* dem `rm` stehen:

[{shell}]
----
{c-root} omd -f rm mysite
----


[#omd_config]
== Konfigurieren der Komponenten

Wie bereits erwähnt, integriert OMD mehrere Software-Komponenten zu einem Monitoring-System.
Dabei sind manche Komponenten optional und für manche gibt es Alternativen oder verschiedene Betriebseinstellungen.
Dies alles kann komfortabel mit dem Befehl `omd config` konfiguriert werden.
Dabei gibt es einen interaktiven Modus und einen Skriptmodus.


[#interactive_mode]
=== Interaktive Konfiguration

Den interaktiven Modus rufen Sie als Instanzbenutzer einfach so auf: 

[{shell}]
----
{c-omd} omd config
----

.Im `omd config`-Menü navigieren Sie mit den Cursor- und Enter-Tasten
image::omd_basics_omd_config_main.png[alt="Hauptmenü von 'omd config'.",width=300]

Sobald Sie bei laufender Instanz eine Einstellung ändern, wird Sie OMD darauf hinweisen, dass zuvor Ihre Instanz angehalten werden muss und diese bei Bedarf auch stoppen:

.Die Konfiguration kann nur geändert werden, wenn die Instanz nicht läuft
image::omd_basics_omd_config_cannotchange.png[alt="Hinweis zum Ändern einer Einstellung bei gestarteter Instanz.",width=300]

Vergessen Sie nicht, nach getaner Arbeit die Instanz wieder zu starten.
`omd config` wird das _nicht_ automatisch für Sie tun.


[#script_mode]
=== Konfiguration per Skriptmodus

Wer den interaktiven Modus nicht liebt oder mit Skripten arbeiten will, kann die einzelnen Einstellungen als Variablen auch per Kommandozeile setzen.
Dafür gibt es den Befehl `omd config set`.
Folgendes Beispiel setzt die Variable `AUTOSTART` auf `off`:

[{shell}]
----
{c-omd} omd config set AUTOSTART off
----

Sie können `omd config set` auch als `root` aufrufen, wenn Sie den Namen der Instanz als Argument mit angeben:

[{shell}]
----
{c-root} omd config mysite set AUTOSTART off
----

Die aktuelle Belegung aller Variablen zeigt `omd config show`:

[{shell}]
----
{c-omd} omd config show
ADMIN_MAIL: 
AGENT_RECEIVER: on
AGENT_RECEIVER_PORT: 8005
APACHE_MODE: own
APACHE_TCP_ADDR: 127.0.0.1
APACHE_TCP_PORT: 5008
AUTOSTART: off
[...]
----

Die obige Kommandoausgabe zeigt nur die ersten Einträge.


=== Häufig benötigte Einstellungen

In `omd config` gibt es zahlreiche Einstellungen.
Die Wichtigsten sind:

[cols="15,15,~",options="header"]
|===
|Variable |Standard |Bedeutung 
|`AUTOSTART` |`on` |Stellen Sie dies auf `off`, wenn Sie verhindern möchten, dass diese Instanz beim Hochfahren des Rechners automatisch gestartet wird. Das ist vor allem bei Testinstallationen interessant, die normalerweise nicht laufen sollen.
|`CORE` |`nagios` ({RE}), `cmc` ({EE}) |Auswahl des Monitoring-Kerns. In den {CEE} wird neben dem xref:cmc#[{CMK} Micro Core (CMC)] auch noch der klassische Nagios-Kern angeboten. In der {CRE} gibt es nur `nagios` als Monitoring-Kern.
|`MKEVENTD` |`on` |Aktiviert die xref:glossar#ec[Event Console], mit der Sie Syslog-Meldungen, SNMP-Traps und andere Events verarbeiten können.
|`LIVESTATUS_TCP` |`off` |Hiermit erlauben Sie Zugriff auf die Statusdaten dieser Instanz von außen. Damit kann ein xref:glossar#distributed_monitoring[verteiltes Monitoring] aufgebaut werden. Auf der Zentralinstanz kann dann der Status dieser (Remote-) Instanz eingebunden werden. Aktivieren Sie diese Einstellung nur in einem abgesicherten Netzwerk.
|===

*Hinweis:* Diese Variablen sehen Sie unter gleichem Namen auch im interaktiven Modus.



[#omd_cp_mv]
== Kopieren und Umbenennen von Instanzen

Manchmal ist es zu Testzwecken oder für die Vorbereitung eines Updates
nützlich, wenn man eine Kopie einer Instanz erzeugt. Natürlich
könnte man jetzt einfach das Verzeichnis `/omd/sites/mysite_alt` nach
`/omd/sites/mysite_neu` kopieren. Das würde aber so nicht funktionieren,
denn:

* In vielen Konfigurationsdateien ist der Name der Site enthalten.
* Auch tauchen an etlichen Stellen absolute Pfade auf, die mit `/omd/sites/mysite_alt` beginnen.
* Nicht zuletzt muss es einen Benutzer samt zugehöriger Gruppe mit dem Namen der Site geben, dem alles gehört.

Um das Kopieren einer Instanz zu vereinfachen, gibt es daher den Befehl
`omd cp`, welcher all das berücksichtigt. Die Verwendung ist denkbar
einfach. Geben Sie als Argumente einfach den Namen der bestehenden Site
und dann den Namen der neuen an, z.B.:

[{shell}]
----
{c-root} omd cp mysite_alt mysite_neu
----

Das Kopieren geht nur, wenn

* die Site gestoppt ist und
* keine Prozesse mehr laufen, die dem Instanz-Benutzer gehören.

Beides stellt sicher, dass die Instanz zum Zeitpunkt des Kopierens in einem
konsistenten Zustand ist und sich auch während des Vorgangs nicht ändert.


=== Migration der Konfiguration

OMD konnte ursprünglich lediglich mit den Dateien umgehen, die bei einem initialen `omd create` auch tatsächlich angelegt wurden, und die zudem die Instanz-ID (`$OMD_SITE`) enthalten; zu finden via:

[{shell}]
----
{c-omd} grep -r $OMD_SITE etc
----

Mit Konfigurationsdateien, die erst später über die Arbeit mit der {CMK}-Instanz entstehen, konnte OMD nichts anfangen (also zum Beispiel den Konfigurationen hinzugefügter Hosts).
Rein technisch betrachtet entspricht dieses Verhalten genau dem Geltungsbereich von OMD.
Die Erwartungshaltung der meisten Nutzer ist aber die, dass ein `omd cp` eine komplett neue Instanz erschafft, die produktiv weitergenutzt werden kann -- inklusive der eigenen Monitoring-Konfiguration.
Seit der {CMK}-Version {v21} kann OMD daher auch die wichtigsten Teile der {CMK}-Konfiguration anpassen.
Sie selbst müssen dafür übrigens im Grunde nichts tun, die gesamte folgend beschriebene Migration findet ganz automatisch statt.

Ein typisches Beispiel dazu:
In den Eigenschaften eines Hosts können Sie über das Attribut [.guihint]#Monitored on site# manuell festlegen, über welche Instanz dieser Host überwacht werden soll, etwa `mysite_alt`.
Nach einem `omd cp mysite_alt mysite_neu` ändert sich der Wert entsprechend auf `mysite_neu`.
(Früher hätte dieses Prozedere zu dem Eintrag `Unknown site (mysite_alt)` geführt.)

Die technische Umsetzung dieser Migration sieht wie folgt aus:
OMD erkennt Änderungen an der Instanz-ID und führt dann den Befehl `post-rename-site -v -o mysite_neu` aus.
Die einzelnen Migrationsschritte werden in der Folge ganz automatisch über die so genannten `rename action plugins` abgearbeitet, die Sie im Git-Repository unter link:https://github.com/tribe29/checkmk/tree/master/cmk/post_rename_site/plugins/actions[cmk/post_rename_site/plugins/actions^] finden.

Zur Migration gehört auch, dass Sie über Dinge informiert werden, die *nicht* automatisch migriert werden (können).

Mal ein konkretes Beispiel: Sie nutzen ein verteiltes Monitoring und benennen sowohl die Zentralinstanz als auch eine Remote-Instanz um.

*Zentralinstanz:* Das Plugin `sites.py` erkennt, dass es sich um eine Zentralinstanz handelt und aktualisiert unter anderem den Wert [.guihint]#URL prefix,# der sich in den Verbindungseinstellungen der lokalen Instanz unter [.guihint]#Setup > General > Distributed Monitoring# findet.

*Remote-Instanz:* Das Plugin `warn_remote_site.py` erkennt, dass es sich um eine Remote-Instanz handelt und weist entsprechend darauf hin, dass die Zentralinstanz manuell geprüft und gegebenenfalls angepasst werden muss.
Heißt hier konkret: In den Distributed-Monitoring-Einstellungen auf der Zentralinstanz muss in der Verbindungseinstellung zur umbenannten Remote-Instanz deren neuer Name eingetragen werden -- das kann OMD von einem entfernten Rechner aus freilich nicht leisten.

OMD selbst informiert Sie im Terminal ausführlich über das gesamte Prozedere.
Hier sehen Sie beispielhaft die Migrationsmeldungen der `omd cp`-Ausgabe beim Umbenennen einer Zentralinstanz - getrennt nach Erfolgs- und Warnmeldungen.
Die abgearbeiteten `rename action plugins` werden dabei einzeln durchnummeriert.
Zunächst die Ausgabe der automatisch erfolgten Migrationsaufgaben (gekürzt):

[{shell}]
----
...
Executing post-cp script "01_cmk-post-rename-site"...
-|  1/6 Distributed monitoring configuration...
-|  2/6 Hosts and folders...
-|  3/6 Update core config...
...
----

Der zweite Teil der Ausgabe enthält nun Hinweise bezüglich Einstellungen, die Sie *möglicherweise* manuell anpassen müssen (stark gekürzt):

[{shell}]
----
...
-|  4/6 Warn about renamed remote site...
-|  5/6 Warn about new network ports...
-|  6/6 Warn about configurations to review...
...
----

Zum Punkt [.guihint]#Warn about configurations to review...# gehören allgemeine Hinweise zu einzelnen Aspekten, die bei einer Migration generell manuell geprüft werden müssen, beispielsweise hartkodierte Filter für Ansichten:

[{shell}]
----
...
-| Parts of the site configuration cannot be migrated automatically. The following
-| parts of the configuration may have to be reviewed and adjusted manually:
-|
-| - Custom bookmarks (in users bookmark lists)
-| - Hard coded site filters in custom dashboards, views, reports
-| - Path in rrdcached journal files
-| - NagVis maps or custom NagVis backend settings
-| - Notification rule "site" conditions
-| - Event Console rule "site" conditions
-| - "site" field in "Agent updater (Linux, Windows, Solaris)" rules (CEE/CME only)
-| - Alert handler rule "site" conditions (CEE/CME only)
-|
-| Done
----

Hier eine Übersicht der derzeit sechs aktiven Plugins - die Reihenfolge entspricht der Nummerierung in den obigen Ausgaben:

[cols="35,~",options="header"]
|===
|Plugin |Funktion
|`sites.py` |Ändert die Instanz-ID in diversen Konfigurationsdateien.
|`hosts_and_folders.py` |Ändert das Instanz-Attribut von Host- und Ordner-Eigenschaften.
|`update_core_config.py` |Führt ein Update der Core-Konfiguration durch (`cmk -U`).
|`warn_remote_site.py` |Hinweise beim Umbenennen einer Remote-Instanz.
|`warn_changed_ports.py` |Hinweise bezüglich Problemen mit mehrfach genutzten Ports.
|`warn_about_not_migrated_configs.py` |Allgemeine Hinweise zu Aspekten, die manuell geprüft werden sollten.|
|===


=== Datenmengen einschränken

Wenn Sie eine größere Zahl von Hosts überwachen, können die Datenmengen,
die kopiert werden müssen, schon ganz erheblich sein. Der Großteil wird dabei
durch die Performancedaten verursacht, die in RRD-Dateien gespeichert sind.
Aber auch die Logdateien mit historischen Ereignissen können größere Datenmengen
erzeugen. Wenn Sie die Historie nicht benötigen (z.B. weil Sie einfach etwas
testen möchten), können Sie diese beim Kopieren auslassen. Dazu dienen
folgende Optionen, die Sie bei `omd cp` angeben können:

[cols=2]
|===

|--no-rrds |Lässt beim Kopieren die Performancedaten (RRDs) weg.
|--no-logs |Lässt alle Logfiles und übrige historische Daten weg.
|-N |Dies ist eine Abkürzung für `--no-rrds --nologs`.
|===


Die Position der Optionen ist dabei wichtig:

[{shell}]
----
{c-root} omd cp --no-rrds mysite_alt mysite_neu
----


[#omd_mv]
=== Instanzen umbenennen

Das Umbenennen einer Instanz geht mit dem Befehl `omd mv`. Dies geschieht analog
zum Kopieren und hat die gleichen Vorbedingungen. Die Optionen zum Beschränken der
Datenmengen existieren hier nicht, weil die Dateien ja einfach nur in ein
anderes Verzeichnis verschoben und nicht dupliziert werden. Beispiel:

[{shell}]
----
{c-root} omd mv mysite_alt mysite_neu
----

=== Weitere Optionen von cp und mv

Bei beiden Operationen werden genauso wie bei `create` neue Linux-Benutzer
angelegt. Deswegen gibt es hier auch einige der Optionen von `omd create`:

[cols="10,~"]
|===

|-u UID |Der neue Benutzer wird mit der User-ID UID angelegt.
|-g GID |Die Gruppe des neuen Benutzers wird mit der Group-ID GID angelegt.
|--reuse |OMD geht davon aus, dass der neue Benutzer bereits existiert und legt ihn nicht an.
|-t SIZE |Das `tmpfs` der neuen Site wird mit der Größe SIZE angelegt. SIZE endet mit `M` (Megabyte), `G` (Gigabyte) oder `%` (Prozent vom RAM). Beispiel: `-t 4G`.
|===



[#omd_diff]
== Änderungen anzeigen mit omd diff

Beim Erzeugen einer neuen {CMK}-Instanz bevölkert der Befehl `omd
create` das Verzeichnis `etc` mit vielen vordefinierten
Konfigurationsdateien. Auch unter `var` und `local` werden
etliche Verzeichnisse angelegt.

Nun ist es wahrscheinlich so, dass Sie im Laufe der Zeit einige der Dateien
anpassen werden. Wenn Sie nach einiger Zeit feststellen möchten, welche
Dateien nicht mehr dem Auslieferungszustand entsprechen, können Sie das
mit dem Befehl `omd diff` herausfinden. Nützlich ist dies unter
anderem vor einem xref:update#[Update von {CMK}], da hier Ihre Änderungen
möglicherweise mit Änderungen der Defaultdateien im Konflikt stehen.

Bei einem Aufruf ohne weitere Argumente sehen Sie alle geänderten
Dateien:

[{shell}]
----
{c-omd} omd diff
 [green]#pass:[*]# Deleted var/log/nagios.log
 [green]#pass:[*]# Changed content var/check_mk/wato/auth/auth.php
 [green]#pass:[*]# Changed content etc/htpasswd
 [yellow]#!# Changed permissions etc/htpasswd
 [green]#pass:[*]# Changed content etc/diskspace.conf
 [green]#pass:[*]# Changed content etc/auth.secret
 [green]#pass:[*]# Changed content etc/apache/apache.conf
----

Sie können beim Aufruf auch ein Verzeichnis angeben:

[{shell}]
----
{c-omd} omd diff etc/apache
 [green]#pass:[*]# Changed content etc/apache/apache.conf
----

Wenn Sie die Änderungen in der Datei im Detail sehen möchten, geben
Sie einfach den kompletten Namen der Datei an:

[{shell}]
----
{c-omd} omd diff etc/apache/apache.conf
[red]#--- /dev/fd/63  2017-01-24 09:14:46.248968199 +0100#
[green]#+++ /omd/sites/mysite/etc/apache/apache.conf    2017-01-24 09:12:37.705355164 +0100#
@@ -66,8 +66,8 @@
 StartServers         1
 MinSpareServers      1
 MaxSpareServers      5
[red]#-ServerLimit          128#
[red]#-MaxClients           128#
[green]#+ServerLimit          64#
[green]#+MaxClients           64#
 MaxRequestsPerChild  4000

 ###############################################################################
----


[#omd_backup_restore]
== Instanzen sichern und wiederherstellen

=== Instanzen sichern mit omd backup

Die Instanzverwaltung von {CMK} hat einen eingebauten Mechanismus zum
Sichern und Wiederherstellen von {CMK}-Instanzen. Die Grundlage davon
sind die Befehle `omd backup` und `omd restore`, welche
alle Daten einer Instanz in ein tar-Archiv einpacken bzw. von dort wieder
auspacken.

Seit Version {v14} verfügt {CMK} zusätzlich über das
WATO-Modul [.guihint]#Backup#, welches Backup und Restore ohne Kommandozeile
möglich macht und auch das Einrichten von regelmäßigen Backupjobs erlaubt.

Das Sichern einer Instanz mit `omd backup` erfordert keine `root`-Rechte.
Sie können es als Instanz-Benutzer ausführen. Geben Sie einfach als Argument den
Namen einer zu erzeugenden Backupdatei an:

[{shell}]
----
{c-omd} omd backup /tmp/mysite.tar.gz
----

Bitte beachten Sie dabei:

* Der erzeugte Dateityp ist ein gzip-komprimiertes tar-Archiv. Verwenden Sie daher `.tar.gz` oder `.tgz` als Dateiendung.
* Legen Sie die Sicherung *nicht* in das Instanzverzeichnis. Denn dieses wird ja komplett gesichert. So würde jedes weitere Backup alle bisherigen als Kopie enthalten!

Wenn das Zielverzeichnis der Sicherung nicht als Instanz-Benutzer schreibbar
ist, können Sie die Sicherung auch als `root`-Benutzer durchführen.
Dazu benötigen Sie wie immer als zusätzliches Argument den Namen der
zu sichernden Instanz:

[{shell}]
----
{c-root} omd backup mysite /var/backups/mysite.tar.gz
----

Die Sicherung enthält alle Daten der Instanz -- außer den flüchtigen Daten
unterhalb von `tmp/`.  Sie können mit dem Befehl `tar tzf`
einfach einen Blick in die Datei werfen:

[{shell}]
----
{c-omd} tar tvzf /tmp/mysite.tar.gz  | less
lrwxrwxrwx mysite/mysite     0 2017-01-24 09:02 mysite/version -> ../../versions/2017.01.16.cee
drwxr-xr-x mysite/mysite     0 2017-01-24 09:12 mysite/
drwxr-xr-x mysite/mysite     0 2017-01-24 09:02 mysite/local/
drwxr-xr-x mysite/mysite     0 2017-01-24 09:02 mysite/local/share/
drwxr-xr-x mysite/mysite     0 2017-01-24 09:02 mysite/local/share/nagvis/
drwxr-xr-x mysite/mysite     0 2017-01-24 09:02 mysite/local/share/nagvis/htdocs/
drwxr-xr-x mysite/mysite     0 2017-01-24 09:02 mysite/local/share/nagvis/htdocs/userfiles/
drwxr-xr-x mysite/mysite     0 2017-01-24 09:02 mysite/local/share/nagvis/htdocs/userfiles/styles/
drwxr-xr-x mysite/mysite     0 2017-01-24 09:02 mysite/local/share/nagvis/htdocs/userfiles/scripts/
drwxr-xr-x mysite/mysite     0 2017-01-24 09:02 mysite/local/share/nagvis/htdocs/userfiles/templates/
drwxr-xr-x mysite/mysite     0 2017-01-24 09:02 mysite/local/share/nagvis/htdocs/userfiles/gadgets/
----


=== Backup ohne Historie

Der Löwenanteil der Daten einer Instanzsicherung sind die in den RRDs
aufgezeichneten xref:graphing#[Messdaten]. Auch die Monitoringhistorie kann
sehr groß werden. Wenn Sie beides nicht zwingend benötigen, können Sie
mit folgenden Optionen auf historische Daten
verzichten und so die Sicherung deutlich kleiner und schneller machen.
Die Optionen müssen jeweils hinter das Wort `backup` gestellt werden:

[cols=2]
|===

|--no-rrds |Verzichtet auf die Sicherung der RRD-Datenbanken (Messdaten).
|--no-logs |Verzichtet auf die in den Logdateien gespeicherte Monitoringhistorie.
|-N |Ist eine Abkürzung für `--no-rrds` `--no-logs`.
|===


Beispiel:

[{shell}]
----
{c-omd} omd backup -N /tmp/mysite.tar.gz
----



=== Backup bei laufender Instanz

Die Sicherung ist nicht darauf angewiesen, dass die Instanz gestoppt ist
und kann auch bei einem laufenden System durchgeführt werden. Um einen
konsistenten Stand der für das Aufzeichnen der xref:graphing#[Messdaten]
verwendeten xref:graphing#rrds[RRDs] zu gewährleisten, versetzt der Befehl `omd
backup` den Round-Robin-Cache automatisch in einen Modus, bei dem
laufende Updates nur noch in das Journal und nicht mehr in die RRDs geschrieben
werden. Die Journaldateien werden zu allerletzt gesichert. Damit wird erreicht,
dass möglichst viele der Messdaten, die während der Sicherung angefallen
sind, noch mitgesichert werden.


=== Restore

Das Zurückspielen einer Sicherung ist ebenso einfach wie das Sichern selbst.
Der Befehl `omd restore` stellt eine Instanz aus einer Sicherung
wieder her. Dies ist sogar als Instanz-Benutzer möglich. Die Instanz muss
dabei gestoppt sein. Die Instanz wird dabei nicht neu angelegt (was
`root`-Rechte erfordern würde), sondern komplett geleert und
neu befüllt:

[{shell}]
----
{c-omd} omd stop
{c-omd} omd restore /tmp/mysite.tar.gz
----

Nach dem Restore muss die Instanz noch gestartet werden:

[{shell}]
----
{c-omd} omd start
----

Auch als `root`-Benutzer ist ein Wiederherstellen möglich. Falls noch
eine Instanz mit dem gleichen Namen existiert, müssen Sie diese allerdings
vorher entfernen. Das können Sie entweder mit einem `omd rm` erledigen
oder Sie geben einfach die Option `--reuse` mit an. Ein `--kill` sorgt
zusätzlich dafür, dass die noch bestehende Instanz vorher gestoppt wird.
Den Namen der Instanz brauchen Sie beim `restore` nicht anzugeben,
da dieser in der Sicherung enthalten ist:

[{shell}]
----
{c-root} omd restore --reuse --kill /var/backup/mysite.tar.gz
{c-root} omd start mysite
----

Bei Verwendung als `root` können Sie Instanzen auch mit einem anderen
Namen als dem in der Sicherung wiederherstellen. Geben Sie dazu den gewünschten
Namen als Argument hinter dem Wort `restore` an:

[{shell}]
----
{c-root} omd restore mysite2 /var/backup/mysite.tar.gz
Restoring site mysite2 from /tmp/mysite.tar.gz...
 [green]#pass:[*]# Converted      ./.modulebuildrc
 [green]#pass:[*]# Converted      ./.profile
 [green]#pass:[*]# Converted      .pip/pip.conf
 [green]#pass:[*]# Converted      etc/logrotate.conf
----

Die lange Liste der Konvertierungen, die hier stattfinden, hat den gleichen
Grund wie bei dem weiter oben beschriebenen xref:omd_mv[Umbenennen] von Instanzen:
Der Name der Instanz kommt in etlichen Konfigurationsdateien vor und wird hier
automatisch durch den neuen Namen ersetzt.


[#ssh_omd_backup_restore]
=== Livemigration von Instanzen mit Backup & Restore

Die Befehle `omd backup` und `omd restore` können -- in guter alter
Unix-Tradition -- anstelle von Dateien auch über die Standard-Ein-/Ausgabe arbeiten.
Geben Sie hierzu anstelle eines Pfads für die tar-Datei einfach einen Bindestrich
an (`-`).

Auf diese Art können Sie eine Pipe aufbauen und die Daten ohne Zwischendatei
direkt auf einen anderen Rechner „streamen“. Je größer die Sicherung ist, desto
nützlicher ist das, denn so wird kein temporärer Platz im Dateisystem des
gesicherten Servers benötigt.

Folgender Befehl sichert eine Instanz per SSH auf einen anderen Rechner:

[{shell}]
----
{c-root} omd backup mysite - | ssh user@otherserver "cat > /var/backup/mysite.tar.gz"
----

Wenn Sie den SSH-Zugriff umdrehen, sich also lieber vom Sicherungsserver auf
die {CMK}-Instanz verbinden möchten, so geht auch das, wie folgendes Beispiel zeigt.
Dazu muss zuvor ein SSH-Login als Instanz-Benutzer erlaubt werden:

[{shell}]
----
root@otherserver# *ssh mysite@checkmkserver "omd backup -" > /var/backup/mysite.tar.gz*
----

Wenn Sie das geschickt mit einem `omd restore` kombinieren, das die Daten von der
Standardeingabe liest, können Sie eine komplette Instanz im laufenden Betrieb von
einem Server auf einen anderen kopieren -- und das ohne irgendeinen zusätzlichen Platz
für eine Sicherungsdatei:

[{shell}]
----
root@otherserver# *ssh mysite@checkmkserver "omd backup -" | omd restore - *
----

Und jetzt nochmal das Ganze mit umgedrehtem SSH-Zugriff -- diesmal wieder vom Quellsystem
auf das Zielsystem:

[{shell}]
----
{c-root} omd backup mysite - | ssh root@otherserver "omd restore -"
----

