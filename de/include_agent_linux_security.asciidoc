// -*- coding: utf-8 -*-
include::global_attr.adoc[]


[#security]
== Absicherung

=== Vorüberlegung

Sicherheit ist ein wichtiges Kriterium für jegliche Software, hier darf Monitoring keine Ausnahme machen.
Da der Monitoring-Agent auf jedem überwachten Server
installiert wird, hätte hier ein Sicherheitsproblem besonders gravierende
Auswirkungen.

Deswegen wurde schon beim Design von {CMK} auf Sicherheit Wert gelegt
und es gilt seit den ersten Tagen von {CMK} ein eherner Grundsatz: _Der
Agent liest keine Daten vom Netzwerk. Punkt._ Somit ist mit Sicherheit
ausgeschlossen, dass ein Angreifer über den Überwachungsport 6556 irgendwelche Befehle oder Skriptbestandteile einschleusen kann.

=== TLS ab {CMK} {v2.1}

Da jedoch für einen Angreifer bereits eine Prozessliste ein erster Ansatz sein kann, Rückschlüsse auf lohnenswerte Ziele zu ziehen, führt {CMK} ab Version {v21} standardmäßig Transportverschlüsselung mit TLS ein. Hierbei "pingt" der {CMK}-Server den Host im Monitoring an, der daraufhin die TLS-Verbindung zum {CMK}-Server aufbaut und darüber die Agenten-Ausgabe überträgt. 
Da nur {CMK}-Server, zu denen ein Vertrauensverhältnis besteht, diese Datenübertragung initieren können, besteht schonmal kein Risiko, dass Daten in die falschen Hände gelangen.

=== Beschränkung des Zugriffs über IP-Adressen

Wegen der simplen Initiierung der Datenübertragung ist auch das Risiko einer "Denial of Service" Attacke sehr gering. Selbstverständlich können Sie dieses weiter minimieren, indem Sie Port 6556 entweder per Systemd-Parameter `IPAddressAllow` auf die IP-Adressen Ihrer {CMK}-Sites beschränken (ab Systemd 235) oder den Port per `iptables` gegen unberechtigten Zugriff sperren.

=== Abschalten der "alten" Verschlüsselung

Ist die "alte" symetrische Verschlüsselung aktiv, die vom Agentenscript selbst durchgeführt wird, dann ist die Entropie der übertragenen Daten so hoch, dass die ab Version {v21} aktive Komprimierung keine Ersparnis der übertragenen Daten bringt – und die CPUs sowohl von Host als auch der Site mit einem zusätzlichen weiteren Ver- und Entschlüsselungsschritt belastet. Aus diesem Grund sollten Sie die alte Verschlüsselung zeitnah nach dem Wechsel auf TLS deaktivieren.



////
2.0 Text

Das allein liefert bereits ein so hohes Sicherheitsniveau, dass die
meisten Anwender _im LAN_ auf weitere Maßnahmen verzichten.
Kann das überwachte System nur über eine unsichere Internetverbindung
erreicht werden, gelten natürlich ganz andere Maßstäbe und hier ist
sicher eine Verschlüsselung mit SSH die erste Wahl.

Der {CMK}-Agent verfügt ferner
über eine _eingebaute Verschlüsselung_, welche einen guten Kompromiss aus
Sicherheit und Aufwand darstellt. Im Folgenden zeigen wir Ihnen
alle Möglichkeiten zur Absicherung im Detail.


=== Beschränkung des Zugriffs über IP-Adressen

Auch wenn ein Angreifer keine Befehle ausführen kann:
Die Monitoring-Daten des Agenten könnten für ihn bereits nützlich sein, denn sie enthalten unter anderem eine Liste von allen auf dem System laufenden Prozessen.
Am besten ist es daher, wenn die Daten nicht jeder einfach abrufen kann.

==== xinetd

Wenn Sie den {CMK}-Agenten ganz normal über den `xinetd` freigeben,
ist es sehr einfach und effektiv, den Zugriff auf bestimmte IP-Adressen zu
beschränken -- und zwar natürlich auf die des Monitoringservers. Das ist
einfach gemacht und war schon im Beispiel weiter oben zu sehen:

./etc/xinetd.d/check-mk-agent
[{file}]
----
service check_mk
{
        type           = UNLISTED
        port           = 6556
        socket_type    = stream
        protocol       = tcp
        wait           = no
        user           = root
        server         = /usr/bin/check_mk_agent
        only_from      = 10.118.14.5 10.118.14.37
        disable        = no
}
----

{cee-only}
In den {EE} können Benutzer der Agentenbäckerei die erlaubten IP-Adressen über
den Regelsatz [.guihint]#Allowed agent access via IP address# konfigurieren.
Diesen Regelsatz finden Sie über [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules > Generic Options#.

Natürlich kann ein Angreifer sehr leicht seine IP-Adresse fälschen und so
eine Verbindung zum Agenten bekommen. Aber dann ist es sehr wahrscheinlich,
dass er die Antwort nicht bekommt -- weil diese zum echten Monitoringserver geht.
Oder er bekommt sie tatsächlich, aber der {CMK}-Server bekommt keinerlei Daten
und wird sehr bald einen Fehler melden.


==== Systemd

Da die meisten Distributionen zu Systemd gewechselt sind, der nicht nur die
Aufgaben des Init-Systems, sondern auch Netzwerkfunktionalität bereitstellt,
arbeiten Linux-Distributoren daran, den guten alten xinetd abzuschaffen.
Der vorpaketierte Linux-Agent (nicht der aus der Agentenbäckerei!) installiert sich
daher bereits mit Mitteln des systemd, wenn das Zielsystem auf Systemd
basiert und _kein_ bereits installierter Xinetd verfügbar ist.

Bei der Verwendung von Systemd lässt sich natürlich auch einschränken, welcher Rechner bzw. welche IP den {CMK}-Agenten abfragen darf. Das Pendant zum von xinetd bekannten _only_from_ heißt hier _IPAddressAllow_.
Der Agent erkennt während der Installation, ob die laufende Version von Systemd diese Option bereits kennt und konfiguriert sich entsprechend.

Wenn Sie noch nicht zu den von Systemd überzeugten gehören, gibt es aber
einen einfachen Ausweg: Es ist selbst bei Systemd-basierten Systemen
(noch) möglich, Xinetd zu verwenden. Dieser läuft dann als Dienst
unter Systemd. Installieren Sie dazu das Paket `xinetd` und danach den {CMK}-Agenten _erneut_.
Dieser wird dann Xinetd finden und bevorzugt einrichten.


[#ssh]
=== Aufruf über SSH

Die beste Sicherheit beim Aufruf des {CMK}-Agenten bietet der
Aufruf desselben über Secure Shell -- bei Linux in Form der Implementierung
_OpenSSH_. Diese Methode ist angebracht bei:

* Überwachung von Linux-Servern, die nur über das Internet erreichbar sind
* Überwachung von Rechnern in einer DMZ
* In ähnlichen Situationen, in denen eine TCP-Verbindung vom {CMK}-Server auf den Agenten überhaupt möglich ist.

Das Einrichten geschieht in folgenden Schritten:

. Erstellen Sie ein SSH-Schlüsselpaar speziell für diesen Zweck.
. Erlauben Sie auf den Zielsystemen den Zugriff auf den Agenten mittels dieses Schlüssels.
. Klemmen Sie den Zugriffs über Xinetd ab.
. Konfigurieren Sie den {CMK}-Server so, dass er anstelle der TCP-Verbindung auf Port 6556 SSH verwendet.


Und das Ganze jetzt Schritt für Schritt mit allen notwendigen Details:


==== SSH-Schlüsselpaar erstellen

SSH arbeitet mit einer „Public-Key-Authentifizierung“. Dazu erzeugt
man zunächst ein Paar von aufeinander abgestimmten Schlüsseln, bei denen
einer öffentlich (public) ist und einer geheim (private). Bei der Wahl der
Algorithmen können Sie wählen zwischen `rsa`, `ecdsa` oder `ed25519`. In
dem nachfolgenden Beispiel nutzen Sie den Befehl `ssh-keygen -t ed25519`
als Instanzbenutzer:

[{shell}]
----
{c-omd} ssh-keygen -t ed25519
Generating public/private ed25519 key pair.
Enter file in which to save the key (/omd/sites/mysite/.ssh/id_ed25519):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /omd/sites/mysite/.ssh/id_ed25519.
Your public key has been saved in /omd/sites/mysite/.ssh/id_ed25519.pub.
The key fingerprint is:
cc:87:34:d2:ed:87:ed:f7:1b:ec:58:1f:7c:23:00:e2 mysite@mycmkserver
The key's randomart image is:
+--[ED25519  256--+
|                 |
|       . .       |
|      ..+..      |
|      .=.+.o     |
|       ES +.o    |
|         . o. o  |
|            ...B.|
|             .=.*|
|             . o+|
+-----------------+
----

*Wichtig*: Geben Sie hier *keine* Passphrase an! Es nützt Ihnen nichts,
die Datei mit dem geheimen Schlüssel zu verschlüsseln. Denn Sie möchten
ja sicher nicht jedes Mal beim Start des {CMK}-Servers die Passphrase
eingeben müssen...

Das Ergebnis sind zwei Dateien im Verzeichnis `.ssh`:

[{shell}]
----
{c-omd} ll .ssh
total 8
-rw------- 1 mysite mysite 1679 Feb 20 14:18 id_ed25519
-rw-r--r-- 1 mysite mysite  398 Feb 20 14:18 id_ed25519.pub
----

Der private Schlüssel heißt `id_ed25519` und ist nur für den Instanzbenutzer
lesbar (`-rw-------`) -- und das ist auch gut so! Der öffentliche
Schlüssel `id_ed25519.pub` sieht etwa so aus:

[{shell}]
----
{c-omd} cat .ssh/id_ed25519.pub
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGb6AaqRPlbEmDnBkeIW3Q6Emb5lr2QEbWEQLmA5pb48 mysite@mycmkserver
----


==== Zugriff per SSH erlauben

Der nächste Schritt muss jetzt auf (je-)dem per SSH überwachten Linux-Server
stattfinden.  Loggen Sie sich dort als `root` ein und legen Sie in
dessen Homeverzeichnis (`/root`) das Unterverzeichnis `.ssh`
an, falls es das nicht bereits gibt. Mit dem folgenden Befehl werden die
Zugriffsrechte gleich korrekt auf 700 gesetzt:

[{shell}]
----
{c-root} mkdir -m 700 /root/.ssh
----

Öffnen Sie jetzt die Datei `authorized_keys` mit einem
(konsolenbasierten) Texteditor Ihrer Wahl. Falls die Datei nicht
existiert, wird sie der Editor automatisch anlegen:

[{shell}]
----
{c-root} vim /root/.ssh/authorized_keys
----

Kopieren Sie jetzt den Inhalt der Public Keys in diese Datei. Das geht z.B. mit
der Maus und Copy & Paste. Seien Sie genau! Jedes Leerzeichen zählt. Achten
Sie auch darauf, dass *nirgendwo zwei* Leerzeichen hintereinander
sind. Und: Das ganze ist *eine Zeile!*  Wenn die Datei schon existiert,
dann hängen Sie einfach unten eine neue Zeile an.


==== Zugriff auf die Ausführung des Agenten beschränken

Was jetzt kommt, ist sehr wichtig! Der SSH-Schlüssel soll _ausschließlich_
zur Ausführung des Agenten dienen. SSH bietet so etwas unter dem Namen
[.guihint]#Command restriction# an. Dazu setzen Sie den Text
`command="/usr/bin/check_mk_agent"` an den Anfang der Zeile, die Sie
gerade erzeugt haben -- mit *einem* Leerzeichen vom Rest getrennt. Das
sieht dann etwa so aus:

./root/.ssh/authorized_keys
[{file}]
----
command="/usr/bin/check_mk_agent" ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGb6AaqRPlbEmDnBkeIW3Q6Emb5lr2QEbWEQLmA5pb48 mysite@mycmkserver
----

Speichern Sie die Datei, kontrollieren Sie die Rechte. Diese *müssen* auf `600`
gesetzt sein:

[{shell}]
----
{c-root} chmod 600 /root/.ssh/authorized_keys
{c-root} ll /root/.ssh/authorized_keys
[hilite]#-rw-------# 1 root root 1304 Feb 20 14:36 authorized_keys
----

Testen Sie jetzt einmalig den Zugriff auf den Agenten per SSH. Beim ersten Mal
müssen Sie den Fingerprint des Schlüssels mit der Eingabe von "yes" bestätigen.
Erst danach können die Zugriffe im Hintergrund durch {cmk} erfolgen:

[{shell-raw}]
----
{c-omd} ssh root@myhost123
The authenticity of host 'localhost (127.0.0.1)' can't be established.
ECDSA key fingerprint is 55:34:f9:dd:2b:db:a7:fc:5d:4c:9d:37:28:f7:69:62.
Are you sure you want to continue connecting (yes/no)? yes
<<<check_mk>>>
Version: 2.0.0p42
AgentOS: linux
Hostname: myhost123
AgentDirectory: /etc/check_mk
DataDirectory: /var/lib/check_mk_agent
SpoolDirectory: /var/lib/check_mk_agent/spool
PluginsDirectory: /usr/lib/check_mk_agent/plugins
LocalDirectory: /usr/lib/check_mk_agent/local
<<<df>>>
----

Die Abfrage nach dem [.guihint]#key fingerprint# kommt übrigens nur beim ersten
Mal. Wenn es nicht klappt, überprüfen Sie bitte:

* Ist der SSH-Server auf dem Zielsystem überhaupt installiert?
* Haben die genannten Dateien und Verzeichnisse die richtigen Berechtigungen?
* Haben Sie die Syntax von `authorized_keys` korrekt getippt?
* Haben Sie dort den richtigen öffentlichen Schlüssel eingetragen?
* Haben Sie sich als der richtige Benutzer eingeloggt (`root@...`)?
* Haben Sie an das `command="..."` gedacht?

Bei sehr alten Zielsystemen kann es zudem vorkommen, dass Schlüssel mit
elliptischen Kurven (ed25519 und ecdsa) nicht bekannt sind. Erzeugen Sie in
diesem Fall zusätzlich einen RSA-Schlüssel und tragen Sie auch diesen in die
`authorized_keys` ein. SSH wird für die Verbindung dann automatisch den
stärksten bekannten Schlüssel verwenden.

==== Zugriff über xinetd abklemmen

Das ganze Einrichten von SSH nützt nichts, wenn der Zugriff über Port 6556
nach wie vor möglich ist. Um den zu schließen, setzen Sie den Xinetd-Dienst
von {CMK} auf `disabled`. Löschen Sie _nicht_ die ganze
Konfigurationsdatei. Diese würde beim nächsten Agentenupdate sonst wieder
auftauchen!

Das Deaktivieren geht in `/etc/xinetd.d/check-mk-agent`:

./etc/xinetd.d/check-mk-agent
[{file}]
----
service check_mk
{
        type           = UNLISTED
        port           = 6556
        socket_type    = stream
        protocol       = tcp
        wait           = no
        user           = root
        server         = /usr/bin/check_mk_agent
        disable        = yes
}
----

Danach starten Sie Xinetd neu:

[{shell}]
----
{c-root} /etc/init.d/xinetd restart
----

Die Deinstallation von Xinetd ist natürlich auch möglich -- aber dann wird sich
der {CMK}-Agent beim nächsten Update unter Umständen wieder über Systemd
aktivieren!

Vergessen Sie auf keinen Fall einen abschließenden Test. Eine Verbindung
auf Port 6556 darf jetzt nicht mehr möglich sein:

[{shell}]
----
{c-omd} telnet myhost123 6556
Trying 10.118.15.23...
telnet: Unable to connect to remote host: Connection refused
----


==== Zugriff von {CMK} auf SSH umstellen

Das Zielsystem ist vorbereitet. Jetzt fehlt nur noch die Konfiguration von {CMK}
selbst. Das geschieht über den Regelsatz [.guihint]#Setup > Agents > Other
integrations> Custom integrations > Individual program call instead of agent access#. Erstellen Sie
hier für die betroffenen Hosts eine Regel und tragen Sie als Befehl `ssh -T
root@$HOSTADDRESS$` ein:

image::agent_linux_rule_ssh_key.png[]

Nach einem Speichern und einem [.guihint]#Activate changes# sollte alles funktionieren!
Als Diagnose bieten sich die Befehle `cmk -D` und `cmk -d` an,
die im xref:cmk_commandline#cmk[Artikel über die Kommandozeile] erklärt werden.


==== Mehrere SSH-Schlüssel

Sie können auch mit mehr als einem SSH-Schlüssel arbeiten. Legen Sie die
Schlüssel in einem beliebigen Verzeichnis ab. In der Regel _Individual program
call instead of agent access_ müssen Sie den Pfad zum jeweiligen privaten
Schlüssel dann mit der Option _-i_ angeben. Verwenden Sie hier am besten
`$OMD_ROOT` als Ersatz für den Pfad zum Instanzverzeichnis
(`/omd/sites/mysite`). Der vollständige Befehl könnte dann `ssh -i
$OMD_ROOT/.ssh/my_key -T root@$HOSTADDRESS$` lauten und damit wäre die
Konfiguration auch in einer Instanz mit einem anderen Namen lauffähig:

image::agent_linux_rule_multiple_ssh_keys.png[]

Sie können so für verschiedene Gruppen von Hosts verschiedene SSH-Schlüssel
verwenden, indem Sie mehrere unterschiedliche Regeln in verwenden.


==== übliche Fehlermeldungen beim Umgang mit ssh

Wenn Sie den {CMK}-Agenten über ssh abrufen möchten, kann es mitunter vorkommen,
dass eben dieser Abruf nicht klappt und der Service _Check_MK_ auf Ihrem Host in
den Zustand CRIT geht. Diese Fehlermeldungen beginnen dann häufig mit _Agent exited with code 255_.

Informationen zur Behebung solcher Fehler, können Sie in dem link:https://kb.checkmk.com/display/KB/Executing+the+Linux+agent+over+ssh[entsprechenden Artikel in unserer Wissensdatenbank^] finden.


[#encryption]
=== Eingebaute Verschlüsselung

Der {CMK}-Agent kann seine Daten ohne Zusatzmittel selbst verschlüsseln.
Dies ist streng genommen kein Ersatz für eine Zugangskontrolle. Da aber ein
Angreifer ja keine Befehle senden und mit verschlüsselten Ausgabedaten
nichts anfangen kann, kommt es einer solchen schon sehr nahe.

Der Aufwand für die Verwendung der Verschlüsselung und die nötige
zusätzliche CPU-Last sind beide geringer, als bei der oben beschriebenen
Methode mit SSH, welche wir aber nach wie vor bei der Übertragung über das
Internet empfehlen.

Die Verschlüsselung braucht natürlich sowohl auf dem Agenten als auch auf
dem Server eine passende Konfiguration. Diese kann entweder von Hand
erstellt werden ({RE}) oder mit der Agentenbäckerei ({EE}).


==== Aufsetzen ohne Agentenbäckerei

Auch ohne Agentenbäckerei geht der erste Schritt dennoch über _Setup_ und das
Anlegen einer Regel im Regelsatz [.guihint]#Setup > Agents > Access to Agents >
Checkmk agent > Encryption#. Die Regel soll auf alle Hosts greifen, für die Sie Verschlüsselung
einsetzen möchten. SNMP-Hosts ignorieren diese Einstellung, daher müssen Sie sie
nicht explizit ausschließen.

image::agent_linux_encrypt.png[]

Wichtig ist die Einstellung für [.guihint]#Encryption for Agent#. Solange Sie
die Regel auf dem Default [.guihint]#Disable# lassen, bleibt natürlich alles
beim Alten. Sie haben also die Wahl zwischen:

* [.guihint]#Enable#: Verschlüsselung wird aktiviert, aber Daten von Agenten ohne Verschlüsselung werden weiter akzeptiert.
* [.guihint]#Enforce#: Verschlüsselung wird aktiviert, nur noch verschlüsselte Daten werden akzeptiert.

Sinnvoll ist es, zunächst mit [.guihint]#Enable# zu beginnen. Sobald Sie meinen, dass alle Agenten auf
Verschlüsselung umgestellt sind, stellen Sie auf [.guihint]#Enforce#, um dadurch Hosts zu finden,
die noch Daten im Klartext senden.

Die Verschlüsselung funktioniert mit einem gemeinsamen Passwort, das Sie hier
angeben und sowohl auf dem {CMK}-Server als auch auf dem Agenten im Klartext
gespeichert werden muss („Shared secret“). Wählen Sie ein zufälliges Passwort
aus und halten Sie es parat für den zweiten Schritt: die Konfiguration des Agenten.

Dort erzeugen Sie die Datei `/etc/check_mk/encryption.cfg` mit folgendem Inhalt:

./etc/check_mk/encryption.cfg
[{file}]
----
ENCRYPTED=yes
PASSPHRASE='XEwks9fm'
----

Natürlich setzen Sie hier bei `PASSPHRASE` Ihr eigenes Passwort ein. Und Sie sollten
die Datei unbedingt vor Lesezugriffen anderer Benutzer schützen:

[{shell}]
----
{c-root} chmod 600 /etc/check_mk/encryption.cfg
----

Jetzt können Sie folgende Tests machen (siehe dazu auch den
xref:cmk_commandline#[Artikel über die Kommandozeile von {CMK}]):

* Der Aufruf von `check_mk_agent` auf dem Zielsystem muss wirren Zeichensalat ausgeben.
* Der Zugriff via `telnet myhost123 6556` vom {CMK}-Server muss den gleichen Zeichensalat ausgeben.
* Der Befehl `cmk -d myhost123` auf dem {CMK}-Server muss die sauberen Klartextdaten anzeigen.


==== Aufsetzen mit der Agentenbäckerei

{cee-only}
Das Aufsetzen der Verschlüsselung mit der Agentenbäckerei ist sehr einfach. Mit dem Erstellen
der gerade beschriebenen Regel sind Sie im Grunde fertig. Sie brauchen nur noch neue Agenten
zu backen und zu verteilen. Die Datei `/etc/check_mk/encryption.cfg` wird automatisch
für Sie erzeugt und mit in die Agentenpakete eingebaut.
////
