include::global_attr.adoc[]
= Amazon Web Services (AWS) überwachen
:revdate: 2022-01-06
:title: Amazon Web Services (AWS) überwachen
:description: Wie Sie ohne Agent Amazon S3, EC2, EBS, RDS und ELB oder ihre Kosten überwachen und nahtlos in {CMK} integrieren, wird hier beschrieben.

// IGNORE AssumeRole Balancer CloudFront CloudWatch Cloudwatch DCD EBS ECS ELB ElastiCache Galcier IAM Konnektor ReadOnlyAccess S3 SNS STS Servic Storages WAF

{related-start}
xref:monitoring_azure#[Microsoft Azure überwachen]
xref:check_plugins_catalog#[Katalog der Check Plugins]
xref:dcd#[Dynamische Host-Konfiguration]
{related-end}

== Einleitung

[{image-left}]
image::logo_aws.png[width=140]

{CMK} enthält ein umfangreiches Monitoring von Amazon Web Services (AWS), welches aus einem Konnektor zu AWS und einer stattlichen Sammlung von Check-Plugins besteht, die für Sie verschiedenste Metriken und Zustände abrufen und auswerten.

Neben den allgemeinen Informationen zu den Kosten Ihrer AWS-Umgebung und dem aktuellen Status der link:https://checkmk.com/de/integrations/aws_status[AWS-Dienste in Ihrer Region^], können Sie mit allen Editionen von {CMK} die folgenden AWS-Produkte überwachen:

* link:https://checkmk.com/de/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=aws_cloudwatch[Amazon CloudWatch^]
* link:https://checkmk.com/de/integrations?distributions%5B%5D=check_mk&search=dynamodb[Amazon DynamoDB]
* link:https://checkmk.com/de/integrations?distributions%5B%5D=check_mk&search=ec2[Amazon EC2]
* link:https://checkmk.com/de/integrations?distributions%5B%5D=check_mk&search=aws_ebs[Amazon Elastic Block Store (EBS)^]
* link:https://checkmk.com/de/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=aws_rds[Amazon Relational Database Service (RDS)^]
* link:https://checkmk.com/de/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=aws_s3[Amazon S3^] und link:https://checkmk.com/de/integrations?distributions%5B%5D=check_mk&search=glacier[Amazon S3 Glacier^]
* link:https://checkmk.com/de/integrations?distributions%5B%5D=check_mk&search=aws_costs[AWS Costs and Usage^]
* link:https://checkmk.com/de/integrations?distributions%5B%5D=check_mk&search=aws_waf[AWS WAF^]
* link:https://checkmk.com/de/integrations?distributions%5B%5D=check_mk&search=elb[Elastic Load Balancing (ELB) - Application, Network, Classic^]

Mit der {CCE} können Sie darüber hinaus noch die folgenden Produkte in Ihr Monitoring aufnehmen:

* link:https://checkmk.com/de/integrations/aws_cloudfront[Amazon CloudFront^]
* link:https://checkmk.com/de/integrations?distributions%5B%5D=check_mk_cloud&search=aws_ecs[Amazon Elastic Container Service (ECS)^]
* link:https://checkmk.com/de/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=elasticache[Amazon ElastiCache^]
* link:https://checkmk.com/de/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=route53[Amazon Route 53^]
* link:https://checkmk.com/de/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=aws_sns[Amazon SNS^]
* link:https://checkmk.com/de/integrations?distributions%5B%5D=check_mk_cloud&search=lambda[AWS Lambda^]


Eine vollständige Auflistung aller verfügbaren Check-Plugins für die Überwachung von Amazon Web Services finden Sie in unserem link:https://checkmk.com/de/integrations?tags=aws[Katalog der Check-Plugins^].


== Konkrete Umsetzung der AWS-Überwachung

=== Hosts und Services

In {CMK} ordnen sich alle zu überwachenden Objekte in eine hierarchische
Struktur von Hosts und Services ein. Nun gibt es bei Cloud-basierten Diensten
das Konzept von Hosts nicht. Um die Einfachheit und Konsistenz von {CMK} zu
bewahren, bilden wir dennoch AWS-Objekte auf das Schema Host/Service ab.

Wie das geht, zeigt am besten ein Beispiel: In einer Region sind mehrere
EC2-Instanzen konfiguriert. Einer EC2 sind üblicherweise EBS zugeordnet. Diese
Konstellation sieht in {CMK} wie folgt aus:

* Es gibt einen Host, der dem AWS-Account entspricht. Dieser gibt eine Übersicht aller EC2-Instanzen und deren Status als Service.
* Die EC2-Instanzen selbst sind wiederum eigene Hosts.
* Auf diesen EC2-Hosts finden Sie Services mit den eigentlichen Metriken.
* Die EBS werden als eine Art Festplatten interpretiert und liefern dementsprechend Metriken zu I/O (z.B. gelesene oder geschriebene Anzahl an Bytes). Dazu existieren in {CMK} eigene Services mit dem Namen `AWS/EBS Disk IO` pro EBS, die der EC2-Instanz zugeordnet werden.


=== Zugriff auf AWS

AWS stellt eine HTTP-basierte API bereit, über
die auch Monitoring-Daten abrufbar sind.
{CMK} greift auf diese API über den „Spezialagenten“ `agent_aws`
zu, welcher an die Stelle des {CMK}-Agenten tritt, aber anders als dieser
lokal auf dem {CMK}-Server ausgeführt wird.


== AWS vorbereiten

=== Benutzer anlegen

Um die Überwachung per {CMK} zu ermöglichen, legen Sie am besten dafür einen speziellen AWS-Benutzer unterhalb Ihres Root-Accounts an.
link:https://console.aws.amazon.com[Loggen Sie sich^] dafür bei AWS als Root-Benutzer ein und navigieren Sie unter [.guihint]#All services# zu [.guihint]#Security, Identity, & Compliance > IAM#
(Identity and Access Management).
Gehen Sie hier auf [.guihint]#Users# und legen Sie mit [.guihint]#Add user# einen neuen Benutzer an.
Als Benutzername wählen Sie z.B. `check-mk`.
Wichtig ist, dass Sie bei [.guihint]#Select AWS credential type# den [.guihint]#Access key - Programmatic access# auswählen.

[{image-border}]
image::aws_create_user.png[]

=== Berechtigungen

Der soeben angelegte Benutzer sollte nur für das Monitoring durch {CMK} verwendet werden und benötigt ausschließlich lesenden Zugriff auf AWS.
Wir empfehlen diesem Benutzer ausschließlich die Policy [.guihint]#ReadOnlyAccess# zuzuweisen.
Um diese Policy zu finden, klicken Sie zuerst auf [.guihint]#Attach existing policies directly# und geben anschließend `readonlyaccess` in das Suchfeld ein.
In der Liste unter dem Suchfeld müssen Sie dennoch weit nach unten scrollen, da es eine ganze Reihe Policies gibt, die diesen String enthalten:

image::aws_create_user_policies.png[]


=== Schlüssel

Nach dem Abschluss des Anlegens des Benutzers wird für Sie automatisch ein
Zugangsschlüssel erzeugt.  Achtung: Das Secret des Schlüssels wird nur ein
einziges Mal -- direkt nach dem Erzeugen -- angezeigt. Kopieren Sie daher
unbedingt den Schlüssel und legen ihn z.B. im {CMK}-Passwortspeicher
ab.  Alternativ geben Sie ihn im Klartext in der Regel an (siehe unten).
Für {CMK} benötigen Sie neben dem Secret noch die [.guihint]#Access key ID#. Der
Name des Benutzers (bei uns `check-mk`) spielt hier keine Rolle.

image::aws_create_user_key.png[]

Falls Sie das Secret trotzdem einmal verlieren sollten, können Sie für
den Benutzer einen neuen Access Key anlegen und bekommen ein neues Secret:

image::aws_create_access_key.png[]


=== Zugriff auf Billing-Informationen

Wenn Sie möchten, dass {CMK} auch Lesezugriff auf die Abrechnungsinformationen bekommt
(um den globalen Check [.guihint]#Costs and Usage# ausführen zu können) benötigen Sie für Ihren AWS-Benutzer
eine weitere Policy, die Sie allerdings erst selbst definieren müssen.

Wählen Sie dazu unter [.guihint]#Security, Identity, & Compliance > IAM > Policies# den Knopf [.guihint]#Create Policy#.
Wählen Sie unter [.guihint]#Select a Service > Service > Choose a Service# den Service [.guihint]#Billing# aus.
Unter [.guihint]#Actions# kreuzen Sie die Checkbox [.guihint]#Read# an.
Sie müssen noch eine weitere Berechtigung setzen. Fügen Sie diese mit dem Knopf [.guihint]#Add additional permissions# hinzu.
Wählen Sie in der neuen Box unter [.guihint]#Select a Service > Service > Choose a Service# den Service [.guihint]#Cost Explorer Service# aus.
Unter [.guihint]#Actions# kreuzen Sie die Checkbox [.guihint]#Read# an.

image::aws_policies.png[]

Mit dem Knopf [.guihint]#Review# geht es zum Schritt zwei. Legen Sie dort als [.guihint]#Name# `BillingViewAccess`
an und speichern Sie mit dem Knopf [.guihint]#Create policy#.

Diese neue Policy müssen Sie jetzt noch dem Benutzer hinzufügen. Dazu gehen Sie wieder
zu [.guihint]#Security, Identity, & Compliance > IAM > Policies#, suchen im Suchfeld [.guihint]#Filter Policies#
nach `BillingViewAccess`, wählen diese durch Klick in den Kreis link aus und
gehen dann auf [.guihint]#Policy actions > Attach#. Hier finden Sie Ihren `check-mk`-Benutzer, den
Sie auswählen und mit [.guihint]#Attach policy# bestätigen.


== Monitoring in {CMK} konfigurieren

[#create_host]
=== Host für AWS in {CMK} anlegen

Legen Sie für die Überwachung von AWS nun einen Host in {CMK} an.
Den Host-Namen können Sie nach Belieben vergeben. Wichtig: Da AWS als Dienst keine
IP-Adresse oder DNS-Namen hat (den Zugriff macht der Spezialagent von selbst),
müssen Sie die [.guihint]#IP address family# auf [.guihint]#No IP# einstellen.

image::monitoring_aws_add_host_no_ip.png[]


[#agent_rule]
=== Regel für AWS-Agenten anlegen

AWS kann nicht über den normalen {CMK}-Agenten abgefragt werden.
Richten Sie daher jetzt den AWS-Spezialagenten ein.
Dazu legen Sie unter
[.guihint]#Setup > Agents > VM, Cloud, Container > Amazon Web Services (AWS)#
eine Regel an, deren xref:wato_rules#conditions[Bedingungen] ausschließlich auf den gerade angelegten AWS-Host
greifen.

Beim eigentlichen Inhalt der Regel finden Sie zunächst die Angaben für den Login.
Hier tragen Sie die „Access Key ID“ des angelegten AWS-Benutzers `check-mk` ein.
Auch wählen Sie hier, ob Sie einen Proxy benötigen,
um auf die Daten zuzugreifen und welche globalen Daten Sie überwachen möchten.
Das sind solche, die unabhängig von einer Region sind.
Aktuell sind hier lediglich die Daten über die Kosten auswählbar:

image::aws_rule_1.png[]

Im obigen Bild sehen Sie außerdem die Option [.guihint]#Use STS AssumeRole to assume a different IAM role#. Sollten Sie einen oder mehrere weitere Accounts bei AWS haben, können Sie mit einem einzigen Monitoring-Benutzer alle anderen ebenfalls überwachen.

Die eigentlich interessanten Daten aber sind einzelnen Regionen zugeordnet.
Wählen Sie also hier Ihre AWS-Region(en) aus:

image::aws_rule_2.png[]

Unter [.guihint]#Services per region to monitor# legen Sie nun fest,
welche Informationen Sie in diesen Regionen abrufen möchten. In
der Standardkonfiguration sind alle AWS-Dienste und die Überwachung
derer xref:monitoring_aws#limits[Limits] uneingeschränkt aktiviert. Der
Übersichtlichkeit halber wurden im folgenden Bild aber alle bis auf einen deaktiviert:

image::aws_rule_3.png[]

Diese können Sie dann pro Webdienst oder global mit
[.guihint]#Restrict monitoring services by one of these AWS tags# wieder einschränken.
Wenn Sie pro Webdienst einschränken, wird damit immer die globale Option
überschrieben. Ihnen steht hier zusätzlich zu den AWS Tags auch noch die
Möglichkeit zur Verfügung, explizite Namen anzugeben:

image::aws_rule_4.png[]

Letztendlich müssen Sie noch den Spezialagenten dem vorher erstellten Host zuordnen, indem
Sie den Host-Namen in [.guihint]#Conditions > Explicit hosts# eintragen.


=== Services auf dem AWS-Host selbst

Wechseln Sie nun in {CMK} zur Service-Erkennung des neu angelegten AWS-Hosts, wo {CMK} nun etliche Services finden sollte.
Nachdem Sie die Services hinzugefügt haben, sieht das nach einem xref:wato#activate_changes[Aktivieren der Änderungen] etwa so im Monitoring aus:

image::aws_services_ec.png[]

[#ec2-hosts]
=== Hosts für die EC2-Instanzen anlegen

Services, die EC2-Instanzen zugeordnet sind, werden nicht dem AWS-Host zugeordnet, sondern sogenannten xref:glossar#piggyback[Piggyback-Hosts].
Dies funktioniert so, dass Daten, die vom AWS-Host abgerufen wurden, an diese Piggyback-Hosts, die ohne eigene Monitoring-Agenten arbeiten, verteilt werden.
Dabei wird jeder EC2-Instanz ein Piggyback-Host zugeordnet.
Für die Benamsung dieser Piggyback-Hosts haben Sie bei der Konfiguration des Spezialagenten die Wahl zwischen zwei Schemata.
Zu einen können Sie die Hosts nach ihrem privaten IP DNS-Namen benennen lassen oder Sie wählen die etwas längere aber dafür eindeutige Benamsung nach IP, Region und Instanz-ID.
Letztere Variante ist ab {CMK} {v22} unsere Standardeinstellung.
Die Variante ohne Region und Instanz-ID wird nur aus Gründen der Kompatibilität weiterhin angeboten.
Ein solcher Piggyback-Host könnte also bspw. `172.23.1.123-ap-northeast-2-i-0b16121900a32960c` heißen.
Legen Sie diese Hosts entweder von Hand an oder - falls möglich - überlassen Sie diese Aufgabe der dynamischen Host-Verwaltung.

==== Dynamische Host-Verwaltung einrichten

{cee-only} Als Nutzer einer unserer {CEE} können Sie die Erstellung und Löschung von Hosts für Ihre EC2-Instanzen einfach der xref:dcd#[dynamischen Host-Verwaltung] überlassen.
Der Menüeintrag [.guihint]#Setup > Hosts > Dynamic host management# bringt Sie zur Übersichtsseite aller bereits konfigurierten Verbindungen.
Klicken Sie hier auf icon:icon_new[] [.guihint]#Add connection# und geben Sie der Verbindung anschließend eine [.guihint]#ID# und einen [.guihint]#Title.#

Im Folgenden werden nicht alle Optionen der [.guihint]#Connection properties# behandelt.
Konsultieren Sie bei Fragen die Inline-Hilfe und den oben verlinkten Hauptartikel.

Stellen Sie zuerst sicher, dass für den Kasten [.guihint]#Connection properties# der xref:intro_gui#show_less_more[Show-more-Modus] aktiviert ist, damit alle verfügbaren Optionen angezeigt werden.

Klicken Sie als nächstes unter [.guihint]#Piggyback creation options# auf [.guihint]#Add new element#.
Passen Sie den Ordner an, in dem die Hosts Ihrer VM-Instanzen erstellt werden sollen.
Die vorausgewählten [.guihint]#Host attributes# sind für Piggyback-Hosts im Grunde korrekt und bedürfen eher nicht der Anpassung.

Mit dem Aktivieren der Option [.guihint]#Delete vanished hosts# können Sie dafür sorgen, dass Piggyback-Hosts, für die über einen bestimmten Zeitraum keine frischen Daten mehr kommen, automatisch wieder gelöscht werden.

Im Rahmen der Überwachung Ihrer AWS-Umgebung sollte die Option [.guihint]#Restrict source hosts# aktiviert werden.
Tragen Sie hier Ihren AWS-Host aus dem Abschnitt xref:create_host[Host für AWS in {CMK} anlegen] ein.

Eine exemplarische Konfiguration der Verbindung könnte dann so aussehen:

image::monitoring_aws_connection_properties.png[alt="Exemplarische Konfiguration der Connection Properties."]


==== Hosts für EC2-Instanzen manuell anlegen

Alternativ können Sie Hosts für die Piggyback-Daten auch manuell anlegen.
Dabei ist es wichtig, dass die Namen der Hosts exakt dem xref:ec2-hosts[oben beschriebenen Schema] entsprechen.

*Tipp:* Mit dem Skript `find_piggy_orphans` aus dem Treasures-Verzeichnis finden Sie alle Piggyback-Hosts, für die es zwar Daten gibt, die aber noch nicht als Hosts in {CMK} angelegt sind:

[{shell}]
----
{c-omd} share/doc/check_mk/treasures/find_piggy_orphans
172.23.1.123-ap-northeast-2-i-0b16121900a32960c
172.23.1.124-ap-northeast-2-i-0b32960a16121900c
----

Konfigurieren Sie die Hosts für diese EC2-Instanzen ohne IP-Adresse (analog zum AWS-Host) und wählen Sie als Monitoring-Agent [.guihint]#No API integrations, no {CMK} agent# aus.
Wenn Sie unter [.guihint]#Piggyback# auch noch die Option [.guihint]#Always use and expect piggyback data# wählen, werden Sie beim Ausbleiben der Daten entsprechend gewarnt.

image::monitoring_aws_add_host_for_piggyback_data.png[]


=== Hosts für ELB (Classic Load Balancer)

Auch die Services für die ELB werden Piggyback-Hosts zugeordnet. Die Namen dafür entsprechen
deren DNS-Namen.


=== Traffic-Statistiken von S3 Buckets überwachen

Mit {CMK} können Sie den Traffic jedes einzelnen S3 Buckets überwachen.
Dazu müssen Sie in {CMK} lediglich die Option [.guihint]#Request metrics# unterhalb von [.guihint]#Simple Storage Service (S3)# aktivieren.

In AWS ist ein wenig mehr Arbeit erforderlich.
Hier müssen Sie eben diese _Request metrics_ noch für die gewünschten Buckets einrichten.
Wie das funktioniert beschreibt AWS detailliert in dem Artikel link:https://docs.aws.amazon.com/AmazonS3/latest/userguide/configure-request-metrics-bucket.html[Erstellen einer CloudWatch-Metrik-Konfiguration für alle Objekte in Ihrem Bucket^].



[#limits]
=== Limits überwachen

Einige Webdienste von AWS bringen Limits mit und {CMK} kann diese auch
überwachen. Dazu gehören zum Beispiel diese:

* link:https://checkmk.com/de/integrations/aws_ebs_limits[AWS EBS Limits^]
* link:https://checkmk.de/cms_check_aws_ec2_limits.html[AWS EC2 Limits^]
* link:https://checkmk.de/cms_check_aws_elb_limits.html[AWS ELB Limits^]
* link:https://checkmk.de/cms_check_aws_elbv2_limits.html[AWS Application and Network Limits^]
* link:https://checkmk.de/cms_check_aws_glacier_limits.html[AWS Galcier Limits^]
* link:https://checkmk.de/cms_check_aws_rds_limits.html[AWS RDS Limits^]
* link:https://checkmk.de/cms_check_aws_s3_limits.html[AWS S3 Limits^]
* link:https://checkmk.de/cms_check_aws_cloudwatch_alarms_limits.html[AWS Cloudwatch Alarm Limits^]

Sobald ein solches Check-Plugin Services erzeugt und diese später prüft,
werden immer *alle* Elemente des Webdienstes geholt. Nur so kann {CMK}
sinnvoll die aktuelle Auslastung zu diesen Limits berechnen und entsprechend
Schwellwerte prüfen. Das gilt auch dann, wenn Sie in der Konfiguration die
Daten auf bestimmte Namen oder Tags einschränken.

In der Grundkonfiguration sind die Limits automatisch aktiviert. Wenn Sie
also die zu holenden Daten in der
xref:monitoring_aws#agent_rule[Regel zu dem Spezialagenten] einschränken, weil Sie
die zu übertragenden Daten reduzieren wollen, schalten Sie ebenfalls die
Limits ab.


=== Weitere Services

Die weiteren Services von AWS werden wie folgt zugeordnet:
// TK: Was wird hier von wem zugeordnet? AWS Webdienste, CMK Services?

[cols="10,~,~"]
|===
| |Service |Zuordnung 

|CE |Costs & Usage |Beim AWS-Host
|EBS |Block Storages |Werden der EC2-Instanz angefügt, sofern diese der Instanz gehören, ansonsten dem AWS-Host
|S3 |Simple Storages |Beim AWS-Host
|RD |Relational Databases |Beim AWS-Host
|===
