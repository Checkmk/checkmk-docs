include::global_attr.adoc[]
= Amazon Web Services (AWS) überwachen
:revdate: 2022-01-06
:title: Amazon Web Services (AWS) überwachen
:description: Wie Sie ohne Agent Amazon S3, EC2, EBS, RDS und ELB oder ihre Kosten überwachen und nahtlos in {CMK} integrieren, wird hier beschrieben.

{related-start}
xref:monitoring_azure#[Microsoft Azure überwachen]
xref:check_plugins_catalog#[Katalog der Check Plugins]
xref:dcd#[Dynamische Host-Konfiguration]
{related-end}


== Einleitung

[{image-left}]
image::logo_aws.png[width=140]

Nach einer Umfrage unter unseren Anwendern ist
link:https://docs.aws.amazon.com/aws-technical-content/latest/aws-overview/introduction.html[Amazon Web Services^]
aktuell der wichtigste Anbieter von Cloud-basierten
Services. Und dass {CMK} hier eine exzellente Überwachung bereitstellen
muss, versteht sich von selbst.

{CMK} enthält daher ein umfangreiches Monitoring von AWS, welches aus einem
Konnektor zu AWS und einer stattlichen Sammlung von Check-Plugins besteht, die
für Sie verschiedenste Metriken und Zustände abrufen und auswerten. Aufgrund
der Menge an Check-Plugins hier nur einzelne, um die AWS-Bereiche aufzuzeigen,
die {CMK} derzeit überwachen kann:

* link:https://checkmk.de/cms_check_aws_ebs_summary.html[AWS EBS Summary^]
* link:https://checkmk.de/cms_check_aws_ec2.html[AWS EC2 Instance Status^]
* link:https://checkmk.de/cms_check_aws_elb.html[AWS ELB Statistics^]
* link:https://checkmk.de/cms_check_aws_elbv2_application_statistics.html[AWS ELB Application Statistics^]
* link:https://checkmk.de/cms_check_aws_elbv2_network_statistics.html[AWS ELB Network Statistics^]
* link:https://checkmk.de/cms_check_aws_rds_summary_db_status.html[AWS RDS Database Info^]
* link:https://checkmk.de/cms_check_aws_s3_summary.html[AWS S3 Summary^]
// AWS Glacier Summary ab {v20}
* link:https://checkmk.de/cms_check_aws_glacier_summary.html[AWS Glacier Summary^]
* link:https://checkmk.de/cms_check_aws_cloudwatch_alarms.html[AWS Cloudwatch Alarms^]
* link:https://checkmk.de/cms_check_aws_costs_and_usage.html[AWS Costs and Usage Summary^]

Eine vollständige aktuelle Liste aller Plugins finden Sie im
link:https://checkmk.de/cms_check_plugins_catalog.html[Katalog der Check-Plugins^].


== Konkrete Umsetzung der AWS-Überwachung

=== Hosts und Services

In {CMK} ordnen sich alle zu überwachenden Objekte in eine hierarchische
Struktur von Hosts und Services ein. Nun gibt es bei Cloud-basierten Diensten
das Konzept von Hosts nicht. Um die Einfachheit und Konsistenz von {CMK} zu
bewahren, bilden wir dennoch AWS-Objekte auf das Schema Host/Service ab.

Wie das geht, zeigt am besten ein Beispiel: In einer Region sind mehrere
EC2-Instanzen konfiguriert. Einer EC2 sind üblicherweise EBS zugeordnet. Diese
Konstellation sieht in {CMK} wie folgt aus:

* Es gibt einen Host, der dem AWS-Account entspricht. Dieser gibt eine Übersicht aller EC2-Instanzen und deren Status als Service.
* Die EC2-Instanzen selbst sind wiederum eigene Hosts.
* Auf diesen EC2-Hosts finden Sie Services mit den eigentlichen Metriken.
* Die EBS werden als eine Art Festplatten interpretiert und liefern dementsprechend Metriken zu I/O (z.B. gelesene oder geschriebene Anzahl an Bytes). Dazu existieren in {CMK} eigene Services mit dem Namen `AWS/EBS Disk IO` pro EBS, die der EC2-Instanz zugeordnet werden.


=== Zugriff auf AWS

AWS stellt eine HTTP-basierte API bereit, über
die auch Monitoring-Daten abrufbar sind.
{CMK} greift auf diese API über den „Spezialagenten“ `agent_aws`
zu, welcher an die Stelle des {CMK}-Agenten tritt, aber anders als dieser
lokal auf dem {CMK}-Server ausgeführt wird.


== AWS vorbereiten

=== Benutzer anlegen

Um die Überwachung per {CMK} zu ermöglichen, legen Sie am besten dafür einen speziellen AWS-Benutzer unterhalb Ihres Root-Accounts an.
link:https://console.aws.amazon.com[Loggen Sie sich^] dafür bei AWS als Root-Benutzer ein und navigieren Sie unter [.guihint]#All services# zu [.guihint]#Security, Identity, & Compliance > IAM#
(Identity and Access Management).
Gehen Sie hier auf [.guihint]#Users# und legen Sie mit [.guihint]#Add user# einen neuen Benutzer an.
Als Benutzername wählen Sie z.B. `check-mk`.
Wichtig ist, dass Sie bei [.guihint]#Select AWS credential type# den [.guihint]#Access key - Programmatic access# auswählen.

[{image-border}]
image::aws_create_user.png[]

=== Berechtigungen

Der soeben angelegte Benutzer sollte nur für das Monitoring durch {CMK} verwendet werden und benötigt ausschließlich lesenden Zugriff auf AWS.
Wir empfehlen diesem Benutzer ausschließlich die Policy [.guihint]#ReadOnlyAccess# zuzuweisen.
Um diese Policy zu finden, klicken Sie zuerst auf [.guihint]#Attach existing policies directly# und geben anschließend `readonlyaccess` in das Suchfeld ein.
In der Liste unter dem Suchfeld müssen Sie dennoch weit nach unten scrollen, da es eine ganze Reihe Policies gibt, die diesen String enthalten:

image::aws_create_user_policies.png[]


=== Schlüssel

Nach dem Abschluss des Anlegens des Benutzers wird für Sie automatisch ein
Zugangsschlüssel erzeugt.  Achtung: Das Secret des Schlüssels wird nur ein
einziges mal -- direkt nach dem Erzeugen -- angezeigt. Kopieren Sie daher
unbedingt den Schlüssel und legen ihn z.B. im {CMK}-Passwortspeicher
ab.  Alternativ geben Sie ihn im Klartext in der Regel an (siehe unten).
Für {CMK} benötigen Sie neben dem Secret noch die [.guihint]#Access key ID#. Der
Name des Benutzers (bei uns `check-mk`) spielt hier keine Rolle.

image::aws_create_user_key.png[]

Falls Sie das Secret trotzdem einmal verlieren sollten, können Sie für
den Benutzer einen neuen Access Key anlegen und bekommen ein neues Secret:

image::aws_create_access_key.png[]  


=== Zugriff auf Billing-Informationen

Wenn Sie möchten, dass {CMK} auch Lesezugriff auf die Abrechnungsinformationen bekommt
(um den globalen Check [.guihint]#Costs and Usage# ausführen zu können) benötigen Sie für Ihren AWS-Benutzer
eine weitere Policy, die Sie allerdings erst selbst definieren müssen.

Wählen Sie dazu unter [.guihint]#Security, Identity, & Compliance > IAM > Policies# den Knopf [.guihint]#Create Policy#.
Wählen Sie unter [.guihint]#Select a Service > Service > Choose a Service# den Service [.guihint]#Billing# aus.
Unter [.guihint]#Actions# kreuzen Sie die Checkbox [.guihint]#Read# an.
Sie müssen noch eine weitere Berechtigung setzen. Fügen Sie diese mit dem Knopf [.guihint]#Add additional permissions# hinzu.
Wählen Sie in der neuen Box unter [.guihint]#Select a Service > Service > Choose a Service# den Service [.guihint]#Cost Explorer Service# aus.
Unter [.guihint]#Actions# kreuzen Sie die Checkbox [.guihint]#Read# an.

image::aws_policies.png[]

Mit dem Knopf [.guihint]#Review# geht es zum Schritt zwei. Legen Sie dort als [.guihint]#Name# `BillingViewAccess`
an und speichern Sie mit dem Knopf [.guihint]#Create policy#.

Diese neue Policy müssen Sie jetzt noch dem Benutzer hinzufügen. Dazu gehen Sie wieder
zu [.guihint]#Security, Identity, & Compliance > IAM > Policies#, suchen im Suchfeld [.guihint]#Filter Policies#
nach `BillingViewAccess`, wählen diese durch Klick in den Kreis link aus und
gehen dann auf [.guihint]#Policy actions > Attach#. Hier finden Sie Ihren `check-mk`-Benutzer, den
Sie auswählen und mit [.guihint]#Attach policy# bestätigen. 
// TK: Auskommentiert, da die Meldung fehlt.
// Das müsste dann mit folgender Meldung erfolgreich ausgeführt werden:


== Monitoring in {CMK} konfigurieren

=== Host für AWS in {CMK} anlegen

Legen Sie für die Überwachung von AWS nun einen Host in {CMK} an.
Den Host-Namen können Sie nach Belieben vergeben. Wichtig: Da AWS als Dienst keine
IP-Adresse oder DNS-Namen hat (den Zugriff macht der Spezialagent von selbst),
müssen Sie die [.guihint]#IP address family# auf [.guihint]#No IP# einstellen.

image::azure_wato_no_ip.png[]


[#agent_rule]
=== Regel für AWS-Agenten anlegen

AWS kann nicht über den normalen {CMK}-Agenten abgefragt werden.
Richten Sie daher jetzt den AWS-Spezialagenten ein.
Dazu legen Sie unter
[.guihint]#Setup > Agents > VM, Cloud, Container > Amazon Web Services (AWS)#
eine Regel an, deren xref:wato_rules#conditions[Bedingungen] ausschließlich auf den gerade angelegten AWS-Host
greifen.

Beim eigentlichen Inhalt der Regel finden Sie zunächst die Angaben für den Login.
Hier tragen Sie die „Access Key ID“ des angelegten AWS-Benutzers `check-mk` ein.
Auch wählen Sie hier, ob Sie einen Proxy benötigen,
um auf die Daten zuzugreifen und welche globalen Daten Sie überwachen möchten.
Das sind solche, die unabhängig von einer Region sind.
Aktuell sind hier lediglich die Daten über die Kosten auswählbar:

image::aws_rule_1.png[]

Im obigen Bild sehen Sie außerdem die Option [.guihint]#Use STS AssumeRole to assume a different IAM role#. Sollten Sie einen oder mehrere weitere Accounts bei AWS haben, können Sie mit einem einzigen Monitoring-Benutzer alle anderen ebenfalls überwachen.

Die eigentlich interessanten Daten aber sind einzelnen Regionen zugeordnet.
Wählen Sie also hier Ihre AWS-Region(en) aus:

image::aws_rule_2.png[]

Unter [.guihint]#Services per region to monitor# legen Sie nun fest,
welche Informationen Sie in diesen Regionen abrufen möchten. In
der Standardkonfiguration sind alle AWS-Dienste und die Überwachung
derer xref:monitoring_aws#limits[Limits] uneingeschränkt aktiviert. Der
Übersichtlichkeit halber wurden im folgenden Bild aber alle bis auf einen deaktiviert:

image::aws_rule_3.png[]

Diese können Sie dann pro Webdienst oder global mit
[.guihint]#Restrict monitoring services by one of these AWS tags# wieder einschränken.
Wenn Sie pro Webdienst einschränken, wird damit immer die globale Option
überschrieben. Ihnen steht hier zusätzlich zu den AWS Tags auch noch die
Möglichkeit zur Verfügung, explizite Namen anzugeben:

image::aws_rule_4.png[]

Letztendlich müssen Sie noch den Spezialagenten dem vorher erstellten Host zuordnen, indem
Sie den Host-Namen in [.guihint]#Conditions > Explicit hosts# eintragen.


=== Services auf dem AWS-Host selbst

Wechseln Sie nun in {CMK} zur Service-Erkennung des neu angelegten AWS-Hosts, wo {CMK} nun etliche Services finden sollte.
Nachdem Sie die Services hinzugefügt haben, sieht das nach einem xref:wato#activate_changes[Aktivieren der Änderungen] etwa so im Monitoring aus:

image::aws_services_ec.png[]


=== Hosts für die EC2-Instanzen anlegen

Services, die EC2-Instanzen zugeordnet sind, werden nicht dem AWS-Host
zugeordnet, sondern sogenannten xref:piggyback#[Piggyback-Hosts]. Dies funktioniert
so, dass Daten, die vom AWS-Host abgerufen wurden, an diese Piggyback-Hosts verteilt
werden, die ohne eigene Monitoring-Agenten arbeiten. Dabei wird jeder
EC2-Instanz ein Piggyback-Host zugeordnet, welche nach dem privaten DNS-Namen
der EC2-Instanz benannt sind.

Die Piggyback-Hosts werden von {CMK} nicht automatisch angelegt.
Legen Sie diese Hosts entweder von Hand an oder optional mit dem xref:dcd#[Dynamic Configuration Daemon (DCD)].
Wichtig dabei
ist, dass die Namen der Hosts exakt mit den privaten DNS-Namen der EC2-Instanz
übereinstimmen -- und zwar auch die Groß-/Kleinschreibung!

*Tip:* mit dem Hilfsskript `find_piggy_orphans` aus dem
Treasures-Verzeichnis finden Sie alle Piggyback-Hosts, für es Daten gibt, die
aber noch nicht als Host im {CMK} angelegt sind:

[{shell}]
----
{c-omd} share/doc/check_mk/treasures/find_piggy_orphans
ip-172-31-44-50.eu-central-1.compute.internal
ip-172-31-44-51.eu-central-1.compute.internal
----

Konfigurieren Sie die EC2-Hosts ohne IP-Adresse (analog zum
AWS-Host) und wählen Sie als Agent [.guihint]#No API integrations, no {CMK} agent# aus.

image::wato_host_no_agent.png[]


=== Hosts für ELB (Classic Load Balancer)

Auch die Services für die ELB werden Piggyback-Hosts zugeordnet. Die Namen dafür entsprechen
deren DNS-Namen.


[#limits]
=== Limits überwachen

Einige Webdienste von AWS bringen Limits mit und {CMK} kann diese auch
überwachen. Dazu gehören zum Beispiel diese:

* link:https://checkmk.de/cms_check_aws_ebs_summary.html[AWS EBS Limits^]
* link:https://checkmk.de/cms_check_aws_ec2_limits.html[AWS EC2 Limits^]
* link:https://checkmk.de/cms_check_aws_elb_limits.html[AWS ELB Limits^]
* link:https://checkmk.de/cms_check_aws_elbv2_limits.html[AWS Application and Network Limits^]
* link:https://checkmk.de/cms_check_aws_glacier_limits.html[AWS Galcier Limits^]
* link:https://checkmk.de/cms_check_aws_rds_limits.html[AWS RDS Limits^]
* link:https://checkmk.de/cms_check_aws_s3_limits.html[AWS S3 Limits^]
* link:https://checkmk.de/cms_check_aws_cloudwatch_alarms_limits.html[AWS Cloudwatch Alarm Limits^]

Sobald ein solches Check-Plugin Services erzeugt und diese später prüft,
werden immer *alle* Elemente des Webdienstes geholt. Nur so kann {CMK}
sinnvoll die aktuelle Auslastung zu diesen Limits berechnen und entsprechend
Schwellwerte prüfen. Das gilt auch dann, wenn Sie in der Konfiguration die
Daten auf bestimmte Namen oder Tags einschränken.

In der Grundkonfiguration sind die Limits automatisch aktiviert. Wenn Sie
also die zu holenden Daten in der
xref:monitoring_aws#agent_rule[Regel zu dem Spezialagenten] einschränken, weil Sie
die zu übertragenden Daten reduzieren wollen, schalten Sie ebenfalls die
Limits ab.


=== Weitere Services

Die weiteren Services von AWS werden wie folgt zugeordnet:
// TK: Was wird hier von wem zugeordnet? AWS Webdienste, CMK Services?

[cols="10,~,~"]
|===
| |Service |Zuordnung 

|CE |Costs & Usage |Beim AWS-Host
|EBS |Block Storages |Werden der EC2-Instanz angefügt, sofern diese der Instanz gehören, ansonsten dem AWS-Host
|S3 |Simple Storages |Beim AWS-Host
|RD |Relational Databases |Beim AWS-Host
|===
