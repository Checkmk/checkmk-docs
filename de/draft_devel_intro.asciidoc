// -*- coding: utf-8 -*-
// IGNORE Scriptlets 
include::global_attr.adoc[]
= Erweiterungen für {CMK} entwickeln
:revdate: draft
:title: Erweiterungen für {CMK} entwickeln
:description: Hier erfahren Sie, mit welchen Methoden und Programmiersprachen Sie Erweiterungen für {CMK} entwickeln können.

{related-start}
xref:localchecks#[Lokale Checks]
xref:devel_check_plugins#[Agenten basierte Check-Plugins entwickeln]
xref:draft_devel_check_plugins_snmp#[SNMP basierte Check-Plugins entwickeln]
xref:wato_monitoringagents#[Monitoring-Agenten]
xref:snmp#[Überwachen via SNMP]
xref:wato_services#[Services verstehen und konfigurieren]
xref:cmk_commandline#[{CMK} auf der Kommandozeile]
xref:mkps#[{CMK}-Erweiterungspakete (MKPs)]
{related-end}


[#intro]
== Einleitung

Mit über 2 000 link:https://checkmk.com/de/integrations[mitgelieferten Check-Plugins^] und vielfältigen Methoden für die xref:mk_filestats#[Überwachung von Dateien und Ordnerinhalten,] die xref:ec#[Auswertung von Log-Meldungen] sowie die xref:monitoring_jobs#[Überwachung wiederkehrender Aufgaben] hat {CMK} für eine Fülle von Monitoring-Aufgaben die passende Out-of-the-Box-Lösung.
Und wo es die nicht gibt, hilft die Community gerne mit in der link:https://exchange.checkmk.com/[{CMK} Exchange^] bereitgestellten Eigenentwicklungen.

Dennoch kommt es immer wieder vor, dass eine Hardware zu neu ist, eine Software zu exotisch oder eine firmeninterne Eigenentwicklung zu individuell, als dass schon jemand Bedarf für die Integration in {CMK} gesehen hätte.
Sind Sie an diesem Punkt angelangt, ist es an der Zeit, sich mit der Programmierung eigener Erweiterungen zu befassen.

Dieser Artikel zeigt eine Übersicht der zur Verfügung stehenden Möglichkeiten.

Und die sind vielfältig: 
In manchen Fällen genügt es beispielsweise, ein Backup-Skript um wenige Zeilen zu erweitern, um Erfolg oder Misserfolg in einer gut in {CMK} darstellbaren Form auszugeben – damit ist die „Eigenentwicklung“ mitunter in wenigen Minuten abgeschlossen.
In anderen Fällen werden Sie darauf angewiesen sein, mit umfangreichen Graphen Lastsituationen zu visualisieren – dann lohnt es sich auch, einige Stunden mehr zu investieren.


[#definitions]
=== Begriffe

Wir verwenden in diesem und den hier verlinkten Artikeln die Begriffe _Check_ und _Check-Plugin,_ dabei gilt folgende Unterscheidung:

 * Ein _Check_ ist ein in einer beliebigen Programmiersprache geschriebenes Programm, das alleine ausgeführt werden kann.
Von {CMK} aufgerufen, bestimmen Ausgaben und Rückgabewerte den Status eines Services.
 * Ein _Check-Plugin_ ist in einer festgelegten Programmiersprache – bei {CMK} ist das Python – geschrieben und kann auf Grund der Verwendung von APIs nur im Kontext einer laufenden {CMK}-Instanz ausgeführt werden.


== Erweiterungsmöglichkeiten mit eigenen Programmen

Die folgenden Abschnitte zeigen, welche Verfahren in {CMK} möglich sind, eigene Erweiterungen zu integrieren, und wo dabei jeweils die Datenerhebung und die Auswertung erfolgt.


[#local_checks]
=== Lokale Checks

Die wahrscheinlich einfachste Art und Weise, {CMK} zu erweitern, sind xref:localchecks#[lokale Checks.]
Ein Programm, welches vom Agentenskript des überwachten Hosts ausgeführt wird, gibt in einer Zeile Namen, Zustand und weitere Informationen aus.
Für lokale Checks unterstützt {CMK} die automatische xref:glossar#service_discovery[Service-Erkennung.]
Die Programmierung ist in beliebigen Sprachen möglich, ohne eine API erlernen zu müssen.

* *Ausführung:* Vollständig auf dem überwachten Host. Sie müssen selbst sicherstellen, dass gegebenenfalls auf allen Hosts, die einen lokalen Check erhalten, der passende Interpreter verfügbar ist.
* *Schwellwerte:* Ein Paar von unteren und von oberen Schwellwerten (für die Übergänge nach {WARN} respektive {CRIT}) kann von der {CMK}-Instanz verwaltet werden.
* *Metriken:* Mehrere Metriken pro Service sind möglich. Einheiten können nicht explizit verwaltet werden, diese werden automatisch zugewiesen oder weggelassen.


[#check_plugins_agent]
=== Native agentenbasierte Check-Plugins

Die xref:draft_devel_check_plugins#[agentenbasierten Check-Plugins] werten vom {CMK}-Agenten gelieferte Daten aus.
Ein xref:glossar#agent_plugin[Agentenplugin] sammelt Rohdaten und filtert diese vor, führt aber keine Bewertung der erhobenen Daten durch.
Diese Datensammlung kann in beliebigen Programmiersprachen erfolgen.
Sehr verbreitet ist die Ausgabe als JSON-Datei oder im CSV-Format.
Sie werden aber auch viele Agentenplugins sehen, die nur rohe Linux-Systembefehle aufrufen.

Auf dem {CMK}-Server findet dann die Auswertung durch ein in Python geschriebenes Check-Plugin statt, welches APIs von {CMK} nutzt.
Die Ermittlung des Zustands kann dabei sehr flexibel erfolgen.
So ist die Verwendung unterer und oberer Schwellwerte möglich.
Zudem können mehrere Services erzeugt und der Status eines Services durch mehrere Überprüfungen bestimmt werden.
Des Weiteren ist die Ermittlung von Trends und Einbeziehung älterer Werte möglich.
Native Check-Plugins unterstützen die automatische Erstellung von xref:glossar#label[Labels] und die xref:inventory#[HW/SW-Inventur.]

* *Ausführung:* Agentenplugin zur Datensammlung in beliebiger Programmiersprache auf dem überwachten Host, weitere Auswertung durch Check-Plugin auf dem {CMK}-Server unter Verwendung der Check-API.
* *Schwellwerte:* Beliebige Kombination von Schwellwerten für jeden Service.
* *Metriken:* Beliebig viele Metriken pro Service mit Einheiten.


[#special_agent]
=== Spezialagenten

Eine Erweiterung der agentenbasierten Check-Plugins sind xref:datasource_programs#specialagents[Spezialagenten:]
Hier sammelt kein Agentenplugin die Rohdaten ein, sondern ein Programm, das auf dem {CMK}-Server läuft und Daten aus einer anderen Quelle abfragt und in das Agentenformat von {CMK} umwandelt.
Spezialagenten kommen beispielsweise zum Einsatz, wenn ein zu überwachendes Gerät fürs Monitoring relevante Daten als JSON oder XML über eine REST-API bereitstellt.
Beispiele für den Einsatz von bei {CMK} mitgelieferten Spezialagenten finden Sie in der Überwachung von xref:monitoring_aws#[AWS], xref:monitoring_azure#[Azure] oder xref:monitoring_vmware#[VMware.]

Bei der Programmierung greifen Sie auf zwei APIs zu: Für die Konfiguration von Ports oder ähnlichem stellt {CMK} eine API bereit, die erlaubt, solche Einstellungen im Setup zu bestimmen
Für die Datenabfrage selbst verwenden Sie die REST-API der externen Quelle. 
Die Auswertung auf dem {CMK}-Server erfolgt so, wie im vorherigen Abschnitt zu nativen Check-Plugins beschrieben. 

* *Ausführung:* Programm/Skript zur Datensammlung und weiteren Auswertung auf dem {CMK}-Server.
* *Schwellwerte:* Beliebige Kombination von Schwellwerten für jeden Service.
* *Metriken:* Beliebig viele Metriken pro Service mit Einheiten.


[#check_plugins_snmp]
=== Native SNMP-basierte Check-Plugins

Eine Variante der agentenbasierten Check-Plugins sind die xref:draft_devel_check_plugins_snmp#[Check-Plugins für SNMP.]
Der Unterschied besteht hier darin, dass keine Agentensektion angefordert und ausgewertet wird, sondern bestimmte SNMP-OIDs, die explizit vom SNMP-Agenten angefordert werden.

* *Ausführung:* Datensammlung und weitere Auswertung durch Check-Plugin auf dem {CMK}-Server unter Verwendung der Check-API.
* *Schwellwerte:* Beliebige Kombination von Schwellwerten für jeden Service.
* *Metriken:* Beliebig viele Metriken pro Service mit Einheiten.

Da das SNMP-Protokoll inhärent sehr ineffizient ist, raten wir, SNMP nur dann zu verwenden, wenn kein anderer Zugriff auf die Monitoring-Daten möglich ist.
Stellt ein Gerät beispielsweise dieselben Daten auch über eine REST-API zur Verfügung, sollten Sie dafür einen Spezialagenten bauen.


[#check_plugins_nagios]
=== Legacy-Nagios-Check-Plugins

An zwei Stellen in {CMK} finden Sie Nagios-Check-Plugins:
Als xref:active_checks#[aktive Checks,] um vom {CMK}-Server aus die Erreichbarkeit bestimmter Services zu prüfen.
Und als xref:active_checks#mrpe[MRPE-Erweiterung] der xref:agent_windows#mrpe[Windows-] oder xref:agent_linux#mrpe[Linux-]Agenten, um solche Services von einem Host aus prüfen zu lassen - falls sie vom {CMK}-Server nicht erreichbar sind.

Die Programmierung ist in beliebigen Sprachen möglich.

* *Ausführung:* Vollständig auf dem überwachten Host (via MRPE) oder vollständig auf dem {CMK}-Server (aktiver Check).
* *Schwellwerte:* Schwellwerte nur bei Verwendung als aktive Checks.
* *Metriken:* Metriken nur bei Verwendung als aktive Checks.

Wegen diverser Nachteile wie umständlicher Fehlersuche empfehlen wir die Neuimplementierung nur, wenn vollumfängliche Kompatibilität zu Nagios erforderlich ist.
Verwenden Sie in allen anderen Fällen native Check-Plugins oder – bei einfachen Überprüfungen – lokale Checks.
Eine ausführliche Dokumentation der Ausgabeformate finden Sie auf link:https://www.monitoring-plugins.org/[Monitoring-Plugins.org^].


[#further_readings]
== Ergänzende Artikel

[#spool_directory]
=== Das Spool-Verzeichnis

{CMK} stellt noch einen weiteren Mechanismus bereit, wie Agentendaten erzeugt werden können:
Lassen Sie ein Programm direkt eine Textdatei im {CMK}-Agentenformat schreiben.
Im xref:spool_directory#[Spool-Verzeichnis] abgelegt überträgt der {CMK}-Agent den Inhalt dieser Datei mit der restlichen Agentenausgabe.

Mit dem Spool-Verzeichnis können Sie beispielsweise Backup-Skripte direkt bei Beendigung Status und Statistik für einen lokalen Check oder ein Check-Plugin schreiben lassen.
Dies erspart Umwege über die Auswertung von Log-Dateien.

Bei der Entwicklung eigener Check-Plugins helfen Spool-Dateien, bestimmte Ausgaben Ihres Agentenplugins zu simulieren.


[#piggyback]
=== Der Piggyback-Mechanismus

Der xref:glossar#piggyback[Piggyback]-Mechanismus kommt dann zum Einsatz, wenn ein Host etwas über einen anderen weiß.
Eine speziell formatierte Agentensektion wird dann beim Auswerten der Agentenausgabe dem betreffenden Host zugeordnet.

Bei virtuellen Maschinen wird der Piggyback-Mechanismus genutzt, um von der Virtualisierungssoftware erhobene Daten mit den Daten aus dem Monitoring von innerhalb der virtuellen Maschine zusammenzuführen.


[#mkps]
=== {CMK}-Erweiterungspakete (MKPs)

Wenn Sie eigene Erweiterungen programmiert haben und diese versionieren und schließlich weitergeben wollen, haben Sie die Möglichkeit, zusammengehörige Dateien in xref:mkps#[{CMK}-Erweiterungspaketen (MKPs)] zu bündeln.
Dieses Paketformat müssen Sie auch nutzen, wenn Sie diese Erweiterungen in der link:https://exchange.checkmk.com/[{CMK} Exchange^] anbieten wollen.


[#bakery_api]
=== Die Bakery-API

In vielen Fällen werden Sie Agentenplugins mit zusätzlicher Konfiguration versehen wollen.
Oder Sie möchten in Abhängigkeit von im Setup von {CMK} vorgenommenen Einstellungen bestimmte _Installations-Scriptlets_ ausführen lassen.

Wenn Sie für die Verteilung von Agentenpaketen die xref:glossar#agent_bakery[Agentenbäckerei] verwenden, steht Ihnen mit der xref:bakery_api#[Bakery-API] eine Programmierschnittstelle zur Verfügung, mit der in {CMK} vorgenommene Einstellungen einfach den Weg auf überwachte Hosts finden.  


[#contribute]
== Zu {CMK} beitragen

Wenn Sie selbst Erweiterungen programmieren, raten wir zunächst dazu, diese in link:https://exchange.checkmk.com/[die Exchange^] einzureichen.
Hier bleiben Sie Eigentümer und Ansprechpartner und Sie können unkompliziert neue Versionen bereitstellen.
Da die Anforderungen an die Code-Qualität für die Exchange nicht so hoch sind wie für mit {CMK} ausgelieferte Check-Plugins, können Sie via Exchange neue Ideen unkompliziert mit einem breiten Publikum ausprobieren.

Sollten Sie irgendwann zum Entschluss kommen, dass Ihr Check-Plugin fester Bestandteil von {CMK} werden soll, lesen Sie zunächst link:https://github.com/Checkmk/checkmk/blob/master/CONTRIBUTING.md[Contributing to {CMK}^].
