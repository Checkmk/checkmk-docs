// -*- coding: utf-8 -*-
// IGNORE Benachrichtigungs Elter Pre
include::global_attr.adoc[]
= Feature-Übersicht
:revdate: draft
:title: Feature-Unterschiede der {CMK}-Editionen
:description: Die unterschiedlichen {CMK}-Editionen bieten einen unterschiedlichen Feature-Umfang, dieser Artikel bietet einen Überblick 

{related-start}
{related-end}

////
TK:
- Dieser Artikel ist der noch fehlende zur Standard Edition! Ich würde ihn auch so betiteln und nicht um die CCE erweitern, denn dafür haben wir ja einen eigenen Artikel.
Daher würde ich auch im Text generell {EE} durch {SE} ersetzen.
Was dann nur noch fehlt ist der Artikel für die CRE.
Alle Editions-Artikel sollten in der Struktur harmonisiert werden.
Wenn Du aber Deinen Ansatz weiterverfolgen willst, dann würde ich ihn "Die Editionen" oder "Die Editionen im Überblick" benennen statt "Feature-Übersicht"
- Komponenten: Puh, schwierig. Insbesondere, wenn man die Ablage "Sonstiges" vermeiden will.
Alternativer Vorschlag: Halte Dich nach dem Monitoring-Kern (most important!) ziemlich stumpf an unsere TOC-Struktur. 
- Tabellen: Ich würde in Spalte 1 nur die allgemeine Funktion benennen (Monitoring-Kern statt CMC, Berichte statt Vorgefertigte Berichte) und dann in Spalte 2 den Unterschied beschreiben.
- Generell sollten die Links tiefer in die Artikel gehen, in den Abschnitt, wo die CEE-Spezifika benannt werden.
- Bei der Beschreibung nutzt Du des öfteren den Komperativ ("effizientere und flexiblere") ohne dass die CRE als Basis erwähnt wird. Das liest sich, als ob was fehlt ("Phantomleseschmerz").
- Sonst hab ich ziemlich wild im Text rumgeschrieben. Hoffe, Du erkennst noch was wieder ;-)
- Bei der Gelegenheit: Das TOC-Kapitel "Besonderheiten in den Editionen" sollte in "Die Editionen" umbenannt werden, nach oben rutschen und hinter "Willkommen bei Checkmk" einsortiert werden.
////


== Einleitung

// FIXME: Links hinzufügen
Die verschiedenen Editionen von {CMK} bieten einen unterschiedlichen Feature-Umfang.
// TK: Feature-Umfang > Funktionsumfang?
Dieser Artikel versucht, einen vollständigen Überblick auf technischer Ebene zu geben, der Ihnen als Entscheidungshilfe bei der Wahl der eingesetzten Edition dienen kann.
// TK: Vielleicht so (das spart auch den Marketing/Pre-Sales-Satz darunter:
// Ergänzend zum link:https://checkmk.com/de/produkt/editionen[Editionsvergleich^] auf unserer Website versucht dieser Artikel... )
Daneben soll er helfen, beim xref:update#[Wechsel der Edition] – egal, ob Up- oder Downgrade – abzuschätzen, welche Einstellungsänderungen notwendig oder sinnvoll ist.
// TK: beim? vor dem

Diese Übersicht kann und soll kein Marketing- oder Pre-Sales-Material ersetzen.
// TK: Der Satz kann dann weg.

Die Gliederung nach Komponenten mag in erster Linie Nutzer von {CMK} und verwandten Monitoring-Systemen ansprechen, welche bereits Kenntnisse des Systemaufbaus haben.
Wir versuchen dennoch, durch Links zur Dokumentation der benannten Komponente einen schnellen Überblick über ihren Scope zu gewähren.
// TK: Der 2. Satz überzeugt mich nicht ("versuchen dennoch"). Dass wir hilfreiche Links anbieten, ist man doch von uns gewohnt ;-)

Zunächst enthält diese Seite nur Unterschiede zwischen {RE} und {SE}.
Unterschiede zwischen {SE} und {CE} werden zu gegebener Zeit nachgetragen.
// TK: Notwendig? Siehe mein allgemeines Gesülze oben.


== Unterschiede der Komponenten

[#core]
=== Monitoring-Kern

Dieser Abschnitt behandelt Unterschiede am Monitoring-Kern und der Übertragung von Monitoring-Daten in verteilten Umgebungen.
Nutzer, die von Nagios-Umgebungen zu {CMK} migrieren, sollten die Dokumentation zum xref:cmc#[{CMK} Micro Core] und den xref:cmc_differences#[Besonderheiten des CMC] aufmerksam lesen, um zu beurteilen, ob es für eine Übergangszeit sinnvoll sein kann, {CMK} mit dem Nagios-Kern zu betreiben.

////
cmc.asciidoc			Checkmk Micro Core
cmc_differences.asciidoc	grafische Darstellung der Daten durch die GUI von CMK <- ist PNP4Nagios noch aktuell?
cmc_migration.asciidoc		Alert handler nur in EE
analyze_configuration.asciidoc	Performance/Checkmk Hilfsprozesse <- erst einmal unterschlagen
distributed_monitoring.asciidoc	In EE automatische Synchronisierung von Inventardaten
distributed_monitoring.asciidoc Livestatus-Proxy
distributed_monitoring.asciidoc CMCDump
graphing.asciidoc		RRD-Speicherformat
livestatus.asciidoc		Unterschiedlicher Umfang der Kommandos
livestatus_references.asciidoc	CEE only Kommandos
wato_rules.asciidoc		Smart Ping nur in EE
////

[cols="20,~",options="header"]
|===
|Funktion |Ergänzende Informationen
|CMC |Die {EE} verwenden standardmäßig den xref:cmc#[{CMK} Micro Core], welcher durch Reduzierung auf die wesentliche Funktionalität performanter als andere Monitoring-Kerne ist.
|Alert Handler |Der CMC unterstützt keine _Nagios Event Handler_, bietet dafür aber flexiblere xref:alert_handlers#[Alert Handler].
|Smart Ping |Der xref:cmc_differences#smartping[Smart Ping] gewährleistet eine effizienter und schneller Erkennung, ob Hosts erreichbar sind.
|CMCDump |Diese Übertragungstechnik vereinfacht xref:distributed_monitoring#livedump[verteiltes Monitoring] in Umgebungen mit unzuverlässiger Netzwerkanbindung. In Umgebungen mit Nagios-Kern steht stattdessen Livedump zur Verfügung.
|Livestatus-Proxy | Der xref:distributed_monitoring#livestatusproxy[Livestatus-Proxy] optimiert im verteilten Monitoring Performance und Latenzen. 
|RRD-Speicherformat |Bei Verwendung des CMC nutzt {CMK} ein auf Einsparung von Disk-I/O xref:cmc_differences#metrics[optimiertes Speicherformat] der Round Robin Databases (RRD).
|===

[#ui]
=== Monitoring-Oberfläche, Graphing, Dashboards

////
availability.asciidoc		PDF Export
basics_ackn.asciidoc		Expire acknowledgement after
basics_downtimes.asciidoc	Kommandos eine oder mehrere Downtimes entfernen/ändern
basics_downtimes.asciidoc	automatisch periodisch wiederholenden Wartungszeiten
dashboards.asciidoc		Einige der Dashlets gibt es exklusiv in den EE
dashboards.asciidoc		Anderes Default-Dashboard
graphing.asciidoc		PDF-Export, Graphensammlungen, benutzerdefinierte Graphen
graphing.asciidoc		einbetten in Berichte oder Dashboards, Graphensammlung
graphing.asciidoc		Graph Tunings
graphing.asciidoc		Custom Graphs
intro_extend.asciidoc		SLA Software-Modul nur in EE
intro_finetune.asciidoc		Wartungszeiten
intro_finetune.asciidoc		Recurring downtimes
monitoring_basics.asciidoc	Statuswechsel, Verhalten bei Parent/Child wenn UNREACH
monitoring_kubernetes.asciidoc	Kubernetes Dashboards
monitoring_kubernetes.asciidoc	Cluster Dashboards
reporting.asciidoc		Vorgefertigte Berichte
sla.asciidoc			SLA Software-Modul nur in EE
views.asciidoc			This view as PDF
////

[cols="20,~",options="header"]
|===
|Funktion |Ergänzende Informationen
|Standard-Dashboard |Die {EE} verwenden als Standard ein xref:dashboards#usage[Dashboard], welches in der {RE} nicht verfügbar ist. Diese nutzt stattdessen das Problem-Dashboard.
// TK: Link geändert
|Messwerte und Graphing |Erweiterte xref:graphing#[Funktionen des Graphings] stehen ausschließlich in den {EE} zur Verfügung. Dazu gehören: Umfang der Dashlets, PDF-Export, Graphensammlungen, Anpassungen (_graph tunings_), Einbettung in Berichte oder Dashboards und benutzerdefinierte Graphen.
|Kubernetes-Dashboards |Die xref:monitoring_kubernetes#[Kubernetes- und Cluster-Dashboards] sind den {EE} vorbehalten.
// TK: Was meinst Du mit Cluster-Dashboards? In monitoring_kubernetes sollte ein Anker für 5.1. Kubernetes-Dashboards angelegt werden.
|Wartungszeiten (_scheduled downtimes_) |Nur in den {EE} können regelmäßig wiederkehrende xref:intro_finetune#[Wartungszeiten] festgelegt werden.
|Wartungszeiten (_scheduled downtimes_) |In den {EE} ist über _Kommandos_ eine komfortable xref:intro_finetune#[Änderung oder Entfernung einer oder mehrerer Wartungszeiten] möglich.
// TK: Das ganze Thema Wartungszeiten ist bei uns viel zu oft und dann auch noch unübersichtlich beschrieben (ich habs jedenfalls nicht verstanden). Die beiden Zeilen sollten zusammengefasst werden. Die Links sollten nach basics_downtimes gehen.
|Parent Child Topology | Mit dem CMC kann {CMK} in Umgebungen mit Elter-Kind-Topologie präziser xref:monitoring_basics#parents[den Zustand von Kind Hosts] ermitteln.
// TK: Wording ist nicht so dolle. Das Thema gehört doch zum CMC?
|PDF-Export der Verfügbarkeit |In den {EE} können xref:availability#[Verfügbarkeitsdaten] auch als PDF exportiert werden.
|PDF-Export von Ansichten |Der direkte PDF-Export von xref:views#[Ansichten] im Monitoring ist den {EE} vorbehalten.
|Vorgefertigte Berichte |In den {EE} erleichtern xref:reporting#[vorgefertigte Berichte] das Reporting.
// TK: Ich meine, dass es das *komplette* Reporting nicht in der CRE gibt.
|Service Level Agreements |Die nur in den {EE} enthaltenen xref:sla#[Service Level Agreements] erleichtern die Kontrolle von vertraglichen Vereinbarungen betreffend der Verfügbarkeit von Diensten.
// TK: Erweiterte Verfügbarkeiten (SLAs) statt Service Level Agreements?
| Quittierung mit Gültigkeitsdauer | Die xref:basics_ackn#[Quittierung von Problemen] kann in den {EE} mit einer maximalen Gültigkeitsdauer versehen werden.
|===

[#notifications]
=== Benachrichtigungen

////
s.o. notifications.asciidoc		Statuswechsel, Verhalten bei Parent/Child wenn UNREACH
notifications.asciidoc		Tuning of flap detection
notifications.asciidoc		Benachrichtigungs-Spooler
notifications.asciidoc		Asynchrone Zustellung durch Benachrichtigungs-Spooler
notifications.asciidoc		nachvollziehbaren Zustellung per SMTP
notifications.asciidoc		Zentrale Benachrichtigungen
s.o. notifications.asciidoc		Alert Handler
distributed_monitoring.asciidoc	Zentrale Benachrichtigungen
////

[cols="20,~",options="header"]
|===
|Funktion |Ergänzende Informationen
|Unstetigkeitserkennung (_flap detection_) |In den {EE} ist eine xref:notifications#flapping[Feineinstellung der Unstetigkeitserkennung] möglich für Services, die längere Zeit um Schwellwerte pendeln.
// TK: Unstetigkeitserkennung gehört nicht zu Benachrichtigungen
|Benachrichtigungs-Spooler (_notification spooler_) | Die {EE} enthalten mit dem xref:notifications#async[Benachrichtigungs-Spooler] eine Komponente, welche die effizientere und flexiblere Zustellung von Benachrichtigungen erlaubt.
|Nachvollziehbare Zustellung |Über xref:notifications#syncsmtp[Smarthost-Einstellungen] kann in den {EE} zuverlässiger sichergestellt werden, dass Benachrichtigungen ankommen als mit einer reinen Übergabe an das lokale Mailsystem der {RE}.
|Zentrale Benachrichtigungen | Im verteilten Monitoring kann der Benachrichtigungs-Spooler der {EE} so konfiguriert werden, dass er xref:distributed_monitoring#notifications[Benachrichtigungen von den Remote-Instanzen für alle Ziele] verschickt.
|===

[#agents]
=== Monitoring-Agenten, Verteilung und Registrierung
// TK: Warum hier Registrierung?

////
agent_deployment.asciidoc	Bakery
agent_deployment.asciidoc	Agent Updater
agent_linux.asciidoc		Bakery
agent_linux_legacy.asciidoc	Bakery
agent_windows.asciidoc		Bakery
bakery_api.asciidoc		Bakery
cmk_commandline.asciidoc	Bakery
snmp.asciidoc			Eigene SNMP-Engine statt snmpget/snmpbulkwalk
wato_monitoringagents.asciidoc	Unterscheidung Checkmk-Fetcher vs. Nagios
////

[cols="20,~",options="header"]
|===
|Funktion |Ergänzende Informationen
|Agentenbäckerei (_Agent Bakery_) |Die {EE} verfügen mit der xref:wato_monitoringagents#bakery[Agentenbäckerei] über einen Mechanismus, automatisch individuelle Agentenpakete mit Plugins und Konfigurationsdateien zu erstellen. Einstellungen der Agenten-Konfiguration können mit der xref:bakery_api#[Bakery-API] in der Setup-GUI vorgenommen werden.
|Agenten-Update |Die xref:agent_deployment#[automatische Aktualisierung] von Agentenpaketen nach Konfigurationsänderungen ist nur in den {EE} möglich.
|SNMP-Monitoring |Dank einer eigenen xref:snmp#[SNMP-Engine] sind die {EE} performanter als die {RE} mit der Nutzung von `snmpget`/`snmpbulkwalk`.
// TK: Ach was? Hab ich ja noch nie davon gehört.
|{CMK}-Fetcher |In den {EE} sorgen die {CMK}-Fetcher für effizientes xref:wato_monitoringagents#[Einholen der Monitoring-Daten.]
|===

[#connectors]
=== Anbindungen

////
saml_new.asciidoc		SAML Konfiguration via Setup GUI
grafana.asciidoc		Filterkaskaden
metrics_exporter.asciidoc	Anbindung an externe Metrik-Datenbanken (Influx, Graphite)
graphing.asciidoc		Anbindung an externe Metrik-Datenbanken (Influx, Graphite)
notifications_jira.asciidoc	Nur in EE
notifications_servicenow.asciidoc Nur in EE
////

[cols="20,~",options="header"]
|===
|Funktion |Ergänzende Informationen
// FIXME: Link hinzufügen.
|SAML |Seit {CMK} {v22} können die {EE} nativ gegen SAML authentifizieren, bis {v21} und weiterhin in der {RE} ist dies nur auf xref:saml#[Apache-Ebene] möglich.
|Grafana |Das xref:grafana#[Grafana-Plugin] erlaubt bei Nutzung mit den {EE} Filterkaskaden.
|InfluxDB und Graphite |Nur die {EE} liefern eine Schnittstelle zur Anbindung an xref:metrics_exporter#[externe Metrik-Datenbanken] mit.
|Jira | Das xref:notifications_jira#[Benachrichtigungsmodul für Jira] ist den {EE} vorbehalten.
|ServiceNow | Das xref:notifications_servicenow#[Benachrichtigungsmodul für ServiceNow] gibt es nur in den {EE}.
|===

[#other]
=== Sonstiges

////
dcd.asciidoc			Nur in EE
monitoring_docker.asciidoc	DCD
monitoring_gcp.asciidoc		DCD
inventory.asciidoc		HW/SW-Inventur in verteilten Umgebungen
mkps.asciidoc			MKPs über die GUI verwalten
predictive_monitoring.asciidoc	Nur in EE
////

[cols="20,~",options="header"]
|===
|Funktion |Ergänzende Informationen
|DCD |Die dynamische Host-Konfiguration mit dem xref:dcd#[Distributed Configuration Daemon] ermöglicht die automatische Erstellung von Hosts und erleichtert damit die Überwachung von xref:monitoring_docker#[Docker] und der Cloud wie zum Beispiel xref:monitoring_aws#[Amazon Web Services (AWS)] oder xref:monitoring_gcp#[Google Cloud Platform (GCP).]
// TK: Auf Cloud verallgemeinert
|Verteilte HW/SW-Inventur |Die automatische Synchronisierung von Inventardaten im xref:distributed_monitoring#[verteilten Monitoring] macht Inventardaten zentral verfügbar.
// TK: Ist das nicht eine Anwendung des Livestatus-Proxys?
|MKP-Verwaltung |Die Verwaltung von xref:mkps#[{CMK}-Erweiterungspaketen] ist in der {RE} nur auf der Kommandozeile möglich, in den {EE} zusätzlich über die Setup-GUI.
|Prognosebasiertes Monitoring (_predictive monitoring_) |Auf Basis der ermittelten Werte über einen längeren Zeitraum kann in den {EE} ein xref:predictive_monitoring#[prognosebasiertes Monitoring] mit dynamischen Schwellwerten genutzt werden.
|REST-API |Für Funktionen, die es nur in den {EE} gibt, wie z.B. Service Level Agreement (SLA) oder Agentenbäckerei, werden die zugehörigen Methoden der xref:rest_api#[REST-API] auch nur in diesen Editionen angeboten.
|===
