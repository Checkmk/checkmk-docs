// -*- coding: utf-8 -*-
include::global_attr.adoc[]


[#install]
== Installation

{CMK} bietet Ihnen für die Installation des Linux-Agenten verschiedene Wege -- von der manuellen Installation des Software-Pakets bis hin zum vollautomatischen Deployment inklusive Updatefunktion.
Manche davon stehen nur in den {EE} zur Verfügung:

[cols="40,50,~,~",options="header"]
|===
|Methode |Beschreibung |CRE |CEE
|Mitgeliefertes RPM/DEB-Paket |Einfache Installation eines Standard-Agenten mit manueller Konfiguration über Konfigurationsdateien. 
Die Installationsroutine überprüft und konfiguriert in allen Editionen `systemd` und `xinetd` -- in dieser Reihenfolge. |X |X
|RPM/DEB-Paket aus der xref:glossar#agent_bakery[Agentenbäckerei] |Konfiguration über die GUI, individuelle Konfiguration pro Host möglich. | |X
|xref:agent_deployment#[Automatisches Updaten] |Das Paket aus der Agentenbäckerei wird erstmalig von Hand oder per Skript installiert und von da an automatisch aktualisiert. | |X
|===


[#prerequisites]
=== Voraussetzungen

Damit die Installation des Agent Controllers klappt, setzt dies eine Linux-Distribution mit `systemd` voraus, präziser `systemd` in einer Version 220 oder neuer.

Die Chance ist groß, dass diese Voraussetzung auf Ihrem Host erfüllt ist, da seit 2015 die meisten Linux-Distributionen `systemd` als init-System übernommen und damit andere init-Systeme wie SysVinit ersetzt haben, z.B. SUSE Linux Enterprise Server ab Version 12, openSUSE ab Version 12.1, Red Hat Enterprise Linux ab Version 7, Fedora ab Version 15, Debian ab Version 8 und Ubuntu ab Version 15.04.
Leider bringt der Vergleich der Versionsnummer alleine keine Gewissheit, da `systemd` auch auf einem aktuellen Linux-System fehlen kann, wenn dieses Jahre lang „nur“ aktualisiert wurde.

Prüfen Sie daher auf dem Host, auf dem der Agent installiert werden soll, ob und in welcher Version `systemd` läuft:  

[{shell-raw}]
----
{c-root} systemctl --version
systemd 245 (245.4-4ubuntu3.15)
----

Falls `systemd` in der richtigen Version installiert ist und läuft, wie es die obige Kommandoausgabe zeigt, installieren Sie das Agentenpaket und führen anschließend die xref:registration[Registrierung] durch, um mit dem Agenten im Pull-Modus zu arbeiten.

Falls `systemd` nicht, oder nur in einer zu alten Version läuft, so können Sie den Agenten trotzdem installieren, wie im Rest dieses Kapitels beschrieben, und ihn dann im Legacy-Modus nutzen.
Lesen Sie in diesem Fall trotzdem zuerst das xref:agent_linux_legacy#install[Installationskapitel] im Artikel für den Linux-Agenten im Legacy-Modus, da dieser Modus einen Superserver wie `xinetd` zur Portüberwachung und zum Start des Agentenskripts voraussetzt.
Die Überprüfung und gegebenenfalls Installation eines Superservers wie `xinetd` sollte vor der Installation des Agenten erfolgen.


[#download]
=== Download des RPM/DEB-Pakets

Sie installieren den Linux-Agenten durch Installation des RPM- oder des DEB-Pakets.
Ob Sie RPM oder DEB benötigen, hängt von der Linux-Distribution ab, auf der Sie das Paket installieren möchten:

[cols="10,10,~",options="header"]
|===
|Paket |Endung |Installation auf
|RPM |`.rpm` |Red Hat Enterprise Linux, Fedora, CentOS, openSUSE, SLES, Derivate davon
|DEB |`.deb` |Debian, Ubuntu, alle anderen DEB-basierten Distributionen
|===

Vor der Installation müssen Sie das Paket holen und auf den Host bringen (zum Beispiel mit `scp` oder WinSCP), auf dem der Agent laufen soll.
 

[#download_gui]
==== Paket per {CMK}-GUI holen

In der {CRE} finden Sie die Linux-Pakete des Agenten über [.guihint]#Setup > Agents > Linux#.
In den {CEE} gelangen Sie im [.guihint]#Setup#-Menü über [.guihint]#Agents > Windows, Linux, Solaris, AIX# zunächst in die xref:wato_monitoringagents#bakery[Agentenbäckerei], wo Sie die gebackenen Pakete finden.
Von dort aus kommen Sie mit dem Menüeintrag [.guihint]#Related > Linux, Solaris, AIX files# zur Liste der Agentendateien:

.Auf der Download-Seite finden Sie die RPM- und DEB-Pakete
image::agent_linux_agent_files.png[alt="Download-Seite mit den RPM/DEB-Paketen."]

Alles was Sie brauchen, finden Sie gleich im ersten Kasten mit dem Namen [.guihint]#Packaged Agents#:
die fertigen RPM- und DEB-Pakete für die Installation des Linux-Agenten mit Standardeinstellungen.


==== Paket per HTTP holen

Manchmal ist der Download auf einen Rechner und das anschließende Kopieren auf den Zielrechner mit `scp` oder WinSCP sehr umständlich.
Sie können das Paket vom {CMK}-Server auch direkt per HTTP auf das Zielsystem laden.
Für diesen Zweck sind die Downloads der Agentendateien bewusst _ohne Anmeldung_ möglich.
Immerhin enthalten die Dateien keine Geheimnisse.
Jeder kann sich {CMK} selbst herunterladen und installieren und so auf die Dateien zugreifen.

Am einfachsten geht das mit `wget`.
Die URL können Sie über den Browser ermitteln.
Wenn Sie den Namen des Pakets bereits kennen, können Sie die URL einfach selbst zusammensetzen.
Setzen Sie `/mysite/check_mk/agents/` vor den Dateinamen, im folgenden Beispiel für das RPM-Paket:

[{shell-raw}]
----
{c-root} wget http://mycmkserver/mysite/check_mk/agents/check-mk-agent-2.1.0b1-1.noarch.rpm
----

*Tipp:* RPM hat sogar ein eingebautes `wget`.
Hier können Sie Download und xref:install_paket[Installation] mit einem Kommando durchführen:

[{shell-raw}]
----
{c-root} rpm -U http://mycmkserver/mysite/check_mk/agents/check-mk-agent-2.1.0b1-1.noarch.rpm
----


==== Paket per REST-API holen

// TK: REST-API geht seit {v20}p18
Die xref:rest_api#[REST-API] von {CMK} bietet die folgenden Möglichkeiten Agentenpakete vom {CMK}-Server herunterzuladen:

* Herunterladen des mitgelieferten Agenten.
* Herunterladen eines gebackenen Agenten nach Host-Name und Betriebssystem.
* Herunterladen eines gebackenen Agenten nach Hash des Agenten und Betriebssystems.

Auch per REST-API haben Sie die Möglichkeit, das Paket vom {CMK}-Server direkt auf den Zielrechner zu holen.
Das mitgelieferte DEB-Paket des Linux-Agenten lässt sich beispielsweise mit dem folgenden `curl`-Kommando holen:

// TK: URL checken wg. REST API-Version
[{shell}]
----
{c-root} curl -OJG "http://mycmkserver/mysite/check_mk/api/1.0/domain-types/agent/actions/download/invoke" \
--header 'Accept: application/octet-stream' \
--header 'Authorization: Bearer automation myautomationsecret' \
--data-urlencode 'os_type=linux_deb'
----

Hierbei handelt es sich nur um ein einfaches Beispiel, um die Funktionsweise dieses einen REST-API-Endpunkts zum Herunterladen des Agenten zu demonstrieren.
Details zu diesem und anderen REST-API-Endpunkten finden Sie in der API-Dokumentation, die Sie in {CMK} über [.guihint]#Help > Developer resources > REST API documentation# aufrufen können.


[#install_paket]
=== Paket installieren

Nachdem Sie das RPM- oder das DEB-Paket geholt und -- falls nötig -- mit `scp`, WinSCP oder anderen Mitteln auf den zu überwachenden Host kopiert haben, ist die Installation mit einem Kommando erledigt.

Die Installation des RPM-Pakets erfolgt unter `root` mit dem Befehl `rpm -U`:

[{shell}]
----
{c-root} rpm -U check-mk-agent-2.1.0b1-1.noarch.rpm
----

Die Option `-U` steht übrigens für „Update“, kann aber auch eine Erstinstallation korrekt durchführen.
Das bedeutet auch, dass Sie mit diesem Befehl einen bereits installierten Agenten auf die aktuelle Version updaten können -- und ihn auch zukünftig für Updates des Agentenpakets nutzen können.

Die Installation des DEB-Pakets -- und ein Update -- erfolgt unter `root` mit dem Befehl `dpkg -i`:

[{shell}]
----
{c-root} dpkg -i check-mk-agent_2.1.0b1-1_all.deb
(Reading database ... 739920 files and directories currently installed.)
Preparing to unpack .../check-mk-agent_2.1.0b5-1_all.deb ...
Unpacking check-mk-agent (2.1.0b5-1) ...
Setting up check-mk-agent (2.1.0b5-1) ...

Deploying systemd units: check-mk-agent.socket check-mk-agent-async.service cmk-agent-ctl-daemon.service check-mk-agent@.service
Deployed systemd
Creating/updating cmk-agent user account ...

WARNING: The agent controller is operating in an insecure mode! To secure the connection run `cmk-agent-ctl register`.

Reloading xinetd
Activating systemd unit 'check-mk-agent.socket'...
Created symlink /etc/systemd/system/sockets.target.wants/check-mk-agent.socket → /lib/systemd/system/check-mk-agent.socket.
Activating systemd unit 'check-mk-agent-async.service'...
Created symlink /etc/systemd/system/multi-user.target.wants/check-mk-agent-async.service → /lib/systemd/system/check-mk-agent-async.service.
Activating systemd unit 'cmk-agent-ctl-daemon.service'...
Created symlink /etc/systemd/system/multi-user.target.wants/cmk-agent-ctl-daemon.service → /lib/systemd/system/cmk-agent-ctl-daemon.service.
----

Hier wurde das Paket auf einem zuvor agentenlosen Host erstmalig installiert.
Der Benutzer `cmk-agent` wurde erstellt und `systemd` konfiguriert.
Auf die dazwischen angezeigte Warnung zum `insecure mode`, also dem Legacy-Pull-Modus, gehen wir xref:post_install[gleich] ein.


=== Installation mit der Agentenbäckerei

{cee-only}
Die {CEE} verfügen mit der xref:wato_monitoringagents#bakery[Agentenbäckerei] über ein Software-Modul zum automatischen Paketieren von individuell angepassten Agenten.
Eine ausführliche Beschreibung dazu finden Sie im allgemeinen Kapitel über die xref:wato_monitoringagents#[Agenten].
Die Installation der gebackenen Pakete geschieht genauso wie es für die mitgelieferten Pakete xref:install_paket[oben] beschrieben ist.


=== Automatisches Update
{cee-only}
Wenn Sie die Agentenbäckerei verwenden, können Sie automatische Updates des Agenten einrichten.
Diese werden in einem xref:agent_deployment#[eigenen Artikel] beschrieben.


[#post_install]
=== Wie geht es weiter nach der Installation?

Falls der Agent Controller bei der Installation mit `systemd` eingerichtet werden konnte, ist der nächste Schritt die xref:registration[Registrierung], mit der die TLS-Verschlüsselung eingerichtet wird, so dass die verschlüsselte Agentenausgabe vom {CMK}-Server entschlüsselt und im Monitoring angezeigt werden kann.

Eine Besonderheit gibt es, falls der Agent mit Agent Controller erstmalig installiert wurde.
Dann schaltet der Agent in den unverschlüsselten *Legacy-Pull-Modus*, damit der {CMK}-Server nicht von den Monitoring-Daten abgeschnitten wird und diese weiterhin anzeigen kann.
Das betrifft sowohl eine Neuinstallation als auch das Update eines Agenten bis zur {v20}.

Einen Hinweis auf den aktivierten Legacy-Pull-Modus erhalten Sie bereits bei der xref:install_paket[Installation des Agenten.]
Im Monitoring sieht das dann etwa so aus:

.Warnung im {CMK}-Monitoring, dass TLS noch nicht genutzt wird
image::agent_linux_service_legacy_pull_mode.png[alt="Der WARN-Zustand des 'Check_MK' Services wegen fehlender Verschlüsselung."]

Die {CMK}-Instanz erkennt an der Agentenausgabe, dass der Agent Controller vorhanden und damit die TLS-Verschlüsselung möglich ist -- aber noch nicht eingeschaltet ist.
Der Service [.guihint]#Check_MK Agent# wechselt in den Zustand {WARN} und bleibt es solange, bis Sie die Registrierung nach dem Update des Agenten durchgeführt haben.
Nach der Registrierung wird nur noch im verschlüsselten Pull-Modus kommuniziert.
Der Legacy-Pull-Modus wird abgeschaltet und bleibt es auch.

Anders liegt der Fall, wenn der Agent Controller sich während der Installation nicht als Daemon bei `systemd` registrieren konnte.
Dann ist die Registrierung nicht möglich und der einzige Kommunikationsweg verbleibt der *Legacy-Modus*.
// TK: Die mögliche Konfiguration von systemd als Superserver hab ich weggelassen (wenn systemd da ist, aber cmk-agent-ctl --version nicht ausführbar ist) 
Für den Legacy-Modus versucht die Installationsroutine einen Superserver wie `xinetd` zur Portüberwachung und zum Start des Agentenskripts zu konfigurieren.
Lesen Sie in diesem Fall im Artikel xref:agent_linux_legacy#[Linux überwachen im Legacy-Modus] weiter.
