// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= Ansichten von Hosts und Services (Views)
:revdate: 2021-06-24
:title: Ansichten von Hosts und Services (Views)
:description: Ansichten sind in {CMK} sehr mächtig und können indiviuell erstellt oder angepasst werden. Wie Sie Ansichten effektiv nutzen, erfahren Sie hier.

{related-start}
xref:user_interface[Die Benutzeroberfläche]
xref:dashboards[Dashboards]
xref:graphing[Messwerte und Graphing]
{related-end}

// TK: Laut Tribe29-Wörterbuch soll jetzt Tabellenansicht verwendet werden (wollte Lars unbedingt so). Daher bitte auch so einführen (auch im Header). Ansicht geht meiner Meinung nach auch noch. View solltest Du in der Einleitung einführen, aber sonst im deutschen nicht als Synonym für Tabellenansicht/Ansicht verwenden. Das geht natürlich weit über den Scope der aktuellen Überarbeitung hinaus. Wenn also zu viel, dann bitte zumindest den Kommentar als Merker drinlassen.
// ML: Da View und Ansicht 248 mal vorkommen, lasse ich das zunächst aus.



== Einleitung

Die wichtigste Aufgabe der xref:user_interface#[Benutzeroberfläche] von {CMK} ist das
Anzeigen des aktuellen Status von Hosts und Services. Dies geschieht
größtenteils in tabellarischen [.guihint]#Ansichten#, welche in der englischen
Oberfläche mit [.guihint]#Views# bezeichnet werden.  Damit das tägliche Arbeiten mit
{CMK} so effizient wie möglich abläuft, bieten diese Tabellenansichten
zahlreiche nützliche Funktionen und Sie können sie an Ihre Anforderungen
anpassen.

=== Global oder Kontext-abhängig
Wir unterscheiden zwischen *globalen* Views und solchen, die einen
*Kontext* benötigen. Globale Views können immer direkt aufgerufen
werden. Ein Beispiel ist die Liste aller aktuellen Service-Probleme. Einen
Kontext benötigt z.B. die Ansicht [.guihint]#Status of Host ...#  --  nämlich die Angabe
desjenigen Hosts, dessen Status angezeigt werden soll. Solche Views können nur
in Situationen aufgerufen werden, in denen es um einen bestimmten Host geht.

==== Globale Ansichten
Die globalen Ansichten erreichen Sie am einfachsten über das
Monitor-Menü.

image::monitor_menu_less.png[]

Alternativ können Sie auch die Seitenleistenelemente [.guihint]#Overview# und [.guihint]#Views# nutzen. In der
Overview ist jede der Zahlen anklickbar und bringt Sie zu einer globalen
Ansicht, die die jeweils gezählten Hosts oder Services einzeln auflistet.

image::views_tactical_overview.png[width=42%, align=center]

Im [.guihint]#Views#-Element sind alle globalen Ansichten erreichbar  --  gruppiert nach
Thema. Zudem finden Sie einige Einträge, die eigentlich keine [.guihint]#Views# sind  --
wie z.B. die xref:dashboards#[Dashboards], welche unter dem Thema [.guihint]#Overview#
einsortiert sind. Dashboards können aber Views _enthalten._

image::views_snapin_views.png[width=42%, align=center]

Von einer globalen Ansicht aus gelangen Sie zu den Einzelheiten eines
bestimmten Hosts oder Services in einem weiteren Schritt. Die Namen von Hosts
und Services und auch andere Spalten in den einzelnen
Zellen sind anklickbar &hellip;	:

image::views_all_hosts.png[]

&hellip; und bringen Sie zu (kontext-abhängigen) Detailansichten.

==== Kontext-abhängige Ansichten
In Ansichten, _die einen bestimmten Host oder Service betreffen_,
finden Sie in den Menüs [.guihint]#Host# beziehungsweise [.guihint]#Service#
wiederum allerlei Einträge, die Sie dann zu weiteren Ansichten mit demselben Kontext bringen  --  also von demselben Host oder Service.

image::views_context_buttons.png[]

Sie können Host- und Service-spezifische Ansichten auch über die Suche im Monitor-Menü erreichen:

image::views_monitor_search.png[width=60%, align=center]

Ein weiterer Weg zu Detailansichten ist die Schnellsuche in der Seitenleiste:

image::views_snapin_quicksearch.png[width=42%, align=center]

Zu welcher Ansicht Sie jeweils gelangen, hängt vom Ergebnis der Suche ab. Wenn
die Suche einen Host eindeutig ermittelt, dann gelangen Sie direkt zur
Seite [.guihint]#Services of host ...# dieses Hosts. Dort finden Sie dann wieder die
Menüpunkte zu den anderen Ansichten des gleichen Hosts. Ein Klick auf den Namen des
Hosts bringt Sie beispielsweise zur Ansicht [.guihint]#Status of host#.

image::views_services_of_host.png[]

==== Auswirkung in Menüleiste
[#menucontext]
Die Unterscheidung zwischen globalen, Host- und Service-spezifischen
Ansichten macht sich auch in der _Menüleiste_ bemerkbar. Immer vorhanden
sind die Menüpunkte [.guihint]#Commands, Add to, Export, Display und Help#.

In globalen _Host-Ansichten_ gibt es zudem den Punkt [.guihint]#Hosts#
sowie in globalen Service-Ansichten [.guihint]#Services# -- beachten Sie
hier den Plural! Darüber können Sie zum Beispiel die xref:availability#[Verfügbarkeit]
aller Hosts oder Services der aktuellen Ansicht aufrufen.

image::views_menu_global.png[]

Ansichten eines einzelnen Hosts hingegen, haben die Menüpunkte [.guihint]#Host# und
[.guihint]#Services# mit allen Aktionen für den aktuellen Host beziehungsweise für
all die Services der aktuellen Ansicht.

image::views_menu_context_host.png[]

Ansichten eines einzelnen Services wiederum haben ebenfalls den Eintrag [.guihint]#Host#,
dazu aber nun im Singular [.guihint]#Service#, mit Aktionen für diesen einen Service.

image::views_menu_context_service.png[]

[#using_views]
== Ansichten verwenden

=== Optionen, Filter und Kommandos

Jede Ansicht bietet diverse Optionen, über die Sie diese beeinflussen und Aktionen auslösen können.

[#filter]

[cols="30,~"]
|===
|Menüpunkt |Funktion

|[.guihint]#Commands# |Hier können Sie xref:commands#[Kommandos] auf den gezeigten Objekten ausführen (z.B. Eintragen von Wartungszeiten). Die Kommandos sind detailliert in einem xref:commands#[eigenen Artikel] beschrieben.
|[.guihint]#Display > Filter# |Öffnet den Dialog mit den [.guihint]#Filtern#. Damit können Sie die gezeigten Daten weiter einschränken. Sobald Sie einen Filter gesetzt haben, ändert sich das Symbol auf icon:button_filters_set_lo[], damit klar ist, dass unter Umständen nicht alle Daten angezeigt werden. Umgekehrt haben manche Views schon Filter vorbelegt (z.B. die Liste aller Probleme). Hier können Sie durch Entfernen der Filter wiederum mehr Daten anzeigen lassen. Änderungen der Filter werden nicht gespeichert, sondern wieder zurückgesetzt, sobald Sie die Ansicht verlassen.
|[.guihint]#Display > Show checkboxes# |Damit schalten Sie Checkboxen ein oder aus. Mit den Checkboxen können Sie die Kommandos auf ausgewählte Datensätze einschränken.
|[.guihint]#Display > Modify display options > Number of columns# |Legt die Anzahl der Spalten für die gewählte Ansicht fest. Mehrspaltige Ansichten helfen, auf breiten Monitoren den verfügbaren Platz auszunutzen. Bei Ansichten, die nur einen Datensatz anzeigen, ist diese Einstellung wirkungslos.
|[.guihint]#Display > Modify display options > Refresh interval# |Legt fest, in welchem Intervall die Ansicht neu geladen wird. Sie können damit das automatische Neuladen auch ganz abschalten. Bitte beachten Sie, dass es in diesem Fall sein kann, dass Sie über ein inzwischen aufgetretenes Problem nicht informiert werden!
|[.guihint]#Display > Modify display options > Date format# |Änderung des Formats für die Datumsanzeige.
|[.guihint]#Display > Modify display options > Time stamp format# |Zeitstempel können absolut, relativ, gemixt, gemeinsam oder als Unix Timestamp angezeigt werden.
|===


=== Zeit- und Datumsangaben

{CMK} zeigt in seinen Statusansichten alle Zeitangaben, die weniger als
24 Stunden in der Vergangenheit oder Zukunft liegen, als relative Angaben  --
also z.B. [.guihint]#16 hrs#. Sie können das im Menü über
[.guihint]#Display > Modify display options# umschalten und wahlweise
nur absolute, nur relative oder beide Werte anzeigen lassen, oder auch den
Unix-Timestamp. Auch das Datumsformat können Sie in diesem Dialog festlegen.

image::views_time_date.png[]

=== Sortierung

Die tabellarischen Ansichten können Sie durch ein Klicken auf die
Spaltenüberschriften sortieren.  Dabei gibt es drei Zustände einer Spalte,
die durch mehrfaches Klicken im Kreis herum der Reihe nach ausgewählt werden:

* Aufsteigend sortieren
* Absteigend sortieren
* Nicht mehr nach dieser Spalte sortieren

Zunächst wird eine Ansicht immer auf eine natürliche Art sortiert, die in
der Ansicht selbst festgelegt ist. Bei den Servicelisten ist die Sortierung
immer alphabetisch nach dem Namen des Services  --  mit der Ausnahme, dass die
_Check_MK_-Services immer oben stehen. Neben dem Service [.guihint]#Check_MK#,
der für die Abfrage des Monitoring-Agenten zuständig ist, sind das noch
[.guihint]#Check_MK Discovery#, [.guihint]#Check_MK HW/SW Inventory# und gegebenenfalls
[.guihint]#Check_MK Agent#. Um eine solche Liste nach dem aktuellen Status der
Services zu sortieren genügt ein Klick auf
[.guihint]#State#.

image::views_sort_by_state.png[]

Die Sortierung nach der Spalte [.guihint]#Perf-O-Meter# führt manchmal zu
überraschenden Ergebnissen. Das liegt daran, dass die grafische Darstellung
der xref:graphing#[Messwerte] teilweise eine prozentuale Zusammenfassung der eigentlichen
Werte zeigt. Die Sortierung geschieht aber nach den absoluten Werten  --
und zwar immer nach der _ersten Metrik_, die ein Service ausgibt.


[#export]
=== Export

Sie können die in einer Ansicht gezeigten Daten in verschiedenen Formaten über das
Menü [.guihint]#Export# exportieren:

// ML: Nach welchem Muster werden hier Icons exportiert? Mal mit .png, mal ohne, mal gar nicht, nie alle.

[cols="30,~"]
|===
|Menüpunkt |Aktion

|[.guihint]#Data > Export CSV# |Als Trennzeichen wird ein Semikolon verwendet. Die einzelnen Zellen sind in Anführungszeichen eingeschlossen. In der ersten Zeile sind die internen Kürzel für die einzelnen Spalten eingetragen.
|[.guihint]#Data > Export JSON# | Beim JSON-Export landen die Zellen ebenfalls in Anführungszeichen, getrennt durch Umbrüche und Kommata, umschlossen von eckigen Klammern.
|[.guihint]#Reports > This view as PDF# |Nur {EE}: Hierbei wird ein sogenannter _Instant-Report_ erzeugt, der die aktuelle Tabellenansicht in ein PDF-Dokument überführt, abzüglich Icons, Navigation und so weiter. Das Aussehen können Sie über spezielle Schablonen im xref:reporting#[Berichtsmodul] anpassen.
|[.guihint]#Reports >  Diverse# | Je nach aktueller Tabellenansicht werden hier weitere PDF-Exporte angeboten, etwa zur Verfügbarkeit, sowie gegebenenfalls individuell erstellte Report-Vorlagen.
|[.guihint]#REST API > Query host/service resource# | Ausgabe der xref:rest_api#[REST-API] zur Host-/Service-Auswahl der aktuellen (gefilterten) Tabellenansicht.

|===



[#limit]
=== Das Anzeigelimit

Bei einer größeren Monitoringumgebung sind nicht mehr alle Ansichten sinnvoll.
Wenn Sie 50.000 Services überwachen und die Ansicht [.guihint]#All Services# anwählen,
würde die Darstellung nicht nur sehr lange brauchen  --  sie wäre auch wenig
nützlich.

Um den Benutzer in solchen Situationen vor langen Wartezeiten zu schützen
und das System nicht durch absurde Datenmengen in die Knie zu zwingen,
sind Ansichten auf die Anzeige von 1000 Einträgen begrenzt. Bei einer
Überschreitung erhalten Sie folgenden Hinweis:

image::views_limit1.png[width=80%]

Wie Sie sehen, werden Sie darauf hingewiesen, dass die gezeigten Datensätze
nicht unbedingt die ersten 1000 gemäß der gewählten Sortierung sind! Das
hat einen technischen Hintergrund: Die Limitierung wird nämlich bereits an
der Quelle der Daten durchgesetzt: in den Monitoringkernen der angebundenen Instanzen.
Das ist sehr wichtig: Denn wenn wir erst eine Million
Datensätze aus Ihrer weltweit verteilten Umgebung zusammensammeln würden, um
gleich danach 99,9% der Daten wieder wegzuwerfen, dann wäre das Kind ja schon in den Brunnen
gefallen. Die Sortierung übernimmt erst am Ende die Oberfläche  --   es geschieht also
_nach_ der Limitierung. Denn die Daten von allen Instanzen müssen ja
gemeinsam sortiert werden.

Sofern Sie wirklich der Meinung sind, mehr als 1000  Datensätze sehen zu
wollen, können Sie durch einen Klick auf [.guihint]#Repeat query and allow more results#
ins nächste Level kommen. Hier greift eine Begrenzung auf 5000 Datensätze.
Ist diese wieder überschritten, so können Sie _ganz ohne Limit_ fortfahren.
Da dies eine gefährliche Operation sein kann, benötigt sie _Administratorrechte_.
Sie wurden gewarnt!

image::views_limit2.png[width=80%]

Sie können die beiden Stufen unter [.guihint]#Global Settings > User Interface#
anpassen:

image::views_limit3.png[]


[#edit]
== Ansichten anpassen


=== Grundsätzliches

{CMK} erlaubt Ihnen, die mitgelieferten Ansichten anzupassen und sogar
ganz Neue zu erzeugen, welche Sie dann auch in xref:reporting#[Berichte]
und xref:dashboards#[Dashboards] einbauen können. Dabei können Sie bei jeder
Ansicht eine Menge verschiedener Aspekte bestimmen:

* *Allgemeine Dinge* wie Titel, Thema, usw.
* Welche *Datenquelle* wird dargestellt (z.B., Hosts, Services, Events der Event Console etc.)?
* Welche Auswahl an Datensätzen wird dargestellt (*Filterung*)?
* Welche *Spalten* werden dargestellt?
* Zu welchen anderen Ansichten *verlinken* die Texte in den Spalten?
* Wie wird standardmäßig *sortiert*?
* Gibt es eine *Gruppierung,* und falls ja, wie sieht diese aus?
* Wo und für welche Benutzer soll die Ansicht *sichtbar* sein?
* Welche Art von *Tabellenlayout* soll verwendet werden?

Den Editiermodus für Views erreichen Sie auf zwei Arten:

. Bei einer bestehenden View über den Menüeintrag [.guihint]#Display > Customize view# -- womit ein Klon der View angelegt wird.
. Im Menü [.guihint]#Customize > Visualization > Views#. Dort können Sie mit icon:button_add_view[] ganz neue Ansichten erzeugen oder wiederum mit icon:icon_clone[] bestehende klonen und anpassen:

image::views_edit_views.png[]


=== Erst klonen,  dann verändern

Da die mitgelieferten Ansichten Teil der Software sind und somit nicht
verändert werden können, kennt {CMK} das Konzept vom _Klonen_. Beim
ersten Anpassen einer View wird automatisch eine Kopie der Ansicht für Sie erzeugt.
Diese Kopie ist dabei Ihrem Benutzerprofil zugeordnet.

Die Kopie können Sie dann so anpassen, wie Sie es möchten. Die ursprüngliche
Ansicht bleibt erhalten, wird aber _verschattet_  --  also durch Ihre Kopie
verdeckt. Sie können später einfach zur Standardansicht zurückkehren,
indem Sie Ihren Klon löschen (das geht dann in Tabelle der Views wie erwartet
mit icon:icon_delete[]).

Dieses Konzept hat noch einen weiteren Vorteil: Sie können nämlich bestimmen, ob
die Ansicht _für alle Benutzer_ geändert sein soll, oder nur für Sie
selbst. Dies legen Sie in den [.guihint]#General Properties# der Ansicht unter [.guihint]#Visibility# mit der
Checkbox [.guihint]#Make this view available for other users# fest. Es überrascht
wohl nicht, dass Sie diese Checkbox nur dann setzen können, wenn
Sie xref:wato_user#roles[Administratorrechte] haben (genau genommen gibt es dafür eine eigene
Berechtigung mit dem Namen [.guihint]#Publish views#). Zusätzlich können einzelne
Ansichten  in den xref:wato_user#roles[Rollendefinitionen] gesperrt werden.

Was ist nun, wenn eine Ansicht von mehreren Benutzern angepasst und
freigegeben wurde?  Jeder der Benutzer hat dann nämlich eine eigene Variante
der View. Welche davon wird für wen sichtbar? Dies wird durch folgende
Regeln bestimmt:

. Wenn ein Benutzer für sich selbst eine Ansicht erzeugt hat, hat diese für ihn immer Vorrang.
. Danach gelten Ansichten, die ein Adminbenutzer angepasst und freigegeben hat (genau gesagt jemand mit dem Recht [.guihint]#Modify builtin views#).
. Gibt es hier keine, so gelten Ansichten, die ein anderer normaler Benutzer mit dem Recht [.guihint]#Publish views# freigegeben hat.
. Und wenn es hier auch keine gibt, dann wird die ausgelieferte Variante sichtbar.

Wie können Sie nun aber eine _echte Kopie_ einer Ansicht erstellen,
also am Ende beide Ansichten sehen  --  die mitgelieferte und
Ihre Version? Dies wird über die [.guihint]#Unique ID# in den [.guihint]#General Properties#
gesteuert. Ändern Sie einfach die ID Ihrer View auf einen anderen Wert. Damit gilt die
View nicht mehr als Klon der mitgelieferten View sondern beginnt ein eigenes
Leben.

Die ID ist übrigens auch die entscheidende Angabe in der URL, über die
Views aufgerufen werden. Das Schema ist ganz einfach. So wird z.B. die
globale View mit der ID `allhosts` wie folgt aufgerufen:

`/mysite/check_mk/view.py?view_name=allhosts`

Das Konzept mit dem Klonen und Anpassen und der Sichtbarkeit finden Sie
übrigens auch an vielen anderen Stellen von {CMK}, nämlich bei:

* xref:dashboards#[Dashboards]
* xref:reporting#[Berichten]
* xref:graphing#graph_collections[Graphensammlungen]
* xref:graphing#custom_graphs[Freiformgraphen]
* xref:user_interface#bookmarks[Lesezeichenlisten]

=== Integration einer View in die Navigation

Wie und ob eine View im [.guihint]#Monitor#-Menü der Navigationsleiste
sowie dem Seitenleistenelement [.guihint]#Views# angezeigt wird,
legen folgende Eigenschaften unter [.guihint]#General Properties# fest:

image::views_edit_view_general_properties.png[]

* [.guihint]#Title:# Dies wird der Name des Eintrags.
* [.guihint]#Topic in 'Monitor menu':# Unter diesem Thema wird die View einsortiert. Sie können auch eigene Themen definieren.
* [.guihint]#Sort index:# Entscheidet, wie weit oben die Ansicht im Menü erscheint.
* [.guihint]#Visibility:# Damit können Sie den Eintrag unterdrücken und/oder für andere Benutzer freigeben.


=== Grundlegendes Layout

Der nächste Kasten [.guihint]#View Properties# bestimmt das generelle Aussehen der View:

image::views_edit_view_view_properties.png[]

Die Einstellung [.guihint]#Number of Columns# bestimmt die Anzahl der Spalten, [.guihint]#Automatic page reload#
das Aktualisierungsintervall -- beide Werte können in der View selbst [.guihint]#Display > Modify display options#
noch verändert werden.

Unter [.guihint]#Basic Layout# gibt es verschiedene Arten, wie die Daten in Tabellen
dargestellt werden. Die meisten Ansichten verwenden [.guihint]#Table#  --  eine normale
Tabelle, die nach Spalten sortierbar ist  --  oder [.guihint]#Single dataset#  --
welches die Legende links hat und meist für einzelne Datensätze verwendet wird.
Sie können [.guihint]#Single dataset# aber auch für Ansichten mit mehr als einem Objekt
verwenden. Die Ansicht [.guihint]#All hosts# sieht nach einer Umstellung auf
[.guihint]#Single dataset# etwa so aus:

image::views_layout_single_dataset.png[]

=== Spalten und Gruppierung

Der Kasten [.guihint]#Columns# legt fest, welche Spalten Sie sehen. Die
mögliche Auswahl von Spalten hängt von der gewählten Datenquelle ab. Am
meisten Spalten finden Sie bei den Services, denn hier sind natürlich auch
alle Informationen über den jeweiligen Host verfügbar. Die Liste kann hier
schon recht lang werden und wenn Sie nicht sicher sind, welche Spalte die
richtige ist, hilft nur eines: Ausprobieren.

image::views_edit_view_columns.png[]

Je nach gewählter Spalte kann es dafür spezifische Optionen geben.
Mit der Spalte [.guihint]#Hosts: Hostname# ist es zum Beispiel möglich,
den Hostnamen über die Option [.guihint]#Coloring# entsprechend seines Status
farblich zu hinterlegen.

Das Feld [.guihint]#Link# bietet eine Auswahl von allen Ansichten und Dashboards.
Ist hier eine Ansicht ausgewählt, dann ist die jeweilige Zelle dieser
Spalte _anklickbar_ und bringt den Benutzer zur gewählten Ansicht.
Wirklich sinnvoll ist das natürlich nur, wenn die Zielansicht einen Kontext
hat. Bestes Beispiel ist die Ansicht [.guihint]#All hosts#. Die Spalte [.guihint]#Hostname#
ist hier anklickbar und bringt den Benutzer dann zu [.guihint]#Services of host#  --
von diesem Host. Alternativ können hier auch Dashboards angegeben werden, die
freilich keinen Kontext benötigen.

Unter [.guihint]#Tooltip# werden Sie wiederum die Liste aller Spalten finden.
So können Sie eine weitere Information zu dem Host oder Service
einblenden, sobald der Benutzer mit der Maus über die jeweilige
Zelle fährt (wie hier im Beispiel die IP-Adresse).

image::views_hover_address.png[]

=== Information über Services in einer Host-Ansicht

Stellen Sie sich vor, Sie möchten gerne Informationen zu bestimmten Services
in einer Tabelle von Hosts anzeigen. Das folgende Beispiel zeigt ein sehr schönes
Beispiel für so etwas: Zu jedem Host werden die aktuelle Uptime, die CPU-Last,
die Speichernutzung und die NTP-Synchronisation ausgegeben:

image::views_joined_columns_example.png[]

Hier wurde eine Tabelle von Hosts erstellt, in der für jeden Host die *Servicespalte*
[.guihint]#Perf-O-Meter# von je vier verschiedenen Services angezeigt wird. Man sieht auch,
dass bei einem der drei Hosts die Services [.guihint]#CPU# und [.guihint]#Memory# nicht
existieren und die Spalten dort konsequenterweise leer ist.

Die Konfiguration dieser Ansicht geschah über das Hinzufügen von Spalten vom Typ [.guihint]#Joined column#.
Hier erscheinen dann unter [.guihint]#Column:# die Spalten für Services und es wurde [.guihint]#Perf-O-Meter# ausgewählt.
Der Eintrag [.guihint]#Title# bestimmt dann die Überschrift der Spalte. Unter [.guihint]#Of Service# ist der
*exakte* Name des Services eingetragen (Groß-/Kleinschreibung beachten!):

image::views_edit_view_columns_2.png[]

So eine Darstellung ist natürlich nur dann nützlich, wenn die Ansicht eine Liste von ähnlichen
Hosts anzeigt, welche auch alle über die gewählten Services verfügen. Das ist auch der Grund,
warum {CMK} keine derartigen Ansichten mit ausliefert: Welche Spalten hier sinnvoll sind,
hängt absolut von der Art der gewählten Hosts ab. Bei Linux-Servern interessieren sicherlich
völlig andere Informationen als z.B. bei USVs.


=== Sortierung

Die Sortierung einer Ansicht konfigurieren Sie im vierten Kasten. Es handelt
sich dabei nur um die voreingestellte Sortierung: Der Benutzer kann wie
oben beschrieben über einen Klick auf die Spaltentitel die Sortierung
für sich anpassen. In der Konfiguration der View haben Sie aber mehr
Möglichkeiten: Sie können eine _mehrstufige_ Sortierung einstellen,
z.B. zuerst nach dem Service-Status, und bei gleichem Status nach dem Namen
des Services. Die so eingestellte Reihenfolge bleibt auch als nachrangige
Sortierung erhalten, wenn der Benutzer nach einer bestimmten Spalte
umsortiert.

image::views_edit_view_sorting.png[]

=== Gruppierung

Durch Gruppierung zerteilen Sie eine Tabelle in mehrere Abschnitte  --  wobei
jeder Abschnitt Daten anzeigt, die irgendwie zusammengehören. Ein gutes
Beispiel ist die Ansicht [.guihint]#Service problems#, welche Sie bequem über das
Snapin [.guihint]#Overview# erreichen.

Hier sehen Sie diese Tabelle gruppiert nach dem Service-Status (_State_):
zuerst alle {CRIT}, dann {UNKNOWN}, dann {WARN} - jeweils mit einem eigenen
Gruppentitel:

image::views_edit_view_grouping.png[]

Die Gruppierung in einer View konfigurieren Sie analog zu den Spalten.
Legen Sie einfach fest, nach welchen Spalten gruppiert werden
soll. Meist ist das nur eine einzige, aber es können auch mehrere sein. Alle
Datensätze mit dem gleichen Wert für alle gewählten Spalten werden dann in einer Gruppe
angezeigt. Und die Spalteninformation wird jeweils als Gruppentitel
anzeigt.


Es ist wichtig, dass Sie die Datensätze auch vorrangig nach der gewählten
Gruppeneigenschaft *sortieren!* Andernfalls kann es sein, dass die gleiche
Gruppe mehrfach auftaucht (in Einzelfällen kann dies sogar gewünscht sein).
Übrigens: Ein Umsortieren nach einer Spalte durch den Benutzer hat keinen
Einfluss auf die Gruppierung: In diesem Fall wird nur die Reihenfolge der
Gruppen bestimmt und die Datensätze werden innerhalb der Gruppen sortiert. Die
Gruppen selbst bleiben erhalten.


=== Filter, Kontext und Suche

Ein wichtiger Aspekt von Views ist die _Selektion_ der Daten. Welche Hosts oder
Services sollen in der Tabelle angezeigt werden? {CMK} verwendet hierfür
das Konzept der *Filter.* Hier sind ein paar Beispiele für Host-Filter:

image::views_filter.png[]

Jeder Filter kann vom Benutzer mit Suchbegriffen oder anderen Kriterien
gefüllt werden und reduziert dann die Liste der Ergebnisse auf diejenigen
Datensätze, die die Kriterien erfüllen. Die Filter werden dabei
UND-verknüpft. Die Filterkriterien, die bei einer View dann tatsächlich
zum Einsatz kommen, werden aus drei Quellen zusammengestellt:

. Filter, die direkt in der View hinterlegt und mit Kriterien gefüllt sind
. Filter, die der Benutzer interaktiv in der View mit icon:icon_filter[] gesetzt hat
. Filter, die per Variablen über die URL gesetzt werden

Die Filter, die Sie beim Editieren einer View im Kasten [.guihint]#Context / Search filters# zusammenstellen,
haben dabei zwei Funktionen. Zum einen legen Sie so fest, welche Filter dem Benutzer beim Klick
auf icon:icon_filter[] angeboten werden. Zum anderen können Sie Filter bereits
mit Kriterien vorbelegen und so die in der View gezeigten Daten einschränken (Punkt 1 von oben).

Falls Sie eine View mit *Kontext* anlegen oder editieren, so tritt anstelle der Filter
des entsprechenden Objekts nur ein optionales Eingabefeld. In diesem gilt dann immer
ein _exakter_ Vergleich (Groß-/Kleinschreibung beachten). Nehmen wir als Beispiel die View
`host`, welche alle Services eines _bestimmten_ Hosts anzeigt. Der Hostname wird
der View über einen Kontext mit auf den Weg gegeben. Sie können sich aber eine Ansicht bauen,
welche den gezeigten Host quasi *hart kodiert* direkt in der View festlegt:

image::views_edit_view_context_filter.png[]

Damit können Sie diese View wieder ohne Kontext aufrufen und auf Wunsch
auch problemlos in das Seitenleistenelement [.guihint]#Views# einbinden.


=== Spezielle Such-Ansichten

Die mitgelieferten Ansichten [.guihint]#Host search# und [.guihint]#Service search# (und
auch andere) verhalten sich im Bezug auf die Filter auf eine spezielle Art: Wenn
Sie so eine Ansicht anwählen, so startet diese mit einem geöffnetem
Filter-Formular und zeigt erst dann Hosts oder Services an, wenn dieses
abgeschickt wurde.

Warum? Es wäre einfach sehr unpraktisch, wenn Sie erst auf [.guihint]#All services# gehen
müssten  --  dann warten bis viele tausend Services dargestellt würden  --
und erst dann durch eine Sucheingabe das Ergebnis filtern könnten. Dieses
Verhalten legt die Option [.guihint]#Show data only on search# fest:

image::views_edit_view_view_properties_show_data.png[]

[#new]
== Neue Ansichten erstellen

Das Erzeugen einer neuen View mit icon:button_add_view[] geht im Prinzip genauso wie
das Editieren einer bestehenden View  --  mit einem kleinen Unterschied: Sie müssen vorher
noch eine *Datenquelle* und einen *spezifischen Objekttyp* auswählen.


=== Datenquelle

image::views_create_view_1.png[]

Die Datenquelle ist das, was man in Datenbanken vielleicht als Tabelle oder Datenbank-View
bezeichnen würde. {CMK} verwendet zwar keine SQL-Datenbank, ist intern aber ähnlich
aufgebaut. In den meisten Fällen liegen Sie mit [.guihint]#All services# oder [.guihint]#All hosts# richtig.
Es gibt aber einige spezielle Datenquellen, die hier kurz aufgelistet werden sollen:


[cols=2]
|===
|Datenquelle |Bedeutung

|Host- und Servicegruppen |siehe unten
|[.guihint]#Alert Statistics# |xref:livestatus#retrieving_statistics[Statusstatistiken]
|BI, diverse |xref:bi#[Business Intelligence]
|[.guihint]#Event Console#, Host- und Service-Events |xref:ec#[Event Console]
|[.guihint]#Inventory#, diverse |xref:inventory#[Inventory]
|[.guihint]#The Logfile# |xref:livestatus#logs[Livestatus-Daten]
|===


==== Host- und Servicegruppen
Die Datenquellen
[.guihint]#Hostgroups# und [.guihint]#Servicegroups# liefern je Zeile die
Informationen über die Gruppe selbst -- Filter für einzelne Hosts
oder Services gibt es entsprechend nicht. Ein Beispiel für diese
Datenquelle ist die Standardansicht [.guihint]#Host groups#.
In verteilten Umgebungen erledigen die Datenquellen
[.guihint]#Hostgroups, merged# und [.guihint]#Servicegroups, merged# genau das Gleiche.

image::views_hostgroups_summary.png[]

Wenn Sie hingegen Informationen zu einzelnen Hosts wünschen, lediglich
gruppiert nach Hostgruppen, können Sie etwa die Standardansicht [.guihint]#All hosts#
in den Einstellungen im Bereich [.guihint]#Grouping# um die Gruppierungsoption
[.guihint]#Hosts: Host groups the host is member of# ergänzen. Da Hosts mehreren
Gruppen zugeordnet sein können, finden Sie in der Ansicht dann einen einzelnen Bereich
für jede *Hostgruppenkombination,* die für mindestens einen Host gilt.

image::views_hostgroups.png[]

Auf dieselbe Weise können Sie auch mit Services und Servicegruppen verfahren.

Je nach ausgewählter Datenquelle stehen Ihnen unterschiedliche Spalten
zum Aufbau der Ansicht zur Verfügung.

=== Objekttyp: Global oder mit Kontext

image::views_create_view_2.png[]

Hier entscheidet sich, ob Ihre neue View einen Kontext haben oder ob es
eine globale Ansicht werden soll. Welche Auswahlmöglichkeiten Sie haben, hängt
von der gewählten Datenquelle ab. Der mit Abstand häufigste Kontext ist Host.
Die Abbildung von oben erscheint nach der Auswahl der Datenquelle [.guihint]#All services#.

Durch das Aktivieren von [.guihint]#Show information of a single host# legen Sie fest,
dass die neue Ansicht genau einen Host beschreibt. So haben Sie die Grundlage
dafür geschaffen, dass die Ansicht nicht global, sondern verlinkt sichtbar wird:

* Bei einer Hostansicht mit einem Kontext
* Als Verknüpfung in einer Spalte (siehe oben, z.B. Klick auf Hostname in einer Ansicht)

Bei dem Kontexttyp [.guihint]#Service# gibt es zwei Möglichkeiten: Wenn Sie nur
[.guihint]#Show information of a single service# anwählen, können Sie eine Ansicht bauen,
die alle Services mit dem gleichen Namen aber auf _verschiedenen Hosts_
anzeigt. Wenn es um einen ganz.B.stimmten Service von einem einzigen Host gehen
sollen, dann kreuzen Sie zusätzlich [.guihint]#Show information of a single host# an.


== Die Matrix

Wenn Sie in den [.guihint]#View Properties# als [.guihint]#Basic Layout#  bei einer Ihrer Ansichten [.guihint]#Matrix# einstellen, werden Sie
wahrscheinlich erstmal seltsame Dinge erleben und sich fragen, was das Ganze
soll. Die Matrix ist sicher nicht auf den ersten Blick einleuchtend, aber Sie können
damit tolle Dinge machen.

In den ausgelieferten Views gibt es eine, die dieses Layout verwendet  -- und
zwar [.guihint]#Search performance data#. Sie finden diese View
über [.guihint]#Customize > Visualization > Views.#

Folgende Abbildung zeigt eine Suche
nach dem Serviceausdruck `CPU|^memory|Filesystem /opt/omd/sites/mysite`:

image::views_matrix_filter_service.png[width=55%, align=center]

Das Ergebnis ist eine hübsche Tabelle der Hosts, in denen die Metriken
all dieser Services gegenübergestellt sind.
Nicht alle Hosts haben die gleichen Services, so dass bei einigen Hosts
dann die entsprechenden Zellen einfach leer bleiben:

image::views_matrix_view_1.png[]

Das Ganze sieht jetzt erstmal sehr ähnlich aus wie die weiter oben
beschriebene [.guihint]#Information über Services in einer Host-Ansicht#. Es gibt
aber ein paar wesentliche Unterschiede:

. Die Liste der Services ist dynamisch und nicht fest konfiguriert.
. Die Hosts sind hier die Spalten  --  nicht die Zeilen.
. Sie können mit der Matrix noch viel mehr anstellen.

Wenn Sie in die Definition der View gucken, können Sie sehen, wie diese konstruiert ist:

* Als [.guihint]#Basic Layout# ist [.guihint]#Matrix# eingetragen.
* Bei [.guihint]#Grouping# ist als einzige Spalte der [.guihint]#Hostname# eingetragen.
* Bei [.guihint]#Columns# sind die [.guihint]#Service description# und das [.guihint]#Service Perf-O-Meter# eingetragen.

Die Regel für das Matrix-Layout ist so:

* Die *[.guihint]#Grouping Columns#* werden als Köpfe für die Spalten verwendet.
* Die *erste normale [.guihint]#Column#* bildet die linke Spalte mit der Beschriftung der Zeilen.
* Alle *weiteren normalen [.guihint]#Columns#* werden in den Zellen angezeigt.

Wenn Sie z.B. mehr Informationen über den Host anzeigen möchten, fügen Sie einfach
weitere Spalten im Bereich [.guihint]#Grouping# hinzu. So sieht z.B. die Tabelle von
oben aus, wenn Sie die Spalten
[.guihint]#Host icons# und [.guihint]#WATO folder - just folder name# hinzufügen:

image::views_matrix_view_2.png[]

Weitere *normale Spalten* landen dann direkt in den Zellen. Folgendes Beispiel (gekürzt) zeigt
die Matrix mit der zusätzlichen Spalte [.guihint]#Output of check plugin#:

image::views_matrix_view_3.png[]

=== Erkennen von Ausreißern

Warum sind eigentlich manche Zellen farbig hinterlegt? Nun -- hier werden Sie
hingewiesen auf Werte, die sich *abheben von der Mehrheit*. Das ist wohl
bei Messdaten nicht so sinnvoll. Aber es gibt Anwender, die mit einer speziell
konstruierten Matrixansicht auf einen Blick feststellen können, ob z.B. bei
gewissen Hosts oder Services eine falsche Kontaktgruppe eingetragen ist!

image::views_matrix_view_4.png[]


[#alarm_sounds]
== Alarmtöne

Eine Ansicht kann über den Browser Alarmtöne (_alarm sounds_) abspielen, wenn sich in der Tabelle
mindestens ein Problem befindet (also ein Host der nicht {UP} oder ein Service
der nicht {OK} ist). Diese primitive Art der Alarmierung ist z.B. interessant
für Leitstände, wo die Liste der Probleme ständig auf einem Schirm sichtbar ist,
aber der Operator nicht ständig auf diesen starren möchte.

Die Alarmtöne sind per Default ausgeschaltet. Über den globalen Schalter
[.guihint]#Setup > General > Global settings > User interface > Enable sounds in views# können Sie diese
einschalten. Wie immer hilft hier die Suche im [.guihint]#Setup#-Menü:

image::global_settings_enable_sound.png[]

Alarmtöne werden aber nicht in allen Views abgespielt, sondern nur, wo dies in den [.guihint]#View Properties# aktiviert ist:

image::view_properties_sounds.png[]


[#embed_views]
==  Views in fremde Webseiten einbetten

Da jede Ansicht über eine URL erreichbar ist, können Sie diese auch in andere
Webseiten einbetten  --  z.B. über einen `&lt;iframe&gt;`. Etliche
Elemente der View ergeben allerdings in so einem Kontext keinen Sinn oder sind
sogar störend. In so einem Fall können Sie an die URL die Variable
`display_options=...` anhängen, über die Sie genau steuern können, welche
Bestandteile der View im HTML-Code *nicht* generiert werden sollen.

*Wichtig:* Auch die Navigation von {CMK} ist beim Einbetten meist eher unerwünscht.
Bevor Sie also in einer View manuell Optionen setzen, lassen Sie die Seite über
[.guihint]#Display > This page without navigation# ohne Navigation und Seitenleiste
anzeigen.

Jeder Bestandteil wird durch einen Buchstaben kodiert und kann entsprechend
ausgeschlossen werden.

Folgende Buchstaben sind definiert:
////
In 2.0.0 nach aufwendigen Tests die folgenden Optionen entfernt: alle Großbuchstaben und h, z, x:
h - HTML-Header und -Footer inkl. der Tags `<HTML>`, `<HEAD>` und `<BODY>` > unformatierte Seite
z - Die Fusszeile > keine sichtbare Wirkung (Fusszeile gibts nicht mehr)
x - Alle anderen Links werden entfernt > keine sichtbare Wirkung
Von den verbliebenen sind die folgenden zweifelhaft: b (räumt Diverses ab, aber nicht nach Beschreibung) und w (unklare Beschreibung)
////

[cols="10,~"]
|===
|Option |Wirkung

|t |Titelzeile (mit Seitentitel, Breadcrumb-Pfad, Symbol zum Countdown der Seitenaktualisierung), Menüleiste und Aktionsleiste werden entfernt.
|b |Menüpunkte und Aktionsknöpfe werden entfernt, die zu anderen Ansichten verlinken.
|f |Menüpunkt [.guihint]#Display > Filter# und der zugehörige Aktionsknopf zum Öffnen der icon:view_button_filters[] Filterleiste werden entfernt.
|c |Menü [.guihint]#Commands# und zugehörige Aktionsknöpfe werden entfernt.
|o |Die Optionen [.guihint]#Number of columns# und [.guihint]#Refresh interval# werden entfernt, sonst einblendbar mit [.guihint]#Display > Modify display options#.
|d |Menüpunkt [.guihint]#Display > Modify display options# wird entfernt.
|e |Menüpunkt [.guihint]#Display > Customize View# wird entfernt.
|r |Symbol zum Countdown der Seitenaktualisierung in der Titelzeile und der Javascript-Code für die automatische Aktualisierung werden entfernt.
|s |Abspielen von xref:views#alarm_sounds[Alarmtönen] bei den Service-Zuständen {WARN} und {CRIT}.
|i |Links auf andere Ansichten werden entfernt, z.B. in einer Service-Liste die Links in der Spalte [.guihint]#Service#.
|m |Das Ziel von Links ist standardmäßig der HTML-Frame `main` -- mit dieser Option werden Links in neuen Tabs geöffnet.
|l |Links in Spaltentiteln werden entfernt.
|w |Limitierung und Livestatus-Fehlermeldungen.
|===

Wenn Sie also die z.B. alle Bedienelemente, Knöpfe und Links abschalten und nur die
eigentliche Tabelle darstellen möchten, so sieht ein Link auf die View
`allhosts` so aus:

`/myserver/mysite/check_mk/view.py?view_name=allhosts&display_options=til`

==  Eigene Icons und Aktionen einfügen

In Ansichten von Hosts und Services sehen Sie auch eine Spalte für Icons und
darin das icon:icon_menu[] [.guihint]#Action menu#, aus dem Sie Host- beziehungsweise
Service-Aktionen auswählen können. Sie dürfen Ansichten aber auch um eigene
Icons erweitern. Diese können wahlweise schlicht zur Visualisierung genutzt oder
mit eigenen Aktionen belegt werden.

So ließen sich zum Beispiel Hosts, die über eine grafische Web-Oberfläche
verfügen, über solch ein individuelles Icon schnell identifizieren und über
einen Link auch direkt ansteuern.

Das Prozedere für eigene Icons und Aktionen gliedert sich in drei Schritte:

. Icons hochladen
. Icons/Actions definieren
. Icons Hosts/Services zuordnen

Starten Sie über [.guihint]#Setup > General > Custom Icons# und laden Sie eine lokale Datei
mit einer maximalen Größe von 80x80 Pixeln hoch. Damit ist das Icon im
System, findet aber noch keinerlei Verwendung.

image::views_manage_icons_upload.png[]

Nun müssen Sie das Icon noch als über xref:wato_rules#[Regeln] ansprechbares
Objekt und optional eine zugehörige Aktion definieren. Die Einstellungen
finden Sie unter [.guihint]#Steup > General > Global settings > User Interface > Custom icons and actions#.
Erstellen Sie hier über [.guihint]#Add new element# einen neuen Eintrag und legen
Sie [.guihint]#ID#, [.guihint]#Icon# und einen [.guihint]#Title# fest; der Titel wird übrigens später
per On-Mouse-Over-Effekt als Tooltip direkt am Icon angezeigt und ist
für die Nutzer damit sehr nützlich.

image::views_global_settings_custom_icons_and_actions.png[]

Interessant wird es nun beim Punkt [.guihint]#Action#: Aktion ist hier gleichzusetzen
mit einer URL und für diese dürfen Sie einige Variablen wie `$HOSTNAME$`
oder `$SERVICEDESC$` (Service-Beschreibung) nutzen -- weitere Hinweise
bekommen Sie über die Online-Hilfe. Eine gültige Aktion wäre beispielsweise:

`view.py?host=$HOSTNAME$&site=mysite&view_name=host`

Diese Aktion ruft schlicht die Standard-Host-Ansicht für den jeweiligen Host auf der Seite _mysite_ auf.

Über ein Häkchen bei [.guihint]#Show in column# können Sie das Icon dann als
eigenständiges Bildchen neben icon:icon_menu[] anzeigen lassen, andernfalls
landet Ihre Aktion im zugehörigen Aktionsmenü.


Im letzten Schritt bestimmen Sie nun, bei welchen Hosts oder Services
das neue Icon angezeigt werden soll -- und das natürlich über Regeln.
Sie finden die beiden Regeln [.guihint]#Custom icons or actions for hosts in status GUI#
und [.guihint]#Custom icons or actions for services in status GUI#
im [.guihint]#Setup#-Menü unter [.guihint]#Host monitoring rules# und [.guihint]#Service monitoring rules#.
Am schnellsten finden Sie die beiden Regeln mit der Suche im [.guihint]#Setup#-Menü.

Legen Sie eine neue Regel im gewünschten Ordner an und setzen Sie darin mindestens zwei Optionen:
Zum einen wählen Sie unter
[.guihint]#Custom icons or actions for hosts in status GUI# das just angelegte Icon:

image::views_custom_icons_or_actions.png[]

Zum anderen filtern Sie im [.guihint]#Conditions#-Bereich wie üblich auf die gewünschten Hosts/Services:

image::views_custom_icons_or_actions_b.png[]

Speichern und bestätigen Sie anschließend die Änderungen.

In Host- und Service-Ansichten sehen Sie ab sofort bei den gefilterten
Hosts und Services Ihr neues Icon neben oder im Aktionsmenü:

image::views_view_with_custom_icon.png[]
