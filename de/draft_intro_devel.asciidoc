// -*- coding: utf-8 -*-
// IGNORE 100%ige Mkblahblah Monitoringdaten Mkjobs Schwellwertpaar Logmeldungen versionieren vollumfängliche weiss
include::global_attr.adoc[]
= Erweiterungen für {CMK} entwickeln
:revdate: draft
:title: Erweiterungen für {CMK} entwickeln
:description: Hier erfahren Sie, mit welchen Methoden und Programmiersprachen Sie Erweiterungen für  {CMK}-Plugins entwickeln können - mit allem was dazugehört, insbesondere mit der in der Version 2.0.0 neu entwickelten Check-API.

{related-start}
xref:localchecks#[Lokale Checks]
xref:wato_monitoringagents#[Monitoring-Agenten]
xref:agent_linux#[Linux überwachen]
xref:agent_windows#[Windows überwachen]
xref:snmp#[Überwachen via SNMP]
xref:wato_services#[Services verstehen und konfigurieren]
xref:cmk_commandline#[{CMK} auf der Kommandozeile]
xref:mkps#[{CMK}-Erweiterungspakete (MKPs)]
xref:simulation_mode#[Der Simulationsmodus]
{related-end}


[#intro]
== Einleitung

Irgendwann kommt jeder Anwender von {CMK} an den Punkt, an dem die link:https://checkmk.com/de/integrations[mitgelieferten Checks^] nichts passendes bereit halten, link:https://exchange.checkmk.com/[die Exchange^] nichts anbietet und andere Methoden wie die xref:mk_filestats#[Überwachung von Dateien und Ordnerinhalten], die xref:ec#[Auswertung von Logmeldungen] oder der Aufruf lokaler Skripte mit Werkzeugen wie xref:monitoring_jobs#[`mk-job`] aus verschiedensten Gründen nicht anwendbar sind.

Dann ist der Zeitpunkt gekommen, sich Gedanken um die Entwicklung eigener Checks und Plugins zu machen. Dieser Artikel soll Ihnen einen Überblick verschaffen, welche Arten von Checks wann genutzt werden können, welche Programmiersprachen zur Verfügung stehen und mit welchem Aufwand zu rechnen ist.

In manchen Fällen genügt es beispielsweise, ein Backup-Skript um wenige Zeilen zu erweitern, um Erfolg oder Misserfolg in einer gut in Checkmk darstellbaren Form auszugeben. Da einfachere Checks in vielen Fällen mit wenig Aufwand in komplexere umgewandelt werden können, raten wir dazu, mit der einfacheren Variante zu beginnen, wenn nicht bereits zu Beginn der Entwicklung abzusehen ist, dass die Grenzen bald erreicht sind.

== Erweiterungsmöglichkeiten mit eigenen Programmen

Die folgenden Unterpunkte zeigen, welche Verfahren in {CMK} möglich sind, eigene Erweiterungen zu integrieren und wo Datenerhebung und Auswertung erfolgt.

=== Lokale Checks

Die wahrscheinlich einfachste Art und Weise, {CMK} zu erweitern, sind xref:localchecks#[lokale Checks].
Ein Plugin, welches vom Agentenskript des überwachten Hosts ausgeführt wird, gibt in einer Zeile Namen, Zustand und weitere Informationen aus.
Für lokale Checks unterstützt {CMK} die automatische xref:glossar#service_discovery[Service-Erkennung].
Die Programmierung ist in beliebigen Sprachen möglich, ohne ein API erlernen zu müssen.

* *Ausführung:* Vollständig auf dem überwachten Host. Sie müssen selbst sicherstellen, dass gegebenenfalls auf allen Hosts, die einen lokalen Check erhalten, der passende Interpreter verfügbar ist.
* *Schwellwerte:* Ein Schwellwertpaar (für die Übergänge nach {WARN} respektive {CRIT}) kann von der {CMK} Site verwaltet werden.
* *Metriken:* Eine Metrik pro Service ist möglich, Einheiten können nicht explizit verwaltet werden, diese werden automatisch zugewiesen oder weggelassen.

=== Native {CMK}-Plugins 

xref:draft_devel_check_plugins#[Native {CMK}-Plugins]  bestehen immer aus zwei Komponenten: Ein xref:glossar#agent_plugin[Agentenplugin]  sammelt Rohdaten und filtert diese vor, bewertet sie aber nicht.
Diese Datensammlung kann in beliebigen Programmiersprachen erfolgen.
Sehr verbreitet ist die Ausgabe als JSON-Datei oder im CSV-Format.
Sie werden aber viele Agenten-Plugins sehen, die nur rohe Linux-Systembefehle aufrufen.

Auf dem {CMK}-Server findet dann die Auswertung in einem in Python geschriebenen Plugin, welches APIs von {CMK} nutzt, statt.
Die Ermittlung des Zustandes kann dabei sehr flexibel erfolgen, so ist die Verwendung unterer und oberer Schwellwerte möglich.
Zudem können mehrere Parameter zusammen einen Status bestimmen.
Des weiteren ist die Ermittlung von Trends und Einbeziehung älterer Werte möglich.
Native {CMK}-Plugins unterstützen die automatische Erstellung von xref:glossar#label[Labels] und die xref:inventory#[HW/SW-Inventur].

* *Ausführung:* Plugin zur Datensammlung in beliebiger Programmiersprache auf dem überwachten Host, weitere Auswertung unter Verwendung der Check-API auf dem {CMK}-Server.
* *Schwellwerte:* Beliebige Kombination von Schwellwerten für jeden Service.
* *Metriken:* Beliebig viele Metriken pro Service mit Einheiten.

=== Spezialagenten

Eine Sonderform der "echten" {CMK}-Plugins sind xref:datasource_programs#[Spezialagenten]: Hier sammelt kein Agenten-Plugin die Rohdaten ein, sondern ein Programm, das auf dem {CMK}-Server läuft und Daten aus einer anderen Quelle abfragt und in das Agentenformat von {CMK} umwandelt.
Spezialagenten kommen beispielsweise zum Einsatz, wenn ein zu überwachendes Gerät fürs Monitoring relevante Daten als JSON oder XML über eine REST-Schnittstelle bereitstellt.
Beispiele von bei {CMK} mitgelieferten Spezialagenten sind die Überwachung von xref:monitoring_aws#[AWS], xref:monitoring_azure#[Azure] oder xref:monitoring_vmware#[VMware].

Die Programmierung erfolgt in Python unter Nutzung eines API oder in der Variante Datenquellenprogramm in einer beliebigen Programmiersprache.
Für die auswertende Komponente gilt das für native Plugins gesagte.

* *Ausführung:* Plugin zur Datensammlung und weitere Auswertung auf dem {CMK}-Server.
* *Schwellwerte:* Beliebige Kombination von Schwellwerten für jeden Service.
* *Metriken:* Beliebig viele Metriken pro Service mit Einheiten.

=== SNMP-Plugins

Eine weitere Variante der nativen {CMK}-Plugins sind xref:snmp#[SNMP]-Plugins.
Der Unterschied besteht hier darin, dass keine Agentensektion angefordert und ausgewertet wird, sondern bestimmte SNMP-OIDs, deren Werte dann wie oben beschrieben – auch kombiniert – weiterverarbeitet werden.

* *Ausführung:* Datensammlung und weitere Auswertung auf dem {CMK}-Server.
* *Schwellwerte:* Beliebige Kombination von Schwellwerten für jeden Service.
* *Metriken:* Beliebig viele Metriken pro Service mit Einheiten.

Da SNMP Protokoll inhärent sehr ineffizient ist, raten wir, SNMP nur dann zu verwenden, wenn kein anderer Zugriff auf Monitoringdaten möglich ist.
Stellt ein Gerät beispielsweise die selben Daten auch über ein REST-API zur Verfügung, sollten Sie dafür einen Spezialagenten bauen.

=== Legacy Nagios Check-Plugins

An zwei Stellen in {CMK} finden Sie Nagios Check-Plugins:
Als xref:active_checks#[aktive Checks], um vom {CMK}-Server aus die Erreichbarkeit bestimmter Dienste zu prüfen und als MRPE-Erweiterung der xref:agent_windows.html#mrpe[Windows-] oder xref:agent_linux#mrpe[Linux-]Agenten, um lokal Dienste zu prüfen, die von außen nicht erreichbar sind – und für die kein lokaler Check oder ein vollwertiges {CMK}-Plugin verfügbar sind.
Die Programmierung ist in beliebigen Sprachen möglich.

* *Ausführung:* Vollständig auf dem überwachten Host (via MRPE) oder vollständig auf dem {CMK}-Server (aktiver Check).
* *Schwellwerte:* Schwellwerte nur bei Verwendung als aktive Checks.
* *Metriken:* Metriken nur bei Verwendung als aktive Checks.

Wegen diverser Nachteile wie umständlicher Fehlersuche empfehlen wir die Neuimplementierung nur, wenn vollumfängliche Kompatibilität zu Nagios erforderlich ist.
Verwenden Sie in allen anderen Fällen {CMK} native Plugins oder – bei einfachen Überprüfungen – lokale Checks.
Eine ausführliche Dokumentation der Ausgabeformate finden Sie auf link:https://www.monitoring-plugins.org/[Monitoring-Plugins.org^].

== Ergänzende Artikel

=== Das Spool-Verzeichnis

{CMK} stellt noch einen weiteren Mechanismus bereit, wie Agentendaten erzeugt werden können:
Lassen Sie ein Programm direkt eine Textdatei schreiben, welche das Format dis Agenten-Outputs enthält.
Im xref:spool_directory#[Spool-Verzeichnis] abgelegt überträgt der {CMK}-Agent den Inhalt dieser Datei mit dem restlichen Agenten-Output.

Mit dem Spool-Verzeichnis können Sie beispielsweise Backup-Skripte direkt bei Beendigung Status und Statistik für einen lokalen Check oder ein Check-Plugin schreiben lassen.
Dies erspart Umwege über die Auswertung von Logdateien.

Bei der Entwicklung eigener Plugins helfen Spool-Dateien, bestimmte Ausgaben Ihres Agentenplugins zu simulieren.

=== Der Piggyback-Mechanismus

Der xref:piggyback#[Piggyback-Mechanismus] (_piggyback_, englisch für _huckepack_) kommt dann zum Einsatz, wenn ein Host etwas über einen anderen weiß.
Eine speziell formatierte Agentensektion wird dann beim Auswerten der Agentenausgabe dem betreffenden Host zugeordnet.

Bei virtuellen Maschinen wird der Piggyback-Mechanismus genutzt, um von der Virtualisierungssoftware erhobene Daten mit den Daten aus dem Monitoring von innerhalb der virtuellen Maschine zusammenzuführen.

=== Checkmk-Erweiterungspakete (MKPs)

Wenn Sie eigene Erweiterungen programmiert haben und diese versionieren und schließlich weitergeben wollen, haben Sie die Möglichkeit, zusammengehörige Dateien in xref:mkps#[Checkmk-Erweiterungspaketen (MKPs)] zu bündeln.
Dieses Paketformat müssen Sie auch nutzen, wenn Sie planen, Erweiterungen über link:https://exchange.checkmk.com/[die Exchange^] anzubieten.

== Zu {CMK} beitragen

Wenn Sie selbst Erweiterungen programmieren, raten wir zunächst dazu, diese in link:https://exchange.checkmk.com/[die Exchange^] einzureichen.
Hier bleiben Sie Maintainer und Sie können unkompliziert neue Versionen bereitstellen.
Da die Anforderungen an Code-Qualität für die Exchange nicht so hoch sind, wie für mit Checkmk ausgelieferte Plugins, können Sie via Exchange neue Ideen unkompliziert mit einem breiten Publikum ausprobieren.

Sollten Sie irgendwann zum Entschluss kommen, dass Ihr Plugin fester Bestandteil von {CMK} werden soll, lesen Sie bitte link:https://github.com/Checkmk/checkmk/blob/master/CONTRIBUTING.md[Contributing to Checkmk^].
