// -*- coding: utf-8 -*-
// IGNORE % 
include::global_attr.adoc[]
= Local checks
:revdate: draft
:title: Local checks
:description: {CMK} can be easily extended even without much programming knowledge. Find out here how to provide your own script to an agent.
:keywords: local, check, checks

{related-start}
xref:wato_monitoringagents#[Monitoring agents]
ifdef::onprem[]
xref:datasource_programs#[Datasource programs]
endif::[]
link:https://checkmk.com/integrations[Catalog of Check Plug-ins^]
{related-end}


// This block replaces the following text
// start translation
////
== Warum überhaupt eigene Checks erstellen?

{CMK} überwacht durch die große Anzahl an mitgelieferten Check-Plugins bereits sehr viele relevante Daten.
Dennoch ist jede IT-Umgebung einzigartig, so dass sich oft sehr individuelle Anforderungen ergeben.
Mit den lokalen Checks (_local checks_) sind Sie in der Lage, durch kleine Erweiterungen des Agenten auf dem Ziel-Host schnell und einfach eigene Services zu erstellen.

Diese lokalen Plugins unterscheiden sich dabei in einem wesentlichen Punkt von anderen Checks:
Die Berechnung des Status erfolgt direkt auf dem Host, auf dem die Daten auch abgerufen werden.

ifdef::onprem[]
Dadurch entfällt die Erstellung von Checks in Python und Sie sind bei der Wahl der Skriptsprache völlig frei.
endif::[]
ifdef::saas[]
Ein großer Vorteil von lokalen Checks ist, dass in der {CMK}-Instanz kein Plugin installiert werden muss.
Lediglich eine Suche nach Services ist nötig.
Lokale Checks eignen sich daher sehr gut für sehr restriktiv verwaltete {CMK}-Installationen und {CE} (SaaS).
endif::[]
Zudem geben lokale Checks den _Server-Admins_ weitreichende Freiheiten.
_Monitoring-Admins_ müssen nur noch die Entscheidung treffen, _ob_ sie neue lokale Checks als Services aufnehmen.

[TIP]
====
Sie können den Mechanismus von lokalen Checks mit allen von Checkmk unterstützten Methoden des Transports von Agentendaten kombinieren:
xref:datasource_programs#[Datenquellen], xref:devel_special_agents#[Spezialagenten], xref:piggyback#[Piggyback] und xref:spool_directory#[Spool-Dateien].
Die Daten aus allen Quellen werden zusammengeführt, aber bei (versehentlicher) doppelter Vergabe des Service-Namens kommt es zu Konflikten.
Achten Sie daher auf eindeutige Service-Namen.
====
////
// end translation
// delete from here
== Why own checks?

{CMK} already monitors many types of relevant data using a large number of
its own standard check plug-ins.
Nevertheless, every IT environment is unique, so that often very specialized requirements can arise.
With *local checks* you have a facility to extend the agent on the target host for quickly and easily creating your own services.

These local plug-ins differ in one significant aspect from other checks:
the calculation of a status occurs directly in the host on which the data is
also retrieved.
In this way the complex creation of checks in Python is not needed and there is thus a completely free choice of coding language for scripts.

ifdef::saas[]
A big advantage of local checks is that no plug-in installation is needed within the {CMK} site.
Only a service scan is necessary.
Local checks thus are well suited for restrictively managed {CMK} installations and {CE} (SaaS).
endif::[]
// delete to here


[#simple_check]
== Writing a simple local check

[#syntax]
=== Creating the script

A local check can be written in any programming language supported by the target host.
The script must be constructed so that each check produces a status line consisting of four parts.
Here is an example:

[{shell}]
----
0 "My service" myvalue=73 My output text which may contain spaces
----

The four parts are separated by blanks and have the following meanings:

[cols="25,20,~",options="header"]
|===
|Example value |Meaning |Description
|`0` |Status |The status of the service is given as a number: `0` for {OK}, `1` for {WARN}, `2` for {CRIT} and `3` for {UNKNOWN}.
Alternatively, the status can also be xref:dynamic_state[calculated dynamically]: then the number is replaced by a `P`.

|`"My service"` |Service name |The service name as shown in {CMK}, in the output of the check in double quotes.

|`myvalue=73;65;75` |Value and metrics |Metric values for the data.
More information about the construction can be found in the chapter on xref:metrics[metrics].
Alternatively a minus sign can be coded if the check produces no metrics.

|`My output text which may contain spaces` |Status detail |Details for the status as they will be shown in {CMK} in the [.guihint]#Summary# field.
This part can also contain blanks.
|===

There must always be *exactly one space* (ASCII `0x20`) between the four parts of this output.
Within the status details, any spaces can be used in any order.

[IMPORTANT]
====
Deviations from the specification just described _may_ work, but _must_ not.
Future versions of {CMK} may enforce this output format and ignore deviating local checks.
====

If you are unsure about a possible output, you can simply test it by writing a small script with the `echo` command.
Insert the output you want to test into the `echo` command.
Our example uses double quotation marks on the outside, as variables inside (environment variables and those set in the script) are evaluated.
As a result, you must enclose the quotation marks for the service name with `\` so that these characters are not interpreted by the shell as the end and beginning of a string (and thus removed from the output):

.mylocalcheck
[{file}]
----
#!/bin/bash
echo "0 \"My 1st service\" - This static service is always OK"
----

For Windows hosts, such a script will look very similar to this:

.mylocalcheck.bat
[{file}]
----
@echo off
echo 0 "My 1st service" - This static service is always OK
----

Both scripts produce the same result in the output:

[{shell}]
----
0 "My 1st service" - This static service is always OK
----

For {CMK} only this output is relevant, not how you created this output.

By the way -- you can write any number of outputs in a script.
Each output line will have its own service created in {CMK}.
Therefore, no newline characters are allowed in the output -- unless they are masked, for example for a xref:multi-line[multi-line output] in {CMK}.

How it can be checked whether the local script will be correctly invoked by the agent can be seen in the xref:diagnose[Error analysis].

include::include_special_chars.asciidoc[]


[#distribute]
=== Distributing the script

Once the script has been written it can be distributed to the appropriate hosts.
The path used will depend on the operating system.
A list of path names can be found in xref:folders_script[Files and directories] below.

Don't forget to make the script executable on Unix-like systems.
The path shown in this example is for Linux (agent package with default settings):

[{shell}]
----
{c-root} chmod +x /usr/lib/check_mk_agent/local/mylocalcheck
----

ifdef::onprem[]
If you use the xref:wato_monitoringagents#bakery[Agent Bakery], the script can be distributed with a rule-based procedure.
More on rule-creation can be found in the chapter xref:bakery[Distribution via the Agent Bakery].
endif::[]


[#add_service]
=== Adding the service to the monitoring

At every invocation of the {CMK} agent the local check contained in the script will also be executed and appended to the agent's output.
The xref:glossar#service_discovery[service discovery] also functions automatically like with other services:

image::localchecks_services.png[alt="The local check found by the service discovery."]

Once the service has been added to the monitoring and the changes have been activated, the implementation of the self-created service with the aid of a local check will be complete.
Should a problem arise during the service discovery, the xref:diagnose[Error analysis] can be of help.


// This block replaces the following text
// start translation
////
[#metrics]
== Metriken

[#metrics_intro]
=== Metriken festlegen

Sie können in einem lokalen Check auch Metriken festlegen.
Die kürzest mögliche Syntax für Metrikdaten ist:

[{shell}]
----
metricname=value
----

wobei `value` der aktuelle Wert ist.

Die vollständige Syntax für Metrikdaten lautet:

[{shell}]
----
metricname=value;warn;crit;min;max
----

Hier legen `warn` und `crit` die (oberen) Schwellwerte fest.
Damit diese Schwellwerte auch im Graphen dargestellt werden, muss xref:dynamic_state[dynamische Auswertung] aktiviert sein (Status `P`).
Die Berechnung des Zustands erfolgt dann durch {CMK}.
Die zuletzt angegebenen Parameter für `min` und `max` fixieren den Wertebereich.

Ein vollständiges Beispiel kann demnach so aussehen:

[{shell}]
----
count=73;80;90;0;100
----

Die Werte werden mit Semikolon getrennt.
Wird ein Wert nicht benötigt, so bleibt das Feld leer bzw. wird am Ende weggelassen, wie im Folgenden für `warn`, `crit` und `max`:

[{shell}]
----
count=42;;;0
----

[TIP]
====
ifdef::onprem[]
In den kommerziellen Editionen
endif::[]
ifdef::saas[]
In {CE}
endif::[]
können die Werte für `min` und `max` zwar gesetzt werden – aber nur aus Kompatibilitätsgründen.
Die Begrenzung des zugehörigen Graphen auf einen bestimmten Wertebereich hat in den kommerziellen Editionen keine Auswirkungen.
====


[#metricname]
=== Namen und Einheiten von Metriken

Metrikdefinitionen für lokale Checks unterscheiden sich nicht von den Metrikdefinitionen bei anderen Arten von Checks.
Letztlich haben Sie
ifdef::onprem[]
drei
endif::[]
ifdef::saas[]
zwei
endif::[]
Möglichkeiten, Metriken mit Einheiten und gut verständlichen Namen zu versehen:

* Sie greifen auf vorhandene Metrikdefinitionen zu, die für den benötigten Zweck „passen“.
* Sie erstellen eigene Metriken _ad-hoc_ und eindeutig – dies ist oft ausreichend für reine Zähler.
ifdef::onprem[]
* Sie erstellen eigene Metriken und hinterlegen eine Metrikdefinition – so erhalten Sie die höchste Flexibilität.
endif::[]


[#metrics_reuse]
==== Vorhandene Metrikdefinitionen verwenden

Der einfachste Weg zu passenden Einheiten, einer automatisch angepassten Legende und oft einem Perf-O-Meter besteht in der Verwendung vorhandener Metrikdefinitionen.
In diesem Artikel verwenden einige Beispiele die Bezeichner `humidity` oder `temperature`.
Für beide (link:https://github.com/Checkmk/checkmk/blob/2.4.0/cmk/plugins/collection/graphing/humidity.py[humidity^] und link:https://github.com/Checkmk/checkmk/blob/2.4.0/cmk/plugins/collection/graphing/temperature.py[temperature^]) existieren vordefinierte Metrikdefinitionen, welche die Metriken mit den korrekten Einheiten versehen.
In beiden Fällen stellt die Metrikdefinition ein Perf-O-Meter bereit und die Legenden der Graphen zeigen dann _Grad Celsius_ und _relative Luftfeuchte in Prozent._

ifdef::onprem[]
Die wichtigsten mitgelieferten Metrikdefinitionen können Sie in `~/lib/python3/cmk/plugins/collection/graphing` (link:https://github.com/Checkmk/checkmk/tree/{current-major}/cmk/plugins/collection/graphing[GitHub^]) nachschlagen, weitere unter `~/lib/python3/cmk/plugins/*/graphing` (link:https://github.com/Checkmk/checkmk/tree/{current-major}/cmk/plugins/[GitHub^]) und die verwendeten Einheiten in `~/lib/python3/cmk/gui/plugins/metrics/unit.py` (link:https://github.com/Checkmk/checkmk/blob/{current-major}/cmk/gui/plugins/metrics/unit.py[GitHub^]).
endif::[]
ifdef::saas[]
Die wichtigsten mitgelieferten Metrikdefinitionen können Sie in der link:https://github.com/Checkmk/checkmk/tree/{current-major}/cmk/plugins/collection/graphing[_Graphing Collection_ auf GitHub^] nachschlagen, speziellere in den jeweiligen link:https://github.com/Checkmk/checkmk/tree/{current-major}/cmk/plugins/[Ordnern unter _Graphing_ auf GitHub^] und die verwendeten Einheiten in der Datei link:https://github.com/Checkmk/checkmk/blob/{current-major}/cmk/gui/plugins/metrics/unit.py[`unit.py` auf GitHub^].
endif::[]
Die Suche nach exakt passenden Metrikdefinitionen lohnt oft, da {CMK} für zusammengehörige Metriken auch kombinierte Graphen bereitstellt.


[#metrics_adhoc]
==== Metriken ad-hoc definieren

In den ersten Beispielen dieses Artikels haben wir Metriknamen wie `myvalue`, `count` oder `metricname` verwendet.
Ohne passende Metrikdefinition werden diese in der Legende des Graphen mit einem großen Anfangsbuchstaben versehen und Unterstriche werden durch Leerzeichen ersetzt.
Aus `outgoing_queue_size` wird also das gut lesbare [.guihint]#Outgoing queue size#.
Da ein reiner Zähler keine Einheit benötigt, erfüllt hier bereits der sinnvoll gewählte Identifikator ohne zusätzliche Metrikdefinition den Zweck.
Werden Einheiten benötigt, müssen Sie diese gegebenenfalls mit in den Namen packen.

Problematisch wird es, wenn der Versuch, eine Metrik ad-hoc zu definieren, versehentlich den im letzten Abschnitt erklärten Effekt hat und eine vorhandene Metrikdefinition zuweist.
Maximale Verwirrung kann vor allem dann auftreten, wenn Einheiten nicht zusammenpassen, beispielsweise eine mitgelieferte Metrik eine prozentuale Skala mit Fließkommazahlen zwischen 0 und 100{nbsp}% verwendet, der Wertebereich Ihres lokalen Checks aber eine nach oben offene Anzahl als Festkommazahl liefert.
Oder Sie haben eine Warteschlange für gegenwärtige Anfragen (_Current requests queue_), welche Sie einfach `current` nennen wollen – das Ergebnis wäre die Zuweisung der Metrikdefinition für link:https://github.com/Checkmk/checkmk/blob/2.4.0/cmk/plugins/collection/graphing/current.py[Stromstärke^].

Hier wäre also `current_requests_queue` eine viel bessere Wahl.
Ganz sicher gehen Sie mit einem zusätzlichen Präfix – etwa: `mycompany_current_requests_queue`.


ifdef::onprem[]
[#metrics_custom]
==== Metrikdefinitionen selbst schreiben

Falls Sie spezielle Anforderungen haben, zum Beispiel Graphen mit Legende und Perf-O-Meter benötigen, sind eigene Metrikdefinitionen erforderlich.
Lesen Sie dazu das Metriken betreffende Kapitel xref:devel_check_plugins#metrics_advanced[im Artikel zur Programmierung agentenbasierter Check-Plugins.]
endif::[]


[#multiple_metrics]
=== Mehrere Metriken

Sie können auch mehrere Metriken ausgeben lassen.
Diese werden dann durch das "Pipe"-Zeichen (`|`) getrennt, zum Beispiel so:

[{shell}]
----
count1=42|count2=23
----

Auf Windows-Hosts müssen Sie diesen Pipes im Skript noch einen Zirkumflex (`^`) voranstellen, damit diese Pipes auch in der Ausgabe ankommen:

.mylocalcheck.bat
[{file}]
----
@echo off
echo 0 "My 2nd service" count1=42^|count2=23 A service with 2 graphs
----

Eine komplette *Ausgabe* mit zwei Metriken sieht dann etwa so aus:

[{shell}]
----
{c-root} /usr/lib/check_mk_agent/local/mylocalcheck
0 "My 2nd service" count1=42|count2=23 A service with 2 graphs
----

Nachdem Sie auch den neuen Service ins Monitoring aufgenommen haben, sehen Sie in der Service-Liste im Feld [.guihint]#Summary# den Text zum Statusdetail.
Nach Anklicken des Services wird die Seite mit den Service-Details gezeigt.
Die Metriken zeigt das Feld [.guihint]#Details,# und darunter sehen Sie die von {CMK} automatisch erzeugten Service-Graphen:

image::localchecks_graphs2.png[alt="Die Service-Details mit den beiden Graphen."]

[TIP]
====
Dieses Beispiel nutzt Auswertung auf dem Host (`0`, `1` oder `2`) statt xref:dynamic_state[dynamischer Auswertung] (`P`).
Eventuell zusätzlich übergebene Schwellwerte würden hier im Graphen ignoriert werden.
====


[#dynamic_state]
=== Status dynamisch berechnen lassen

In den vorherigen Kapiteln haben Sie erfahren, wie Sie Werte für Metriken übergeben und damit Graphen erzeugen können.
Der nächste naheliegende Schritt ist es nun, zusätzlich übergebene Schwellwerte für eine dynamische Berechnung des Service-Zustands zu nutzen.
{CMK} bietet genau diese Möglichkeit, um die Aufbereitung der erhaltenen Daten konsistent mit vielen über Plugins berechneten Zuständen zu machen.

Wenn Sie im ersten Feld der Ausgabe, das den Status bestimmt, statt einer Ziffer den Buchstaben `P` übergeben, wird der Service-Zustand anhand der übergebenen Schwellwerte berechnet.
Zusätzlich zum Ist-Wert werden dann auch die übergebenen Schwellwerte als gelbe und rote Linie im Graphen angezeigt.

[TIP]
====
Die dynamische Berechnung bedeutet _nicht_, dass Schwellwerte mit in {CMK} gesetzten Monitoring-Regeln angepasst werden können.
Es werden immer die im lokalen Check mitgelieferten Schwellwerte zur Berechnung herangezogen.
====

Eine Ausgabe würde dann so aussehen:

[{shell}]
----
{c-root} /usr/lib/check_mk_agent/local/mylocalcheck
P "My 1st dynamic service" count=40;30;50 Result is computed from two threshold values
P "My 2nd dynamic service" - Result is computed with no values
----

&#8230; und die Anzeige in einer Service-Ansicht so:

image::localchecks_dynsrv.png[alt="Die Service-Liste mit zwei dynamisch berechneten Services."]

Die Anzeige unterscheidet sich in zwei Punkten von derjenigen, die bisher zu sehen war:

* Für Services im Zustand {WARN} oder {CRIT} zeigt die [.guihint]#Summary# des Services alle wichtigen Informationen der Metriken (Name, Wert, Schwellwerte).
So können Sie immer nachvollziehen, wie dieser Zustand aus einem Wert berechnet wurde.
Für alle anderen Zustände werden die Metrikinformationen nur im Feld [.guihint]#Details# angezeigt.

* Wenn keine Metriken übergeben werden, ist der Service-Zustand immer {OK}.


[#flexible_evaluation]
==== Wechsel zwischen dynamischer und statischer Zustandsermittlung

Es kann sinnvoll sein, in dem Skript, das den lokalen Check bereitstellt, zwischen dynamischer und statischer Zustandsermittlung zu wechseln.
Nehmen wir als Beispiel ein Backup-Skript, welches eine xref:spool_directory#[Spool-Datei] im Format eines lokalen Checks schreibt.
Dieses Skript sollte `P` für die Zustandsermittlung nach Backup-Dauer schreiben:

[{shell}]
----
P "Backup stuff" duration=2342;1800;3600 Successfully created the backup. Good luck restoring.
----

Schlägt das Backup aber nach kurzer Zeit fehl, wird der Status durch den Rückgabewert des Backup-Skripts und nicht durch Schwellwerte bestimmt.
In diesem Fall _muss_ es den Status setzen.

// MFS: "Nuff said." ist Jugendsprache (um 1993) für "enough said".
[{shell}]
----
2 "Backup stuff" duration=123;1800;3600 Backup failed. Nuff said.
----

Dass in diesem Fall keine Schwellwerte im Graphen angezeigt werden, ist nur sinnvoll.
Denn nicht die _benötigte Dauer_ bis zum (fehlgeschlagenen) Backup ist hier relevant, sondern die _Tatsache, dass_ es nicht erfolgreich war.


[#upper_lower_thresholds]
=== Obere und untere Schwellwerte

Manche Parameter haben nicht nur obere, sondern auch untere Schwellwerte.
Ein Beispiel dafür ist die Luftfeuchtigkeit.
Für solche Fälle bietet der lokale Check die Möglichkeit, jeweils zwei Schwellwerte für die Zustände {WARN} und {CRIT} zu übergeben.
Sie werden durch einen Doppelpunkt getrennt und stellen jeweils den unteren und den oberen Schwellwert dar.

In der allgemeinen Syntax sieht das so aus:

[{shell}]
----
metricname=value;warn_lower:warn_upper;crit_lower:crit_upper
----

&#8230; im Beispiel so:

[{shell}]
----
{c-root} /usr/lib/check_mk_agent/local/mylocalcheck
P "My 3rd service" humidity=37;40:60;30:70 A service with lower and upper thresholds
----

&#8230; und in der Anzeige einer Service-Ansicht so:

image::localchecks_lower.png[alt="Ein Service mit Zustandsbestimmung aus unteren und oberen Schwellwerten."]

Falls es Ihnen nur um untere Schwellwerte geht, lassen Sie die Felder der oberen Schwellwerte weg:

[{shell}]
----
{c-root} /usr/lib/check_mk_agent/local/mylocalcheck
P "My 4th dynamic service" count_lower=37;40:;30: A service with lower thresholds only
----

Mit dieser Ausgabe legen Sie fest, dass der Service bei einem Wert kleiner 40 {WARN} und kleiner 30 {CRIT} werden soll: beim festgelegten Wert 37 wird der Service also den {WARN}-Zustand erhalten.

[TIP]
====
Das Metrik- und Graphing-System von {CMK} ist aufgrund von Abwägungen zugunsten der Einfachheit auf obere Schwellwerte eingeschränkt. 
Dies bedeutet, dass zwar die Ermittlung des Status eines Services erwartungsgemäß funktioniert, aber die in der Metrik- und Graphing-Komponente dargestellten Informationen untere Schwellwerte ignorieren.
Daher fehlen in der {CMK}-GUI bei ausschließlicher Verwendung unterer Schwellwerte Dinge wie gelbe und rote Linien in Graphen, Perf-O-Metern und [guihint]#Service performance data# komplett.
====
////
// end translation
// delete from here
[#metrics]
== Metrics


[#metrics_intro]
=== Defining metrics

With a local script metrics can also be set.
To enable them the value of the check must always return `P`.
Then the state will be calculated by {CMK}.

The general syntax for this data is as follows:

[{shell}]
----
metricname=value;warn;crit;min;max
----

where `value` is the current value, `warn` and `crit` set the (upper) thresholds, and `min` and `max` fix the range of values -- for example like this:

[{shell}]
----
count=73;80;90;0;100
----

The values are separated with a semicolon.
All values except `value` are optional.
If a value is not required, the field remains empty or is omitted at the end, as in the following for `warn`, `crit` and `max`:

[{shell}]
----
count=42;;;0
----

*Note:* In the commercial editions the values for `min` and `max` can indeed be set -- but only for compatibility reasons.
Limiting the associated graph to a certain range of values has no effect in the commercial editions.


[#metricname]
=== Metric name

You should take special care when choosing the identifier of this metric - called `metricname` in the example here.
We recommend prefixing the identifiers to prevent overlap with metrics already present in {CMK}.

So, for example, instead of simply calling a metric that represents the number of
currently waiting requests in a queue you are monitoring, 'current',
we recommend a clearer identifier with a prefix - such as: `mycompany_current_requests`.

If you were to choose an identifier here that already exists in {CMK}, the
representation of your metrics in graphs would be overwritten with the
definitions that already exist.

Of course, you can also reuse an existing metric from {CMK} intentionally. So,
for a metric for an electrical current you could simply use the identifier
`current` in your local check. In case of doubt, however, you have to look up
the definition of this metric in `~/lib/python3/cmk/gui/plugins/metric` by
yourself.

[{shell}]
----
{c-omd} grep -r -A 4 'metric_info\["current"\]' ./lib/python3/cmk/gui/plugins/metrics/
----


[#multiple_metrics]
=== Multiple metrics

You can also have several metrics output.
These are then separated by the 'pipe' character `|`, for example like this:

[{shell}]
----
count1=42|count2=23
----

*Attention:* On Windows hosts you have to prefix a caret (`^`) to the pipe in the script, so that it does not get interpreted.

.mylocalcheck.bat
[{file}]
----
@echo off
echo 0 "My 2nd service" count1=42^|count2=23 A service with 2 graphs
----

A complete *output* with two metrics will look like this:

[{shell}]
----
{c-root} /usr/lib/check_mk_agent/local/mylocalcheck
0 "My 2nd service" count1=42|count2=23 A service with 2 graphs
----

After you have also included the new service in the monitoring, you will see the text for the status detail in the [.guihint]#Summary# field in the service list.
After clicking on the service, the page with the service details is displayed.
The metrics are shown in the [.guihint]#Details# field and below this you will see the service graphs automatically generated by {CMK}:

image::localchecks_graphs2.png[]


[#dynamic_state]
=== Calculating status dynamically

In the previous chapters, you learned how to set threshold values for metrics and how to display them in the graphs.
The next obvious step is to use these thresholds for a dynamic calculation of the service state.
 {CMK} provides exactly these options for extending a local check.

If you pass the letter `P` instead of a number in the first field of the output that determines the state, the service's status will be calculated on the basis of the threshold as provided.

An output will then look like this:

[{shell}]
----
{c-root} /usr/lib/check_mk_agent/local/mylocalcheck
P "My 1st dynamic service" count=40;30;50 Result is computed from two threshold values
P "My 2nd dynamic service" - Result is computed with no values
----

&#8230; and the display in a service view like this:

image::localchecks_dynsrv.png[]

The display differs in two points from the one that we saw earlier:

* For services in the {WARN} or {CRIT} state, the [.guihint]#Summary# of the service shows all important information about the metrics (name, value, thresholds).
This means you can always see how this status was calculated from a value.
For all other states, the metric information is only displayed in the [.guihint]#Details# field.

* If no metrics have been passed the service's status will always be {OK}.


[#upper_lower_thresholds]
=== Upper and lower thresholds

Some parameters have not only an upper threshold but also a lower threshold.
An example is humidity.
For such cases the local check has the option of passing two threshold values each for the states {WARN} and {CRIT}.
They are separated by a colon and represent the lower and the upper threshold value respectively.

In the general syntax, it looks like this:

[{shell}]
----
metricname=value;warn_lower:warn_upper;crit_lower:crit_upper
----

&#8230; and in the example like this:

[{shell}]
----
{c-root} /usr/lib/check_mk_agent/local/mylocalcheck
P "My 3rd service" humidity=37;40:60;30:70 A service with lower and upper thresholds
----

&#8230; and in the display of a service view like this:

image::localchecks_lower.png[]

If you are only concerned with lower thresholds, leave out the upper threshold fields:

[{shell}]
----
{c-root} /usr/lib/check_mk_agent/local/mylocalcheck
P "My 4th dynamic service" count_lower=37;40:;30: A service with lower thresholds only
----

With this output, you specify that the service should become {WARN} if the value is less than 40 and {CRIT} if it is less than 30: thus, at the specified value of 37, the service will get the {WARN} state.
// delete to here


[#multi-line]
=== Multi-line outputs

The option to spread an output over multiple lines is also available.
Because {CMK} runs under Linux you can work with the Escape sequence `'\n'` in order to force a line-break.
Even if due to the scripting language the backslash itself needs to be escaped, it will be correctly interpreted by {CMK}:

[{shell}]
----
{c-root} /usr/lib/check_mk_agent/local/mylocalcheck
P "My service" humidity=37;40:60;30:70 My service output\nA line with details\nAnother line with details
----

In the service's details these additional lines will be visible under the [.guihint]#Summary#:

image::localchecks_srv_details.png[alt=“The service details with a multi-line output.”]


[#cache]
== Executing asynchronously

The output of local checks, like that of agent plug-ins, can be _cached_.
This can be necessary if a script has a longer processing time.
Such a script is then executed asynchronously and only in a defined time interval and the last output is cached.
If the agent is queried again before the time expires, it uses this cache for the local check and returns it in the agent output.

[TIP]
====
Caching is only available for AIX, FreeBSD, Linux, OpenWrt and Windows.
// This block is new
// start translation
////
Nutzen Sie  auf anderen Plattformen Cronjobs in Kombination mit dem xref:spool_directory#[Spool-Verzeichnis].
////
// end translation
====


[#cache_linux]
=== Configuring Linux

Under Linux or another Unix-like operating system, any plug-in can be executed asynchronously.
For a local check, the necessary configuration is very similar to that of a xref:agent_linux#async_plugins[plug-in].
To do this, create a subdirectory called the number of seconds you want the output to be cached and put your script in that subdirectory.

In the following example, the local check will be executed only every 10 minutes (600 seconds):

[{shell}]
----
{c-root} /usr/lib/check_mk_agent/local/600/mylocalcheck
2 "My cached service" count=4 Some output of a long running script
----

The cached data is written to a xref:folders_cache[cache directory].

For a service that provides cached data, the cache-specific information is added to the service view:

image::localchecks_srv_cached.png[alt=“A service that outputs cached data.”]


[#cache_windows]
=== Configuring Windows

Under Windows, the configuration is also analogous to that of a xref:agent_windows#customizeexecution[agent plug-in].
Instead of using a special subdirectory as with Linux & Co, the options are set in a configuration file:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
local:
    enabled: yes
    execution:
        - pattern     : $CUSTOM_LOCAL_PATH$\mylocalcheck.bat
          async       : yes
          run         : yes
          cache_age   : 600
----

As you can see above, under Windows you can configure the asynchronous execution (with `async`) and the time interval (with `cache_age`) separately.

ifdef::onprem[]
Alternatively, on Windows you can also do the configuration in the xref:bakery[Agent Bakery].
endif::[]


ifdef::onprem[]
[#bakery]
== Distribution via the Agent Bakery

{cee-only}
If you are already using the xref:wato_monitoringagents#bakery[Agent Bakery] in the commercial editions, you can also distribute the scripts with local checks to several hosts this way.

To do this, first create the directory `custom` on the {CMK} server as site user below `~/local/share/check_mk/agents/` and in it a subdirectory tree for each package of local checks:

[{shell}]
----
{c-omd} cd ~/local/share/check_mk/agents
{c-omd} ~/local/share/check_mk/agents$ mkdir -p custom/mycustompackage/lib/local/
----

The package directory in the above example is `mycustompackage`.
Below that, the `lib` directory flags the script as a plug-in or as a local check.
The subsequent `local` directory then allocates the file explicitly.
Place the script with the local check in this directory.

[TIP]
====
On Linux, you can configure asynchronous execution analogously as described in the xref:cache[previous chapter] by now creating a directory under `custom/mycustompackage/lib/local/` with the number of seconds of the execution interval and placing the script there.
Under Windows, you can use the rule sets [.guihint]#Set execution mode for plug-ins and local checks# and [.guihint]#Set cache age for plug-ins and local checks#.
These and other rule sets for local checks under Windows can be found in the Agent Bakery under [.guihint]#Agent rules > Windows agent options#.
====

In the configuration environment of {CMK}, the package directory `mycustompackage` will be shown as a new option:
Open [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX#, create a new rule with [.guihint]#Agents > Agent rules > Generic agent options > Deploy custom files with agent# and select the newly-created package:

image::localchecks_custom.png[alt=“Rule for storing the script files in a package directory.”]

{CMK} will then autonomously integrate the local check correctly into the
installation packet for the appropriate operating system.
After the changes have been activated and the agent baked, the configuration will be complete.
Now the agents only need to be distributed.
endif::[]


[#diagnose]
== Error analysis

=== Testing the script

If you run into problems with a self-written script, you should check the following potential error sources:

* Is the script in its correct xref:folders_script[directory]?

* Is the script executable, and are the access permissions correct?
This is especially relevant if you are not running the agent or script under root or the LocalSystem account.

* Is the output compliant with the given syntax?
The output of the local check must conform to the syntax as described in the chapters xref:syntax[Creating the script] and xref:metrics[Metrics].
Otherwise, error-free execution cannot be guaranteed.
+
Problems and errors can arise in particular when a local check is intended to perform a task that requires a xref:devel_intro#[full-fledged check plug-in], for example when the output of the local check itself contains a _section header_ or the definition of a host name as used when transporting xref:glossar#piggyback[piggyback] data.

[TIP]
====
Under Linux, when the agent script or the plug-in is called directly in a shell, different link:https://wiki.debian.org/EnvironmentVariables[environment variables^] may be available than when called by the Agent Controller of the xref:wato_monitoringagents#agents[{CMK} agent].
Under Windows, the Agent Controller also runs under the LocalSystem account, but the call in the terminal is made under a normal user or administrator.
In addition to the different environment, this can mean that permissions are missing.
In order to be able to analyze the output from the agent script as closely as possible to the conditions under which the {CMK} agent is called, you should use the xref:agent_linux#agent_ctl_dump[Agent Controller in dump mode] if possible.
====


=== Testing agent output on the target host

If the script itself is correct, the agent can be run on the host.
With Unix-like operating systems such as Linux, BSD, etc., the command below is available.
With the `-A` option the number of additional lines to be displayed following a hit can be specified.
This number can be customized to suit the number of expected output lines:

[{shell-raw}]
----
{c-root} cmk-agent-ctl dump | grep -v grep | grep -A2 "<<<local"
<<<local:sep(0)>>>
P "My service" humidity=37;40:60;30:70 My service output\nA line with details\nAnother line with details
cached(1618580356,600) 2 "My cached service" count=4 Some output of a long running script
----

In the last line, you can recognize a cached service by the preceding `cached` information with the current Unix time and the execution interval in seconds.

Under Windows, you can achieve a very similar result with PowerShell and the `Select-String` 'cmdlet' as with the `grep` command under Linux. In the following command, the two digits behind the `Context` parameter determine how many lines are to be output before and after the hit:

[{shell-raw}]
----
PS C:\Program Files (x86)\checkmk\service> ./cmk-agent-ctl.exe dump | Select-String -Pattern "<<<local" -Context 0,3
> <<<local:sep(0)>>>
  0 "My 1st service" - This static service is always OK

  cached(1618580520,600) 1 "My cached service on Windows" count=4 Some output of a long running script
----

[TIP]
====
Depending on the environment, programming language used, Windows version and some other conditions, you are often confronted with the _UTF-16_ character set under Windows.
In addition, the combination of _Carriage Return_ and _Line Feed_ for line breaks is frequently encountered there.
However, {CMK} as a Linux application expects _UTF-8_ and simple _Line Feeds_ without any ifs and buts.
Our article on the spool directory includes xref:spool_directory#charset[a chapter] explaining the troubleshooting of character set-related problems.
====


=== Testing agent output on the {CMK} server

ifdef::onprem[]
As a last step the processing of the script output can also be tested on the {CMK} server with the `cmk` command -- once for the service discovery:

[{shell}]
----
{c-omd} cmk -IIv --detect-plugins=local mycmkserver
Discovering services and host labels on: mycmkserver
mycmkserver:
...
+ EXECUTING DISCOVERY PLUGINS (1)
  [green]#2# local
[green]#SUCCESS# - Found 2 services, no host labels
----

&#8230; and also the processing of the service output with a similar command:

[{shell}]
----
{c-omd} cmk -nv --detect-plugins=local mycmkserver
+ FETCHING DATA
Get piggybacked data
My cached service    [red]#Some output of a long running script(!!), Cache generated 6 minutes 30 seconds ago, cache interval: 10 minutes 0 seconds, elapsed cache lifespan: 68.71%#
My service           [yellow]#My service output, Humidity: 37.00 (warn/crit below 40.00/30.00)(!)#
[agent] Success, [piggyback] Success (but no data found for this host), execution time 3.3 sec ...
----

For both commands we have shortened the output by lines not relevant for this topic.
endif::[]

ifdef::saas[]
To identify whether and how the output of the local check is contained in the agent output,
endif::[]
ifdef::onprem[]
Alternatively,
endif::[]
you can open the service list of the host in the monitoring, navigate to the service [guihint]#Check_MK# and its column [guihint]#Icons#.
There you can choose the menu entry [guihint]#Download agent output# to retrieve a text file containing the complete agent output.

If there are errors in a local check, {CMK} will identify them in the service output.
This applies as well for erroneous metrics, for false or incomplete information in the script output, or an invalid status.
These error messages should aid in quickly identifying errors in a script.


// This block replaces the following text
// start translation
////
[#folders]
== Dateien und Verzeichnisse

Alle angegebenen Pfade beziehen sich auf mit Standardkonfiguration gepackte Installationspakete.
Falls Sie ein nicht gepacktes Agentenskript installiert oder die Installationsverzeichnisse per Bakery-Regel angepasst haben, schlagen Sie die Pfade im Skript selbst nach, respektive passen Sie diese auf Ihre Konfiguration hin an.

[#folders_script]
=== Skript-Verzeichnis auf dem Ziel-Host

In diesen Verzeichnissen legen Sie lokale Checks ab.
Lokale Checks können beliebige ausführbare Dateien sein.

[cols="50,~",options="header"]
|===
|Pfad |Betriebssystem
|`/usr/lib/check_mk_agent/local/` | AIX, Linux und Solaris
|`%ProgramData%\checkmk\agent\local` |Windows
|===


[#folders_cache]
=== Cache-Verzeichnis auf dem Ziel-Host

Hier werden zwischengespeicherte Daten einzelner Sektionen, u.a. der `local` Sektion, abgelegt und dem Agenten, solange die Daten gültig sind, bei jeder Ausführung wieder angehängt.

[cols="50,~",options="header"]
|===
|Pfad |Betriebssystem
|`/var/lib/check_mk_agent/cache/` | AIX, Linux und Solaris
|===

////
// end translation
// delete from here
[#folders]
== Files and directories

[#folders_script]
=== Script directory on the target host

[cols="65,~"]
|===
|Path name |Operating system

|`/usr/check_mk/lib/local/` |AIX
|`/usr/local/lib/check_mk_agent/local/` |FreeBSD
|`/usr/lib/check_mk_agent/local/` |HP-UX, Linux, OpenBSD, OpenWrt and Solaris
|`%ProgramData%\checkmk\agent\local` |Windows
|===


[#folders_cache]
=== Cache directory on the target host

Cached data of individual sections, including the `local` section, is stored here and appended to the agent again with each execution, as long as the data is valid.

[cols="65,~"]
|===
|Path name |Operating system

|`/tmp/check_mk/cache/` |AIX
|`/var/run/check_mk/cache/` |FreeBSD
|`/var/lib/check_mk_agent/cache/` |Linux, OpenWrt and Solaris
|===
// delete to here
