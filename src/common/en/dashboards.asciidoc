// -*- coding: utf-8 -*-
// IGNORE Filesystem alerters pre
include::global_attr.adoc[]
= Dashboards
:revdate: 2025-02-20
:title: Dashboards
:description: {CMK} dashboards are extremely flexible and they automatically adapt to the available space. Read here how to interpret and create dashboards.

{related-start}
xref:views#[Host and service views]
xref:graphing#[Measured values and graphing]
{related-end}


[#intro]
== Introduction

=== What are dashboards actually?

Dashboards are the central displays for your monitoring in {CMK}.
They provide you with both overviews and detailed insights into specific areas.
For example, you can visualize the general status of entire network segments, but also simply list which services are generating a load or overload of certain system resources.
{CMK} comes with some standard dashboards, such as for problems, {CMK} server statistics and of course a general overview.
However, you can also create your own completely individual dashboards from scratch.

In this article you will learn which tools are available for this and how exactly you can use them to create your own overviews.
First, we will show you how xref:features[dashboards] work and how to work with them.
Afterwards, we will shed light on the basics of xref:dashboard_layout_config[layout and configuration], in order to build on this and step by step create a complete, simple xref:example[example dashboard].
Then follows a short summary on the topic of xref:filter[filters], as these can be set in a number of different locations.
It continues with a presentation of all of those already built-in xref:builtins[dashboards and dashlets] -- the individual building blocks for overviews.
Finally, there are tips on how to deal with errors and problems.

By the way, you can see the most striking dashboard directly on the {CMK} start page, but dashboards can be treated like other views and easily accessed via the xref:user_interface#navigation_bar[navigation bar] and the xref:user_interface#sidebar[sidebar].
Dashboards are, of course, ideally suited to be placed separately on individual monitors, be it for a large control room, as an information display for server rooms or as a simple kiosk display for the conference room.


[#features]
=== What dashboards can do

A special feature of {CMK} dashboards is that they can automatically adapt to the dimensions of the display or browser window using an intelligent algorithm.
For each individual element of the dashboard -- the dashlets -- you can define exactly how they behave and in which directions they can expand if necessary.

Dashlets of various categories are available for the content:
Regular views, graphs, metrics, prefabricated elements for various statistics and timelines as well as boxes for static texts and any URLs.
An overview of all dashlets can be found xref:builtin_dashlets[below].
ifdef::onprem[]
Some of the dashlets are available exclusively in the commercial editions. 
endif::[]

An important feature of dashboard__ use:__
Using filters, even dashboards that show values for all hosts or services in the network can be broken down into specific areas.
Dashboards are therefore not simply rigid displays, rather they are real tools for finding and analyzing problems and states.


[#usage]
=== Dashboards in operation

==== Interpreting the Main dashboard

On the {CMK} start page you will see the [.guihint]#Main dashboard,# which can be found in the [.guihint]#Monitor# menu and also in the [.guihint]#Views# xref:glossar#snapin[snap-in], each under [.guihint]#Overview > Main dashboard#. 

ifdef::onprem[]
{RE} and commercial editions each come with their own individual standard dashboards, so here is a look at the commercial editions variant first:

image::dashboard_main_numbered.png[alt="The standard dashboard of the commercial editions with numbers for the detailed description."]

[cols="7,~,<.>~", options="header"]
|===
|Nr. |Title |Function

|1 |Filter button |Call up filter
|2 |Layout button |Layout mode activate/deactivate
|3 |Host statistics |Current state of hosts
|4 |Total host problems |Timeline of host problems
|5 |Service statistics |Current state of services
|6 |Total service problems |Timeline of service problems
|7 |Problem notifications |Timeline of alerts
|8 |Percentage of total service problems |Timeline of active services
|9 |Host overview |Mouse wheel-zoomable visualization of problems on hosts
|10 |Top alerters (last 7 days) |Services responsible for alerts
|11 |Filter |Filters for restricting the dashboard to individual hosts/services
|===

If you move the mouse pointer over the graphs or the host symbols in the [.guihint]#Host overview# dashlet, you will immediately get more detailed information via a tooltip. The colors correspond to the display in the dashlets for the current host and service statistics. The linked title lines of the dashlets take you to more detailed displays.

On {CRE}, however, the main dashboard on the start page is the [.guihint]#Problem Dashboard#, which can also be called up in the commercial editions via icon:icon_dashboard_problems[alt="Icon of the Problem dashboard."] and which, quite conventionally, shows unresolved problems and current events in the form of a list:

image::dashboard_main_numbered_raw.png[alt="The {RE} standard dashboard with numbers for the detailed description."]
endif::[]

ifdef::saas[]
The main dashboard shows unresolved problems and current events in the form of a list:

image::dashboard_main_numbered_saas.png[alt="The standard dashboard with numbers for the detailed description."]
endif::[]

[cols="7,~,<.>~", options="header"]
|===
|Nr. |Title |Function

|1 |Filter button |Call up filter
|2 |Layout button |Layout mode activate/deactivate
|3 |Host statistics |Current state of hosts
|4 |Service statistics |Current state of services
|5 |Host Problems |List of unacknowledged host problems
|6 |Service Problems |List of unacknowledged service problems
|7 |Events of recent 4 hours |Events of the last 4 hours
|8 |Filter |Filters for restricting the dashboard to individual hosts/services
|===

[TIP]
====
Note on the icon:icon_dashboard_edit[alt="Icon of the dashboard layout mode."] layout button:
For the xref:builtin_dashboards[built-in dashboards], you will not see this button at first by default!
It only appears, and then permanently, once you have called up the [.guihint]#Dashboard > Clone builtin dashboard# menu item.
Just understand this as a small _protective measure_, because it is recommended to first clone icon:icon_clone[alt="Icon for cloning."] a built-in dashboard and then customize the clone.
====


[#dashboard_filter]
==== Filtering dashboards

As you will see later, dashboards can be created from the outset for a desired selection of hosts or services.
However, you can use filters to temporarily limit each dashboard to a specific selection:

1. Call up the filter function via icon:icon_filter[alt="Icon of a filter."].
2. Add a filter via [.guihint]#Add filter# -- for example [.guihint]#Host name (regex)#.
3. Configure the filter -- for example `myhost`.

The third step varies from filter to filter.
The most important thing here being the handling of the search terms entered, i.e. for host names, for example.
As usual, {CMK} evaluates these as xref:regexes#[regular expressions].
A filter for `myhost` would therefore find `myhost` as well as `2myhost` and `myhost2`.
If you only want to see `myhost` in the dashboard, you must use `^myhost$` as the search term accordingly to include the beginning and end of the line and thus specify an exact match.

Several filters can of course also be combined, which can then reduce the number of hits by using _AND_ links.
Within a filter you may use _OR_ links by means of regular expressions, for example `myhost1|db_server`.


[#dashboard_layout_config]
ifdef::onprem[]
== Layout, configuration, permissions
endif::[]

ifdef::saas[]
== Layout and configuration
endif::[]

Dashboard settings are divided into two parts.
The layout determines the arrangement of the dashlets, their dimensions and dynamic scaling.
The configuration refers to the properties of the dashboard itself, but above all to the individual dashlets, i.e. which content they display and how.


[#layout]
=== Layouts

The special feature of the dashboard layout is its dynamism:
although dashlets can be created with a fixed height and width, they can also grow automatically in both dimensions in order to make optimal use of the available space with each scaling
-- similar to responsive web design, but they can be configured in more detail. 

The principle is simple:
any corner of a dashlet is set as an anchor.
From this fixed point, the dashlet can then grow in height and/or width as soon as more space is available,
for example, simply on a larger screen, but also when the position or size of other dashlets changes.


==== Dynamic layouts in action

To illustrate this function, here is an example -- in the center a host matrix dashlet with manual height and width settings, and in its upper left corner an anchor.
You can recognize the anchor by the green corner, the settings for current height and width can be found in the middle of the dashlets.

This is framed by four host-overview dashlets
ifdef::onprem[]
(respectively xref:dashlet_siteoverview[site-overview dashlets]),
endif::[]
ifdef::saas[]
(respectively site-overview dashlets),
endif::[]
all with automatic height, the side ones also with automatic width
-- the dashlets at the top and bottom get the setting [.guihint]#max width#.
By default, the anchor is at the top left, but here the right dashlet gets the anchor at the top right and the bottom one at the bottom left.

image::dashboard_layout_example_1.png[alt="A host matrix dashlet in the dashboard center."]

If you now move the host matrix dashlet further to the left and down, for example, the host overview dashlets on the left, right and bottom change
-- because they automatically grow from their anchors towards the central host matrix dashlet.

The top dashlet, on the other hand, remains as it is -- after all, it cannot grow downwards because the two side dashlets are anchored at the top.

image::dashboard_layout_example_2.png[alt="The host matrix dashlet, moved to the bottom left."]

If you now switch the lower dashlet from [.guihint]#max width# to [.guihint]#auto width# it no longer extends over the entire width
-- because the automatic height of the right dashlet is rendered before the automatic width of the lower dashlet.

image::dashboard_layout_example_3.png[alt="The bottom dashlet with shortened width."]

If dashlets with automatic dimensions are competing for the same space, you can use the maximum setting to determine the winner, so to speak
-- but be careful: If two dashlets set to maximum compete for the same space, overlapping can occur.

The whole dynamic layout principle is easier to understand if you create such a test setup yourself and try pushing the dashlets around a bit. 


[#config_dashboard]
=== Configuration: Dashboard

You will see the dashboard configuration automatically when you create a new dashboard,
later you can access it via the icons in the dashboard list ([.guihint]#Customize > Visualization > Dashboards#) or the [.guihint]#Dashboard > Properties# menu item in an open dashboard.

image::dashboard_config_dashboard.png[alt="The 'Dashboard' menu with the 'Properties' entry selected.",width=60%]

The properties of the dashboard itself are trivial;
only metadata such as name, menu item or visibility are defined here, as well as context filters if required.
Context filters simply restrict dashboards and dashlets to certain hosts and/or services.

image::dashboard_config_example_dashboard.png[alt="General properties of the dashboard."]


[#config_layout]
=== Configuration: Dashlets

You will see the configuration of individual dashlets automatically when you add them to a dashboard;
later you can call them up directly via a dashlet's 'cogwheel' icon in the layout mode.

image::dashboard_config_dashlet.png[alt="The icon for calling up the properties of a dashlet.",width=60%]

The configuration of most dashlets is quite simple, as the dashlet with the host matrix from the screenshots above shows.
This is actually a dashlet of the [.guihint]#Sidebar element# type, and its entire configuration is limited to the selection of this sidebar element.
For all dashlets that refer to several or individual hosts and services, you will also find corresponding filter options.
And finally, some dashlets offer options for the precise design of the visualization, for example via limit values.
As an example, here is the [.guihint]#Properties# box of the [.guihint]#Gauge# dashlet:

image::dashboard_config_example_dashlet.png[alt="Properties of the 'Gauge' dashlet."]


ifdef::onprem[]
[#permissions]
=== Permissions

Even away from the dashboard and dashlet configuration, there are important settings in {CMK}, namely permissions.
Under [.guihint]#Setup > Users > Roles & permissions > Edit role user# you can simply filter for `dashboard` to list all options.
Here for a xref:wato_user#roles[role] you can specify in detail which standard dashboards its assigned users can see and what exactly they are allowed to do with other dashboards.

image::dashboard_config_permissions.png[alt="User role with the permissions for dashboards."]
endif::[]


[#example]
== An example of a dashboard

This example project will guide you through the necessary steps for setting up a dashboard from scratch.
In doing so, you will basically see examples of all of the available options.
ifdef::onprem[]
In order to completely replicate this example, you will need one of the commercial editions.
endif::[]
Four dashlets serve this purpose:

The [.guihint]#Performance graph# dashlet shows a host's file system usage,
[.guihint]#Gauge# shows the average CPU usage over the last minute,
the [.guihint]#Alert timeline# visualizes alerts for a selection of hosts and services over a timeline,
and the [.guihint]#Scheduled downtimes# view lists xref:glossar#scheduled_downtime[scheduled downtimes].

And this is what the finished dashboard will look like:

image::dashboard_example_view.png[alt="The example dashboard created below."]


[#example_build]
=== Setting up an example dashboard

==== 1. Creating a dashboard

First create a dashboard via [.guihint]#Customize > Visualization > Dashboards > Add dashboard#.
This will immediately take you to the first basic setting:

image::dashboard_example_1.png[alt="Selection of object types for the dashboard."]

With [.guihint]#Select specific object type# you can restrict the dashboard to certain hosts, services and even individual objects such as Docker images or fans.
For this example, leave it at the default [.guihint]#No restrictions to specific objects#.
You can still filter this later.

Then use [.guihint]#Continue# to access the properties of the dashboard to be created.

image::dashboard_example_2.png[alt="General properties of the dashboard with the necessary input for ID and title."]

All that is required here is a name and title for the dashboard in the [.guihint]#General properties# box, here we have used `my_dashboard` and `My Dashboard`.
Also of interest here are the display options, especially the item [.guihint]#Topic in 'Monitor' menu#.
Here you determine under which topic the dashboard will later be listed in the Monitor menu of the navigation bar as well as in the [.guihint]#Views# and [.guihint]#Dashboards# sidebar elements.

However, the context filters, which appear twice here, are also important: In the [.guihint]#Context / Search Filters# box, you can set a default filter for the dashboard so that certain hosts and/or services appear immediately when the dashboard is called up.

In the [.guihint]#Dashboard Properties# box, on the other hand, you can use [.guihint]#Required context filters# to set filters that are required but *empty*.
For instance, if you set the [.guihint]#Host: Host name (regex)# filter here, the dashboard starts with just this filter
-- and the user must then specify accordingly which host name is to be filtered on.
In this way, you can provide users with dynamic dashboards and directly inform them that they still need to provide the required context.

For the example dashboard, just leave the filters completely empty -- filtering is done via the individual dashlets.
Confirm with [.guihint]#Save & go to dashboard#.
The empty dashboard is then displayed and you can now switch between view and layout mode using the icon:icon_dashboard_edit[alt="Icon of the dashboard layout mode."] layout button.
You can access this new dashboard at any time via the entry in the Monitor menu.

By the way: You never have to save dashboards manually, every change is automatically retained -- even if you leave a dashboard.


==== 2. Adding a [.guihint]#Performance graph# dashlet

Now add the dashlet to the empty dashboard via [.guihint]#Add > Performance graph#.
Under [.guihint]#General Settings# you should assign a descriptive title, otherwise dashboards with many dashlets quickly become confusing
-- especially if they are not filtered for specific elements from the outset.
Since the root file system of the host `myhost` is to be visualized here, `My Host - Filesystem/` is a good choice.
As with many input fields in {CMK}, this can be done more conveniently via macros: `$HOST_NAME$: $SERVICE_DESCRIPTION$`
Which macros you can use may be found in the help texts, which you can display with [.guihint]#Help > Show inline help#.

image::dashboard_example_3.png[alt="General settings of the 'Performance graph' dashlet."]

In the box for the context filters, enter the host name and the desired file system.
In both input fields you can simply enter the first letter and then scroll through the possible entries with the down arrow key.

image::dashboard_example_4.png[alt="Context filter of the 'Performance graph' dashlet."]

In the third box, [.guihint]#Properties#, the two filters are automatically adopted for the setting [.guihint]#Graph#.
You only have to select the desired graph, here [.guihint]#Time usage by phase#.
You can leave the other display options unaltered.

image::dashboard_example_5.png[alt="Properties of the 'Performance graph' dashlet."]

If you now save the dashlet, you will arrive in layout mode.
Since the dashlet should run across the entire width, click [.guihint]#manual width#, to switch the manual width to [.guihint]#auto width#.
The anchor can remain in its default position at the top left.

image::dashboard_example_6.png[alt="The 'Performance graph' dashlet in the layout mode of the dashboard."]


==== 3. Adding a [.guihint]#Gauge# dashlet 

The [.guihint]#Gauge# dashlet
ifdef::onprem[]
is only available in the commercial editions and
endif::[]
visualizes values such as the CPU load in the style of a car speedometer.

The configuration hardly differs from that of the graph just created, again filtering on `myhost` and now on the service `CPU load`.
And again, both values are automatically transferred to the [.guihint]#Properties# box, now located under [.guihint]#Metric# (instead of under [.guihint]#Graph# as before).
For the metric, select [.guihint]#CPU load average of last minute#.

However, this time you have to define another setting, namely the maximum of the scale under [.guihint]#Data range#.
Here select [.guihint]#Floating point number# and set the maximum to `10`.
Without this you will get an error message.

image::dashboard_example_7.png[alt="Properties of the 'Gauge' dashlet."]

After saving, you return to layout mode and can place the dashlet below the performance graph (which is initially overlaid by the new dashlet!).
Manual width and height can be used here.
You can determine the desired size by dragging the dashlet edges with the mouse.
At this point you could also set the graph dashlet to automatic height and then simply let the height be determined by the placement of the new gauge dashlet.

image::dashboard_example_8.png[alt="The 'Gauge' dashlet in the layout mode of the dashboard."]


==== 4. Adding a [.guihint]#Alert Timeline# dashlet

The third dashlet is the [.guihint]#Alert timeline#
ifdef::onprem[]
 -- this is also exclusive to the commercial editions --
endif::[]
for displaying the alerts on a timeline.

Data from several hosts and services should now end up in this dashlet -- hence the omission of dashboard-wide pre-filtering above.
To get all alerts from all hosts that start with `my`, set the host name filter to `^my*`.
With this dashlet, it is often a good idea to dispense with filters completely in order to evaluate all hosts.

image::dashboard_example_9a.png[alt="Context filter of the 'Alert timeline' dashlet."]

For our example dashlet, the display [.guihint]#Bar chart# is kept, the time range is set to [.guihint]#The last 35 days#, and the resolution is set to whole days.

image::dashboard_example_9b.png[alt="Properties of the 'Alert timeline' dashlet."]

After saving, place the dashlet back on the dashboard.
Again an automatic width with manual height is a good way to fill the row with the [.guihint]#Gauge# dashlet.

image::dashboard_example_9c.png[alt="The 'Alert timeline' dashlet in the layout mode of the dashboard."]


==== 5. Adding a dashlet via a view

Existing xref:glossar#view[views] can also be used as dashlets.
This works via [.guihint]#Add > Link to existing view#, but also via the views themselves, as you can see here.

To add the xref:glossar#scheduled_downtime[scheduled downtimes] view, for example, call it up via [.guihint]#Monitor > Overview > Scheduled downtimes#.
Then add this view to your dashboard via [.guihint]#Export > Add to dashboard#

image::dashboard_example_10.png[alt="The 'Export' menu of the 'Scheduled downtimes' view.",width=55%]

Select your dashboard.

image::dashboard_example_10a.png[alt="Selection of the dashboard for the view."]

Place the dashlet as the last row.
Here you can now use automatic height and width to eliminate empty areas.

If you now call up the icon:icon_dashlet_edit[alt="Icon for the properties."] dashlet properties from the layout mode, the settings already known from xref:views#[views] are available to you, for example, to make the dashlet a little slimmer
-- after all, a click on the dashlet title takes you to the full scheduled downtimes view anyway.

With that, your example dashboard is ready, shown here again completely in layout mode:

image::dashboard_example_11.png[alt="The complete example dashboard in layout mode."]


[#filter]
== Filters

The filtering of dashboards and dashlets is a powerful feature, has been mentioned a number of times so far and will therefore be briefly summarized again here.
You have three ways to do this:

* Dashboard properties
** [.guihint]#Context / Search filters#
** [.guihint]#Required context filters#
* Dashlet properties: [.guihint]#Context / Search filters#
* Dashboard view: [.guihint]#Context / Filter#

The entry [.guihint]#Context / Search filters# is basically identical in all three locations, but:
If you filter a dashboard to a host in the properties, you cannot look at other hosts in the dashboard view, only filter the existing hosts even further.
In the dashlet properties, however, you can very easily override the dashboard properties filter and include other hosts!

The [.guihint]#Required context filters# can also be found in the dashboard properties, but they do not filter anything at first.
They are only set as required filters.
A dashboard with such defaults appears in the dashboard view without information on hosts and services, but with the filter function open and the reference to this [.guihint]#Mandatory context#, which the user must set at runtime, so to speak.

image::dashboard_example_mandatory.png[alt="Filter bar with mandatory context when opening the dashboard.",width=60%]


[#builtins]
== Built-in dashboards and dashlets

[#builtin_dashboards]
=== Built-in dashboards

A list of all individually-created and built-in dashboards can be found via [.guihint]#Customize > Visualization > Dashboards#.
For your own variants, you can call up the properties via icon:icon_edit[alt="Icon for editing."] and the layout mode via icon:icon_dashboard_edit[alt="Icon of the layout mode for dashboards."].
You cannot edit the factory-set dashboards directly from the list, but you can clone them via icon:icon_clone[alt="Icon for cloning."] and then customize the clone.

ifdef::onprem[]
[TIP]
====
Not all dashboards are integrated in all editions of {CMK}.
The cloud vendor specific dashboards can only be found in {CE} and {ME}, {RE} is limited to some basic dashboards.
====
endif::[]

Here is an excerpt of the built-in dashboards:

[cols="15,30,~",options="header"]
|===
|Name/ID |Monitor menu item |Content
|`aws_ec2_overview` |Cloud > AWS EC2 instances |Overview of EC2 instances
|`azure_vm_overview` |Cloud > Azure VM instances |Overview of Azure VMs
|`checkmk` |System > Checkmk dashboard |{CMK} servers and sites
|`gcp_gce_overview` |Cloud > GCP GCE instances |Overview of GCP VMs
|`kubernetes_overview` |Applications > Kubernetes |Overview of clusters, resources, nodes etc.
|`main` |Overview > Main dashboard  |Main View
ifdef::onprem[]
|`ntop_alerts` |Network statistics > Alerts |Alerts in xref:ntop#[ntopng]
endif::[]
|`problems` |Problems > Problems dashboard |Problems and statistics from all hosts and services. The [.guihint]#Problems dashboard# is the [.guihint]#Main dashboard# in {RE}.
|`simple_problems` |Problems > Host & service problems |Problems for all hosts and services
|`site` |- |Overview of a site
|===


[#builtin_dashlets]
=== Dashlets

Here you will first see an overview of all dashlets, then we will show you a few special features that were not covered in the example dashboard above.

[cols="15,30,12,~",options="header"]
|===
|Category |Name |{RE} |Function

|Views |View |yes |Regular views as dashlets

.4+|Graphs |Single metric graph |no |Graph for individual metrics over time
|Performance graph |yes |Predefined performance graphs for individual hosts/services
|Custom graph |no |Manually-created free-form graphs
|Combined graph |no |Graphs with multiple metrics

.5+|Metrics |Average scatterplot |no |Metrics of various hosts/services as scatter plot
|Barplot |no |Bar chart of individual services
|Gauge |no |Single metric as _speedometer_
|Single metric |no |Single metric as a count
|Top list |no |Ranking of a single metric of multiple hosts/services

.4+|State |Host state |no |State of a single host
|Service state |no |State of a single service
|Host state summary |no |Summary of specific states
|Service state summary |no |Summary of specific states

|HW/SW Inventory |HW/SW Inventory of host |no |Data from the inventory

.10+|{CMK} |Site overview |no |Hosts as state-hexagons
|Alert overview |no |Hosts as alerting-hexagons
|Host statistics |yes |Overall statistics for the host state
|Service statistics |yes |Overall statistics for the service state
|Event statistics |yes |Overall statistics for the event state
|Notification timeline |no |Notifications on the timeline
|Alert timeline |no |Alerts on the timeline
|Percentage of service problems |no |Percentage of service problems on the timeline
|User messages |yes |User notifications
|Sidebar element |yes |Any sidebar widgets

ifdef::onprem[]
.3+|Ntop |Alerts |no |Alerts in xref:ntop#[ntopng]
|Flows |no |Flows in ntopng
|Top talkers |no |Hosts in ntopng that generate the most network traffic
endif::[]

.2+|Other |Custom URL |yes |Internal/external URLs
|Static text |yes |Static text for notes
|===

Perhaps the most important question raised by most dashlets:
Is the information displayed limited to single hosts or services?
The answer can be found in all dashlet settings in the [.guihint]#General settings# box next to [.guihint]#Show information of single#.
If it says [.guihint]#host, service#, you need to set a context filter.
If instead you see [.guihint]#Not restricted to showing a specific object#, you don't need to set a filter -- but you can in some cases.
For dashlets such as [.guihint]#Custom URL# or [.guihint]#Sidebar element# there are, of course, no filter options.

How exactly you design the graphs in the graphing dashlets is a bit more complex and is explained in detail in the xref:graphing#[graphing article].

A special role is played by the [.guihint]#Custom URL# dashlet.
In theory, you can integrate external websites or resources by simply specifying an address
-- in practice, this often fails due to the security measures used by the operators and browsers.
However, this does work with {CMK}'s own resources, for example other dashboards.
You could, for instance, link several host-specific dashboards to one big overview.
What you can also integrate -- with a little experimentation -- are internal resources from the {CMK} server;
for example, any kind of web application, be it a wiki or a small chat program.

ifdef::onprem[]
[#dashlet_siteoverview]
The [.guihint]#Site overview# dashlet has two functions:
In the xref:layout[layout] explanations above, you see it as an overview of hosts -- by default on a normal, single {CMK} site.
In xref:distributed_monitoring#[distributed monitoring], on the other hand, this dashlet shows an overview of the namesake sites.
endif::[]

The dashlet [.guihint]#Static text# can do a little more than you might expect:
it is suitable for notes and simple labels, but it can also be used to link to other dashboards or other {CMK} components,
as you can see in the following example of a top-down dashboard.


== Dashboard examples

[#dashboard_examples_1]
=== Top-down dashboards

So now you are familiar with all of the available dashlets and finished dashboards, know where to access their configurations and layout options, and how to assemble a complete dashboard.
However, dashboards do not necessarily have to stand on their own, but can also build on each other
-- for example, to navigate from a large overview to the smallest detail.

Basically, many dashboards already work exactly like this:
The [.guihint]#Host statistics# visualizes the host states and a click on one of the states redirects to a view that lists the associated hosts
-- and from there it goes on to the individual services of a single host.

For your own dashboards, you can also create links to other dashboards by linking the title bar of dashlets via [.guihint]#Link of Title# in the dashlet options.
Let's take a concrete example:
Here you see a dashboard that shows information on the CPU, RAM and file systems of all hosts that start with `my`.

image::dashboard_topdown1.png[alt="Example dashboard of all hosts starting with 'my'."]

In this example the title of the CPU graph links to another dashboard that visualizes the CPU information for each host individually.
In this dashboard, there is again a link at the top back to the overview, simply achieved using a [.guihint]#Static text# dashlet.

image::dashboard_topdown2.png[alt="Link to return to the calling dashboard."]

With such cross-links, you can develop complex research tools via dashboards.
By the way, you are not limited to the title bar -- you can certainly use HTML code as static text and thus incorporate entire navigations.
ifdef::onprem[]
Consider, for instance, distributed monitoring and paths such as _General overview > Instance overview > Host overview > Container overview > Services > Problems._
endif::[]


[#troubleshooting]
== Troubleshooting

=== Missing filters

It may occur that you will see only the following warning with a yellow background for a dashlet:

[.guihint]#Unable to render this element, because we miss some required context information (host, service). Please update the form on the right to make this element render.#

In this situation, the dashlet should be displaying information for only a single host and/or service -- but for which no filter has been set.
To fix this, you can either use the filters in the dashboard view or in the dashlet configuration. 


=== Empty dashlets

There can be several reasons for completely empty dashlets without error messages.
Usually it is a misconfiguration of the dashlet.

Example: You create a dashlet for CPU load with the metric and the filtered service [.guihint]#CPU load#.
Later you change the filter of the service description to something like [.guihint]#Check_MK Discovery#, but leave the selected metric at [.guihint]#CPU load#.
When creating a dashlet, this cannot happen to you, because after the filter on the CPU load, the selection of an unsuitable metric is impossible
-- when reconfiguring dashlets, however, the originally selected metric is retained.

The solution to this problem is trivial
-- alter the service filter and the selected metric in the dashlet configuration.
Of course, this also applies to all other dashlet variants.


ifdef::onprem[]
[#host_problems]
=== Empty dashlets: Total host/service problems

The [.guihint]#Total host problems# and [.guihint]#Total service problems# dashlets are a special case for empty dashlets.
Here you might encounter the following error message:
[.guihint]#As soon as you add your Checkmk server to the monitoring, a graph showing the history of your host problems will appear here...#

image::dashboard_total_dashlets.png[alt="Error message in the 'Total host problems' dashlet."]

The cause of the problem is that {CMK} cannot see all {CMK} servers as hosts in the monitoring.
This can be the local {CMK} server, but also {CMK} servers of connected sites if you use xref:distributed_monitoring#[distributed monitoring].
It is generally a good idea to include all {CMK} servers as hosts in your monitoring.

In distributed monitoring, there may be another reason for the error message:
In a connection to a remote site, a [.guihint]#Site ID# is assigned for it.
If this ID does not *exactly* match the name of the site, but the IP address is correct, the connection itself is displayed as OK, but this error message will be triggered in the dashlet.
For the dashlets, the names of the connected sites are read from the connections of the distributed monitoring *and* from the service outputs
-- and the dashlets only function correctly if exactly the same sites are found in each case.
This ensures that the correct data is actually output.

The solution is simple:
Create a new connection with the correct ID.
endif::[]
