// -*- coding: utf-8 -*-
// IGNORE % Filesystems filesystems filesystem Rescan
include::global_attr.adoc[]
= Best practices, tips & tricks
:revdate: 2025-02-05
:title: Best practices, tips & tricks
:description: Best practices can help you avoid problems in {CMK}, e.g. when monitoring Windows services, the internet connection or HTTP/HTTPS services.


[#cpu_single_core]
== Monitoring individual CPU utilization in all cores

{CMK} automatically sets up a service under both Linux and Windows that monitors the average CPU usage over the course of the last minute.
On the one hand, this makes sense, but on the other hand it does not recognize some errors, for example, that a single process runs amok and continuously utilizes *one* CPU at 100{nbsp}%.
In a system with 16 CPUs, however, a CPU only contributes 6.25{nbsp}% to the overall performance, and so even in the extreme case described, a total utilization of only 6.25{nbsp}% is recorded -- which does not trigger a notification.

For this reason, {CMK} provides the option (for Linux and for Windows) of monitoring all available CPUs individually and determining whether any of their cores is constantly busy over a longer period of time.
Setting up this check has turned out to be a good idea.

To set up this check for your Windows servers, you need for the [.guihint]#CPU utilization# service the [.guihint]#CPU utilization for simple devices# rule set, which you can find under the [.guihint]#Service monitoring rules#.
This rule set is responsible for monitoring *all* CPUs -- but it also has this option: [.guihint]#Levels over an extended time period on a single core CPU utilization#.

Create a new rule and activate only this option in it:

image::intro_cpu_single_core.png[alt="Dialog for defining the monitoring of CPU utilization of individual cores for Windows servers."]

Define the condition so that it only applies to the Windows servers, for instance by using a suitable folder or host tag.
This rule will not affect other rules of the same rule set if they set other options, such as the thresholds for the total CPU utilization.

For Linux servers, this is the responsibility of the [.guihint]#CPU utilization on Linux/UNIX# rule set, in which you can set the same option.


[#windows_services]
== Monitoring Windows services

By default, {CMK} does not monitor any services on your Windows servers.
Why not?
This is simply because {CMK} does not know which services are important to you.

If you do not want to go to the trouble of manually determining for each server which services are important, you can also set up a check that simply checks whether all services with the start type "automatic" are in fact running.
In addition, you can be informed whether services are running that were started manually -- out of order, so to speak.
These will no longer run after a reboot -- which could be a problem.

To implement this, you first need the [.guihint]#Windows Services# rule set which you can find under the [.guihint]#Service monitoring rules#, by using the search function [.guihint]#Setup > General > Rule search#, for example.
The crucial option in the new rule is [.guihint]#Services states#.
Activate this and add three new elements for the states of the services:

image::intro_windows_services_rule.png[alt="Dialog for defining the Windows server services to be monitored depending on their status."]

This allows you to implement the following monitoring:

* A service with the start type [.guihint]#auto#, and which is running, is considered to be {OK}.
* A service with the start type [.guihint]#auto# that is not running is considered to be {CRIT}.
* A service with the start type [.guihint]#demand#, and which is running is considered to be {WARN}.

However, this rule only applies to services that are actually being monitored.
Therefore, we need a second step and a second rule, this time from the [.guihint]#Windows service discovery# rule set, with which you define which Windows services {CMK} should monitor as services.

When you create this rule, you can first enter the regular expression `pass:[.*]` in the [.guihint]#Services (Regular Expressions)# option, which will then be applied to all services.

After saving the rule, switch to the service configuration for a suitable host.
There you will find a large number of new services -- one for each Windows service.

To limit the number of monitored services to those of interest to you, return to the rule and refine the search terms as needed.
This is case-sensitive.
Here is an example of a customized service selection:

image::intro_windows_service_discovery.png[alt="Dialog for defining the names of the Windows services to be monitored."]

If you have previously included services that do not match the new search expressions now in the monitoring, they will appear as vanished in the service configuration.
With the [.guihint]#Rescan# button you can clear the air and have the entire service list recreated.


ifdef::onprem[]
[#internet]
== Monitoring internet connections

Your organization's access to the internet is certainly very important to everybody.
Monitoring the connection to 'the internet' is a bit difficult to implement, as it involves the billions of computers which could (hopefully) be accessible -- or not.
Nevertheless, you can still set up an efficient monitoring system, based on the following construction plan:

. Select several computers on the internet that should normally be reachable via a `ping` command and note their IP addresses.

. Create a new host in {CMK}, for example with the name `internet` and configure it as follows:
For [.guihint]#IPv4 address# enter one of the noted IP addresses.
Under [.guihint]#Additional IPv4 addresses# enter the remaining IP addresses.
Under [.guihint]#Monitoring agents#, enable [.guihint]#Checkmk agent / API integrations# and select [.guihint]#No API integrations, no Checkmk agent# there.
Save the host without service discovery.

. Create a new rule from the [.guihint]#Check hosts with PING (ICMP Echo Request)# rule set that only applies to the new host `internet` (for example, via the [.guihint]#Explicit hosts# condition, or a matching host tag).
Configure the rule as follows:
Enable [.guihint]#Service description# and enter `Internet connection`.
Enable [.guihint]#Alternate address to ping# and select [.guihint]#Ping all IPv4 addresses# there.
Enable [.guihint]#Number of positive responses required for OK state# and enter `1`.

. Create another rule that also only applies to the host `internet`, this time from the [.guihint]#Host check command# rule set.
There, select as [.guihint]#Host check command# the [.guihint]#Use the status of the service...# option and enter `Internet connection` as its name - the same name you chose as the service name in the previous step.

If you now activate the changes, you will get the new host `internet` with the single service `Internet connection` in the monitoring.

If at least one of the ping destinations is reachable, the host will have the state {UP} and the service will have the state {OK}.
At the same time, the service provides you with performance data for the average packet round trip time (_round trip average_) and packet loss for each of the specified IP addresses.
This will give you an indication of the quality of your connection over time:

image::intro_service_internet.png[alt="List entry of a service for monitoring the internet connection to several IP addresses."]

[TIP]
====
The fourth and final step in the procedure above is necessary so that the host does not enter the {DOWN} state if the first IP address is not reachable via `ping`.
Instead, the host will acquire the state of its only service. +
Since a service basically does not notify when its host is {DOWN}, it is important that you control the notifications via the host -- and not via the service.
As well, in this particular case, you should use a notification method that does not require an internet connection.
====
endif::[]


[#http]
== Monitoring HTTP/HTTPS services

Let's say you want to check the accessibility of a website or web service.
The xref:wato_monitoringagents#agents[{CMK} agent] does not offer a solution here, as it does not display this information -- and besides, you may not even have the possibility of installing an agent on the server.

The solution is a so-called xref:glossar#active_check[active check].
This is one that is not performed by an agent, rather by directly contacting a network protocol at the target host -- in this case HTTP(S).

The procedure is as follows:

. Create a new host for the link:https://checkmk.com/guides/web-server-monitoring[web server^], e.g. for `checkmk.com`.
Under [.guihint]#Monitoring agents#, activate the [.guihint]#Checkmk agent / API integrations# option and select [.guihint]#No API integrations, no Checkmk agent#.
Save the host without a service discovery.

. Create a new rule from the [.guihint]#Check HTTP web service# rule set, which only applies to the new host (e.g. via the condition [.guihint]#Explicit hosts#).

. In the [.guihint]#Value# box you will find numerous options for performing the check.
The principle is as follows:
Define a new endpoint for each URL to be checked.
A service is created for each endpoint.
Next, define the service name (e.g. `Basic webserver health`) and, if necessary, a prefix (`HTTP` or `HTTPS`) for the endpoint.

. You can also make additional settings in the [.guihint]#Value# box below the endpoints.
For example, you can use [.guihint]#Response time# to set the service to {WARN} or {CRIT} if the response time is too slow and use [.guihint]#Certificate validity# to check the certificate's validity period.
With [.guihint]#Search for strings# you can check whether a certain text appears in the response -- i.e. in the delivered page.
This allows you to check a relevant part of the content so that a simple error message from the server is not interpreted as a positive response.
+
You can define these settings identically for all endpoints or individually for each endpoint.
+
[TIP]
====
You can find very useful information on all available options in the xref:user_interface#inline_help[inline help].
====

. Save the rule and activate the changes.

You will now have a new host with the services you specified that check access via HTTP(S):

image::intro_check_httpv2_services.png[alt="List entry of the services for monitoring the HTTP/HTTPS services on a host."]

[TIP]
====
You can of course also perform this check on a host that is already being monitored with {CMK} via an agent.
In this case, there is no need to create the host and you will only need to create the rule for the host.
====


[#magic_factor]
== Customizing file system thresholds 'magically'

Finding good thresholds for monitoring file systems can be tedious.
After all, a threshold of 90{nbsp}% is much too low for a very large hard disk and is perhaps already too marginal for a small one.
We have already introduced the facility for setting thresholds depending on a files system's size in the xref:intro_finetune#filesystems[chapter on fine-tuning monitoring] -- and hinted then
that {CMK} has another, even cleverer option on offer -- the *magic factor*.

You set up the magic factor like this:

. In the [.guihint]#Filesystems (used space and growth)# rule set, you create just a single rule.

. In this rule, enable [.guihint]#Levels for used/free space# and leave the default for the thresholds at 80{nbsp}%, or 90{nbsp}% unchanged.

. In addition, activate [.guihint]#Magic factor (automatic level adaptation for large filesystems)# and confirm the 0.80 default value.

. Also set [.guihint]#Reference size for magic factor# to 20{nbsp}GB.
Since 20{nbsp}GB is the default value, it will take effect even without you explicitly activating the option.

The result will look like this:

image::intro_magic_factor.png[alt="Dialog for setting the magic factor for file system thresholds."]

If you now save this rule and activate the change, you will have threshold values that vary automatically depending on the size of the file system:

. File systems that are exactly 20{nbsp}GB in size are given the thresholds 80{nbsp}% / 90{nbsp}%.

. File systems smaller than 20{nbsp}GB are given lower thresholds.

. File systems larger than 20{nbsp}GB are given higher thresholds.

Exactly how high the threshold values are is, well -- magical!
The factor (here 0.80) determines how much the values are adjusted.
A factor of 1.0 changes nothing, and all file systems get the same values.
Smaller values have a greater effect on the adjustment of the values.
The default values for {CMK} used in this section have proven themselves in practice with very many installations.

You can see exactly which thresholds apply for each service in its [.guihint]#Summary#:

image::intro_magic_factor_services.png[alt="List with two file system services and their thresholds."]

The following table shows some examples of the effect of the magic factor with a reference value of 20{nbsp}GB / 80{nbsp}%:

[cols="15,~,~,~,~,~,~,~",options="header"]
|===
|Magic factor |5{nbsp}GB |10{nbsp}GB |20{nbsp}GB |50{nbsp}GB |100{nbsp}GB| 300{nbsp}GB| 800{nbsp}GB 
|*1.0* |*80{nbsp}%* |*80{nbsp}%* |*80{nbsp}%* |*80{nbsp}%* |*80{nbsp}%* |*80{nbsp}%* |*80{nbsp}%*
|*0.9* |77{nbsp}% |79{nbsp}% |*80{nbsp}%* |82{nbsp}% |83{nbsp}% |85{nbsp}% |86{nbsp}%
|*0.8* |74{nbsp}% |77{nbsp}% |*80{nbsp}%* |83{nbsp}% |86{nbsp}% |88{nbsp}% |90{nbsp}%
|*0.7* |70{nbsp}% |75{nbsp}% |*80{nbsp}%* |85{nbsp}% |88{nbsp}% |91{nbsp}% |93{nbsp}%
|*0.6* |65{nbsp}% |74{nbsp}% |*80{nbsp}%* |86{nbsp}% |89{nbsp}% |93{nbsp}% |95{nbsp}%
|*0.5* |60{nbsp}% |72{nbsp}% |*80{nbsp}%* |87{nbsp}% |91{nbsp}% |95{nbsp}% |97{nbsp}%
|===

With this chapter on the magic factor, we conclude our Beginner's Guide.

[TIP]
====
If you want to take a break now, you can log out.
In the {CMK} navigation bar you will find the entry [.guihint]#Logout# in the [.guihint]#User# menu.
ifdef::saas[]
In the xref:admin_panel#[admin panel] you will find the [.guihint]#Logout# menu entry in the same place.
Since {CMK} and the admin panel have independent sessions, the logout from {CE} is only complete once you have logged out from both of these locations.
endif::[]
====

We hope that you have been able to set up a solid foundation for your {CMK} system -- with or without magic.
For nearly all the topics we have covered in this Beginner's guide, you will find more in-depth information in other articles in the User guide.

ifdef::onprem[]
We wish you every success with {CMK} in the future!
endif::[]
ifdef::saas[]
We wish you every success with {CE} in the future!
endif::[]
