// -*- coding: utf-8 -*-
// IGNORE % DB2 Filesystems JVM rulesets timespecific
include::global_attr.adoc[]
= Rules
:revdate: 2024-03-19
:title: Rules
:description: Rules in {CMK} can define the default or the exception. This article describes the use of rules in detail, and how they are evaluated.

{related-start}
xref:wato#[Configuring {CMK}]
xref:hosts_setup#[Host administration]
xref:wato_services#[Understanding and configuring services]
{related-end}

[#intro]
== Introduction

In {CMK} you configure parameters for hosts and services by using _rules_.
This feature makes {CMK} very effective in complex environments,
and also brings a number of advantages to smaller installations.
In order to clarify the principle of rule-based configuration we will compare it to the classic method.

[#classic]
=== The classic approach

As an example, let’s take the configuration of the thresholds for {WARN} and {CRIT} in the monitoring of file systems.
With a data base-oriented configuration, for each file system one would enter a line into a table:

[cols="25,25,~,~",options="header"]
|===
|Host |File system |Warning |Critical
|`myserver001` |`/var` |90{nbsp}% |95{nbsp}%
|`myserver001` |`/sapdata` |90{nbsp}% |95{nbsp}%
|`myserver001` |`/var/log` |90{nbsp}% |95{nbsp}%
|`myserver002` |`/var` |85{nbsp}% |90{nbsp}%
|`myserver002` |`/opt` |85{nbsp}% |90{nbsp}%
|`myserver002` |`/sapdata` |85{nbsp}% |95{nbsp}%
|`myserver002` |`/var/trans`|100{nbsp}% |100{nbsp}%
|===

This is relatively straightforward -- but only because the table in this example is short.
In practice there tend to be hundreds or thousands of file systems.
Tools like copy & paste, and bulk operations can simplify the work, 
but the basic problem remains --
how can you identify and implement a standard policy?
What is the general rule?
How should thresholds for future hosts be preset?


[#rule_based]
=== Rule-based is better!

A rule-based configuration however *consists* of the policy!
We will replace the logic of the above table with a set of four rules.
If we assume that `myserver001` is a test system, 
and that in each case the _first relevant rule_ applies to every file system, 
the result will be the same thresholds as in the table above:

. File systems with the mount point `/var/trans` have a 100/100{nbsp}% threshold.
. The `/sapdata` file system on `myserver002` has a 85/95{nbsp}% threshold.
. File systems on test systems have a 90/95{nbsp}% threshold.
. All (unspecified) file systems have a 85/90{nbsp}% threshold.

Granted, for only two hosts that doesn’t achieve much, 
but with only a few more hosts it can quickly make quite a big difference.
The advantages of the rule-based configuration are obvious:

* The policy is clearly recognizable and can be reliably implemented.
* You can change the policy at any time without needing to handle thousands of data sets.
* _Exceptions_ are always still possible, but are documented in the form of rules.
* The incorporation of new hosts is simple and less fault-prone.

In summary, then: less work -- more quality!
For this reason, with {CMK} you will find an abundance of rules for customizing hosts and services -- 
such as thresholds, monitoring settings, responsibilities, notifications, agent configuration and many more.


[#rule_set_types]
=== Types of rule sets

Within Setup {CMK} organizes rules in _rule sets_.
Every rule set has the task of defining a specific parameter for hosts or services.
{CMK} contains more than 700 rule sets!
Here are some examples:

* [.guihint]#Host check command# -- defines how to determine whether hosts are {UP}.
* [.guihint]#Alternative display name for services# -- defines alternative names for services’ displays.
* [.guihint]#JVM memory levels# -- sets thresholds and other parameters for monitoring the memory usage of Java virtual machines (VM).

Every rule set is responsible either for hosts or for services -- never for both.
If a parameter can be defined for hosts as well as services, there is a pair of applicable rules -- 
e.g., [.guihint]#Normal check interval for host checks# and [.guihint]#Normal check interval for services checks#.

A few rule sets, strictly-speaking, don’t actually define parameters, rather they create services.
An example are the rules for xref:glossar#active_check[active checks], which can be found at [.guihint]#Setup > Services > HTTP, TCP, Email, ...#.
With these you can, e.g., set up an HTTP check for specific hosts.
These rules are classified as host rules -- 
due to the fact that if such a check exists on a host it is deemed to be a property of the host.

Further, there are rule sets that control the xref:glossar#service_discovery[service discovery].
With these you can, for example, via [.guihint]#Windows service discovery# define for which Windows services automatic checks should be created 
if they are found on a system.
These are also host rules.

The bulk of the rule sets determine parameters for specific xref:glossar#check_plugin[check plug-ins].
An example is [.guihint]#Network interfaces and switch ports#.
The settings in these rules are tailored very specifically to their appropriate plug-in.
Such rule sets fundamentally only find use with those services that are based on this plug-in.
In case you are uncertain which rule set is responsible for which services, 
then you can best find out by navigating directly via the service to the relevant rule.
How to do this will be explained later.

[#host_tags]
=== Host tags

One thing we have so far not mentioned:
In the above example there is a rule for all test systems.
Where is it actually defined that a host is a test system?

In {CMK}, something like _test system_ is known as a xref:glossar#host_tag[host tag].
You can see which tags are available via [.guihint]#Setup > Hosts > Tags#.
Some tags are already predefined -- for example, for a [.guihint]#Test system# defined in the [.guihint]#Criticality# group.

Applying tags to hosts is done either explicitly in the properties of the host, or through inheritance in the folder hierarchy.
How to do this is explained in the xref:hosts_setup#folder[article on hosts].
How to create your own tags, and what the predefined tags are about will be explained in the xref:host_tags#[article on host tags].

[#determining_sets]
== Determining the correct rule sets

[#host_rule_sets]
=== Host rule sets

If you wish to create a new rule that defines a parameter for one or more hosts,
there are several ways to this end.
The direct way is via the corresponding group in the [.guihint]#setup# menu, 
in this case [.guihint]#Setup > Hosts > Host monitoring rules#:

image::wato_rules_host_monitoring_rules.png[alt="Setup menu with focus on the 'Host monitoring rules'."]

In the following view, all rule sets relevant for host monitoring are displayed.
The numbers following the names of these rule sets show the number of rules that have already been defined:

image::wato_rules_host_monitoring_rules_2.png[alt="The 'Host monitoring rules' in the Setup menu."]

However, you can reach your goal somewhat faster via the _search field_.
To do this, of course, you need to know approximately what the rule set is called.
Here is the result of a search for `host checks` as an example.

image::wato_rules_search_host_checks.png[width=50%, alt="Extract of the result of a search for host checks."]

Another way is via the menu item [.guihint]#Hosts > Effective parameters# in the properties of an existing host in the Setup 
or via the icon:icon_rulesets[] icon in the list of hosts of a folder.

image::wato_rules_setup_object_parameters.png[alt="Host list in the Setup menu, with a highlighting of the button for effective parameters."]

There you will find not only all the rule sets that affect the host, 
but also the parameter currently effective for this host.
In the example of [.guihint]#Host check command# no rule applies for the shown host, 
and it is therefore set to the [.guihint]#Smart PING (only with Checkmk Micro Core)# default value of the commercial editions.
In {RE} the default value is [.guihint]#PING (active check with ICMP echo request)#.

image::wato_rules_host_rule_sets.png[alt="Display for the 'Host check command' with the default value."]

Click on [.guihint]#Host check command# in order to see the complete rule set.

If a rule already exists, instead of the [.guihint]#Default value# the number of the rule defining this parameter appears.

image::wato_rules_host_rule_sets2.png[alt="Display for the 'Host check command' with rule."]

Clicking on this takes you directly to the rule.


[#checkparameters]
=== Service rule sets

The path to the rule sets for services is similar.
The general access is via the [.guihint]#Setup# menu, 
in this case [.guihint]#Setup > Services > Service monitoring rules# 
or, more appropriately via the search field.

image::wato_rules_service_monitoring_rules.png[alt="Setup menu with focus on the 'Service monitoring rules' and the search box."]

If you are not yet very experienced with the names of the rule sets, then the path via the service is simpler.
Similarly to the hosts, there is also a page in which all of a service's parameters are shown 
and where you have the possibility of directly accessing the applicable rule sets.
You can access this parameter page with the icon:icon_services[] icon in a host’s list of services in the Setup.
The icon:icon_check_parameters[] icon takes you directly to the rule set that defines the xref:wato_services#parameters[parameter for the check
plug-in] for this service.

image::wato_rules_setup_service_list.png[alt="Services list in the Setup with the icons to call the parameters."]

By the way -- the icon:icon_rulesets[] icon for the parameter page is also found in the monitoring in every service’s action menu:

image::wato_rules_service_context_menu.png[alt="Services list in the monitoring with opened action menu of a service."]


[#enforced_services]
=== Enforced services

In the [.guihint]#Setup# menu you will also find an entry for [.guihint]#Enforced Services#.
As the name suggests, you can use these rule sets to force services to be created on your hosts.
Details can be found in the xref:wato_services#enforced_services[article about services].
A small number of rule sets -- such as [.guihint]#Simple checks for BIOS/Hardware errors# -- can only be found under the enforced services.
These are services which do not result from the service discovery, but are created manually by you.

[#rule_sets_used]
=== Rule sets in use

In each of the aforementioned lists of rule sets -- whether in the [.guihint]#Host monitoring rules# or the [.guihint]#Service monitoring rules# -- you can use [.guihint]#Related > Used rulesets# in the menu bar, to display only the rule sets in which you have defined at least one rule.
This is often a convenient way to get started if you want to make adjustments to your existing rules.
Incidentally, some of the rules will have been generated by default when creating the {CMK} site and are a part of the sample configuration.
These are also displayed here.

[#ineffective_rules]
=== Ineffective rules

Monitoring is a complex matter.
It can happen that there are rules which do not match a single host or service -- 
either because you have made a mistake or because the matching hosts and services have disappeared.
Such ineffective rules can be found in the aforementioned rule set listings via [.guihint]#Related > Ineffective rulesets# in the menu bar.

[#obsolete_rule_sets]
=== Obsolete rule sets

{CMK} is under constant development.
Occasionally things are standardized and it can occur that some rule sets are replaced by others.
If you have such rule sets in use, the easiest way to find them is do a rule search.
Open it via [.guihint]#Setup > General > Rule search#.
Then click in the menu bar on [.guihint]#Rules > Refine search#, 
select [.guihint]#Search for deprecated rulesets# as the option for [.guihint]#Deprecated# 
and select [.guihint]#Search for rule sets that have rules configured# as the option for [.guihint]#Used#.
After an additional click on [.guihint]#Search# you get the desired overview.

image::wato_rules_search_deprecated_rules.png[alt="Options to search for deprecated rule sets."]


[#create_rules]
== Creating and editing rules

The following image shows the [.guihint]#Filesystems (used space and growth)# rule set with four rules configured:

image::rules_filesystem.png[]

*New rules* are created either with the [.guihint]#Create rule in folder# button, or by cloning an existing rule with icon:icon_clone[].
Cloning creates an identical copy of the rule that you can then edit with icon:icon_edit[].
A new rule created using the [.guihint]#Create rule in folder# button will always appear at the end of the list of rules, 
whereas a cloned rule will be displayed as a copy below the original rule from which it was cloned.

The *sequence* in which the rules are listed can be changed with the icon:icon_drag[] button.
The sequence is important because rules positioned higher in the list always have *priority* over those located lower.

The rules are stored in the same xref:hosts_setup#folder[folders] from which you also manage the hosts.
The rules’ authorities are restricted to the hosts in this folder or in subfolders.
In the case of conflicting rules, the rule lower in the folder structure has priority.
In this way, for example, users with rights limited to certain xref:wato_user#wato_permissions[authorized] folders 
can create rules for their hosts without affecting the rest of the system.
In a rule's properties you can change its folder and thus ‘relocate’ it.


[#analyse_traffic_light]
=== The analysis mode with ‘traffic lights’

When you access a rule set for a host or service in [.guihint]#Setup#, {CMK} will show you this rule set in the *analysis mode*.
You can get there by clicking on the icon:icon_rulesets[] icon in the icon:icon_menu[] action menu in the [.guihint]#Setup# in the host or service list.
The following [.guihint]#Effective parameters of# page shows the list of rules that apply to the host/service.
To go to the analysis mode, click on the name of a rule set for which at least one rule exists, i.e. a set which is not set to the [.guihint]#Default value#:

image::rules_filesystem_analyze.png[alt="The analysis mode with 'traffic lights'."]

This mode has two features.
Firstly, a second button for setting rules appears -- 
[.guihint]#Add rule for current host# bzw. [.guihint]#Add rule for current host and service.#

With this you can create a new rule which has the appropriate current host or service already preselected.
You can create an exceptional rule very easily and directly in this way.
Secondly, a ‘traffic light’ icon appears in every line, the color of which shows 
whether and/or how this rule affects the current host, or respectively, service.
The following conditions are possible:

[cols="5,~"]
|===

|icon:icon_hyphen[] |This rule has no effect on the current host or service.
|icon:icon_confirm[] |This rule matches and defines one or more parameters.
|icon:icon_checkmark_orange[] |The rule matches. But because another rule higher in the hierarchy has priority this rule is ineffective.
|icon:icon_checkmark_plus[] |This rule matches. Another rule higher in the hierarchy in fact has priority but doesn’t define all parameters, so that at least one parameter is defined by this lower rule.
|===

In the last condition -- the rule is a icon:icon_checkmark_plus[] partial match -- can only occur for rule sets 
in which a rule can define *multiple parameters* by selecting individual check boxes.
Theoretically, every parameter for another rule can also be set individually here.
More on this later.

[#rule_characteristics]
== Rule characteristics

Each rule consists of three blocks.
The first block contains general information about the rule, such as the rule's name.
The second block defines what the rule is supposed to do, i.e. which actions it is to perform.
The third block contains the information on what, i.e. on which hosts or services, the rule is to be applied.

[#rule_properties]
=== Rule properties

Everything in the first block, [.guihint]#Rule Properties#, is optional, and serves primarily for documentation:

image::rules_props_properties.png[alt="General rule options."]

* The [.guihint]#Description# will be shown in the table of all rules in a rule set.
* The [.guihint]#Comment# field can be used for a longer description.
It only appears in a rule’s edit mode.
Via the icon:icon_insertdate[] icon you can insert a date stamp and your login name in the text.
* The [.guihint]#Documentation URL# is intended for a link to internal documentation that you maintain in another system (e.g., a CMDB).
It will appear as the clickable icon:icon_url[] icon in the rules table.
* With the [.guihint]#Do not apply this rule# check box you can temporarily disable this rule.
It will then be flagged as icon:icon_disabled[] in the table and is thus ineffective.

[#defined_parameters]
=== The defined parameters

The second section is different for each rule, but always specifies what should be done.
The following illustration shows a widely-used type of rule ([.guihint]#DB2 Tablespaces#).
You can use checkboxes to determine which individual parameters the rule should define.
As described above, {CMK} determines which rule defines each individual parameter separately.
The rule from the illustration therefore only defines the one value and leaves all other settings unaffected:

image::rules_props_value_1.png[alt="Different rule values with a setting of one value."]

You can also control the values in this and other rules on a time/calendar basis.
For example, you can set threshold values so that tablespace usage during business hours differs from that on weekends.

First click the [.guihint]#Enable timespecific parameters# button and then click [.guihint]#Add new element#, you will see the time-dependent options:

image::wato_rules_time_period.png[alt="View of rule values when time-dependent parameters are selected."]

Now select a xref:timeperiods#[time period] in the [.guihint]#Match only during time period# list, and then select the parameters for which this time period should apply.

Some of the rule sets do not set a parameter, but only decide which hosts are _in_ and which are not.
An example is the rule set [.guihint]#Hosts to be monitored#, whose parameter range looks like this:

image::wato_rules_positive.png[alt="Select positive or negative match."]

By selecting one of the two available values, you decide what to do with the affected hosts.
Selecting [.guihint]#Positive match (Add matching hosts to the set)# will add the affected hosts to the set of hosts to be monitored.
Selecting [.guihint]#Negative match (Exclude matching hosts from the set)# removes the affected hosts from the monitoring.
The [.guihint]#Positive match# or [.guihint]#Negative match# refers to the content of the current rule.
It is _not_ an additional filter criterion for selecting hosts.
You filter the set of affected hosts exclusively with the following [.guihint]#Conditions#.


[#conditions]
=== Conditions

In the previous section, you defined how all those hosts or services that are affected by your rule are to be processed. 
In the third section [.guihint]#Conditions# you now define which hosts or services are to be acted on by the rule -- and thus its effects.
There are different types of conditions that must all be fulfilled for the rule to take effect.
The conditions are therefore logically AND-linked:

image::rules_props_conditions_1.png[alt="The conditions for a rule."]


==== Condition type

Here you have the option of using normal conditions as well as _predefined conditions_.
These are managed via [.guihint]#Setup > General > Predefined conditions#.
Here you simply give fixed names to the rule matches that you need again and again, and from then on simply refer to them in the rules.
You can even later change the content of these conditions centrally and all the rules will be automatically-adjusted to suit.
In the following example the predefined condition [.guihint]#No VM# has been selected:

image::rules_props_conditions_2.png[alt="Selecting a predefined condition for a rule."]


==== Folder

With the [.guihint]#Folder# condition you define that the rule only applies to hosts in this folder -- or a subfolder.
If the setting is [.guihint]#Main#, this condition is applicable to all hosts.
As described above, the folders have an effect on the rule’s sequence.
Rules in lower folders always have priority over higher ones.


==== Host tags

[.guihint]#Host tags# restrict rules to hosts according to whether they have -- or do not have -- specific host tags.
Here as well, AND-links are always used.
Every other host tag condition in a rule reduces the number of hosts affected by the rule.

If you wish to make a rule applicable for two possible values for a tag, (e.g. for [.guihint]#Criticality# both [.guihint]#Productive system# and [.guihint]#Business critical)#, you cannot do this with a single rule.
You will require a copy of the rule for each variant.
Sometimes a negation can also help here.
You can also define that a tag is *not* present as a condition (e.g., not [.guihint]#Test system#).
The so-called xref:host_tags#aux_tag[auxiliary tags] are another possibility.

Because some users really use many host tags, we have designed this dialog so that not all host tag groups are displayed by default.
You have to specifically select the one needed for the rule.
It works like this:

. In the selection box choose a host tag group.
. Click [.guihint]#Add tag condition# -- an entry for this group will then be added.
. Select [.guihint]#is# or [.guihint]#is not#.
. Select the desired tag as a comparison value.

image::rules_props_hosttags.png[alt="Specifying multiple host tags in one condition."]


==== Labels

You can also use xref:glossar#label[Labels] as conditions in rules.
Read the description of xref:labels#rule_conditions[Conditions in rules].


==== Explicit hosts

This type of condition is intended for exception rules.
Here you can list one or more host names.
The rule will apply only to these hosts.
Note that if you check the [.guihint]#Explicit hosts# box but enter *no* hosts, then the rule will be completely ineffective.

Via the [.guihint]#Negate# option you can define a reversed-exception.
With this you can exclude explicitly-named hosts from the rule.
This rule will then apply to all hosts *except* the ones mentioned here.

image::rules_props_explicithosts_1.png[alt="Condition for explicitly named hosts."]

*Important*: All host names entered here will be checked for *exact congruence*.
{CMK} is fundamentally case-sensitive in host names! 

You can change this behavior to xref:regexes#[regular expressions] by prefixing host names with a tilde (`~`).
In this case, as always in the [.guihint]#Setup#:

* The match is applied to the *beginning* of the host name.
* The match is not case-sensitive.

A point-asterisk (`pass:[.*]`) in xref:regexes#[regular expressions] allows an arbitrary sequence of characters following the point.
The following example shows a condition which all hosts will match whose names *contain* the character sequence `my` (or `My`, `MY`, `mY` etc.):

image::rules_props_explicithosts_2.png[alt="Condition for host selection with wildcards."]


==== Explicit services

For rules that are applicable to services there is a last type of condition that defines a match on a service’s name, 
or respectively -- for rules that set check parameters -- the *check item’s* name.
With what exactly the match will be made can be seen in the caption.
In our example it is the name ([.guihint]#Instance#) of a Tablespace:

image::rules_props_explicitservices.png[alt="Condition for service selection with wildcards."]

A match with xref:regexes#[regular expressions] fundamentally applies here.
The sequence `pass:[.*]temp` matches all tablespaces *containing* `temp` because the match is always applied to the start of the name.
The dollar sign at the end of `transfer$` represents the end and thereby forces an exact match.
A tablespace with the name `transfer2` will thus *not* match.

Don’t forget:
for rules concerning [.guihint]#Explicit services# a match with the service name is required (e.g. `Tablespace transfer`).
For check parameter rules a match with the item applies (e.g. `transfer`).
The item is in fact the variable part of of the service name, and determines _to which_ tablespace it applies.

There are incidentally services without an item.
An example is [.guihint]#CPU load#.
This exists only once for each host -- so no item is required.
It follows then that rules for such check types are also without conditions.


[#matching]
== Rule analysis

Now we have described how rules are created.
However, simply creating rules is not enough.
As shown by the example in the xref:rule_based[Rule-based is better!] section at the start of this article, a single rule is not sufficient to achieve the desired result.
A more complex system of logically-sequenced rules is required for this.
For that reason an understanding of how multiple rules interact also becomes important.


[#matching_type]
=== Types of rule analysis

In the introduction to the concept of rules, you saw that the first rule that applies always determines the final outcome.
This is not the whole truth.
There are a total of three different types of evaluation:

[cols="~,~", options="header"]
|===
|Evaluation |Action

|First rule +
([.guihint]#The first matching rule defines the parameter.#) 
|The first matching rule defines the value.
Further rules are not evaluated.
This is the normal case for rules that define simple parameters.

|First rule per parameter +
([.guihint]#Each parameter is defined by the first matching rule where that parameter is set.#)
|Each single parameter is defined by the first rule where that parameter is defined (checkbox ticked).
This is the normal case for all rules with sub-parameters that are activated with checkboxes.

|All rules +
([.guihint]#All matching rules will add to the resulting list.#)|
All matching rules will add elements to the resulting list.
This type is used, for example, when matching hosts and services to host, service and contact groups.
|===

The information on how the rule is evaluated is displayed for each rule set directly below the menu bar:

image::rules_matching_strategy.png[alt="For each rule set the applicable rule evaluation is shown directly below the menu bar."]


[#rules_applied]
=== Rule evaluation in the practice explained

Now, how will it evaluated concretely if one has created several rules that are to be applied to several hosts?
To illustrate this, let's take a simple example:

Let's say you have three hosts and you want to set different periodically-repeated notifications for each of them (and also for all hosts added in the future) with the [.guihint]#Periodic notifications during host problems# rule:

. Rule A: Host-1 every 10 minutes
. Rule B: Host-2 every 20 minutes
. Rule C: all hosts every 30 minutes (general rule to cover both Host-3 and any hosts added in the future).

If you now activate your configuration, {CMK} runs through the chain of rules from top to bottom.
This results in the following evaluation:

* Rule A applies to Host-1.
The notification for Host-1 takes place every 10 minutes.
This completes the processing for Host-1.

* Rule A does not apply to Host-2.
We continue with rule B.
This applies to Host-2 so that Host-2 is notified every 20 minutes.
This completes the processing for Host-2.

* Rule A does not apply to Host-3, neither does Rule B.
But rule C fits and is applied: notification for Host-3 is at 30-minute intervals.
This also completes the processing for Host-3.

Please note here:
Since xref:matching_type['The first matching rule defines the parameter'] applies to this rule set, the processing of the rule chain is always terminated after the first match.
The order of the rules is therefore decisive for the result!
This becomes apparent when the order of the rules is changed and rules B and C are swapped:

. Rule A: Host-1 every 10 minutes
. Rule C: all hosts every 30 minutes
. Rule B: Host-2 every 20 minutes

If the rule chain is now run through again from top to bottom for the individual hosts, the result also changes:
Rule C now applies not only to Host-3, but also to Host-2, so that the notification for both hosts takes place every 30 minutes.
This completes the processing for both hosts.
Although Rule B would be relevant for Host-2, and was even written for this host, it will no longer be evaluated and applied.
In the xref:analyse_traffic_light[analysis mode], the process will then look like this:

.For Host-2, the final rule with the yellow sphere also matches, but is not applied
image::rules_analyse_mode_example.png[alt='Analysis mode for Host-2 after swapping rules B and C.']

By combining the various settings explained in this article -- keeping in mind the correct processing order -- 
you can use them to build complex rule chains for entire host complexes.
