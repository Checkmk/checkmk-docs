// -*- coding: utf-8 -*-
// IGNORE Securables datafile
include::global_attr.adoc[]
= Monitoring Microsoft SQL Server
:revdate: draft
:title: Monitoring Microsoft SQL Server
:description: With the {CMK} plug-in for Windows and Linux, you can fully monitor Microsoft SQL Server.
:keywords: mssql, sql, db, database

{related-start}
link:agent_windows.html[Monitoring Windows]
link:wato_monitoringagents.html[Monitoring agents]
link:https://checkmk.com/de/integrations[Catalog of Check plug-ins^]
{related-end}


[TIP]
====
This article is currently under construction and is being expanded on a regular basis.
====


[#intro]
== Introduction

{CMK} enables you to comprehensively monitor Microsoft SQL Server (abbreviated to 'MSSQL' in this article).
You can find a complete list of all available xref:glossar#check_plugin[check plug-ins] in our link:https://checkmk.com/integrations?tags=mssql[Catalog of Check Plug-ins^].

In order to be able to monitor the databases, you just need the xref:glossar#agent_plugin[agent plug-in] `mk-sql` in addition to the {CMK} agent.
As of {CMK} {v23}, this agent plug-in is also able to monitor databases on remote systems.
No additional software is required either on the {CMK} server or on the database server.

The only mandatory requirement for the use of `mk-sql` is that the TCP/IP protocol is activated in the SQL server network configuration.
ifdef::onprem[]
If TCP/IP is not permitted or allowed in your MSSQL server environment, until further notice you will have to fall back to the xref:monitoring_mssql_legacy#[`mssql.vbs` legacy plug-in].
endif::[]

[#setup_login]
== Setting up a login for the monitoring

The agent plug-in requires access to your MSSQL instances.
As a rule, it will be clear -- long before the monitoring team arrives -- what such access can or may look like.
In the case of MSSQL, there are two options.
Either you exclusively use the [.guihint]#Windows Authentication mode# or the mixed mode [.guihint]#SQL Server and Windows Authentication mode#.
In the following two sections, we explain what to look out for in these respective procedures.


[#system_user]
=== Using the system user (Windows only)

The {CMK} agent is executed by the system user (`NT AUTHORITY\SYSTEM`) on Windows systems.
If you can also use this system user for monitoring MSSQL, you only need to make sure that this login has at least permissions for the following securable elements ([.guihint]#Securables#):

* [.guihint]#View server state#
* [.guihint]#Connect SQL#

Depending on which of your instances' databases you want to monitor and depending on which server roles and mappings the system user (`NT AUTHORITY\SYSTEM`) already has, it may also be necessary to grant permission for [.guihint]#Connect any database#.


[#dedicated_login]
=== Using a dedicated account for the monitoring

There are also good reasons for *not* running MSSQL monitoring via the Windows system user,
the most banal reason being that there is no Windows system user on Linux systems.
Further reasons can include security requirements within the company or simply the desire to have dedicated and clearly named logins, the meanings and functions of which can be readily recognized from their names.

The agent plug-in of course also works with such logins.

The basic requirement in MSSQL is that the [.guihint]#Server authentication# is set to [.guihint]#SQL Server and Windows Authentication mode#.
If you do not want to or cannot use the Windows system user, this requirement should already have been met, but this point should not go unmentioned.

If there is no corresponding user on your MSSQL server or in your instance, you can create one using the Microsoft SQL Server Management Studio:

image::monitoring_mssql_new_user.png[alt="Selecting the 'New Login...' option in MSSQL."]

This login requires the following permissions:

* [.guihint]#View server state#
* [.guihint]#Connect SQL#
* [.guihint]#Connect any database#

Grant these permissions in the [.guihint]#Object Explorer# via [.guihint]#Security > Logins#.
Open the properties of the login and click on [.guihint]#Securables#.
Under [.guihint]#Explicit# you will find the three entries mentioned above.
Set the corresponding check marks in the [.guihint]#Grant# column and confirm with [.guihint]#OK#.

image::mssql_permissions.png[alt="Grant 'Connect any database' permission."]

Alternatively, you can also create the user and the permissions via the command line.
In the following example, this is done for the user `checkmk`:

[{sql}]
----
mssql> USE master;
      CREATE USER checkmk WITH PASSWORD = 'MyPassword123';
      GO
----

and then:

[{sql}]
----
mssql> USE master;
      GRANT CONNECT SQL TO checkmk;
      GRANT CONNECT ANY DATABASE TO checkmk;
      GRANT VIEW ANY DATABASE TO checkmk;
      GO
----


== Setting up the connection manually

ifdef::onprem[]
If you use {CRE} or do not want to use the Agent Bakery of the commercial editions, set up the communication manually.
endif::[]
ifdef::saas[]
If you do not want to use the Agent Bakery, set up the communication manually.
endif::[]

For the rest of the description, we will assume that the agent for Windows monitoring has already been installed on the host.


=== Creating the configuration file

On the Windows host, create a `mk-sql.yml` file in the directory specified below:

If you are using the system user, this will be sufficient:

.C:\ProgramData\checkmk\agent\config\mk-sql.yml
[{yaml}]
----
---
mssql:
  main:
    authentication:
      username: ''
      type: integrated
----

If instead you work with the xref:dedicated_login[dedicated account for monitoring], you will need the following content:

.C:\ProgramData\checkmk\agent\config\mk-sql.yml
[{yaml}]
----
---
mssql:
  main:
    authentication:
      username: checkmk
      password: MyPassword123
      type: sql_server
----

If you are running multiple MSSQL instances with individual user names and passwords on the host, add the details of these instances to the `yml` file accordingly.
Your `yml` file could then look like this, for example:

.C:\ProgramData\checkmk\agent\config\mk-sql.yml
[{yaml}]
----
---
mssql:
  main:
    authentication:
      username: ""
      type: integrated
    instances:
      - sid: myInstance 1
        auth:
          username: myUser1
          password: "123456"
          type: sql_server
      - sid: myInstance 2
        auth:
          username: myUser2
          password: "987654"
          type: sql_server
----


=== Installing the agent plug-in

Under [.guihint]#Setup > Agents > Windows files# you will find the file `mk-sql.exe` in the [.guihint]#Windows Agent# section. 

image::monitoring_mssql_agentfile.png[alt="Selection of the {CMK} agent plug-in."]

Download the file and save this on the Windows host in the directory `C:\ProgramData\checkmk\agent\plugins\`.
Then execute the file once.


=== Configuring services

Now that you have installed and configured the agent plug-in, you can perform a xref:glossar#service_discovery[service discovery] for this host.
The following screenshot shows only a selection of the services that can be found:

image::monitoring_mssql_discovery.png[alt="Extract from the service discovery."]


[#extended_configuration]
== Extended configuration

=== Asynchronous execution of the agent plug-in

The agent plug-in for monitoring MSSQL can -- like so many others -- be executed asynchronously, to take account of longer runtimes for large MSSQL instances for example.

To run the agent plug-in asynchronously under Windows, modify the configuration of the agent and add the following entry to the `execution` section under `plugins`:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{yaml}]
----
plugins:
    execution:
        - pattern: mssql.vbs
          cache_age: 300
          async: yes
----

You can find detailed instructions explaining the asynchronous execution of agent plug-ins on a Windows host in the article on the xref:agent_windows#customizeexecution[Windows agent].


=== Configuring thresholds

==== Monitoring connections

You can specify your own thresholds for the utilization of the maximum number of simultaneous connections specified by MSSQL, as these are much more dependent on the structure of your MSSQL instance than with other services.
You can set up the corresponding thresholds in no time at all using a rule from the [.guihint]#MSSQL Connections# rule set.

image::monitoring_mssql_connections.png[alt="Setting the upper thresholds for active connections."]


==== Monitoring file sizes

You can also define thresholds for the sizes of individual files in MSSQL.
To do this, use the rule set [.guihint]#MSSQL datafile sizes.#

image::monitoring_mssql_size_datafile.png[alt="Setting the file sizes used."]


[#bakery]
== Configuration using the Agent Bakery

ifdef::onprem[]
{cee-only}
Setup is greatly simplified in the commercial editions using the xref:glossar#agent_bakery[Agent Bakery],
endif::[]
ifdef::saas[]
Setup is greatly simplified in {CE} (SaaS) using the xref:glossar#agent_bakery[Agent Bakery],
endif::[]
as syntax errors in the configuration files are avoided and adjustments to changing environments can be made easily.
The main difference compared to a manual installation is that you will only need to work on the MSSQL host on the command line if you want to make special MSSQL-specific configurations.

For the initial setup, it is sufficient to create a corresponding rule in the agent bakery.
You can find the rule set under [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules.#
You can then search for `mssql` in the search field:

image::monitoring_mssql_bakery_ruleset_search.png[alt="The rule 'Microsoft SQL Server (Linux, Windows)' in the agent rules."]

Depending on how the agent plugin is allowed to log in to your SQL server (see xref:setup_login[Setting up a login for monitoring]), select the appropriate option under [.guihint]#Authentication#.
If you use the system user (`NT AUTHORITY\SYSTEM`), leave the selection at [.guihint]#Local Integrated Authentication (Windows)#.

image::monitoring_mssql_bakery_new.png[alt="Possible settings for the MSSQL server in the agent bakery."]

Instead, use the _SQL Server Authentication_, select the [.guihint]#SQL Database User Credentials# option, also enter the [.guihint]#Login name# in the [.guihint]#User# field and add the corresponding [.guihint]#Password#.

If you are running multiple MSSQL instances with different user names and passwords on the host, select the [.guihint]#Custom instances# option.
Use [.guihint]#Add new element# to access the details for the first -- and then each additional -- instance to be monitored.
Enter the access data for each instance here, as described above.

image::monitoring_mssql_bakery_more.png[alt="Multiple MSSQL instances in the Bakery rule."]


=== Further options

With the settings you have just made, you first create a simple agent for monitoring your MSSQL instance, which is located directly on the host.
All available data is evaluated directly in {CMK} and this should be sufficient for a standard setup.
However, if you have a more complex MSSQL world in your organization, there are further options, both for monitoring the database on the same host and for monitoring it on a remote host.
These are basically the same for both connection types.

[cols="30,~", options="header"]
|===
|Option |Function
|[.guihint]#Connection# |If you need more specific connection data for the general connection to the MS SQL server, you can enter it here.
|[.guihint]#Data to collect (Sections)# |Here you can restrict section by section which data should be collected or whether it should be collected synchronously or asynchronously.
|[.guihint]#Cache age for asynchronous checks# |You can change the caching period in seconds for the previously defined asynchronous checks.
|[.guihint]#Map data to specific host (Piggyback)# |xref:glossar#piggyback[Piggyback] data can be assigned to a host regardless of the actual source. For example, the SQL information can be separated from the data of the underlying Windows server.
|[.guihint]#Discovery mode of databases# |Settings for the instance search.
|[.guihint]#Custom instances# |In addition to the general settings for accessing your MS SQL Server, you can make your own settings for specific instances here.
|[.guihint]#Options# |The maximum number of parallel SQL Server connections can be set here.
|===

[#diagnostic]
== Diagnostic options

=== Possible errors and error messages

==== Error message: Failed to gather SQL Server instances

Check whether the TCP/IP connection is configured and working.


[#files]
== Files and directories

=== On the MSSQL host (Windows)

[cols="40,~",options="header"]
|===
|File path |Content
|`C:\ProgramData\checkmk\agent\plugins\` |Directory for storing the agent plug-ins.
|`C:\ProgramData\checkmk\agent\config\mk-sql.yml` |Configuration file for the agent plug-in.
|===


=== On the MSSQL host (Linux)

[cols="40,~",options="header"]
|===
|File path |Content
|`/usr/lib/check_mk_agent/plugins/` |Directory for storing the agent plug-ins.
|`/etc/check_mk/mk-sql.yml` |Configuration file for the agent plug-in.
|===

ifdef::onprem[]
=== On the {CMK} server

[cols="40,~",options="header"]
|===
|File path |Content
|`~/share/check_mk/agents/windowss/mk-sql.exe` |The agent plug-in you have to copy to your Windows hosts, in order to monitor MS SQL there.
|`~/share/check_mk/agents/linux/mk-sql` |The agent plug-in you have to copy to your Linux hosts, in order to monitor MS SQL there.
|===
endif::[]


////
//SP: Start of translation - replacementof full existing text

[#intro]
== Einleitung

{CMK} ermöglicht Ihnen ein umfangreiches Monitoring von [.brand]#Microsoft SQL Server# (im weiteren Verlauf nur noch mit "MSSQL" abgekürzt).
Eine vollständige Auflistung aller verfügbaren xref:glossar#check_plugin[Check-Plugins] finden Sie in unserem link:https://checkmk.com/de/integrations?tags=mssql[Katalog der Check-Plugins^].

Um die Datenbanken überwachen zu können, benötigen Sie neben dem {CMK}-Agenten zusätzlich noch das xref:glossar#agent_plugin[Agentenplugin] `mk-sql`.
Dieses Agentenplugin ist ab {CMK} {v23} auch in der Lage, Datenbanken auf entfernten Systemen zu überwachen.
Zusätzliche Software wird weder auf dem {CMK}- noch auf dem Datenbank-Server benötigt.

Die einzige zwingende Voraussetzung für die Verwendung von `mk-sql` ist, dass in der SQL-Server-Netzwerkkonfiguration das Protokoll TCP/IP aktiviert ist.
ifdef::onprem[]
Sollte in Ihrer MSSQL-Server-Umgebung kein TCP/IP zugelassen beziehungsweise erlaubt sein, müssen Sie bis auf Weiteres auf das xref:monitoring_mssql_legacy#[Legacy-Plugin `mssql.vbs`] zurückgreifen.
endif::[]


[#setup_login_windows]
== Login für die Überwachung einrichten (Windows)

Das Agentenplugin benötigt Zugang zu Ihren MSSQL-Instanzen.
Im Regelfall steht -- lange bevor das Monitoring-Team kommt -- fest, wie ein solcher Zugang aussehen kann oder darf.
Im Falle von MSSQL gibt es zwei Möglichkeiten.
Entweder Sie verwenden ausschließlich den [.guihint]#Windows Authentication mode# oder den Mischbetrieb [.guihint]#SQL Server and Windows Authentication mode#.


[#system_user]
=== Systembenutzer verwenden

Der {CMK}-Agent wird auf Windows-Systemen vom Systembenutzer (`NT AUTHORITY\SYSTEM`) ausgeführt.
Wenn Sie diesen Systembenutzer auch für das Monitoring von MSSQL verwenden können, müssen Sie nur noch darauf achten, dass dieses Konto (_login_), mindestens Berechtigungen für die folgenden absicherungsfähigen Elemente ([.guihint]#Securables#) besitzt:

* [.guihint]#View server state#
* [.guihint]#Connect SQL#
* [.guihint]#Connect any database (optional)#

Die Berechtigung [.guihint]#Connect any database (Verbindung mit beliebiger Datenbank)# ist zwar optional, wird aber in fast allen Szenarien der Überwachung von MSSQL benötigt.



[#dedicated_login]
=== Dediziertes Konto für das Monitoring verwenden

Es gibt auch gute Gründe dafür, das Monitoring von MSSQL *nicht* über den Systembenutzer von Windows laufen zu lassen.
Denkbar sind unter anderem Sicherheitsvorgaben im Unternehmen oder einfach der Wunsch, dedizierte und klar benannte Logins zu haben, deren Sinn und Zweck schon am Namen ablesbar ist.

Selbstverständlich funktioniert das Agentenplugin auch mit solchen Konten (_Logins_).

Die Grundvoraussetzung in MSSQL ist, dass die [.guihint]#Server authentication# auf [.guihint]#SQL Server and Windows Authentication mode# gestellt ist.
Wenn Sie nicht den Windows-eigenen Systembenutzer verwenden wollen oder können, dürfte diese Voraussetzung zwar bereits erfüllt sein, sie soll aber auch nicht unerwähnt bleiben.

Sollte noch kein entsprechender Benutzer auf Ihrem MSSQL-Server bzw. in Ihrer -Instanz vorhanden sein, so können Sie diesen auf Ihrem Windows-System über das Microsoft SQL Server Management Studio (mit einem beliebigen Benutzernamen) erstellen:

image::monitoring_mssql_new_user.png[alt="Auswahl der Option 'New Login...' in MSSQL.", width=38%]

Dieser Login benötigt die folgenden Berechtigungen:

* [.guihint]#Connect SQL#
* [.guihint]#Connect any database#
* [.guihint]#View server state#

Erteilen Sie diese Berechtigungen im [.guihint]#Object Explorer# über [.guihint]#Security > Logins#.
Öffnen Sie hier die Eigenschaften des Kontos (_login_) und klicken Sie auf [.guihint]#Securables#.
Unter [.guihint]#Explicit# finden Sie die drei oben genannten Einträge.
Setzen Sie in der Spalte [.guihint]#Grant# die entsprechenden Haken und bestätigen über [.guihint]#OK#.

image::mssql_permissions.png[alt="Berechtigung 'Connect any database' erteilen."]

Alternativ können Sie den Benutzer und die Berechtigungen auch über die Befehlszeile erzeugen.
Im folgenden Beispiel wird das für den Benutzer `checkmk` erledigt:


[{sql}]
----
mssql> USE master;
      CREATE USER checkmk WITH PASSWORD = 'MyPassword123';
      GO
----

und danach:

[{sql}]
----
mssql> USE master;
      GRANT CONNECT SQL TO checkmk;
      GRANT CONNECT ANY DATABASE TO checkmk;
      GRANT VIEW SERVER STATE TO checkmk;    
      GO
----


=== Manuelle Einrichtung der Verbindung

ifdef::onprem[]
Wenn Sie {CRE} nutzen oder die Agentenbäckerei der kommerziellen Editionen nicht nutzen wollen, richten Sie die Kommunikation manuell ein.
endif::[]
ifdef::saas[]
Wenn Sie die Agentenbäckerei nicht nutzen wollen, richten Sie die Kommunikation manuell ein.
endif::[]

Für die weitere Beschreibung gehen wir davon aus, dass der Agent für die Windows-Überwachung bereits auf dem Host installiert ist.


==== Konfigurationsdatei erstellen

Auf dem Windows-Host legen Sie im unten angegebenen Verzeichnis eine Datei `mk-sql.yml` an:

Bei Verwendung des Systembenutzers genügt:

.C:\ProgramData\checkmk\agent\config\mk-sql.yml
[{yaml}]
----
---
mssql:
  main:
    authentication:
      username: ''
      type: integrated
----

Verwenden Sie stattdessen das xref:dedicated_login[dezidierte Konto für das Monitoring,] so brauchen Sie folgenden Inhalt:

.C:\ProgramData\checkmk\agent\config\mk-sql.yml
[{yaml}]
----
---
mssql:
  main:
    authentication:
      username: checkmk
      password: MyPassword123
      type: sql_server
----

Sollten Sie auf dem Host mehrere MSSQL-Instanzen mit verschiedenen Benutzernamen und Passwörtern betreiben, erweitern Sie die `yml`-Datei entsprechend um die Angaben zu den Instanzen.
Ihre `yml`-Datei könnte dann beispielsweise so aussehen:

.C:\ProgramData\checkmk\agent\config\mk-sql.yml
[{yaml}]
----
---
mssql:
  main:
    authentication:
      username: ""
      type: integrated
    instances:
      - sid: myInstance 1
        auth:
          username: myUser1
          password: "123456"
          type: sql_server
      - sid: myInstance 2
        auth:
          username: myUser2
          password: "987654"
          type: sql_server
----


==== Agentenplugin installieren

Das Agentenplugin `mk-sql.exe` finden Sie in den kommerziellen Editionen unter [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Related > Windows files# und in {RE} unter [.guihint]#Setup > Agents > Windows.#

.Beispielhafte Darstellung aus {RE}
image::monitoring_mssql_agentfile.png[alt="Auswahl des Agentenplugins in {CMK}."]

Laden Sie die Datei herunter und legen Sie diese auf dem Windows-Host im Verzeichnis `C:\ProgramData\checkmk\agent\plugins\` ab.


==== Services einrichten

Nachdem Sie das Agentenplugin nun installiert und konfiguriert haben, können Sie für diesen Host eine xref:glossar#service_discovery[Service-Erkennung] durchführen.
Der folgende Screenshot zeigt dabei nur eine Auswahl der auffindbaren Services:

image::monitoring_mssql_discovery.png[alt="Auszug der Service-Erkennung."]


[#extended_configuration]
=== Erweiterte Konfiguration

==== Asynchrone Ausführung des Agentenplugins

Das Agentenplugin für die Überwachung von MSSQL kann -- wie so viele andere -- asynchron ausgeführt werden, um beispielsweise längeren Laufzeiten bei großen MSSQL-Instanzen Rechnung zu tragen.

Um das Agentenplugin unter Windows asynchron auszuführen, passen Sie die Konfiguration des Plugins an und erweitern die Sektion `main` um eine Zeile zu `cache_age`:

.C:\ProgramData\checkmk\agent\config\mk-sql.yml
[{yaml}]
----
mssql:
  main:
    authentication:
      username: myuser
      password: mypassword
      type: sql_server
    cache_age: 300
----

Eine detaillierte Anleitung zur asynchronen Ausführung von Agentenplugins auf einem Windows-Host finden Sie im Artikel über den xref:agent_windows#customizeexecution[Windows-Agenten.]


[#setup_login_linux]
== Login für die Überwachung einrichten (Linux)

[#system_user_linux]
=== Benutzer für das Monitoring anlegen

Sie benötigen einen Benutzer, der sich mit Ihrer MSSQL-Instanz verbinden kann.
Dieser Benutzer benötigt mindestens die folgenden Berechtigungen:

* `Connect SQL`
* `Connect any database`
* `View server state`

Abgesehen von diesen Berechtigungen ist es Ihnen bzw. Ihrer Organisation überlassen, wie ein solcher Nutzer erzeugt werden kann oder muss.


Zu Testzwecken können Sie einen lokalen Benutzer verwenden.
Sollte noch kein entsprechender Benutzer auf Ihrem MSSQL-Server bzw. in Ihrer -Instanz vorhanden sein, so können Sie diesen auf Ihrem Linux-System über die Befehlszeile erstellen:

Im folgenden Beispiel wird das für den Benutzer `checkmk` erledigt:

[{sql}]
----
sudo adduser --system checkmk --ingroup sudo
----
Folgen Sie den Aufforderungen zur Passwortvergabe etc.


//SK: Nochmal einmal kurz nachspielen.

Danach:

[{sql}]
----
mssql> USE master;
      GRANT CONNECT SQL TO checkmk;
      GRANT CONNECT ANY DATABASE TO checkmk;
      GRANT VIEW SERVER STATE TO checkmk;    
      GO
----


=== Manuelle Einrichtung der Verbindung

ifdef::onprem[]
Wenn Sie {CRE} nutzen oder die Agentenbäckerei der kommerziellen Editionen nicht nutzen wollen, richten Sie die Kommunikation manuell ein.
endif::[]
ifdef::saas[]
Wenn Sie die Agentenbäckerei nicht nutzen wollen, richten Sie die Kommunikation manuell ein.
endif::[]

Für die weitere Beschreibung gehen wir davon aus, dass der Agent für die Linux-Überwachung bereits auf dem Host installiert ist.


==== Konfigurationsdatei erstellen

Auf dem Linux-Host legen Sie im unten angegebenen Verzeichnis eine Datei `mk-sql.yml` an:

./etc/check_mk/mk-sql.yml
[{yaml}]
----
---
mssql:
  main:
    authentication:
      username: checkmk
      password: checkmkPW
      type: sql_server
----


Sollten Sie auf dem Host mehrere MSSQL-Instanzen mit verschiedenen Benutzernamen und Passwörtern betreiben, erweitern Sie die `yml`-Datei entsprechend um die Angaben zu den Instanzen.
Ihre `yml`-Datei könnte dann beispielsweise so aussehen:

./etc/check_mk/mk-sql.yml
[{yaml}]
----
---
mssql:
  main:
    authentication:
      username: checkmk
      password: checkmkPW
      type: sql_server
    instances:
    - sid: myInstance1
      auth:
        username: myUser1
        password: 123456
        type: sql_server
    - sid: myInstance2
      auth:
        username: myUser2
        password: 987654
        type: sql_server
----


==== Agentenplugin installieren

Das Agentenplugin `mk-sql` finden Sie in den kommerziellen Editionen unter [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Related > Linux, Solaris, AIX files# und in {RE} unter [.guihint]#Setup > Agents > Linux.#

.Beispielhafte Darstellung aus {RE}
image::monitoring_mssql_agentfile_linux.png[alt="Auswahl des Agentenplugins in {CMK}."]

Laden Sie die Datei herunter und legen Sie diese auf dem Linux-Host im Verzeichnis `~/usr/lib/check_mk_agent/plugins/mk-sql` ab.

==== Services einrichten

Nachdem Sie das Agentenplugin nun installiert und konfiguriert haben, können Sie für diesen Host eine xref:glossar#service_discovery[Service-Erkennung] durchführen.
Der folgende Screenshot zeigt dabei nur eine Auswahl der auffindbaren Services:

image::monitoring_mssql_discovery.png[alt="Auszug der Service-Erkennung."]


[#extended_configuration_linux]
=== Erweiterte Konfiguration

==== Asynchrone Ausführung des Agentenplugins

Das Agentenplugin für die Überwachung von MSSQL kann -- wie so viele andere -- asynchron ausgeführt werden, um beispielsweise längeren Laufzeiten bei großen MSSQL-Instanzen Rechnung zu tragen.

Um das Agentenplugin unter Linux asynchron auszuführen, passen Sie die Konfiguration des Agenten an und erweitern die Sektion `main` um eine Zeile zu `cache_age`:

./etc/check_mk/mk-sql.yml
[{yaml}]
----
mssql:
  main:
    authentication:
      username: myuser
      password: mypassword
      type: sql_server
    cache_age: 300
----

Eine detaillierte Anleitung zur asynchronen Ausführung von Agentenplugins auf einem Linux-Host finden Sie im Artikel über den xref:agent_linux#async_plugins[Linux-Agenten.]


== Weitere Konfiguration in {CMK}

=== Schwellwerte konfigurieren

==== Verbindungen überwachen

Für die Auslastung der durch MSSQL vorgegebenen maximalen Anzahl an gleichzeitigen Verbindungen können Sie eigene Schwellwerte vorgeben, da diese viel stärker als bei anderen Services vom Aufbau Ihrer MSSQL-Instanz abhängig sind.
Die Einrichtung entsprechender Schwellwerte lässt sich mit einer Regel aus dem Regelsatz [.guihint]#MSSQL Connections# im Handumdrehen bewerkstelligen.

image::monitoring_mssql_connections.png[alt="Einstellung der oberen Schwellwerte für aktive Verbindungen."]


==== Dateigrößen überwachen

Auch für die Größe einzelner Dateien in MSSQL können Sie Schwellwerte festlegen.
Dazu verwenden Sie den Regelsatz [.guihint]#MSSQL datafile sizes.#

image::monitoring_mssql_size_datafile.png[alt="Einstellung der genutzten Dateigrößen."]


[#bakery]
== Konfiguration über die Agentenbäckerei

ifdef::onprem[]
{cee-only}
Die Einrichtung wird in den kommerziellen Editionen mittels der xref:glossar#agent_bakery[Agentenbäckerei] sehr vereinfacht,
endif::[]
ifdef::saas[]
Die Einrichtung wird in {CE} (SaaS) mittels der xref:glossar#agent_bakery[Agentenbäckerei] sehr vereinfacht,
endif::[]
da Syntaxfehler in den Konfigurationsdateien vermieden werden und Anpassungen an sich verändernde Umgebungen einfach bewerkstelligt werden können.
Der wesentliche Unterschied zu einer manuellen Installation ist, dass Sie nur noch dann auf dem MSSQL-Host auf der Kommandozeile arbeiten müssen, wenn Sie spezielle MSSQL-spezifische Konfigurationen vornehmen möchten.

Für die erste Einrichtung reicht es, wenn Sie eine entsprechende Regel in der Agentenbäckerei anlegen.
Sie finden den Regelsatz unter [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules.#
In dem Suchfeld können Sie dann nach `mssql` suchen:

image::monitoring_mssql_bakery_ruleset_search.png[alt="Die Regel 'Microsoft SQL Server (Linux, Windows)' in den Agentenregeln."]

=== Einrichtung der Agentenregel (Windows)

Je nachdem, wie sich das Agentenplugin an Ihrem MSSQL-Server anmelden darf (siehe xref:setup_login_windows[Login für die Überwachung einrichten]), wählen Sie unter [.guihint]#Authentication# nun die entsprechende Option aus.
Nutzen Sie den Systembenutzer (`NT AUTHORITY\SYSTEM`), belassen Sie die Auswahl bei [.guihint]#Local Integrated Authentication (Windows)#.

image::monitoring_mssql_bakery_new.png[alt="Mögliche Einstellungen für den MSSQL Server in der Agentenbäckerei."]

Verwenden Sie stattdessen die _SQL Server Authentication,_ wählen Sie hier die Option [.guihint]#SQL Database User Credentials,# geben zusätzlich den [.guihint]#Login name# (siehe xref:#dedicated_login[Dediziertes Konto für das Monitoring verwenden]) im Feld [.guihint]#User# ein und fügen das zugehörige [.guihint]#Password# hinzu.

Sollten Sie auf dem Host mehrere MSSQL-Instanzen mit verschiedenen Benutzernamen und Passwörtern betreiben, wählen Sie die Option [.guihint]#Custom instances#.
Über [.guihint]#Add new element# gelangen Sie zu den Angaben für die erste -- und danach jede weitere -- Instanz, die überwacht werden soll.
Tragen Sie hier, analog zur obigen Beschreibung, die Zugriffsdaten je Instanz ein.

image::monitoring_mssql_bakery_more.png[alt="Mehrere MSSQL-Instanzen in der Bakery-Regel."]


=== Einrichtung der Agentenregel (Linux)

Wählen Sie unter [.guihint]#Authentication# die Option [.guihint]#SQL database user credentials#.

image::monitoring_mssql_bakery_unix.png[alt="Mögliche Einstellungen für den MSSQL Server in der Agentenbäckerei."]

Geben Sie dann den [.guihint]#Login name# im Feld [.guihint]#User# ein und fügen Sie das zugehörige [.guihint]#Password# hinzu.
Ergänzen Sie für die [.guihint]#Connection# den [.guihint]#Host name#.

Sollten Sie auf dem Host mehrere MSSQL-Instanzen mit verschiedenen Benutzernamen und Passwörtern betreiben, wählen Sie die Option [.guihint]#Custom instances#.
Über [.guihint]#Add new element# gelangen Sie zu den Angaben für die erste -- und danach jede weitere -- Instanz, die überwacht werden soll.
Tragen Sie hier, analog zur obigen Beschreibung, die Zugriffsdaten je Instanz ein.

image::monitoring_mssql_bakery_more.png[alt="Mehrere MSSQL-Instanzen in der Bakery-Regel."]


=== Weitere Optionen

Mit den soeben vorgenommenen Einstellungen kreieren Sie zunächst einen einfachen Agenten zur Überwachung Ihrer MSSQL-Instanz, die sich direkt auf dem Host befindet.
Alle verfügbaren Daten werden direkt in {CMK} ausgewertet und für den Standardfall sollte dies bereits genügen.
Haben Sie eine komplexere MSSQL-Welt in Ihrem Unternehmen, so gibt es jedoch weitere Optionen, sowohl für die Überwachung der Datenbank auf dem gleichen Host als auch für die Überwachung auf einem entfernten Host.
Diese sind prinzipiell für beide Verbindungstypen gleich.


[cols="30,~", options="header"]
|===
|Option |Funktion
|[.guihint]#Connection# |Brauchen Sie für die allgemeine Verbindung zum MSSQL-Server spezifischere Verbindungsdaten, so können Sie diese hier angeben.
|[.guihint]#Data to collect (Sections)# |Hier können Sie abschnittsweise einschränken, welche Daten eingesammelt werden sollen bzw. ob diese synchron oder asynchron gesammelt werden sollen.
|[.guihint]#Cache age for asynchronous checks# |Für die zuvor festgelegten asynchronen Checks können Sie den Caching-Zeitraum in Sekunden ändern.
|Map data to specific host (Piggyback) |xref:glossar#piggyback[Piggyback]-Daten können -- unabhängig von der eigentlichen Quelle -- einem Host zugeordnet werden. So lassen sich zum Beispiel die SQL-Informationen von den Daten des zugrundeliegenden Windows-Servers trennen.
|[.guihint]#Discovery mode of databases# |Einstellungen für die Suche in der Instanz.
|[.guihint]#Custom instances# |Ergänzend zu den allgemeinen Vorgaben zum Zugriff auf Ihren MSSQL-Server, können Sie hier für spezifische Instanzen eigene Einstellungen setzen.
|[.guihint]#Options# |Die maximale Anzahl an parallelen SQL-Server-Verbindungen kann hier eingestellt werden.
|===



[#diagnostic]
== Diagnosemöglichkeiten



=== Mögliche Fehler und Fehlermeldungen

==== Fehlermeldung: Failed to gather SQL Server instances

Prüfen Sie, ob die TCP/IP-Verbindung konfiguriert ist und funktioniert.



[#files]
== Dateien und Verzeichnisse

=== Auf dem MSSQL-Host (Windows)

[cols="55,~",options="header"]
|===
|Pfad |Verwendung
|`C:\ProgramData\checkmk\agent\plugins\` |Verzeichnis zur Ablage der Agentenplugins.
|`C:\ProgramData\checkmk\agent\config\mk-sql.yml` |Konfigurationsdatei für das Agentenplugin.
|===


=== Auf dem MSSQL-Host (Linux)

[cols="55,~",options="header"]
|===
|Pfad |Verwendung
|`/usr/lib/check_mk_agent/plugins/` |Verzeichnis zur Ablage der Agentenplugins.
|`/etc/check_mk/mk-sql.yml` |Konfigurationsdatei für das Agentenplugin.
|===

ifdef::onprem[]
=== Auf dem {CMK}-Server

[cols="55,~",options="header"]
|===
|Pfad |Verwendung
|`~/share/check_mk/agents/windowss/mk-sql.exe` |Das Agentenplugin, das Sie auf Ihre Windows-Hosts kopieren müssen, um MSSQL dort zu überwachen.
|`~/share/check_mk/agents/linux/mk-sql` |Das Agentenplugin, das Sie auf Ihre Linux-Hosts kopieren müssen, um MSSQL dort zu überwachen.
|===
endif::[]

//SP: End of translation
////