// -*- coding: utf-8 -*-
// IGNORE Securables datafile
// SKIPCOMMITS 2025-07-23
include::global_attr.adoc[]
= Monitoring Microsoft SQL Server
:revdate: 2025-07-21
:title: Monitoring Microsoft SQL Server
:description: With the {CMK} plug-in for Windows and Linux, you can fully monitor Microsoft SQL Server.
:keywords: mssql, sql, db, database

{related-start}
link:agent_windows.html[Monitoring Windows]
link:wato_monitoringagents.html[Monitoring agents]
link:https://checkmk.com/integrations[Catalog of check plug-ins^]
{related-end}


[#intro]
== Introduction

{CMK} enables you to comprehensively monitor [.brand]#Microsoft SQL Servers# (abbreviated to 'MSSQL' in the following).
A complete list of all available xref:glossar#check_plugin[check plug-ins] can be found in our link:https://checkmk.com/integrations?tags=mssql[Catalog of check plug-ins^].

To be able to monitor the databases, you will also need the `mk-sql` xref:glossar#agent_plugin[agent plug-in] in addition to the {CMK} agent.
As of {CMK} {v23}, this agent plug-in is also able to monitor databases on remote systems.
No additional software is required on either the {CMK} or the database server.

The only mandatory requirement for using `mk-sql` is that the TCP/IP protocol is activated in the SQL server network configuration.
ifdef::onprem[]
If TCP/IP is not permitted or otherwise allowed in your MSSQL server environment, you must use the xref:monitoring_mssql_legacy#[legacy agent plug-in `mssql.vbs`] until further notice.
endif::[]


[#setup_account_windows]
== Setting up an account for monitoring (Windows)

The agent plug-in requires access to your MSSQL instances.
As a rule, it is clear -- long before the monitoring team arrives -- what such access can or may look like.
In the case of MSSQL, there are two options.
Either you use only the [.guihint]#Windows Authentication mode# or the mixed mode [.guihint]#SQL Server and Windows Authentication mode#.


[#localsystem_account]
=== Using the LocalSystem account

The {CMK} agent is executed on Windows systems under the LocalSystem account (`NT AUTHORITY\SYSTEM`).
If you can also use this LocalSystem account for monitoring MSSQL, you will only need to ensure that this account (_login_) has as a minimum the permissions for the following securable elements ([.guihint]#Securables#):

* [.guihint]#View server state#
* [.guihint]#Connect SQL#
* [.guihint]#Connect any database (optional)#

The permission [.guihint]#Connect any database (optional)# is optional, but is required in almost all MSSQL monitoring scenarios.


[#dedicated_account]
=== Using a dedicated account

There are good reasons for *not* running MSSQL monitoring via the Windows LocalSystem account.
Potential reasons include security requirements in the organization or simply the desire to have dedicated and clearly named accounts, the purpose of which is already clear from the name.

The plug-in of course also works with such accounts (_logins_).

The basic requirement in MSSQL is that the [.guihint]#Server authentication# is set to [.guihint]#SQL Server and Windows Authentication mode#.
If you do not want to or cannot use the Windows LocalSystem account, this requirement should have already been met, but it should not go unmentioned here.

If there is no corresponding user on your MSSQL server or in your instance, you can create one on your Windows system via the Microsoft SQL Server Management Studio (with any username):

image::monitoring_mssql_new_user.png[alt=“Selecting the ‘New Login...’ option in MSSQL.”, width=38%]

This login requires the following permissions:

* [.guihint]#Connect SQL#
* [.guihint]#Connect any database#
* [.guihint]#View server state#

Grant these permissions in the [.guihint]#Object Explorer# via [.guihint]#Security > Logins#.
Open the properties of the account (_login_) and click on [.guihint]#Securables#.
Under [.guihint]#Explicit# you will find the three entries mentioned above.
Set the corresponding check marks in the [.guihint]#Grant# column and confirm with [.guihint]#OK#.

image::mssql_permissions.png[alt=“Grant ‘Connect any database’ permission.”]

Alternatively, you can also create the user and the permissions via the command line.
In the following example, this is done for the user `checkmk`:

[{sql}]
----
mssql> USE master;
      CREATE USER checkmk WITH PASSWORD = 'MyPassword123';
      GO
----

and after that:

[{sql}]
----
mssql> USE master;
      GRANT CONNECT SQL TO checkmk;
      GRANT CONNECT ANY DATABASE TO checkmk;
      GRANT VIEW SERVER STATE TO checkmk;    
      GO
----


=== Setting up the connection manually

ifdef::onprem[]
If you use {CRE} or do not want to use the Agent Bakery of the commercial editions, set up the communication manually.
endif::[]
ifdef::saas[]
If you do not want to use the Agent Bakery, set up the communication manually.
endif::[]

For the rest of this description, we assume that the agent for Windows monitoring has already been installed on the host.


==== Creating a configuration file

On the Windows host create an `mk-sql.yml` file in the directory specified below:

When using the LocalSystem account, this is all that is required:

.C:\ProgramData\checkmk\agent\config\mk-sql.yml
[{yaml}]
----
---
mssql:
  main:
    authentication:
      username: ''
      type: integrated
----

If you use a xref:dedicated_account[dedicated account for monitoring], in its place, you will need the following content:

.C:\ProgramData\checkmk\agent\config\mk-sql.yml
[{yaml}]
----
---
mssql:
  main:
    authentication:
      username: checkmk
      password: MyPassword123
      type: sql_server
----

If you are running multiple MSSQL instances with different usernames and passwords on the host, add the details of the instances to the `yml` file accordingly.
Your `yml` file could then look like this, for example:

.C:\ProgramData\checkmk\agent\config\mk-sql.yml
[{yaml}]
----
---
mssql:
  main:
    authentication:
      username: ""
      type: integrated
    instances:
      - sid: myInstance 1
        auth:
          username: myUser1
          password: "123456"
          type: sql_server
      - sid: myInstance 2
        auth:
          username: myUser2
          password: "987654"
          type: sql_server
----


==== Installing the agent plug-in

The `mk-sql.exe` plug-in can be found
ifdef::onprem[]
in {RE} under [.guihint]#Setup > Agents > Windows# and in the commercial editions
endif::[]
under [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Related > Windows files#:

image::monitoring_mssql_agentfile.png[alt="Selection of the agent plug-in in {CMK}."]

Download the `mk-sql.exe` file and save it on the Windows host in the directory `C:\ProgramData\checkmk\agent\plugins\`.


==== Configuring services

Now that you have installed and configured the agent plug-in, you can perform a xref:glossar#service_discovery[service discovery] for this host.
The following screenshot shows only a selection of the services that can be found:

image::monitoring_mssql_discovery.png[alt=“Excerpt of the service discovery.”]


[#extended_configuration]
=== Extended configuration

==== Asynchronous execution of the agent plug-in

The agent plug-in for monitoring MSSQL can -- like so many others -- be executed asynchronously, for example to take account of the longer runtimes of large MSSQL instances.

To run the agent plug-in asynchronously under Windows, edit the configuration of the plug-in and add a `cache_age` line to the `main` section:

.C:\ProgramData\checkmk\agent\config\mk-sql.yml
[{yaml}]
----
mssql:
  main:
    authentication:
      username: myuser
      password: mypassword
      type: sql_server
    cache_age: 300
----

For detailed instructions on the asynchronous execution of agent plug-ins on a Windows host, see the article that explains the xref:agent_windows#customizeexecution[Windows agent].


[#setup_account_linux]
== Setting up an account for monitoring (Linux)

[#user_linux]
=== Creating a user for the monitoring

You will need a user who can connect to your MSSQL instance.
This user requires at least the following permissions:

* _Connect SQL_
* _Connect any database_
* _View server state_

Apart from these permissions, it is up to you or your organization how such a user can or must be created.

You can use a local user for testing purposes.
If there is no corresponding user on your MSSQL server or in your instance, you can create one on your Linux system via the command line:

In the following example, this is being done for the user `checkmk`:

[{shell}]
----
{c-user} sudo adduser --system checkmk --ingroup sudo
----

Follow the prompts to assign a password, etc.

Then:

[{sql}]
----
mssql> USE master;
      GRANT CONNECT SQL TO checkmk;
      GRANT CONNECT ANY DATABASE TO checkmk;
      GRANT VIEW SERVER STATE TO checkmk;    
      GO
----


=== Manual setup of the connection

ifdef::onprem[]
If you are using {CRE} or do not want to use the Agent Bakery of the commercial editions, set up the communication manually.
endif::[]
ifdef::saas[]
If you do not want to use the Agent Bakery, set up the communication manually.
endif::[]

For the rest of this description, we will assume that the agent for Linux monitoring has already been installed on the host.


==== Create a configuration file

On the Linux host, create an `mk-sql.yml` file in the directory specified below:

./etc/check_mk/mk-sql.yml
[{yaml}]
----
---
mssql:
  main:
    authentication:
      username: checkmk
      password: checkmkPW
      type: sql_server
----

If you are running multiple MSSQL instances with different usernames and passwords on the host, add the details of the instances to the `yml` file accordingly.
Your `yml` file could then look like this, for example:

./etc/check_mk/mk-sql.yml
[{yaml}]
----
---
mssql:
  main:
    authentication:
      username: checkmk
      password: checkmkPW
      type: sql_server
    instances:
    - sid: myInstance1
      auth:
        username: myUser1
        password: 123456
        type: sql_server
    - sid: myInstance2
      auth:
        username: myUser2
        password: 987654
        type: sql_server
----


==== Installing the agent plug-in

The `mk-sql` plug-in can be found
ifdef::onprem[]
in {RE} under [.guihint]#Setup > Agents > Linux# and in the commercial editions
endif::[]
under [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Related > Linux, Solaris, AIX files#:

image::monitoring_mssql_agentfile_linux.png[alt="Selection of the agent plug-in in {CMK}."]

Download the `mk-sql` file and place it on the Linux host in the `/usr/lib/check_mk_agent/plugins/` directory.


==== Setting up services

Now that you have installed and configured the agent plug-in, you can perform a xref:glossar#service_discovery[service discovery] for this host.
The following screenshot shows only a selection of the services that can be found:

image::monitoring_mssql_discovery.png[alt=“Excerpt from the service discovery.”]


[#extended_configuration_linux]
=== Extended configuration

==== Asynchronous execution of the agent plug-in

The plug-in for monitoring MSSQL can -- like so many others -- be executed asynchronously, for example to take account of longer runtimes for large MSSQL instances.

To execute the agent plug-in asynchronously under Linux, edit the configuration of the plug-in and add a `cache_age` line to the `main` section:

./etc/check_mk/mk-sql.yml
[{yaml}]
----
mssql:
  main:
    authentication:
      username: myuser
      password: mypassword
      type: sql_server
    cache_age: 300
----

For detailed instructions on how to run agent plug-ins asynchronously on a Linux host, see the article on the xref:agent_linux#async_plugins[Linux agent].


[#further_configuration_options]
== Further configuration options in {CMK}

=== Configuring threshold values

==== Monitoring connections

You can specify your own threshold values for the utilization of the maximum number of simultaneous connections specified by MSSQL, as these are much more dependent on the structure of your MSSQL instance than with other services.
You can set up the corresponding threshold values in no time at all using a rule from the [.guihint]#MSSQL Connections# rule set.

image::monitoring_mssql_connections.png[alt=“Setting the upper threshold values for active connections.”]


==== Monitoring file sizes

You can also define threshold values for the sizes of individual files in MSSQL.
To do this, use the [.guihint]#MSSQL datafile sizes# rule set.

image::monitoring_mssql_size_datafile.png[alt=“Setting the sizes of files in use.”]


[#bakery]
== Configuration via the Agent Bakery

ifdef::onprem[]
{cee-only}
The setup has been very simplified in the commercial editions 
endif::[]
ifdef::saas[]
The setup has been very simplified in {CE} (SaaS) 
endif::[]
using the xref:glossar#agent_bakery[Agent Bakery], as syntax errors in the configuration files are avoided and customizations to suit changing environments can be made easily.
The main difference to a manual installation is that you only have to work on the MSSQL host via the command line if you want to make special MSSQL-specific configurations.

For the initial setup it is sufficient to create a corresponding rule in the Agent Bakery.
You can find the rule set under [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules.#
There search for `mssql` in the search field:

image::monitoring_mssql_bakery_ruleset_search.png[alt="The rule ‘Microsoft SQL Server (Linux, Windows)’ in the agent rules."]


=== Setting up the agent rule (Windows)

Depending on how the agent plug-in is allowed to log in to your MSSQL server (see xref:setup_account_windows[Setting up an account for monitoring]), select the appropriate option under [.guihint]#Authentication#.
If you are using the LocalSystem account (`NT AUTHORITY\SYSTEM`), leave the selection at [.guihint]#Local Integrated Authentication (Windows)#.

image::monitoring_mssql_bakery_new.png[alt=“Possible settings for the MSSQL server in the Agent Bakery.”]

If you use _SQL Server Authentication_ instead, select the [.guihint]#SQL database user credentials# option, and also enter the [.guihint]#Login name# (see xref:dedicated_account[Using a dedicated account]) in the [.guihint]#User# field and add the corresponding [.guihint]#Password#.

If you are running multiple MSSQL instances with different usernames and passwords on the host, select the [.guihint]#Custom instances# option.
Use [.guihint]#Add new element# to access the details for the first -- and then each additional -- instance to be monitored.
Enter the access data for each instance here, as described above.

image::monitoring_mssql_bakery_more.png[alt=“Multiple MSSQL instances in the Agent Bakery rule.”]

=== Setting up the agent rule (Linux)

Under [.guihint]#Authentication# select the [.guihint]#SQL database user credentials# option.

image::monitoring_mssql_bakery_unix.png[alt=“Possible settings for the MSSQL server in the Agent Bakery.”]

Then enter the [.guihint]#Login name# in the [.guihint]#User# field and add the corresponding [.guihint]#Password#.
For the [.guihint]#Connection#, add the [.guihint]#Host name#.

If you are running multiple MSSQL instances with different usernames and passwords on the host, select the [.guihint]#Custom instances# option.
Use [.guihint]#Add new element# to access the details for the first -- and then each additional -- instance to be monitored.
Enter the access data for each instance here, as described above.

image::monitoring_mssql_bakery_more_linux.png[alt=“Multiple MSSQL instances in the Agent Bakery rule.”]


=== Further options

With the settings you have just made, you first create a simple agent for monitoring your MSSQL instance, which is located directly on the host.
All available data is evaluated directly in {CMK} and this should be sufficient for a typical case scenario.
However, if your organization has a more complex MSSQL environment, there are further options, both for monitoring the database on the same host and for monitoring it on a remote host.
These options are basically the same for both connection types.


[cols="30,~", options="header"]
|===
|Option |Description
|[.guihint]#Connection# |If you need more specific connection data for the general connection to the MSSQL server, you can specify this here.
|[.guihint]#Data to collect (Sections)# |Here you can restrict by section which data should be collected and whether it should be collected synchronously or asynchronously.
|[.guihint]#Cache age for asynchronous checks# |You can change the cache period in seconds for the previously defined asynchronous checks.
|Map data to specific host (Piggyback) |xref:glossar#piggyback[Piggyback] data can be assigned to a host, regardless of the actual source. For example, the SQL information can be separated from the data of the underlying Windows server.
|[.guihint]#Discovery mode of database instances# |Settings for the search in the instance.
|[.guihint]#Custom instances# |In addition to the general settings for accessing your MSSQL server, you can also define your own settings for specific instances here.
|[.guihint]#Options# |The maximum number of parallel SQL server connections can be set here.
|===


[#diagnostic]
== Diagnostic options

=== Possible errors and error messages

==== Error message: Failed to gather SQL Server instances

Check whether the TCP/IP connection has been configured and is working properly.


[#files]
== Files and directories

=== On the MSSQL host (Windows)

[cols="55,~",options="header"]
|===
|File path |Description
|`C:\ProgramData\checkmk\agent\plugins\` |Directory for storing the agent plug-ins.
|`C:\ProgramData\checkmk\agent\config\mk-sql.yml` |Configuration file for the agent plug-in.
|===


=== On the MSSQL host (Linux)

[cols="55,~",options="header"]
|===
|File path |Description
|`/usr/lib/check_mk_agent/plugins/` |Directory for storing the agent plug-ins.
|`/etc/check_mk/mk-sql.yml` |Configuration file for the agent plug-in.
|===


ifdef::onprem[]
=== On the {CMK} server

[cols="55,~",options="header"]
|===
|File path |Description
|`~/share/check_mk/agents/windows/mk-sql.exe` |The agent plug-in to be copied to your Windows hosts in order to monitor MSSQL there.
|`~/share/check_mk/agents/linux/mk-sql` |The agent plug-in to be copied to your Linux hosts to monitor MSSQL there.
|===
endif::[]
