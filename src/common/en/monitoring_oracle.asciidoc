// -*- coding: utf-8 -*-
// IGNORE Datafiles ORACLE_HOME RMAN Sqlnet TNSALIASes pre sqlnet tnsnames check_mk_agent SIDs
// NONASCII │ ├ └ ─  …​
include::global_attr.adoc[]
= Monitoring Oracle databases
:revdate: 2024-08-27
:title: Monitoring Oracle databases
:description: With the agent plug-in for Windows, Linux, Solaris and AIX you can fully monitor Oracle databases. Details about the configuration can be found here.

{related-start}
xref:wato_monitoringagents#[Monitoring agents]
xref:agent_linux#[Monitoring Linux]
xref:agent_windows#[Monitoring Windows]
link:https://checkmk.com/integrations[Catalog of Check Plug-ins]
{related-end}


[#intro]
== Introduction

{CMK} provides comprehensive options for the monitoring of Oracle databases.
With the xref:glossar.html#agent_plugin[agent plug-in] you can not only retrieve a database’s tablespaces or its active sessions, but also many other types of metrics.
A complete list of monitoring options with our xref:glossar#check_plugin[check plug-ins] can be found in the link:https://checkmk.com/integrations?tags=oracle[Catalog of Check Plug-ins^].
We regularly add new plug-ins and update existing ones, so it is always worth looking in the catalog.
Among others, {CMK} can monitor the following values:

* link:https://checkmk.com/integrations/oracle_instance[Oracle Instance: Status of Database^]
* link:https://checkmk.com/integrations/oracle_instance_uptime[Oracle Instance: Uptime of Database^]
* link:https://checkmk.com/integrations/oracle_undostat[Oracle Instance: Undo Retention^]
* link:https://checkmk.com/integrations/oracle_version[Oracle Database: Version^]
* link:https://checkmk.com/integrations/oracle_jobs[Oracle Database: Jobs^]
* link:https://checkmk.com/integrations/oracle_locks[Oracle Database: Locks^]
* link:https://checkmk.com/integrations/oracle_processes[Oracle Database: Processes^]
* link:https://checkmk.com/integrations/oracle_sessions[Oracle Database: Number of Active Sessions^]
* link:https://checkmk.com/integrations/oracle_recovery_area[Oracle Database: Recovery Area^]
* link:https://checkmk.com/integrations/oracle_logswitches[Oracle Database: Log Switch Activity^]
* link:https://checkmk.com/integrations/oracle_tablespaces[Oracle Tablespaces: General Information^]
* link:https://checkmk.com/integrations/oracle_performance[Oracle Tablespaces: Performance Data^]
// * link:https://checkmk.com/integrations/oracle_performance_dbtime[Oracle Tablespaces: Performance Data for DB time^]
// * link:https://checkmk.com/integrations/oracle_performance_iostat_bytes[Oracle Tablespaces: Performance Data for file IO (Bytes read/written)^]
// * link:https://checkmk.com/integrations/oracle_performance_iostat_ios[Oracle Tablespaces: Performance Data for file IO (Number of read/write requests)^]
// * link:https://checkmk.com/integrations/oracle_performance_memory[Oracle Tablespaces: Performance Data for memory^]
// * link:https://checkmk.com/integrations/oracle_performance_waitclasses[Oracle Tablespaces: Performance Data for wait classes^]
* link:https://checkmk.com/integrations/oracle_longactivesessions[Oracle Database: Long Active Sessions^]
* link:https://checkmk.com/integrations/oracle_recovery_status[Oracle: Checkpoint and User Managed Backup State of Datafiles^]
* link:https://checkmk.com/integrations/oracle_sql[Oracle Database: Custom SQLs^]
* link:https://checkmk.com/integrations/oracle_rman[Oracle: RMAN Backup Status^]
* link:https://checkmk.com/integrations/oracle_asm_diskgroup[Oracle: ASM Disk Groups^]
* link:https://checkmk.com/integrations/oracle_dataguard_stats[Oracle Data-Guard: Apply and Transport Lag^]
//* link:https://checkmk.com/integrations/oracle_crs_res[Oracle Clusterware: Cluster Resources^]
//* link:https://checkmk.com/integrations/oracle_crs_version[Oracle Clusterware: Version Information^]
//* link:https://checkmk.com/integrations/oracle_crs_voting[Oracle Clusterware: Voting Check^]

To be able to monitor the databases only the agent plug-in is required in addition to the agent on the database server.
The Linux, Solaris, AIX and Windows operating systems are currently supported.
The agent plug-in for Linux, Solaris, AIX is called `mk_oracle` and for Windows `mk_oracle.ps1`.
No further additional software will be required for a monitoring, either on the {CMK} server or on the database server.

Many of the steps to set up monitoring are the same for both Linux and Windows.
For this reason, we will first describe the general steps, then the specific steps for the respective operating system group and finally the xref:glossar#agent_bakery[Agent Bakery] in the commercial editions.


[#first_steps]
== Initial setup

ifdef::onprem[]
The configuration files with sample content presented in this and the following chapters can be found on the {CMK} server --
either via the xref:files_cmk[command line] or via the {CMK} web interface.
In {RE} select [.guihint]#Setup > Agents# and in the commercial editions [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Related#.
In all editions you will find menu entries for the different operating systems.
The configuration files can be found in the [.guihint]#Example Configurations# box.
endif::[]

ifdef::saas[]
The configuration files with sample content presented in this and the following chapters can be found on the {CMK} server or via the web interface.
Navigate to [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Related#.
In all editions you will find menu entries for the different operating systems.
The configuration files can be found in the [.guihint]#Example Configurations# box.
endif::[]

[#create_user]
=== Creating a database user

In principle, the first setup is quick and requires only three steps.
The first step, of course, is to have a user who is also allowed to query the databases.
Provided that you are not using xref:rac[Real Application Cluster (RAC)], create a user in each database to be monitored.
How to access an instance differs depending on the installed operating system.
For Linux, you can do this, for example, by always first setting the relevant instance as an environment variable in which a user is to be created.
Normally you first switch to the `oracle` user,
but this can differ depending on the setup:

[{shell}]
----
{c-root} su - oracle
oracle@linux$ export ORACLE_SID=MYINST1
----

Then log on to the instance and create a user for the monitoring.
To get all of the data, the following permissions are required.
In the following example, the newly-created user is named `checkmk`.
You can also specify any other desired name:

[{sql}]
----
sqlplus> create user checkmk identified by myPassword;
sqlplus> grant select_catalog_role to checkmk;
sqlplus> grant create session to checkmk;
sqlplus> connect checkmk/myPassword
sqlplus> exit
----

You can find out exactly how the login to a specific instance works in the Oracle documentation.


==== Multi-tenant databases

You can also configure the login for link:https://docs.oracle.com/en/database/oracle/oracle-database/19/multi/introduction-to-the-multitenant-architecture.html[multi-tenant databases^].
This is usually performed in the configuration using a special user and with the prefix `C##`.
The assignment of permissions is a bit different as for regular users as you need to specify them for all current containers and for all future containers:

[{sql}]
----
sqlplus> create user c##checkmk identified by myPassword;
sqlplus> alter user c##checkmk set container_data=all container=current;
sqlplus> grant select_catalog_role to c##checkmk container=all;
sqlplus> grant create session to c##checkmk container=all;
sqlplus> exit
----


[#user_config]
=== Creating the configuration

After you have created a user, the next step is to enable the agent plug-in to later receive this information.
The simplest way is for you to define the same login data for all instances, and set a default in the configuration.
Now on the Oracle host create a new configuration file `mk_oracle.cfg` for xref:linux[Linux, AIX, Solaris] or `mk_oracle_cfg.ps1` for xref:windows[Windows].
In the following example the file for Unix-like systems can be seen:

./etc/check_mk/mk_oracle.cfg
[{file}]
----
# Syntax:
# DBUSER='USERNAME:PASSWORD'
DBUSER='checkmk:myPassword'
----

For Windows this procedure looks very similar.
There you set the variable in a PowerShell script:

.C:\ProgramData\checkmk\agent\config\mk_oracle_cfg.ps1
[{file}]
----
# Syntax:
# $DBUSER = @("USERNAME","PASSWORD")
$DBUSER = @("checkmk","myPassword")
----

The standard user is all that the agent plug-in really requires.
All other options that you can set in xref:adv_linux[Unix-like systems] or under xref:adv_windows[Windows] are optional.


[#oracle_wallet]
=== Using the Oracle Wallet

As an alternative to specifying the user directly and with a password in a configuration file, you can also use the _Oracle Wallet_.
This has the advantage that you no longer need to store the access data in an unencrypted form on the {CMK} server and on the Oracle host.
So even if you have defined the configuration file's access rights on the Oracle host to suit, the access data has nevertheless left the server and is located on the {CMK} server as long as you use the xref:bakery[Agent Bakery].

The Oracle Wallet in turn stores the encrypted access data on the host to be monitored so that they can only be used, but no login data has to be made known explicitly.
{CMK} can thus use this wallet so that the access data needs only be known to the database administrator (DBA).
Create -- or the DBA can create -- a wallet on the appropriate server:

[{shell}]
----
{c-root} mkstore -wrl /etc/check_mk/oracle_wallet -create
----

The agent plug-in will access this file later whenever a connection to an instance is to be established.
So that the necessary user data can also be found, you must enter this once in the wallet.
In the following example you thus add the user `checkmk` for the instance `MYINST1`:

[{shell}]
----
{c-root} mkstore -wrl /etc/check_mk/oracle_wallet -createCredential MYINST1 checkmk myPassword
----

For the agent plug-in to know where to look for the wallet, it must find two files.
The first file is `sqlnet.ora` in which the info for the wallet's location can be found. 
The second file -- `tnsnames.ora` -- defines the address of the instance so that it can also be addressed via its xref:tns_config[alias].
So that the agent plug-in can access these files you can specify the path under Linux, Solaris and AIX using the environment variable xref:tns_config[`TNS_ADMIN`].
This is especially useful if the files already exist.
Alternatively, you can create them explicitly.
Windows even requires that you specify them manually.

First create the `sqlnet.ora` file.
The agent plug-in alternatively searches in this file for the login data, so the correct file path to the wallet file you just created must be entered here.
Make sure that you set the `SQLNET.WALLET_OVERRIDE` parameter to `TRUE`:

./etc/check_mk/sqlnet.ora
[{file}]
----
LOG_DIRECTORY_CLIENT = /var/log/check_mk/oracle_client
DIAG_ADR_ENABLED = OFF

SQLNET.WALLET_OVERRIDE = TRUE
WALLET_LOCATION =
 (SOURCE=
   (METHOD = FILE)
   (METHOD_DATA = (DIRECTORY=/etc/check_mk/oracle_wallet))
 )
----

Now the plug-in knows which credentials should be used.
So that it also accesses the correct address, create `tnsnames.ora` as the second file.
The exact syntax can be found in the Oracle documentation, but as an example the file could look like this:

./etc/check_mk/tnsnames.ora
[{file}]
----
MYINST1
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = 127.0.0.1)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = MYINST1_ALIAS)
    )
  )
----

With this step you have created the prerequisites for removing the access data from the xref:user_config[agent plug-in's configuration file].
Instead of the access data, you simply enter a `/` (slash):

./etc/check_mk/mk_oracle.cfg
[{file}]
----
DBUSER='/:'
----

You can of course add further access data to the wallet at a later date.
The `tnsnames.ora` file must then simply be amended as necessary.

Finally, change the permissions of the files and directories created manually in this section so that xref:access_linux[access rights on execution] are set correctly.
The agent plug-in executed as `root` will switch to the owner of the Oracle binaries (such as `$ORACLE_HOME/bin/sqlplus`) before executing them.
As a minimum, the group of the owner of the Oracle binaries therefore needs read access to the manually created files in `/etc/check_mk/`.
In the following example, we assume that the group is `oinstall`.

The following commands change the group to `oinstall`:

[{shell}]
----
{c-root} chgrp oinstall /etc/check_mk/sqlnet.ora /etc/check_mk/tnsnames.ora
{c-root} chgrp -R oinstall /etc/check_mk/oracle_wallet
----

These commands then ensure that the group can read the `oracle_wallet` directory and its contents:

[{shell}]
----
{c-root} chmod g+x /etc/check_mk/oracle_wallet
{c-root} chmod -R g+r /etc/check_mk/oracle_wallet
----

The permissions should then look something like this:

[{shell}]
----
{c-root} tree -ugpR /etc/check_mk
[drwxr-xr-x root     root    ]  /etc/check_mk
├── [drwxr-x--- root   oinstall ]  oracle_wallet
│   └── [-rw-r----- root   oinstall ]  cwallet.sso
│   └── [-rw-r----- root   oinstall ]  cwallet.sso.lck
│   └── [-rw-r----- root   oinstall ]  ewallet.p12
│   └── [-rw-r----- root   oinstall ]  ewallet.p12.lck
├── [-rw-r--r-- root   oinstall ]  sqlnet.ora
├── [-rw-r--r-- root   oinstall ]  tnsnames.ora
----

The command output only shows the files and directories in question.


[#linux]
== Setting up for Linux, Solaris, AIX

=== Plug-in and configuration paths

Under Unix-like systems {CMK} uses a uniform agent plug-in.
On the one hand, this reduces maintenance effort, since SQL queries are not duplicated, and on the other hand you only need to pay attention to a single agent plug-in.
On all supported systems the file paths for the agents are the same or very similar.
Specifically, you need the following directories:

[cols="25,~,~",options="header"]
|===
|Operating system |Plug-in path |Configuration path

|Linux, Solaris, AIX |`/usr/lib/check_mk_agent/plugins/` |`/etc/check_mk/`
|Linux with `systemd` |`/usr/lib/check_mk_agent/plugins/<Number>` |`/etc/check_mk/`
|AIX |`/usr/check_mk/lib/plugins/` |`/usr/check_mk/conf/`
|===


[#install_linux]
=== Installing the agent plug-in

Once you have created a user in the xref:first_steps[initial setup] and stored this in the configuration file, install the agent plug-in. 
Copy the `mk_oracle` file from the {CMK} server's directory `~/share/check_mk/agents/plugins/` to the Oracle host's plug-in directory described above.


[IMPORTANT]
====
The agent plug-in for Unix-like systems `mk_oracle` does not work well with `systemd` (see link:https://checkmk.com/werk/13732[Werk pass:[#]13732^]).
On systems with `systemd`, you must therefore run the agent plug-in xref:agent_linux#async_plugins[asynchronously].
This means that you do not install the agent plug-in directly under `/usr/lib/check_mk_agent/plugins/`, but in a subfolder `/usr/lib/check_mk_agent/plugins/<Number>/`.
`<Number>` means the execution interval in seconds.
We recommend execution once per minute, i.e. `/usr/lib/check_mk_agent/plugins/60/`.
When setting up via the xref:bakery[Agent Bakery], you can do this using the Oracle rule's option [.guihint]#Host uses xinetd or systemd#, which is set to [.guihint]#xinetd# by default.
====

Be sure to make the agent plug-in executable, and correct it if necessary:

[{shell}]
----
{c-root} cd /usr/lib/check_mk_agent/plugins/
{c-root} ls -lA
-rw-r--r-- 1 root root 120808 Jan 25 11:29 mk_oracle
{c-root} chmod +x mk_oracle
{c-root} ls -lA
-rwxr-xr-x 1 root root 120808 Jan 25 11:29 mk_oracle
----


[#adv_linux]
=== Advanced options

In the xref:first_steps[initial setup] you have already learned about the first variables for getting monitoring data from their Oracle instances.
However, depending on the application scenario, you will quickly need further possibilities for better, individual control of the monitoring for each instance.
You will find these options in the following sections.


[#adv_user_linux]
==== Advanced user configuration

With the standard login you can use regular or possibly even all instances for a database.
However, there are special cases in which you require individual access data for specific instances.
In the configuration file you therefore have the following three options for specifying users:

[cols="25,~",options="header"]
|===
|Parameter |Description
|`DBUSER` |The default if no individual access data has been defined for the database instance.
|`DBUSER_MYINST1` |Access data for a specific database instance -- in this case for the instance `MYINST1`.
The access data is only used for this instance.
|`ASMUSER` |Special access data for Automatic Storage Management (ASM). +
*Important:* For an ASM only one login at a time can be specified.
|===

These variables additionally allow even more options apart from user name and password. 
You can also determine whether the user is a `SYSDBA` or `SYSASM`, on which combination of address and port the instance listens to, and even which xref:tns_config[TNS alias] (`TNSALIAS`) should be used.
However, these specifications are always -- unlike user and password -- optional.
In addition to the xref:user_config[above example], a configuration can look like this:

./etc/check_mk/mk_oracle.cfg
[{file}]
----
# Syntax
# DBUSER='USERNAME:PASSWORD:ROLE:HOST:PORT:TNSALIAS'
DBUSER='checkmk:myPassword'

DBUSER_MYINST1='cmk_specific1:myPassword1:SYSDBA:localhost:1521'
DBUSER_MYINST2='cmk_specific2:myPassword2::localhost::INST2'

ASMUSER='cmk_asm:myASMPassword:SYSASM'
----

A few explanations for the above example:

* You can define any number of individual access data.
These are always preferred to the standard.
* Each option is separated from the others by a `:` (colon).
* If an optional field is omitted in the middle of the string, a colon must be coded, as with the `DBUSER_MYINST2` entry, where no role and no port was specified.
* If after a certain point, no more optional fields are needed, you can omit the colons, as with the `ASMUSER` entry, where neither host, port nor TNS alias was specified.


[#skip_include]
==== Including or excluding instances

In some cases you may not want to include particular instances in the monitoring.
This may be because it is only a playground for developers, or for other reasons.
To make the configuration as simple as possible in individual situations, you have various options to entirely or partially exclude one or more instances:

[cols="25,~",options="header"]
|===
|Parameter |Description
|`ONLY_SIDS` |Here you can determine which instances are to be monitored.
An instance is named by its _system identifier (SID)_. 
This is a positive list, ignoring all instances that are not explicitly listed.
This parameter is very useful if the number of instances to be monitored is smaller than the number of instances to be ignored.
|`SKIP_SIDS` |Unlike `ONLY_SIDS`, this is a negative list where all instances are monitored except those explicitly listed here.
This parameter is very suitable if the number of instances to be ignored is smaller than the number to be monitored.
|`EXCLUDE_<SID>` |With this parameter you can partially exclude an instance by excluding certain sections of the instance from monitoring.
In this way, you define a negative list of the sections of an instance.
You can also exclude all sections with the value `ALL` and and thus do the same as if you were to add the instance to `SKIP_SIDS`. +
*Important:* For ASM SIDs you cannot use this procedure, however you can use `SKIP_SIDS="+ASM1 ..."` instead.
|===

You will have already guessed:
The order in which these parameters are processed determines the result.
The entries are in fact processed _per instance_ exactly in sequence as shown in the table above.
Therefore if the variable `ONLY_SIDS` is set, `SKIP_SIDS` is no longer evaluated nor is it checked whether the `EXCLUDE_<SID>` variable is set to `ALL` for this instance.
If `ONLY_SIDS` is not set, the system proceeds according to the sequence.
In case of doubt -- that is, as the default behavior -- the instance will be monitored accordingly.

Below is an example in which all variables are set and what the behavior is like:

./etc/check_mk/mk_oracle.cfg
[{file}]
----
ONLY_SIDS='INST1 INST2 INST5'
SKIP_SIDS='INST7 INST3 INST2'
EXCLUDE_INST1='ALL'
EXCLUDE_INST2='tablespaces rman'
----

Since the positive list from the first line always has priority, the second and third lines are no longer evaluated.
Only the fourth (last) line will be considered at a later date, since the instance is only to be partially evaluated here.

In practice, it only makes sense to use _one_ of the variables to determine the number of instances to be monitored.


[#sections]
==== Determining the data to be fetched

As you learned in the previous section, it is not only possible to disable instances completely, but also to only partially monitor them.
The operational requirements are diverse, and it is especially practical when it is undesirable to have certain long-running sections to be included in everything, or when only basic information from test instances is required, for example.
To restrict sections globally, set the corresponding variables directly -- to restrict only certain instances you can slot in the `EXCLUDE_<SID>` variable which you have already learned about in the xref:skip_include[previous section].
The global variables are:

[cols="25,~",options="header"]
|===
|Parameter |Description
|`SYNC_SECTIONS` |Sections that are to be queried synchronously, i.e. every time the agent runs.
Since the query interval is 60 seconds by default, the SQL queries used must be run through correspondingly fast.
If the variable is not specified, all sections are queried.
|`ASYNC_SECTIONS` |Sections that are to be queried asynchronously, i.e. only every x minutes.
How long the data remains valid is determined by the `CACHE_MAXAGE` variable, below in this table.
|`SYNC_ASM_SECTIONS` |Here for ASM sections the same mechanism applies as in the general description for the `SYNC_SECTIONS` variable.
|`ASYNC_ASM_SECTIONS` |Here for ASM sections the same mechanism applies as in the general description for the `ASYNC_SECTIONS` variable.
|`CACHE_MAXAGE` |This variable is used to determine how long asynchronously retrieved data remains valid.
If the variable's value is not specified, a default of 600 seconds (10 minutes) is used.
Make sure that the time range is not shorter than the interval at which the {CMK} agent delivers the data (60 seconds by default).
Otherwise, the data may be considered outdated and not delivered by the agent.
|`MAX_TASKS` |Number of SIDs that are processed in parallel. The default value is 1.
|===

The mechanism therefore allows you to set a default in the configuration file and overwrite it for individual instances as required.
A configuration could then look like this, for example:

./etc/check_mk/mk_oracle.cfg
[{file}]
----
# DEFAULTS:
# SYNC_SECTIONS="instance sessions logswitches undostat recovery_area processes recovery_status longactivesessions dataguard_stats performance locks"
# ASYNC_SECTIONS="tablespaces rman jobs ts_quotas resumable"
# SYNC_ASM_SECTIONS="instance processes"
# ASYNC_ASM_SECTIONS="asm_diskgroup"
# CACHE_MAXAGE=600

SYNC_ASM_SECTIONS='instance'
ASYNC_SECTIONS='tablespaces jobs rman resumable'

CACHE_MAXAGE=300

EXCLUDE_INST1='undostat locks'
EXCLUDE_INST2='jobs'
----

As you can see in the example, only the `instance` section is queried for the ASM instances and a minimum set for the asynchronous sections is specified on all regular instances.
Additionally, on the `INST1` instance the synchronous sections `undostat` and `locks` will be omitted.
Since the synchronous sections are not explicitly specified, all synchronous sections are retrieved from all other instances.
In the `INST2` instance in turn, only three of the four asynchronous sections are queried, since `jobs` was additionally excluded.
And finally, the cache of 10 minutes is reduced to 5 minutes (300 seconds), as this is sufficient time to get all data.

[IMPORTANT]
====
If you define in the configuration file which sections you would like to retrieve, and by which method -- you can also alter a asynchronous section to a synchronous section -- you must specify
*all* sections which should be executed in the respective area.
====

For example, if you only want `locks` from the synchronous query, specify the entire synchronous list and simply omit `locks`:

./etc/check_mk/mk_oracle.cfg
[{file}]
----
# Just exclude 'locks' from sync sections:
SYNC_SECTIONS='instance sessions logswitches undostat recovery_area processes recovery_status longactivesessions dataguard_stats performance'
----

The same applies for the other three variables in which the sections can be determined.


[#tns_config]
==== Configuring TNS alias and TNS_ADMIN

The TNS alias is a user-friendly name for a database connection.
TNS stands for the Oracle network technology _Transparent Network Substrate_.
A TNS alias makes it possible to establish a connection to a database instance without having to enter the full connection details (such as host name, port number or service name) each time. 
TNS aliases are defined in the file `tnsnames.ora`.
The section on xref:oracle_wallet[Oracle Wallet] contains an example of how to define a TNS alias.

`TNS_ADMIN` is an environment variable that points to the directory in which Oracle configuration files such as `sqlnet.ora` and `tnsnames.ora` are located.
By default, `TNS_ADMIN` is set by Oracle to `$ORACLE_HOME/network/admin`.
In the configuration file, you can assign a different path to `TNS_ADMIN`, as in the following example for a specific Oracle installation:

./etc/check_mk/mk_oracle.cfg
[{file}]
----
export TNS_ADMIN=/opt/oracle/product/19c/dbhome_1/network/admin/
----

Only if the variable is not set at all, it is set by the agent plug-in to `/etc/check_mk/`.


[#access_linux]
==== Access rights on execution

For security reasons, the agent plug-in `mk_oracle` no longer executes Oracle binaries under the `root` user.
This affects the programs `sqlplus`, `tnsping` and -- if available -- `crsctl`.
Instead, `mk_oracle`, for example, changes to the owner of the file `$ORACLE_HOME/bin/sqlplus` before executing `sqlplus`.
This ensures that Oracle programs are only executed by a non-privileged user and thus prevents a malicious Oracle user from replacing a binary such as `sqlplus` and running it as `root` user.

[TIP]
====
You can find out in which patch version of {CMK} this change was made in the Werks link:https://checkmk.com/werk/15327[pass:q[#]15327^] and link:https://checkmk.com/werk/15328[pass:q[#]15328^].
====

The execution of Oracle programs by a non-privileged user can lead to problems when using an Oracle wallet, as this user may not be able to access the wallet-specific files.
The non-privileged user needs the permissions to read the files `$TNS_ADMIN/sqlnet.ora` and `$TNS_ADMIN/tnsnames.ora`, to execute the wallet folder and to read the files in the wallet folder.
You should not have any problems with the access rights as long as you have changed the group of the files and directories as described at the end of the section on xref:oracle_wallet[Oracle Wallet].

The agent plug-in helps you with the diagnosis and checks whether there are problems accessing the files mentioned and displays them in the xref:connection_test[connection test].
The exact procedure for diagnosing and correcting access rights can be found in the link:https://checkmk.atlassian.net/wiki/spaces/KB/pages/70582273/[{CMK} Knowledge Base^].


[#remote_instances]
=== Monitoring remote databases

Under Unix-like systems, you can not only retrieve locally running instances, but also log on to remote ones and retrieve the databases running there.
This, for example, is advantageous if you do not have access to the underlying system, but still want to monitor the database.
It is also possible to monitor remote databases from a host on which the agent plug-in is running but no Oracle database.

For monitoring remote databases, the following requirements must be met on the host on which the agent plug-in is installed:

* The _Linux AIO access library_ is installed.
Under Red Hat Enterprise Linux und binary compatible distributions the package is called `libaio`.
* The link:https://www.oracle.com/database/technologies/instant-client.html[Oracle Instant Client^] is installed.
* The `sqlplus` program already exists in the installation, or may have been installed as an extension package to the client.

As a rule, the conditions are already fulfilled if there is an Oracle installation on the host.
Otherwise install the appropriate packages to do so.

In order for the agent plug-in to connect to the remote database, first store the access data in the configuration file.
These are similar to the details for `DBUSER`, you already seen in the xref:adv_user_linux[advanced user configuration].
However there are a number of additional mandatory specifications:

./etc/check_mk/mk_oracle.cfg
[{file}]
----
# Syntax:
# REMOTE_INSTANCE_[ID]='USER:PASSWORD:ROLE:HOST:PORT:PIGGYBACKHOST:SID:VERSION:TNSALIAS'

REMOTE_INSTANCE_1='check_mk:mypassword::myRemoteHost:1521:myOracleHost:MYINST3:11.2'
REMOTE_INSTANCE_myinst1='/:::myRemoteHost:1521::MYINST1:11.2:INST1'

REMOTE_ORACLE_HOME='/usr/lib/oracle/11.2/client64'
----

In the example, two remote instances are being configured with two lines.
So that each text line is unique, an ID is defined at the end of each variable.
These can be freely-chosen -- they just have to be unique for each configuration file.
As you have probably already noticed, the port specification is now followed by further values.
These are partly optional, and partly necessary to establish a connection.

The first new value `PIGGYBACKHOST` is set to `myOracleHost` for the `MYINST3` instance.
This specification assigns the results from the query by the xref:glossar#piggyback[piggyback mechanism] to the specified host.
If this is present as a host in {CMK}, the new services will appear there accordingly instead of on the host where the agent plug-in is running or from which the data was fetched.
You do not see this specification on the second instance `MYINST1`
-- the assignment to another host is _optional_.

The second new value `SID` is the instance name.
Since the agent plug-in cannot see what instances are running on the remote host, a configuration line must be specified for each remote instance
-- this value is therefore _required_ and thus not optional.

The third value `VERSION` is _required_ and is also due to the fact that much metadata is only available if you are directly on the host.
Therefore the version specification can also not be omitted, and this determines which SQL queries can be passed to the instance.
In the example, both remote instances use version `11.2`.

The fourth and last value `TNSALIAS` is again _optional_ and can be used if you access the remote instance via the xref:oracle_wallet[Oracle Wallet] or the LDAP/Active Directory.
In the event that the instance responds only to a specific TNS alias, you can specify this alias here.
For the second remote instance, `TNSALIAS` has the value `INST1`.

To ensure that the `sqlplus` program is also found, use the `REMOTE_ORACLE_HOME` variable to specify where the Oracle client is located on the host that is runs the agent plug-in.
Only then are all resources available that are required for the queries.

When querying remote instances, there are some restrictions and special features:

* Since you have explicitly entered the remote instances in the configuration file, you cannot xref:skip_include[exclude] these instances using `SKIP_SIDS`, and in return you do not need to include them using `ONLY_SIDS`.
* Instances with the same name (`SID`) may not be assigned to the same host.
This is especially relevant if you are fetching instances from multiple remote and/or local hosts where identical names are used.


[#windows]
== Setting up for Windows

=== Plug-in and configuration paths

On Windows, PowerShell is used as a scripting language to monitor Oracle databases.
The functionality is similar to the agent plug-in under xref:linux[Unix-like systems], but contains only a part of this.
To use the agent plug-in under Windows you need the following file paths, if you have not changed them.

[cols="25,~,~",options="header"]
|===
|Operating system |Plug-in path |Configuration path
|Windows |`C:\ProgramData\checkmk\agent\plugins` |`C:\ProgramData\checkmk\agent\config`
|===


[#install_windows]
=== Installing the agent plug-in

After you have created a user in the xref:first_steps[initial setup] and stored this in the configuration file, install the agent plug-in. 
The agent plug-ins for Windows are stored on the host during the installation of the {CMK} agent for Windows.
On the Oracle host, copy the file `mk_oracle.ps1` from the directory `C:\Program Files (x86)\checkmk\service\plugins\` into the plug-in directory described above.
Alternatively, you can xref:agent_windows#customizeexecution[refer] to the file in the installation path by updating the configuration file of the {CMK} agent.


=== Special features under Windows

Windows normally prevents the execution of PowerShell scripts if they have not been signed.
You can now work around this problem very easily by modifying the policies for running PowerShell scripts for the user who is running the {CMK} agent:

[{powershell}]
----
PS C:\ProgramData\checkmk\agent\> Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope LocalMachine
PS C:\ProgramData\checkmk\agent\> Get-ExecutionPolicy -Scope LocalMachine
Bypass
----

This option is useful if for a short time you want to test a script or the general functionality of the {CMK} agent.
To avoid compromising the security of your system, revert this setting on production servers after testing has been completed:

[{powershell}]
----
PS C:\Program\checkmk\agent\> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine
PS C:\Program\checkmk\agent\> Get-ExecutionPolicy -Scope LocalMachine
RemoteSigned
----

Understandably, you probably don't want to change the guidelines every 60 seconds.
You therefore set a permanent exception only for the relevant scripts.
The configuration file of the agent plug-in must also be added to the exceptions.
For easy readability, in this example the output has been completely omitted:

[{powershell}]
----
PS C:\ProgramData\checkmk\agent\> Unblock-File -Path .\plugins\mk_oracle.ps1
PS C:\ProgramData\checkmk\agent\> Unblock-File -Path .\config\mk_oracle_cfg.ps1
----


[#adv_windows]
=== Advanced options

In the xref:first_steps[initial setup] you have already learned about the first variables to get monitoring data from your Oracle instances.
Depending on the application scenario, however, you will quickly need further options to be able to control the monitoring better and individually for each instance.
Options that are also available to you under Windows are described in the following sections.


[#adv_user_windows]
==== Advanced user configuration

As under xref:adv_user_linux[Linux], you can also define not only a standard login for the Windows agent plug-in, but also individual access data for individual instances.
You therefore have the same three options for specifying users:

[cols="25,~",options="header"]
|===
|Parameter |Description
|`DBUSER` |The default if no individual access data has been defined for the database instance.
|`DBUSER_MYINST1` |Access data for a specific database instance -- in this case for the instance `MYINST1`.
The access data is only used for this instance.
|`ASMUSER` |Special access data for Automatic Storage Management (ASM). +
*Important:* For an ASM only one login at a time can be specified.
|===

In addition, more options other than user name or password can also be specified here
-- these additional entries are also optional,
however each entry must be filled in if it is used.
A configuration may then look like this, for example:

.C:\ProgramData\checkmk\agent\config\mk_oracle_cfg.ps1
[{file}]
----
# Syntax
# DBUSER = @("USERNAME", "PASSWORD", "ROLE", "HOST", "PORT")
# Default
# DBUSER = @("", "", "", "localhost", "1521")
$DBUSER = @("checkmk", "myPassword", "SYSDBA", "localhost", "1521")

@DBUSER_MYINST1 = @("cmk_specific1", "myPassword1", "", "10.0.0.73")
@DBUSER_MYINST2 = @("cmk_specific2", "myPassword2", "SYSDBA", "localhost", "1531")

@ASMUSER = @("cmk_asm", "myASMPassword", "SYSASM")
----

A few explanations regarding the above example:

* You can define any number of individual access data.
These are always preferred to the standard.
* Each option is defined in a list.
The order of the entries is not arbitrary, so therefore the order may not be rearranged.
* When an optional field remains unchanged but a field following it is to be edited, _both_ fields must be specified correctly, as with the `DBUSER_MYINST2` entry, where the `HOST` is still set to `localhost` even though only the `PORT` is to be changed.
* If optional fields are no longer needed after a certain point, they can be omitted, as with the `ASMUSER` entry, in which only the user's role was specified.
* If no special role is to be assigned to the user, but `HOST` or `PORT` is to be customized, simply enter a pair of inverted commas/double quotes (`""`) in this position.


[#skip_include_windows]
==== Enabling and disabling instances

Even under Windows, one does not always want to include certain instances.
The reasons for this have already been described in the section covering xref:skip_include[Linux].
Two of the three parameters that you know from Linux can also be used with Windows:

[cols="25,~",options="header"]
|===
|Parameter |Description
|`ONLY_SIDS` |Here you can determine which instances are to be monitored.
An instance is named by its _system identifier (SID)_. 
This is a positive list, ignoring all instances that are not explicitly listed.
This parameter is very useful if the number of instances to be monitored is smaller than the number of instances to be ignored.
|`EXCLUDE_<sid>` |Since the xref:skip_include[`SKIP_SIDS`] parameter is not available under Windows, you can only use `EXCLUDE_<SID>` to exclude instances and thus define a negative list.
You do this by setting the value of the variable to `ALL`.
You can also use this parameter to partially exclude an instance by excluding certain sections of the instance from monitoring.
In this way, you define a negative list of the sections of an instance. +
*Important:* An (`+ASM`) cannot be completely deactivated with this option.
|===

The processing is done for each instance in the order shown in the table above.
So first it is checked whether the instance is in `ONLY_SIDS`, and only then whether certain sections are to be excluded.
If the variable `EXCLUDE_<SID>` is set to `ALL`, no section will be executed.

Below is an example where each variable is shown once:

.C:\ProgramData\checkmk\agent\config\mk_oracle_cfg.ps1
[{file}]
----
$ONLY_SIDS = @("MYINST1", "MYINST3")
$EXCLUDE_INST1 = "tablespaces rman"
$EXCLUDE_INST3 = "ALL"
----

Note that `ONLY_SIDS` is a list, whereas `EXCLUDE_INST1` is a string containing sections separated by spaces.


[#sections_windows]
==== Determining the data to be fetched

The specification of which sections are to be actually fetched is done in the same way as with xref:sections[Linux],
and the following is only an example for a Windows configuration:

.C:\ProgramData\checkmk\agent\config\mk_oracle_cfg.ps1
[{file}]
----
# DEFAULTS:
# $SYNC_SECTIONS = @("instance", "sessions", "logswitches", "undostat", "recovery_area", "processes", "recovery_status", "longactivesessions", "dataguard_stats", "performance", "locks")
# $ASYNC_SECTIONS = @("tablespaces", "rman", "jobs", "ts_quotas", "resumable")
# $SYNC_ASM_SECTIONS = @("instance", "processes")
# $ASYNC_ASM_SECTIONS = @("asm_diskgroup")
# $CACHE_MAXAGE = 600

$SYNC_ASM_SECTIONS = @("instance")
$ASYNC_SECTIONS = @("tablespaces", "jobs", "rman", "resumable")

$CACHE_MAXAGE = 300

$EXCLUDE_INST1 = "undostat locks"
$EXCLUDE_INST2 = "jobs'
----

[IMPORTANT]
====
If you define in the configuration file which sections you would like to retrieve, and by which method -- you can also alter a asynchronous section to a synchronous section -- you must specify
*all* sections which should be executed in the respective area.
====

For example, if you only want `locks` from the synchronous query, specify the entire synchronous list and simply omit `locks`:

.C:\ProgramData\checkmk\agent\config\mk_oracle_cfg.ps1
[{file}]
----
# Just exclude 'locks' from sync sections:
$SYNC_SECTIONS = @("instance", "sessions", "logswitches", "undostat", "recovery_area", "processes", "recovery_status", "longactivesessions", "dataguard_stats", "performance")
----

The same applies for the other three variables in which the sections are determined.


[#access_windows]
==== Access rights on execution

For security reasons, the agent plug-in `mk_oracle.ps1` only executes Oracle binaries as administrator if these programs can only be changed by administrators.
Administrators under Windows are the LocalSystem account and members of the built-in `Administrators` group.
This applies to the programs `sqlplus.exe`, `tnsping.exe` and -- if available -- `crsctl.exe`.
The agent plug-in `mk_oracle.ps1` does not execute any of these programs if non-administrative users have one of the permissions `Write`, `Modify` or `Full control` for the file.
This prevents the security risk of non-privileged users executing programs as administrator.

[TIP]
====
You can find out in which patch version of {CMK} this change was made in link:https://checkmk.com/werk/15843[Werk pass:q[#]15843^].
====

If necessary, change the access rights by removing the above-mentioned permissions of non-administrative users for the programs.
The agent plug-in helps you with the diagnosis and checks whether non-administrative users have access to the files mentioned and displays them in the xref:connection_test[connection test].
The exact procedure for diagnosing and correcting access rights can be found in the link:https://checkmk.atlassian.net/wiki/spaces/KB/pages/70582273/[{CMK} Knowledge Base^].

If it is not possible for you to adjust the permissions for the Oracle programs securely, you can allow individual users and groups to run the programs:

.C:\ProgramData\checkmk\agent\config\mk_oracle_cfg.ps1
[{file}]
----
# Oracle plugin will allow users and groups in the list to have write access to the Oracle binaries
$WINDOWS_SAFE_ENTRIES=@("NT AUTHORITY\Authenticated Users", "<Domain>\<User>")
----

Only if there is no other way to ensure the Oracle monitoring you can switch off the access rights check as a final option.

[IMPORTANT]
====
If you disable the access rights check, the agent plug-in will no longer run securely.
====

.C:\ProgramData\checkmk\agent\config\mk_oracle_cfg.ps1
[{file}]
----
# Oracle plugin will not check if the used binaries are write-protected for non-admin users
$SKIP_ORACLE_SECURITY_CHECK=1
----

However, there is also another way to execute the agent plug-in -- without administrator rights.
You can xref:agent_windows#customizeexecution[customize the execution of the agent plug-in] and run it under the local Windows group `Users`, for example.
To do this, edit the configuration file `check_mk.user.yml` of the Windows agent, for example like this:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file},highlight=6]
----
plugins:
    enabled: yes
    execution:
        - pattern: $CUSTOM_PLUGINS_PATH$\mk_oracle.ps1
          async: yes
          group: Users
          run: true
----

{cee-only}
In the commercial editions, you can have these entries created by the Agent Bakery with the agent rule [.guihint]#Run plug-ins and local checks using non-system account#.


=== Monitoring remote databases

Monitoring remote databases is currently not possible using the Windows agent plug-in.
Therefore if you want to monitor remote databases, you need a host with a compatible xref:linux[Unix-like operating system].


[#bakery]
== Setting up with the Agent Bakery

ifdef::onprem[]
{cee-only}
The setup can be greatly simplified in the commercial editions with the xref:glossar#agent_bakery[Agent Bakery],
endif::[]
ifdef::saas[]
The setup can be greatly simplified with the xref:glossar#agent_bakery[Agent Bakery],
endif::[]
because syntax errors in the configuration files are avoided, and adaptations to changing environments can be implemented more easily.
The main difference compared to a manual configuration is that you only need to work on the Oracle host at the command line if you want to make special Oracle-specific configurations.
You can perform the setup with the Agent Bakery for Linux, Solaris, AIX and Windows.

Nevertheless, you cannot configure all functions of the agent plug-in with the Agent Bakery,
for example, if these are functions that require a major intervention and in-depth specialist knowledge.
Accordingly, the xref:custom_sqls[custom SQL queries] cannot be configured in the Agent Bakery.

Via [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX# and the [.guihint]#Agents > Agent rules# menu, you will find the page with the [.guihint]#Oracle databases (Linux, Solaris, AIX, Windows)# xref:glossar#rule_set[rule set]. 
Create a new rule with [.guihint]#Add rule#.
Here you will find all options available to you for configuring the agent plug-in:

image::monitoring_oracle_bakery_ruleset.png[alt="Rule for configuring Oracle in the Agent Bakery."]

Many options will be familiar to you from the manual setup.
As described there, there are options that are not available for all operating systems.
The title of these options shows for which operating systems they can be used.


[#bakery_users]
=== Configuring users

In the xref:user_config[simplest configuration] for a Unix-like operating system, the rule will look something like this:

image::monitoring_oracle_bakery_login1.png[alt="Simplest rule for configuring Oracle in the Agent Bakery."]

In the Agent Bakery you also have the option of creating standard users and creating exceptions for specific instances.
The options, separated in the configuration file with a colon (for xref:adv_user_linux[Linux & Co.]) or as list entries (for xref:adv_user_windows[Windows]),
you will find under [.guihint]#Login Defaults# as individual options which you can then fill out as needed.
Of course, you can also use the xref:oracle_wallet[Oracle Wallet] here by simply changing [.guihint]#Authentication method# to [.guihint]#Use manually created Oracle password wallet#.

The configuration for Automatic Storage Management (ASM) is done analogously via the [.guihint]#Login for ASM# option,
and the exceptions for specific instances are entered under [.guihint]#Login for selected databases#, as described in the advanced user configuration for xref:adv_user_linux[Linux, Solaris, AIX] and xref:adv_user_windows[Windows].


[#bakery_advanced]
=== Advanced options

The following table lists the remaining options in the [.guihint]#Oracle databases (Linux, Solaris, AIX, Windows)# rule set, along with a reference to where to find a description of the option:

[cols="40,~",options="header"]
|===
|Option |Description
|[.guihint]#Host uses xinetd or systemd (Linux/AIX/Solaris only)# |This option must be activated for Unix-like systems with `xinetd`/`systemd`.
With `systemd` the asynchronous execution of the agent plug-in is mandatory -- at the interval you specify.
You can find out more about this at the xref:install_linux[agent plug-in installation].
|[.guihint]#Instances to monitor# |This option summarizes several options of the configuration file with which you can include or exclude instances for xref:skip_include[Linux, Solaris, AIX] or xref:skip_include_windows[Windows].
|[.guihint]#Add pre or postfix to TNSALIASes (Linux/AIX/Solaris only)# |This option allows you to extend the xref:tns_config[TNS alias] either globally or for a specific instance.
|[.guihint]#Sections - data to collect# |All available sections are listed under this option, and these can be configured individually at global level.
They therefore correspond to the variables `SYNC_SECTIONS` and `ASYNC_SECTIONS` and for ASM their counterparts `SYNC_ASM_SECTIONS` and `ASYNC_ASM_SECTIONS`.
More on this in the section on the data to be fetched for xref:sections[Linux, Solaris, AIX] or xref:sections_windows[Windows].
|[.guihint]#Exclude some sections on certain instances# |If you do not want to use `EXCLUDE_<SID>` to exclude the entire instance, but only to exclude a few sections, you can do so with this option, as described for xref:sections[Linux, Solaris, AIX] or xref:sections_windows[Windows].
|[.guihint]#Cache age for background checks# |Specify here how long asynchronous sections should remain valid.
The default value is 600 seconds (10 minutes).
|[.guihint]#Sqlnet Send timeout# |This option is added to the `sqlnet.ora` file and sets a timeout that applies to all instances.
|[.guihint]#Remote instances (Linux/AIX/Solaris only)# |Configure xref:remote_instances[remote instances] with this option.
It contains all elements of the configuration that you already know.
To specify the variable's ID, via [.guihint]#Unique ID# you can select from various options.
You just have to make sure that the ID is unique within the configuration.
|[.guihint]#ORACLE_HOME to use for remote access (Linux/AIX/Solaris only)# |Here you can determine where the agent plug-in finds the `sqlplus` program.
You must enter a value here if you want to monitor a xref:remote_instances[remote instance], but `sqlplus` cannot be found via the environment variables.
|[.guihint]#TNS_ADMIN to use for sqlnet.ora and tnsnames.ora (Linux/AIX/Solaris only)# |If the two files are located in a directory other than `/etc/check_mk/`, you can use this option to specify the path name via the environment variable xref:tns_config[`TNS_ADMIN`].
|[.guihint]#sqlnet.ora permission group (Linux/AIX/Solaris only)# |Enter here the Linux group of the non-privileged user who owns the Oracle binaries so that this user can read the `sqlnet.ora` file created by the Agent Bakery.
For a standard Oracle installation, `oinstall` can be used as group. +
Further information can be found in the section xref:access_linux[Access rights on execution] for Linux.
Other files and directories are also mentioned there, e.g. `tnsnames.ora`, which are not created by the Agent Bakery.
For these manually created files and directories you must also set the necessary permissions manually.
|[.guihint]#Oracle binaries permissions check (Windows only)# |Here you can configure the access rights check for the Oracle binaries by allowing individual, non-administrative users and groups to execute the programs.
You should only switch off the check if you know what you are doing.
You can find more information on this topic in the section xref:access_windows[Access rights on execution] for Windows.
|===


[#clustered_instances]
== Clustered instances

=== Standby databases

Oracle supports so-called _standby databases_ which can perform specified tasks, and which are usually simply copies of production or primary databases.
These database concepts also require special monitoring mechanisms.
You can find out more about these mechanisms in the following sections.

[#cluster_adg]
==== With Active Data Guard (ADG)

Once you have licensed and activated ADG, you do not need to make any changes to the configuration of the agent plug-in, since you can read from a standby instance at any time without having to interrupt the synchronization with the primary instance.


[#cluster_dg]
==== Without Active Data Guard (DG)

If the instances do not have ADG, the user with which the monitoring data from the standby instances is to be fetched needs the `SYSDBA` role.
This permission enables the user to fetch at least part of the data, even if the primary instance fails and the instance on the standby server has not yet been changed from `MOUNTED` to `OPEN`.

Assign the permission to the user who is authorized to retrieve the data from the instances.
*Important:* How this works may differ from the following example.
Here the role is assigned to the user as created in the xref:first_steps[initial setup] example:

[{sql}]
----
sqlplus> grant sysdba to checkmk;
----

To enable the data to be queried by the agent plug-in on the standby server in case of an error, create the user on the primary instance, and then copy the password file to the standby server.
Finally, in the plug-in's configuration file, set the role of the user to `SYSDBA`:

./etc/check_mk/mk_oracle.cfg
[{file}]
----
# Syntax:
# DBUSER='USER:PASSWORD:ROLE:HOST:PORT:TNSALIAS'
DBUSER='checkmk:myPassword:sysdba'
----

Note that specifying a host, port, or TNS alias is optional, and can be omitted.
In addition, the agent plug-in must of course be installed on the host of the primary instance as well as on the hosts of the standby instances.


[#clustered_services]
==== Setting up cluster services

On {CMK} side, it is necessary -- regardless of whether you are using ADG or DG -- to customize the services and assign them to a _cluster host_.
The corresponding check plug-ins have already been prepared to the extent that they can also be configured as xref:clustered_services#[cluster services].
Create a cluster host in {CMK} and add the individual Oracle hosts on which the primary and standby instances are running to it as nodes.
Then assign the following services to this cluster host:

* `ORA .* RMAN Backup`
* `ORA .* Job`
* `ORA .* Tablespaces`

After this you will no longer need to worry about which instance the data comes from, and will have ensured seamless monitoring of the above-mentioned services -- even in the event of a switchover of the primary instance.


[#rac]
=== Real Application Cluster (RAC)

Since there is a central storage for the data in a RAC, it is sufficient here to create the user for the agent plug-in only once.
Only the agent plug-in needs to be installed and configured on each node of the Oracle cluster.

*Important:* Always set up the cluster's nodes yourself, and do not query the Oracle _SCAN listener_.
This is the only way to ensure that access via the agent plug-in works correctly.


==== Setting up cluster services

It also makes sense to set up cluster services for a RAC.
In addition to the services that you assign to the cluster host under an xref:cluster_adg[(Active) Data Guard], you also assign the following services to the cluster host to ensure seamless monitoring in the event of a switch over:

* `ASM.* Diskgroup`
* `ORA .* Recovery Area`


[#custom_sqls]
== Custom SQL queries (Custom SQLs)

=== Why custom SQL queries?

With its agent plug-in {CMK} already provides a large number of SQL queries with which you can monitor your database instances.
To make these suitable for the widest possible range of technical and content requirements, they are of course kept in a very generalized form.

In order to be able to meet the individual requirements of each company for the monitoring of a specific database, {CMK} provides the possibility of creating your own custom SQL queries (_custom SQLs_ for short) and having them retrieved with the agent plug-in.
These custom SQL queries are then automatically recognized and monitored as own services in the Web interface.

[TIP]
====
It is only possible to use custom SQL queries under Linux, Solaris and AIX.
This option is not available under Windows.
====


=== Simple custom SQL queries

==== Writing SQL queries

The easiest way to connect such a SQL is to use the link:https://checkmk.com/integrations/oracle_sql[Oracle Database: Custom SQLs^] check plug-in.
To do this, first create the `MyCustomSQL.sql` file in the agent's configuration directory on the host on which the SQL is to be executed.

The following is a dummy that illustrates the syntax:

./etc/check_mk/MyCustomSQL.sql
[{sql}]
----
/*Syntax help in comments. The first word is alwyas the key word and ends with a ":"*/

/*details:Text to display in the service detail output*/
prompt details: Some details for the service output;

/*perfdata:METRIKNAME=CURRENTVALUE;WARN;CRIT;MAX METRIKNAME=CURRENTVALUE2;WARN;CRIT;MAX*/
prompt perfdata:MyMetricName1=10;15;20;30 MyMetricName2=16;15;20;30;
prompt perfdata:MyMetricName3=21;15;20;30 MyMetricName4=15;15;20;30;

/*long:Text to display in the long output of the service*/
prompt long: Here comes some long output for the service;
prompt long: Here comes some more long output for the service;

/*exit:Status of the service as a number*/
prompt exit:2;
----

The example shows on the one hand that you can define any number of statements in such a file.
On the other hand, the syntax is very similar to that of a xref:glossar#local_check[local check], especially with regard to xref:glossar#metric[metrics].
In detail, this syntax is much more powerful here, because you can generate multi-line output, and this is then processed on the {CMK} server as a service.
In principle, all lines are optional and do not need to be filled.

The possible keywords are in detail:

* `details`:
Here you can determine what should be output in the generated service's [.guihint]#Summary#.
This line is introduced with the keyword and a colon.
The rest of the line is the output.

* `perfdata`:
Metrics is passed with this keyword.
Within a line, you can create any number of metrics -- each separated by a space.
You can also distribute the output of the metrics over several lines.
Just always start with the keyword `perfdata:`.

* `long`:
If the service should have a long output for the [.guihint]#Details# field, you can specify it here.
You can also use this keyword multiple times to create multiple lines in the [.guihint]#Details#.

* `exit`:
If the output should have a certain status, you can specify this here.
The known assignments `0`, `1`, `2`, `3` are available for the statuses {OK}, {WARN}, {CRIT}, {UNKNOWN}.

[TIP]
====
You do not have to define the keyword `elapsed` manually.
It is generated automatically at runtime to check how long the statements you defined took to process.
====


==== Configuring the agent plug-in

Now that you have defined your first, very simple SQL, make it known to the agent plug-in `mk_oracle`.
This is done via the familiar configuration file, which you can expand accordingly:

./etc/check_mk/mk_oracle.cfg
[{file}]
----
SQLS_SECTIONS="mycustomsection1"

mycustomsection1 () {
    SQLS_SIDS="INST1"
    SQLS_DIR="/etc/check_mk"
    SQLS_SQL="MyCustomSQL.sql"
}
----

With the first option (`SQLS_SECTIONS`) you determine which individual sections you want to have executed.
Note that _section_ here means a part of the agent plug-in output -- and _not_ a part of a database instance.
In the example, we have only specified one section (`mycustomsection1`) and then described it in more detail directly afterwards.
Each section is actually a small function called by the agent plug-in.

In this function you can then determine further details and specify for which instances (`SQLS_SIDS`) this section applies.
In addition, you also define where the file with the SQL statements is located (`SQLS_DIR`), and the name of this file (`SQLS_SQL`).

This simple configuration is sufficient to be able to see the result in {CMK}.
To do this, perform a xref:glossar.html#service_discovery[service discovery] and activate the new service.
Afterwards you will see this new service with the other services in the host overview:

image::monitoring_oracle_custom_sqls_list.png[alt="The new service created by custom SQL queries in the service list."]


[#adv_custom_sqls]
=== Advanced options

The possibilities to monitor with custom SQL queries of course go beyond the simple example shown above.
In the following you will find an overview of the available variables that you can use in the `mk_oracle.cfg` configuration file.
For a detailed description, you can also call the agent plug-in `mk_oracle` with the `--help` option.

[TIP]
====
Variables that can only be set outside or only within a section function are marked accordingly.
All others can be defined in both sections.
If they are set outside of a section, they will apply globally to all sections.
====

[cols="10,~,5",options="header"]
|===
|Variable |Short description |Optional
|`SQLS_SECTIONS` |The self-defined section functions to be executed by the agent plug-in. +
This variable can only be set globally (outside of a section function). |No
|`SQLS_SIDS` |The instances that are to execute the section(s). |No
|`SQLS_DIR` |The path name of the directory in which the files with the custom SQL queries are stored. |No
|`SQLS_SQL` |The file that contains the SQL statements for a section. |No
ifdef::onprem[]
|`SQLS_SECTION_NAME` |The name of the section that you evaluate with an xref:own_check_plug-in[own check plug-in] for the custom SQL queries. |Yes
endif::[]
|`SQLS_SECTION_SEP` |The separator of the individual elements in a line of the output, defined as a decimal link:https://en.wikipedia.org/wiki/ASCII#Printable_characters[ASCII^] ID.
This variable can only be used in conjunction with the variable `SQLS_SECTION_NAME`.
We recommend that you define your own separator for your own sections and use the ASCII ID `124` for the pipe character (`\|`), as the agent plug-in always separates the elements of the output in the event of an error with `\|`, in the format `<SID>\|FAILURE\|<error description>`.
The following characters may _not_ be used as a separator: `;` `[` `]` `=` |Yes
|`SQLS_ITEM_NAME` |Specifies a part of the generated service name.
By default, the service name is composed of SID and the file name with the custom SQL queries.
The value of this variable replaces the file name in the service name. +
This variable can only be set locally (within a section function).
It cannot be used together with the variable `SQLS_SECTION_NAME`. |Yes
|`SQLS_MAX_CACHE_AGE` |Performs the same task as xref:sections[`CACHE_MAXAGE`] -- but for the custom SQL queries. |Yes
|`SQLS_DBUSER` |Defines an individual user for a section. |Yes
|`SQLS_DBPASSWORD` |Defines the password of the user defined with `SQLS_DBUSER`. |Yes
|`SQLS_DBSYSCONNECT` |Only if the user defined with `SQLS_DBUSER` is `SYSDBA` or `SYSOPER` you have to define the associated role (`SYSDBA` or `SYSOPER`) with this variable. |Yes
|`SQLS_TNSALIAS` |Defines an individual xref:tns_config[TNS alias] for a section. |Yes
|===


ifdef::onprem[]
[#own_check_plug-in]
=== Using your own check plug-ins

If the possibilities of the syntax described above are not sufficient, you can also use the `SQLS_SECTION_NAME` variable to output your own section names for one or more SQL queries and define your own separator with `SQLS_SECTION_SEP`.
However, this requires that you have also written an appropriate check plug-in and included it in your {CMK} xref:glossar#site[site].

If you have written such a check plug-in, you are completely free to evaluate the output of the self-defined sections of the agent plug-in and can go your own way.
Since this method is the most comprehensive, and also the most difficult, it is only mentioned here for completeness.
It assumes that you know how to write an xref:devel_check_plugins#[agent-based check plug-in] and integrate it into the site.
After that you assign the custom SQL queries with the variables to this check plug-in.
endif::[]


[#diagnostic]
== Diagnostic options

Under Linux, diagnostics are performed by calling the agent plug-in `mk_oracle` with various options.
With `mk_oracle --help` you can display an overview of all available options.


[#connection_test]
=== Testing connections

[TIP]
====
The connection test described below also checks whether the necessary access rights are set during execution on xref:access_linux[Linux] or xref:access_windows[Windows].
If access rights are missing, these are displayed with specific suggestions for rectification. 
The exact procedure for diagnosing and correcting access rights can be found in the link:https://checkmk.atlassian.net/wiki/spaces/KB/pages/70582273/[{CMK} Knowledge Base^].
====

==== Linux, Solaris, AIX

If you have problems connecting to one or more instances on an Oracle server, the first thing you can do is to check basic parameters.
If you start the agent plug-in with the `-t` option, it displays the details of a connection.
Note that the agent plug-in must be provided with the paths to its configuration file and to the plugin's cached data beforehand.
In the output the _dummy sections_ have been omitted for readability.

The following example is for a Linux server with `systemd`, on which the agent plug-in is executed xref:install_linux[asynchronously] every 60 seconds:

[{shell}]
----  
{c-root} export MK_CONFDIR="/etc/check_mk/"; export MK_VARDIR="/var/lib/check_mk_agent"
{c-root} /usr/lib/check_mk_agent/plugins/60/mk_oracle -t --no-spool
---login----------------------------------------------------------------
    Operating System:       Linux
    ORACLE_HOME (oratab):   /u01/app/oracle/product/11.2.0/xe
    Logincheck to Instance: XE
    Version:                11.2
    Login ok User:          checkmk on ORA-SRV01 Instance XE
    SYNC_SECTIONS:          instance dataguard_stats processes longactivesessions sessions recovery_status undostat logswitches recovery_area performance
    ASYNC_SECTIONS:         tablespaces rman jobs ts_quotas resumable
------------------------------------------------------------------------
----

On a Linux server with `xinetd`, call `mk_oracle` for the connection test as follows instead:

[{shell}]
---- 
{c-root} /usr/lib/check_mk_agent/plugins/mk_oracle -t
----

Since this call is more likely to be made in the event of an error, you will then also receive further information:
Both the _connection string_ that was used for the connection and the first 100 characters of the error message that was returned during the connection attempt.
With the help of this information, you can quickly identify simple configuration problems and then correct them accordingly.


==== Windows

The agent plug-in does not accept any parameters under Windows.
So to test the connection here, temporarily limit the sections to be retrieved to `instance` and activate the `DEBUG` option:

.C:\ProgramData\checkmk\agent\config\mk_oracle_cfg.ps1
[{file}]
----
# Syntax:
# $DBUSER = @("USERNAME", "PASSWORD")
$DBUSER = @("checkmk", "myPassword")

SYNC_SECTIONS = @("instance")
ASYNC_SECTIONS = @("")
DEBUG = 1
----

Then run the agent plug-in manually.
Again, you will get information about how the plug-in tries to access the instances.
An output may then look like this, for example:

[{powershell}]
----
PS C:\ProgramData\checkmk\agent\plugins\> .\mk_oracle.ps1
2020-08-23T12:48:20.3930944+02:00 DEBUG:value of DBVERSION software = xxx112020xxx
<<<oracle_instances>>>
2020-08-23T12:48:20.3930944+02:00 DEBUG:value of inst_name = xxxXExxx
2020-08-23T12:48:20.3930944+02:00 DEBUG:value of DBVERSION database = xxx112020xxx
2020-08-23T12:48:20.3930944+02:00 DEBUG:value of the_section = sql_instance
2020-08-23T12:48:20.3930944+02:00 DEBUG:now calling multiple SQL
2020-08-23T12:48:20.3930944+02:00 DEBUG:value of sql_connect in dbuser = checkmk/myPassword@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521))(CONNECT_DATA=(SID=XE))) as sysdba
<<<oracle_instance>>>
XE|FAILURE|...
----


[#logging]
=== Logging

==== Linux, Solaris, AIX

If the error cannot be found by checking a simple connection, the next step is to create a a log file, which logs all of the agent plug-in's steps.
Do not forget the necessary environment variables here either.
In the following example, the output of the sections has also been omitted to improve readability.

Here is the call for a Linux server with `systemd`, on which the agent plug-in is executed xref:install_linux[asynchronously] every 60 seconds:

[{shell}]
----
{c-root} export MK_CONFDIR="/etc/check_mk/"; export MK_VARDIR="/var/lib/check_mk_agent"
{c-root} /usr/lib/check_mk_agent/plugins/60/mk_oracle -l --no-spool
Start logging to file: /var/lib/check_mk_agent/log/mk_oracle.log
----

Here is the call of `mk_oracle` for logging on a Linux server with `xinetd`:

[{shell}]
---- 
{c-root} /usr/lib/check_mk_agent/plugins/mk_oracle -l
----

You can use the generated log file to identify very precisely on which line of the script the problem has occurred.


==== Windows

Logging under Windows works similarly to the connection test described above.
If the connection itself is stable, you can add the real sections back to the configuration file and then get a complete logging output.


[#debugging]
=== Debugging

==== Linux, Solaris, AIX

If you cannot get to the problem, even with the help of the log, as a last option the agent plug-in provides the complete output of all steps for error analysis.
This output is therefore the most comprehensive, and certainly the most difficult to read method to get to the cause of a problem, and should therefore only be used as a last resort.

The following is an example of debugging on a Linux server with `systemd`, on which the agent plug-in is executed xref:install_linux[asynchronously] every 60 seconds:

[{shell}]
----
{c-root} export MK_CONFDIR="/etc/check_mk/"; export MK_VARDIR="/var/lib/check_mk_agent"
{c-root} /usr/lib/check_mk_agent/plugins/60/mk_oracle -d --no-spool
----

Here is the call of `mk_oracle` for debugging on a Linux server with `xinetd`:

[{shell}]
---- 
{c-root} /usr/lib/check_mk_agent/plugins/mk_oracle -d
----

*Important:* In this output sensitive data such as passwords is _not_ masked.
So everything is readable in plain text.


==== Windows

A similar functionality is available under Windows.
However, since you cannot pass any arguments to the agent plug-in, you will need to switch on tracing manually:

[{powershell}]
----
PS C:\ProgramData\checkmk\agent\plugins\> Set-PSDebug -Trace 1
PS C:\ProgramData\checkmk\agent\plugins\> .\mk_oracle.ps1
----

[#ora-01031]
=== Error messages in Oracle log files

The xref:create_user[database user] for monitoring usually does not require the `SYSDBA` role.
However, note that the agent plug-in `mk_oracle` can generate error messages  (not relevant for monitoring) with multi-tenant databases which may not be written to Oracle database log files due to a lack of the `SYSDBA` privilege.
This can then lead, for example, to Oracle error messages of type `ORA-01031: insufficient privileges` in an alert log file.


[#files]
== Files and directories

=== On the Oracle host under Linux, Solaris, AIX

[cols="50,~",options="header"]
|===
|File path |Description
|`/usr/bin/check_mk_agent` |The {CMK} agent that collects all data about the host.
|`/usr/lib/check_mk/plugins/mk_oracle/` |The Oracle agent plug-in in the usual directory for agent plug-ins.
Note that the path name under AIX is slightly different: `/usr/check_mk/lib/plugins/mk_oracle`
|`/etc/check_mk/oracle.cfg` |The configuration file for the agent plug-in.
Again, AIX is different: `/usr/check_mk/conf/mk_oracle.cfg`
|`/etc/check_mk/sqlnet.ora` |The configuration file required for the xref:oracle_wallet[Oracle Wallet].
|`/etc/check_mk/tnsnames.ora` |The configuration file which contains TNS aliases.
Sample files are also located in the Oracle installation, but since the path differs from installation to installation, it cannot be specified in a standardized way.
|===


=== On the Oracle host under Windows

[cols="50,~",options="header"]
|===
|File path |Description
|`C:\Program Files (x86)\checkmk\service\check_mk_agent.exe` |The {CMK} agent that collects all data about the host.
|`C:\ProgramData\checkmk\agent\plugins\mk_oracle.ps1` |The Oracle agent plug-in in the usual directory for agent plug-ins.
|`C:\ProgramData\checkmk\agent\config\mk_oracle_cfg.ps1` |The configuration file for the agent plug-in.
|`C:\ProgramData\checkmk\agent\config\sqlnet.ora` |The configuration file required for the Oracle Wallet.
|`C:\ProgramData\checkmk\agent\config\tnsnames.ora` |The configuration file which contains TNS aliases.
Sample files are also located in the Oracle installation, but since the path differs from installation to installation, it cannot be specified in a standardized way.
|===


ifdef::onprem[]
[#files_cmk]
=== On the {CMK} server

[cols="50,~",options="header"]
|===
|File path |Description
|`~/share/check_mk/agents/plugins/mk_oracle` |The agent plug-in for Unix-like systems, which fetches the data on the Oracle host.
|`~/share/check_mk/agents/plugins/mk_oracle_crs` |This agent plug-in for Unix-like systems provides data to an Oracle Cluster Manager.
|`~/share/check_mk/agents/windows/plugins/mk_oracle.ps1` |The agent plug-in for Windows, which fetches the data on the Oracle host.
|`~/share/check_mk/agents/cfg_examples/` |Here are sample configuration files for Unix-like systems in the files `mk_oracle.cfg`, `sqlnet.ora` and `tnsnames.ora`.
|`~/share/check_mk/agents/windows/cfg_examples/mk_oracle_cfg.ps1` |An example configuration file for Windows.
|===
endif::[]
