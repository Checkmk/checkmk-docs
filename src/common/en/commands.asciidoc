// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= Commands
:revdate: 2025-02-12
:title: Commands
:description: Learn here how to use {CMK} in monitoring to perform specific actions on hosts or services by command.

{related-start}
link:basics_ackn.html[Acknowledging problems]
link:basics_downtimes.html[Scheduled downtimes]
link:notifications.html[Notifications]
{related-end}


[#command_execute]
== Executing a command

You can intervene in the monitoring process using commands that apply to hosts, services and other objects.
The commands are most often used for acknowledging problems and for setting xref:glossar#scheduled_downtime[scheduled downtimes].
There are a number of other commands however, some of which are reserved for the administrator.
Which commands are available in a xref:glossar#view[view] depends on your access rights (xref:wato_user#roles[role]), as well as on the type of object being displayed. 

You can access the commands in a view via the [.guihint]#Commands# menu. 
When you select one of the commands, a field with the command's parameters is displayed below the menu bar or action bar.
If you select [.guihint]#Acknowledge problems# it will look like this:

image::commands_acknowledge.png[alt="The parameters for executing a command."]

Some commands need further information, such as an acknowledgment. 
Pressing the [.guihint]#Acknowledge problems# button opens a confirmation dialog:

image::commands_confirm_acknowledgement.png[alt="Confirmation dialog before executing the command."]

If you confirm the request, the chosen command will be carried out on *all* objects shown in the current view.
If you first wish to make a selection in the view, you have three options:

* Go into the host’s or service’s detail view so that the command only takes effect there.
* Set a icon:icon_filter[] [.guihint]#Filter# in the view in order to reduce the list of displayed objects.
* Activate the checkboxes with icon:icon_toggle_on[alt="Icon for displaying an activated switch."] [.guihint]#Show checkboxes#.

Activated checkboxes open an extra column on the view’s left side where objects can be selected which the command will act on:

image::commands_list_checkboxes.png[alt="Service list with activated checkboxes in the first column."]

A click on the small cross at the top of the column will switch all of a table’s checkboxes on or off.


[#commands]
== The commands at a glance

The available commands can be found in the [.guihint]#Commands# menu:

ifdef::onprem[]
image::commands_menu_more.png[alt="The 'Commands' menu in Show more mode.",width=40%]
endif::[]

ifdef::saas[]
image::commands_menu_more_saas.png[alt="The 'Commands' menu in Show more mode.",width=40%]
endif::[]

Reminder: Available means that the commands can be different depending on the view and permissions.
Also note that you can xref:intro_gui#show_less_more[show less or more] in this menu.

The most important commands in brief:

[#fake_check_results]
[cols="35,~"]
|===
|[.guihint]#Acknowledge problems# |xref:basics_ackn#[Acknowledge problems]. +
Acknowledgments can be removed with the [.guihint]#Remove acknowledgments# command.

|[.guihint]#Schedule downtimes# |Set xref:basics_downtimes#[scheduled downtimes]. +
You can remove downtimes with the [.guihint]#Remove downtimes# command.

|[.guihint]#Fake check results# |Manually determine the results of checks, i.e. the output, performance data or simply the state of a host or service.
This is useful, for example, to test the effects of different outputs and states on monitoring, views or xref:glossar#notification[notifications].
After a state change initiated with this command, the original state should be restored during the next regular check. +
*Note:* This command can only be used to a limited extent for testing notification rules, as a state change often only leads to a xref:notifications#repeated_check_attempts[soft state] for which no notifications are generated.
In addition, the host/service can become icon:icon_flapping[alt="Symbol for displaying the flapping state."] xref:glossar#flapping[flapping] after some time if the state changes frequently.
Further state changes will then also no longer trigger notifications.
You should therefore use [.guihint]#Test notifications# for the xref:notifications#notification_testing[test of notification rules].

|[.guihint]#Reschedule active checks# |Manually trigger xref:glossar#active_check[active checks], for example the HW/SW inventory, outside its usual cycle.
However, for many hosts this could cause short-term peaks in CPU usage
To counteract this the checks can be evenly distributed over a period to be entered in minutes.

|[.guihint]#Send custom notification# |Create custom notifications.
This does not generate a state change.
Notifications created with this command are of the special `CUSTOM` type and can also be specially evaluated using notification rules.

|[.guihint]#Add comment# |Add comment.
A comment is marked in a view with the icon:icon_comment[alt="Symbol for a comment."] icon.
You can get an overview of all comments via [.guihint]#Monitor > Overview > Comments#.
There you will also find the [.guihint]#Delete comments# command to remove comments.

ifdef::onprem[]
|[.guihint]#Archive events of hosts# |Archive all open events of the xref:glossar#ec[Event Console]. +
Further commands for the Event Console are discussed in the corresponding xref:ec#commands[article].
endif::[]

|[.guihint]#Freeze aggregations# |Freeze xref:glossar#bi[Business Intelligence (BI)] aggregations.
You can find out more about this in the xref:bi#freeze[BI article].
|===

[TIP]
====
In the comments at [.guihint]#Acknowledge problems#, [.guihint]#Schedule downtimes# and [.guihint]#Add comment# you can enter a URL in the form `\https://www.example.com`.
This will then be automatically converted into a link. 
====
