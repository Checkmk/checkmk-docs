// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= Commands
:revdate: 2021-05-06
:title: Commands
:description: Learn here how to use {CMK} in monitoring to perform specific actions on hosts or services by command.

{related-start}
link:basics_ackn.html[Acknowledging problems]
link:basics_downtimes.html[Scheduled downtimes]
link:notifications.html[Notifications]
{related-end}


[#command_execute]
== Executing a command

With commands affecting hosts, services and other objects, you can intervene in the monitoring process.
The commands are most often used for acknowledging problems and for setting scheduled downtimes.
There are a number of other commands however, some of which are reserved for the administrator.
Which commands are available in a xref:views#[view] depends on your access rights (xref:wato_user#roles[role]), as well as on the type of object being displayed. 

You can access the commands in a view via the [.guihint]#Commands# menu. 
When you select one of the commands, an area with the parameters of the command is displayed below the menu bar or action bar. If you select [.guihint]#Acknowledge problems# it will look like this:

image::commands_acknowledge.png[]

Some commands need further information, such as an acknowledgement. 
Pressing the [.guihint]#Acknowledge# button opens a request for confirmation:

image::commands_confirm_acknowledgement.png[]

*Note:* If you [.guihint]#Confirm# here, the chosen command will be carried out on *all* objects shown in the current view.
If you first wish to make a selection in the view, you have three options:

* Go into the host’s or service’s detail view so that the command only takes effect there.
* Set a icon:icon_filter[] [.guihint]#Filter# in the view in order to reduce the list of displayed objects.
* Activate the checkboxes with icon:icon_checked_checkbox[] [.guihint]#Show checkboxes#.

Activated checkboxes open an extra column on the view’s left side where objects can be selected which the command will act on:

image::commands_list_checkboxes.png[]

A click on the small cross at the top of the column will switch all of a table’s checkboxes on or off.

[#commands]
== The commands at a glance

The available commands can be found in the [.guihint]#Commands# menu:

image::commands_menu_more.png[width=40%]

Note that you can xref:intro_gui#show_less_more[show less or more] in this menu.

The most important commands in brief:

[cols="35,~"]
|===
|[.guihint]#Acknowledge problems# |xref:basics_ackn#[Acknowledge problems] +
Acknowledgements can be removed with the command [.guihint]#Remove acknowledgments.#
|[.guihint]#Schedule downtimes# |xref:basics_downtimes#[Set maintenance times] (_scheduled downtimes_). +
You can remove downtimes with the command [.guihint]#Remove downtimes.#
|Fake check results# |Manually determine the results of checks, i.e. the output, performance data or simply the status of a host or service.
This is useful, for example, to test the effects of different outputs and statuses on monitoring, views or xref:glossar#notification[Notifications].
After a status change initiated with this command, the original status should be restored during the next regular check. +
*Note:* This command can only be used to a limited extent for testing notifications, as a state change often only leads to a xref:notifications#repeated_check_attempts[soft state] for which no notifications are generated.
In addition, the host/service can become icon:icon_flapping[] xref:notifications#flapping[flapping] after some time if the state changes frequently.
Further state changes will then also no longer trigger notifications.
You should therefore use [.guihint]#Test notifications.# for the xref:notifications#notification_testing[Test of notifications].
|[.guihint]#Reschedule active checks# |Set xref:glossar#active_check[active checks] manually outside the usual rhythm, for example the hardware/software inventory.
For many hosts, however, this could lead to short-term peaks in CPU utilization.
To counteract this, the checks can be evenly distributed over a period of minutes to be entered.
|[.guihint]#Send custom notification# |Create user-defined notifications.
This does not generate a state change.
Notifications created with this command are of the special type `CUSTOM` and can also be specially evaluated using notification rules.
|[.guihint]#Add comment# |Add comment.
A comment is marked in a view with the icon icon:icon_comment[alt="Symbol for a comment."].
You can get an overview of all comments via [.guihint]#Monitor > Overview > Comments.#
There you will also find the command [.guihint]#Delete comments# to remove comments.
|===

*Tip:* In the comments at [.guihint]#Acknowledge problems#, [.guihint]#Schedule downtimes# and [.guihint]#Add comment# you can enter a URL in the form
`\https://www.example.com`. This will then be automatically converted into a link. 
