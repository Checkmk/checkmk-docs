// -*- coding: utf-8 -*-
// IGNORE WATO df pre
include::global_attr.adoc[]
= Glossary
:revdate: draft
:title: Glossary
:description: The glossary with the most important {CMK}-specific terms.

// Take care: Terms are sorted alphabetically, i.e. the order of terms in English and German is different.


=== {CMK}-specific terms

[#activate_changes]
==== Activating changes
Changes to the configuration only take effect on the monitoring after they have been activated in a second step; in a similar way to how partitioning programs handle this, for example: Configure, check, apply.

More under xref:wato#activate_changes[Activating changes].


[#active_check]
==== Active check
An active check is a small program or script that establishes a direct connection to a service on the network or internet, from where it queries the monitoring data.
Active checks are used for network-based services such as HTTP, SMTP or IMAP, e.g. `check_http` for querying web pages.
An active check handles both the collection and the evaluation of the data.
This differs from a check plug-in, which is sometimes called a passive check, because a passive check only evaluates existing data.

More under xref:active_checks#[Monitoring network services (Active checks)].


[#agent]
==== Agent
An agent on a host collects data relevant for the monitoring.
ifdef::onprem[]
The agent can be a small program installed on the host (the {CMK} agent), or an SNMP agent running independently of {CMK} on the host, or a special agent that obtains the information through an API provided by the target system -- or an active check that queries network-based services.
endif::[]
ifdef::saas[]
The agent can be a small program installed on the host (the {CMK} agent), a special agent that obtains the information through an API provided by the target system -- or an active check that queries network-based services.
endif::[]

More under xref:wato_monitoringagents#[Monitoring agents].


[#agent_bakery]
==== Agent Bakery
ifdef::onprem[]
In the commercial editions, the Agent Bakery is used to individually package agents, and as an option the packages can also be distributed automatically.
endif::[]
ifdef::saas[]
The Agent Bakery is used to individually package agents, and as an option the packages can also be distributed automatically.
endif::[]

More under xref:wato_monitoringagents#bakery[The Agent Bakery].


[#agent_plugin]
==== Agent plug-in
An agent plug-in extends the functions of the standard agent supplied with {CMK}.
It is a small program or script that is called by the {CMK} agent which enhances the agent's output with additional sections of monitoring data.
An example of an agent plug-in is the Agent Updater.

More under xref:agent_linux#plugins[Extending agents with plug-ins].


[#agent_updater]
==== Agent Updater
ifdef::onprem[]
In the commercial editions, the Agent Updater is an agent plug-in that enables agents to be updated automatically.
endif::[]
ifdef::saas[]
The Agent Updater is an agent plug-in that enables agents to be updated automatically.
endif::[]

More under xref:agent_deployment#[Automatic agent updates].


[#api_integrations]
==== API integrations
When the {CMK} Setup refers to [.guihint]#API integrations#, it means monitoring data that uses the {CMK} agent's data format but which originates from a different source.
Such sources can be data source programs, special agents or hosts that piggyback their data.
If data received via an API integration is to be used in monitoring, [.guihint]#API integrations# must be enabled in a host's properties.

ifdef::onprem[]
More under xref:datasource_programs#[Datasource programs].
endif::[]


[#automation_user]
==== Automation user
A special account for querying and configuring {CMK} independently of the web interface, e.g. via API, command line, script or web service.
By default, the automation user has a randomly chosen automation password (_automation secret_).
A number of automation users are already set up in a fresh {CMK} site, e.g. for web services and for registering the agent with the {CMK} server for TLS-encrypted data transfer.

More under xref:wato_user#automation[Automation user (for web services)].


[#bi]
==== Business Intelligence (BI)
Business Intelligence in {CMK} makes it possible to clearly display the overall status of a higher level overview derived from many individual status values. 
This superordinate level can be an abstract grouping of individual components or a business-critical application.
For example, the status of an application _email,_ consisting of various hosts, switches and services such as SMTP and IMAP, can be combined into a single display.
The formulation of completely intangible and non-technical considerations is also possible here, for example the on-time availability of a product to be delivered:
This goal lies in the future and depends on many factors, such as the supply chain, reliably functioning production, available personnel, etc.
Any threats to this abstract goal could be identified and captured via the BI module.

More under xref:bi#[Business Intelligence (BI)].


[#check]
==== Check
In {CMK}, a _check_ is a script or program that evaluates a host or service according to predefined rules,
i.e. the process that determines the status of hosts and services and which results in the display of a status of {OK}, {DOWN}, {UNREACH}, {WARN}, {CRIT}, {PEND} or {UNKNOWN}.
Checks can be implemented, for example, with a check plug-in, local check, or active check.

More under xref:monitoring_basics#checks#[Checks].


[#check_plugin]
==== Check plug-in
Check plug-ins are modules written in Python that run on the {CMK} site and which create and evaluate the services of a host.
ifdef::onprem[]
For example, the check plug-in _df_, found within a site at `~/local/lib/python3/cmk_addons/plugins/<plug-in_family>/agent_based/` (when using the Check API V2) or `~/local/lib/check_mk/base/plugins/agent_based/` (when using the Check API V1), creates services for a host's existing mounted file systems based on data from an agent on the site, and checks those services against that data, such as how much free space is left.
endif::[]
ifdef::saas[]
For example, the check plug-in _df_ creates services for a host's existing mounted file systems based on data from an agent on the site, and checks those services against that data, such as how much free space is left.
endif::[]

xref:wato_services#checkplugins[More on check plug-ins].


ifdef::onprem[]
[#mkp]
==== {CMK} extension package (MKP)
MKP is {CMK}'s own file format for aggregating and distributing extensions, i.e. custom check plug-ins, agent plug-ins, time series graph definitions, notification scripts, views, dashboards, etc.

More under xref:mkps#[{CMK} extension packages (MKPs)].
endif::[]


[#configuration_environment]
==== Configuration environment
The {CMK} web interface is divided into monitoring and configuration environments.
The latter refers to the processes with which rules are defined, hosts and services are added and defined, users are managed, or general options are specified.
The configuration environment is accessed via the [.guihint]#Setup# menu in the navigation bar.

More under xref:user_interface#[The user interface].


[#contact]
==== Contact
Contacts are {CMK} users who are responsible for specific hosts and services.
The assignment of contacts to hosts and services is done via contact groups.
Contacts can also be user accounts that exist purely for notifications, such as for forwarding to a ticket system.

More under xref:wato_user#contact_groups[Contact groups].


[#dashboard]
==== Dashboard
A dashboard is a freely-configurable overview consisting of views and/or so-called _dashlets_.
These elements are available, for example, in the form of lists (such as host problems), time series graphs or small 'speedometers' that display individual values such as a CPU temperature.

More under xref:dashboards#[Dashboards].


ifdef::onprem[]
[#distributed_monitoring]
==== Distributed monitoring
In a distributed monitoring, the entire monitoring system consists of multiple interconnected {CMK} sites, i.e. a central site and at least one remote site.
The data from all sites is displayed together in one place at the central site.
This is called the _central status_ in a distributed monitoring system.
Distributed monitoring can optionally be combined with a _central setup_.

More under xref:distributed_monitoring#[Distributed monitoring].


[#central_setup]
==== Distributed monitoring with central setup
With a _central setup_, the configuration of all {CMK} sites that are connected to each other in the distributed monitoring is carried out in a single location.
The configuration is performed only at the central site and is then distributed to all remote sites.
A central setup always includes a _central status_.

More under xref:distributed_monitoring#central_setup[Central setup].
endif::[]


ifdef::onprem[]
[#edition]
==== Edition
The {CMK} editions are the various software variants of {CMK} available for downloading and installation.
These are the Open Source {CRE}, for professional users the {CSE} available by subscription, the {CCE} based on the Enterprise, and the multi-tenant {CME}.
In this order, each edition contains the complete range of functions of the previous edition -- and expands this with specific additional functions.
For example, {CE} is based on the {SE}, enhanced and optimized for cloud environments.

More under xref:intro_setup#[Selecting a {CMK} edition].
endif::[]


ifdef::onprem[]
[#ec]
==== Event Console (EC)
When monitoring hosts and services, {CMK} focuses on _states._
The Event Console is the module that, in contrast, takes care of _events_, i.e. monitoring from sources such as syslog or SNMP traps, but optionally also the Windows Event Log, log files and own applications.
An example: A warning message from the SMTP service on a mail server would not change the status/state of its host or services -- yet it is still relevant information that belongs in the monitoring.
The Event Console can be used to record and display such events in {CMK}.

More under xref:ec#[The Event Console].
endif::[]


[#flapping]
==== Flapping
If an object (host or service) changes its state multiple times over a short period, it is regarded as flapping and is marked with the icon:icon_flapping[alt=“Icon for displaying the flapping state.”] icon.
For an object identified as flapping, successive state changes trigger no further notifications.
The flap detection can be switched on or off -- globally or by rule -- separately for hosts and services. 

More under xref:notifications#flapping[Flapping hosts and services].


[#host]
==== Host
Under {CMK}, a host is any stand alone, physical or virtual system that is monitored by {CMK}.
ifdef::onprem[]
These are usually components with their own IP address (servers, switches, SNMP devices, virtual machines), but also, for example, Docker containers or other logical objects which do not have such an IP address.
endif::[]
ifdef::saas[]
These are usually components with their own IP address (servers, virtual machines), but also, for example, Docker containers or other logical objects which do not have such an IP address.
endif::[]
Each host always has one of the states {UP}, {DOWN}, {UNREACH} or {PEND}, and always has at least one service.

Broken down even further:
For {CMK}, internally, a host is simply a structuring element that contains elements to be monitored, i.e., services.
Each host necessarily has at least one service to verify actual accessibility (such as [.guihint]#PING# or the {CMK} agent itself, i.e. the service [.guihint]#Check_MK#).
In this respect, host means little more than the heading under which a number of services are grouped.

More under xref:hosts_setup#[Host administration].


[#host_group]
==== Host group
Hosts are primarily managed by folders in {CMK}.
Host groups enable a different grouping of hosts to select hosts in monitoring, e.g. in views.
Host tags, labels and folders are used to assign hosts to such groups via rules.
Hosts can also be explicitly assigned to a host group.

More under xref:hosts_structure#host_groups[Host groups].


[#host_state]
==== Host state
The state of a host, i.e. whether it can be reached via the network ({UP}), does not respond to requests from the network ({DOWN}) or whether its access path is blocked by failed intermediate devices (switches, routers, etc.) ({UNREACH}).
For freshly added hosts that have never been queried before, there is also the {PEND} state, which is not a state in the true sense.

More under xref:monitoring_basics#hosts_services[Hosts and services].


[#host_tag]
==== Host tag
Host tags are characteristics that can be assigned to hosts so these can be targeted later in the configuration for rules or later in monitoring for views.
Host tags are divided into groups, for example a tag group _Operating systems_ can be set up with the tags _Linux_ and _Windows_.
Some tag groups are predefined, such as the type of {CMK} agent used or the IP address family used to record whether a host should be monitored over IPv4, IPv6, or both versions.
The tags also have predefined values and a default value which is assigned to each host as long as it has not been overwritten with another option from the group.

More under xref:host_tags#[Host tags].


[#label]
==== Label
Hosts can be given host tags, but they can also be given direct labels.
A label consists of two parts (key and value), separated by a colon.
Such arbitrary key-value pairs (`os:linux`, `os:windows`, `foo:bar`, etc.) can be set directly on a host -- without any prior configuration, as is necessary for host tags.
Labels therefore have no predefined scope, nor do they have a default value, but are very dynamic.
In particular, {CMK} can take objects automatically created by container systems such as Kubernetes, Azure, or AWS as hosts into monitoring, and then enrich them with labels generated automatically from their metadata.
Labels can be used, for example, for selecting conditions in rules or for filtering in monitoring views.

More under xref:labels#[Labels].


ifdef::onprem[]
[#livestatus]
==== Livestatus
Livestatus is the most important interface in {CMK}.
Through it, {CMK} users get the fastest possible live access to all of the data for the hosts and services being monitored.
For example, the data in the [.guihint]#Overview# snap-in is retrieved directly through this interface.
The fact that the data is fetched directly from RAM avoids slow disk accesses and gives fast access to monitoring without putting too much load on the system.

More under xref:livestatus#[Retrieving status data via Livestatus].
endif::[]


[#local_check]
==== Local check
A local check is a (self-written) extension, in the form of a script in any coding language, that runs on the monitored host.
Unlike regular checks, the status calculation runs directly on the host.
The results from a script are added to the regular agent output.

More under xref:localchecks#[Local checks].


[#metric]
==== Metric
Measurable and calculable values for hosts and services over time, such as temperature, utilization or availability, which can be used for graphs, for example.
ifdef::onprem[]
Past values are stored in RRDs (Round Robin Database) and by default retained for up to 4 years.
endif::[]
ifdef::saas[]
Past values are stored in RRDs (Round Robin Database) and by default retained for up to 2 years.
endif::[]

More under xref:graphing#[Measured values and graphing].


[#monitoring_environment]
==== Monitoring environment
The {CMK} web interface is divided into monitoring and configuration environments.
The former refers to the processes through which the status of the monitored infrastructure is displayed; these include the inventory, dashboards, lists of hosts, services, events or problems, historical data and so on.
The monitoring environment is accessed via the [.guihint]#Monitor# menu of the navigation bar.

More under xref:user_interface#[The user interface].


[#navigation_bar]
==== Navigation bar
The navigation bar is the main navigation panel in the {CMK} interface, on the left side with, among other things, the [.guihint]#Monitor,# [.guihint]#Setup# and [.guihint]#Customize# menus.

More under xref:user_interface#navigation_bar[The navigation bar].


[#notification]
==== Notification
With a notification, a {CMK} user is actively informed of problems or other monitoring events, via HTML email, SMS, Slack or similar.
Who is notified and how is determined by the notification rules.
For example, if Mr. Hirsch receives an email informing him that the `filesystem /` service on host `myserver123` has changed from {WARN} to {CRIT}, it is because Mr. Hirsch is a contact for that host and a notification rule states that all contacts for the host should receive an email when one of its services changes to {CRIT}.

More under xref:notifications#[Notifications].


ifdef::onprem[]
[#physical_appliance]
==== Physical appliance
The physical appliance is a 19" server with pre-installed firmware prepared for {CMK} that can be deployed immediately in data centers.
It comes with a graphical configuration interface that eliminates the need for any Linux knowledge.

More under xref:intro_setup#physical_appliance[Physical appliance].
endif::[]


[#piggyback]
==== Piggyback
Some hosts that are part of the monitoring are not queried directly because they are not physical devices, but rather they are virtual machines or containers, or the data can only be provided by a third-party system.
These third-party systems (the physical hosts) provide the data as an attachment in their own agent output and are called piggyback hosts by us.
So, for example, a Docker server would piggyback the container data along with its own data.

More under xref:piggyback#[The piggyback mechanism].


[#pull_mode]
==== Pull mode
In the pull mode, the {CMK} agent listens for incoming connections from the {CMK} server on TCP port 6556.
As soon as the agent receives a request, it sends the monitoring data to the server.
Here, the initiative for data transmission comes from the server, which basically _pulls_ the data from the agent.
ifdef::saas[]
The pull mode is the default way to transmit data from the {CMK} agent in the on-premises editions of {CMK}.
It is not available in {CE}.
endif::[]
ifdef::onprem[]
The pull mode is the default way to transmit data from the {CMK} agent -- and works in all {CMK} editions.

See more at xref:wato_monitoringagents#agents[The {CMK} agent].
endif::[]


[#push_mode]
==== Push mode
In the push mode, the {CMK} agent sends the monitoring data to the {CMK} server once per minute.
The agent _pushes_ the data transmission on its own and does not wait for a request from the server.
The push mode is always required if the {CMK} server cannot access the network in which the host to be monitored and its agent are located, for example, in a cloud-based configuration.
ifdef::onprem[]
For this reason, the push mode is only available from {CCE} onwards, i.e. in {CE} and {ME}.
endif::[]

More at xref:wato_monitoringagents#agents[The {CMK} agent].


ifdef::onprem[]
[#quick_setup_configuration]
==== Quick setup configuration
A quick setup configuration consists of four components that you already know as individual parts from the Setup of a {CMK} site.
The components are a rule for the respective special agent, a host, a connection in the dynamic host management and an entry in the password store.
endif::[]


[#rule]
==== Rule
Rules are the basis for configuring hosts and services in {CMK}.
The rules in a rule set always control a single, focused aspect of a host or service.
Rules can be provided with conditions, and can be 'stacked' on top of each other arbitrarily within a rule set.
The rule evaluation then takes place from top to bottom, so that there can be standard rules for when no condition applies, as well as very special rules that only affect a very specific host.
Many rule sets in {CMK} already have predefined default values, so that additional rules only need to be created for alternative requirements.

More under xref:wato_rules#[Rules].


[#rule_set]
==== Rule set
A rule set is applicable to a specific aspect of a host or service, such as CPU utilization thresholds.
Any number of individual rules can be created within each rule set.
For example, the [.guihint]#CPU utilization on Linux/UNIX# rule set could contain two rules that set the service to {WARN} status at 90 percent on certain hosts and as low as 70 percent on others.

More under xref:wato_rules#rule_set_types[Types of rule sets].


[#scheduled_downtime]
==== Scheduled downtime
Scheduled downtimes are planned outages, for example for updates of certain hosts.
Scheduled downtimes temporarily override notifications, and, for example, are accounted for in the availability calculation and temporarily prevent related hosts and services from showing up as problems.

More under xref:basics_downtimes#[Scheduled downtimes].


[#service]
==== Service
A service is a logical object that summarizes one or more aspects of a host.
For example, size, utilization and trends of file systems, CPU utilization, temperatures, age and number of running programs, ports, sensors and so on.
At any given time, each service in the monitoring has one of the states {OK}, {WARN}, {CRIT}, {UNKNOWN} or {PEND}, is always assigned to exactly one host, and can optionally contain one or more metrics.

More under xref:wato_services#[Understanding and configuring services].


[#service_discovery]
==== Service discovery
As soon as a host has been added to the monitoring, {CMK} automatically detects all available services that can be included in the monitoring -- and keeps this list up to date even during operation.
A service discovery can also be started manually at any time via the configuration of a host function.

More under xref:wato_services#[Understanding and configuring services].


[#service_group]
==== Service group
Like hosts, services can also be grouped together so that these groups can be filtered later in views or addressed specifically in the configuration.
Groups can be formed by folders, host tags, host and service labels, and host and service names filtered via regular expressions.

More under xref:wato_services#service_groups[Service groups].


[#service_state]
==== Service state
A service's state is always {OK} {WARN}, {CRIT} or {UNKNOWN}, and describes the current state of the service according to predefined rules.
For freshly added services that have never been queried before, there is also the {PEND} state, which is not a state in the strict sense.

More under xref:monitoring_basics#services[Services].


[#sidebar]
==== Sidebar
The sidebar can be displayed from the navigation bar with a mouse click.
Users can add various snap-ins to the sidebar to make navigation easier or to show important status data at a glance.

More under xref:user_interface#sidebar[Sidebar].


[#site]
==== Site
A site is a *single*, currently running {CMK} monitoring project.
ifdef::onprem[]
{CMK} can be run in parallel on the same server as multiple, independent sites, for example to test different {CMK} versions or editions, or to run a separate monitoring for (new) hosts that are not (yet) to be included in production monitoring.

More under xref:omd_basics#omd_create[Creating a site].
endif::[]

ifdef::saas[]
More under xref:admin_panel#admin_site[Managing sites].
endif::[]


[#snapin]
==== Snap-in
Snap-ins, also called sidebar elements, are the individual building blocks that can be placed in the sidebar, for example [.guihint]#Overview# and [.guihint]#Master control#.
Access to the snap-ins is provided by the plus icon at the bottom of the sidebar.

More under xref:user_interface#sidebar[Sidebar].


ifdef::onprem[]
[#snmp]
==== SNMP
The 'Simple Network Management Protocol' is used to monitor and configure network devices such as routers, switches, or firewalls.
{CMK} supports this protocol -- but since it is comparatively inefficient, you should only use SNMP on devices that don't support better monitoring alternatives, such as special agents.

More under xref:snmp#[SNMP].
endif::[]


[#special_agent]
==== Special agent
ifdef::onprem[]
On some systems, the regular {CMK} agent cannot be installed and SNMP is not (satisfactorily) available.
endif::[]
ifdef::saas[]
On some systems, the regular {CMK} agent cannot be installed.
endif::[]
Instead, these systems provide management APIs based on Telnet, SSH or HTTP/XML.
Via a special agent running on the {CMK} server, {CMK} queries these interfaces, integrating the host into {CMK} via API.

More under xref:special_agents#[Special agents].


[#time_period]
==== Time period
In {CMK} it is possible to restrict things like notifications, availability calculations and even the general execution of checks to certain, regularly recurring time ranges.
Time periods can be used, for example, to define daily working hours, to specify vacations and holidays, or to separate weekends from weekdays.
These time periods can then be used in rules.

More under xref:timeperiods#[Time periods].


[#view]
==== View
In addition to the dashboards, the views are the most frequently used displays of hosts, services and other components in the {CMK} interface.
These views are displayed as tables with attributes relevant to the current context.
For example, [.guihint]#All hosts# and [.guihint]#Host problems# are views in monitoring.
Supplied standard views can be customized in their display, and they can also serve as the basis for new views. It is also possible to create views from scratch.

More under xref:views#[Host and service views].


ifdef::onprem[]
[#virtual_appliance]
==== Virtual appliance
The virtual appliance is a system created for VirtualBox or VMware ESXi with pre-installed firmware prepared for {CMK}.
It includes a graphical configuration interface that eliminates the need for any Linux knowledge.

More under xref:intro_setup#virtual_appliance[Virtual appliance].
endif::[]


ifdef::onprem[]
[#wato]
==== WATO
The 'Web Administration Tool' was the GUI tool for configuring {CMK} up until {CMK} version {v16}.
With the introduction of WATO, for the first time users had the ability to customize {CMK} through a web interface instead of by using configuration files.
WATO was replaced in version {v20} by the [.guihint]#Setup# menu in the navigation bar.

More under xref:wato#setup_menu[Setup menu].
endif::[]


[#werk]
==== Werk
The {CMK} software development is organized in so-called 'Werks'.
Each change, bug fix or new feature that will have an impact on the user's experience is recorded in a separate Werk, along with notes on impacts and any possible incompatibilities.
The list of Werks is available directly in {CMK} via the [.guihint]#Help# menu in the navigation bar and on the {CMK} home page.

More under link:https://checkmk.com/werks[Werks^].

