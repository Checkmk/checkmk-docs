// -*- coding: utf-8 -*-
// IGNORE 2c muc
include::global_attr.adoc[]
= Setting up monitoring
:revdate: 20202-10
:title: Setting up monitoring
:description: To set up {CMK} for monitoring, the first host must be included, its services configured and the changes activated.

{related-start}
xref:intro_tools#[The monitoring tools]
xref:hosts_setup#[Host administration]
xref:agent_linux#[Monitoring Linux]
{related-end}


[#hosts]
== Hosts, services and agents 

So, {CMK} is ready.
But before we start with the actual monitoring, we will briefly explain some important terms.
First of all, there is the *host*.
A host in {CMK} is any stand alone, physical or virtual system monitored by {CMK}.
ifdef::onprem[]
Usually these are things with their own IP address (servers, switches, SNMP devices, virtual machines), but also, for example, Docker containers or other logical objects which do not have such an IP address.
endif::[]
ifdef::saas[]
Usually these are things with their own IP address (servers, virtual machines), but also, for example, Docker containers or other logical objects which do not have such an IP address.
endif::[]

Each host always has one of the states {UP}, {DOWN}, {UNREACH} or {PEND}.

On each host a number of *services* are monitored.
A service can be anything -- for example, a file system, a process, a hardware sensor -- but it can also simply be a certain metric such as CPU utilization or RAM usage.
Each service can have one of the states {OK}, {WARN}, {CRIT}, {UNKNOWN} or {PEND}.

In order for {CMK} to be able to request data from a host, an *agent* is necessary.
This is a small program that is installed on the host and which provides data on the state (or 'health') of the host.
Servers running Windows, Linux, or Unix can only be effectively monitored by {CMK} if you install a {CMK} agent there -- an agent provided by us.
ifdef::onprem[]
In the case of network devices and many appliances, the manufacturer will usually have built-in an agent that {CMK} can easily query using the standardized SNMP protocol.
endif::[]
Cloud services such as Amazon Web Services (AWS) or Azure alternatively provide an interface ('API') that can be queried by {CMK} via HTTP.


ifdef::onprem[]
[#dns]
== Preliminary considerations for DNS

Even though {CMK} does not require name resolution of hosts, a well-maintained Domain Name System (DNS) makes configuration much easier and avoids errors, since {CMK} will then be able to resolve the host names on its own without you needing to enter IP addresses in {CMK}.

So setting up a monitoring system is a good opportunity to check whether your DNS is up to date and, if necessary, to add any missing entries.
endif::[]


[#folders]
== Folder structure for hosts

{CMK} manages your hosts in a hierarchical tree of folders -- quite analogous to what you know from files in your operating system.
If you only monitor a handful of hosts, this may seem not so important to you.
But remember -- {CMK} is designed to monitor thousands and tens of thousands of hosts -- so good order can be half the battle won.

Before you include the first hosts into {CMK}, it is therefore advantageous to think about the structure of these folders.
On the one hand, the folder structure is useful for your own overview.
More importantly, however, it can be used for the configuration of {CMK}.
All configuration attributes of hosts can be defined in a folder, which are then automatically *inherited* by its subfolders and hosts contained there.
Therefore, it is elementary, not only but especially for the configuration of large environments, to set up a well-considered folder structure from the beginning.

Once you have created a folder structure, you can change it -- but you must do so very carefully.
Moving a host to another folder can have the effect of changing its attributes without you being aware of it.

The real consideration when building a folder structure that will be most useful to you is the criteria by which you want to organize the folders.
The criteria can be different at each level of the tree.
For example, you can distinguish by location in the first level and by technology in the second level.

The following classification criteria have proven themselves in practice:

ifdef::onprem[]
* Location/Geography
endif::[]
* Organization
* Technology

ifdef::onprem[]
Sorting by location is particularly obvious in larger companies, especially if you distribute the monitoring over several {CMK} servers.
Each server then monitors a region or a state/country, for example.
If your folders map this distribution, then you can define, for example, in the folder 'Munich' that all hosts in this folder are to be monitored from the {CMK} site 'muc'.

Alternatively, 'organization' (i.e. the answer to the question 'Who is responsible for a host?') may be a more meaningful criterion, since location and responsibility may not always be the same.
For example, it may be that one group of your colleagues is responsible for the administration of Oracle, regardless of the actual physical location of the corresponding hosts.
If, for example, the folder 'Oracle' is intended for the hosts of the Oracle colleagues, it is easy to configure in {CMK} that all hosts below this folder are only visible to these colleagues and that they can even maintain their hosts there themselves.
endif::[]

ifdef::saas[]
Sorting by organization  (i.e. the answer to the question 'Who is responsible for a host?') can be a meaningful criterion.
For example, it may be that one group of your colleagues is responsible for the administration of Oracle.
If, for example, the folder 'Oracle' is intended for the hosts of the Oracle colleagues, it is easy to configure in {CMK} that all hosts below this folder are only visible to these colleagues and that they can even maintain their hosts there themselves.
endif::[]

Structuring by technology could, for example, provide a folder for Windows servers and one for Linux servers.
This would simplify the implementation of the scheme 'The `sshd` process must run on all Linux servers'.
ifdef::onprem[]
Another example is the monitoring of devices such as switches or routers via SNMP.
Here, no {CMK} agent is used, but the devices are queried via the SNMP protocol.
If these hosts are grouped in separate folders, you can make the settings necessary for SNMP, such as the 'Community', directly at the folder.
endif::[]

Since a folder structure can only rarely reflect the complexity of reality, {CMK} provides another supplementary possibility for structuring using the host tags
-- but more on this in a separate chapter on xref:intro_finetune#host_tags[fine-tuning the monitoring].
For more information on the folder structure, see the articles about xref:hosts_setup#folder[administration] and xref:hosts_structure#folder[structuring] of hosts.


[#create_folders]
== Creating folders

You can access the administration of folders and hosts via the navigation bar, the [.guihint]#Setup# menu, the [.guihint]#Hosts# topic and the [.guihint]#Hosts# entry -- or more briefly via [.guihint]#Setup > Hosts > Hosts#.
The [.guihint]#Main# page is then displayed:

ifdef::onprem[]
image::intro_default_main.png[alt="View of 'Main' without folders and hosts."]
endif::[]

ifdef::saas[]
image::intro_default_main_saas.png[alt="View of 'Main' with one folder and without hosts."]
endif::[]

ifdef::onprem[]
Before we create the first folder itself, we will briefly discuss the structure of this page, as you will find the various elements on most {CMK} pages in one form or another.
endif::[]
ifdef::saas[]
Before we look at the contents of the folder shown, we will briefly discuss the structure of this page, as you will find the various elements on most {CMK} pages in one form or another.
endif::[]

Below the page title [.guihint]#Main# you will find the breadcrumb path, which shows you where you are currently located within the {CMK} interface.
Below this, the menu bar is displayed, which summarizes the possible actions on this page in menus and menu items.
The menus in {CMK} are always context-specific, i.e. you will only find menu entries for actions that make sense on the current page.

Below the menu bar you will find the action bar, in which the most important actions in the menus are offered as buttons for direct clicking.
You can hide the action bar with the icon:button_hide_toolbar[alt="Icon for hiding the action bar."] button to the right of the [.guihint]#Help# menu and show it again with icon:button_show_toolbar[alt="Icon for showing the action bar."].
When the action bar is hidden, the icons are displayed in the menu bar to the right of icon:button_show_toolbar[alt="Icon for showing the action bar."].

ifdef::onprem[]
Since we are currently on an empty page (without folders and without hosts), the important actions for creating the first object are additionally offered via even larger buttons -- so that the options offered by the page cannot be overlooked.
These buttons will disappear after the first object has been created.
endif::[]

Now let's get back to the reason we are on this page: the folders and how to create and edit them.
_One_ folder -- the main folder -- exists in every freshly set up {CMK} system.
It is called the [.guihint]#Main#, as you can see in the title of the page.

ifdef::onprem[]
Below the main folder, we will now create the three folders `Windows`, `Linux`, and `Network` as a simple exercise.
Create the first of the three folders by selecting one of the actions offered to create a folder, e.g. the icon:icon_newfolder[alt="Icon for creating a folder."] [.guihint]#Add folder# button.
On the new page [.guihint]#Add folder# enter the folder name in the first box [.guihint]#Basic settings#:

image::intro_folder_basic_settings.png[alt="Dialog with properties when creating a folder: 'Basic settings' with title."]

In the above image, the xref:intro_gui#show_less_more[Show less mode] is active and only the entry that is absolutely necessary for creating a folder is displayed.
Confirm the entry with [.guihint]#Save#.

Analogous to the `Windows` folder, create the other two folders `Linux` and `Network`.
After that, the situation will look like this:

image::intro_empty_folders.png[alt="View of 'Main' with three folders, one of them expanded with icons for folder actions."]
endif::[]

ifdef::saas[]
In {CE} there is a further folder, the `preconfigured_agent` folder within the [.guihint]#Main# folder.
This subfolder is used to store the hosts that are automatically created with the preconfigured agent packages.
More on this in the following xref:first[section].

To create an additional folder in [.guihint]#Main#, select one of the functions provided for creating a folder, e.g. the icon:icon_newfolder[alt=“Icon for creating a folder.”] [.guihint]#Add folder# button.
On the next [.guihint]#Add folder# page, enter the folder name in the first box [.guihint]#Basic settings#, and then confirm the entry with [.guihint]#Save.#
The result will then look something like this:

image::intro_empty_folders_saas.png[alt=“View ‘Main’ with two folders, one of them expanded with icons for folder actions.”]
endif::[]

[TIP]
====
When you point the mouse at the tab or the top of a folder icon, the folder unfolds to reveal the icons you need to perform important actions with the folder (change the properties, move the folder or delete it).
====

*One more tip:* At the top right of each page you will find the information whether -- and if so, how many -- changes have already been accumulated in the meantime.
ifdef::onprem[]
Since we have created three folders, there are three changes, but they do not need to be activated yet.
We will deal with activating changes in more detail below.
endif::[]
ifdef::saas[]
Since we have created a folder, there is one change that does not need to be activated yet.
We will come back to activating changes below.
endif::[]


ifdef::onprem[]
[#linux]
==  Adding the first host

Now everything is in place and ready for the first host to be added the monitoring -- and what could be more obvious than to monitor the {CMK} server itself?
{CMK} won't be able to report its own total failure of course, but this is still useful since not only does it give you an overview of CPU and RAM usage, but also a number of metrics and checks concerning the {CMK} system itself.

The procedure for including a Linux host (as well as a Windows host, by the way) is in principle always as follows:

. Download the agent
. Install the agent
. Create the host
. Register the agent

Finally, once the host has been created in the xref:glossar#configuration_environment[configuration environment], the services can be configured and the changes activated for the xref:glossar#monitoring_environment[monitoring environment].


[#download_agent]
=== Downloading the agent

Since the {CMK} server is a Linux machine, you will need the {CMK} agent for Linux.

{cre-only}
For {RE}, you can find the agent's Linux packages via [.guihint]#Setup > Agents > Linux#:

.The download page of {RE} for the Linux packages
image::intro_agent_download_cre.png[alt="Download page with the RPM/DEB packages."]

{cee-only}
In the commercial editions, [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX# takes you to a page that also gives you access to the xref:glossar#agent_bakery[Agent Bakery], with which you can 'bake' individually configured agent packages.
From this page, the [.guihint]#Related > Linux, Solaris, AIX files# menu item will take you to the agent files page as in {RE}.

Download the package file: Choose the RPM file format for Red Hat Enterprise Linux (RHEL) based systems, and SLES or the DEB file format for Debian and Ubuntu.


[#install_agent]
=== Installing the agent

For the following installation example, we assume that the downloaded package file is located in the `/tmp/` directory.
If you have downloaded the file to another directory, replace the `/tmp/` directory definition with the actual directory in the following installation command.
Similarly, replace the name of the package file with the name of the file you downloaded.

The package file is only needed during the installation, and it can be deleted once the installation has been completed.

[TIP]
====
*Note:* In our example the agent will be installed on the {CMK} server, i.e. you do not need to copy the package file to another computer.
If the downloaded file is not on the host targeted for the installation of the agent, you must first copy the file to the target host, for example with the command line tool `scp`.
This is performed in the same way as for the installation of the {CMK} software and as described for a Linux installation, for example, for an xref:install_packages_debian#[installation under Debian and Ubuntu].
====

The installation is performed as `root` on the command line, for the RPM file with `rpm`, preferably with the `-U` option, which stands for _Update_ and which ensures that the installation goes through without errors even if an older version of the agent is already installed:

[{shell}]
----
{c-root} rpm -U /tmp/check-mk-agent-{current}-1.noarch.rpm
----

And for the DEB file with the `dpkg -i` command:

[{shell}]
----
{c-root} dpkg -i /tmp/check-mk-agent_{current}-1_all.deb
----

The agent installs the Agent Controller, which is used, among other things, to establish TLS encryption of the connection to the {CMK} server during xref:register[registration].
For the installation of the Agent Controller to work it requires a Linux distribution with the init system `systemd`, which has been standard in most Linux distributions since 2015.
For rare cases where the Agent Controller cannot be used, see the article xref:agent_linux_legacy#[Monitoring Linux in legacy mode].

This completes the installation of the agent.
You can leave the command line open.
It will be needed again when registering the host.


[#create_host]
=== Creating a host

After installing the agent on the host, you can add the host to {CMK}'s configuration environment  
-- namely into the prepared [.guihint]#Linux# folder.
Just a reminder:
In this example, the {CMK} server and the host to be monitored are of course the very same element.

In the {CMK} interface, open the same [.guihint]#Main# page where you have already created the three folders: [.guihint]#Setup > Hosts > Hosts#.
There, change to the [.guihint]#Linux# folder by clicking on that folder.

Click [.guihint]#Add host# to open the [.guihint]#Add host# page:

image::intro_host_allsettings_less.png[alt="Dialog with properties when creating a host."]

As with the creation of the three folders above, the xref:intro_gui#show_less_more[Show less mode] will still be active.
Therefore, {CMK} only shows the most important host attributes in the menu -- those that are necessary to create a host.
If you are interested, you can see the rest by clicking the ellipsis icon:button_showmore[alt="Icon for switching to Show more mode."] at each of the open submenus and by opening the two collapsed
submenus at the bottom of the page.
As mentioned at the beginning, {CMK} is a complex system that has an answer to every question.
That's why you can configure so much on a host (but not only there).

*Tip:* On many pages -- including this one -- you can also display help texts for the attributes.
To do this, select [.guihint]#Show inline help# from the [.guihint]#Help# menu.
The selected setting remains active on other pages until you switch off the help.
The following image shows the inline help for the [.guihint]#IPv4 address# parameter:

image::intro_ipv4_inlinehelp.png[alt="The host properties with inline help for the IPv4 address shown."]

But now for the inputs for creating the first host.
You only need to fill in one field, namely [.guihint]#Hostname# in the [.guihint]#Basic settings#.

This name has a rather free format, and can be assigned as required with up to 253 characters.
It may contain letters, digits, dots, dashes and underscores.
However, you should know that the host name is of central importance, because it serves as an internal ID (or key) for unambiguous identification of the host at all points in the monitoring.
Since it is so important in {CMK} and is so often used, you should think carefully about the naming of your hosts.
A host name can be changed at a later date, but this is a time-consuming process and should be avoided.

It is best if the host can be resolved under its name in the DNS.
If this is the case, you will be finished with this form.
If not, or if you do not want to use DNS, you can also enter the IP address manually in the [.guihint]#IPv4 address# field.

[TIP]
====
To ensure that {CMK} can always run stably and with good performance, it maintains its own cache for the resolution of host names.
For this reason, the failure of the DNS service does not lead to a failure of the monitoring.
Detailed information on host names, IP addresses and DNS can be found in xref:hosts_setup#dns[the article on host administration].
====

A host must exist in the configuration environment before it can be registered in the next step.
So, complete the creation of the host for now by clicking [.guihint]#Save & view folder#.


[#register]
=== Registering the host

Registering the host with the {CMK} server establishes the trust relationship between the two.
Communication between host and server is then only Transport Layer Security (TLS) encrypted.

Registration is done by calling the Agent Controller `cmk-agent-ctl` as `root` on the command line.
For the command you need the names of the {CMK} server (`myserver` in the example), the {CMK} site (`mysite`) and the host (`localhost`) as set up in {CMK} xref:create_host[in the preceding section].
Completing the options are the name of a {CMK} user with access to the xref:rest_api#[REST API].
You can use `cmkadmin` to do this:

[{shell}]
----
{c-root} cmk-agent-ctl register --hostname localhost --server myserver --site mysite --user cmkadmin
----

If the specified values were correct, you will be asked to confirm the identity of the {CMK} site to which you want to connect.
For clarity we have shortened the server certificate output to be confirmed here in this example:

[{shell}]
----
Attempting to register at myserver, port 8000. Server certificate details:

PEM-encoded certificate:
-----BEGIN CERTIFICATE-----
MIIC9zCCAd+gAwIBAgIUM7th5NaTjbkXVo1gMXVDC3XkX4QwDQYJKoZIhvcNAQEL
[...]
jbXj75+c48W2u4O0+KezRDIG/LdeVdk0Gq/kQQ8XmdqgObDU7mJKBArkuw==
-----END CERTIFICATE-----

Issued by:
	Site 'mysite' local CA
Issued to:
	mysite
Validity:
	From Mon, 25 Nov 2024 09:43:51 +0000
	To   Sat, 25 Nov 2034 09:43:51 +0000

Do you want to establish this connection? [Y/n]
> #Y#

Please enter password for 'cmkadmin'
> pass:[*****]
Registration complete.
----

Confirm with `Y` and then when requested enter the password for the `cmkadmin` user to complete the process.

If no error message is displayed, the encrypted connection will have been established.
All data will subsequently be transmitted in compressed form via this connection.

After this (for the time being last) excursion to the command line, we will continue, again in the {CMK} interface.


[#diagnosis]
=== Diagnostics

Murphy's law ("Anything that can go wrong, will go wrong.") unfortunately cannot be overridden by {CMK}.
Things can go wrong, especially when you are trying them for the first time.
Good tools for diagnosing errors are therefore important.

During the creation of a host, {CMK} not only offers to save the entries (host name and IP address) on the [.guihint]#Add host# page, but also to test the connection to the host.
Following the short interruption for registration, we will now catch up on this connection test.
On the [.guihint]#Linux# page, click the icon:icon_edit[alt="Icon to edit a list entry."] icon on the host you have just created to open the host properties.
In the action bar of the [.guihint]#Properties of host# page you will find, among other things, the [.guihint]#Save & run connection tests# button.
Click on this button.

The [.guihint]#Test connection to host# page will be displayed and {CMK} will try to reach the host in various ways.
For Linux and Windows hosts only the two upper boxes are interesting:

image::intro_host_diagnostics.png[alt="Result of the connection test to the host with ping and with agent output."]

The output in the [.guihint]#Agent# box assures you that {CMK} can successfully communicate with the agent you have previously installed and registered manually on the host.

In further boxes you can see how {CMK} tries to make contact via SNMP.
This predictably leads to SNMP errors in this example, but this is very useful for network devices, which we will discuss xref:snmp[below].

On this page you can try a different IP address in the [.guihint]#Host Properties# box if necessary, run the test again and even transfer the changed IP address directly to the host properties with [.guihint]#Save & go to host properties#.

Click this button (whether you have changed the IP address or not) and you will end up back on the [.guihint]#Properties of host# page.

By the way, you can find more diagnostic possibilities in the xref:agent_linux#test[Linux agent] article.


[#services]
=== Configuring services

Once the host itself has been included, the really interesting part begins -- the configuration of its services.
On the host properties page mentioned above, click [.guihint]#Save & run service discovery# and the [.guihint]#Services of host# page will appear.

On this page, you specify which services you want to monitor on the host.
In addition, the top box shows you whether problems have been detected on the host (= data source).
If the agent on the host is accessible and running correctly, {CMK} will automatically find a number of services and suggest these for monitoring (shown here in an abbreviated form):

image::intro_services_of_host.png[alt="List of services found on the host for adding to monitoring."]

For each of these services, there are the following options:

* [.guihint]#Undecided# : You have not yet decided whether to monitor this service.
* [.guihint]#Monitored# : The service is currently being monitored.
* [.guihint]#Disabled# : You have chosen not to monitor the service.
* [.guihint]#Vanished# : The service was being monitored, but it now no longer exists.

This page shows all services ordered by the above categories into tables.
As you have not yet configured a service, you will see only the [.guihint]#Undecided# table.

If you click [.guihint]#Monitor undecided services#, all of the services will be directly added to the monitoring and all of the [.guihint]#Undecided# services will become [.guihint]#Monitored# services.

Conversely, services can also disappear, for example, when a file system has been removed.
These services will then appear in the monitoring as {UNKNOWN} and on this page as [.guihint]#Vanished# and can be removed from the monitoring with [.guihint]#Remove vanished services#.

For now, it's easiest to click the [.guihint]#Accept all# button, which does everything at once
-- adding missing services, removing vanished ones -- and additionally apply any changes found to host and service xref:glossar#label[labels].

You can always visit this page later to customize the configuration of the services.
Sometimes new services are created by changes to a host, for example, when you include a Logical Unit Number (LUN) as a file system or configure a new Oracle database instance.
These services then reappear as [.guihint]#Undecided#, at which point you can include them in the monitoring individually or all at once.


[#activate_changes]
=== Activating changes

{CMK} initially saves all changes you make only in a temporary 'configuration environment' that does not yet influence the currently-operating monitoring.
Only by 'activating the pending changes' will they be transferred to the monitoring.
You can read more about the background to this in the xref:wato#activate_changes[article on configuring {CMK}].

As we mentioned above, on the top right of each page you will find information on how many changes have so far accumulated that have not yet been activated.
Click on the link with the number of changes, which will take you to the [.guihint]#Activate pending changes# page, which lists, among other things, the changes that have not yet been activated at [.guihint]#Pending changes#:

image::intro_activate_changes.png[alt="List of pending changes for activation."]

Now click the [.guihint]#Activate on selected sites# button to apply the changes.

Shortly after, you will be able to see the result in the sidebar in [.guihint]#Overview#, which now shows the number of hosts (1) and the number of services you previously selected.
In the standard dashboard, which you can reach by clicking on the {CMK} logo in the top left of the navigation bar, you will also now be able to see that the system has become filled with life.

You have now successfully transferred the first host and its services into the monitoring -- Congratulations!

More detailed information on the Linux agent can be found in the xref:agent_linux#[article on Linux monitoring].
You can find information on how to revert pending changes in xref:wato#revert_changes[Configuration of {CMK}].
endif::[]


ifdef::saas[]
[#first]
== Adding the first host

Now it is time to add the first host into the monitoring.
One option is to monitor the host from which you access the {CE} web interface.

As promised in the first xref:intro_setup#login_first[chapter] of this beginner's guide, for this we will return to the xref:intro_setup#onboarding_guide[onboarding guide]:
Click the green [.guihint]#Getting started# button on the right-hand side of the user interface and then the entry [.guihint]#Add hosts > Command Line Download & Install#.
The [.guihint]#Welcome to {CE}# topic will again be displayed:

image::intro_og_welcome_saas.png[alt=“The ‘Welcome to {CE}’ topic of the onboarding guide.”]

This topic shows you how to add your Linux or Windows computer to the monitoring in only four steps.
You have the choice of installing the {CMK} agent package for Debian and Ubuntu (`DEB`), for Red Hat Enterprise Linux-based systems and SLES (`RPM`), as well as for Windows.

Select the package that matches your computer's operating system and follow the instructions in the onboarding guide.
You can copy the two commands for downloading and installing to the clipboard using the two green buttons to the right of the commands.

After executing the command to install the {CMK} agent, after a few minutes you will find the new host in the xref:glossar#monitoring_environment[monitoring environment] via [.guihint]#Monitor > Overview > All hosts:#

image::intro_monitor_first_host_saas.png[alt=“The 'All hosts' table view with the automatically created host.”]

In the xref:glossar#configuration_environment[configuration environment], the host has now appeared in the prepared `preconfigured_agent` folder:

image::intro_setup_first_host_saas.png[alt=“The 'preconfigured_agent' folder with the automatically created host.”]

You have now successfully added the first host and its services to the monitoring -- Congratulations!

The reason why it all works so easily is that the packages with the {CMK} agent are preconfigured in {CE} for all supported operating systems -- for the automatic registration of the agent and the creation of the host.
You can find these packages in the {CMK} interface in [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX# in the line [.guihint]#Agent controller auto-registration#.

The packages are configured in such a way that the host is always stored in your site's prepared `preconfigured_agent` folder in {CE}.
If you would instead prefer to store your hosts in your own folder structure, you have several options:
You can move already created hosts to other folders, create your own packages for the xref:hosts_autoregister#[auto-registration of hosts] using the xref:glossar#agent_bakery[Agent Bakery], or perform each of the individual steps manually.

[#activate_changes]
Especially for the manual variant, it is an advantage to know the individual steps in the semi-automatic process with which a host is added to the monitoring.
The basic procedure for Linux and Windows hosts is always as follows:

. Downloading the agent +
This is done in steps 1 and 2 of the onboarding guide's [.guihint]#Welcome# topic.
As an alternative to the commands shown, which use the {CMK} xref:rest_api#[REST API], an installation package can also be downloaded via the {CMK} interface.
Under [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX# you will also find the non-preconfigured, so-called _Vanilla_ packages.

. Installing the agent +
The installation takes place in the third step of the onboarding guide's [.guihint]#Welcome# topic.

. Registering the host +
This is the first of the remaining steps, all of which are performed during auto-registration using the preconfigured agent package.
Registering the host with the {CMK} server establishes the trust relationship between the two, so
that all host and server communication will then be encrypted using Transport Layer Security (TLS).
Without auto-registration, the registration must be carried out manually via the command line, as described in the articles on xref:agent_linux#registration[Linux] and xref:agent_windows#registration[Windows].

. Creating the host +
When requesting registration, the agent will send the data required to create the host to the {CMK} server, which then allows the host to be created automatically during auto-registration.
The host creation would otherwise have to be carried out xref:hosts_setup#create_hosts[manually] using the [.guihint]#Setup# menu.

. Performing a service discovery +
The definition of the services that are monitored on the host, i.e. xref:glossar#service_discovery[service discovery,] also runs automatically in the background during auto-registration.

. Activating the changes +
Finally, all pending changes in the configuration environment will be activated during auto-registration so that the new host can appear in the monitoring.
The manual method for xref:glossar#activate_changes[activating the changes] has its own section in the chapter on xref:intro_finetune#activate_changes[fine-tuning the monitoring].

With so many individual steps, it can sometimes happen that something does not work successfully.
Murphy's law ("Anything that can go wrong, will go wrong.") unfortunately cannot be overridden by {CMK}.
Things can go wrong, especially when you try it for the first time.
This is why it is important to have good troubleshooting options.

It is best to start troubleshooting in the reverse order to the execution.
If the last executed auto-registration failed, you will find initial troubleshooting instructions in the xref:hosts_autoregister#test[article on auto-registration]. 

If, on the other hand, everything went well, you can add further Linux and Windows hosts in the same way.
If the downloaded file with the installation package is not located on the target host for the installation of the agent, you must first copy the file to the target host, for example using the command line tool `scp`.
endif::[]


ifdef::onprem[]
[#windows]
== Monitoring Windows

Just as for Linux, {CMK} also has its own agent for Windows.
This is packaged as an MSI package.
You will find it just one menu entry away from the xref:download_agent[Linux agent].
Once you have downloaded the MSI package and copied it to your Windows computer, you can install it by double-clicking, as is usual with Windows.

Once the agent has been installed, you can create the host in {CMK}, register it by command, and add it to the monitoring.
Follow the same procedure as described above for the Linux host, but create the host in the designated `Windows` folder.
Since Windows is structured differently from Linux, the agent will naturally find other services.
For a detailed introduction to this subject, see the xref:agent_windows#[article on Windows monitoring].


[#snmp]
== Monitoring with SNMP

Professional quality switches, routers, printers and many other devices and appliances already have a built-in interface for monitoring from the manufacturer
-- the Simple Network Management Protocol (SNMP).
Such devices can be monitored very easily with {CMK} -- and you don't even need to install an agent.

The basic procedure is always the same:

. In the device's management interface, enable SNMP for *read* access from the IP address of the {CMK} server.
. Assign a *Community* when doing so.
This is nothing more than a password for access.
Since this is usually transmitted in plain text in the network, it only makes limited sense to choose a very complicated password.
Most users simply use the same community for all devices within a company.
This also greatly simplifies the configuration in {CMK}.
. In {CMK}, create the host for the SNMP device as xref:create_host[described above], this time in the designated `Network` folder.
. In the host properties, in the [.guihint]#Monitoring agents# box, check [.guihint]#{CMK} agent / API integrations# and select [.guihint]#No API integrations, no {CMK} agent#.
. In the same [.guihint]#Monitoring agents# box, check [.guihint]#SNMP# and select [.guihint]#SNMP v2 or v3#.
. If the Community is not `public`, under [.guihint]#Monitoring agents# again activate the [.guihint]#SNMP credentials# entry, select [.guihint]#SNMP community (SNMP Versions 1 and 2c)# and enter the Community in the input field below.

For the above last three points (4, 5, 6), the result should look like in the following screenshot:

image::intro_snmp_configuration.png[alt="Dialog with properties when creating a host via SNMP: the 'Monitoring agents'."]

[TIP]
====
If you have created all SNMP devices in a separate folder, simply carry out the configuration of the [.guihint]#Monitoring agents# for the folder.
This will automatically apply these settings to all the hosts in this folder.
====

The rest runs as usual.
If you want, you can take a look at the [.guihint]#Test connection to host# page with the [.guihint]#Save & go to connection tests# button.
There you can immediately see whether access via SNMP works, here for a switch, for example:

image::intro_snmp_diagnostics.png[alt="Result of the connection test to the host via SNMP."]

On the [.guihint]#Properties of host# page, click on [.guihint]#Save & run service discovery# to display the list of all services.
This naturally looks completely different from Linux or Windows.
On all devices, by default {CMK} monitors all ports that are currently in use.
You can customize this later as you wish.
In addition, one service that is always {OK} shows you the general information about the device, and another service shows you the uptime.

A detailed description can be found in the xref:snmp#[article on monitoring via SNMP].
endif::[]


[#cloud]
== Clouds, containers and virtual machines

You can also monitor cloud services, containers and virtual machines (VM) with {CMK}, even if you do not have access to the actual servers.
{CMK} uses the application programming interfaces (API) provided by the manufacturers for this purpose.
These interfaces always use HTTP or HTTPS for access.

The basic principle is always the following:

. Set up an account for {CMK} in the manufacturer's management interface.
. Create a host in {CMK} to access the API.
. Set up a configuration for this host to access the API.
. For the monitored objects such as VMs, EC2 instances, containers, etc., create additional hosts in {CMK} or automate their creation.

ifdef::onprem[]
You can find in the User Guide step-by-step instructions for setting up monitoring of xref:monitoring_aws#[Amazon Web Services (AWS)], xref:monitoring_azure#[Microsoft Azure], xref:monitoring_gcp#[Google Cloud Platform (GCP)], xref:monitoring_docker#[Docker], xref:monitoring_kubernetes#[Kubernetes] and xref:monitoring_vmware#[VMware ESXi].
endif::[]

ifdef::saas[]
In the onboarding guide, you will find topics on setting up the monitoring of Amazon Web Services (AWS), Microsoft Azure and Google Cloud Platform (GCP).
At the end of each topic, you will find links to the corresponding articles in this User Guide.
endif::[]

xref:intro_tools#[Continue with the monitoring tools]
