// -*- coding: utf-8 -*-
// IGNORE + % BuiltInRole
// SKIPCOMMITS 2025-07-22
include::global_attr.adoc[]
= Monitoring Microsoft Azure
:revdate: 2025-07-08
:title: Monitoring Microsoft Azure
:description: The integration of Microsoft Azure into {CMK} enables seamless monitoring of cloud and on-premises in one interface and is described in detail here.

{related-start}
xref:intro_setup_monitor#[Setting up monitoring]
link:https://checkmk.com/de/integrations[Catalog of check plug-ins^]
xref:dcd#[Dynamic host management]
{related-end}


== Introduction

ifdef::saas[]
[TIP]
====
The xref:intro_setup#onboarding_guide[onboarding guide] of {CE} (SaaS) contains a quick how-to for setting up Microsoft Azure monitoring.
We recommend to try that first and consider this article primarily as a reference.
====
endif::[]

[{image-left}]
image::azure_logo.png[width=140]

{CMK} includes a extensive module for link:https://checkmk.com/guides/azure-cloud-monitoring[monitoring Microsoft Azure^], consisting of a connector to Azure and a comprehensive collection of check plug-ins that retrieve and evaluate various metrics and statuses for you.

In addition to general information about the link:https://checkmk.com/integrations/azure_usagedetails[costs^] that are incurred by your Azure environment and the current link:https://checkmk.com/integrations/azure_status[status^] of the Azure services in your region, you can monitor the following Azure products with
ifdef::onprem[]
all editions of {CMK}:
endif::[]
ifdef::saas[]
{CE} (SaaS):
endif::[]

* link:https://checkmk.com/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=azure_vm[Virtual Machines^]
* link:https://checkmk.com/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=azure_storageaccounts[Storage Accounts^]
* link:https://checkmk.com/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=azure_mysql[MySQL Database^]
* link:https://checkmk.com/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=azure_postgresql[PostgreSQL Database^]
* link:https://checkmk.com/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=azure_databases[SQL Database^]
* link:https://checkmk.com/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=azure_load_balancer[Load Balancer^]
* link:https://checkmk.com/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=azure_virtual_network[Virtual Network Gateways^]
* link:https://checkmk.com/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=azure_traffic_manager[Traffic Manager^]
* link:https://checkmk.com/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=azure_ad[Active Directory (AD) Connect^]
* link:https://checkmk.com/integrations/azure_sites[Webserver^]

ifdef::onprem[]
With {CCE} and {CME} you can also include the following products in your monitoring system:
endif::[]

* link:https://checkmk.com/integrations/azure_app_gateway[Application Gateway^]
* link:https://checkmk.com/integrations/azure_vault_backup_containers[Recovery Services vaults^]

A complete listing of all available check plug-ins for monitoring Microsoft Azure can be found in our link:https://checkmk.com/integrations?tags=azure[Catalog of check plug-ins^]
and we describe how to include your AKS (Azure Kubernetes Service) clusters in {CMK} in the article xref:monitoring_kubernetes#[Monitoring Kubernetes].


[#quick_setup]
== Setting up monitoring via Quick Setup (optional)

The quickest way to set up an easy-to-read monitoring for Azure environments is with our _Quick Setup_.
To do this, open [.guihint]#Setup > Quick Setup > Microsoft Azure# and click on [.guihint]#Add configuration#.
The Quick Setup will then guide you step by step to your goal.

The biggest advantage of Quick Setup is that any errors will be displayed immediately during the configuration process.
If the worst comes to the worst, you will then receive a clear and dedicated indication of what you need to correct before you can move on to the next step.

Detailed instructions on how to make the necessary preparations in your Azure environment can be found in the chapter xref:preparation[Preparing Azure for {CMK}].

If you want or need to make changes to the xref:glossar#quick_setup_configuration[configuration] created by the Quick Setup at a later time, you can go back to [.guihint]#Setup > Quick Setup#.
There, click on the icon:icon_edit[] icon and then select the component you want to edit.

[TIP]
====
The other chapters of this article are only intended as a reference for users of Quick Setup.
However, if your Azure environment is rather complex, it is recommended that you continue to carry out the setup according to the following steps.
====


[#preparation]
== Preparing Azure for {CMK}

To monitor Azure with {CMK}, you will need some data from your Azure environment.
As a minimum, the directory ID (also known as the tenant ID) and an application ID (also known as the client ID) will be required.
In most cases, you will also need to enter your subscription ID.
An exception to this is when you *only* want to monitor your Azure AD, in which case you won't *need* to enter your subscription ID.

In the following chapters, we will show you where you can find this data and what requirements you need to fulfill.

[TIP]
====
At this point, it should be noted that the web portals of hyperscalers and cloud service providers are subject to ongoing change.
We endeavor to keep the following information up to date and at the same time general enough to ensure that the respective locations and functions in the portal can still be found even if a screenshot no longer corresponds 100 % to what you currently see.
====


[#app_registration]
=== Creating an app

First register an app in Azure.
This app will be used by {CMK} to read the desired data from Azure.
You will find the option for this in the link:https://portal.azure.com[Azure portal^] under [.guihint]#(All services > Identity > Identity management > ) App registrations#.
Alternatively, here you can use the portal search and enter `App registrations`.
Once on the page, you must now click on [.guihint]#New registration#.

Assign an identifying name of your choice.
In the example, we use `my-checkmk-app`.
This name is only for information purposes, however.
Instead, the reference to the app is made via the application ID, which you will see in the next step.
You do not need to change anything in the [.guihint]#Supported account types# section and the [.guihint]#Redirect URI# field must remain empty.
Confirm your entries by clicking on [.guihint]#Register#.

[{image-border}]
image::azure_register_1.png[]

Once you have created the app, you should see an overview of this new app.
If this is not the case, you will find the new app in the list of all [.guihint]#App registrations# described above in the [.guihint]#All applications# tab.
In the details for the app, you will now find both the [.guihint]#Application (client) ID# and the [.guihint]#Directory (tenant) ID#, which you must enter later in {CMK}.

[{image-border}]
image::azure_register_2.png[]


[#client_secret]
=== Creating a client secret for the app

Next you will also need a _client secret_ with which {CMK} can log in to the Azure API.
To generate such a secret, click on [.guihint]#Certificates & secrets# in the app overview, then on the [.guihint]#Client secrets# tab and finally on [.guihint]#New client secret#.

[{image-border}]
image::azure_register_5.png[]

This opens the [.guihint]#Add a client secret# dialog.
Assign any name and select for how long the secret should be valid.
If you later activate the [.guihint]#App Registrations# option in the xref:azure_agent[rule for the special agent], you will receive a practical service that reminds you when this validity period is coming to an end.
Confirm the dialog by clicking on [.guihint]#Add#.

image::azure_register_6.png[width=76%]

It is important now that you copy the [.guihint]#Value# content in this new secret immediately, since after a certain time, only the first three characters of such secrets will be displayed in the Azure portal.

[{image-border}]
image::monitoring_azure_copy_secret.png[]


=== Optional: adding further API permissions

You must grant the app additional API permissions if you want to monitor the following services with {CMK}:

* Users in the Active Directory
* AD Connect Sync
* App Registrations

You start assigning the permissions in the overview of your new app, which you should still have open from the previous section.

Click on [.guihint]#API permissions# and then on [.guihint]#Add a permission.#
In the dialog that opens, you must find and click on [.guihint]#Microsoft Graph#.
Then select [.guihint]#Application permissions# and enter `Directory.Read.All` in the search field.
Activate the corresponding checkbox and click on [.guihint]#Add permissions#.
Additional consent from an administrator of your Azure environment is required for this permission ([.guihint]#Admin consent required#).
If you do not see the [.guihint]#Grant admin consent# button above the list of granted permissions, you must contact the responsible administrator.


[#assign_role]
=== Assigning a role to the app

To enable {CMK} to access the monitoring data via the new app, you must assign a role to the app at the subscription level.
To do this, select [.guihint]#All services# in the main navigation on the left-hand side and then under [.guihint]#General# the [.guihint]#Subscriptions# entry.
Again, you can use the search function in the portal if you cannot find the relevant button.

If you have multiple subscriptions, you will now need to click on the name of the subscription you wish to monitor.
You will then be taken to an overview page for your subscription.
Make a note of the [.guihint]#Subscription ID# here.
You will need to enter this later in the special agent rule.

Then click on [.guihint]#Access Control (IAM)# and then on [.guihint]#Add# and then on [.guihint]#Add role assignment:#

[{image-border}]
image::azure_access_control.png[]

Now select the role named [.guihint]#Reader# and with the [.guihint]#Type# [.guihint]#BuiltInRole#.
As there are in total over 100 roles with the word 'Reader' in their name, it is important to be careful here.
Then click on [.guihint]#Next# to go to the [.guihint]#Members# tab.

Click here on [.guihint]#+ Select members.#

[{image-border}]
image::azure_role_assignment.png[]

In the [.guihint]#Select members# dialog, enter the name of the app as you created it earlier into the search field, select this app and click [.guihint]#Select.#
After two more clicks on [.guihint]#Review + assign#, the setup in the Azure portal will have been completed.


[#setup]
== Setting up basic monitoring in {CMK}

Before you start with the configuration in {CMK}, make sure that you have the following four Azure-specific information ready, which you obtained in the previous chapter:

. Your tenant ID (also known as "Directory ID")
. The application ID (client ID) of the app
. The client secret for this app
. Your subscription ID


[#create_host]
=== Creating a host for Azure

Even though you are not dealing with a _physical_ host in Azure, create a host for your Azure directory in {CMK}.
The host name you can define at will.
*Important*: Because Azure is a service and therefore does not have an IP address or DNS name (the special agent does the access itself), you must set the [.guihint]#IP address family# to [.guihint]#No IP#.

image::azure_wato_no_ip.png[]

It is best to save with [.guihint]#Save & view folder# at this point, because of course the service discovery cannot work yet.


[#azure_agent]
=== Configuring the Azure agent

Since Azure cannot be queried through the regular {CMK} agent, you now set up the Azure xref:glossar#special_agent[special agent].
In this situation {CMK} does not contact the target host over TCP port 6556 as usual,
instead it calls a utility that communicates with the target system via Azure's application-specific API.

To do this, under [.guihint]#Setup > Agents > VM, cloud, container > Microsoft Azure# create a rule whose xref:wato_rules#conditions[conditions] apply exclusively to the Azure host that has just been created.
There you will find the input fields for the IDs and the secret:

image::azure_agent_rule.png[]

Here you can also select the resource groups or resources that you want to monitor.
If you *have not* checked [.guihint]#explicitly specified groups#, all resource groups are automatically monitored.


=== Testing

If you now perform a service discovery on the Azure host, at least the service called [.guihint]#Azure Agent Info# should be detected:

image::azure_services_ok.png[]

If access to the API does not work (because of a wrong ID, bad permissions or because of a wrong client secret as in the example below), a corresponding error message will appear in the status text of [.guihint]#Azure Agent Info#:

image::azure_services_fail.png[]


[#resource_groups]
=== Making resource groups available as hosts

For clarity, Azure monitoring in {CMK} has been designed so that each Azure resource group is represented by a logical (so to speak) host in {CMK}.
This is done with the help of the xref:glossar#piggyback[piggyback] mechanism.
This piggyback will take data from the Azure host using special agents, and within {CMK} redirect it to these resource group hosts.

The resource group hosts do not automatically appear in {CMK}.
Place these hosts either manually or optionally with the xref:dcd#[dynamic host management].
Important -- when doing so the names of the hosts must exactly match the names of the resource groups -- and this is also case-sensitive!
If you are uncertain about the exact spelling of the groups' names, you can do this directly from the [.guihint]#Azure Agent Info# service on the Azure host.

ifdef::onprem[]
[TIP]
====
With the command `cmk-piggyback list orphans` you can find all xref:piggyback#orphaned_piggyback_data[orphaned piggybacked hosts] for which there is data but which have not yet been created as hosts in {CMK}.
====
endif::[]

Configure the resource group hosts without an IP address (analogous to the Azure host), and select [.guihint]#No API integrations, no Checkmk agent# as the agent and [.guihint]#Always use and expect piggyback data# as piggyback.

image::wato_host_no_agent.png[]

If you now perform a service discovery on one of these resource group hosts, you will find there are additional services that specifically relate to this resource group:

image::azure_services_piggy.png[]

[TIP]
====
If you want to freely-choose the names of the resource group hosts, with the [.guihint]#Setup > Agents > Access to Agents > Host name translation for piggybacked hosts# rule you can define a conversion of resource groups to hosts.
====


[#advanced_configuration]
== Advanced configuration

[#azure_vms]
=== Virtual machines (VMs)

When you use Azure to monitor virtual machines which simultaneously serve as your normal hosts in {CMK} -- you can assign the Azure services associated with those VMs directly to the VM hosts in {CMK} instead of to the resource group hosts.

To do this, in the Azure rule, under the [.guihint]#Map data relating to VMs# option, select the [.guihint]#Map data to the VM itself# setting.
For this to work the VM's {CMK} host in monitoring must have exactly the same name as the corresponding VM in Azure.


[#monitor_cost]
=== Monitoring costs

The [.guihint]#Microsoft Azure# rule is preset so that {CMK} also monitors all costs incurred in your Azure environment.
Specifically, the services display the costs incurred on the previous day.
In this way you can quickly determine if there have been any changes.

Several services are created to get a better overview of exactly where costs have been incurred and to be able to set specific thresholds.
The total costs at the level of your Azure directory are displayed for the xref:create_host[Azure host] that you created first.
In addition, services are created for each host that represents a xref:resource_groups[resource group].
At both levels, {CMK} generates one service for the costs per so-called 'resource provider' (e.g. `microsoft.compute` and `microsoft.network`).
The [.guihint]#Costs Summary# service then shows the total sum for the resource group or for the entire Azure directory.

You can use the [.guihint]#Azure Usage Details (Costs)# rule to define individual thresholds for all of these services.

If you do not wish to monitor costs, you must deactivate the [.guihint]#Usage Details# option in the [.guihint]#Microsoft Azure# rule.


[#import_tags]
=== Importing tags from Azure

By default, {CMK} imports all tags from your Azure environment and converts them into host and service labels.
The assignment runs as expected.
Tags that are attached to a resource group are assigned in {CMK} to the host that represents this resource group and the tags of a VM become host labels for this VM.

All labels created in this way are given the prefix `cmk/azure/`.
In addition, characters and values that would lead to invalid labels in {CMK} are replaced.
Empty values (i.e. the [.guihint]#Value# field in Azure) are replaced with `true` and colons within the name or value are replaced with an underscore.

[TIP]
====
For reasons of compatibility, the tags from Azure are also imported without the prefix `cmk/azure/` and without the character substitutions.
However, this can result in ambiguous and unusable labels, which is why we strongly advise against using them.
From {CMK} {v24} these additional labels will no longer be generated and after an update to {CMK} {v24} these labels will disappear with the next service discovery.
====

The [.guihint]#Filter tags imported as host/service labels# option allows you to control the import of tags from Azure.
If you activate the checkbox here, you can completely prevent the import with [.guihint]#Do not import tags#.
If you select [.guihint]#Filter valid tags by key pattern# here, you can enter a regular expression in the following field.
{CMK} will then only generate labels from tags that match this regular expression.


[#rate_limit]
=== Limit for API queries

Currently the API queries that {CMK} needs for monitoring Azure (as opposed to xref:monitoring_aws#[AWS]) are free -- however there is a limit to the number of queries permitted per time period (the "throttling limit").
As of today, the API queries that Checkmk requires for monitoring are free of charge with Azure (in contrast to AWS). However, there is a limit on the number of queries per time ('throttling limits').

Due to the structure of the API, {CMK} requires at least one or more queries per requested resource.
Therefore the total number of queries scales linearly with the number of resources being monitored.
If the query limit is reached or exceeded, the query fails with a HTTP code 429 (too many requests), and the [.guihint]#Check_MK# service for the Azure host is flagged as {CRIT}.

This limit results from Azure's so-called 'token bucket' algorithm.
It all starts with you having a 'credit' of 250 remaining queries
-- each query consumes one of these.
Simultaneously 25 queries per second are added to the credit.
The output of the [.guihint]#Azure Agent Info# service lets you see how many queries are currently left.

Specifically, this means that:

* If your query rate is sufficiently low, the available queries are always just under 250.
* If your rate is too high, the credit will slowly go down to 0 and then errors will occur sporadically in the query.

In this case you can reduce the polling rate by querying fewer polling resource groups or resources, or by reducing the check interval for the [.guihint]#Check_MK# active check on the Azure host.
This is possible with the [.guihint]#Normal check interval for service checks# rule.

So that you can react in time, the [.guihint]#Azure Agent Info# service monitors the number of remaining queries.
By default, no threshold are set.
You can set these yourself in the rule [.guihint]#Azure Agent Info#.

The article link:https://learn.microsoft.com/de-de/azure/azure-resource-manager/management/request-limits-and-throttling[Understand how Azure Resource Manager throttles requests] on Microsoft Learn explains this in more detail.


[#dashboards]
== Dashboards

ifdef::onprem[]
{CCE-only}
For a convenient start into Azure monitoring, {CMK} ships from {CE} onwards
endif::[]
ifdef::saas[]
For a convenient start into Azure monitoring, {CE} (SaaS) ships
endif::[]
the two built-in xref:glossar#dashboard[dashboards], [.guihint]#Azure VM instances# and [.guihint]#Azure storage accounts#.
Both of these can be found as menu items in the monitoring under [.guihint]#Monitor > Cloud#.

To provide a clearer impression, following are two examples of how these dashboards are structured.
First, the VM instances dashboard, in which you can compare the current state on the left side and the chronological history of the most important metrics on the right side:

image::monitoring_azure_dashboard_vm.png[alt="Dashboard for the Azure VM instances."]

The dashboard for the storage accounts is structured very similarly.
On the left-hand side, you will find current data for the respective buckets.
On the right, the most important metrics are again displayed chronologically:

image::monitoring_azure_dashboard_storage.png[alt="Dashboard for the Azure storage accounts."]