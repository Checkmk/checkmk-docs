// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= Monitoring Google Cloud Platform (GCP)
:revdate: 2025-02-11
:title: Monitoring Google Cloud Platform (GCP)
:description: How to monitor and seamlessly integrate Google Cloud Run, Cloud SQL, Cloud Functions, GCE, GCS and Memorystore/Redis or their costs into {CMK} without an agent is described here.

{related-start}
link:https://checkmk.com/integrations[Catalog of Check Plug-ins^]
xref:dcd#[Dynamic host management]
{related-end}


== Introduction

ifdef::saas[]
[TIP]
====
The xref:intro_setup#onboarding_guide[onboarding guide] of {CE} (SaaS) contains a quick how-to for setting up GCP monitoring.
We recommend to try that first and consider this article primarily as a reference.
====
endif::[]

[{image-left}]
image::logo_google_cloud.png[width=120]

{CMK} includes a comprehensive module for monitoring the Google Cloud Platform (GCP), consisting of a connector to GCP and an impressive collection of check plug-ins that retrieve and evaluate various metrics and statuses for you.

In addition to general information about the link:https://checkmk.com/integrations/gcp_cost[costs^] that are incurred by your Google Cloud 
and the current link:https://checkmk.com/integrations/gcp_status[status^] of Google services in your region, 
you can monitor the following Google Cloud products with {CMK}:

* link:https://checkmk.com/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=gcp_gce[Compute Engine (GCE)^]
* link:https://checkmk.com/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=gcp_gcs[Cloud Storage (GCS)^]
* link:https://checkmk.com/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=gcp_filestore[Filestore^]
* link:https://checkmk.com/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=gcp_sql[Cloud SQL^]
* link:https://checkmk.com/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=gcp_http_lb[Cloud Load Balancing^]

ifdef::onprem[]
With {CCE} and {CME} you can also include the following products in your monitoring system:
endif::[]

* link:https://checkmk.com/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=gcp_function[Cloud Functions^]
* link:https://checkmk.com/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=gcp_run[Cloud Run^]
* link:https://checkmk.com/integrations?distributions%5B%5D=check_mk&distributions%5B%5D=check_mk_cloud&search=gcp_redis[Memorystore for Redis^]

A complete listing of all available check plug-ins for monitoring GCP can be found in our link:https://checkmk.com/integrations?tags=gcp[Catalog of check plug-ins^] and we describe how to include your GKE (Google Kubernetes Engine) clusters in {CMK} in the article xref:monitoring_kubernetes#[Monitoring Kubernetes].


ifdef::onprem[]
[#quick_setup]
== Setting up monitoring via quick setup (optional)

The quickest way to set up the monitoring of individual GCP projects is with our _quick setup_.
To do this, open [.guihint]#Setup > Quick Setup > Google Cloud Platform (GCP)# and click on [.guihint]#Add configuration#.
The quick setup will then guide you step by step to your goal.

Detailed instructions on how to obtain the necessary information about your project in GCP can be found in the chapter xref:preparation_gcp[Preparing GCP for {CMK}].

The biggest advantage of quick setup is that any errors will be displayed immediately during the configuration process.
If the worst comes to the worst, you will then receive a clear and dedicated indication of what you need to correct before you can move on to the next step.

If you want or need to make changes to the xref:glossar#quick_setup_configuration[configuration] created by the quick setup at a later time, you can go back to [.guihint]#Setup > Quick Setup#.
There, click on the icon:icon_edit[] icon and then select the component you want to edit.

[TIP]
====
The other chapters of this article are only intended as a reference for users of quick setup.
However, if your GCP environment is rather complex, it is recommended that you continue to carry out the setup according to the following steps.
====
endif::[]


[#implementation_gcp]
== Concrete implementation of GCP monitoring

=== Hosts and services

In {CMK}, all objects to be monitored are arranged in a hierarchical structure of hosts and services.
However the concept of hosts does not exist in this form in cloud-based services.
To preserve the simplicity and consistency of {CMK}, we map GCP objects to our host/service schema.
Each of your projects in the Google Cloud is assigned to its own host in {CMK}.
All of the cloud products that you want to monitor in this project will then be split across multiple services on this dedicated host.

A small project in which only one Compute Engine VM is running can then look like this in the {CMK} monitoring:

image::monitoring_gcp_example_host.png[]


=== Access to GCP

GCP provides an HTTP-based API through which monitoring data can also be retrieved.
{CMK} accesses this API via the `agent_gcp` xref:glossar#special_agent[special agent].
This takes the place of the {CMK} agent, but -- unlike the latter -- is executed locally on the {CMK} server.


[#preparation_gcp]
== Preparing GCP for {CMK} 

[#acquire_project_id]
=== Acquiring a project ID

Log in to the link:https://console.cloud.google.com[Google Cloud Console^].
Make sure that the correct project is selected in the title bar or select the project to be monitored here.

Then open the project's dashboard.
Here you should find -- if the dashboard still corresponds to the standard -- a card with the [.guihint]#Project ID#.
Copy or write this information down.

image::monitoring_gcp_project_info.png[width=56%]

If the card with the project information no longer appears in your dashboard, you can also find the necessary ID via the [.guihint]#Project settings#:

image::monitoring_gcp_project_settings.png[width=30%]


=== Creating a user

Next, open the user administration under [.guihint]#IAM & Admin#.
In the overview on the left-hand side, you must now select [.guihint]#Service Accounts# and then at the top click on [.guihint]#Create Service Account#.
Here choose a name for the service account.
We recommend giving this account a name that makes it immediately clear what it is for, e.g. `checkmk-monitoring`.
In addition to a descriptive name, you can optionally enter a description -- a 
_service account_ description.
After clicking on [.guihint]#Create and continue# you will need to assign the two roles, _Monitoring Viewer_ and _Cloud Asset Viewer_ to this service account.
To do this, click in the [.guihint]#Select a role# field and enter the role's name.

*Note:* If you enter _Monitoring Viewer_ in the field, you will be shown a whole series of roles with similar names.
Be careful to actually select _Monitoring Viewer_.

Once you have selected the roles, you can skip the next optional step and click directly on [.guihint]#Done#.


[#create_key]
=== Creating a key

So that you can actually access the monitoring and asset data in your Google Cloud via this new service account, you will still need to create a key.
You will store this key later in the corresponding rule in {CMK} or in the [.guihint]#Password store#.

In the [.guihint]#Service accounts for project My Project# overview, you can click on the three dots in the row by your new service account and select [.guihint]#Manage keys#.
Next, click on [.guihint]#Add key# and then on [.guihint]#Create new key#.
Be sure to select `JSON` as the format and click [.guihint]#Create#.
This click on [.guihint]#Create# -- easily overlooked -- downloads a file in JSON format.
Keep this file in a safe place for the time being, as you will *not* be able to download it again.
We do recommend, however, that you also delete this file after storing its contents in {CMK} (see xref:agent_rule[Creating a rule for GCP agents]).
If necessary, a new key should be created and the old one discarded altogether.


[#enable_apis]
=== Activating APIs in the GCP project

On your GCP project's overview page you will also find the [.guihint]#APIs & Services# menu item.
In this overview, check whether the `Cloud Asset API` appears in the list of [.guihint]#Enabled APIs & services#.
If this is not the case, activate this API via the [.guihint]#Enable APIs and services# button.
Following an activation, it will take a few minutes until the API is actually accessible.


=== Monitoring billing information

In the Google Cloud Platform, billing information is stored separately from the resources.
As a rule, separate projects are created for cost analysis in GCP, in which the billing information for other projects is also collected.
In order to be able to monitor this information with {CMK}, it is essential that this data is exported to BigQuery within GCP.
Only data that is available in BigQuery tables can be accessed remotely -- and thus by {CMK}.
How to set up such an export within GCP is explained in detail in the document link:https://cloud.google.com/billing/docs/how-to/export-data-bigquery?hl=en[Export Cloud Billing data to BigQuery^] in the GCP help pages.

If you have set up BigQuery or are already using it, you will find a list of its included tables in the  accounting project's [.guihint]#SQL workspace#.
Open the accounting project's table and click on the [.guihint]#Details# tab.
Under [.guihint]#Table ID#, you will find the information you will need to enter when creating the rule in {CMK} at [.guihint]#Costs > BigQuery table ID#.

The service for monitoring project costs is designed as an overview.
Only the monthly costs of the individual projects are displayed and monitored.
You can define threshold values for these monthly costs with the [.guihint]#GCP Cost# rule.


[#configure_cmk]
== Setting up monitoring in {CMK}

[#create_host]
=== Creating a host for GCP

Now create a host for monitoring GCP in {CMK}.
You can assign the host name as you wish.
If you want to monitor more than one project in GCP, you must create a separate host in {CMK} for each project.

*Important:* Since GCP as a service has neither an IP address nor a DNS name (the special agent does the access by itself), you must set the [.guihint]#IP address family# to [.guihint]#No IP#.

image::monitoring_gcp_no_ip.png[]


[#agent_rule]
=== Configuring the GCP agent

As mentioned at the beginning of this article, projects on the Google Cloud Platform are monitored by a xref:glossar#special_agent[special agent].
This agent is configured with a rule, which you can find via [.guihint]#Setup > Agents > VM, cloud, container > Google Cloud Platform (GCP)#.

In the corresponding field, enter the [.guihint]#Project ID# that you previously xref:#acquire_project_id[looked up in your project].

Under [.guihint]#JSON credentials for service account#, the key that you earlier xref:#create_key[created for your service account] must be entered next.
You will need to copy the entire JSON object (including the curly brackets) into this.

image::monitoring_gcp_id_and_key.png[]

Under [.guihint]#GCP services to monitor# you can now select which GCP products are to be monitored by the special agent.
To make the API queries as economical as possible, we recommend that you only select the products that are actually being used in your project.


=== Services on the GCP host itself

Now start a xref:glossar#service_discovery[service discovery] of the newly created GCP host in which {CMK} should now find quite a few services.
When you have added the services, it will look something like this after xref:glossar#activate_changes[activating the changes] in the monitoring:

image::monitoring_gcp_services.png[]


[#vm-hosts]
=== Creating hosts for the Compute Engine VM instances

Services that are assigned to Compute Engine VM instances are not assigned to the GCP host, but to so-called xref:glossar#piggyback[piggyback hosts].
This works in such a way that data retrieved from the GCP host is distributed to these piggyback hosts, which operate without their own monitoring agents.
A piggyback host is assigned to each VM instance.
The names of these piggyback hosts are composed from the ID of your project, an underscore and the full name of the instance.
For example, if your project has the project ID `my-project-19001216` and you then monitor a VM with the name `my-instance01`, the piggyback host will be named `my-project-19001216_my-instance01`.
Either create these hosts manually or -- if possible -- leave this task to the dynamic host management.


==== Setting up dynamic host management

ifdef::onprem[]
{cee-only}
As a user of one of our commercial editions,
endif::[]
ifdef::saas[]
As a user of {CE} (SaaS),
endif::[]
you can simply leave the creation and deletion of hosts for your VM instances to the xref:dcd#[dynamic host management].
The [.guihint]#Setup > Hosts > Dynamic host management# menu item takes you to the overview page for all connections that have already been configured.
Click on icon:icon_new[] [.guihint]#Add connection# and then give the connection an [.guihint]#ID# and a [.guihint]#Title#.

Not all options available in the [.guihint]#Connection properties# are covered below.
Consult the inline help and the main article linked above if you have any questions.

First, make sure that the [.guihint]#Connection properties# box has the xref:intro_gui#show_less_more[Show more mode] enabled so that all available options are displayed.

Next, under [.guihint]#Piggyback creation options# click [.guihint]#Add new element#.
Customize the folder in which the hosts of your VM instances are to be created.
The preselected [.guihint]#Host attributes# are basically c orrect for piggyback hosts and do not really need to be altered.

By activating the [.guihint]#Delete vanished hosts# option, you can ensure that piggyback hosts from which no more fresh data is received over a specified period of time will be automatically deleted.

As a part of monitoring your GCP projects, the option [.guihint]#Restrict source hosts# should be activated.
Enter your GCP host from the section xref:create_host[Creating a host for GCP in {CMK}] here.

As an example, a configuration of such a connection could then look like this:

image::monitoring_gcp_connection_properties.png[alt="Exemplary configuration of connection properties."]


==== Manually creating hosts for VM instances

Alternatively, you can create hosts for the piggyback data manually.
In doing so, it is important that the names of the hosts correspond exactly to the xref:vm-hosts[scheme described above].

ifdef::onprem[]
*Tip:* With the `find_piggy_orphans` script from the treasures directory you can find all piggyback hosts for which there is data but which have not yet been created as hosts in {CMK}:

[{shell}]
----
{c-omd} share/doc/check_mk/treasures/find_piggy_orphans
my-project-19001216_my-instance01
my-project-19001216_my-instance02
----
endif::[]

Configure the hosts for these Compute Engine VMs without an IP address (analogous to the GCP host) and select [.guihint]#No API integrations, no {CMK} agent# as monitoring agent.
If you also select the [.guihint]#Always use and expect piggyback data# option under [.guihint]#Piggyback#, you will be warned accordingly if the data fails to arrive.

image::monitoring_gcp_add_host_for_piggyback_data.png[]


== Diagnostic options

=== The Exceptions service

The [.guihint]#Exceptions# service supports you in setting up a GCP monitoring, and also assists with any future problems encountered when communicating with the Google Cloud API.
All error messages that the Google Cloud API returns to the special agent are collected and processed here.
In the event of an error, this service becomes {CRIT} by default and in its [.guihint]#Summary# will provide an indication of where the problem lies.

image::monitoring_gcp_exceptions.png[]

Clicking on the name of the service will then give you a very detailed message, often with a link to the exact place in your GCP project where it needs a different setting, for instance.
In the following example, the [.guihint]#Cloud Asset API# is disabled in the monitored project.

image::monitoring_gcp_exceptions_details.png[]

A click on the WWW globe icon:icon_link[] will then take you to the exact page in your project where this API can be enabled.


[#dashboards]
== Dashboards

ifdef::onprem[]
{CCE-only}
For a convenient start into monitoring GCP, {CMK} ships from {CE} onwards
endif::[]
ifdef::saas[]
For a convenient start into monitoring GCP, {CE} (SaaS) ships
endif::[]
the two built-in xref:glossar#dashboard[dashboards], [.guihint]#GCP GCE instances# and [.guihint]#GCP storage buckets#.
Both of these can be found as menu items in the monitoring under [.guihint]#Monitor > Cloud#.

To provide a clearer impression, following are two examples of how these dashboards are structured.
First, the Compute Engine instances dashboard, where you can compare the current state on the left and the chronological history for the most important metrics on the right:

image::monitoring_gcp_dashboard_vm.png[alt="Dashboard for the GCP Compute Engine instances."]

The dashboard for the storage buckets is structured in a very similar way.
On the left-hand side, you will find the current data for the respective buckets.
On the right, the most important metrics are again displayed chronologically:

image::monitoring_gcp_dashboard_storage.png[alt="Dashboard for the GCP storage buckets."]
