// -*- coding: utf-8 -*-
// IGNORE Ack
include::global_attr.adoc[]
= Notifications via SIGNL4
:revdate: 2024-03-12
:title: Notifications via SIGNL4
:description: You can have {CMK} send notifications to the SIGNL4 alerting software. Find out here how to connect.

{related-start}
xref:notifications#[Notifications]
{related-end}


SIGNL4 is a cloud-based alerting software for sending alarms from a wide range of systems to teams on call -- by SMS, push notification or phone call.
The alarms are displayed using a mobile app for iPhone or Android.
The app is also used for acknowledgment, tracking and escalation.

In {CMK} you can connect SIGNL4 via its _Team Secret_.
As a result, notifications from {CMK} are displayed as alarms in the SIGNL4 app.

You set up the back channel for the communication from {CMK} to SIGNL4 in the SIGNL4 portal by selecting and configuring the {CMK} integration.
Subsequently, any alarms in the SIGNL4 mobile app that are acknowledged, closed or commented on will also result in a relevant update to a status appearing in {CMK}.


[#config_signl4_secret]
== Reading the team secret from SIGNL4

No activation of forwarding is required in SIGNL4.
The team secret that you need for the configuration in {CMK} can be found in the SIGNL4 portal:

. Select [.guihint]#Teams# in the navigation bar.

. Copy the displayed [.guihint]#Secret# in the tile corresponding to the team that is to receive notifications from {CMK}.

A secret will only be available if the [.guihint]#Webhook (Inbound)# integration has been set up for the team.
The URL of this webhook contains the team secret as its last entry.


[#config_checkmk]
== Configuring {CMK}

You have already learned how to set up Checkmk notifications in general in the article on xref:notifications#[notifications].

Within {CMK} it is now sufficient to enter the secret copied above:

. Create a new notification rule with [.guihint]#Setup > Events > Notifications > Add rule.#
. For the [.guihint]#Notification Method# choose [.guihint]#SIGNL4 Alerting#.
. Enter the copied secret under [.guihint]#Team Secret#:
+
image::notifications_signl4.png[alt="The notification method settings for SIGNL4."]
+
Instead of entering the secret directly here, you can also read it from the xref:password_store#[password store] -- provided it was previously stored there.

Optionally, you may specify URL prefixes to control links on your {CMK} GUI within the notification.

When using the following [.guihint]#Contact selection# box, note the following two points:

include::include_ticketsystem.asciidoc[]

You can find out how to test the new notification method in the article on xref:notifications#notification_testing[notifications].


[#config_signl4_acknowledge]
== Configuring SIGNL4 for acknowledgments

The back channel from SIGNL4 to {CMK} is established with the {CMK} xref:rest_api#[REST API].
In order for the REST API requests to reach {CMK}, the {CMK} site must be publicly accessible or, more precisely, accessible from the SIGNL4 server.

The configuration takes place in the SIGNL4 portal:

. In the navigation bar, select [.guihint]#Integrations#, then [.guihint]#Gallery# and search for `Checkmk` in the integrations.
Two results will be found for {CMK}.
Only the integration with the name [.guihint]#{CMK} ITOM Back channel for 2-way updates in {CMK}# is responsible for setting up the back channel.

. Click on this to display the settings for this integration.
+
. In the [.guihint]#{CMK} URL# field, enter the base URL of the REST API of your {CMK} site, e.g: `\https://mydomain/mysite/check_mk/api/1.0/`.

. In the [.guihint]#Your {CMK} username# field, enter the name of a user of the {CMK} site with access to the REST API.
The xref:glossar#automation_user[automation user] `automation` is suitable for this purpose.

. Enter the corresponding password in the [.guihint]#Your {CMK} password# field.
For the automation user, this is the automation password (the _automation secret_).

. By activating the [.guihint]#Annotations as Ack# switch, comments from the app will also be visible as comments in {CMK}.
Each comment sent from the app then simultaneously leads to the problem being acknowledged.

. Finally, click on [.guihint]#Install#.
Your entries will then be verified.
If you have not made a mistake, you should see this reassuring message at the top of the page in the newly displayed [.guihint]#Status# field: `Everything is fine.`

Once configured, it will be possible to xref:basics_ackn#[acknowledge] a problem in {CMK} from the mobile SIGNL4 app.
Comments sent -- if [.guihint]#Annotations as Ack# is activated -- and the closing of an alarm from the app are noted in {CMK} as comments for the affected host/service.
