// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= Switching on notifications
:revdate: draft
:title: Switching on notifications
:description: For the notifications in {CMK}, their dispatch by email has to be prepared and activated. Next, the notification is tested.

{related-start}
xref:intro_extend#[Extending the monitoring system further]
xref:notifications#[Notifications]
{related-end}


ifdef::saas[]
[TIP]
====
This article is incomplete as it is currently being revised for publication.
Please be patient. Thank you! +
By the way, the https://docs.checkmk.com/saas/de/intro_notifications.html[German version] of this article has already been updated -- if that is an alternative for you.
====
endif::[]


[#notifications]
==  The basics of notifications

_Notification_ in {CMK} involves actively notifying users when the state of a host or service changes.
Let us assume that at a certain point in time on the host `mywebsrv17` the service `HTTP foo.bar` goes from {OK} to {CRIT}.
{CMK} detects this and by default sends an email including the most important data regarding this event to all contacts for this service.
The state later changes again, from {CRIT} to {OK}, and the contacts receive another email -- this time reporting this event, which is referred to as a _recovery_.

But this is only the simplest way of notifying.
There are numerous ways for you to refine it:

* You can notify by SMS, pager, Slack, and other Internet services.
* You can set notifications to specific xref:glossar#time_period[time periods], for example, to take on-call rosters into account.
* You can define escalations if the responsible contact does not take action quickly enough.
* Users can independently 'subscribe' to or unsubscribe from notifications if you want to allow this.
* You can generally define via rules who is to be notified about what, and when.

However, before you start working with notifications, you should note the following:

* Notification is an optional feature.
Some users do without the notifications because they have a control center that is manned around the clock and that only operates with the status interface.

* Initially activate the notifications only for yourself and make yourself responsible for *everything*.
Observe over at least a few days how large the number of notifications is.

* Do not activate notifications for other users until you have reduced the false alarms (_false positives_) to a minimum.
We have described how you can do this in the xref:intro_finetune#[chapter on fine-tuning monitoring].


ifdef::onprem[]
[#notify_init]
== Preparing for email notifications

The simplest and by far the most common method is to send a notification by email.
There is enough space in an email to also include the graphs of metrics as well.

Before you can notify by email, your {CMK} server must be set up for sending emails.
For all supported Linux distributions, this boils down to the following:

. Install an SMTP server service.
This is usually done automatically during the installation of the distribution.

. Specify a *smarthost*.
You will usually be asked for this when installing the SMTP server.
The smarthost is a mail server in your company that takes over the delivery of emails for {CMK}.
Very small companies usually do not have their own smarthost.
In this case, you use the SMTP server supplied by your email provider.

If the mail dispatch has been set up correctly, you should be able to send an email from the command line, for instance via this command:

[{shell-raw}]
----
{c-omd} echo "test-content" | mail -s test-subject bill.martin@example.com
----

The email should be delivered without delay.
If this does not work, you will find clues as to the source of the problem in the SMTP server's log file in the `/var/log/` directory.
More details on setting up mail delivery under Linux can be found in the xref:notifications#smtp[article on notifications].
endif::[]


[#mail_activate]
== Activating email notifications

ifdef::saas[]
The simplest and by far the most common method is to send a notification by email.
There is enough space in an email to also include the graphs of metrics as well.
// This block is new
// start translation
////
{CE} nutzt den Amazon Simple Email Service (SES), so dass der Versand von E-Mails für Benachrichtigungen ohne weitere Konfiguration möglich ist.
////
// end translation
endif::[]

Once the email dispatch is basically working, activating the notification is very simple.
In order for a user to receive notifications by email, the following conditions must be fulfilled:

ifdef::onprem[]
* An email address has been assigned to the user.
endif::[]

* The user is responsible for hosts or services -- through the assignment of contact groups.

// This block is new
// start translation
////
* Es gibt eine Benachrichtigungsregel, die dafür sorgt, dass die Mitglieder der Kontaktgruppen per E-Mail benachrichtigt werden.
////
// end translation

ifdef::onprem[]
You assign email address and contact groups via the user's properties, as we showed earlier in the xref:intro_users#create_users[chapter on user administration], for instance by adding your email address and the [.guihint]#Everything# contact group to the `cmkadmin` user account.
// This block is new
// start translation
////
{CMK} wird mit einer Benachrichtigungsregel ausgeliefert, die jeden Kontakt der Hosts und Services über wichtige Zustandsänderungen per HTML-E-Mail benachrichtigt.
////
// end translation
endif::[]

ifdef::saas[]
You assign contact groups via the user's properties, as we showed earlier in the xref:intro_users#create_users[chapter on user administration], for instance by adding the [.guihint]#Everything# contact group to your user account.
// This block is new
// start translation
////
{CE} wird mit Benachrichtigungsregeln ausgeliefert, die jeden Kontakt wichtiger Hosts über wichtige Zustandsänderungen dieser Hosts und deren Services per HTML-E-Mail benachrichtigt.
////
// end translation
endif::[]

// This block is new
// start translation
////
Was dabei „wichtig“ bedeutet, erfahren Sie im nächsten Abschnitt.
////
// end translation


[#test]
== Testing notifications

It would be a bit cumbersome to wait for a real problem or even provoke one to test the notifications.
This is easier with [.guihint]#Test notifications#, a tool with which you can simulate a notification for a host or service and have the notification sent immediately.

// This block is new
// start translation
////
Öffnen Sie zuerst mit [.guihint]#Setup > Events > Notifications# die Benachrichtigungszentrale:

ifdef::onprem[]
image::intro_notifications.png[alt="Einstiegsseite im Setup für die Benachrichtigungen."]

Wenn Sie diese Seite das erste Mal aufrufen, werden Sie über die noch nicht konfigurierte „Fallback-E-Mail-Adresse" informiert, wie im vorherigen Screenshot zu sehen ist.
Diese Information können Sie im Moment ignorieren.
Wir gehen auf das Thema im Artikel zu xref:notifications.html#fallback[Benachrichtigungen] ein.
Bis Sie diesen Abschnitt gelesen haben, empfehlen wir, die Information als Erinnerung stehen zu lassen, und sie nicht durch Klick auf [.guihint]#Do not show again# wegzuklicken.

Ansonsten zeigt diese Seite Statusinformationen -- wie die Zahl gesendeter und fehlgeschlagener Benachrichtigungen -- und dient zum Aufruf von Aktionen rund um das Thema Benachrichtigungen, z. B. der Erstellung einer Benachrichtigungsregel, aber auch dem Aufruf von Host- und Service-Regeln, die Benachrichtigungen beeinflussen können.

Ganz unten auf der Seite, im Kasten [.guihint]#Global notification rules#, wird die von {CMK} mitgelieferte _globale_ Benachrichtigungsregel angezeigt.
Global deshalb, weil auch jeder Benutzer eigene, benutzerdefinierte Benachrichtigungsregeln erstellen kann.

Die mitgelieferte Benachrichtigungsregel sorgt dafür, dass Benachrichtigungen über alle wichtigen Zustandswechsel von Hosts und Services per HTML-E-Mail an alle zuständigen Kontakte versendet werden.
Als „wichtig“ werden dabei alle Zustandswechsel von Hosts nach {DOWN} und {UP} und von Services nach {CRIT}, {WARN} und {OK} eingestuft.
endif::[]

ifdef::saas[]
image::intro_notifications_saas.png[alt="Einstiegsseite im Setup für die Benachrichtigungen."]

Ganz unten auf der Seite, im Kasten [.guihint]#Global notification rules#, werden die von {CE} mitgelieferten _globalen_ Benachrichtigungsregeln angezeigt.
Global deshalb, weil auch jeder Benutzer eigene, benutzerdefinierte Benachrichtigungsregeln erstellen kann.

Die mitgelieferten Benachrichtigungsregeln sorgen dafür, dass Benachrichtigungen über alle wichtigen Zustandswechsel von wichtigen Hosts und deren Services per HTML-E-Mail an alle zuständigen Kontakte versendet werden.
Als „wichtig“ werden dabei alle Zustandswechsel von Hosts nach {DOWN}, {UP} und {UNREACH} und von Services unter anderem nach {CRIT} und {UNKNOWN} eingestuft.
Wichtige Hosts sind dabei solche, denen das xref:glossar#host_tag[Host-Merkmal] [.guihint]#Productive system# oder [.guihint]#Business critical# zugewiesen ist.

Jeder Host in {CMK} ist erst einmal ein _produktives_ System, da ihm standardmäßig das zugehörige Host-Merkmal zugewiesen wird.
Für einen _geschäftskritischen_ Host werden dagegen granulare Benachrichtigungen versendet, da in der dafür vordefinierten Regel mehr Zustandswechsel aktiviert sind.
Schließlich liefert ein Host mit dem Merkmal [.guihint]#Test system# standardmäßig gar keine Benachrichtigungen.
Wie Sie so ein Host-Merkmal einem Host zuordnen, hatten wir im Kapitel zur xref:intro_finetune.html#assign_tag_to_host[Feinjustierung des Monitorings] gezeigt.
endif::[]
////
// end translation

The notification test evaluates the notification rules displayed.
You can access the notification test via [.guihint]#Setup > Events > Notifications# and the [.guihint]#Test notifications# button:

ifdef::onprem[]
image::intro_test_notifications.png[alt="Dialog for defining the properties of the simulated notification."]
endif::[]

ifdef::saas[]
image::intro_test_notifications_saas.png[alt="Dialog for defining the properties of the simulated notification."]
endif::[]

Simply select a host and then any state change as the event.
By activating the [.guihint]#Send out# checkbox, you specify that the notification is not only simulated but also actually sent.

Click on [.guihint]#Test notifications#.
The results are displayed at the bottom of the page.
The most important is the summary [.guihint]#Analysis results# at the top:

image::intro_test_notifications_result1.png[alt="The summary for analyzing the simulated notification."]

For a successful test, at least one notification rule must match.
The `Notifications have been sent` message indicates that the notification has actually been sent.

Under [.guihint]#Resulting notifications# you can then see to whom and via which channel the notification was sent:

ifdef::onprem[]
image::intro_test_notifications_result2.png[alt="The resulting notification for the simulation."]
endif::[]

ifdef::saas[]
image::intro_test_notifications_result2_saas.png[alt="The resulting notification for the simulation."]
endif::[]

// This block is new
// start translation
////
Im untersten Kasten wird schließlich in der ersten Spalte angezeigt, welche der Benachrichtigungsregeln gegriffen hat icon:icon_checkmark[alt="Symbol zur Anzeige eines positiven Status."] und welche nicht icon:icon_hyphen[alt="Symbol zur Anzeige eines negativen Status."]:

ifdef::onprem[]
image::intro_test_notifications_result3.png[alt="Für jede Benachrichtigungsregel wird angezeigt, ob sie gegriffen hat."]
endif::[]

ifdef::saas[]
image::intro_test_notifications_result3_saas.png[alt="Für jede Benachrichtigungsregel wird angezeigt, ob sie gegriffen hat."]
endif::[]
////
// end translation

This should immediately result in an email for this simulated problem. 
A detailed description of the options and the results for the notification test can be found in the article on xref:notifications#notification_testing[notifications].

If you have not received a notification in real monitoring, i.e. outside of the simulation, this does not necessarily mean an error.
There are situations in which the notifications from {CMK} are deliberately suppressed for example:

* when the notification has been disabled xref:intro_tools#master_control[[.guihint]#Master control#] snap-in;

* when a host or service is in a scheduled downtime;

* when a host is {DOWN} and therefore no notifications are triggered by its services;

* if the status has changed too often recently and the service has therefore been marked as icon:icon_flapping[alt="Icon to indicate a flapping state."] xref:glossar#flapping[flapping].


[#finetune]
== Fine-tuning notifications

You can adapt the notifications in {CMK} to your, or your organization's, needs in a variety of ways by means of complex rules.
You can learn all of the details for this in the xref:notifications#[article on notifications].


[#troubleshoot]
== Troubleshooting

The notification module in {CMK} is very complex -- because it covers many, very different requirements that have proven to be important over many years of practical experience.
The question "Why didn't {CMK} notify here?" will therefore be asked more often than you might expect, especially at the beginning.
For this reason, here are a few tips for troubleshooting.

// This block is new
// start translation
////
Bei Problemen mit Benachrichtigungen überprüfen Sie zuerst, ob es fehlgeschlagene Benachrichtigungen gibt.
Diese werden auf der Seite [.guihint]#Monitor > System > Failed notifications# aufgelistet.
Die Spalte [.guihint]#Summary# zeigt den Grund des Fehlers -- oder gibt Ihnen zumindest einen Hinweis auf die Ursache.

Eine weitere Möglichkeit bietet Ihnen {CMK} durch die Analyse der letzten Benachrichtigungen, die das System erzeugt hat, und die die Benachrichtigungsregeln durchlaufen haben.
ifdef::onprem[]
Die Tabelle der Benachrichtigungen für die Analyse öffnen Sie mit [.guihint]#Setup > Events > Analyze recent notifications.#
endif::[]
ifdef::saas[]
Die Tabelle der Benachrichtigungen für die Analyse öffnen Sie mit [.guihint]#Setup > Events > Notifications#.
Klicken Sie auf dieser Seite [.guihint]#Show analysis#.
endif::[]
Hier können Sie eine Benachrichtigung erneut senden, sich deren Kontext anzeigen lassen und die zugehörigen Benachrichtigungsregeln analysieren lassen.
Mehr Information dazu finden Sie im Artikel zu den xref:notifications#rule_analysis[Benachrichtigungen.]
////
// end translation

If a notification has not been triggered by a particular service, the first step would be to check the history of the notifications for that service.
To do this, open the detail page for that service by clicking in the monitoring on the service.
Select [.guihint]#Service > Service notifications# from the menu.
There you will find all notification events for this service listed chronologically from the most recent to the oldest.

ifdef::onprem[]
Here is an example of a service for which notification was attempted, but for which the sending of emails failed because no SMTP server has been installed.

image::intro_service_notifications.png[alt="List of notification events for a service."]

You can find even more information in the file `~/var/log/notifiy.log`.
You can view this as a site user, with the `less` command, for example:

[{shell}]
----
{c-omd} less var/log/notify.log
----

If you are not yet familiar with `less` -- with the key combination `Shift+G` you can jump to the end of a file (which is useful for log files), and quit `less` with the `Q` key.

With the `tail -f` command, you can also observe the file contents 'live' while it is running.
This is useful if you are only interested in new messages, i.e. those that only appear after `tail` has been entered.

Here is an excerpt from the `notify.log` for a successfully triggered notification:

.~/var/log/notify.log
[{file}]
----
2024-04-15 16:21:47,912 [20] [cmk.base.notify] Analysing notification (localhost) context with 14 variables
2024-04-15 16:21:47,912 [20] [cmk.base.notify] Global rule 'Notify all contacts of a host/service via HTML email'...
2024-04-15 16:21:47,913 [20] [cmk.base.notify]  -> matches!
2024-04-15 16:21:47,913 [20] [cmk.base.notify]    - adding notification of martin via mail
2024-04-15 16:21:47,913 [20] [cmk.base.notify] Executing 1 notifications:
2024-04-15 16:21:47,913 [20] [cmk.base.notify]   * notifying martin via mail, parameters: graphs_per_notification, notifications_with_graphs, bulk: no
2024-04-15 16:21:47,913 [20] [cmk.utils.notify] sending command LOG;HOST NOTIFICATION: martin;localhost;DOWN;mail;
2024-04-15 16:21:47,913 [20] [cmk.base.notify]      executing /omd/sites/mysite/share/check_mk/notifications/mail
2024-04-15 16:21:48,458 [20] [cmk.base.notify]      Output: Spooled mail to local mail transmission agent
2024-04-15 16:21:48,501 [20] [cmk.utils.notify] sending command LOG;HOST NOTIFICATION RESULT: martin;localhost;OK;mail;Spooled mail to local mail transmission agent;Spooled mail to local mail transmission agent
----
endif::[]

// This block is new
// start translation
////
[TIP]
====
Wenn Sie ganz genau wissen wollen, wann Benachrichtigungen erzeugt werden -- und wann eben nicht -- erfahren Sie die ganze Wahrheit wieder im Artikel zu den xref:notifications#conditions[Benachrichtigungen.]
====
////
// end translation

By setting up the notifications, you have completed the finishing touches
-- Your {CMK} system is ready for use!
This does not mean, of course, that the full capabilities of {CMK} have been fully explored.

xref:intro_extend#[Continue with extending the monitoring]
