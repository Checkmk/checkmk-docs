// -*- coding: utf-8 -*-
// IGNORE no_permissions
include::global_attr.adoc[]
= Working with multiple users
:revdate: 2025-02-05
:title: Working with multiple users
:description: A user's scope of responsibility is defined in {CMK} by assigning roles for permissions and contact groups for responsibilities.

{related-start}
xref:intro_notifications#[Switching on notifications]
xref:wato_user#[Users, roles and permissions]
{related-end}


[#users_cmk]
== Users in {CMK}

Once you have your monitoring in a state where it is beginning to be useful to others, it is time to deal with the user administration function in {CMK}.
If you are only operating the system on your own, a single user with administrator rights is quite sufficient, and you can simply continue reading in the xref:intro_notifications#[next chapter on notifications].

Assuming, then, that you have colleagues who are expected to work with {CMK} alongside you,
why don't you _all_ simply work with the user name that has already been set up?
Well, this _is_ theoretically possible, but it does create a number of difficulties.
If, however, you create _one account per person_, you will have several advantages:

* Individual users can have individual *permissions*.
* You can restrict the *responsibility* for a user to specific hosts and services, so that only these will be visible in their monitoring.
* Users can create their own xref:intro_tools#bookmarks[bookmarks], set up their xref:intro_gui#sidebar[sidebar] individually and also customize other settings for themselves.
* You can delete an account when an employee leaves the company without affecting the other accounts.

You can find all the details that go beyond the introduction in this Beginner's guide in the xref:wato_user#[article on user administration].


[#roles]
== Roles for permissions

We would like to take a closer look at the two points on permissions and responsibilities.
Let's start with permissions -- that is, with the question of who is allowed to do what.
For this purpose, {CMK} uses the concept of *roles*.
A role is nothing more than a collection of permissions.
Each of the permissions allows a specific action.
For example, there is a permission for changing the global settings.

ifdef::onprem[]
{CMK} comes with predefined roles that you assign to a new user:

[cols="25,10,~",options="header"]
|===
|Role |Abbreviation |Description 
|Administrator |`admin` |An administrator can perform all functions in {CMK}. Their main task is the general configuration of {CMK}, *not* the monitoring. This also includes creating users and customizing roles.
|Normal monitoring user |`user` |This role is intended for the *operator* who carries out the actual monitoring. In principle, the operator should only see those hosts and services for which they are responsible. In addition, it is possible that you, as the administrator, give them the permissions for managing their own hosts.
|Agent registration user |`agent_registration` |Special role for an xref:glossar#automation_user[automation user] to perform the registration of a host's {CMK} xref:glossar#agent[agent] with the {CMK} server with minimal privileges.
|Guest user |`guest` |A guest user may see everything but not change anything. This role is useful, for example, if you want to hang a status monitor on the wall that always shows an overall view of the monitoring. Since a guest user cannot change anything, it is also possible for several colleagues to use an account with this role simultaneously.
|no_permissions |`no_permissions` |This role has no permissions at all. It is not intended for direct assignment. Instead, it can be used to create new roles with only the minimum required permissions.
|===

You can learn how to customize the predefined roles in the xref:wato_user#roles[article on user administration].
endif::[]

ifdef::saas[]
{CE} comes with predefined roles that you assign to a new user:

[cols="25,~",options="header"]
|===
|Role |Description 
|Administrator |An administrator can perform all functions in {CMK}. Their main task is the general configuration of {CMK}, *not* the monitoring. This also includes creating users.
|Normal monitoring user |This role is intended for the *operator* who carries out the actual monitoring. In principle, the operator should only see those hosts and services for which they are responsible. In addition, it is possible that you, as the administrator, give them the permissions for managing their own hosts.
|===
endif::[]


[#contact_groups]
== Contact groups for areas of responsibility

The second important aspect of user administration is the definition of responsibilities.
Who is responsible for the host `mysrv024`, and who for the service `Tablespace FOO` on the host `ora012`?
Who should see the host and service in monitoring and possibly be notified if there is a problem?

Responsibilities in {CMK} are not defined via roles, but via *contact groups*.
The word 'contact' is meant in the sense of notification:
Who should the monitoring contact if there is a problem?

The basic principle is as follows:

* Any user can be a member of any number of contact groups.

* Each host and service is a member of at least one or more contact groups.

Here is an example of such an assignment of users (left) and hosts (right) to contact groups (center):

image::intro_contactgroup_example.png[alt="Illustration of the relationship between users, contact groups and hosts/services.",width=50%]

As you can see, both a user and a host or service can be a member of several contact groups.
Membership of a group has the following effects:

* A user with the [.guihint]#Normal monitoring user# role sees exactly those objects in the monitoring that are in their contact groups.

* If there is a problem with a host or service, all users who are in at least one of its contact groups are notified (by default).

[TIP]
====
There is no possibility in {CMK} to assign a host or service directly to a user.
This has been intentionally omitted, as such a direct assignment leads to problems in practice -- e.g. when a colleague leaves your company.
====


[#create_contact_groups]
== Creating contact groups

To manage the contact groups, follow this way: [.guihint]#Setup > Users > Contact groups#.
A contact group with the name [.guihint]#all# and the alias [.guihint]#Everything# is already predefined.
All hosts and services will automatically be assigned to this group, which is intended for simple setups in which there is (so far) no division of tasks, and for which you will initially have the sole responsibility.

With [.guihint]#Add group# you create a new contact group.
Here you need, as usual, the internal ID ([.guihint]#Name#) and the title ([.guihint]#Alias#), which it is possible to change later:

image::intro_add_contact_group_properties.png[alt="Dialog for setting the properties for the new contact group."]

In the above example you can see a new contact group, which unsurprisingly should be responsible for the Windows and Linux servers.


[#assign_hosts]
== Assigning hosts

Once you have created all of your contact groups, you will need to assign hosts and services on the one hand, and users on the other.
You do the latter in the properties for the users themselves -- we will come to this in a xref:create_users[later section].

There are two ways of assigning hosts to contact groups, which you can also choose to use in parallel 
-- via rules or via the properties of the hosts or their folders.


=== Assignment using rules

The required rule set is called [.guihint]#Assignment of hosts to contact groups#.
You can find this, for example, on the [.guihint]#Contact groups# page you opened in the previous section, in the [.guihint]#Contact groups > Rules# menu.

Even with a fresh {CMK} installation, the rule set will not be empty, by the way.
You will find a rule that assigns all hosts to the contact group [.guihint]#Everything# (`all`) mentioned above.

So create your own new rules here, and based on the condition select the hosts that you want to assign to the respective contact group(s):

image::intro_rule_assignment_hosts_contact_groups.png[alt="Dialog for assigning contact groups to hosts in a rule."]

*Important:* If several rules apply to a host, all of them will be evaluated and the host will be assigned to several contact groups in this way.


=== Assignment using host properties

Open the properties of the host, e.g. via [.guihint]#Setup > Hosts > Hosts#.
Click on the host to display the [.guihint]#Properties of host# page.
In the [.guihint]#Basic settings# box, select the [.guihint]#Permissions# checkbox.

image::intro_host_properties_permissions.png[alt="Dialog for assigning contact groups to hosts in the host properties."]

Select one or more contact groups from the [.guihint]#Available# list and move them to the [.guihint]#Selected# list using the right arrow.
Activate the [.guihint]#Add these contact groups to the host# checkbox.

You do not usually need to select the [.guihint]#Always add host contact groups also to its services# checkbox, because services automatically inherit the contact groups from their hosts.
You will learn more about this in the next section.

*Note:* You can set the [.guihint]#Permissions# attribute in the same way at the folder level instead of at the host level.
For a folder, some additional options are available regarding whether the permissions should also apply to subfolders.


[#assign_services]
== Assigning services

You only need to assign services to contact groups if these are to differ from those of their hosts.
However, an important basic principle applies in this regard 
-- once a service has been explicitly assigned to at least one contact group, it no longer inherits any contact groups from its host.

An assignment at the service level allows you to, for example, separate server and application operations.
For instance, put the host `srvwin123` into the contact group `Windows & Linux servers`, but put all of its services beginning with the prefix `Oracle` into the contact group `Oracle administration`, which means that the Windows administrators will not see the Oracle services, and the Oracle administrators, conversely, will not get details of the operating system's services -- which is often a practical separation.

If you do not need this separation, simply limit yourself to the assignments for hosts -- and you are done.

The [.guihint]#Assignment of services to contact groups# rule set is responsible for the assignment at service level.
When creating the rule, proceed in the same way as described in the previous section for the host assignment.
In addition, you specify conditions for the service names.


[#create_users]
== Creating users

ifdef::onprem[]
Enter the user administration with [.guihint]#Setup > Users > Users#:

image::intro_setup_users.png[alt="List of {CMK} users."]

Don't be surprised if, in addition to the `cmkadmin` entry, there are also two other users `automation` and `agent_registration`.
These xref:glossar#automation_user[automation users] are intended for remote access, e.g. via script or xref:rest_api#[REST API].

You create a new user with the [.guihint]#Add user# button on the page with this same title:

image::intro_new_user_identity.png[alt="Dialog for setting the identity for the new user."]

In the [.guihint]#Identity# box, enter the internal ID ([.guihint]#Username#) and a title -- here the [.guihint]#Full name# of the user.
The [.guihint]#Email address# and [.guihint]#Pager address# fields are optional and are used for notifications via email and SMS respectively.

[TIP]
====
Do not enter an email address here for now. 
First read the notes in the xref:intro_notifications#[chapter on notifications].
====

image::intro_new_user_security.png[alt="Dialog for defining the security settings for the new user."]

In the [.guihint]#Security# box, leave the default setting at [.guihint]#Normal user login with password# and only assign an initial password.
By default, a password for a local user account must be at least 12 characters long.
This is defined by [.guihint]#Global settings > User management > Password policy for local accounts#.

At the bottom at [.guihint]#Roles# you can assign roles to the user.
If you assign more than one role, the user simply receives the maximum permissions from these roles 
-- although this would not make much sense for the the small number of predefined roles.

image::intro_new_user_contact_groups.png[alt="Dialog for selecting contact groups for the new user."]

Under [.guihint]#Contact Groups# you can now select from those previously-created contact groups.
If you select the predefined group [.guihint]#Everything#, the user will be responsible for everything, as all hosts and services are included in this group.

By the way, the last two boxes on this page -- [.guihint]#Personal settings# and [.guihint]#Interface settings# -- contain exactly the same settings that a user can change in their profile via the [.guihint]#User > Edit profile# menu.
Guest users (with the [.guihint]#Guest user# role) cannot change these settings in their profiles.

[TIP]
====
On the overview page of the user administration [.guihint]#Users# you will find the [.guihint]#LDAP & Active Directory# entry in the [.guihint]#Related# menu.
If you use Active Directory or another LDAP service in your organization, you will also have the option of including users and groups from these services.
Details on this can be found in the xref:ldap#[article on the LDAP/Active Directory].
====
endif::[]

ifdef::saas[]
You can access the {CE} user management by clicking on [.guihint]#Admin# in the left-hand navigation bar in the {CMK} interface.
Then click on [.guihint]#User management# in the admin panel.

Create a new user with the [.guihint]#Add user# button:

image::intro_new_user_saas.png[alt=“Dialog for entering the email address and role for the new user.”,width=63%]

Enter the email address for the new user, select one of the predefined xref:roles[roles] and confirm by clicking on [.guihint]#Create user.#

This will send an email from `no-reply@mail.checkmk.cloud` to the specified email address with the subject `You have been invited to Checkmk Cloud`.
This email contains the user name (i.e. the email address), a temporary password and a link to the user's first login to {CE}.
Until the new user logs in for the first time, their status remains [.guihint]#INVITE PENDING:#

image::intro_users_list_saas.png[alt=“List of users set up in {CE}.”]

After logging in, the new user first chooses a new password and then lands in the admin panel, where they can select the site.
Following the successful login, the status of the user changes from [.guihint]#INVITE PENDING# to [.guihint]#CONFIRMED.#
The new user has been added to the {CMK} user administration and is now ready to be assigned to contact groups in order to receive notifications.

You can access the {CMK} user administration of with [.guihint]#Setup > Users > Users#:

image::intro_cmk_users_list_saas.png[alt=“List of users set up in {CE}.”]

Do not be surprised if, in addition to the two entries visible in the admin panel, there are also the users `agent_download`, `agent_registration` and `automation`.
These xref:glossar#automation_user[automation users] are intended for external access, e.g. via a script or the xref:rest_api#[REST API].

The properties of a user can be changed by clicking on the icon:icon_edit[alt=“Icon for editing a list entry.”] icon in the user's line to open the user properties:

image::intro_new_user_contact_groups.png[alt=“Dialog for selecting the contact groups for the new user.”]]

In the [.guihint]#Contact groups# box, you can now select from the previously created contact groups.
If you select the predefined group [.guihint]#Everything#, the user will be responsible for everything, as this group contains all hosts and all services.

By the way: The last two boxes on the page, [.guihint]#Personal settings# and [.guihint]#Interface settings#, contain exactly the same settings that a user can change in their profile themselves via the [.guihint]#User > Edit profile# menu.
endif::[]

xref:intro_notifications#[Continue with the notifications]
