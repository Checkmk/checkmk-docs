// -*- coding: utf-8 -*-
// IGNORE pre Ver
include::global_attr.adoc[]
= Windows überwachen
:revdate: 2025-02-11
:title: Windows überwachen - Der neue Agent für Windows im Detail
:description: Der Windows-Agent ergänzt das Agentenprogramm mit dem Agent Controller und neuen Funktionen. Wie Sie den Agenten nutzen, erfahren Sie hier.

{related-start}
xref:wato_monitoringagents#[Monitoring-Agenten]
xref:agent_deployment#[Automatische Agenten-Updates]
{related-end}


[#intro]
== Der Windows-Agent

Die Überwachung von Windows-Servern war von Anfang an eine der wichtigsten Aufgaben von {CMK}.
Wie für alle anderen Server-Betriebssysteme liefert {CMK} daher auch für Windows einen eigenen Agenten aus.
Dieser ist ein Agentenprogramm, das minimalistisch und sicher ist.

ifdef::onprem[]
In der {CMK}-Version {v21} wurde diesem *Agentenprogramm* mit dem *Agent Controller* eine neue Komponente zur Seite gestellt.
Der Agent Controller ist dem Agentenprogramm vorgeschaltet, fragt dieses ab und kommuniziert an dessen Stelle mit dem {CMK}-Server.
Dazu registriert er sich am *Agent Receiver*, einem Prozess, der auf dem {CMK}-Server läuft.

Der Windows-Agent übernimmt also zum einen das Agentenprogramm, und damit dessen Vorteile.
Zum anderen ergänzt er das Programm so, dass neue Funktionen hinzugefügt werden können wie die TLS-Verschlüsselung der Kommunikation oder die Datenkomprimierung.

Der registrierte, verschlüsselte und komprimierte xref:glossar#pull_mode[Pull-Modus] mit dem Agent Controller ist für alle {CMK}-Editionen verfügbar 
– sofern sowohl {CMK}-Server als auch Agent mindestens Version {v21} haben.
Den xref:glossar#push_mode[Push-Modus] gibt es ab {CCE}, d. h. in {CE} und {ME}.
Die Umkehrung der Kommunikationsrichtung erleichtert die Überwachung von Hosts, die sich hinter Firewalls befinden.
Kombiniert wird der Push-Modus meist mit der xref:hosts_autoregister#[automatischen Registrierung] des {CMK}-Agenten, die ebenfalls ab {CE} verfügbar ist.

[TIP]
====
Standard-Agentenpakete öffnen sofort nach der Installation Port 6556.
Sie geben darüber die unverschlüsselte Agentenausgabe an jeden, der sie anfordert aus.
Bei Hosts, die aus dem Internet erreichbar sind, sollten Sie daher _vor_ der Installation per Firewall sicherstellen, dass der Zugriff auf diesen Port nur ausgewählten Hosts erlaubt ist.
Führen Sie die Registrierung und die damit verbundene Aktivierung der TLS-Verschlüsselung zeitnah nach der Installation durch.
====
endif::[]

ifdef::saas[]
Dem *Agentenprogramm*, welches die für das Monitoring relevanten Daten sammelt, ist mit dem *Agent Controller* eine Komponente zur Seite gestellt, die mit dem *Agent Receiver*, einem Prozess, der auf dem {CMK}-Server läuft, verschlüsselt kommuniziert.
Neben der initialen Authentifizierung und Registrierung ist die Aufgabe des Agent Controller einmal pro Minute das Agentenskript aufzurufen und die Agentendaten zur Checkmk-xref:glossar#site[Instanz] zu übertragen. 

[TIP]
====
Dieser Artikel behandelt den Agenten von {CE} (SaaS).
{CE} (SaaS) erwartet aus Gründen von Performance und Sicherheit ausschließlich den verschlüsselten xref:glossar#push_mode[Push-Modus] zur Kommunikation zwischen Agent und Instanz.
Anders sieht dies bei den _On-Premises_-Editionen von {CMK} aus.
In {RE} und {SE} steht ausschließlich der xref:glossar#pull_mode[Pull-Modus] zur Verfügung (verschlüsselt und – wo es aus Kompatibilitätsgründen erforderlich ist – unverschlüsselt).
{CE} und {ME} sind am flexibelsten und unterstützen beide Modi.
====
endif::[]

Aus Kompatibilitätsgründen unterstützt der Agent nur die aktuellen Versionen der link:https://de.wikipedia.org/wiki/Microsoft_Windows_NT[Microsoft Windows NT^] Produktlinie (Edition).
ifdef::onprem[]
Welche das genau sind, steht im Artikel xref:release_notes.html#windows[Release notes.]
endif::[]
ifdef::saas[]
Welche das genau sind, steht im Artikel xref:release_notes.html#windows[Systemvoraussetzungen für {CE}.]
endif::[]

[#legacyagent]
*Wichtig*: Andere Windows-Editionen werden nicht offiziell unterstützt.
Dazu gehört zum Beispiel auch _Windows Embedded_.
ifdef::onprem[]
Für die Überwachung älterer Windows-Editionen, wie z.B. Windows Server 2008, können Sie auf eigenes Risiko einen *Legacy-Agenten* verwenden.
Ein Legacy-Agent ist ein Agent einer älteren {CMK}-Version ohne Agent Controller, 
der dann auch nicht die an den Agent Controller gekoppelten Features bietet wie TLS-Verschlüsselung und Datenkomprimierung.
Legacy-Agenten stellen wir link:https://download.checkmk.com/legacy-agents/[hier zum Download^] zur Verfügung.
Für einen Legacy-Agenten sind einige Besonderheiten zu beachten, die im xref:post_install[Installationskapitel] zusammengefasst sind.
endif::[]

Die Installation, Registrierung und Einrichtung des Agenten ist mit wenigen Schritten erledigt, denn dieser braucht für seine Funktion zum Beispiel keine zusätzlichen Bibliotheken.
Zudem wird der Agent mit einer Grundkonfiguration ausgeliefert, die für die meisten Anwendungsfälle ausreicht.


[#agent_architecture]
== Architektur des Agenten

Der {CMK}-Agent besteht aus dem Agentenprogramm und dem Agent Controller, der mit dem Agent Receiver auf dem {CMK}-Server kommuniziert.
Im allgemeinen Artikel über die xref:wato_monitoringagents#agents[Monitoring-Agenten] finden Sie Einzelheiten zur gemeinsamen Architektur von xref:agent_linux#[Linux-Agent] und Windows-Agent.
In diesem Kapitel geht es um die für Windows spezifische Implementierung.

Das *Agentenprogramm* `check_mk_agent.exe` ist zuständig für die Sammlung der Monitoring-Daten.
Es wird als Windows-Dienst unter dem LocalSystem-Konto gestartet.
Es sammelt bei einem Aufruf Daten zu dem lokalen System und stellt sie dem Agent Controller zur Verfügung.

Das Agentenprogramm ist minimalistisch, sicher, leicht erweiterbar und umfassend, denn es hat Zugriff auf wichtige Daten,
ifdef::onprem[]
die per WMI oder SNMP nicht erreichbar sind.
In einigen Fällen kann allerdings die Überwachung per SNMP *zusätzlich* zum {CMK}-Agenten sinnvoll sein.
Im Artikel zur xref:snmp#snmp_cmk_agent[Überwachung mit SNMP] finden Sie mehr zu diesem Thema.
endif::[]
ifdef::saas[]
die auf anderen Wegen nicht erreichbar sind.
endif::[]
Außerdem ist das Agentenprogramm so transparent, wie es eine als ausführbar gelieferte Datei sein kann, 
denn Sie haben jederzeit Zugriff auf den Quellcode und damit Einsicht in die Funktionalität und können den Agenten prinzipiell auch selbst kompilieren.

Der *Agent Controller* `cmk-agent-ctl.exe` kümmert sich um den Transport der vom Agentenprogramm gesammelten Daten.
Er wird als Hintergrundprozess unter dem LocalSystem-Konto von Windows ausgeführt.
// Agent Controller Port 6556, Agentenprogramm Port 50001 (aber Änderung mit Werks #13860, #14360)
Im Pull-Modus lauscht er am TCP-Port 6556 auf eingehende Verbindungen der {CMK}-xref:glossar#site[Instanz] und fragt das Agentenprogramm über _Mailslot_ ab.


[#install]
== Installation

ifdef::onprem[]
{CMK} bietet Ihnen für die Installation des Windows-Agenten verschiedene Wege -- von der manuellen Installation des Software-Pakets bis hin zur vollautomatischen Verteilung inklusive Update-Funktion.
Manche davon stehen nur in den kommerziellen Editionen zur Verfügung:

[cols="30,50,~,~",options="header"]
|===
|Methode |Beschreibung |{RE} |Kommerzielle Editionen
|Mitgeliefertes MSI-Paket |Einfache Installation eines Standard-Agenten mit manueller Konfiguration über Konfigurationsdateien. |X |X
|MSI-Paket aus der xref:glossar#agent_bakery[Agentenbäckerei] |Konfiguration über die GUI, individuelle Konfiguration pro Host möglich. | |X
|xref:agent_deployment#[Automatisches Update] |Das Paket aus der Agentenbäckerei wird erstmalig von Hand oder per Skript installiert und von da an automatisch aktualisiert. | |X
|===

Alternativ können Sie das MSI-Paket auch über andere Wege, wie zum Beispiel das Microsoft Active Directory, verteilen.
Die Installation kann hier durch das MSI-Format komplett automatisiert werden.
endif::[]

ifdef::saas[]
In {CE} (SaaS) ist der Standardweg, einen Agenten zu installieren, die für Autoregistrierung und Push-Modus vorbereiteten Agentenpakete zu nutzen.
Neben diesen stehen sogenannte _Vanilla_-Agenten ohne Vorkonfiguration zur Verfügung, die auch mit den On-Premises-Editionen von {CMK} benutzt werden können, aber mehr Aufwand bei der Einrichtung erfordern.

Die Verwendung der Vanilla-Agenten kann für das Debugging sinnvoll sein, oder wenn Sie Betriebssystem-Images erstellen wollen, die unabhängig von einer {CMK}-Edition oder -Instanz verwendet werden können.
Dazu später mehr.
endif::[]


[#download]
=== Download des MSI-Pakets

Sie installieren den Windows-Agenten durch Installation des MSI-Pakets.

Vor der Installation müssen Sie das Paket holen und auf den Host bringen (zum Beispiel mit `scp` oder WinSCP), auf dem der Agent laufen soll.
 

[#download_gui]
==== Paket per {CMK}-GUI holen

ifdef::onprem[]
In {CRE} finden Sie das Windows-Paket des Agenten über [.guihint]#Setup > Agents > Windows#.
In den kommerziellen Editionen gelangen Sie im [.guihint]#Setup#-Menü über [.guihint]#Agents > Windows, Linux, Solaris, AIX# zunächst in die xref:wato_monitoringagents#bakery[Agentenbäckerei], wo Sie die gebackenen Pakete finden.
Von dort aus kommen Sie mit dem Menüeintrag [.guihint]#Related > Windows files# zur Liste der Agentendateien:

.Auf der Download-Seite finden Sie das MSI-Paket
image::agent_windows_agent_files.png[alt="Download-Seite mit dem MSI-Paket."]

Alles, was Sie brauchen, finden Sie gleich im ersten Kasten mit dem Namen [.guihint]#Packaged Agents#:
die fertige MSI-Paketdatei `check_mk_agent.msi` für die Installation des Windows-Agenten mit Standardeinstellungen.
endif::[]

ifdef::saas[]
{CE} verfügt mit der xref:glossar#agent_bakery[Agentenbäckerei] über ein Software-Modul zum automatischen Paketieren von individuell angepassten Agenten.
Sie gelangen im [.guihint]#Setup#-Menü über [.guihint]#Agents > Windows, Linux, Solaris, AIX# in diese Agentenbäckerei.

Dort finden Sie vorbereitete Pakete für jeden Ordner, der für die Autoregistrierung konfiguriert ist.
Im Auslieferungszustand ist das der Ordner `preconfigured_agent`.
Hier erfolgt die Registrierung des Agenten automatisch nach der Installation des Agentenpakets.
Eine manuelle Registrierung, wie im folgenden xref:registration[Kapitel] beschrieben, ist _nicht_ notwendig.

// FIXME Schriftgröße im Screenshot
.In der Agentenbäckerei laden Sie für Push-Modus und Autoregistrierung vorkonfigurierte Agentenpakete herunter
image::agent_linux_bakery_saas.png[alt="Vorkonfigurierte Agenten in der Agentenbäckerei."]

Eine ausführliche Beschreibung der Konfiguration individueller Agentenpakete mit der Agentenbäckerei finden Sie im allgemeinen Artikel über die xref:wato_monitoringagents#[Agenten.]

Sollten Sie einen Vanilla-Agenten benötigen, verwenden Sie den ersten Agenten in der Liste, welcher mit [.guihint]#Default configuration# markiert ist.
endif::[]


==== Paket per REST-API holen

Die xref:rest_api#[REST-API] von {CMK} bietet die folgenden Möglichkeiten Agentenpakete vom {CMK}-Server herunterzuladen:

ifdef::onprem[]
* Herunterladen des mitgelieferten Agenten.
* Herunterladen eines individuell vorbereiteten Agenten Host-Name und Betriebssystem.
* Herunterladen eines individuell vorbereiteten Agenten nach Hash des Agenten und Betriebssystems.
endif::[]

ifdef::saas[]
* Herunterladen eines individuell vorbereiteten Agenten Host-Name und Betriebssystem.
* Herunterladen eines individuell vorbereiteten Agenten nach Hash des Agenten und Betriebssystems.
* Herunterladen des mitgelieferten Vanilla-Agenten ohne Autoregistrierung.
endif::[]

Per REST-API haben Sie die Möglichkeit, das Paket vom {CMK}-Server direkt auf den Zielrechner zu holen.

ifdef::saas[]
Im xref:intro_setup#onboarding_guide[Onboarding Guide] unter [.guihint]#Add hosts > Command line download and install# können Sie sich nach Anklicken des Windows-Icons das PowerShell-Kommando anzeigen lassen, mit dem Sie den für Autoregistrierung im Ordner `preconfigured_agent` vorbereiteten Agenten herunterladen.

// FIXME Schriftgröße im Screenshot
// FIXME Screenshot mit Windows PowerShell-Kommando
image::agent_linux_onboard_curl.png[alt="Kompletter Download-Befehl, der bereits Nutzername und Passwort enthält."]
endif::[]

ifdef::onprem[]
Das mitgelieferte MSI-Paket des Windows-Agenten lässt sich beispielsweise mit dem folgenden `curl`-Kommando holen.
In neueren Windows-Versionen wird `curl` bereits mitgeliefert, in älteren müssen Sie sich vorher die `curl`-Kommandoumgebung per link:https://curl.se/windows/[curl for Windows^] extra installieren. 

[{shell}]
----
C:\Users\hhirsch\Downloads\> curl -OJG "\http://mycmkserver/mysite/check_mk/api/1.0/domain-types/agent/actions/download/invoke" ^
--header "Accept: application/octet-stream" ^
--header "Authorization: Bearer automation myautomationsecret" ^
--data-urlencode "os_type=windows_msi" 
----

*Hinweis:* Der Befehl wurde zugunsten der Lesbarkeit in vier Zeilen aufgeteilt.

Hierbei handelt es sich nur um ein einfaches Beispiel, um die Funktionsweise dieses einen REST-API-Endpunkts zum Herunterladen des Agenten zu demonstrieren.
endif::[]

Details zu diesem und anderen REST-API-Endpunkten finden Sie in der API-Dokumentation, die Sie in {CMK} über [.guihint]#Help > Developer resources > REST API documentation# aufrufen können.


[#install_package]
=== Paket installieren

[#install_manual]
==== Manuelle Installation

Nachdem Sie das MSI-Paket geholt und -- falls nötig -- mit `scp`, WinSCP oder anderen Mitteln auf den zu überwachenden Host kopiert haben, starten Sie die Installation entweder per Doppelklick auf die MSI-Datei oder wie folgt von der Kommandozeile:

[{shell}]
----
C:\Users\hhirsch\Downloads\> check_mk_agent.msi
----

Sie erhalten die Startseite des Setup-Assistenten:

.Die Installation startet mit einem Willkommen
image::agent_windows_setup_wizard_1.png[alt="Startseite des Setup-Assistenten."]

Mit den [.guihint]#Next#-Knöpfen hangeln Sie sich durch die Seiten des Assistenten.
Akzeptieren Sie die Lizenzbedingungen der [.guihint]#GNU GENERAL PUBLIC LICENSE#, um fortzufahren.
Anschließend präsentiert Ihnen der Setup-Assistent die folgende Seite:

[#agent_windows_setup_wizard_3b]
.Auswahlmöglichkeiten bei der Installation des Agenten
image::agent_windows_setup_wizard_3b.png[alt="Seite des Setup-Assistenten zum Vorgehen beim Update eines alten Agenten."]

ifdef::onprem[]
// Default ist: Migrate from Legacy Windows Agent (pre 1.6) configuration if present: funktioniert aber auch wie Clean installation
Die Auswahlmöglichkeiten dieser Seite sind für Sie nur dann relevant, wenn bereits ein Windows-Agent auf dem Host installiert ist und dieser *älter* als Version {v16} ist.
In der Version {v16} hatte sich die Architektur des Windows-Agenten grundlegend geändert.
Falls Sie von einem Windows-Agenten *vor* Version {v16} auf den aktuellen Agenten updaten (oder _migrieren_), dann lesen Sie zuerst im {CMK}-Handbuch der Version {v20} das link:https://docs.checkmk.com/2.0.0/de/agent_windows.html#legacy[Kapitel zum alten Agenten.]
Dort erfahren Sie, welche der angebotenen Optionen Sie in diesem speziellen Update-Fall auswählen sollten.

In allen anderen Fällen empfehlen wir die Auswahl von [.guihint]#Clean installation.#
endif::[]

ifdef::saas[]
Wählen Sie hier [.guihint]#Clean installation.#
Die anderen angezeigten Optionen betreffen den kaum anzutreffenden Fall, dass Sie ein Windows-System ins Monitoring aufnehmen wollen, auf dem vor langer, langer Zeit ein Agent einer On-Premises-Edition von {CMK} installiert wurde.
endif::[]

Bestätigen Sie den Start der Installation und erlauben Sie dann noch im Dialog zur Benutzerkontensteuerung ([.guihint]#User Account Control#), dass das Installationsprogramm Änderungen durchführen darf.
Nach dem Abschluss können Sie den Setup-Assistenten beenden.

ifdef::onprem[]
Nach der Installation wird der Agent sofort als Windows-Dienst gestartet und ist für die Überwachung des Systems bereit.
endif::[]
ifdef::saas[]
Nach der Installation wird der Agent sofort als Windows-Dienst gestartet.
Bei dem für Autoregistrierung vorkonfigurierten Agentenpaket wird nun die {CMK}-Instanz kontaktiert, nach wenigen Minuten steht dann der Host mit ersten Monitoring-Daten bereit.
endif::[]


[#install_unattended]
==== Unbeaufsichtigte Installation

Windows bietet über die Kommandozeile für Administratoren mit `msiexec` die Möglichkeit, MSI-Pakete automatisiert, ohne Benutzerinteraktion zu installieren.
Eine automatisierte Installation kann dann zum Beispiel folgendermaßen aussehen:

[{shell}]
----
C:\Users\hhirsch\Downloads\> msiexec /i check_mk_agent.msi /qn
----

In diesem Fall wird der Agent ohne Benutzerinteraktion und Benutzeroberfläche (`/qn`) installiert (`/i`) und ebenfalls sofort als Windows-Dienst gestartet.
Diese Methode eignet sich also hervorragend zum automatischen Verteilen des Agenten auf viele Hosts.

Sie können auf diesem Wege auch die drei Optionen auswählen, die Ihnen während der manuellen Installation xref:agent_windows_setup_wizard_3b[im Setup-Assistenten] angeboten wurden.
Für jede Option gibt es einen Bezeichner, den Sie für das Installationskommando verwenden können:

[cols="65,~",options="header"]
|===
|Option im Setup-Assistenten | Bezeichner
|[.guihint]#Clean installation.# |`WIXUI_CLEANINSTALL`
|[.guihint]#Remove Legacy Windows Agent (pre 1.6) if present.# |`WIXUI_REMOVELEGACY`
|[.guihint]#Migrate from Legacy Windows Agent (pre 1.6) configuration if present.# |`WIXUI_MIGRATELEGACY`
|===

Um eine Option zu _aktivieren_, hängen Sie deren Bezeichner gefolgt von einem Gleichheitszeichen an:

[{shell}]
----
C:\Users\hhirsch\Downloads\> msiexec /i check_mk_agent.msi /qn WIXUI_CLEANINSTALL=
----

Um eine Option explizit zu _deaktivieren_, müssen Sie hinter dem Gleichheitszeichen noch zwei Anführungszeichen anfügen:

[{shell}]
----
C:\Users\hhirsch\Downloads\> msiexec /i check_mk_agent.msi /qn WIXUI_MIGRATELEGACY=""
----


ifdef::onprem[]
=== Installation mit der Agentenbäckerei

{cee-only}
Die kommerziellen Editionen verfügen mit der xref:glossar#agent_bakery[Agentenbäckerei] über ein Software-Modul zum automatischen Paketieren von individuell angepassten Agenten.
Eine ausführliche Beschreibung dazu finden Sie im allgemeinen Artikel über die xref:wato_monitoringagents#[Agenten].
Die Installation des gebackenen MSI-Pakets geschieht genauso wie es für die mitgelieferten Pakete xref:install_package[oben] beschrieben ist.

Ab {CE} können Sie die Agentenbäckerei zusätzlich nutzen, um Agentenpakete mit einer Konfiguration für die Autoregistrierung zu versehen,
was die xref:hosts_autoregister#[automatische Erstellung von Hosts] ermöglicht.
In diesem Fall erfolgt die Registrierung des Agenten automatisch nach der Installation des Agentenpakets
und eine manuelle Registrierung, wie im folgenden xref:registration[Kapitel] beschrieben, ist _nicht_ mehr notwendig.
endif::[]


=== Automatisches Update

ifdef::onprem[]
{cee-only}
endif::[]
Wenn Sie die Agentenbäckerei verwenden, können Sie automatische Updates des Agenten einrichten.
Diese werden in einem xref:agent_deployment#[eigenen Artikel] beschrieben.


ifdef::onprem[]
[#config_files]
=== Konfigurationsdateien des Agenten

Das MSI-Paket speichert bei der Installation die programmspezifischen Dateien in `C:\Program Files (x86)\checkmk\service\` und die Host-spezifischen Dateien in `C:\ProgramData\checkmk\agent\`.
Die programmspezifischen Dateien brauchen Sie nicht anzupassen.
Mit den Host-spezifischen Dateien werden Plugins, Log- und Konfigurationsdateien abgelegt und das Verhalten des Agenten konfiguriert.

*Hinweis*: Standardmäßig ist das gesamte Verzeichnis `C:\ProgramData` in Windows versteckt (_hidden_).

Der Agent liest nacheinander drei Konfigurationsdateien ein:

. `C:\Program Files (x86)\checkmk\service\check_mk.yml` +
ist die Standardkonfigurationsdatei, die Sie nicht ändern sollten.
. `C:\ProgramData\checkmk\agent\bakery\check_mk.bakery.yml` +
wird von der Agentenbäckerei erstellt und sollte nicht manuell geändert werden.
. `C:\ProgramData\checkmk\agent\check_mk.user.yml` +
ist Ihre Konfigurationsdatei, in der Sie von Hand individuelle Anpassungen vornehmen können, um eine Einstellung oder eine Erweiterung auf einem Host zu testen.

Wird eine Option in mehreren Dateien gesetzt, dann bestimmt die zuletzt eingelesene Datei den Wert dieser Option.
Für das manuelle Arbeiten mit dem Agenten ist also lediglich die letzte Konfigurationsdatei `check_mk.user.yaml` relevant, weil sie als letzte eingelesen wird und damit _das letzte Wort hat_.
Wenn die Agentenbäckerei nicht genutzt wird, ist sie sogar die einzige Datei, in der Anpassungen an der Konfiguration des Agenten vorgenommen werden dürfen.

Wie Sie vielleicht schon an der Dateiendung der Konfigurationsdateien erkannt haben, wird als Dateiformat link:https://de.wikipedia.org/wiki/YAML[YAML^] verwendet.
endif::[]


ifdef::saas[]
=== Konfigurationsdateien des Agenten

Eine Übersicht der Konfigurationsdateien finden Sie am xref:config_files[Ende des Artikels.]
endif::[]


[#post_install]
=== Wie geht es weiter nach der Installation?

ifdef::saas[]
[TIP]
====
Dieser Abschnitt ist für Sie nur relevant, wenn Sie einen nicht für die Autoregistrierung vorkonfigurierten Vanilla-Agenten installiert haben. 
====
endif::[]

Nach der Installation des Agenten mit Agent Controller ist der nächste Schritt die xref:registration[Registrierung], mit der die TLS-Verschlüsselung eingerichtet wird, so dass die verschlüsselte Agentenausgabe vom {CMK}-Server entschlüsselt und im Monitoring angezeigt werden kann.

Eine Besonderheit gibt es, falls der Agent mit Agent Controller erstmalig installiert wurde.
Dann schaltet der Agent in den unverschlüsselten *Legacy-Pull-Modus*,
ifdef::onprem[]
damit der {CMK}-Server nicht von den Monitoring-Daten abgeschnitten wird und diese weiterhin anzeigen kann.
endif::[]
ifdef::saas[]
damit ein {CMK}-Server einer On-Premises-Edition nicht von den Monitoring-Daten abgeschnitten wird und diese weiterhin anzeigen kann.
endif::[]
Das betrifft sowohl eine Neuinstallation als auch das Update eines Agenten der Version {v20} und älter.

ifdef::onprem[]
Im Monitoring sieht das dann etwa so aus:

.Warnung im {CMK}-Monitoring, dass TLS noch nicht genutzt wird
image::agent_windows_service_legacy_pull_mode.png[alt="Der WARN-Zustand des 'Check_MK' Services wegen fehlender Verschlüsselung."]

Die {CMK}-Instanz erkennt an der Agentenausgabe, dass der Agent Controller vorhanden und damit die TLS-Verschlüsselung möglich ist -- aber noch nicht eingeschaltet ist.
Der Service [.guihint]#Check_MK Agent# wechselt in den Zustand {WARN} und bleibt es so lange, bis Sie die Registrierung durchgeführt haben.
Nach der Registrierung wird nur noch im verschlüsselten Pull-Modus kommuniziert.
Der Legacy-Pull-Modus wird abgeschaltet und bleibt es auch.
Allerdings kann er im Bedarfsfall xref:deregister[per Kommando] wieder eingeschaltet werden.

Anders liegt der Fall bei Nutzung eines *Legacy-Agenten* auf einem sehr alten xref:legacyagent[Windows-System].
Ohne Agent Controller ist keine Registrierung möglich.
Für einen Legacy-Agenten sind im Kapitel xref:registration[Registrierung] daher nur die Abschnitte relevant, um den Host ins Setup und anschließend ins Monitoring aufzunehmen.
Im Kapitel xref:test[Test und Fehlerdiagnose] können Sie sich den Test zum Aufruf des Agent Controllers sparen, da dieser bei einem Legacy-Agenten nicht vorhanden ist.
Da es ohne Agent Controller auch keine TLS-Verschlüsselung gibt, müssen Sie bei Bedarf andere Wege der Verschlüsselung wählen.
Wir empfehlen, in diesem Fall die eingebaute (symmetrische) Verschlüsselung zu nutzen, sie wird mit der Regel [.guihint]#Symmetric encryption (Linux, Windows)# eingerichtet.

*Hinweis:* Im Regelsatz [.guihint]#Checkmk Agent installation auditing# finden Sie verschiedene Einstellungen, um den Zustand des Agenten zu prüfen und im Monitoring sichtbar zu machen.
Unter anderem können Sie hier festlegen, welchen Zustand der Service [.guihint]#Check_MK Agent# bei einer noch nicht durchgeführten TLS-Konfiguration haben soll.
endif::[]


[#registration]
== Registrierung

ifdef::saas[]
[TIP]
====
Dieses Kapitel ist vor allem relevant, wenn Sie einen nicht für die Autoregistrierung vorkonfigurierten Vanilla-Agenten installiert haben oder vorhandene Hosts aus dem Monitoring einer On-Premises-Edition von {CMK} zu {CE} (SaaS) migrieren wollen.
Es kann auch hilfreich sein, wenn die Autoregistrierung – aus welchen Gründen auch immer – einmal fehlschlägt.
====
endif::[]


[#overview]
=== Übersicht und Voraussetzungen

Unmittelbar nach der Installation des Agenten (auch als Update eines Agenten der Version {v20} und älter) ist nur unverschlüsselte Kommunikation im Legacy-Pull-Modus möglich.
Eine ausschließlich verschlüsselte Datenübertragung ist erst nach Aufbau eines Vertrauensverhältnisses aktiv.

Eine Ausnahme hiervon sind die für die xref:hosts_autoregister#[Autoregistrierung] vorkonfigurierten und via Agentenbäckerei heruntergeladenen Pakete.
Diese Pakete führen die Registrierung automatisch nach der Installation durch.

In allen anderen Fällen führen Sie die manuelle Registrierung zeitnah nach der Installation des Agenten durch.
Wie Sie dies bewerkstelligen, zeigt dieses Kapitel.

Die Registrierung und damit die Herstellung des gegenseitigen Vertrauensverhältnisses erfolgt unter einem {CMK}-Benutzer mit Zugriff auf die xref:rest_api#[REST-API.]
Dafür bietet sich der xref:glossar#automation_user[Automationsbenutzer] `agent_registration` an, der nur die Berechtigung zur Registrierung von Agenten besitzt und bei jeder {CMK}-Installation automatisch angelegt wird.
Das zugehörige Automationspasswort (_automation secret_) können Sie mit icon:icon_random[alt="Symbol zum Auswürfeln eines Passworts."] auswürfeln.

ifdef::onprem[]
*Hinweis:* Da es auf sehr alten xref:legacyagent[Windows-Systemen] keinen Agent Controller, und da mit keine Registrierung und TLS-Verschlüsselung gibt, 
müssen Sie bei Bedarf andere Wege der Verschlüsselung wählen.
Wir empfehlen, in diesem Fall die eingebaute (symmetrische) Verschlüsselung zu nutzen, sie wird mit der Regel [.guihint]#Symmetric encryption (Linux, Windows)# eingerichtet.
endif::[]


ifdef::saas[]
==== Voraussetzungen für Ihre Firewall

Damit die Registrierung auf dem ins Monitoring aufzunehmenden Host durchgeführt werden kann, muss dieser die REST-API des {CMK}-Servers (Port 443) und den Agent Receiver (Port 8000) erreichen können.
Lesen Sie den Abschnitt xref:networkrequirements[Netzwerkumgebung für die Registrierung] für Hintergründe und Details.
endif::[]


=== Host ins Setup aufnehmen

Erstellen Sie zunächst den neuen Host über [.guihint]#Setup > Hosts > Add host#.
Ein Host muss in der xref:glossar#configuration_environment[Konfigurationsumgebung] existieren, bevor er registriert werden kann.

ifdef::onprem[]
Ab {CE} finden Sie in den Eigenschaften des Hosts im Abschnitt zu den xref:hosts_setup.html#monitoring_agents[Monitoring-Agenten] die Option [.guihint]#Checkmk agent connection mode.#
Hier können Sie alternativ zum Pull-Modus, der in allen Editionen verfügbar ist, für den {CMK}-Agenten den Push-Modus aktivieren.
endif::[]


=== Host beim Server registrieren

Die Registrierung erfolgt mit dem Agent Controller `cmk-agent-ctl`, der für die Konfiguration der Verbindungen eine Kommandoschnittstelle bietet.
Sie können sich mit `cmk-agent-ctl help` die Kommandohilfe anzeigen lassen, auch spezifisch für die verfügbaren Subkommandos, z.B. mit `cmk-agent-ctl help register`.

Ob der Host dabei für den Pull-Modus oder den Push-Modus konfiguriert ist, macht für die Befehlsbeispiele keinen Unterschied.
In welchem Modus der Agent Controller arbeiten soll, teilt ihm der Agent Receiver bei der Registrierung mit.

Begeben Sie sich nun zum Host, der registriert werden soll.
Hier ist mit Administratorrechten eine Anfrage an die {CMK}-xref:glossar#site[Instanz] zu stellen:

[{shell}]
----
C:\Windows\system32> "C:\Program Files (x86)\checkmk\service\cmk-agent-ctl.exe" ^
    register ^
    --hostname mynewhost ^
    --server cmkserver --site mysite ^
    --user agent_registration --password "PTEGDYXBFXVGNDPRL"
----

Dabei ist der Host-Name hinter der Option `--hostname` exakt so anzugeben, wie zuvor beim Erstellen im Setup.
Die Optionen `--server` und `--site` geben den Namen des {CMK}-Servers und der Instanz an.
Der Server-Name darf auch die IP-Adresse sein, der Instanzname (hier `mysite`) entspricht demjenigen, den Sie im URL-Pfad der Weboberfläche sehen. 
Komplettiert werden die Optionen durch Name und Passwort des Automationsbenutzers.
Wenn Sie die Option `--password` auslassen, wird das Passwort interaktiv abgefragt.

*Vorsicht, Falle:* Falls Sie vorrangig Unix-Maschinen administrieren, sind Sie es gewohnt, Pfade oder Parameter mit Leer- oder Sonderzeichen in einfachen Anführungszeichen (_apostrophes_, `0x27`) zu umschließen.
Dieses Zeichen interpretiert Windows als Teil des Aufrufs – hier des Passworts –, und die Registrierung wird fehlschlagen.
Verwenden Sie stattdessen doppelte Anführungszeichen (_quotation marks_, `0x22`).

Waren die angegebenen Werte korrekt, werden Sie aufgefordert, die Identität der {CMK}-Instanz zu bestätigen, zu der Sie die Verbindung herstellen wollen.
Das zu bestätigende Server-Zertifikat haben wir aus Gründen der Übersichtlichkeit stark verkürzt:

[{shell}]
----
Attempting to register at cmkserver:8000/mysite. Server certificate details:

PEM-encoded certificate:
---BEGIN CERTIFICATE---
MIIC6zCCAdOgAwIBAgIUXbSE8FXQfmFqoRNhG9NpHhlRJ40wDQYJKoZIhvcNAQEL
[...]
nS+9hN5ILfRI+wkdrQLC0vkHVYY8hGIEq+xTpG/Pxw==
---END CERTIFICATE---

Issued by:
	Site 'mysite' local CA
Issued to:
	localhost
Validity:
	From Thu, 10 Feb 2022 15:13:22 +0000
	To   Tue, 13 Jun 3020 15:13:22 +0000

Do you want to establish this connection? [Y/n]
> #Y#
----

Bestätigen Sie mit `Y`, um den Vorgang abzuschließen.

Falls keine Fehlermeldung angezeigt wird, ist die verschlüsselte Verbindung hergestellt.
Über diese Verbindung werden alle Daten komprimiert übertragen.

Wenn Sie die interaktive Zertifikatsprüfung – beispielsweise, um die Registrierung komplett automatisieren zu können – abschalten wollen, können Sie den zusätzlichen Parameter `--trust-cert` verwenden.
Dem übermittelten Zertifikat wird dann automatisch vertraut.
Beachten Sie in diesem Fall, dass Sie auf anderem Weg die Integrität des Zertifikats sicher stellen sollten.
Dies kann (von Hand oder per Skript) durch Kontrolle der xref:files[Datei] `/var/lib/cmk-agent/registered_connections.json` erfolgen.


[#autoregister]
=== Host beim Server automatisch registrieren lassen

ifdef::onprem[]
{CMK} bietet ab {CE} die Möglichkeit, Hosts automatisch bei der Registrierung anzulegen.
Für die xref:hosts_autoregister#[Autoregistrierung] benötigen Sie zusätzlich zu einem Benutzer mit der Berechtigung Hosts zu registrieren, mindestens einen Ordner, der für die Aufnahme der automatisch zu erstellenden Hosts konfiguriert ist.
endif::[]

ifdef::saas[]
Sie haben die Möglichkeit, zusätzlich zu den mitgelieferten eigene Pakete für die xref:hosts_autoregister#[Autoregistrierung] zu erstellen.
Neben einem Benutzer mit der Berechtigung Hosts zu registrieren, benötigen Sie dazu mindestens einen Ordner, der für die Aufnahme der automatisch zu erstellenden Hosts konfiguriert ist.
endif::[]

Ist dies der Fall, können Sie die Registrierung inklusive automatischer Erstellung des Hosts auch per Kommandozeile vornehmen.

In der Regel werden Sie den Weg über die xref:hosts_autoregister#rule_autoregister_bakery[Einstellungen der Agentenbäckerei] gehen, 
welche die Konfigurationsdatei `/var/lib/cmk-agent/pre_configured_connections.json` ins Agentenpaket integrieren und die Registrierung automatisch bei der Installation vornehmen.
Der hier vorgestellte Kommandozeilenaufruf dient daher primär dem Test und der Fehlersuche, beispielsweise dem Ausprobieren eigener _Agenten-Labels_ mit der Option `--agent-labels <KEY=VALUE>`.

[{shell}]
----
C:\Windows\system32> "C:\Program Files (x86)\checkmk\service\cmk-agent-ctl.exe" ^
    register-new ^
    --server cmkserver --site mysite ^
    --agent-labels testhost:true ^
    --user agent_registration --password "PTEGDYXBFXVGNDPRL"
----

Größter Unterschied hier ist das geänderte Subkommando `register-new` in Zusammenspiel mit Angabe des Benutzers für die Autoregistrierung.
Beide zusammen fragen an der {CMK}-Instanz die Erstellung eines neuen Hosts an.
Als Name des Hosts wird der in der Umgebungsvariable `%COMPUTERNAME%` hinterlegte verwendet.
Die anschließende Bestätigung des Zertifikats entspricht der im letzten Abschnitt gezeigten.

Ob der Host
ifdef::onprem[]
im Pull-Modus,
endif::[]
im Push-Modus oder überhaupt nicht angelegt wird, entscheiden Ihre Einstellungen des Regelsatzes [.guihint]#Agent registration.#
Nach erfolgreicher Registrierung können mehrere Minuten vergehen, bis der Host im Monitoring auftaucht.


=== Vertrauensverhältnis überprüfen

Das Kommando `cmk-agent-ctl status` zeigt nun genau ein Vertrauensverhältnis zum {CMK}-Server:

[{shell-raw}]
----
C:\Windows\system32> "C:\Program Files (x86)\checkmk\service\cmk-agent-ctl.exe" status
Connection: 12.34.56.78:8000/mysite
	UUID: d38e7e53-9f0b-4f11-bbcf-d196deadbeef
	Local:
		Connection type: pull-agent
		Certificate issuer: Site 'mysite' local CA
		Certificate validity: Mon, 21 Feb 2022 11:23:57 +0000 - Sat, 24 Jun 3020 11:23:57 +0000
	Remote:
		Connection type: pull-agent
		Host name: mynewhost
----

Ist die Information in einem maschinenlesbaren Format erforderlich, hängen Sie den zusätzlichen Parameter `--json` an, um die Ausgabe als JSON-Objekt formatiert zu erhalten.

*Hinweis:* Es kann stets nur ein Vertrauensverhältnis zwischen Host und Instanz geben.
Wenn Sie beispielsweise den bereits registrierten Host `mynewhost` unter anderem Namen (`mynewhost2`), aber mit der gleichen IP-Adresse registrieren, dann ersetzt die neue Verbindung die bestehende.
Die Verbindung von `mynewhost` zur Instanz wird gelöst und für den Host werden keine Agentendaten mehr für das Monitoring geliefert.


[#proxyregister]
=== Im Auftrag registrieren

ifdef::saas[]
[TIP]
====
Dieser Abschnitt hat dank der Verfügbarkeit der Autoregistrierung für {CE} (SaaS) wenig Relevanz.
Falls Sie die _Registrierung im Auftrag_ beispielsweise zusammen mit Infrastruktur-Management-Werkzeugen bereits mit den On-Premises-Editionen von {CMK} verwenden, können Sie dies auch weiterhin mit {CE} (SaaS) tun.
====
endif::[]

Zur leichteren Registrierung mehrerer Hosts kann ein beliebiger Host, auf dem der Agent installiert ist, eine Registrierung im Auftrag anderer durchführen.
Dabei wird eine JSON-Datei exportiert, die dann auf den Ziel-Host übertragen und dort importiert werden kann.
Auch hier gilt wie zuvor: Der im Auftrag registrierte Host muss in der Instanz bereits eingerichtet sein.

Zunächst wird auf einem beliebigen im Setup befindlichen Host die Registrierung stellvertretend durchgeführt.
ifdef::onprem[]
Hier bietet sich natürlich der {CMK}-Server an, der in der Regel als erster Host eingerichtet wird.
endif::[]
Wie beim Beispiel oben gilt, dass Sie das Passwort per Option übergeben können oder interaktiv danach gefragt werden, wenn Sie die Option `--password` weglassen.
Die JSON-Ausgabe leiten wir im Beispiel in eine Datei um:

[{shell}]
----
{c-root} cmk-agent-ctl proxy-register \
    --hostname mynewhost3 \
    --server cmkserver --site mysite \
    --user agent_registration > /tmp/mynewhost3.json
----

Nun übertragen wir die Datei `/tmp/mynewhost3.json` auf den Host, für den wir die Registrierung durchgeführt haben, und importieren die Datei:

[{shell}]
----
C:\Windows\system32> "C:\Program Files (x86)\checkmk\service\cmk-agent-ctl.exe" ^
    import %TEMP%\mynewhost3.json
----


=== Host ins Monitoring aufnehmen

ifdef::onprem[]
Sobald die Registrierung fertiggestellt ist, führen Sie im Setup des {CMK}-Servers einen xref:wato_monitoringagents#diagnosticpage[Verbindungstest] und eine xref:wato_services#discovery[Service-Erkennung] durch.
endif::[]
ifdef::saas[]
Sobald die Registrierung fertiggestellt ist, führen Sie im Setup des {CMK}-Servers eine xref:wato_services#discovery[Service-Erkennung] durch.
endif::[]
Anschließend nehmen Sie die gefundenen Services ins Monitoring auf, indem Sie als letzten Schritt xref:wato#activate_changes[die Änderungen aktivieren.]

ifdef::onprem[]
Falls der Verbindungstest fehlschlägt, finden Sie im xref:test[folgenden Kapitel] Informationen zu Test und Fehlerdiagnose.
endif::[]


[#deregister]
=== Host deregistrieren

Die Registrierung eines Hosts können Sie auch wieder rückgängig machen.

Auf einem Host, der mit dem {CMK}-Server verbunden ist, können Sie das Vertrauensverhältnis widerrufen.
Dabei ist im folgenden Kommando der anzugebende Universally Unique Identifier (UUID) derjenige, der beim Kommando `cmk-agent-ctl status` ausgegeben wird:

[{shell}]
----
C:\Windows\system32> "C:\Program Files (x86)\checkmk\service\cmk-agent-ctl.exe" ^
    delete d38e7e53-9f0b-4f11-bbcf-d196deadbeef
----

// Auch SaaS-Nutzer können das tun, but why?
ifdef::onprem[]
Um alle Verbindungen des Hosts zu entfernen *und* zusätzlich den Legacy-Pull-Modus wiederherzustellen, geben Sie folgendes Kommando ein:

[{shell}]
----
C:\Windows\system32> "C:\Program Files (x86)\checkmk\service\cmk-agent-ctl.exe" ^
    delete-all --enable-insecure-connections
----

Anschließend verhält sich der Agent wie nach der erstmaligen Installation und vor der ersten Registrierung und sendet seine Daten unverschlüsselt.
endif::[]

Komplettiert wird die Deregistrierung auf dem {CMK}-Server:
Im Setup wählen Sie auf der Seite [.guihint]#Properties of host# den Menüeintrag [.guihint]#Host > Remove TLS registration# aus und bestätigen die Nachfrage.

ifdef::onprem[]
Falls Sie die Kommandozeile bevorzugen:
Auf dem {CMK}-Server existiert für jede Verbindung eines registrierten Hosts, der sich im Monitoring befindet, ein Softlink mit der UUID, welcher auf den Ordner mit der Agentenausgabe zeigt:

[{shell-raw}]
----
{c-omd} cd ~/var/agent-receiver/received-outputs
{c-omd} ls -l d38e7e53-9f0b-4f11-bbcf-d19617971595
lrwxrwxrwx 1 mysite mysite 67 Feb 23 07:18 d38e7e53-9f0b-4f11-bbcf-d19617971595 -> /omd/sites/mysite/tmp/check_mk/data_source_cache/push-agent/mynewhost
----
endif::[]


ifdef::onprem[]
[#changepush]
=== Umstellung zwischen Push- und Pull-Modus

Ab {CCE} können Sie Hosts vom Push- zum Pull-Modus und umgekehrt umstellen.
Dies kann in Einzelfällen nötig sein, wenn Änderungen an der Netzwerktopologie anstehen oder ein Downgrade auf {CSE} durchgeführt werden soll, wo nur der Pull-Modus möglich sind.

Stellen Sie zunächst im Setup, in den Eigenschaften des Hosts, den Zugriffsmodus mit der Option [.guihint]#Checkmk agent connection mode# um.
Innerhalb der nächsten Minute werden alle Services den Status {UNKNOWN} annehmen, weil keine Monitoring-Daten eingehen.
Führen Sie anschließend eine erneute Registrierung durch.
Bei dieser erneuten Registrierung teilt der Agent Receiver des {CMK}-Servers dem Agent Controller mit, ob er Daten im Pull- oder im Push-Modus erwartet.
Die anschließende Kontrolle mit `cmk-agent-ctl status` zeigt dann eine neue UUID und den Modus konsistent mit der Änderung im Setup an.
endif::[]


[#test]
== Test und Fehlerdiagnose

Ein modulares System kann an vielen Stellen nicht wie vorgesehen funktionieren.
Da beim Agenten die beiden Komponenten Agent Controller (auf dem Host) und Agent Receiver (auf dem {CMK}-Server) verwendet werden, gibt es mehrere Stellen, an denen etwas schiefgehen kann.
Bei der Fehlersuche ist daher eine strukturierte Vorgehensweise sinnvoll.
Selbstverständlich können Sie die hier beschriebene schrittweise Analyse auch nutzen, die Datenerhebung und Kommunikation von {CMK} näher kennenzulernen. 

ifdef::onprem[]
Alle Möglichkeiten, die es vom {CMK}-Server aus gibt, sind im allgemeinen Artikel über die xref:wato_monitoringagents#diagnostics[Monitoring-Agenten] beschrieben.
Aber natürlich gibt es noch weitere Diagnosemöglichkeiten, wenn man direkt auf dem überwachten Host angemeldet ist.
endif::[]

Wir arbeiten uns im Folgenden vom Agentenprogramm über den Agent Controller
ifdef::onprem[]
und den TCP-Port 6556
endif::[]
bis zur {CMK}-Instanz durch.
ifdef::onprem[]
Beim Agent Controller im Push-Modus überspringen Sie Tests auf Port 6556 – selbst wenn der Port 6556 vor der Registrierung geöffnet ist, wird er nach der Registrierung im Push-Modus geschlossen.
endif::[]
In den meisten Fällen können Sie nach Korrektur eines Fehlers die Service-Erkennung erneut starten und die Aufnahme ins Monitoring abschließen.


=== Prüfen der Konfiguration

Um zu prüfen, ob die Konfiguration so eingelesen wurde, wie Sie das erwarten, rufen Sie das Agentenprogramm mit der Option `showconfig` auf.
Mit dieser Option bekommen Sie nicht nur die Konfiguration ausgegeben, wie sie derzeit vom Agenten benutzt wird.
Zusätzlich werden auch immer die benutzten Umgebungsvariablen sowie die verwendeten Konfigurationsdateien angezeigt.

Ist nur ein bestimmter Teil der Konfiguration interessant, schränken Sie die Ausgabe auf diesen Teil ein.
Hier wird zum Beispiel geprüft, ob die Optionen der Sektion `ps` korrekt gesetzt sind:

[{shell}]
----
C:\Windows\system32> "C:\Program Files (x86)\checkmk\service\check_mk_agent.exe" showconfig ps
# Environment Variables:
# MK_LOCALDIR="C:\ProgramData\checkmk\agent\local"
# MK_STATEDIR="C:\ProgramData\checkmk\agent\state"
# MK_PLUGINSDIR="C:\ProgramData\checkmk\agent\plugins"
# MK_TEMPDIR="C:\ProgramData\checkmk\agent\tmp"
# MK_LOGDIR="C:\ProgramData\checkmk\agent\log"
# MK_CONFDIR="C:\ProgramData\checkmk\agent\config"
# MK_SPOOLDIR="C:\ProgramData\checkmk\agent\spool"
# MK_INSTALLDIR="C:\ProgramData\checkmk\agent\install"
# MK_MSI_PATH="C:\ProgramData\checkmk\agent\update"
# Loaded Config Files:
# system: 'C:\Program Files (x86)\checkmk\service\check_mk.yml'
# bakery: 'C:\ProgramData\checkmk\agent\bakery'
# user  : 'C:\ProgramData\checkmk\agent\check_mk.user.yml'

# ps
enabled: yes
use_wmi: yes
full_path: no
----

Über diesen Weg bekommen Sie einen schnellen Überblick, wie die drei verschiedenen xref:config_files[Konfigurationsdateien] vom Agentenprogramm zusammengeführt und benutzt werden. 
Fehler werden somit sofort sichtbar.


[#networkrequirements]
=== Netzwerkumgebung für die Registrierung

Schlägt die Registrierung eines Hosts im Monitoring fehl, ohne dass überhaupt das Zertifikat angezeigt wird, hilft Kenntnis der involvierten Netzwerkkommunikation bei der Identifizierung des Problems -- und natürlich bei der Behebung.

Nach Absetzen des Kommandos `cmk-agent-ctl register` fragt der Agent Controller zunächst mittels REST-API den {CMK}-Server nach dem Port des Agent Receivers.
Im zweiten Schritt wird eine Verbindung zum Agent Receiver aufgebaut, um das Zertifikat abzurufen.
Sie können die erste Anfrage auf dem Host mit einem Programm wie link:https://curl.se/windows/microsoft.html[`curl`^] simulieren:

[{shell-raw}]
----
C:\Windows\system32> curl.exe -v --insecure https://mycmkserver/mysite/check_mk/api/1.0/domain-types/internal/actions/discover-receiver/invoke
----

Der Parameter `--insecure` weist `curl` hier an, keine Zertifikatsprüfung vorzunehmen.
Dieses Verhalten entspricht dem Verhalten des Agent Controller an dieser Stelle.
Die Antwort ist lediglich wenige Bytes groß und besteht aus der Port-Nummer des Agent Receiver.
Bei der ersten Instanz auf einem Server wird die Antwort einfach `8000` lauten, bei der zweiten `8001` und so weiter.

ifdef::onprem[]
Typische Probleme bei dieser Anfrage sind:

* Der {CMK}-Server ist vom Host aus gar nicht erreichbar.
* Der von der REST-API verwendete Port weicht von den Standard-Ports 443 (https) oder 80 (http) ab.
endif::[]

ifdef::saas[]
Ein typisches Probleme bei dieser Anfrage ist, dass der {CMK}-Server vom Host aus gar nicht erreichbar ist.
endif::[]

Falls die obige Anfrage fehlschlägt, können Sie die Routing- oder Firewall-Einstellungen so verändern, dass der Zugriff möglich ist.

Wenn der zu registrierende Host einen HTTP-Proxy verwendet, nutzt `curl` diesen, `cmk-agent-ctl` jedoch nicht in den Standardeinstellungen.
Mit der zusätzlichen Option `--detect-proxy` weisen Sie `cmk-agent-ctl` an, den systemweit konfigurierten Proxy zu nutzen.

ifdef::onprem[]
Oft dürfte es am einfachsten sein, auf dem {CMK}-Server den Port des Agent Receiver auszulesen und zu notieren.
Führen Sie dazu den folgenden Befehl als Instanzbenutzer aus:

[{shell-raw}]
----
{c-omd} omd config show | grep AGENT_RECEIVER
AGENT_RECEIVER: on
AGENT_RECEIVER_PORT: 8000
----
endif::[]

Sie können nun den ermittelten Port bei der Registrierung direkt angeben und so die erste Anfrage via REST-API überspringen.
Die Kommunikation findet dann ohne Umwege direkt mit dem Agent Receiver statt:

[{shell}]
----
C:\Windows\system32> "C:\Program Files (x86)\checkmk\service\cmk-agent-ctl.exe" ^
    register ^
    --hostname mynewhost ^
    --server cmkserver:8000 --site mysite ^
    --user agent_registration --password PTEGDYXBFXVGNDPRL
----

Auch dieser Port 8000 muss vom Host aus erreichbar sein.
Ist er das nicht, erhalten Sie die eindeutige Fehlermeldung:

[{shell-raw}]
----
ERROR [cmk_agent_ctl] Connection refused (os error 111)
----

Analog zu Port 443
ifdef::onprem[]
(respektive 80)
endif::[]
oben können Sie jetzt die Routing- oder Firewall-Einstellungen so anpassen, dass der zu registrierende Host den {CMK}-Server auf dem Port des Agent Receiver (8000 oder 8001…) erreichen kann.

Im Falle der Registrierung im Push-Modus gilt:
Hat die Registrierung funktioniert, wird auch der minütliche Transfer der Agentenausgabe erfolgreich sein.

ifdef::onprem[]
Sollten Sicherheitsrichtlinien in Ihrer Umgebung den Zugriff auf den Agent Receiver nicht zulassen, haben sie die Möglichkeit, auf dem {CMK}-Server selbst die xref:proxyregister[Registrierung im Auftrag] vorzunehmen.
endif::[]
ifdef::saas[]
Sollten Sicherheitsrichtlinien in Ihrer Umgebung den Zugriff auf den Agent Receiver nicht zulassen, ist {CE}(SaaS) keine adäquate Lösung für das Monitoring dieses Hosts.
endif::[]


[#agent_ctl_dump]
=== Agent Controller im Dump-Modus

Da das Agentenprogramm unter dem LocalSystem-Konto aufgerufen werden muss, um exakt jene Daten zu liefern, die im Monitoring ankommen, sollten Sie es nie in einer Shell starten.
Wenn Sie die Agentenausgabe lokal untersuchen wollen, verwenden Sie den Agent Controller im _Dump-Modus_ (Subkommando `dump`).
Dieser startet das Agentenprogramm mit der richtigen Environment und unter der richtigen Nutzerkennung und gibt anschließend das Ergebnis aus.

Weil die Ausgabe etwas länger sein kann, ist der Pager `more` hier sehr praktisch.
Sie können Ihn mit der Taste Q verlassen:

[{shell-raw}]
----
C:\Windows\system32> "C:\Program Files (x86)\checkmk\service\cmk-agent-ctl.exe" dump | more
<<<check_mk>>>
Version: {current}
BuildDate: Mar 14 2023
AgentOS: windows
Hostname: DESKTOP-QVPV284
Architecture: 64bit
WorkingDirectory: C:\Windows\system32
ConfigFile: C:\Program Files (x86)\checkmk\service\check_mk.yml
LocalConfigFile: C:\ProgramData\checkmk\agent\check_mk.user.yml
AgentDirectory: C:\Program Files (x86)\checkmk\service
PluginsDirectory: C:\ProgramData\checkmk\agent\plugins
StateDirectory: C:\ProgramData\checkmk\agent\state
ConfigDirectory: C:\ProgramData\checkmk\agent\config
TempDirectory: C:\ProgramData\checkmk\agent\tmp
LogDirectory: C:\ProgramData\checkmk\agent\log
SpoolDirectory: C:\ProgramData\checkmk\agent\spool
LocalDirectory: C:\ProgramData\checkmk\agent\local
OnlyFrom:
<<<cmk_agent_ctl_status:sep(0)>>>
----

So können Sie überprüfen, welche Daten vom Agentenprogramm beim Agent Controller angekommen sind. 
Diese Ausgabe beweist aber noch nicht, dass der Agent auch über das Netzwerk erreichbar ist.


ifdef::onprem[]
=== Verbindungstest von außen

Ist im Pull-Modus sichergestellt, dass lokal das Agentenprogramm und die mitinstallierten Plugins korrekt ausgeführt werden,
können Sie als Nächstes vom {CMK}-Server per `netcat` (oder `nc`) prüfen, ob Port 6556 über die externe IP-Adresse des Hosts erreichbar ist:

// Anders als im Linux-Artikel wird hier das Kommando auf dem {CMK}-Server ausgeführt, da es unter Windows kein nc gibt.
[{shell}]
----
{c-omd} echo | nc 10.76.23.189 6556
16
----

Die Ausgabe `16` zeigt an, dass die Verbindungsaufnahme erfolgreich war und nun der TLS-Handshake stattfinden kann.
Da alles weitere hier TLS verschlüsselt stattfindet, ist keine detaillierte Prüfung möglich.

Falls die Kommunikation zwischen Agent und {CMK}-Server _noch_ unverschlüsselt ist (wie im Legacy-Pull-Modus) oder unverschlüsselt ist und auch bleibt (wie beim Legacy-Agenten),
erhalten Sie mit diesem Kommando statt der `16` die komplette unverschlüsselte Agentenausgabe.

Weitere Diagnosemöglichkeiten zur Ausführung auf dem {CMK}-Server finden Sie im allgemeinen Artikel über die xref:wato_monitoringagents#diagnostics[Monitoring-Agenten.]
Sie können insbesondere einen xref:wato_monitoringagents#diagnosticpage[Verbindungstest] auch über die {CMK}-Oberfläche durchführen.
Das Ergebnis erhalten Sie im Kasten [.guihint]#Agent:#

.Fehler beim Verbindungstest zum Agenten
image::agent_windows_communication_failed.png[alt="Fehlermeldung eines nicht erreichbaren Agenten beim Verbindungstest.",width=64%]

Falls Sie beim Verbindungstest, wie im obigen Beispiel, keine Informationen bzw. nur eine Fehlermeldung über einen Timeout erhalten, so sollten Sie auf dem Host die [.guihint]#Inbound Rules# der Windows-Firewall prüfen.
endif::[]


[#windows_firewall]
=== Windows Firewall

Der Agent legt bei seiner Installation bereits eine Regel in der Windows Firewall an, damit der Agent Controller
ifdef::saas[]
im Pull-Modus
endif::[]
über den Port 6556 von außen erreichbar ist.
Bei Verwendung des Push-Modus ist in der Regel keine Änderung der Einstellungen nötig.
Falls Sie eine sehr strenge Firewall-Konfiguration verwenden, sind die _Outbound Rules_ für Verbindungen zum Monitoring-Server so anzupassen, dass wenigstens xref:ports#cmk_incoming_host_outgoing[Port 8000] (für einfachere Registrierung zusätzlich
ifdef::onprem[]
80 oder
endif::[]
443) erreichbar ist.

In aktuellen Versionen von Windows können Sie die [.guihint]#Windows Defender Firewall with Advanced Security# über die Windows Einstellungen ([.guihint]#Settings > Windows Security#) finden oder über den Aufruf von `wf.msc` über die Kommandozeile starten:

.Windows Firewall mit der eingehenden Regel für den {CMK}-Agenten
image::agent_windows_windows_firewall.png[alt="Eintrag des {CMK}-Agenten für die Windows Firewall."]

Sollten Sie in den Einstellungen der Windows Firewall keinen solchen Eintrag finden, können Sie diesen genau an dieser Stelle hinzufügen.
Klicken Sie dafür im Menü [.guihint]#Action# auf [.guihint]#New Rule#.

Daraufhin öffnet sich ein Assistent für die Erstellung einer neuen Firewall-Regel.
Stellen Sie die fünf Auswahlmöglichkeiten wie folgt ein:

[cols="15,~"]
|====
|[.guihint]#Rule Type# |Belassen Sie die Auswahl hier auf [.guihint]#Program.#
|[.guihint]#Program# |Tragen Sie unter [.guihint]#This program path# `%ALLUSERSPROFILE%\checkmk\agent\bin\cmk-agent-ctl.exe` ein oder wählen Sie über den Knopf [.guihint]#Browse# die Datei `cmk-agent-ctl.exe` aus.
// Bei einem Legacy-Agenten müsste der Pfad so lauten: %ProgramFiles% (x86)\checkmk\service\check_mk_agent.exe
|[.guihint]#Action# |Belassen Sie die Auswahl auf [.guihint]#Allow the connection.#
|[.guihint]#Profile# |Dieser Punkt kommt stark auf die Konfiguration Ihres Netzwerks an. Es empfiehlt sich allerdings in den meisten Fällen hier nur [.guihint]#Domain# und [.guihint]#Private# zu aktivieren.
// Bei der Agent-Installation wird das Profile All gewählt (Kommandozeile: profile=any)
|[.guihint]#Name# |Geben Sie der Regel einen prägnanten und kurzen Namen.
|====

ifdef::onprem[]
Alternativ können Sie auch diesen Schritt automatisieren und die Regel direkt auf der Kommandozeile setzen.
Passen Sie den folgenden Befehl gegebenenfalls Ihrem angepassten Installationspfad an:

[{shell}]
----
C:\Windows\System32> netsh advfirewall firewall add rule name="Checkmk Agent" ^
description="Allow inbound network traffic to the Checkmk Agent" dir=in localport=6556 protocol=tcp action=allow ^
program="%ALLUSERSPROFILE%\checkmk\agent\bin\cmk-agent-ctl.exe" ^
profile=private,domain enable=yes
OK.
----

*Hinweis:* Der Befehl wurde zugunsten der Lesbarkeit in vier Zeilen aufgeteilt.
endif::[]


[#debugpush]
=== Fehlersuche beim Agenten im Push-Modus

ifdef::onprem[]
Im Ordner `~/var/agent-receiver/received-outputs/` Ihrer {CMK}-Instanz finden Sie für jeden registrierten Host einen Softlink, der als Name die UUID des Hosts verwendet.
Bei Hosts im Push-Modus zeigt dieser Softlink auf den Ordner mit der Agentenausgabe, bei Hosts im Pull-Modus auf eine nicht vorhandene Datei mit dem Namen des Hosts, wie er im Monitoring verwendet wird.

Anhand des Alters der zwischengespeicherten Agentenausgabe können Sie ermitteln, ob die regelmäßige Übertragung erfolgreich war oder beispielsweise durch sporadische Netzwerkprobleme vereitelt wird.

Des Weiteren können Sie auf dem Host einen Blick in die Log-Datei `C:\ProgramData\checkmk\agent\log\check_mk.log` werfen (Pfade können abweichend konfiguriert sein). 
Zeilen wie die folgende deuten auf Verbindungsprobleme hin:
endif::[]

ifdef::saas[]
Auf dem Host können Sie einen Blick in die Log-Datei `C:\ProgramData\checkmk\agent\log\check_mk.log` werfen (Pfade können abweichend konfiguriert sein). 
Zeilen wie die folgende deuten auf Verbindungsprobleme hin:
endif::[]

[{shell-raw}]
----
Dez 15 17:59:49 myhost23 cmk-agent-ctl[652648]: WARN [cmk_agent_ctl::modes::push] https://mycmkserver:8000/mysite: Error pushing agent output.
----


[#lostconnections]
=== Verbindungen gehen verloren
// MFS: Außer zum Testen hat man selten Hosts mit Push- und Pull-Konfiguration.
// MFS: Was in der Betaphase der 2.2.0 relevant war, wird für SaaS wieder relevant.

ifdef::saas[]
[TIP]
====
Das hier beschriebene Verhalten betrifft vor allem Benutzer, die Hosts ins Monitoring von {CMK} (SaaS) aufnehmen (zum Beispiel zu Evaluationszwecken), die sich bereits bei On-Premises-Editionen von {CMK} im Monitoring befinden.
====
endif::[]

Wurde ein Host für die xref:hosts_autoregister#rule_autoregister_bakery[Autoregistrierung] mit dem Regelsatz [.guihint]#Agent controller auto-registration# konfiguriert und die Option [.guihint]#Keep existing connections# auf [.guihint]#no# gesetzt, werden bei jedem Neustart des Dienstes `cmk-agent-ctl-daemon` (beispielsweise beim Neustart eines Hosts) alle anderen Verbindungen entfernt -- außer der für die Autoregistrierung konfigurierten Verbindung.
Dies betrifft beispielsweise Hosts, auf denen vor der Installation des gebackenen Agentenpakets Verbindungen zu mehreren Instanzen eingerichtet waren oder nach der Installation des Agentenpakets manuell Verbindungen hinzugefügt wurden.

Sie können dieses Verhalten temporär ändern, indem Sie auf dem Host in der Datei `C:\ProgramData\checkmk\agent\pre_configured_connections.json` die Variable `keep_existing_connections` auf `true` setzen.
Eine dauerhafte Änderung über ein Update der Agentenpakete hinweg erreichen Sie, indem Sie im oben genannten Regelsatz [.guihint]#Keep existing connections# auf [.guihint]#yes# setzen.


[#howlong]
=== Zeitdauer bis Änderungen sichtbar werden

Bei der Autoregistrierung eines Hosts vergehen typischerweise etwa zwei Minuten, bis der Host im Monitoring auftaucht.

// MFS: FIXME, muss in Sync sein zu agent_linux
// MFS: Mit Entwicklung abklären, in welchem Zeitraum der Reload erfolgt?
////
Wurde einem Host, der zuerst für den Push-Modus konfiguriert wurde, nachträglich eine Verbindung im Pull-Modus zu einer anderen Instanz hinzugefügt, vergehen bis zu fünf Minuten, bis Port 6556 geöffnet wird.
Die sofortige Öffnung des Ports erreichen Sie durch den Neustart des Dienstes `cmk-agent-ctl-daemon`.
////


[#security]
== Absicherung

=== Vorüberlegung

Sicherheit ist ein wichtiges Kriterium für jegliche Software, hier darf Monitoring keine Ausnahme machen.
Da der Monitoring-Agent auf jedem überwachten Server installiert wird, hätte hier ein Sicherheitsproblem besonders gravierende Auswirkungen.

Deswegen wurde schon beim Design von {CMK} auf Sicherheit Wert gelegt und es gilt seit den ersten Tagen von {CMK} ein eherner Grundsatz:
_Der Agent liest keine Daten vom Netzwerk. Punkt._ 
Somit ist mit Sicherheit ausgeschlossen, dass ein Angreifer über den Überwachungsport 6556 irgendwelche Befehle oder Skriptbestandteile einschleusen kann.


=== Transport Layer Security (TLS)

ifdef::onprem[]
Für einen Angreifer kann jedoch bereits eine Prozessliste ein erster Ansatz sein, Rückschlüsse auf lohnenswerte Ziele zu ziehen.
Daher ist die Transportverschlüsselung zwischen Agent und {CMK}-Server mit Transport Layer Security (TLS) obligatorisch.
Hierbei "pingt" der {CMK}-Server den überwachten Host an, der daraufhin die TLS-Verbindung zum {CMK}-Server aufbaut und darüber die Agentenausgabe überträgt. 
Da nur {CMK}-Server, zu denen ein Vertrauensverhältnis besteht, diese Datenübertragung initiieren können, besteht schon einmal kein Risiko, dass Daten in die falschen Hände gelangen.
endif::[]

Für die Absicherung der TLS-Verbindung verwendet {CMK} ein selbst signiertes Zertifikat, das kurz vor Ablauf seiner Gültigkeit automatisch ersetzt wird.
Der Agent Controller kümmert sich um die rechtzeitige Erneuerung des Zertifikates vor seinem Ablauf.
// Technisch tauscht der Agent Receiver sein Zertifikat aus, der Agent Controller fragt dann an, ob ein neues vorliegt.
Nur längere Zeit inaktive Agenten, d.h., ohne laufenden Agent Controller, können ihre Registrierung bei Ablauf verlieren und müssen dann erneut registriert werden.
Die Laufzeit des Zertifikats kann über die globale Einstellung [.guihint]#Agent Certificates > Lifetime of certificates# festgelegt werden.

ifdef::onprem[]
*Hinweis:* Da es auf sehr alten xref:legacyagent[Windows-Systemen] keinen Agent Controller, und damit keine Registrierung und TLS-Verschlüsselung gibt, 
müssen Sie bei Bedarf andere Wege der Verschlüsselung wählen.
Wir empfehlen, in diesem Fall die eingebaute (symmetrische) Verschlüsselung zu nutzen, sie wird mit der Regel [.guihint]#Symmetric encryption (Linux, Windows)# eingerichtet.
endif::[]


ifdef::onprem[]
=== Zugriff über IP-Adressen beschränken

Die Einschränkung auf bestimmte IP-Adressen können Sie zwar auch über die xref:windows_firewall[Firewall] konfigurieren.
Zusätzlich bietet aber auch der Agent selbst die Möglichkeit, Anfragen von fremden IP-Adressen schlicht zu ignorieren.
Fügen Sie der Konfigurationsdatei lediglich die folgende Einschränkung in den globalen Optionen hinzu.
Beachten Sie, dass davor oder danach noch andere Parameter in der Konfigurationsdatei gesetzt sein können und dies nur ein Ausschnitt ist:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
global:
  only_from: 127.0.0.1/32 192.168.42.0/24
----

Wie in dem Beispiel gut zu sehen ist, können Sie prinzipiell beliebig viele Subnetze erlauben.
Mit einem `/32` geben Sie z.B. ein Subnetz der Größe 1 an, so dass nur diese eine Adresse erlaubt ist, während sie mit `192.168.42.0/24` alle Adressen zwischen `192.168.42.0` und `192.168.42.255` erlauben.

{cee-only}
In der Agentenbäckerei können Sie die erlaubten IP-Adressen über folgenden Regelsatz konfigurieren:
[.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX >  Agent rules > Allowed agent access via IP address (Linux, Windows)#
endif::[]


ifdef::onprem[]
=== Eingebaute Verschlüsselung abschalten

Insbesondere bei einem Update des Agenten kann es sein, dass die eingebaute (symmetrische) Verschlüsselung aktiv ist, die vom Agentenprogramm selbst durchgeführt wird.
Sind TLS-Verschlüsselung und eingebaute Verschlüsselung gleichzeitig aktiv, dann ist die Entropie der übertragenen Daten so hoch, dass die ab Version {v21} aktive Komprimierung keine Ersparnis der übertragenen Daten bringt – und die CPUs sowohl des Hosts als auch des {CMK}-Servers mit zusätzlichen Ver- und Entschlüsselungsschritten belasten.

Aus diesem Grund sollten Sie die eingebaute Verschlüsselung zeitnah nach dem Wechsel auf TLS deaktivieren.

Im ersten Schritt schalten Sie in der vorhandenen Regel unter [.guihint]#Setup > Agents > Access to agents > Checkmk agent > Symmetric encryption (Linux, Windows)# die Verschlüsselung ab.

Im zweiten Schritt ändern Sie auf dem Host des Agenten in der Konfigurationsdatei `C:\ProgramData\checkmk\agent\check_mk.user.yml` den Wert des Parameters `encrypted` auf `no`:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
global:
  encrypted: no
  passphrase: D0e5NotMat7erAnym0r3
----

Im dritten und letzten Schritt legen Sie mit der Regel [.guihint]#Enforce agent data encryption# fest, dass der {CMK}-Server nur noch per TLS verschlüsselte Daten akzeptiert.
Wählen Sie dazu in der Regel den Wert [.guihint]#Accept TLS encrypted connections only# aus.

{cee-only}
Das Abschalten der Verschlüsselung mit der Agentenbäckerei geht so:
Mit dem ersten Schritt, dem Ändern der Regel [.guihint]#Symmetric encryption (Linux, Windows),# sind Sie fast fertig.
Sie brauchen nur noch neue Agenten zu backen und zu verteilen.
Die Konfigurationsdatei `C:\ProgramData\checkmk\agent\check_mk.user.yml` wird automatisch für Sie geändert und mit in die Agentenpakete eingebaut.
Übrig bleibt dann nur der dritte Schritt, d.h. die Änderung der Regel [.guihint]#Enforce agent data encryption.#

Nach dem nächsten automatischen Agenten-Update ist die Verschlüsselung des Agentenprogramms abgeschaltet, aber durch den Agent Controller die Verschlüsselung garantiert.
Beachten Sie, dass nach dem automatischen Agenten-Update nur noch registrierte Hosts Monitoring-Daten liefern können.
endif::[]


[#disable_sections]
== Sektionen deaktivieren

Die Ausgabe des {CMK}-Agenten ist in Sektionen unterteilt.
Jede dieser Sektionen enthält zusammengehörige Informationen.
Sektionen beginnen immer mit einem Sektions-Header.
Dies ist eine Zeile, die in `<<<` und `>>>` eingeschlossen ist.

Bis auf die {CMK} eigenen Sektionen, können Sie jede der über 30 Sektionen, die der Agent standardmäßig erzeugt, einzeln deaktivieren.
Konkret bedeutet dies, dass die entsprechenden Befehle durch den Agenten überhaupt nicht ausgeführt werden und ggf. Rechenzeit eingespart werden kann.
Andere Gründe für die Deaktivierung könnten sein, dass Sie sich für bestimmte Informationen einer gewissen Gruppe von Hosts schlicht nicht interessieren, oder dass ein bestimmter Host fehlerhafte Werte liefert und Sie den Abruf dieser Daten kurzzeitig aussetzen wollen.

ifdef::onprem[]
Als Nutzer einer der kommerziellen Editionen können Sie über [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules > Disabled sections (Windows agent)# einfach eine Regel anlegen, welche dann von der xref:glossar#agent_bakery[Agentenbäckerei] berücksichtigt wird.
endif::[]

ifdef::saas[]
Sie können über [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules > Disabled sections (Windows agent)# einfach eine Regel anlegen, welche dann von der xref:glossar#agent_bakery[Agentenbäckerei] berücksichtigt wird.
endif::[]

.Hier können Sie Sektionen per Regel deaktivieren
image::agent_windows_disabled_sections.png[alt="Liste der Agentenregeln für den Windows-Agenten."]

*Hinweis:* Das obige Bild zeigt, dass es zu [.guihint]#Disabled sections (Windows agent)# auch eine gegenteilige Regel [.guihint]#Enabled sections (Windows agent)# gibt.
Sie können also statt mit der Negativ- auch mit der Positivliste arbeiten.
Um den Überblick zu behalten, empfehlen wir aber, nur _eine_ der beiden Regeln zu verwenden.

In der Regel [.guihint]#Disabled sections (Windows agent)# finden Sie für jede deaktivierbare Sektion eine eigene Checkbox.
Für die angewählten Checkboxen finden Sie dann -- nachdem der neu gebackene Agent auf den ausgewählten Hosts installiert wurde -- in der Konfigurationsdatei der Agentenbäckerei `C:\ProgramData\checkmk\agent\bakery\check_mk.bakery.yml` unterhalb von `global:` eine Zeile `disabled_sections:`, in der die ausgewählten Sektionen aufgelistet sind.

Würden Sie in der Regel beispielsweise die beiden Optionen `System uptime` und `Web Services` auswählen, sähe die passende Konfigurationsdatei wie folgt aus:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
global:
    disabled_sections: [uptime, wmi_webservices]
----

ifdef::onprem[]
Nutzer von {CRE} können einen Eintrag in der Konfigurationsdatei `C:\ProgramData\checkmk\agent\check_mk.user.yml` manuell anlegen und dort die Sektionen eintragen, die deaktiviert werden sollen.
Alle deaktivierbaren Sektionen sind in dieser Datei unterhalb von `global:` im Abschnitt `_sections:` aufgelistet.
endif::[]


[#plugins]
== Agent um Plugins erweitern

=== Was sind Agentenplugins?

Das Agentenprogramm `check_mk_agent.exe` enthält eine ganze Reihe von Sektionen, welche Überwachungsdaten für diverse Check-Plugins liefern, die dann von der Service-Erkennung automatisch gefunden werden.
Dazu gehören alle wichtigen Überwachungen des Betriebssystems.

Darüber hinaus gibt es die Möglichkeit, den Agenten um _Agentenplugins_ zu erweitern.
Das sind kleine Skripte oder Programme, die vom Agenten aufgerufen werden und diesen um weitere Sektionen mit zusätzlichen Monitoring-Daten erweitern.
Das {CMK}-Projekt liefert eine ganze Reihe solcher Plugins mit aus, welche -- wenn sie korrekt installiert und konfiguriert sind -- in der Service-Erkennung automatisch neue Services liefern.

Warum sind diese Plugins nicht einfach in den Agenten fest integriert?
Für jedes der Plugins gibt es einen der folgenden Gründe:

* Das Plugin kann seine Daten nur über interne Schnittstellen holen, die der Agent nicht bereitstellt (Beispiel: PowerShell).
* Das Plugin benötigt sowieso eine Konfiguration, ohne die es nicht funktionieren würde (Beispiel: `mk_oracle.ps1`).
* Das Plugin ist so speziell, dass es von den meisten Anwendern nicht benötigt wird (Beispiel: `citrix_licenses.vbs`).


[#manual_installation_of_plugins]
=== Manuelle Installation

Die mitgelieferten Plugins für Windows finden Sie alle auf dem überwachten Host im Installationsverzeichnis des Agenten unter `C:\Program Files (x86)\checkmk\service\plugins`.
Sie werden dort abgelegt, damit sie auch direkt zur Verfügung stehen.
ifdef::onprem[]
Alternativ liegen die Plugins auch auf dem {CMK}-Server unter `~/share/check_mk/agents/windows/plugins`.
endif::[]

Auch über die Download-Seite des Agenten im Setup-Menü (wie im Kapitel xref:download_gui[Installation] beschrieben) sind diese im Kasten [.guihint]#Plugins# verfügbar:

.Der Anfang der Liste verfügbarer Agentenplugins
image::agent_windows_files_plugins.png[alt="Download-Seite mit den Agentenplugins."]

Zu allen von uns mitgelieferten Agentenplugins existieren die passenden Check-Plugins, welche deren Daten auswerten und Services erzeugen können.
Diese sind bereits mitinstalliert, so dass neu gefundene Services sofort erkannt werden und konfiguriert werden können.

*Hinweis:* Bevor Sie ein Plugin auf dem Host installieren, werfen Sie einen Blick in die entsprechende Datei.
Oft finden Sie dort wichtige Hinweise zur korrekten Verwendung des Plugins.

Die eigentliche Installation ist dann einfach:
Kopieren Sie die Datei nach `C:\ProgramData\checkmk\agent\plugins`.

Sobald das Plugin im richtigen Verzeichnis liegt, wird es vom Agenten automatisch aufgerufen und es entsteht eine neue Sektion in der Agentenausgabe.
Diese trägt üblicherweise den gleichen Namen wie das Plugin.
Komplexe Plugins (z.B. `mk_oracle.ps1`) erzeugen sogar eine ganze Reihe an neuen Sektionen.


[#pluginconfig]
=== Konfiguration

Manche Plugins benötigen eine Konfigurationsdatei in `C:\ProgramData\checkmk\agent\config`, damit sie funktionieren können.
Bei anderen ist eine Konfiguration optional (z.B. `mssql.vbs`) und ermöglicht besondere Features oder Anpassungen.
Wieder andere funktionieren einfach so.
Sie haben verschiedene Quellen, um an Informationen zu kommen:

* Die Dokumentation der zugehörigen Check-Plugins in Ihrer {CMK}-Instanz, welche Sie über [.guihint]#Setup > Services > Catalog of check plugins# erreichen.
* Kommentare in der Plugin-Datei (oft sehr hilfreich!)
* Einen passenden Artikel in diesem Handbuch (z.B. über das Überwachen von xref:monitoring_oracle#[Oracle])

Bei speziellen (Skript)-Sprachen kann es notwendig sein, diese erst in der Konfiguration des Agenten _freizuschalten_.
So werden beispielsweise Python-Skripte nicht ausgeführt, wenn sie nicht explizit freigegeben wurden.
Sie können dazu in der Konfigurationsdatei `check_mk.user.yml` in der Sektion `global` die Dateiendungen erweitern, wie im folgenden Ausschnitt zu sehen:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
global:
    execute: [exe, bat, vbs, cmd, ps1, py]
----

*Wichtig*: Der Einsatz solcher Plugins setzt voraus, dass die Dateien auch in einer regulären Kommandozeile ohne spezielle Pfade aufgerufen werden können.
Im Fall von Python muss dieses entsprechend korrekt installiert und der Pfad zu dem Interpreter in den Umgebungsvariablen vorhanden sein.
Anleitungen, wie Sie Python korrekt einrichten, finden Sie direkt auf den Seiten der link:https://www.python.org/doc/[Python Software Foundation.^]


[#customizeexecution]
=== Ausführung eines speziellen Plugins anpassen

Jedes Plugin kann in unterschiedlichen Modi ausgeführt werden.
Dabei stehen die folgenden Optionen zur Eingabe in der Konfigurationsdatei zur Verfügung.

[cols="12,15,~",options="header"]
|===
|Option |Wert |Beschreibung 
|`pattern` |`'@user\*.ps1'` |Setzt die Reichweite der nachfolgenden Optionen. Hier kann auch mit Wildcards gearbeitet werden. Dann beziehen sich die nachfolgenden Optionen auf alle Plugins, auf die der Ausdruck zutrifft. Führend wird bestimmt, ob das Plugin direkt aus dem Installationsverzeichnis unter `C:\Program Files (x86)\` oder aus dem Datenverzeichnis unter `C:\ProgramData` ausgeführt werden soll. 
|`run` |`*yes*/no` |Bestimmt, ob die Ausführung eines Plugins unterdrückt werden soll.
|`async` |`*yes*/no` |Führt ein Plugin asynchron aus und legt die Daten in einer Datei ab. Bei synchroner Ausführung wird die Ausgabe direkt dem Agenten übergeben.
|`timeout` |`*60*` |Setzt die maximale Ausführungszeit. Danach wird das Plugin beendet, auch wenn keine Ausgabe gekommen ist. Der Standardwert orientiert sich an dem Standard für das Abfrageintervall des Agenten.
|`cache_age` |`*60*` |Legt in Sekunden fest, wie lange eine Ausgabe gültig ist. 
|`retry_count` |`*1*` |Die Häufigkeit, wie oft ein Plugin fehlschlagen darf, bevor eine Ausgabe aus dem Cache verworfen wird.
|`description` |`'Text'` |Hier können Sie einen freien Text eintragen, der den Logs angefügt werden soll.
|===

Eine Konfiguration für das Veeam-Plugin sieht dann zum Beispiel so aus (der Auszug ist gekürzt und enthält nur den relevanten Teil für das Beispiel):

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
plugins:
    enabled: yes
    execution:
        - pattern: $CUSTOM_PLUGINS_PATH$\veeam_backup_status.ps1
          async: yes
          timeout: 120
          cache_age: 300
          retry_count: 2
----

Nach der obigen beispielhaften Konfiguration wird das Plugin im Datenverzeichnis `C:\ProgramData\checkmk\agent\plugins` ausgeführt, und zwar asynchron alle fünf Minuten (300 Sekunden) und darf dabei maximal zwei Minuten (120 Sekunden) laufen.
Falls das Plugin in diesen Timeout läuft, wird ein zweites Mal versucht ein Ergebnis zu bekommen.


=== Installation über die Agentenbäckerei

ifdef::onprem[]
{cee-only}
In den kommerziellen Editionen können Sie die mitgelieferten Plugins über die xref:glossar#agent_bakery[Agentenbäckerei] konfigurieren.
endif::[]
ifdef::saas[]
Sie können die mitgelieferten Plugins über die xref:glossar#agent_bakery[Agentenbäckerei] konfigurieren.
endif::[]
Diese sorgt sowohl für die Installation des Plugins selbst als auch für die korrekte Erstellung der Konfigurationsdatei, falls eine notwendig sein sollte.

Jedes Plugin wird über eine Agentenregel konfiguriert.
Sie finden die passenden Regelsätze in [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules > Agent Plugins#:

.Liste mit Regeln für die Agentenplugins
image::agent_linux_rules_agent_plugins.png[alt="Seite mit den Regeln zur Konfiguration der Agentenplugins."]


=== Manuelle Ausführung

Da Agentenplugins ausführbare Programme sind, können Sie diese zu Test- und Diagnosezwecken auch von Hand ausführen.
Es gibt allerdings Plugins, welche bestimmte vom Agenten gesetzte Umgebungsvariablen brauchen, um z.B. ihre Konfigurationsdatei zu finden.
Setzen Sie diese gegebenenfalls von Hand, wenn sie in dem Skript oder Programm benötigt werden.


[#e2e_monitoring]
== Einbinden von Legacy Nagios Check-Plugins

[#mrpe]
=== Plugins über MRPE ausführen

Es gibt zwei gute Gründe, Nagios-Plugins auch unter {CMK} zu nutzen.
Wenn Sie Ihr Monitoring von einer Nagios-basierten Lösung auf {CMK} migriert haben, können Sie ältere Check-Plugins, zu denen es noch kein {CMK}-Pendant gibt, zunächst weiter nutzen.
In vielen Fällen sind das selbst geschriebene Plugins in Perl oder Shell. 

Der zweite Grund für die Verwendung ist echtes End-to-End-Monitoring.
Nehmen wir an, Sie haben Ihren {CMK}-Server, einen Webserver und einen Datenbankserver über ein großes Rechenzentrum verteilt.
In so einem Fall sind die Antwortzeiten des Datenbankservers vom {CMK}-Server aus gemessen wenig aussagekräftig.
Weit wichtiger ist es, diese Werte für die Verbindung zwischen Web- und Datenbankserver zu kennen.

Der {CMK}-Agent bietet einen einfachen Mechanismus, diesen beiden Anforderungen gerecht zu werden:
_MK's Remote Plugin Executor_ oder kurz _MRPE_.
Der Name ist bewusst eine Analogie zum _NRPE_ von Nagios, der dort die gleiche Aufgabe übernimmt.

Der MRPE ist im Agenten fest eingebaut und wird über verschiedene Konfigurationsdateien gesteuert.


==== MRPE aktivieren und deaktivieren

Standardmäßig ist die Berücksichtigung von MRPE-Plugins aktiviert.
Falls Sie diese Funktion nicht nutzen wollen, können Sie sie in der Konfigurationsdatei deaktivieren, indem Sie die folgende Definition hinzufügen:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
mrpe:
  enabled: no
----


==== Die Ausführungszeit begrenzen

Manchmal ist die Laufzeit eines Skripts oder Nagios-Plugins nicht vorhersehbar und im schlimmsten Fall wird ein Plugin nie beendet.
Um hier die Kontrolle zu behalten, können Sie die maximale Laufzeit der MRPE-Plugins begrenzen.
Der hier gezeigte Wert ist auch gleichzeitig der Standardwert in Sekunden.
Anpassungen sind also nur notwendig, wenn Sie ein kürzeres oder längeres Intervall festlegen möchten:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
mrpe:
  # enabled: yes
  timeout: 60
----


==== MRPE-Plugins hinzufügen

Um dem Agenten mitzuteilen, wo sich die auszuführende Datei befindet und wie diese aufzurufen ist, fügen Sie einen Eintrag in der Konfiguration des MRPE hinzu:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
mrpe:
  config:
  - check = MyServiceName 'C:\ProgramData\checkmk\agent\mrpe\my_check_plugin.bat' -w 10 -c 20 MyParameter
----

Es ist nicht notwendig, die Datei ebenfalls in dem Verzeichnis des Agenten abzulegen, auch wenn es sich anbietet, um alle an einem gemeinsamen Ort zu sammeln.
In dieser Beispielkonfiguration sehen Sie nun folgende Elemente der relevanten Zeile:

[cols="50,~"]
|===
|Element |Beschreibung 

|`MyServiceName` |Der Servicename, wie er in {CMK} angezeigt werden soll.
|`'C:\ProgramData\checkmk\agent\mrpe\my_check_plugin.bat'` |Auszuführendes Programm; Anführungszeichen für eventuelle Leerzeichen.
|`-w 10 -c 20` |Übergebene Optionen: Ein Schwellwert von 10 für {WARN} und 20 für {CRIT}.
|`MyParameter` |Beispielhafte Übergabe weiterer Parameter.
|===

Nachdem Sie das MRPE-Plugin eingerichtet haben, ist es direkt und ohne Neustart des Agenten aktiv und wird der Ausgabe hinzugefügt.
In der Service-Erkennung werden Sie nun Ihren neuen Service automatisch finden:

image::agent_windows_service_discovery.png[]


=== MRPE mit der Agentenbäckerei

ifdef::onprem[]
{cee-only}
endif::[]
Alternativ zu der Konfiguration direkt auf einem Host in der benutzerspezifischen Konfigurationsdatei können Sie Ihre MRPE-Plugins auch direkt im [.guihint]#Setup#-Menü definieren.
Benutzen Sie dazu den Regelsatz [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent > Agent rules > Execute MRPE checks#.
Der notwendige Eintrag wird dann automatisch in der xref:config_files[Konfigurationsdatei der Agentenbäckerei] erzeugt.


// MFS: FIXME, this massively differs from the same section in the agent_linux article! Bring them in line again.
ifdef::onprem[]
[#hw_monitoring]
== Hardware überwachen

Die Hardware-Überwachung von Windows-Hosts wird vom {CMK}-Agenten, mitgelieferten Plugins und in der link:https://exchange.checkmk.com/[{CMK} Exchange^] erhältlichen Erweiterungen gut abgedeckt.
Dennoch gibt es Situationen, in denen weder fertige Plugins noch Programmierschnittstellen zur Erstellung eigener Plugins erhältlich sind, aber entweder eine Anwendungssoftware oder ein Hardware-Überwachungstool eines Hardware-Herstellers Überwachungsdaten per SNMP liefern kann.

Setzen Sie in so einem Fall in den Eigenschaften des Hosts im Setup im Kasten [.guihint]#Monitoring agents# die Einstellung [.guihint]#SNMP# auf die geeignete Verbindungsart ([.guihint]#SNMP v2 or v3# oder [.guihint]#SNMP v1)#.
Services, die sowohl per SNMP als auch per {CMK}-Agent verfügbar sind (z.B. CPU-Auslastung, Dateisysteme, Netzwerkkarten), werden dann automatisch vom {CMK}-Agenten geholt und nicht per SNMP.
Damit wird eine Doppelübertragung automatisch vermieden.

Weitere Informationen entnehmen Sie dem Artikel zur xref:snmp#snmp_cmk_agent[Überwachung mit SNMP.]
endif::[]


[#uninstall]
== Deinstallation

Für die Deinstallation des Agenten haben Sie in Windows mehrere Möglichkeiten.
In allen Versionen von Windows finden Sie einen Eintrag in der Systemsteuerung unter [.guihint]#Control Panel > Programs and Features > Uninstall a program.#
In neueren Versionen finden Sie den Eintrag für den {CMK}-Agenten zudem in den Einstellungen unter [.guihint]#Settings > Apps > Apps & features.#

Über die Kommandozeile für Administratoren haben Sie mehrere Möglichkeiten den Agenten zu entfernen.
Sollte Ihnen das zuletzt installierte MSI-Paket noch vorliegen, können Sie dieses wie folgt für die Deinstallation nutzen:

[{shell}]
----
C:\Users\hhirsch\Downloads\> msiexec /x check_mk_agent.msi /qn
----

Alternativ können Sie auch das Windows Management Instrumentation Command (WMIC) für die Deinstallation verwenden:

[{shell}]
----
C:\> wmic product where name="Check MK Agent 2.1" call uninstall /nointeractive
----

War die Deinstallation erfolgreich, erhalten Sie als Bestätigung die Meldung `Method execution successful.`

*Hinweis:* Der String hinter `name=` muss exakt stimmen.
Wenn Sie hier eine andere Version des Agenten deinstallieren wollen, finden Sie eine Auflistung aller installierten Produkte mit folgendem Aufruf:

[{shell}]
----
C:\> wmic product get name
----

Der Vorgang kann bisweilen recht lange dauern und gibt derweil keinerlei Statusmeldungen aus, dafür dann aber sehr lange Listen.
Zum Filtern können Sie den Befehl zur Pipe ausbauen:

[{shell}]
----
C:\> wmic product get name | findstr Check
Checkmk Agent 2.3
----

Da die verschiedenen Routinen von Windows nur Dateien entfernen, welche auch durch den Installationsprozess dorthin gekommen sind, ist es vollkommen normal, dass in den xref:files[Verzeichnissen des Agenten] noch Dateien übrig bleiben.
Diese können manuell gelöscht werden.


[#files]
== Dateien und Verzeichnisse

ifdef::saas[]
[#config_files]
=== Konfigurationsdateien des Agenten

Das MSI-Paket speichert bei der Installation die programmspezifischen Dateien in `C:\Program Files (x86)\checkmk\service\` und die Host-spezifischen Dateien in `C:\ProgramData\checkmk\agent\`.
Die programmspezifischen Dateien brauchen Sie nicht anzupassen.
Mit den Host-spezifischen Dateien werden Plugins, Log- und Konfigurationsdateien abgelegt und das Verhalten des Agenten konfiguriert.

*Hinweis*: Standardmäßig ist das gesamte Verzeichnis `C:\ProgramData` in Windows versteckt (_hidden_).

Der Agent liest nacheinander drei Konfigurationsdateien ein:

. `C:\Program Files (x86)\checkmk\service\check_mk.yml` +
ist die Standardkonfigurationsdatei, die Sie nicht ändern sollten.
. `C:\ProgramData\checkmk\agent\bakery\check_mk.bakery.yml` +
wird von der Agentenbäckerei erstellt und sollte nicht manuell geändert werden.
. `C:\ProgramData\checkmk\agent\check_mk.user.yml` +
ist Ihre Konfigurationsdatei, in der Sie von Hand individuelle Anpassungen vornehmen können, um eine Einstellung oder eine Erweiterung auf einem Host zu testen.

Wird eine Option in mehreren Dateien gesetzt, dann bestimmt die zuletzt eingelesene Datei den Wert dieser Option.
Für das manuelle Arbeiten mit dem Agenten ist also lediglich die letzte Konfigurationsdatei `check_mk.user.yaml` relevant, weil sie als letzte eingelesen wird und damit _das letzte Wort hat_.
Wenn die Agentenbäckerei nicht genutzt wird, ist sie sogar die einzige Datei, in der Anpassungen an der Konfiguration des Agenten vorgenommen werden dürfen.

Wie Sie vielleicht schon an der Dateiendung der Konfigurationsdateien erkannt haben, wird als Dateiformat link:https://de.wikipedia.org/wiki/YAML[YAML^] verwendet.
endif::[]


=== Pfade auf dem überwachten Host

[cols="45,~",options="header"]
|===
|Pfad |Bedeutung
|`C:\Program Files (x86)\checkmk\service\` |Installationsverzeichnis für die programmspezifischen Dateien inklusive des Agentenprogramms `check_mk_agent.exe` und des Agent Controllers `cmk-agent-ctl.exe`. Anpassungen sind hier nicht notwendig. +
Der Agent wird als 32-Bit und 64-Bit Programm ausgeliefert. Die Installationsroutine wählt automatisch das richtige Programm für ein 32-Bit oder 64-Bit Betriebssystem aus. In das Verzeichnis `Program Files (x86)` wird der Agent aus Gründen der Kompatibilität installiert.
// cmk-agent-ctl.exe liegt auch in C:\ProgramData\checkmk\agent\bin\. Von dort wird er auch als Hintergrundprozess gestartet.
|`C:\Program Files (x86)\checkmk\service\check_mk.yml` |Die Standardkonfigurationsdatei des Agenten. Ändern Sie diese Datei nicht.
|`C:\ProgramData\checkmk\agent\` |Installationsverzeichnis für die Host-spezifischen Dateien. Hier befinden sich Erweiterungen, Log- und Konfigurationsdateien, welche spezifisch für diesen Host gelten.
|`C:\ProgramData\checkmk\agent\bakery\check_mk.bakery.yml` |Diese Konfigurationsdatei wird von der Agentenbäckerei erstellt und überschreibt gegebenenfalls Werte aus der Standardkonfigurationsdatei.
|`C:\ProgramData\checkmk\agent\check_mk.user.yml` |Konfigurationsdatei für Ihre individuellen Anpassungen. Diese Datei wird als letztes eingelesen und überschreibt gegebenenfalls Werte aus den anderen  Konfigurationsdateien.
|`C:\ProgramData\checkmk\agent\plugins` |Verzeichnis für Plugins, welche automatisch vom Agenten ausgeführt werden sollen und dessen Ausgabe um zusätzliche Überwachungsdaten erweitern.
|`C:\ProgramData\checkmk\agent\spool` |Enthält Daten, die z.B. von Log-Dateien erstellt werden und eine eigene Sektion beinhalten. Diese werden ebenfalls der Agentenausgabe angehängt. Mehr dazu erfahren Sie im Artikel xref:spool_directory#[Das Spool-Verzeichnis.]
|`C:\ProgramData\checkmk\agent\registered_connections.json` |Enthält eine Liste der mit dem Agent Controller registrierten Verbindungen.
|`C:\ProgramData\checkmk\agent\pre_configured_connections.json` |Enthält eine vorkonfigurierte und per Agentenbäckerei in das Agentenpaket integrierte Verbindung zu einer Instanz für die xref:hosts_autoregister#[Autoregistrierung.]
|`C:\ProgramData\checkmk\agent\config` |Ablage von Konfigurationsdateien für den Agenten.
|`C:\ProgramData\checkmk\agent\local` |Verzeichnis für eigene xref:localchecks#[lokale Checks].
|`C:\ProgramData\checkmk\agent\mrpe` |MRPE-Erweiterungen können hier gespeichert werden.
|`C:\ProgramData\checkmk\agent\backup` |Nach jeder Änderung des {CMK}-Agenten-Service wird von der Benutzerkonfiguration hier ein Backup angelegt.
|`C:\ProgramData\checkmk\agent\log` |Hier finden Sie Log-Dateien. Neben der ständig im Betrieb aktualisierten `check_mk.log` (in allen Editionen) können hier weitere Protokolle von automatischer Installation oder Updates vorhanden sein.
|===


ifdef::onprem[]
=== Pfade auf dem {CMK}-Server

[cols="45,~",options="header"]
|===
|Pfad |Bedeutung
|`~/local/share/check_mk/agents/custom` |Basisverzeichnis für eigene Dateien, die mit einem gebackenen Agenten ausgeliefert werden sollen.
|`~/share/check_mk/agents/windows/` |Verzeichnis mit dem MSI-Paket des Agenten. In diesem Verzeichnis finden Sie auch Konfigurationsbeispiele und alle Agentenplugins.
|`~/var/agent-receiver/received-outputs` |Enthält für jede Verbindung deren UUID als Softlink, der auf einen Ordner mit dem Namen des Hosts zeigt. Im Push-Modus enthält dieser Ordner die Agentenausgabe.
|===
endif::[]
