// -*- coding: utf-8 -*-
// IGNORE % Filesystems filesystems filesystem Rescan
include::global_attr.adoc[]
= Best Practices, Tipps & Tricks
:revdate: 2025-02-05
:title: Best Practices, Tipps & Tricks
:description: Bewährte Vorgehensweisen vermeiden Probleme in {CMK}, z.B. bei der Überwachung von Windows-Diensten, der Internetverbindung oder HTTP/HTTPS-Diensten.


[#cpu_single_core]
== CPU-Auslastung aller Kerne einzeln überwachen

{CMK} richtet sowohl unter Linux als auch unter Windows automatisch einen Service ein, der die durchschnittliche CPU-Auslastung der letzten Minute ermittelt.
Dies ist einerseits sinnvoll, erkennt aber andererseits einige Fehler nicht, beispielsweise den, dass ein einzelner Prozess Amok läuft und permanent *eine* CPU mit 100{nbsp}% belastet.
Bei einem System mit 16 CPUs trägt eine CPU aber nur mit 6,25{nbsp}% zur Gesamtleistung bei, und so wird selbst im geschilderten Extremfall nur eine Auslastung von 6,25{nbsp}% gemessen -- was dann nicht zu einer Benachrichtigung führt.

Deswegen bietet {CMK} die Möglichkeit (für Linux und für Windows), alle vorhandenen CPUs einzeln zu überwachen und festzustellen, ob einer der Kerne über längere Zeit permanent ausgelastet ist.
Diesen Check einzurichten hat sich als gute Idee herausgestellt.

Um diese Überprüfung für Ihre Windows-Server einzurichten, benötigen Sie für den Service [.guihint]#CPU utilization# den Regelsatz [.guihint]#CPU utilization for simple devices#, den Sie unter den [.guihint]#Service monitoring rules# finden.
Dieser Regelsatz ist für die Überwachung *aller* CPUs zuständig -- hat aber auch diese Option im Angebot: [.guihint]#Levels over an extended time period on a single core CPU utilization.#

Erstellen Sie eine neue Regel und aktivieren Sie darin nur diese Option:

image::intro_cpu_single_core.png[alt="Dialog, um die Überwachung der CPU-Auslastung einzelner Kerne eines Windows-Servers festzulegen."]

Definieren Sie die Bedingung so, dass sie nur für die Windows-Server greift, z.B. durch einen geeigneten Ordner oder ein Host-Merkmal.
Diese Regel wird andere Regeln des gleichen Regelsatzes nicht beeinflussen, wenn diese andere Optionen festlegen, z.B. die Schwellwerte für die Gesamtauslastung.

Bei Linux-Servern ist dafür der Regelsatz [.guihint]#CPU utilization on Linux/UNIX# zuständig, in dem Sie die gleiche Option setzen können.


[#windows_services]
== Windows-Dienste überwachen

In der Voreinstellung überwacht {CMK} auf Ihren Windows-Servern keine Dienste.
Warum nicht?
Nun, weil {CMK} nicht weiß, welche Dienste für Sie wichtig sind.

Wenn Sie sich nicht die Mühe machen wollen, für jeden Server von Hand festzulegen, welche Dienste dort wichtig sind, können Sie auch einen Check einrichten, der einfach überprüft, ob alle Dienste mit der Startart „automatisch“ auch wirklich laufen.
Zusätzlich können Sie sich informieren lassen, ob Dienste laufen, die manuell -- quasi außer der Reihe -- gestartet wurden.
Diese werden nach einem Reboot nicht mehr laufen, was ein Problem sein kann.

Um dies umzusetzen, benötigen Sie zunächst den Regelsatz [.guihint]#Windows Services#, den Sie unter den [.guihint]#Service monitoring rules# finden, z.B. über die Suchfunktion [.guihint]#Setup > General > Rule search#.
Die entscheidende Option in der neuen Regel lautet [.guihint]#Services states.#
Aktivieren Sie diesen und fügen Sie drei neue Elemente für die Zustände der Dienste hinzu:

image::intro_windows_services_rule.png[alt="Dialog, um die zu überwachenden Windows-Server-Dienste in Abhängigkeit ihres Zustands festzulegen."]

Dadurch erreichen Sie folgende Überwachung:

* Ein Dienst mit der Startart [.guihint]#auto#, der läuft, gilt als {OK}.
* Ein Dienst mit der Startart [.guihint]#auto#, der nicht läuft, gilt als {CRIT}.
* Ein Dienst mit der Startart [.guihint]#demand#, der läuft, gilt als {WARN}.

Diese Regel gilt allerdings nur für Dienste, die auch wirklich überwacht werden.
Daher benötigen wir noch einen zweiten Schritt und eine zweite Regel, diesmal aus dem Regelsatz [.guihint]#Windows service discovery#, mit der Sie festlegen, welche Windows-Dienste {CMK} als Services überwachen soll.

Wenn Sie diese Regel anlegen, können Sie zunächst bei der Option [.guihint]#Services (Regular Expressions)# den regulären Ausdruck `pass:[.*]` eingeben, der auf alle Services zutrifft.

Nach dem Sichern der Regel wechseln Sie für einen passenden Host in die Service-Konfiguration.
Dort werden Sie eine große Zahl von neuen Services finden -- für jeden Windows-Dienst einen.

Um die Anzahl der überwachten Services auf die für Sie interessanten einzuschränken, kehren Sie zu der Regel zurück und verfeinern die Suchausdrücke nach Bedarf.
Dabei wird Groß- und Kleinschreibung unterschieden.
Hier ist ein Beispiel für eine angepasste Service-Auswahl:

image::intro_windows_service_discovery.png[alt="Dialog, um die Namen der zu überwachenden Windows-Dienste festzulegen."]

Sollten Sie Services, die den neuen Suchausdrücken nicht entsprechen, zuvor schon in die Überwachung aufgenommen haben, erscheinen diese jetzt in der Service-Konfiguration als fehlend.
Mit dem Knopf [.guihint]#Rescan# können Sie reinen Tisch machen und die ganze Service-Liste neu erstellen lassen.


ifdef::onprem[]
[#internet]
== Internetverbindung überwachen

Der Zugang Ihrer Firma zum Internet ist sicherlich für alle sehr wichtig.
Die Überwachung der Verbindung zu „dem Internet“ ist dabei etwas schwierig umzusetzen, da es um Milliarden von Rechnern geht, die (hoffentlich) erreichbar sind -- oder eben nicht.
Sie können aber trotzdem effizient eine Überwachung einrichten, nach folgendem Bauplan:

. Wählen Sie mehrere Rechner im Internet, die normalerweise per `ping`-Kommando erreichbar sein sollten, und notieren Sie deren IP-Adressen.

. Legen Sie in {CMK} einen neuen Host an, etwa mit dem Namen `internet` und konfigurieren diesen wie folgt:
Als [.guihint]#IPv4 address# geben Sie eine der notierten IP-Adressen ein.
Unter [.guihint]#Additional IPv4 addresses# tragen Sie die restlichen IP-Adressen ein.
Aktivieren Sie unter [.guihint]#Monitoring agents# die Option [.guihint]#Checkmk agent / API integrations# und wählen dort [.guihint]#No API integrations, no Checkmk agent# aus.
Speichern Sie den Host ohne Service-Erkennung.

. Erstellen Sie eine neue Regel aus dem Regelsatz [.guihint]#Check hosts with PING (ICMP Echo Request)#, die nur für den neuen Host `internet` greift (z.B. über die Bedingung mit [.guihint]#Explicit hosts# oder einem passenden Host-Merkmal).
Konfigurieren Sie die Regel wie folgt:
Aktivieren Sie [.guihint]#Service description# und geben Sie `Internet connection` ein.
Aktivieren Sie [.guihint]#Alternative address to ping# und wählen Sie dort [.guihint]#Ping all IPv4 addresses# aus.
Aktivieren Sie [.guihint]#Number of positive responses required for OK state# und tragen Sie `1` ein.

. Erstellen Sie eine weitere Regel, die ebenfalls nur für den Host `internet` gilt, diesmal aus dem Regelsatz [.guihint]#Host check command#.
Wählen Sie dort als [.guihint]#Host check command# die Option [.guihint]#Use the status of the service...# und tragen Sie als Namen `Internet connection` ein, den Sie im vorherigen Schritt als Service-Namen gewählt haben.

Wenn Sie jetzt die Änderungen aktivieren, erhalten Sie im Monitoring den neuen Host `internet` mit dem einzigen Service `Internet connection`.

Wenn mindestens eines der Ping-Ziele erreichbar ist, hat der Host den Status {UP} und der Service den Status {OK}.
Gleichzeitig erhalten Sie beim Service für jede der eingetragenen IP-Adressen Messdaten für die durchschnittliche Paketumlaufzeit (_round trip average_) und den Paketverlust.
Damit erhalten Sie einen Anhaltspunkt für die Qualität Ihrer Verbindung im Laufe der Zeit:

image::intro_service_internet.png[alt="Listeneintrag eines Services zur Überwachung der Internetverbindung zu mehreren IP-Adressen."]

[TIP]
====
Der letzte und vierte Schritt in obiger Prozedur ist notwendig, damit der Host nicht den Zustand {DOWN} erhält, falls die erste IP-Adresse nicht per `ping` erreichbar ist.
Stattdessen übernimmt der Host den Status seines einzigen Services. +
Da ein Service grundsätzlich nicht benachrichtigt, wenn sein Host {DOWN} ist, ist es wichtig, dass Sie die Benachrichtigungen über den Host steuern -- und nicht über den Service.
Außerdem sollten Sie in diesem speziellen Fall einen Benachrichtigungsweg verwenden, der keine Internetverbindung voraussetzt.
====
endif::[]


[#http]
== HTTP/HTTPS-Dienste überwachen

Nehmen wir an, Sie wollen die Erreichbarkeit einer Website oder eines Webdienstes prüfen.
Der xref:wato_monitoringagents#agents[{CMK}-Agent] bietet hier keine Lösung, da er diese Information nicht anzeigt -- und außerdem haben Sie vielleicht gar nicht die Möglichkeit, den Agenten auf dem Server zu installieren.

Die Lösung ist ein sogenannter xref:glossar#active_check[aktiver Check.]
Das ist einer, der nicht per Agent durchgeführt wird, sondern direkt durch das Kontaktieren eines Netzwerkprotokolls beim Ziel-Host -- in diesem Fall HTTP(S).

Das Vorgehen ist wie folgt:

. Legen Sie einen neuen Host für den https://checkmk.com/de/guides/web-server-monitoring[Webserver^] an, z.B. für `checkmk.com`.
Aktivieren Sie unter [.guihint]#Monitoring agents# die Option [.guihint]#Checkmk agent / API integrations# und wählen dort [.guihint]#No API integrations, no Checkmk agent# aus.
Speichern Sie den Host ohne Service-Erkennung.

. Erstellen Sie eine neue Regel aus dem Regelsatz [.guihint]#Check HTTP web service,# die nur für den neuen Host greift (z.B. über die Bedingung [.guihint]#Explicit hosts#).

. Im Kasten [.guihint]#Value# finden Sie zahlreiche Optionen zur Durchführung des Checks.
Das Prinzip dabei ist:
Für jede zu überprüfende URL definieren Sie einen neuen Endpunkt.
Pro Endpunkt wird ein Service erzeugt.
Den Service-Namen (z. B. `Basic webserver health`) und gegebenenfalls einen Präfix (`HTTP` oder `HTTPS`) legen Sie beim Endpunkt fest.

. Ebenfalls im Kasten [.guihint]#Value#, unterhalb der Endpunkte, können Sie zusätzliche Einstellungen vornehmen.
So können Sie per [.guihint]#Response time# den Service auf {WARN} oder {CRIT} setzen lassen, wenn die Antwortzeit zu langsam ist und mit [.guihint]#Certificate validity# die Gültigkeitsdauer des Zertifikats überprüfen.
Mit [.guihint]#Search for strings# können Sie prüfen lassen, ob in der Antwort -- also in der gelieferten Seite -- ein bestimmter Text vorkommt.
Damit können Sie einen relevanten Teil des Inhalts prüfen, damit nicht eine simple Fehlermeldung des Servers als positive Antwort gewertet wird.
+
Diese Einstellungen können Sie identisch für alle Endpunkte festlegen oder für jeden Endpunkt individuell.
+
[TIP]
====
Für alle verfügbaren Optionen finden Sie in der xref:user_interface#inline_help[Inline-Hilfe] sehr nützliche Informationen.
====

. Speichern Sie die Regel und aktivieren Sie die Änderungen.

Sie bekommen jetzt einen neuen Host mit den von Ihnen festgelegten Services, die den Zugriff per HTTP(S) prüfen:

image::intro_check_httpv2_services.png[alt="Listeneintrag der Services zur Überwachung der HTTP/HTTPS-Dienste auf einem Host."]

[TIP]
====
Sie können diesen Check natürlich auch auf einem Host durchführen, der bereits mit {CMK} per Agent überwacht wird.
In diesem Fall entfällt das Anlegen des Hosts und Sie müssen nur die Regel für den Host erstellen.
====


[#magic_factor]
== Dateisystem-Schwellwerte magisch anpassen

Gute Schwellwerte für die Überwachung von Dateisystemen zu finden, kann mühsam sein.
Denn eine Schwelle von 90{nbsp}% ist bei einer sehr großen Festplatte viel zu niedrig und bei einer kleinen vielleicht schon zu knapp.
Wir hatten bereits im xref:intro_finetune#filesystems[Kapitel über die Feinjustierung des Monitoring] die Möglichkeit vorgestellt, Schwellwerte in Abhängigkeit von der  Dateisystemgröße festzulegen -- und angedeutet, dass {CMK} eine weitere, noch schlauere Option im Angebot hat: den *Magic Factor.*

Den Magic Factor richten Sie so ein:

. Im Regelsatz [.guihint]#Filesystems (used space and growth)# legen Sie nur eine einzige Regel an.

. In dieser Regel aktivieren Sie [.guihint]#Levels for used/free space# und lassen den Standard der Schwellwerte 80{nbsp}% bzw. 90{nbsp}% unverändert.

. Zusätzlich aktivieren Sie [.guihint]#Magic factor (automatic level adaptation for large filesystems)# und akzeptieren den Standardwert von 0.80.

. Setzen Sie ferner [.guihint]#Reference size for magic factor# auf 20{nbsp}GB.
Da 20{nbsp}GB der Standardwert ist, wird er wirksam, auch ohne dass Sie die Option explizit aktivieren.

Das Ergebnis sieht dann so aus:

image::intro_magic_factor.png[alt="Dialog zur Festlegung des Magic Factors für Dateisystem-Schwellwerte."]

Wenn Sie jetzt die Regel sichern und die Änderung aktivieren, erhalten Sie Schwellwerte, die automatisch von der Größe des Dateisystems abhängen:

. Dateisysteme, die genau 20{nbsp}GB groß sind, erhalten die Schwellwerte 80{nbsp}% / 90{nbsp}%.

. Dateisysteme, die kleiner als 20{nbsp}GB sind, erhalten niedrigere Schwellwerte.

. Dateisysteme, die größer als 20{nbsp}GB sind, erhalten höhere Schwellwerte.

Wie hoch die Schwellwerte genau sind ist -- nun ja -- magisch!
Über den Faktor (hier 0.80) bestimmen Sie, wie stark die Werte verbogen werden.
Ein Faktor von 1.0 ändert gar nichts, und alle Dateisysteme bekommen die gleichen Werte.
Kleinere Werte verbiegen die Schwellwerte stärker.
Die in diesem Abschnitt angewendeten Standardwerte von {CMK} haben sich in der Praxis bei sehr vielen Installationen bewährt.

Welche Schwellen genau gelten, können Sie bei jedem Service in seiner Zusammenfassung ([.guihint]#Summary#) sehen:

image::intro_magic_factor_services.png[alt="Liste mit zwei Dateisystem-Services und ihren Schwellwerten."]

Die folgende Tabelle zeigt einige Beispiele für die Auswirkung des Magic Factor bei einer Referenz von 20{nbsp}GB / 80{nbsp}%:

[cols="15,~,~,~,~,~,~,~",options="header"]
|===
|Magic Factor |5{nbsp}GB |10{nbsp}GB |20{nbsp}GB |50{nbsp}GB |100{nbsp}GB| 300{nbsp}GB| 800{nbsp}GB 
|*1.0* |*80{nbsp}%* |*80{nbsp}%* |*80{nbsp}%* |*80{nbsp}%* |*80{nbsp}%* |*80{nbsp}%* |*80{nbsp}%*
|*0.9* |77{nbsp}% |79{nbsp}% |*80{nbsp}%* |82{nbsp}% |83{nbsp}% |85{nbsp}% |86{nbsp}%
|*0.8* |74{nbsp}% |77{nbsp}% |*80{nbsp}%* |83{nbsp}% |86{nbsp}% |88{nbsp}% |90{nbsp}%
|*0.7* |70{nbsp}% |75{nbsp}% |*80{nbsp}%* |85{nbsp}% |88{nbsp}% |91{nbsp}% |93{nbsp}%
|*0.6* |65{nbsp}% |74{nbsp}% |*80{nbsp}%* |86{nbsp}% |89{nbsp}% |93{nbsp}% |95{nbsp}%
|*0.5* |60{nbsp}% |72{nbsp}% |*80{nbsp}%* |87{nbsp}% |91{nbsp}% |95{nbsp}% |97{nbsp}%
|===

Mit dem Magic Factor schließen wir den Leitfaden für Einsteiger ab.

[TIP]
====
Wenn Sie sich jetzt erstmal eine Pause gönnen wollen, können Sie sich abmelden.
In der {CMK}-Navigationsleiste finden Sie im [.guihint]#User#-Menü den Eintrag [.guihint]#Logout.#
ifdef::saas[]
Im xref:admin_panel#[Admin Panel] finden Sie den [.guihint]#Logout#-Menüeintrag an gleicher Stelle.
Da {CMK} und Admin Panel eigenständige Sitzungen haben, ist die Abmeldung von {CE} erst komplett, wenn Sie sich an beiden Stellen abgemeldet haben.
endif::[]
====

Wir hoffen, dass Sie es geschafft haben, Ihr {CMK} grundlegend einzurichten -- mit oder ohne Magie.
Für fast alle Themen, die wir in diesem Leitfaden behandelt haben, finden Sie vertiefende Informationen in anderen Artikeln des Handbuchs.

ifdef::onprem[]
Wir wünschen viel Erfolg mit {CMK}!
endif::[]
ifdef::saas[]
Wir wünschen viel Erfolg mit {CE}!
endif::[]
