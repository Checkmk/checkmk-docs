// -*- coding: utf-8 -*-
// IGNORE 
// SKIPCOMMITS 
include::global_attr.adoc[]
= Das eigene System überwachen
:revdate: draft
:title: Das eigene System überwachen
:description: {CMK} kann nicht nur andere Systeme überwachen, auch das Monitoring der eigenen Gesundheit ist möglich. Lesen Sie hier, wie Sie die systeminterne Überwachung einstellen und anpassen.

{related-start}
xref:monitoring_basics#[Grundlagen des Monitorings mit {CMK}]
xref:hosts_setup#[Verwaltung der Hosts]
xref:wato_rules#[Regeln]
{related-end}


== Einleitung

Im xref:intro_setup_monitor.html#linux[Leitfaden für Einsteiger] haben wir Ihnen gezeigt, wie man die Basis schafft, um den {CMK}-Server zu überwachen.
Im folgenden Artikel geht es nun darum, diese Überwachung sinnvoll mit Leben zu füllen.
Schließlich kann {CMK} nicht nur prüfen, ob der {CMK}-Server läuft, sondern es gibt noch weitaus mehr Parameter, die geprüft -- und in der Folge auch optimiert -- werden können.


== Prozessüberwachung

In der Prozessüberwachung beispielsweise existieren vorgefertigte Regeln für spezifische Services zur Selbstüberwachung.
Dorthin gelangen Sie über [.guihint]#Setup > Services > Service discovery rules > Process discovery#.

Für jeden Host, der das Hostmerkmal `cmk/check_mk_server:yes` trägt, werden automatisch folgende Services gefunden:

[servlist_multicol]
* active check helpers
* agent receiver
* alert helper
* apache
* automation helpers
* checker helpers
* cmc
* dcd
* event console
* fetcher helpers
* jaeger
* livestatus proxy
* notification spooler
* notify helper
* piggyback hub
* rabbitmq
* real-time helper
* redis-server
* rrdcached
* rrd helper


Die Services werden nach Instanzen gruppiert ausgegeben.
Jede Regel, die Sie nicht benötigen, können Sie sowohl deaktivieren als auch löschen.
Wir empfehlen, nicht benötigte Regeln zu deaktivieren, insbesondere, wenn Sie keine der Regeln nutzen wollen.
Denn wenn Sie alle Regeln löschen -- anstatt sie nur zu deaktivieren -- dann werden beim nächsten Einspielen eines {CMK}-Patches alle Regeln erneut erstellt.
(Die Regeln sind ja Standardbestandteil von {CMK}.)
Was sie nun mit diesen Services anfangen können, lesen Sie im Artikel xref:wato_services[Services verstehen und konfigurieren.]


== Selbstüberwachung des Systems (Plugins)

Auch im link:https://checkmk.com/integrations[{CMK} Plugins-Katalog] gibt es diverse Möglichkeiten zur Selbstüberwachung Ihres Systems:

[cols=4,options="header"]
|====
|Name | Funktion | Parameter | Ausgabe
|bi_aggregation |Gibt den Status einer BI-Aggregation aus. Zeigt auch an, ob sich die Aggregation derzeit in einer Wartungszeit befindet oder quittiert wurde. |Name der Aggregation |ein Service pro BI-Aggregation
|bi_aggregation_connection |Status-Informationen zum Spezialagenten agent_bi. Beinhaltet Verbindungsfehler, fehlende Instanz-Daten und fehlende Aggregationen aufgrund fehlender Daten. | n/a |ein Service pro Verbindung
|check-mk |Ruft Statusinformationen aus den konfigurierten Datenquellen ab, z.B. von konfigurierten Agenten, Spezialagenten, SNMP, Piggyback-Daten und Management-Boards. Der von den Ergebnissen abhängige Gesamtstatus des Services kann mit dem Regelsatz „Status der {CMK}-Services" konfiguriert werden. Aktualisiert auch alle passiven Services und eventuelle Piggyback-Daten des Hosts. |n/a |n/a
|check-mk-inventory |Wird auf neuen Instanzen automatisch erstellt. Geht automatisch auf (WARNING), sobald sich ein Service der Host-Merkmale ändert. Eine Konfiguration ist über den Regelsatz "Periodische Service-Erkennung" möglich. Hier kann auch ein automatisches Update der {CMK}-Konfiguration mit den gefundenen Services aktiviert werden. |n/a |ein Service für jeden Host, der diesen Check unterstützt
|checkmk_agent |Stellt die ordnungsgemäße Funktion des {CMK}-Agent-Bereitstellungsmechanismus (falls verwendet) sicher. Überprüft den Zeitpunkt der letzten erfolgreichen Verbindung zum Bereitstellungsserver und das Vorliegen von Fehlermeldungen, zeigt die Anzahl der bereitgestellten Agent-Plugins und lokalen Checks. Weitere Einstellungen sind möglich, siehe link:https://checkmk.com/integrations/checkmk_agent[Plugin-Beschreibung] |n/a |ein Service
|cmk_site_statistics | Überwacht die Anzahl der Hosts und Services von {CMK}-Standorten, meldet die Gesamtzahl der Hosts, die Anzahl der Hosts, die nicht {UP} sind, sowie die Anzahl der Hosts, die {UP}, {DOWN}, in Wartungszeit und {UNREACH} sind. Meldet die Gesamtzahl der Services, die Anzahl der Services, die nicht {OK} sind, sowie die Anzahl der Services, die {OK} sind, sich in Wartungszeit befinden, auf ausgefallenen Hosts laufen, {WARN}, {UNKNOWN} und {CRIT} sind. Der Check ist immer {OK} und nicht vom Benutzer konfigurierbar. |Name der {CMK}-Instanz |ein Service pro laufender {CMK}-Instanz auf einem {CMK}-Server
|livestatus_status |Erhält über MK Livestatus verschiedene Performancedaten eines OMD Monitoring-Kerns. Gibt damit Auskunft über die Leistung des Kerns, die Anzahl der pro Sekunde ausgeführten Prüfungen usw. Stellt fest, ob bestimmte Einstellungen deaktiviert wurden (z. B. Benachrichtigungen). Zustände können über Prüfparameter konfiguriert werden. |Name der OMD-Instanz |ein Service pro laufender OMD-Instanz.
|mkbackup |Prüft den Status von Backup Jobs auf einem {CMK} Appliance Gerät. Meldet {CRIT}, wenn der Job fehlschlägt oder seine nächste Ausführung überfällig ist. |ID des Jobs |ein Service pro Backup Job
|mkbackup_site |Prüft den Status der Backup-Jobs einer {CMK}-Instanz. Meldet {CRIT}, wenn der Job fehlschlägt oder seine nächste Ausführung überfällig ist. |ID der Instanz, gefolgt von {{backup}} und der ID des Jobs |ein Service pro Instanz und Backup Job
|mkeventd_status |Erhält diverse Performancewerte von einer {CMK} Event Console Instanz. Warnung bei aktiven Ereignislimits, Aufzeichnung von Performance-Metriken bzgl. der Event Console. |Name der {CMK}-Instanz |ein Service pro laufender {CMK}-Instanz
|mknotifyd_connection_v2 |Prüft den Status einzelner TCP-Verbindungen vom {CMK} Notification Spooler zu einem Remote Spooler. Für jede ein- und ausgehende TCP-Verbindung wird ein Service erstellt. Der Status geht auf {CRIT}, wenn die Verbindung nicht aufgebaut ist. |Name der Instanz, gefolgt vom Namen der verbundenen Remote-Instanz, getrennt durch einen Strich. Gibt es mehr als eine eingehende Verbindung vom gleichen Remote-Host, wird ein Index angehängt. |ein Service pro Instanz und Verbindung
|mknotifyd |Prüft den Status des {CMK} Notification Spooler. {WARN}, wenn zurückgestellte Spool-Dateien zu lange liegen bleiben oder beschädigte Spool-Dateien gefunden werden. {CRIT}, wenn Spooler nicht läuft. |Name der Instanz | ein Service pro Instanz
|omd_apache |Erstellt Statistiken über die Anfragen, die vom Apache-Webserver auf OMD-Instanzen bearbeitet werden, zeichnet die Anzahl der Anfragen, die gesendeten Bytes und die für die Bearbeitung der Anfragen benötigte Zeit auf -- gruppiert nach Art der Anfrage, z. B. Checkmk-Tabellenansichten, NagVis-AJAX-Aufrufe, aber auch nach Typ, z. B. für Bilder, Stylesheets usw. Der Check verwendet eine bestimmte Logdatei, die sich unter var/log/apache/stats befinden muss, um die Zugriffsstatistiken zu erfassen. Diese Datei wird bei jeder Überprüfung gekürzt. |Name der Instanz |ein Service pro Instanz
|omd_broker_queues |Überwacht die Anzahl der Benachrichtigungen in Broker-Wateschlangen jeder Instanz-Applikation. Service-Name enthält die Instanz und den Applikationsnamen. Der  Check ist immer {OK}. |Instanz und Applikationsname. |ein Service pro Instanz-Applikation
|omd_broker_status |Überwacht den allgemeinen STatus des Message Brokers auf jeder Instanz. Zeigt den vom Beoker belegten Speicher, die Zahl der Warteschlangen und die Zahl der Shovels im Status _running_. Der Check ist immer {OK}. |Name der Instanz |ein Service pro Instanz auf der ein Broker installiert ist und läuft
|omd_diskusage |Überwacht die Festplattenauslastung einer Instanz -- und unterstützt damit Experten bei der Suche nach Anomalien. Eine Liste der aktuell überwachten Verzeichnisse finden Sie in der link:https://checkmk.com/integrations/omd_diskusage[Plugin-Beschreibung.] |Name der Instanz |ein Service pro Instanz
|omd_status |Prüft den Status der OMD-Instanzen, die auf dem System gefunden wurden mit hilfe von `omd status --bare --auto`. Wenn alle Services laufen, ist die Instanz {OK}, andernfalls {CRIT}. Wenn die Instanz nur teilweise läuft, enthält die Check-Ausgabe die Namen der gestoppten Services. In geclusterten Umgebungen listet dr Check alle Knoten, auf denen Instanzen laufen, sowie deren Status auf. Der Gesamtstatus des Services ist {CRIT}, wenn eine Instanz auf einem Knoten nur partiell läuft oder alle Instanzn auf allen Knoten gestoppt sind. | Name der Instanz |ein Service je Instanz auf der {AUTOSTART} auf {on} gesetzt ist, unabhängig vom aktuellen Instanz-Status
|site_object_counts |Sammelt Informationen über die Anzahl unterschiedlicher Host-Typen oder genutzter Check-Kommandos auf den {CMK}-Instanzen. Einstellung und Funktionalität des Checks sind umfangreich, weitere Informationen hierzu finden Sie in der link:https://checkmk.com/integrations/site_object_counts[Plugin-Beschreibung.] Der Check ist immer im Status {OK}. |n/a |ein Service

|====

