// -*- coding: utf-8 -*-
// IGNORE jira
include::global_attr.adoc[]
= Benachrichtigungen per Jira
:revdate: 2024-05-29
:title: Benachrichtigungen per Jira (notifications)
:description: Sie können Benachrichtigungen von {CMK} an Jira senden lassen und damit Jira Issues erstellen und schließen. Wie Sie die Anbindung durchführen, erfahren Sie hier.

{related-start}
xref:notifications#[Benachrichtigungen]
{related-end}


ifdef::onprem[]
{cee-only}
endif::[]
Wenn Sie die Software Jira zum Projektmanagement, zur Software-Entwicklung oder zur Fehlerverfolgung verwenden, können Sie
ifdef::onprem[]
mit den kommerziellen Editionen
endif::[]
Benachrichtigungen aus {CMK} heraus an Jira senden und dort _Issues_ erzeugen.
Dies funktioniert für die Produkte Jira Work Management (ehemals Jira Core), Jira Software und Jira Service Management (ehemals Jira Service Desk).

Unterstützt werden dabei folgende Optionen:

* Issues für Host- und Service-Probleme erzeugen.
* Issues mit definierter Priorität (_priority_) erstellen.
* Issues mit einem definierten _Label_ erstellen.
* Links auf Host/Services in {CMK} aus den erzeugten Jira-Issues setzen.
* Eine _Resolution_ im Issue bei eintretenden {OK}-Zuständen setzen.

Um die Anbindung von {CMK} an Jira einzurichten, legen Sie in Jira zunächst einige neue Felder (_Fields_) an und ermitteln bestimmte Jira-_IDs._

Anschließend konfigurieren Sie die Benachrichtigungsmethode für Jira in {CMK}, wobei Sie die erstellten und ausgelesenen Jira-IDs eintragen.
Mehr Flexibilität erhalten Sie, wenn Sie zusätzlich xref:wato_user#custom_user_attributes[benutzerdefinierte Attribute] verwenden.
Denn statt die Jira-IDs direkt in die Benachrichtigungsmethode einzutragen, können Sie einige Jira-IDs als benutzerdefinierte Attribute definieren.
Damit ist es dann einfach möglich, dass verschiedene Benutzer Issues in verschiedenen JIRA-Projekten erstellen können.


[#config_jira]
== Jira konfigurieren

{CMK} muss bei der Interaktion mit Jira wissen, welche Benachrichtigungen bereits einen Issue erzeugt haben und welche nicht.
Damit das möglich wird, müssen Sie in Jira zwei sogenannte _Custom fields,_ also benutzerdefinierte Felder, erstellen -- eines für Benachrichtigungen über Host-Probleme, und eines über Service-Probleme.

Um die Host- und Service-Probleme zuordnen zu können, müssen deren IDs eindeutig sein.
Dies ist der Fall, wenn Ihre Jira-Instanz von genau _einer_ {CMK}-Instanz Benachrichtigungen erhält, da der Monitoring-Kern einer {CMK}-Instanz für die Eindeutigkeit sorgt.
ifdef::onprem[]
Nun kann es aber sein, dass im verteilten Monitoring mehrere {CMK}-Instanzen Benachrichtigungen senden, falls xref:distributed_monitoring#notifications[dezentrale Benachrichtigungen] konfiguriert sind.
endif::[]
Erhält Ihre Jira-Instanz von mehreren {CMK}-Instanzen Benachrichtigungen, ist es höchstwahrscheinlich mit der Eindeutigkeit vorbei -- spätestens dann, wenn die ID eines Host-Problems bereits von einer anderen {CMK}-Instanz verwendet wurde.
In einer solchen Konfiguration benötigen Sie ein weiteres benutzerdefiniertes Feld für die {CMK}-Instanz, mit dem die eindeutige Zuordnung wieder möglich wird.

Für die Konfiguration in {CMK} benötigen Sie die Jira-IDs der erstellten benutzerdefinierten Felder -- und zusätzlich die von einigen anderen Feldern, im Ganzen also die folgende Liste:

* Project ID
* Issue type ID
* Priority ID (optional)
* Host custom field ID
* Service custom field ID
* Site custom field ID (optional)
* (Workflow) Transition ID (optional)

Die allermeisten dieser IDs können mit dem unten angegebenem Skript über eine der REST APIs von Jira ausgelesen werden.
Jira-Administratoren können die IDs - auch solche, die über die API und somit das Skript nicht abrufbar sind - über die GUI von Jira ermitteln.


[#jira_custom_fields]
=== Einrichten der benutzerdefinierten Felder in Jira

Wie Sie benutzerdefinierte Felder (_custom fields_) in Jira erstellen, können Sie in der link:https://confluence.atlassian.com/adminjiraserver/adding-custom-fields-1047552713.html[Jira-Dokumentation^] nachlesen, 
inklusive der Zuweisung des Feldes zu den sogenannten _Issue Screens_ in Jira.

Bei der Erstellung der für {CMK} notwendigen Felder beachten Sie dabei die folgenden Punkte zum Feldtyp (_field type_).
Die Feldnamen können Sie frei wählen.
Die in der folgenden Tabelle enthaltenen Namen passen aber zum Skript, mit dem Sie im nächsten Abschnitt xref:jira_ids_script[Jira-IDs über externes Skript ermitteln] die Jira-IDs auslesen können.

[cols="~,~,~",options="header"]
|===
|Benutzerdefiniertes Feld |Feldtyp |Name
|Host custom field |`Number field` |`CMK_HOST_FIELD` (Beispiel)
|Service custom field |`Number field` |`CMK_SVC_FIELD` (Beispiel)
|Site custom field (optional) |`Text field (single line)` |`CMK_SITE_FIELD` (Beispiel)
|===

Achten Sie außerdem darauf, dass der Jira-Benutzer, der von {CMK} zum Erstellen von Issues verwendet wird, d.h. in der xref:config_cmk[{CMK}-Benachrichtigungsregel] eingetragen ist, Lese- _und Schreibzugriff_ auf diese benutzerdefinierten Felder hat.


[#jira_ids_script]
=== Jira-IDs über externes Skript ermitteln

Sie können die IDs gesammelt mit folgendem Skript abfragen, das die link:https://docs.atlassian.com/software/jira/docs/api/REST/latest[Jira REST-API^] nutzt.

Ersetzen Sie dabei `JIRA_USERNAME`, `JIRA_PASSWORD`, `PROJECT_KEY` und `\https://jira.server.your-domain.de` mit den bei Ihnen gültigen Werten.
Den `PROJECT_KEY` können Sie auch ohne administrative Rechte aus der Jira-GUI ermitteln.

[IMPORTANT]
====
Falls Sie ein Jira Cloud-Produkt nutzen, erfolgt die Authentifizierung des Skripts nicht mit Passwort, sondern mit einem API-Token.
Hintergründe und die Anleitung zum Erstellen eines API-Tokens stehen in der link:https://support.atlassian.com/atlassian-account/docs/manage-api-tokens-for-your-atlassian-account/[Jira-Dokumentation.^] 
In Jira können Sie das generierte API-Token in die Zwischenablage kopieren und im folgenden Skript als `JIRA_PASSWORD` einfügen.
====

.example_script.py
[{file}]
----
#!/usr/bin/env python3

import requests
import sys
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

user = "JIRA_USERNAME"
password = "JIRA_PASSWORD"
project_key = "PROJECT_KEY"
jira_instance = "https://jira.server.your-domain.de"
custom_field_1 = "CMK_HOST_FIELD"
custom_field_2 = "CMK_SVC_FIELD"
custom_field_3 = "CMK_SITE_FIELD" # don't edit if field is not used

def handle_response(user, password, jira_instance, what):
    url = "%s/rest/api/2/%s" % (jira_instance, what)
    sess = requests.Session()
    sess.auth = (user, password)
    response = sess.get(url, verify=False)

    return response

sys.stdout.write("=== IDs for project %s ===\n" % project_key)
infotext = ""
for section, id_name in [ ("Project_ID", "project"),
                          ("Issue", "issuetype"),
                          ("Priority", "priority"),
                          ("Field", "field"),
                        ]:

    json_response = handle_response(user,password,jira_instance,id_name).json()
    if id_name == "project":
        infotext = ""
        for project in json_response:
            if project["key"] == project_key:
                infotext += "%s\n\n" % project.get("id", "Project ID not found")
        if not infotext:
            infotext += "Project ID not found, project name existing?\n\n"
    else:
        types = ""
        for line in json_response:
            if id_name == "field":
                if line["name"].lower() == custom_field_1.lower() or \
                    line["name"].lower() == custom_field_2.lower() or \
                    line["name"].lower() == custom_field_3.lower():
                    types += "%s: %s\n" % (line["name"], line["id"].split("_")[1])
            else:
                types += "%s: %s\n" % (line["name"], line["id"])

        infotext += "=== %s types\n%s\n" % (section, types)

sys.stdout.write(infotext)
----

Die Ausgabe des Skripts sieht dann ungefähr so aus:

[{shell}]
----
=== IDs for project MY_PROJECT ===
10401

=== Issue types
Test case: 10600
Epic: 10000
Task: 10003
Sub-task: 10004
Bug: 10006
Story: 10001
Feedback: 10200
New Feature: 10005
Support: 10500
Improvement: 10002

=== Priority types
Blocker: 1
High: 2
Medium: 3
Low: 4
Lowest: 5
Informational: 10000
Critical impact: 10101
Significant impact: 10102
Limited impact: 10103
Minimal impact: 10104

=== Field types
CMK_HOST_FIELD: 11400
CMK_SVC_FIELD: 11401
CMK_SITE_FIELD: 11403
----


[#jira_ids_gui]
=== Jira-IDs über die GUI ermitteln

Als Alternative zur Skriptausführung können Sie die IDs auch über die Jira-GUI auslesen, wofür Sie sich aber mit einem administrativen Konto in Jira anmelden müssen.
Atlassian, der Hersteller von Jira, hat das Vorgehen am Beispiel der Project ID in einer eigenen link:https://confluence.atlassian.com/jirakb/how-to-get-project-id-from-the-jira-user-interface-827341414.html[Anleitung^] beschrieben.

Die IDs der weiteren Felder und Issues types lassen sich ablesen, in dem Sie das jeweilige Element in der Administrator-GUI von Jira editieren.
Die ID steht dann im Regelfall als letzter Wert in der Adressleiste Ihres Browsers.


[#config_cmk]
== {CMK} konfigurieren

Wie Sie Benachrichtigungen im Allgemeinen in {CMK} einrichten, haben Sie bereits im Artikel über xref:notifications#[Benachrichtigungen] erfahren.

Um nun die Jira-Benachrichtigungen zu nutzen, gehen Sie in {CMK} wie folgt vor:

. Wenn Sie xref:wato_user#custom_user_attributes[benutzerdefinierte Attribute] verwenden möchten, können Sie diese für die folgenden Jira-IDs erstellen:
Project ID (`jiraproject`), Issue type ID (`jiraissuetype`), Priority ID (`jirapriority`) und Transition ID (`jiraresolution`).
// TK: Das benutzerdefinierte Attribut zur Transition ID (`jiraresolution`) wird in der Hilfe der Benachrichtigungsregel aber *nicht* erwähnt.
In den Klammern sind die Namen angegeben, die Sie als [.guihint]#Name# eines Attributs eingeben.
Ein benutzerdefinierter Attribut legen Sie mit [.guihint]#Setup > Users > Custom user attributes > Add attribute# an: +
+
image::jira_notification_custom_user_attribute.png[alt="Ein benutzerdefinierter Attribut für die Jira Project ID."]
+
Achten Sie darauf, dass bei allen diesen für Jira erstellten benutzerdefinierten Attributen die Checkbox [.guihint]#Make this variable available in notifications# gesetzt ist. +
In den Eigenschaften eines Benutzers können Sie dann in diese Attribute die Jira-IDs eintragen, für die dieser Benutzer zuständig ist. +
Für jedes benutzerdefinierte Attribut lassen Sie in der Benachrichtigungsregel, die in den folgenden Schritten erstellt wird, das Feld der zugehörigen Jira-ID _leer._
Diese Felder werden dann mit den benutzerdefinierten Attributen gefüllt.

. Erstellen Sie eine neue Benachrichtigungsregel mit [.guihint]#Setup > Events >  Notifications > Add rule.#

. Wählen Sie als [.guihint]#Notification Method# den Eintrag [.guihint]#JIRA (Commercial editions only):#
+
image::jira_notification_rule.png[alt="Die Einstellungen zur Benachrichtigungsmethode für Jira."]
+
. Im Feld [.guihint]#JIRA URL# tragen Sie die URL Ihrer Jira-Instanz ein, also z.B. `jira.server.your-domain.com`.

. Bei [.guihint]#User Name# und [.guihint]#Password# hinterlegen Sie die Zugangsdaten des Jira-Kontos für den Zugriff.

. Für [.guihint]#Project ID# und [.guihint]#Issue type ID# benötigen Sie die vorher ermittelten IDs in Jira, im Beispiel `10401` für die Project ID und `10006` für den Issue-Typ `Bug`.

. Bei [.guihint]#Host custom field ID#, [.guihint]#Service custom field ID# und (optional) [.guihint]#Site custom field ID# tragen Sie IDs der von Ihnen in Jira angelegten, benutzerdefinierten Felder ein.

. Um in den erzeugten Issues direkt nach {CMK} verlinken zu können, tragen Sie
unter [.guihint]#Monitoring URL# die URL Ihrer {CMK}-Instanz ein, also z.B.: `\https://mycmkserver/mysite`

Weiterhin haben Sie noch die folgenden optionalen Einstellungsmöglichkeiten:

* Mit der [.guihint]#Priority ID# können Sie definieren, mit welcher Priorität die Issues in Jira angelegt werden. Hier können Sie eine der im Skript ausgelesenen `Priority types` eintragen, von `1` bis `5`.

* Die Beschreibungen, die in den Issues für Host- und Service-Probleme erzeugt werden, können Sie über die Optionen [.guihint]#Summary for host notifications# und [.guihint]#Summary for service notifications# ändern.

* Über den Punkt [.guihint]#Label# können Sie definieren, ob Sie bei der Issue-Erzeugung in Jira Label mit übergeben möchten. Wenn Sie Label aktivieren, ohne einen Wert einzutragen, wird `monitoring` gesetzt. +
{CMK} schreibt den Wert des Labels in das Jira-Feld `labels`, was nur gelingt, wenn dieses Feld in Ihrer Jira-Applikation existiert, was z.B. bei _Jira Software_ der Fall ist, nicht aber bei _Jira Service Desk_.

* Wenn Sie bei Benachrichtigungen über eine Zustandsänderung auf {OK} in {CMK} auch eine [.guihint]#Resolution# in den Issue in Jira eintragen lassen wollen, können Sie diese unter [.guihint]#Activate resolution with following resolution transition ID# definieren. +
Um hier die richtige ID ermitteln zu können, benötigen Sie ebenfalls Administrator-Rechte in Jira. Navigieren Sie wieder in den Bereich [.guihint]#Issues# und klicken Sie hier auf [.guihint]#Workflows#. Klicken Sie anschließend in der Zeile des Standard-Workflows des verwendeten Jira-Projekts auf [.guihint]#View#. Sollten Sie nun einen Flowchart sehen, stellen Sie die Anzeige durch einen Klick auf [.guihint]#Text# um. Nun können Sie die gewünschte ID in der Spalte [.guihint]#Transitions (id)# ablesen.

* Mit [.guihint]#Set optional timeout for connections to JIRA# können Sie den Timeout für Verbindungen zu Jira konfigurieren. Wenn Sie hier nichts eintragen, gilt der Standardwert von 10 Sekunden.

Bei der Kontaktauswahl im folgenden Kasten [.guihint]#Contact selection# beachten Sie die folgenden Punkte:

include::include_ticketsystem.asciidoc[]

. Etwas anders stellt sich das Thema Kontaktauswahl bei der Nutzung benutzerdefinierter Attribute dar, denn damit sollen ja gerade verschiedenen Benutzern verschiedene Jira-IDs zugewiesen werden.
Daher werden Sie in diesem Fall in der Regel _mehrere_ Kontakte informieren wollen, und zwar diejenigen Benutzer, denen Sie die benutzerdefinierten Attribute zugewiesen haben.
Wenn diese Benutzern verschiedene Jira-IDs verwenden, werden auch keine identischen Benachrichtigungen generiert.

Wie Sie die neue Benachrichtigungsmethode testen können, erfahren Sie im Artikel zu den xref:notifications#notification_testing[Benachrichtigungen.]


ifdef::onprem[]
[#diagnosis]
== Diagnosemöglichkeiten

Sollten nach der Einrichtung der Benachrichtigungsregel in {CMK} keine Tickets in Jira ankommen, prüfen Sie die zugehörige Log-Datei `~/var/log/notify.log`.
Von Jira kommen hier im Regelfall recht brauchbare Fehlermeldungen zurück, die Ihnen bei der Diagnose tatsächlich helfen können.
Im folgenden listen wir einige Beispiele auf.


[discrete]
=== Fehlermeldung: Unable to create issue, JIRA response code 400, Field 'labels' cannot be set.

Eventuell verfügt Ihr verwendetes Jira-Produkt nicht über Labels.
Schalten Sie in {CMK} die Verwendung von Labels in Ihrer Benachrichtigungsregel einfach ab, indem Sie den Haken vor [.guihint]#Label# wieder entfernen.


[discrete]
=== Fehlermeldung: Unable to create issue, JIRA response code 400, b'project is required'.

Diese Fehlermeldung weist darauf hin, dass die ID nicht korrekt ist, welche Sie in der Benachrichtigungsregel für das betreffende Feld (hier: Project ID) eingetragen haben.


[discrete]
=== Fehlermeldung: Unable to resolve \https://jira.server.your-domain.de/browse/ISSUE-123, JIRA response code 500, b'Internal server error'

Erhalten Sie diese Fehlermeldung, wenn ein Ticket in Jira von {CMK} automatisch geschlossen bzw. in einen anderen Status versetzt werden soll, dann *kann* dies ein Hinweis darauf sein, das die von Ihnen eingetragene Transition ID nicht korrekt ist.
Die Transition ID steht in der Benachrichtigungsregel im Feld [.guihint]#Activate resolution with following resolution transition ID#.
Gleichen Sie diese ID in der Regel erneut mit der Weboberfläche von Jira ab.
endif::[]
