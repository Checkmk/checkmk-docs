// -*- coding: utf-8 -*-
// IGNORE Logfile Precompile logfile logfiles
include::global_attr.adoc[]
= Log-Dateien überwachen
:revdate: draft
:title: Log-Dateien überwachen
:description: In {CMK} können Sie mit mk_logwatch Log-Dateien auf bestimmte Inhalte prüfen und überwachen.

{related-start}
xref:mk_filestats#[Dateien überwachen]
ifdef::onprem[]
xref:ec#[Die Event Console]
endif::[]
{related-end}

[TIP]
====
Dieser Artikel ist derzeit im Entstehen begriffen und wird regelmäßig ergänzt.
====


[#basics]
== Wesentliches zur Überwachung von Log-Dateien

Die Geschichte der Überwachung von Log-Dateien ist eine Geschichte voller Missverständnisse.
Die Missverständnisse beginnen bereits, wenn wir uns anschauen, was Log-Einträge sind und was andererseits Services in {CMK} anzeigen.
Zeilen oder Einträge in Log-Dateien sind "von Natur aus" ereignisbasiert (event based).
{CMK} hingegen bildet Zustände ab.
Mehr über den Unterschied von Ereignissen und Zuständen im Artikel xref:monitoring_basics#states_events[Grundlagen des Monitorings mit {CMK}].

In {CMK} umgehen wir dieses Problem, indem wir definieren, wann ein Service, der eine oder mehrere Log-Dateien abbildet, einen kritischen Zustand annimmt.
Im Regelfall definieren wir "werde kritisch, wenn die Log-Datei Meldungen enthält die

* neu,
* unbestätigt und
* kritisch sind".

Außerdem sollten Sie bei der Verwendung von Logwatch Maß halten.
Logwatch eignet sich für den dosierten Einsatz und nicht dafür, Gigabytes oder Terabytes von Log-Dateien zu verarbeiten.
Dafür gibt es sicherlich geeignetere Werkzeuge.
Wir empfehlen unbedingt Logwatch nur anlassbezogen und nicht flächendeckend einzusetzen.
Wie Sie im weiteren Verlauf des Artikels noch sehen werden, ist es leicht möglich, bereits auf dem überwachten Host einen wichtigen Teil der (Vor-)Filterung vorzunehmen.


////
Inhalt des alten Artikels logfiles

TI:Monitoring of Logfiles
MT:Log File Monitoring for Windows, Linux & UNIX
MD:With Checkmk you can monitor service logs, application logs, syslog data, log files, event logs and system logs of Windows, Linux and UNIX servers.
DT:outdated
KW:Eventlog,syslog,logfile
SA:windows

H1:How check_mk monitors logfiles

The monitoring of the contents of logfiles is an especially challenging
task for a Nagios administrator. The key difficulty is, that log messages
are event based by nature - whereas Nagios is based on states. Checkmk's
logwatch mechanism overcomes this problem by defining the critical state
for a logfile as "<i>no unacknownledged critical log messages</i>".

At the beginning of the monitoring a logfile starts in the state OK -
regardless of its contents. When a new critical message is seen in the
file, it is stored on the Nagios server for reference by the
administrator. The state of the logfile changes to CRITICAL and stays
in that state unless the
administrator acknowledges the messages.  New critical messages
arriving while in CRITICAL state are simply being stored and do not
change the state.

Checkmk provides a webpage <tt>logwatch.php</tt> that
displays log messages and allows the delete (and thus acknowledge) them in an easy way:

BI:logwatch.png
////


[#prereqisites]
== Voraussetzungen

Logwatch ist ein Python-Programm und benötigt somit eine Python-Umgebung auf dem Host.
In den meisten Linux-Distributionen wird Python bereits installiert sein und auch Solaris bringt seit geraumer Zeit Python 3.x mit.
Falls Sie Log-Dateien auf einem Windows-Host überwachen möchten, gibt es unterschiedliche Wege zum Ziel.

ifdef::onprem[]
{cee-only}
Nutzer unserer kommerziellen Editionen
endif::[]
ifdef::saas[]
Nutzer von {CE} (SaaS)
endif::[]
können Logwatch komfortabel über die GUI konfigurieren und das Plugin mit der Agentenbäckerei in das Agentenpaket einfügen lassen.
Sobald {CMK} bemerkt, dass Sie ein Agentenplugin auf Basis von Python für einen Windows-Host konfigurieren, wird dem Agenten zusätzlich eine virtuelle Python-Umgebung (`venv`) mitgegeben.

ifdef::onprem[]
Sollten Sie zwar eine unserer kommerziellen Editionen, aber die Agentenbäckerei nicht nutzen, so können Sie für Ihre Windows-Hosts den nun folgenden Abschnitt zu Rate ziehen.


[#python_windows]
=== Python für Windows in {RE}

[#install_python_venv]
==== {CMK} Python (`venv`) installieren

Das Installationspaket des Windows-Agenten aus {RE} enthält keine Python-Umgebung.
Eine entsprechende Cabinet-Datei liegt allerdings bereits auf Ihrem {CMK}-Server bereit.
Diese Datei namens `python-3.cab` finden Sie im Verzeichnis `~/share/check_mk/agents/windows` oder in {CMK} über [.guihint]#Setup > Agents > Windows > Windows Agent#.
Kopieren Sie diese Datei auf Ihren Windows-Host in das Verzeichnis `C:\Program Files (x86)\checkmk\service\install`.
Dort liegt bereits eine Datei mit diesem Namen und einer Dateigröße von 0 Byte.
Diese Datei müssen Sie mit der Version vom {CMK}-Server überschreiben.
Starten Sie anschließend den Service des {CMK}-Agenten neu.
In der Windows PowerShell mit Administratorrechten, können Sie das mit dem folgenden Befehl erledigen:

[{shell}]
----
net stop checkmkservice; net start checkmkservice
----

Beim Neustart des Windows-Service wird die virtuelle Python-Umgebung automatisch installiert.


[#install_full_python]
==== Python vollständig installieren

Alternativ können Sie auch ein aktuelles Python-Paket von link:https://www.python.org/[python.org^] herunterladen und installieren.
Achten Sie bei der Installation darauf, die folgenden Optionen zu aktivieren:

* [.guihint]#Install Python 3.x for all users#. Hierdurch wird auch automatisch die Option [.guihint]#Precompile standard library# aktiviert und das ist auch gut so.
* [.guihint]#Add Python to environment variables#

Falls sie nach der Installation von Python gleich drauflos testen wollen, ist auch unbedingt ein Neustart von `checkmkservice` entweder über den Windows Task Manager oder mit den oben angegebenen Befehlen notwendig.
Sonst weiß der Service nämlich nichts von den neuen Umgebungsvariablen.
endif::[]

[#monitor_logfiles]
== Log-Dateien überwachen

[#installation]
=== Installation auf dem Host

Beginnen Sie damit, das Agentenplugin zu installieren.
ifdef::onprem[]
Kopieren Sie dazu die Datei `~/share/check_mk/agents/plugins/mk_logwatch.py` von Ihrem {CMK}-Server auf den Host in das Verzeichnis `/usr/lib/check_mk_agent/plugins/` (Linux) bzw. `C:\ProgramData\checkmk\agent\plugins` (Windows).
endif::[]
ifdef::saas[]
Das Plugin `mk_logwatch.py` finden Sie auf dem {CMK}-Server in der Weboberfläche unter [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX  > Related.#
Kopieren Sie diese auf den Host in das Verzeichnis `/usr/lib/check_mk_agent/plugins/` (Linux) bzw. `C:\ProgramData\checkmk\agent\plugins` (Windows).
endif::[]
Achten Sie darauf, dass die Datei auf dem Host ausführbar ist.
Weitere Informationen zu diesem Schritt finden Sie jeweils im Abschnitt "Manuelle Installation" in den Artikeln xref:agent_linux#manualplugins[Linux überwachen] und xref:agent_windows#manual_installation_of_plugins[Windows überwachen].

ifdef::onprem[]
{cee-only}
Nutzer unserer kommerziellen Editionen
endif::[]
ifdef::saas[]
Nutzer von {CE} (SaaS)
endif::[]
können während der xref:configuration[Konfiguration der Regel] [.guihint]#Text logfiles (Linux, Solaris, Windows)# die Option [.guihint]#Deploy the Logwatch plugin and its configuration# auswählen und das Agentenplugin so automatisch mit dem Agenten ausrollen.


[#configuration]
=== Konfiguration von Logwatch

Passend zu den anfänglichen Überlegungen überwacht Logwatch ohne Konfiguration nichts.
Deshalb ist es nach der Installation den Agentenplugins unerlässlich, eine Konfigurationsdatei vom dem überwachten Host anzulegen.


[#configuration_bakery]
==== Konfiguration über die Agentenbäckerei

ifdef::onprem[]
{cee-only}
In den kommerziellen Editionen rufen
endif::[]
ifdef::saas[]
Rufen
endif::[]
Sie zunächst die Regel für das Agentenplugin [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules > Text logfiles (Linux, Solaris, Windows)# auf.
Die Voreinstellung [.guihint]#Deploy the Logwatch plugin and its configuration# sollte im Regelfall so belassen werden.
Falls Sie die Konfigurationsdatei `logwatch.cfg` allerdings auf einem anderen Weg auf den Host übertragen wollen oder müssen, steht hier noch die Option [.guihint]#Deploy the Logwatch plugin without configuration# zur Verfügung.

Weiter geht es mit der Option [.guihint]#Retention period#.
Die Voreinstellung beträgt hier eine Minute, was auch dem voreingestellten Check-Intervall in {CMK} entspricht.
Der Wert sollte immer mindestens dem Check-Intervall entsprechen.
Diese Option ist in erster Linie dafür zuständig, dass keine Log-Meldungen durch eine Service-Erkennung oder die manuelle Ausführung von `cmk -d myhost` verloren gehen.
Weitere Details dazu finden Sie in der Inline-Hilfe der Option und im link:https://checkmk.com/werk/14451[Werk #14451^] mit dem diese Option eingeführt wurde.

Jetzt folgt die Sektion der Regel, wo es endlich richtig losgeht - [.guihint]#Configure a logfile section#.
Und das beginnen wir direkt mit dem größten Stolperstein der vergangenen Jahre.
In dem Feld [.guihint]#Patterns for logfiles to monitor# müssen Sie die Log-Dateien, die Sie überwachen wollen, benennen.
Dies können Sie einzeln und explizit oder mit sogenannten Glob Patterns (kurz: Glob) erledigen.
Wir verwenden an dieser Stelle das Python-Modul `glob`, zu dem es auf docs.python.org eine link:https://docs.python.org/3/library/glob.html[ausführliche Dokumentation^] gibt.
Wir wollen Ihnen aber gleich hier ein paar hilfreiche Beispiele an die Hand geben.

Schreiben Sie hier beispielsweise `/var/log/my.log` hinein, wird Logwatch eben diese eine Log-Datei überwachen.
Geben Sie hier stattdessen `pass:[/var/log/*log]` ein, wird Logwatch alle Dateien, die auf die Zeichenfolge `log` enden und *direkt* im Verzeichnis `/var/log` liegen, überwachen.
Wollen Sie Log-Dateien in allen direkten Unterverzeichnissen von `/var/` überwachen, können Sie das beispielsweise mit dem folgenden Glob erledigen: `pass:[/var/*/*log]`.
Das Glob `pass:[**]` zum rekursiven Durchsuchen einer Verzeichnisstruktur bieten wir hier explizit *nicht* an, weil wir damit viel zu schnell bei viel zu großen Trefferlisten landen und den eigentlichen Einsatzzweck von Logwatch hinter uns lassen.

Die folgende Tabelle gibt Ihnen noch ein paar hilfreiche Beispiele, wie Sie Globs verwenden können, um auch wirklich zu die Dateien zu überwachen, die der Überwachung bedürfen, ohne alle einzeln angeben zu müssen:

//SK: Die folgenden Beispiele sollen bei jeder Gelegenheit mit interessanten Beispielen aus dem RL ergänzt werden.

[cols=3,options="header"]
|===
|Glob Pattern |Erläuterung |Beispieltreffer
|`/var/log/*` | Alle Dateien in `/var/log`. | `/var/log/mylog` `/var/log/my.log`
|`pass:[/var/log/*/*]`| Alle Dateien in allen direkten Unterverzeichnissen von `/var/log/`. | `/var/log/foo/mylog` `/var/log/bar/mylog`
|`/var/log/mylog?.log` | Alle Dateien in `/var/log` deren Namen mit `mylog` beginnen, gefolgt von einem einzelnen Zeichen und mit `.log` enden. | `/var/log/mylog1.log` `/var/log/mylog9.log`
|`/var/log/mylog[123].log`| Alle Dateien in `/var/log` deren Namen mit `mylog` beginnen, gefolgt von entweder einer `1`, `2` oder `3` und auf `.log` enden. | `/var/log/mylog1.log` `/var/log/mylog3.log`
|===

Wenn es also darum geht, welche Dateien im *ersten* Schritt "gematcht" werden, verwenden wir *keine* regulären Ausdrücke und womöglich genügt Ihnen das schon, um alle gewünschten Dateien zu erreichen.

Wenn Sie jetzt allerdings weiter aussieben müssen, können Sie in einem zweiten Schritt mit der Option [.guihint]#Regular expression for logfile filtering# reguläre Ausdrücke auf die Treffer aus Schritt 1 anwenden.

Haben Sie also im ersten Schritt mit `/var/log/*` und `pass:[/var/log/*/*]` alle Dateien in `/var/log/` und seinen direkten Unterverzeichnissen eingesammelt, könnten Sie mit dem regulären Ausdruck `error.log$|err$` die Trefferliste auf alle Dateien reduzieren, die auf `err.log` oder `err` enden.
Obacht: Der Punkt ist nun wieder ein beliebiges Zeichen.
Somit könnten dann zum Beispiel die Dateien `/var/log/apache2/error.log`, `/var/log/mail.err` und `/var/log/cups/error_log` übrig bleiben.

Sie sehen also, dass wir Ihnen für Auswahl der überwachten Dateien bereits zwei gute und mächtige Werkzeuge an die Hand geben, damit Logwatch im nächsten Schritt sehr zügig durch eine überschaubare Dateiliste auch die weiteren Parameter bzw. Inhalte prüfen kann.
Zu Letzterem können Sie Ihre Kenntnisse im Artikel xref:regexes#[reguläre Ausdrücke in Checkmk] weiter vertiefen.

//SK: TODO: Genauer. Wann wird wie was abgeschnitten.
Mit der Option [.guihint]#Restrict the length of the lines# können Sie Logwatch anweisen, überlange Zeilen nach der vorgegebenen Anzahl an Zeichen abzuschneiden.

Die folgende Option [.guihint]#Watch the total size of the log file# bietet sich an, um eine defekte Log-Rotation zu erkennen.
Wenn Sie hier 100 MiB einstellen, erhalten Sie jedes Mal eine Warnung, wenn eine bestimmte Log-Datei erneut um die eingestellte Größe gewachsen ist.

Die maximale Anzahl der Zeilen, die Logwatch pro Durchlauf und Datei prüft, lässt sich mit [.guihint]#Restrict number of processed messages per cycle# einschränken und mit [.guihint]#Restrict runtime of logfile parsing# können Sie dafür sorgen, dass Logwatch sich nicht zu lang an einer einzelnen Datei aufhält, die womöglich seit der letzten Prüfung mit abertausenden neuen Einträgen geflutet wurde.

Wenn Sie eine der beiden letzteren Optionen aktivieren, müssen Sie auch festlegen, was bei einer Überschreitung des angegebenen Grenzwerts passieren soll.
Mit unserer Voreinstellung wird der zugehörige Service kritisch und Sie erhalten die Mitteilung, dass Zeilen übersprungen wurden bzw. dass die maximale Laufzeit überschritten wurde.

[.guihint]#Handling of context messages# ist eine Option, mit der die Menge der übertragenen Daten sehr rasch sehr groß werden *kann*.
Überlegen Sie also genau, ob Ihnen nur die Log-Meldung wichtig ist, die Ihrer Ansicht nach ein {CRIT} oder {WARN} erzeugen soll, oder ob *alle* Zeilen, die seit dem letzten Durchlauf von Logwatch hinzugekommen sind, an den {CMK}-Server übertragen werden sollen.
Bei kleinen Log-Dateien, die minütlich nur um ein paar Zeilen anwachsen, ist die Einstellung [.guihint]#Do transfer context# sicherlich unproblematisch.
Wenn aber auf einem Host aber 50 Log-Dateien überwacht werden, die plötzlich 100 000 neue Zeilen mit einer Länge von 500 Zeichen aufweisen, landen wir schon im Gigabyte-Bereich.
Womöglich würde es bei einem solchen Ereignis eben genügen zu sehen, dass seit der letzten Prüfung sehr viele neue Meldungen dazu gekommen sind, um eine Prüfung direkt auf dem betroffenen Host zu veranlassen.

Sollten Sie den Kontext - also die Zeilen vor und nach einer für Sie wichtigen Log-Meldung - doch benötigen, so können Sie diesen mit der Option [.guihint]#Limit the amount of context data sent to the monitoring server# auf eine bestimmte Zahl an Zeilen vorher und nachher beschränken.

Mit [.guihint]#Limit the amount of data sent to the monitoring server# beschränken Sie die Größe der übertragenen Daten ganz allgemein.

[.guihint]#Process new logfiles from the beginning# ist standardmäßig abgeschaltet.
Dies führt mitunter zu Verwunderung, weil Logwatch Probleme, die in Log-Dateien stehen, nicht "erkennt" und an den {CMK}-Server weiterreicht.
Nach unserer Auffassung ist nichts älter als die Zeitung von gestern und so eben auch die Log-Meldungen, die *vor dem ersten Durchlauf* von Logwatch bereits in einer Log-Datei standen.
Bei diesem allerersten Durchlauf tut Logwatch nämlich nicht mehr, als sich zu notieren, wie viele Zeilen bereits in dem jeweiligen Log enthalten sind.
Erst beim zweiten Durchlauf werden die Dateien dann auf Ihren Inhalt - sprich die neu hinzugekommenen Zeilen - geprüft.

Logwatch ist bei seiner Arbeit darauf angewiesen, die Log-Dateien auch tatsächlich lesen zu können.
Unter der Haube gibt sich Logwatch sehr viel Mühe, die Kodierung einer jeden Log-Datei zu erkennen.
Allzu exotische Zeichenkodierungen können aber dazu führen, dass es hier zu Problemen kommt.
Falls Sie die Zeichenkodierungen der überwachten Log-Dateien beeinflussen können, ist UTF-8 eine sehr gute Wahl.
Geht das nicht und schafft Logwatch es nicht, die Kodierung herauszufinden, können Sie mit [.guihint]#Codec that should be used to decode the matching files# eine explizite Angabe machen.

Mit [.guihint]#Duplicated messages management# lässt sich wieder ein bisschen Bandbreite sparen und auch die spätere Ausgabe in {CMK} wird leserlicher, wenn Sie diese Option aktivieren.
Wenn Sie [.guihint]#Filter out consecutive duplicated messages in the agent output# aktivieren, zählt Logwatch wie oft eine Zeile wiederholt wurde und schreibt dies entsprechend in den Output, statt die Zeilen zu wiederholen.

Zu guter Letzt werden jetzt die für Sie interessanten Zeilen in den Log-Dateien per regulärem Ausdruck beschrieben und einem Zustand zugeordnet.
Wenn Sie möchten, dass jede Zeile, die das Wort `panic` enthält zu einem {CRIT} in {CMK} führt, genügt es hier nach einem Klick auf [.guihint]#Add message pattern# unterhalb von [.guihint]#Regular expressions for message classification# `panic` in das Feld [.guihint]#Pattern(Regex)# einzutragen.
Die Funktion der weiteren angebotenen Optionen sind bereits sehr detailliert ist der Inline-Hilfe an dieser Stelle beschrieben und werden hier nicht dupliziert.

Nur soviel: Der Zustand [.guihint]#OK# mag auf den ersten Blick verwirren.
Er dient dazu, Zeilen aus einer Log-Datei erstmal an den {CMK}-Server zu übertragen, um dann dort erst die endgültige Klassifizierung vorzunehmen.
Und damit kommen wir zu einem wichtigen Punkt, der zeigt, wie flexibel Logwatch - bei richtigem Einsatz - sein kann.

Alle Optionen, die in diesem Abschnitt erklärt wurden, werden zu Einträgen in der bereits erwähnten Konfigurationsdatei, die auf dem jeweiligen Host abgelegt wird.
Sollten Sie nun Änderungen an der Klassifizierung bestimmter Meldungen vornehmen wollen, kann es also sein, dass Sie zuerst die Regel editieren müssen, anschließend den Agenten backen und diesen installieren müssen.

Alternativ können Sie aber erstmal alle interessanten Meldungen an den {CMK}-Server übertragen (beispielsweise eben mit dem Zustand {OK}) und diese dann im Anschluss mit der Regel [.guihint]#Logfile patterns# auf dem {CMK}-Server (um-)klassifizieren.
Auf diesem Wege können Sie sich das Backen und Ausrollen des neuen Agenten sparen und müssen nach einer entsprechenden Anpassung der oben genannten Regel nur einmal schnell die Änderungen aktivieren.
Wie das genau geht, erfahren Sie weiter unten im Kapitel xref:logfile_patterns[Umklassifizieren mit Log-Datei-Mustern.]


[#configuration_manual]
==== Manuelle Konfiguration

ifdef::onprem[]
{cre-only}
In der {CRE} konfigurieren Sie das Agentenplugin wie üblich über eine Textdatei.
endif::[]
ifdef::saas[]
Alternativ können Sie das Agentenplugin wie üblich über eine Textdatei konfigurieren.
Das ist beispielsweise beim Testen verschiedener Einstellungen hilfreich.
endif::[]
Im Regelfall sucht Logwatch eine Datei namens `logwatch.cfg` in den Verzeichnissen `/etc/check_mk` (Linux) bzw. `c:\ProgramData\checkmk\agent\config\` (Windows).
Eine (fast) minimale Konfiguration könnte so aussehen:

./etc/check_mk/logwatch.cfg
[{file}]
----
"/var/log/my.log" overflow=C nocontext=True
 C a critical message
 W something that should only trigger a warning
----

Zuerst geben Sie hier also immer ein Glob Pattern an, gefolgt von allen anzuwendenden Optionen.
Darauf folgt - mit einer Einrückung von einem Leerzeichen - zuerst ein Buchstabe, der den gewünschten Zustand bzw. die Funktion repräsentiert und schließend ein regulärer Ausdruck, der mit jeder Zeile der Log-Datei verglichen wird.
Mit obiger Konfiguration würden alle neuen Zeilen, die seit dem letzten Durchlauf von Logwatch in die Datei `/var/log/my.log` hinzugefügt wurden, auf die beiden Pattern `a critical message` und `something that should only trigger a warning` geprüft.
//SK: Wird ein Pattern gefunden, wird die gesamte Zeile, die dieses Pattern enthält, zusammen mit dem definierten Zustand (C für CRIT und W für WARN), an den {CMK}-Server übergeben.
//SK: TODO: Alle Buchstaben erklären oder einfach auf die Beispielkofig verweisen?!?
////
 C CRIT
 W WARN
 O OK
 I IGNORE
 R REWRITE
 A APPEND
////

Eine sehr umfangreiche Beispielkonfiguration finden Sie als Instanzbenutzer in der Datei `~/share/check_mk/agents/cfg_examples/logwatch.cfg`.

Da alle Optionen, die Sie in einer solchen Konfigurationsdatei angeben können, bereits im Abschnitt xref:configuration_bakery[Konfiguration über Agentenbäckerei] erklärt wurden, folgt hier nur eine Auflistung samt Verweis.
Konsultieren Sie für die Erklärung den obigen Abschnitt.

[cols=4,options="header"]
|===
|Option in `logwatch.cfg` | Entsprechung | Beispiel | Anmerkung
|`regex` |[.guihint]#Regular expression for logfile filtering# |`regex='error.log$\|err$'` |
|`encoding` |[.guihint]#Codec that should be used to decode the matching files# |`encoding=utf-8` |
|`maxlines` |[.guihint]#Restrict number of processed messages per cycle# |`maxlines=500` |
|`maxtime` |[.guihint]#Restrict runtime of logfile parsing# |`maxtime=23` |
|`overflow` |In case of an overflow |`overflow=W` |
|`maxlinesize` |[.guihint]#Restrict the length of the lines# |`maxlinesize=123` |
|`maxoutputsize` |[.guihint]#Limit the amount of data sent to the monitoring server# |`maxoutputsize=10485760` |Größe in Bytes
|`skipconsecutiveduplicated` |[.guihint]#Duplicated messages management# |`skipconsecutiveduplicated=True` |
|`nocontext` | [.guihint]#Handling of context messages# |`nocontext=True`|
|`maxcontextlines` |[.guihint]#Limit the amount of context data sent to the monitoring server# |`maxcontextlines=55,66` |
|===


[#logfile_grouping]
== Gruppierung von Log-Dateien

//SK: TODO

Der zum Agentenplugin gehörige Check namens `logwatch` erstellt normalerweise für jede Log-Datei einen eigenen Service.
Durch die Definition von Gruppierungen mithilfe der Regel [.guihint]#Logfile Grouping# können Sie auf den Check `logwatch_groups` umschalten.

Weitere Informationen folgen demnächst.
Konsultieren Sie bis dahin die Inline-Hilfe der Regel [.guihint]#Logfile Grouping.#


[#logfile_patterns]
== Umklassifizieren mit Log-Datei-Mustern

//SK: TODO

Dieser Abschnitt folgt zeitnah. Konsultieren Sie bis dahin die Inline-Hilfe der Regel [.guihint]#Logfile patterns.#


ifdef::onprem[]
== Weiterleitung an die Event Console

Neben der direkten Verarbeitung von Log-Meldungen in {CMK} und einer etwaigen Umklassifizierung mit der Regel [.guihint]#Logfile patterns#, gibt es auch noch die Möglichkeit, durch Logwatch gewonnene Log-Zeilen an die xref:glossar#ec[Event Console] weiterzuleiten.
Dies geschieht mithilfe der Regel [.guihint]#Logwatch Event Console Forwarding# und wird im Artikel xref:ec#logwatch[Die Event Console] beschrieben.
endif::[]


== Logwatch im Monitoring

Im Monitoring unterscheidet sich die Darstellung je nach verwendetem Check-Plugin.

Verwenden Sie entweder `logwatch` oder `logwatch_groups`, finden Sie - nach der notwendigen Service-Erkennung - pro Log-Datei bzw. pro Gruppierung von Log-Dateien (siehe xref:logfile_grouping[Gruppierung von Log-Dateien]) einen Service der mit `Log` beginnt.
Darauf folgt der vollständige Pfad der Datei bzw. der Gruppenname.

Wenn Sie ihre Log-Meldungen hingegen and die Event Console weiterleiten, sehen Sie je nach Einstellung der Regel [.guihint]#Logwatch Event Console Forwarding# pro Weiterleitung einen Service, der Sie über die Zahl der weitergeleiteten Log-Meldungen informiert.
Bei der gebündelten Weiterleitung durch das Plugin `logwatch_ec` heißt dieser Service [.guihint]#Log Forwarding#.
Wenn Sie die Option [.guihint]#Separate check# und damit das Plugin `logwatch_ec_single` verwenden, beginnt der Service-Name auch wieder mit `Log` gefolgt von dem Pfad der Log-Datei.
Auch dieser Service informiert Sie dann über die Anzahl der weitergeleiteten Meldungen und darüber, wenn eine Log-Datei nicht gelesen werden kann.


//SK: TODO: Logfile pattern analyzer

////
H1:Logwatch on Linux and UNIX

H2:Installing the logwatch extension
Logfiles on Linux and UNIX are monitored with the logwatch extension for the check_mk_agent. In
the directory <tt>/usr/share/check_mk/agents</tt> you find the file <tt>mk_logwatch</tt>.
It is a small Python-programm that must be installed into the <tt>plugins</tt> directory of
the agent (you specify that directory while running <tt>setup.sh</tt>). The default path for
the plugins directory is <tt>/usr/lib/check_mk_agent/plugins</tt>.  Please make sure that your
host has Python in at least version 2.3 installed. On Linux this is most probably the case. On
UNIX you probably have to install it.

On Linux another way is to install the logwatch extension via its RPM or DEB
package.

H2: Configuration

Logwatch needs to know which files to monitor and for which patterns
to look. This is done in the configuration file <tt>logwatch.cfg</tt>
on each target host. That file is searched in the following
directories:

<ul>
<li>In the directory specified by the environment variable <tt>LOGWATCH_DIR</tt></li>
<li>In the check_mk configuration directory you specified during <tt>setup.sh</tt>.
</li>
<li>If <tt>LOGWATCH_DIR</tt> is not set and <tt>mk_logwatch</tt> is called
manually, then it looks in the currenty directory for that file.</li>
</ul>

It is also possible to split the config in multiple files. Just create a folder
in <tt>LOGWATCH_DIR</tt> named <tt>logwatch.d</tt>. Inside this directory
you can place multipe files ending with .cfg

If you've used the DEB or RPM package for installation
or used the default settings for setup as root,
the path to the file is <tt>/etc/check_mk/logwatch.cfg</tt>. That file
lists all relevant logfiles and defines patterns that should indicate
a critical or warning level if found in a log line. The following example defines
some patterns for <tt>/var/log/messages</tt>:

F+:/etc/check_mk/logwatch.cfg
/var/log/messages
 C Fail event detected on md device
 O Backup created*
 I mdadm.*: Rebuild.*event detected
 W mdadm\[
F-:

Each pattern is a regular expression and
must be prefixed with one space, one of <tt>C</tt>, <tt>W</tt>, <tt>O</tt>
and <tt>I</tt> and another space. The upper example means:

<ul>
<li>Lines containing <tt>Fail event detected on md device</tt> are critical.</li>
<li>Lines containing <tt>Backup created on 2012-11-02</tt> are ok.</li>
<li>Lines containing <tt>mdadm</tt>, then something, then <tt>Rebuild</tt>,
than something else and then <tt>event detected</tt> will be ignored.</li>
<li>All other lines containing <tt>mdadm[</tt> are warnings.</li>
<li>All other lines will also be ignored.</li>
</ul>

You may list several logfiles separated by spaces:
F+:/etc/check_mk/logwatch.cfg
/var/log/kern /var/log/kern.log
 C panic
 C Oops
F-:

It is also allowed to use shell globbing patterns in file names:
F+:/etc/check_mk/logwatch.cfg
/sapdata/*/saptrans.log
 C critical.*error
 C some.*other.*thingy
F-:

An arbitrary number of such chunks can be listed in <tt>logwatch.cfg</tt>.
Emtpy lines and comment lines will be ignored. This example defines
different patterns for several logfiles:

F+:/etc/check_mk/logwatch.cfg
# This is a comment: monitor system messages
/var/log/messages
 C Fail event detected on md device
 I mdadm.*: Rebuild.*event detected
 W mdadm\[

# Several instances of SAP log into different subdirectories
/sapdata/*/saptrans.log
 C critical.*error
 C some.*other.*thingy
F-:

H2: Rewriting lines
Its possible to rewrite lines by simple
add a second Rule after the matching pattern beginning with R

F+:/etc/check_mk/logwatch.cfg
/var/log/messages
 C Error: (.*)
 R There is error: \1
F-:
You can group multipe matches with ( ) and use them in the rewrite with \1, \2...

H2: Merging multiple lines
Logwatch can be configured to process multiple lines together as one log line, this
is useful, e.g. to process java traces. To configure this, you need to add a second rule
after the matching pattern beginning with <tt> A </tt>. For example:

F+:/etc/check_mk/logwatch.cfg
/var/log/messages
 C Error
 A ^\s
F-:

This joins each line beginning with a space or tab directly following a line containing
<tt>Error</tt> together to a single line.

H2: Logfile options
<tt>mk_logwatch</tt> allows to limit the time
needed to parse the new messages in a logfile. This helps in cases
where logfiles are growing very fast (i.e. due to reoccuring error,
and endless loop or similar). Those cases often arise in the context
of Java application servers logging long stack traces.

You can limit the number of new lines to be processed in a logfile
as well as the time spent during parsing the file. This is done
by appending options to the filename lines:

F+:/etc/check_mk/logwatch.cfg
/var/log/foobar.log <b>maxlines=10000 maxtime=3 overflow=W</b>
 C critical.*error
 C some.*other.*thingy
F-:

There are also optioLogwatch needs to know which files to monitor and for which patterns
to look. This is done in the configuration file <tt>logwatch.cfg</tt>
on each target host. That file is searched in the following
directories:ns for limiting the length of the <i>lines</i> in a logfile and for
getting a warning of the size of a logfile is too large (e.g. because of a filed
logfile rotation).

The options have the following meanings:
<table>
<tr><td class=tt>maxlines</td><td>the maximum number of <i>new</i> log messages that will by
parsed in one turn in this logfile</td></tr>
<tr><td class=tt>maxtime</td><td>the maximum time in seconds that will be spent parsing the
new lines in this logfile</td></tr>
<tr><td class=tt>overflow</td><td>When either the number of lines or the time is exceeded,
an <i>artificial logfile message</i> will be appended, so that you will be warned.
The class of that message is per default <tt>C</tt>, but you can also set it to
<tt>W</tt> or <tt>I</tt>. Setting <tt>overflow=I</tt> will silently ignore
any succeeding messages. If you leave out this option, then a <tt>C</tt> is assumed.</td></tr>
<tr><td class=tt>nocontext</td><td>This option can be used to disable processing of context
log messages, which occur together with a pattern matched line. To disable processing, add
<tt>nocontext=1</tt> as option.</td></tr>
<tr><td class=tt>maxlinesize</td><td><b class=new>1.2.6</b> The maximum number of characters that are processed
of each line of the file. If a line is longer than this, the rest of the line is being
truncated and the word <tt>[TRUNCATED]</tt> is being appended to the line. You can filter
for that word in the expressions if you like.</td></tr>
<tr><td class=tt>maxfilesize</td><td><b class=new>1.2.6</b> The maximum number of bytes the logfile is expected to be in size.
If the size is exceeded, then <i>once</i> there is created an artificial logfile message
with the classification <tt>W</tt>. The text of this warning will be:
<tt>Maximum allowed logfile size (<b>12345</b> bytes) exceeded.</tt> You cannot do any classification
of this line right in the configuration of the plugin. If you need a reclassification then
please do this on the Checkmk server.</td></tr>
</table>

Note (1): when the number of new messages or the processing time is exceeded, the non-processed new
log messages will be skipped and not parsed even in the next run. That way the agent always
keeps in sync with the current end of the logfile.  From that follows that you might have to
manually check the contents of the logfile if an overflow happened. We propose letting
the overflow level set to <tt>C</tt>.

Note (2): It is not neccessary to specify both <tt>maxlines</tt> and <tt>maxtime</tt>. It also
allowed to specify only one limit. The default is not to impose any limit at all.

H2: Filtering filenames with regular expressions
Sometimes the file matching patterns with <tt>*</tt>
and <tt>?</tt> are not specific enough in order to specify logfiles.
In such a case you can use the new options <tt>regex</tt> or <tt>iregex</tt> in order
to further filter the filenames found by the pattern. Here is an example:

F+:/etc/check_mk/logwatch.cfg
/var/log/*.log <b>regex=/[A-Z]+\.log$</b>
 C foo.*bar
 W some.*text
F-:

This just includes files whose path end with a <tt>/</tt>, followed
by one or more upper case letters followed by <tt>.log</tt>, such
as <tt>/var/log/FOO.log</tt>. The file <tt>/var/log/bar.log</tt> would
be ignored by this line.

<table>
<tr><td class=tt>regex</td><td>Extended regular expression that must be found
in the file name. Otherwise the file will be ignored. Use <tt>^</tt> for matching
the beginning of the path and <tt>$</tt> for matching the end.</td></tr>
<tr><td class=tt>iregex</td><td>The same as <tt>regex</tt>, but the match is
made case insensitive.</td></tr>
</table>

Note: In each logfile line you can use <tt>regex</tt> and <tt>iregex</tt> at
most once.

H2: State Persistency

In order to only send new messages, <tt>mk_logwatch</tt> remembers
the current byte offset of each logfile seen so
far. It keeps that information in <tt>/etc/check_mk/logwatch.state</tt>.
If a logfile is scanned for the very first time, all existing messages
are considered to be historic and are ignored - regardless any patterns.
This behaviour is important. Otherwise you would be
bombarded with thousands of ancient messages when check_mk runs for
the first time.

H2: Context

When something bad happens that has usually more impact into the
logfile than one single line. In order to make a error diagnosis
easier, logwatch always sends <b>all</b> new lines seen in a logfile
if at least one of those lines is classified as warning or critical.
If you monitor each host once in a minute (a quasi standard with Nagios),
you'll then see all messages appeared in that last minute.

H1: Logwatch on Windows

The <tt>check_mk_agent.exe</tt> for Windows automatically monitors the
[windows|Windows Eventlog]. Its output is fully compatible with that of the
logwatch extension for Linux/UNIX. The main difference is that
Windows already classifies its messages with <b>Warning</b> or <b>Error</b>.
Furthermore the agent automatically
monitors all existing event logs it finds, so no configuration is needed by you
at all on the target host. It is - however - possible to reclassify messages
to a higher or lower level via the configuration variable <tt>logwatch_patterns</tt>.
Messages classified as informational by Windows cannot be reclassified since
they are not sent by the agent. Please refer to the article about the [windows|Windows agent]
for details on <tt>logwatch_patterns</tt>.

The Windows agent also now supports the monitoring of custom textfiles, just
like the linux/unix agent. For details please refer to the article [windows|Windows logfiles monitoring].

H1: The logwatch web page

Whenever check_mk detects new log messages, it stores them
on the Nagios host in a directory that defaults to
<tt>/var/lib/check_mk/logwatch</tt>. Each host gets a
subdirectory, each logfile's messages are stored in one file.

The Nagios service that reflects a logfile is in warning
or critical state, if that file exists and contains at
least one warning or critical message resp.

The <tt>/check_mk/logwatch.py</tt> web page allows you to nicely
browse the messages in that file and acknowledges them, if
you consider the problem to be solved. Acknowledgement
means deletion of the file. Shortly afterwards the service
of the logfile enters OK state in Nagios.

The default Nagios templates of Checkmk automatically
create <tt>notes_url</tt> entries for all logwatch based
services to that page.

H1: Limiting the size of unaknowledged messages
In some situations the number of error messages can get
quite large in a short time. In order to make the web
pages still usage, the logwatch check stops to store
new error messages on the monitoring server. The
maximum size of a logfile is set to <tt>500000</tt> bytes.
This can be overridden in <tt>main.mk</tt> by setting
<tt>logwatch_max_filesize</tt> to another number:

F+:main.mk
# Limit maximum size of stored message per file to 10 KB
logwatch_max_filesize = 10000
F-:
////

////
[#troubleshooting]
== Troubleshooting
SK: Hier könnte ein Hinweis für Leute hin, die noch mit Python2 unterwegs sind.
////


[#files]
== Dateien und Verzeichnisse

ifdef::onprem[]
Alle Pfadangaben für den {CMK}-Server sind relativ zum Instanzverzeichnis (z.B. `/omd/sites/mysite`) angegeben.
endif::[]

[cols="15,39,~",options="header"]
|===
|Ort |Pfad |Bedeutung
ifdef::onprem[]
|{CMK}-Server |`~/share/check_mk/agents/cfg_examples/logwatch.cfg` |Beispielkonfigurationsdatei
|{CMK}-Server |`~/share/check_mk/agents/plugins/mk_logwatch.py` |Python-3-Agentenplugin inklusive Erläuterungen
|{CMK}-Server |`~/share/check_mk/agents/plugins/mk_logwatch_2.py` |Python-2-Agentenplugin inklusive Erläuterungen
endif::[]
|Linux-Host |`/etc/check_mk/logwatch.cfg` |Konfigurationsdatei - von der Agentenbäckerei oder manuell erstellt
|Linux-Host |`/var/lib/check_mk_agent/logwatch.state.*` | State-Dateien von mk_logwatch
|Linux-Host |`/var/lib/check_mk_agent/logwatch-batches/*` | Speicherort der einzelnen Batches, die mk_logwatch pro Abfrage erzeugt
|Windows-Host |`c:\ProgramData\checkmk\agent\config\logwatch.cfg` |Konfigurationsdatei - von der Agentenbäckerei oder manuell erstellt
|Windows-Host | `c:\ProgramData\checkmk\agent\state` | Ablageort für die State-Dateien von mk_logwatch
|Windows-Host | `c:\ProgramData\checkmk\agent\state\logwatch-batches`  | Speicherort der einzelnen Batches, die mk_logwatch pro Abfrage erzeugt
|===
