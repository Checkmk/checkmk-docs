// -*- coding: utf-8 -*-
// IGNORE % Virtualisierungs
include::global_attr.adoc[]
= Wartungszeiten
:revdate: 2024-02-22
:title: Wartungszeiten
:description: Geplante Ausfälle müssen im Monitoring berücksichtigt werden. Wie Wartungszeiten in {CMK} abgebildet werden können, erfahren Sie hier.

{related-start}
xref:commands#[Kommandos]
xref:notifications#[Benachrichtigungen]
xref:timeperiods#[Zeitperioden (Time Periods)]
{related-end}

== Funktionsweise

Im IT-Betrieb unterscheidet man zwei Arten von Ausfällen: geplante und
ungeplante. Das Monitoring-System kann -- wenn es einen Ausfall feststellt --
natürlich erst mal nicht wissen, ob dieser geplant war oder nicht. Über das
Konzept von _Wartungszeiten_ (Englisch _scheduled downtimes_) können
Sie geplante Ausfallzeiten eines Hosts oder Services dem System bekannt machen,
indem Sie für die entsprechenden Objekte eine Wartungszeit definieren. Befindet
sich ein Host oder Service in so einer Wartungszeit, hat das folgende
Auswirkungen:

* In den Ansichten erscheint ein Symbol bei den betroffenen Hosts und Services: Services werden mit einem icon:icon_downtime[alt="Symbol zur Anzeige der Wartungszeit bei Services."] Leitkegel markiert, Hosts mit einem icon:icon_derived_downtime[alt="Symbol zur Anzeige der Wartungszeit bei Hosts."] blauen Pause-Symbol. Auch Services, deren Hosts sich in Wartung befinden, bekommen das blaue Pause-Symbol. In der xref:history[Historie] werden gestartete Wartungszeiten mit icon:icon_alert_downtime[alt="Symbol zur Anzeige einer gestarteten Wartungszeit."] markiert und beendete mit icon:icon_alert_downtimestop[alt="Symbol zur Anzeige einer beendeten Wartungszeit."].
* Die Benachrichtigungen über Probleme sind während der Wartung abgeschaltet.
* Die betroffenen Hosts/Services tauchen im [.guihint]#Overview# nicht mehr als Probleme auf.
* In der xref:availability#[Verfügbarkeitsanalyse] werden geplante Wartungszeiten gesondert berücksichtigt.
* Zu Beginn und Ende einer Wartungszeit wird eine spezielle Benachrichtigung ausgelöst, die darüber informiert.

== Wartungszeiten eintragen
Das Setzen von Wartungszeiten geschieht über xref:commands#[Kommandos].
Alle Aktionen, die Wartungszeiten betreffen, sind hier in einem eigenen Kasten zusammengefasst:

image::basics_downtimes_schedule.png[alt="Dialog zur Definition einer Wartungszeit."]

Das Feld [.guihint]#Comment# muss immer ausgefüllt werden.
Sie können an dieser
Stelle auch eine URL in der Form _\https://www.example.com_ eintragen, die
dann als anklickbarer Link zur Verfügung steht.
Für die zeitliche Definition gibt es zahlreiche unterschiedliche Möglichkeiten -- vom einfachen
[.guihint]#2 hours#, welches die Wartung *ab sofort* definiert, bis hin zu der
Angabe eines expliziten Zeitraums, mit dem auch eine Wartung in der Zukunft
definiert werden kann.
Abhängig davon, wo Sie sich befinden - bei einem Service, bei einem Host oder auf der Host-Übersicht, ändert sich die Ansicht der verfügbaren Optionen.

=== Repeat

Hier können Sie eintragen, ob die Wartungszeit regelmäßig wiederholt werden soll und mit welcher Periode dies geschehen soll.
Diese Wiederholung wird weiter unten in einem eigenen Abschnitt ausführlich besprochen.

=== Advanced options 

Im Abschnitt [.guihint]#Advanced options# finden Sie weitere Möglichkeiten, um Wartungszeiten zu definieren:

==== Only for hosts: Set child hosts in downtime

Diese Option ist für Router und Switche nützlich, aber z.B. auch für Virtualisierungs-Hosts.
{CMK} wird so auch automatisch auf alle Hosts eine Wartungszeit setzen, welche über den betroffenen Host direkt
(oder bei ausgewähltem [.guihint]#Include indirectly connected hosts (recursively)# auch indirekt) erreichbar sind.

==== Only start downtime if host/service goes DOWN/UNREACH...

Diese Option ist z.B. nützlich, wenn Sie wissen, dass ein Host für ein paar Minuten {DOWN} gehen wird, aber die exakte Uhrzeit nicht vorhersagen können.
Mit dieser Option beginnt die Wartungszeit nicht automatisch zum angegebenen Zeitpunkt, sondern erst dann, wenn der Host tatsächlich in einen Problemzustand eintritt.

Beispiel: Sie definieren eine Wartungszeit von 14:00 bis 16:00 Uhr und aktivieren die Option [.guihint]#Only start downtime if host/service goes DOWN/UNREACH during the defined start and end time# mit einer maximalen Dauer von 30 Minuten.
Um 14:00 Uhr wird die Wartungszeit noch nicht automatisch aktiv, sondern ist nur in Wartestellung.
Sobald der Host auf {DOWN} oder {UNREACH} geht, beginnt die Wartungszeit und das Pausenzeichen erscheint.
Sie dauert jetzt genau die bei der Option angegebene Zeit -- egal wie sich der tatsächliche Zustand vom Host entwickelt und ggf. auch über die eingestellte Endzeit der Wartungszeit hinaus.

image::basics_downtimes_flexible.png[alt="Einstellung einer flexiblen Wartungszeit."]

Die Start-/Endzeit ist also bei den flexiblen Wartungszeiten nur das Zeitfenster, innerhalb dessen die Wartungszeit beginnt.
Wenn innerhalb dieses Zeitfensters kein Problemzustand eintritt, so wird die Wartungszeit einfach ausgelassen.
Alles für Hosts gesagte gilt natürlich für Services analog.

=== Schedule downtime on host

Setzen Sie Wartungszeiten für einen Host fest, aktivieren Sie mit diesem Knopf die soeben definierten Einstellungen.
Aber mit diesem Knopf können Sie noch mehr.
Wenn Sie, beispielsweise in der Ansicht [.guihint]#Services of Host,#
Wartungszeiten gesetzt haben, würden sich die geplanten Wartungszeiten auch
tatsächlich direkt auf alle bzw. alle ausgewählten Services beziehen.
Sollte dies einmal nicht gewünscht sein, müssen Sie nicht zuerst in die Ansicht
[.guihint]#Status of Host# navigieren sondern können mithilfe dieser Option die
Wartungszeit direkt auf den Host setzen.

image::basics_downtimes_schedule_host.png[alt="Bestätigung, dass die Wartungszeit tatsächlich auf den Host angewendet werden soll."]

== Wartungszeiten anzeigen und löschen

Für die Wartungszeiten gibt es in {CMK} eine eigene Ansicht, die Sie erreichen
über [.guihint]#Monitor > Overview > Scheduled downtimes#:

image::basics_downtimes_downtimeslist.png[]

Wie in jeder Ansicht können Sie über die icon:icon_filter[] Filter die Auswahl
einschränken. Über die icon:commands[] Kommandos in dieser Ansicht können Sie
eine oder mehrere Downtimes entfernen und sogar auch nachträglich ändern
(nur kommerzielle Editionen), z.B. wenn diese verlängert werden müssen, da die eigentliche
Wartung länger dauert als zunächst vorgesehen.

image::basics_downtimes_editdowntimes.png[]

[#history]
=== Historie

Die Ansicht [.guihint]#Monitor > History > Downtime history# zeigt nicht die aktuellen
Wartungszeiten, sondern deren Geschichte -- also alle Ereignisse, bei denen eine Wartungszeit
begonnen hat oder endete (entweder durch ein natürliches Ende oder durch das Löschen
per Kommando).

image::basics_downtimes_downtimes_history.png[]

[#scheduled]
== Regelmäßige Wartungszeiten

{cee-only}
Manche Wartungen werden regelmäßig ausgeführt -- wie z.B. der
automatische Neustart eines Servers einmal pro Woche. Jedes Mal
von Hand eine Wartung einzutragen wäre recht umständlich. Wenn es
nur um die xref:notifications#[Benachrichtigungen] geht, können Sie hierzu mit
xref:timeperiods#[Zeitperioden] und dem Regelsatz
[.guihint]#Notification period for Hosts/Services# arbeiten. Dies hat allerdings verschiedene Einschränkungen.
Eine Wichtige ist, dass man für das Anlegen von Zeitperioden globale
Konfigurationsberechtigungen benötigt.

Die kommerziellen Editionen bieten daher das Konzept von sich automatisch periodisch wiederholenden
Wartungszeiten. Diese können auf zwei verschiedene Arten eingetragen werden.

=== Anlegen mittels Kommandos

Die erste Methode ist der Weg, den wir bereits für einmalige
Wartungszeiten kennengelernt haben -- über ein Kommando -- aber mit der zusätzlichen
Checkbox [.guihint]#Repeat this downtime on a regular basis every ...#

image::basics_downtimes_periodic.png[]

Dabei wählen Sie die Periode aus, mit der sich die Wartung wiederholen soll. Das
*erste* Auftreten tragen Sie wie gewohnt ein. Hier bietet sich der Knopf
[.guihint]#Custom time range# an. Von dem hier eingetragenen Startzeitpunkt aus wird die
Periode berechnet. Es gibt folgende Möglichkeiten:

[cols=2]
|===

|[.guihint]#hour# |Die Wartungszeit wiederholt sich stündlich genau um die gleiche Uhrzeit.
|[.guihint]#day# |Tägliche Wiederholung um die gleiche Uhrzeit.
|[.guihint]#week# |Wiederholung alle sieben Tage am gleichen Wochentag und zur gleichen Uhrzeit wie beim ersten Mal.
|[.guihint]#second week# |Wie wöchentlich, nur jetzt 14-tägig
|[.guihint]#fourth week# |Das Gleiche, aber jetzt alle 28 Tage.
|[.guihint]#same nth weekday (from beginning)# |Hiermit können Sie Dinge realisieren wie „jeden zweiten Montag im Monat“. {CMK} nimmt dabei den Wochentag als Startzeitpunkt, guckt dann, der wievielte Tag im Monat das ist und basiert darauf die Periode. Wenn also der Starttermin am zweiten Montag des Monats ist, wird fortan jeden Monat am zweiten Montag wieder eine Wartung eingetragen.
|[.guihint]#same nth weekday (from end)# |Dies ist analog, allerdings wird jetzt vom Ende des Monats gerechnet, also so etwas wie „jeder letzte Freitag im Monat“.
|[.guihint]#same day of the month# |Bei dieser Variante bleibt der Wochentag unberücksichtigt. Hier geht es nur darum, der wievielte Tag im Monat es ist. Wenn also das Startdatum am 5. eines Monats ist, so wird die Wartungszeit fortan jeden 5. eines Monats wiederholt.
|===



=== Anlegen mittels Regeln

Eine alternative, sehr elegante Methode für das Einrichten von periodischen
Wartungszeiten ist das Anlegen über xref:wato_rules#[Regeln.] Mithilfe von
xref:glossar#host_tag[Host-Merkmalen] können Sie damit z.B. Dinge bestimmen wie:
_Jeder produktive Windows-Server bekommt jeden Sonntag von 22:00 bis 22:10 Uhr
eine Wartungszeit._

Zwar könnten Sie fast das Gleiche erreichen, indem Sie mit der Host-Suche
alle betroffenen Server finden und die Wartungszeit dann über ein Kommando
eintragen. Aber dies funktioniert natürlich nur für *bestehende*
Server. Wird in Zukunft ein neuer Host ins Monitoring aufgenommen, so fehlt
ihm dieser Eintrag. Wenn Sie stattdessen mit Regeln arbeiten, haben Sie
dieses Problem nicht mehr. Ein weiterer Vorteil von Regeln ist, dass Sie die
Wartungsrichtlinie später ändern können -- einfach durch Anpassung
der Regeln.

Die Regeln für die regelmäßigen Wartungszeiten finden Sie unter
[.guihint]#Setup > Host monitoring rules > Recurring downtimes for hosts#
beziehungsweise [.guihint]#Setup > Service monitoring rules > Recurring downtimes for services.#

image::basics_downtimes_recurring_rule.png[]

== Wartungszeiten und Verfügbarkeit

Wie eingangs erwähnt, haben Wartungszeiten eine Auswirkung auf die Berechnung
der xref:availability#[Verfügbarkeitsanalyse.] Per Default werden alle Wartungszeiten
in einen eigenen „Topf“ gerechnet und in der Spalte [.guihint]#Downtime# angezeigt.

image::basics_downtimes_availability_list.png[]

Wie genau Wartungszeiten verrechnet werden sollen, können Sie über
[.guihint]#Availability > Change computation options# einstellen:

image::basics_downtimes_availability_option.png[width=50%, align=center]

[cols=2]
|===

|[.guihint]#Honor scheduled downtimes# |Wartungszeiten werden in die Verfügbarkeitsgrafiken eingerechnet und als eigenständige Spalte angezeigt. Das ist das Standardverhalten.
|[.guihint]#Exclude scheduled downtimes# |Wartungszeiten werden bei der Berechnung der 100{nbsp}% komplett ausgeklammert. Alle prozentualen Angaben über die Verfügbarkeit beziehen sich also nur auf die restlichen Zeiten, quasi: Wie viel Prozent der Nicht-Wartungszeit war das Objekt verfügbar?
|[.guihint]#Ignore scheduled downtimes# |Wartungszeiten werden überhaupt nicht berücksichtigt, sondern nur der tatsächliche Status, den das Objekt jeweils hatte.
|===

Zusätzlich gibt es noch unter [.guihint]#Phases# die Option [.guihint]#Treat
phases of UP/OK as non-downtime#. Wenn diese ausgewählt ist, dann werden Zeiten,
in denen ein Objekt in einer Wartung, aber trotzdem gleichzeitig {OK} bzw. {UP}
ist, *nicht* als Wartungszeit gewertet. Somit geht in die Berechnung nur
derjenige Teil der Wartungszeiten ein, der *tatsächlich* mit einem Ausfall
verbunden war.
