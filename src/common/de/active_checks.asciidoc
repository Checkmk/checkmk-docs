// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= Netzwerkdienste überwachen (Aktive Checks)
:revdate: 2024-04-22
:title: Netzwerkdienste überwachen (Aktive Checks) - Überwachung von HTTPS, TCP, SSH, FTP und weiteren Diensten
:description: Bei vielen Diensten ist es nur sinnvoll, diese von außen auf Funktion oder Antwortzeiten zu überwachen. Hier erfahren Sie, wie das in {CMK} funktioniert.
:keywords: check_httpv2, http

{related-start}
xref:wato_monitoringagents#[Monitoring-Agenten]
ifdef::onprem[]
xref:datasource_programs#[Datenquellenprogramme]
endif::[]
xref:agent_linux#[Linux überwachen]
xref:agent_windows#[Windows überwachen]
{related-end}


[#intro]
== Einleitung

In {CMK} haben Sie viele Möglichkeiten, Ihre Infrastruktur zu überwachen.
ifdef::onprem[]
Die Überwachung durch einen xref:wato_monitoringagents#agents[Agenten] oder xref:snmp#[SNMP] sind dabei nur zwei
endif::[]
ifdef::saas[]
Die Überwachung durch einen xref:wato_monitoringagents#agents[Agenten] ist dabei nur eine
endif::[]
von xref:wato_monitoringagents#[mehreren Methoden.]
Allen Agenten basierten Methoden ist gemein, dass sie einem nur Zustände mitteilen, wie sie der Host von innen heraus sieht.
Sie werden aber sicher einige Dienste kennen, die man nur von außen sinnvoll überwachen kann.
Ob der Webserver läuft, lässt sich noch von innen heraus beantworten.
Wie jedoch die Erreichbarkeit und die Antwortzeiten bei dem eigentlichen Benutzer aussehen, lässt sich auf diese Weise nicht herausfinden.

{CMK} bietet für diese Fälle die aktiven Checks (_active checks_) an.
Über diese können Sie Netzwerkdienste direkt und bequem von außen überwachen und die Daten auf ihrem Host anzeigen lassen.
Aktive Checks sind also kleine Programme oder Skripte, die eine Verbindung zu einem Dienst im Netzwerk oder Internet aufbauen und dem Benutzer dann die Monitoring-Daten zur Verfügung stellen.
Viele der Skripte und Programme, die Sie in {CMK} finden, stammen ursprünglich von link:https://www.monitoring-plugins.org[monitoring-plugins.org.^]
ifdef::onprem[]
Da {CMK} aber generell kompatibel zu Nagios ist, können Sie alle Plugins nutzen, die auch unter Nagios funktionieren.
endif::[]

Wenn Sie solche Plugins integrieren, behalten Sie den Hauptzweck der aktiven Checks im Auge:
Sie sollen im Sinne eines End-to-End-Monitorings die Erreichbarkeit, Antwortzeit oder den Antwortstatus eines über das Netzwerk erreichbaren Dienstes auf dem überwachten Host prüfen.
Für viele andere Überwachungsaufgaben bietet {CMK} effizientere Checks.
ifdef::onprem[]
Eine Übersicht finden Sie im Artikel xref:devel_intro#[Erweiterungen für {CMK} entwickeln.]
endif::[]

Die wichtigsten dieser Programme und Skripte sind in {CMK} direkt in der Weboberfläche verfügbar.
Hier eine kleine Auswahl:

* link:https://checkmk.com/de/integrations/check_httpv2[Check HTTP web service^]
* link:https://checkmk.com/de/integrations/check_cert[Check certificates^]
* link:https://checkmk.com/de/integrations/check_dns[Check DNS service^]
* link:https://checkmk.com/de/integrations/check_smtp[Check access to SMTP services^]
* link:https://checkmk.com/de/integrations/check_mail[Check Email^]
* link:https://checkmk.com/de/integrations/check_sftp[Check SFTP service^]
* link:https://checkmk.com/de/integrations/check_tcp[Check connecting to a TCP Port^]
* link:https://checkmk.com/de/integrations/check_ssh[Check SSH service^]
* link:https://checkmk.com/de/integrations/check_icmp[Check hosts with PING (ICMP Echo Request)^]
* link:https://checkmk.com/de/integrations/check_ldap[Check access to LDAP service^]


[#setup]
== Aktive Checks einrichten

=== Reguläre aktive Checks einrichten

Im [.guihint]#Setup# können Sie -- wie bereits weiter oben erwähnt -- die wichtigsten und am häufigsten genutzten Checks direkt in der Weboberfläche einrichten.
Wählen Sie dafür den Menüpunkt [.guihint]#Setup > Services > HTTP, TCP, Email.#
Hier finden Sie die Regelsätze, mit denen Sie diese Checks einrichten können:

image::active_checks_rulesets.png[alt="Liste der Regelsätze für aktive Checks."]

Die meisten Optionen in den Regelsätzen sind selbsterklärend.
Falls doch einmal etwas unklar sein sollte, können Sie auch hier für viele Optionen auf die xref:user_interface#inline_help[Inline-Hilfe] zurückgreifen.


=== Aktive Checks einem Host zuweisen

Bei manchen Regeln ist es in den Optionen notwendig, eine IP-Adresse oder einen Host-Namen anzugeben.
An vielen Stellen ist möglich diese Option leer zu lassen, so dass der Host-Name oder dessen IP genommen wird.
Auf diese Weise können Sie sehr leicht mit nur einer Regel eine ganze Gruppe an Hosts mit einem aktiven Check versorgen.
Achten Sie daher immer darauf (auch mit Hilfe der bereits erwähnten Inline-Hilfe), ob diese Möglichkeit in dem konkreten Regelsatz zur Verfügung steht.
Sie sparen sich damit unter Umständen eine Menge Konfigurationsarbeit.

[.guihint]#Check HTTP web service# ist ein häufig benötigter Check zur Überwachung vieler Parameter von Webservern, wie Zertifikatsgültigkeit, Antwortzeit, Response Code oder der Suche nach Zeichenketten in ausgelieferten Webseiten.
Sie finden ihn unter [.guihint]#Networking > Check HTTP web service#.
Nehmen wir an, Sie möchten die Gültigkeit der Zertifikate sämtlicher Webserver in Ihrer Infrastruktur überwachen, Antwortzeiten von unter einer Sekunde und einen Statuscode 200 sicherstellen, dafür aber nicht Dutzende oder gar Hunderte Regeln anlegen:

image::active_checks_http_conf.png[alt="Beispielhafte Konfiguration der Regel 'Check HTTP web service'."]

[TIP]
====
*Warum existiert mit [.guihint]#Check certificates# ein weiterer aktiver Check für Zertifikate?*

Der vorgestellte Check [.guihint]#Check HTTP web service# führt immer _einen vollständigen_ HTTP-Request durch, was seinen Einsatz auf Webserver beschränkt.
Im Gegenzug ist seine Ausführung sehr effizient, er kann mit nur einem _einzigen_ HTTP-Request eine Reihe von Prüfungen durchführen.

Dagegen prüft [.guihint]#Check certificates# nur den TLS-Verbindungsaufbau und dabei die Zertifikate.
Dieser Check kann folglich auch auf anderen mit TLS abgesicherten Diensten wie IMAP/S angewandt werden.
Zudem kann er Zertifikate weit detaillierter untersuchen, beispielsweise auf bestimmte per link:https://de.wikipedia.org/wiki/Server_Name_Indication[Server Name Indication (SNI)^] hinterlegte Host-Namen.
====

Um den eben konfigurierten Check mit einer einzigen Regel auf alle passenden Hosts anzuwenden, machen Sie sich zunächst Gedanken, wie Sie die [.guihint]#Conditions# am besten befüllen.
In dem nachfolgenden Beispiel nutzen wir dafür die Funktion der xref:glossar#label[Labels] und setzen auf alle unsere Webserver das Label `webprotocol:https`.
Mit solch einem Label können Sie eine Regel anlegen und die [.guihint]#Conditions# auf eben dieses Label setzen:

image::active_checks_http_conditions.png[alt="Einschränkung der Regel per Host-Label auf Webserver."]

Nachdem Sie die eben erstellte Regel aktiviert haben, suchen Sie im xref:user_interface#search_monitor[Monitor-Menü] nach dem soeben gesetzten Service-Namen `Basic webserver health`.
Im nachfolgenden Beispiel sehen Sie die Hosts bei denen das Label entsprechend gesetzt wurde.
// Nach dem Klick auf dem können Sie dann erkennen, dass auch wirklich verschiedene Webseiten geprüft wurden, da die Ablaufdaten der Zertifikate sich unterscheiden und sie unterschiedliche primäre Hostnamen benutzen:

image::active_checks_http_services.png[alt="Die von der Regel erzeugten Services im Monitoring."]

*Wichtig*: Beachten Sie, dass bei den aktiven Checks nicht nur die erste Regel ausgewertet wird, auf welche die Bedingungen zutreffen, sondern vielmehr _alle_, für die die Bedingungen zu einem Host zutreffen.
Nur so ist es möglich, mehrere aktive Services auf einem Host anzulegen.

ifdef::onprem[]
[#nagios_plugins]
=== Andere zu Nagios kompatible Plugins einbinden

In {CMK} stehen Ihnen natürlich nicht nur die aktiven Checks zur Verfügung, die Sie in der Weboberfläche als Regelsätze vorfinden.
Über diese Check-Plugins hinaus, finden Sie noch viele weitere in Ihrer Instanz.
Um die Übersicht zu wahren, werden in der folgenden Ausgabe nur ausgewählte Zeilen angezeigt:

[{shell}]
----
{c-omd} ll ~/lib/nagios/plugins/
total 2466
-rwxr-xr-x 1 root root   56856 Feb  3 00:45 check_dig
-rwxr-xr-x 1 root root    6396 Feb  3 00:45 check_flexlm
-rwxr-xr-x 1 root root    6922 Feb  3 00:45 check_ircd
-rwxr-xr-x 1 root root   60984 Feb  3 00:45 check_ntp_peer
-rwxr-xr-x 1 root root   78136 Feb  3 00:45 check_snmp
----

Jedes dieser Check-Plugins bietet auch eine Hilfe-Option an (`-h`), über die Sie mehr zur Nutzung des jeweiligen Plugins erfahren können,
ohne die link:https://www.monitoring-plugins.org[monitoring-plugins.org^] Website bemühen zu müssen.

{CMK} bietet dafür unter [.guihint]#Setup > Services > Other services# den speziellen Regelsatz [.guihint]#Integrate Nagios plugins# an, um diese Plugins bequem nutzen zu können.
Die beiden wichtigsten Optionen sind hier die Angabe einer Service-Beschreibung und die Kommandozeile.
Letztere kann so geschrieben werden, als würden Sie sich bereits im richtigen Verzeichnis befinden:

// MFS: CLI, bitte für künftige Revisionen drinlassen:
// check_snmp -H $HOSTADDRESS$  -o .1.3.6.1.2.1.1.1.0 -P 2c -C public -r '.*JetStream.*'
// echo 'SNMP OK - "JetStream 24-Port Gigabit Switch"'
image::active_checks_custom_config.png[alt="Regel zur Integration von Nagios plugins."]

Beachten Sie, dass Ihnen hier auch die oben gezeigten Makros, wie `$HOSTNAME$` oder `$HOSTADDRESS$` zur Verfügung stehen.
Eine Liste von allen verfügbaren Makros finden Sie wie immer in der Inline-Hilfe.
Nachdem Sie die Änderungen aktiviert haben, können Sie den neuen Service auf dem zugeordneten Host sehen:

image::active_checks_custom_service01.png[alt="Der von der Regel erzeugte Service im Monitoring."]


==== Eigene Plugins verwenden

In manchen Fällen haben Sie bereits eigene Plugins geschrieben und möchten diese nun in {CMK} verwenden.
In diesem Fall ist das Vorgehen weitgehend identisch.
Voraussetzung ist lediglich, dass das Plugin kompatibel zu Nagios ist.
Dazu gehört eine einzeilige Ausgabe mit den Details des Status und ein Exit-Code, welcher den Status beschreibt.
Dieser muss `0` für {OK}, `1` für {WARN}, `2` für {CRIT} oder `3` für {UNKNOWN} sein.

Ein kurzes Beispiel, um die sehr einfache Syntax zu veranschaulichen, zeigt das folgende Skript, dass Sie z.B. im Unterverzeichnis `~/tmp` des Instanzverzeichnisses erstellen können:

.~/tmp/myscript.sh
[{file}]
----
#!/bin/bash
echo "I am a self written check and I feel well."
exit 0
----

Legen Sie das Plugin in dem lokalen Pfad ihrer Instanz ab und machen Sie es in einem Rutsch ausführbar:

[{shell}]
----
{c-omd} install -m755 ~/tmp/myscript.sh ~/local/lib/nagios/plugins/
----

Das weitere Vorgehen ist dann identisch zu anderen Plugins, die über den Regelsatz [.guihint]#Integrate Nagios plugins# angelegt werden, so dass Sie am Ende den neuen Service sehen können:

image::active_checks_custom_service02.png[alt="Der vom eigenen Plugin erzeugte Service im Monitoring."]
endif::[]

[#special_features]
== Besonderheiten bei aktiven Checks

Services, welche durch aktive Checks erstellt wurden, verhalten sich in mancher Hinsicht anders, als andere Services.
So wird der Service eines aktiven Checks...

* ... auch dann weiter geprüft, wenn ein Host {DOWN} ist.
* ... unabhängig von anderen (passiven) Services ausgeführt.
Das ermöglicht auch das Setzen eines eigenen Intervalls.
* ... immer vom {CMK}-Server ausgeführt.
Ausnahmen sind hier xref:mrpe[MRPEs], welche direkt auf einem Host ausgeführt werden.
* ... nicht über die xref:glossar#service_discovery[Service-Erkennung] aufgenommen, sondern automatisch erzeugt.


[#mrpe]
== Aktive Checks auf einem Host ausführen (MRPE)

Angenommen, Sie überwachen von Ihrer {CMK}-Instanz einen Host A (bspw. einen Webserver), der wiederum auf Dienste von Host B (bspw. eine Datenbank) zurückgreift.
Eine Überwachung der Services auf Host B direkt von der {CMK}-Instanz aus wird sehr wahrscheinlich durch andere Paketlaufzeiten etc. verfälscht werden
und daher keine Aussage darüber treffen, wie sich die Erreichbarkeit in der Praxis von Host A verhält.
Hier ist es praktisch, ein Nagios-Plugin vom Agenten des überwachten Hosts (hier A) ausführen zu lassen, welches direkt die Dienste auf Host B überprüft.

Hierfür stellen wir _MK's Remote Plugin Executor_ (kurz: MRPE) zur Verfügung.
Je nachdem, ob Sie ein solches Plugin auf einem Unix-artigen System oder auf einem Windows System ausführen wollen, legen Sie es an unterschiedlichen Stellen im Installationsverzeichnis des jeweiligen Agenten ab.
Zusätzlich benötigen Sie noch eine Konfigurationsdatei, welche bestimmt, in welcher Art und Weise das Plugin ausgeführt werden soll und wie die konkrete Kommandozeile für den Aufruf aussieht.

Ausführliche Anleitungen finden Sie in den jeweiligen Artikeln zu xref:agent_linux#mrpe[Linux] und xref:agent_windows#mrpe[Windows.]

ifdef::onprem[]
[#files]
== Dateien und Verzeichnisse

[cols="30,~",options="header"]
|===
|Pfad |Bedeutung
|`~/lib/nagios/plugins/` |Hier finden Sie alle Plugins, welche mit {CMK} mitgeliefert werden.
Es wird dabei keine Unterscheidung zwischen Plugins gemacht, welche von link:https://www.monitoring-plugins.org[monitoring-plugins.org^] und welche speziell für {CMK} geschrieben wurden.
|`~/local/lib/nagios/plugins/` |Eigene Plugins legen Sie hier ab.
Sie werden dann dynamisch eingelesen und überstehen auch ein Update der {CMK}-Instanz.
|===
endif::[]
