// -*- coding: utf-8 -*-
// IGNORE Benachrichtigungs AMQP RabbitMQ vermaschte

include::global_attr.adoc[]
= Ports
:revdate: 2025-02-06
:title: Ports - Von {CMK} genutzte Ports
:description: {CMK} nutzt für die Kommunikation einige Ports, die freigegeben sein müssen. Welche das sind, erfahren Sie hier.

{related-start}
ifdef::onprem[]
xref:install_packages#[Grundsätzliches zur Installation von {CMK}]
xref:wato#[Die Konfiguration von {CMK}]
endif::[]
xref:wato_monitoringagents#[Monitoring-Agenten]
{related-end}


[#overview]
== Übersicht

Für die Überwachung von Hosts und Services sowie die Kommunikation verschiedener Komponenten einer {CMK}-Installation untereinander verwendet {CMK} in vielen Fällen Datenübertragung über TCP/IP oder UDP/IP.

Dieser Artikel soll Ihnen einen Überblick geben, welche Ports für welche Funktionalität benötigt werden.
ifdef::onprem[]
Diese Ports müssen daher in der Firewall-Konfiguration freigeschaltet werden, respektive beim Einsatz von {CMK} in einem Container an diesen gebunden werden.
endif::[]
ifdef::saas[]
Diese Ports müssen daher in der Firewall-Konfiguration freigeschaltet werden.
endif::[]

Die Kommunikationsrichtung ist, wenn nicht anders erwähnt, eingehend zur in der Kapitelüberschrift genannten Komponente.

ifdef::onprem[]
*Hinweis:* Die Mehrheit der hier aufgeführten Portnummern sind Standardports.
Diese können jederzeit manuell auf andere Ports umgestellt werden. Diejenigen Ports, die nicht standardmäßig aktiv sind, sondern stattdessen bei Bedarf freigegeben werden müssen, sind zusätzlich mit einem Vermerk gekennzeichnet.
endif::[]


[#monitoring]
ifdef::onprem[]
== Überwachung von Hosts (Agent, SNMP)
endif::[]
ifdef::saas[]
== Überwachung von Hosts
endif::[]


ifdef::onprem[]
[#host_incoming_cmk_outgoing]
=== Überwachter Host

Die folgenden Ports auf überwachten Hosts müssen vom {CMK}-Server aus erreichbar sein.

[cols="10,10,~,~",options="header"]
|===
|Port |Protokoll |Bezeichnung |Ergänzende Informationen
|161 |UDP |xref:glossar#snmp[Simple Network Management Protocol (SNMP)]|Via SNMP überwachte Hosts erhalten über diesen Port die Anforderung `GET-REQUEST`.
|6556 |TCP |xref:glossar#agent[Agent] |Via xref:wato_monitoringagents#agents[{CMK}-Agent] überwachte Hosts werden über diesen Port abgefragt. Die Kommunikation erfolgt TLS verschlüsselt oder im Klartext (wie beim xref:agent_linux_legacy#[Linux-Agenten im Legacy-Modus]).
| —  |ICMP |Ping |{CMK} überwacht die Erreichbarkeit von Hosts per Ping. Ist dies nicht möglich, muss die Ermittlung des Host-Zustands mit der Regel xref:hosts_setup#monitoring_agents[[.guihint]#Host Check Command#] festgelegt werden.
|===

xref:glossar#active_check[Aktive Checks] greifen direkt auf die Ports der überwachten Dienste zu, die daher auch vom {CMK}-Server aus erreichbar sein müssen.
Die Überwachung mit xref:glossar#special_agent[Spezialagenten] kann erfordern, andere/weitere Ports zu öffnen.
So benötigt der Spezialagent für VMware ESXi (auch NetApp und viele weitere) die Öffnung des Ports 443 auf dem ESXi Server.
endif::[]


[#cmk_incoming_host_outgoing]
=== {CMK}-Server

Die folgenden Ports auf dem {CMK}-Server müssen für die Hosts im Monitoring erreichbar sein.

[cols="10,10,~,~",options="header"]
|===
|Port |Protokoll |Bezeichnung |Ergänzende Informationen
ifdef::onprem[]
|80 |TCP |Hypertext Transfer Protocol (HTTP) |xref:glossar#agent_updater[Agent Updater] (xref:glossar#agent_bakery[Agentenbäckerei]), Discovery des Agent Controller Ports
|162 |UDP |Simple Network Management Protocol Trap (SNMPTRAP) EC |Empfang von xref:ec#snmp[SNMP-Traps über die Event Console] _(optional aktivierbar)_
|443 |TCP |Hypertext Transfer Protocol over SSL/TLS (HTTPS) |Agent Updater (Agentenbäckerei), Discovery des Agent Controller Ports, mit Transportverschlüsselung
|514 |TCP und UDP |Syslog (EC) |Empfang von xref:ec#setup[Syslog-Nachrichten über die Event Console] _(optional aktivierbar)_
|6559 |UDP | link:https://checkmk.com/werk/8350[Echtzeitprüfungen^] |Empfang von UDP-Paketen für die Echtzeitprüfungen einzelner Dienste (selten verwendet, _optional aktivierbar_)
endif::[]
ifdef::saas[]
|443 |TCP |Hypertext Transfer Protocol over SSL/TLS (HTTPS) |xref:glossar#agent_updater[Agent Updater] (xref:glossar#agent_bakery[Agentenbäckerei]), Discovery des Agent Controller Ports
endif::[]
|8000 |TCP |Agent Controller TLS-Registrierung, Agenten im xref:glossar#push_mode[Push-Modus] |Wenn mehrere Instanzen auf dem {CMK}-Server laufen, sind eventuell weitere Ports (8001, 8002…) nötig.
|===

Die TLS-Registrierung von Agenten nutzt die REST-API auf Port 
ifdef::onprem[]
80/443
endif::[]
ifdef::saas[]
443
endif::[]
zur Discovery des Ports zur Registrierung (meist 8000 TCP).
Sind beide nicht erreichbar, kann der Port per xref:agent_linux#networkrequirements[Kommandozeilenoption] angegeben werden.
Falls Port 8000 nicht erreichbar ist, kann auf anderen Hosts im Monitoring eine xref:agent_linux#proxyregister[Registrierung im Auftrag] erfolgen.


ifdef::onprem[]
[#distributed_monitoring]
== Verteiltes Monitoring

[#remote_incoming_cmk_outgoing]
=== Remote-Instanz

Die folgenden Ports auf Remote-Instanzen müssen vom als Zentralinstanz arbeitenden {CMK}-Server erreichbar sein.

[cols="10,10,~,~",options="header"]
|===
|Port |Protokoll|Bezeichnung |Ergänzende Informationen
|80 |TCP |HTTPS (Hypertext Transfer Protocol) |Synchronisierung im xref:glossar#distributed_monitoring[verteilten Monitoring]
|443 |TCP |Hypertext Transfer Protocol over SSL/TLS (HTTPS) |Synchronisierung im verteilten Monitoring, mit Transportverschlüsselung
|5671 |TCP |Advanced Message Queuing Protocol (AMQP) |Ein Message Broker wird für die Weiterleitung von xref:piggyback#distributed_piggyback[Piggyback-Daten im verteilten Monitoring] benötigt
|6555 |TCP |Benachrichtigungs-Spooler (_notification spooler_) |Der xref:distributed_monitoring#notifications[Benachrichtigungs-Spooler] dient dem zentralen Versand von Benachrichtigungen, hier beim Verbindungsaufbau durch die Zentralinstanz _(optional aktivierbar)_
|6557 |TCP |xref:glossar#livestatus[Livestatus] |Wenn mehrere Instanzen auf dem {CMK}-Server laufen, sind eventuell weitere Ports nötig _(optional aktivierbar)_
|6558 |TCP | | xref:ec#statusinterface[Statusanschluss der Event Console] _(optional aktivierbar)_
|===

[#cmk_incoming_remote_outgoing]
=== Zentralinstanz

Prinzipiell ist verteiltes Monitoring ohne weitere Hilfsmittel wie Tunneling bereits möglich, wenn die Zentralinstanz eine Verbindung zu den Remote-Instanzen herstellen kann.
Die Erreichbarkeit der Zentralinstanz durch Remote-Instanzen ist nur für optionale Funktionalitäten (z.B. Agentenbäckerei) erforderlich.

Die folgenden Ports auf dem als Zentralinstanz arbeitenden {CMK}-Server müssen durch die zugeordneten Remote-Instanzen erreichbar sein, um die beschriebene Funktionalität bereitzustellen.

[cols="10,10,~,~",options="header"]
|===
|Port |Protokoll |Bezeichnung |Ergänzende Informationen
|80 |TCP |Hypertext Transfer Protocol (HTTP) |Für xref:glossar#agent_bakery[Agentenbäckerei] und xref:dcd#[dynamische Host-Verwaltung]
|443 |TCP |Hypertext Transfer Protocol over SSL/TLS (HTTPS) |Für Agentenbäckerei und dynamische Host-Verwaltung, mit Transportverschlüsselung
|5671 |TCP |Advanced Message Queuing Protocol (AMQP) |Ein Message Broker wird für die Weiterleitung von xref:piggyback#distributed_piggyback[Piggyback-Daten im verteilten Monitoring] benötigt
|6555 |TCP |Benachrichtigungs-Spooler (_notification spooler_) |Der xref:distributed_monitoring#notifications[Benachrichtigungs-Spooler] dient dem zentralen Versand von Benachrichtigungen, hier beim Verbindungsaufbau durch eine Remote-Instanz _(optional aktivierbar)_
|===

[TIP]
====
Wenn der _Message Broker RabbitMQ_ verwendet wird (derzeit nur für die Weiterleitung von xref:piggyback#distributed_piggyback[Piggyback-Daten im verteilten Monitoring] erforderlich), stellen Sie eine gegenseitige sternförmige Erreichbarkeit von Port 5671 sicher:
Jede Remote-Instanz muss die Zentralinstanz erreichen können und die Zentralinstanz muss jede Remote-Instanz erreichen können.
Ist darüber hinaus vermaschte Erreichbarkeit möglich, bei der Remote-Instanzen einander direkt erreichen können, werden Nachrichten auf diesem direkten Weg übertragen.
====
endif::[]


ifdef::onprem[]
[#loopback]
== Lokale Ports auf dem {CMK}-Server

Die folgenden Ports werden vom {CMK}-Server auf dem lokalen Loopback Interface genutzt.
Falls Sie auf Ihrem {CMK}-Server eine sehr strenge Firewall-Konfiguration verwenden, müssen diese Ports auf der IP-Adresse 127.0.0.1 (IPv4), respektive ::1 (IPv6) eingehend und ausgehend freigeschaltet werden.

[cols="10,10,~,~",options="header"]
|===
|Port |Protokoll |Bezeichnung |Ergänzende Informationen
|5000 |TCP | HTTP Site Apache |Jede {CMK}-Instanz verfügt über einen eigenen Apache, auf den der extern aufrufbare Apache als Reverse Proxy zugreift. Weitere Instanzen verwenden Port 5001 usw.
|6558 |TCP | |Statusanschluss der Event Console _(optional aktivierbar)_
// MA: Sicher, dass hier ein TCP-Port genutzt wird und nicht ein Unix-Socket? In welchen Fällen wird der TCP-Port genutzt und welchen Vor-/Nachteil hat das für mich?
|15671 |TCP | RabbitMQ Management |Dieser Port wird intern für die link:https://www.rabbitmq.com/docs/networking#ports[Verwaltung des Message Brokers RabbitMQ^]  (derzeit nur für die Weiterleitung von Piggyback-Daten im verteilten Monitoring erforderlich) verwendet.
|25672 |TCP | RabbitMQ Management |Dieser Port wird intern für die Verwaltung des Message Brokers RabbitMQ (s.o.) verwendet.
|===
endif::[]


ifdef::onprem[]
// MFS: Discuss before 2.4 release with dev, if port to mailslot conversion is done during the agent update.
[#loopbackwindows]
== Lokaler Port auf Windows-Hosts

Der folgende Port wird auf Windows-Hosts im Monitoring zur Kommunikation der beiden Komponenten _Agentenprogramm_ und _Agent Controller_ genutzt.
Falls Sie auf dem überwachten Host eine sehr strenge Firewall-Konfiguration verwenden, muss dieser Port auf der IP-Adresse 127.0.0.1 (IPv4), respektive ::1 (IPv6) eingehend und ausgehend freigeschaltet werden.

[cols="10,10,~,~",options="header"]
|===
|Port |Protokoll |Bezeichnung |Ergänzende Informationen
|28250 |TCP |{CMK}-Agent |Das Agentenprogramm öffnet den Port. Der für die verschlüsselte Kommunikation mit dem {CMK}-Server zuständige Agent Controller `cmk-agent-ctl.exe` greift auf ihn zu.
|===
endif::[]

ifdef::onprem[]
[#appliance_cluster]
== {CMK} Appliance Cluster

Sie können zwei Checkmk-Appliances ("Knoten") zu einem xref:appliance_cluster#[Cluster] zusammenschließen.
Dabei werden alle Konfigurationen und Daten zwischen den beiden Geräten abgeglichen.

Die folgenden Ports müssen von beiden Knoten aus ein- und ausgehend freigegeben sein.

*Achtung!* Da die Kommunikation der beiden Appliances miteinander unverschlüsselt stattfindet, müssen Sie gegebenenfalls Maßnahmen ergreifen, damit unbefugte Dritte keinen Zugriff auf den Netzwerkverkehr haben.
Dies kann beispielsweise die direkte Verbindung beider Geräte in einem Rack sein oder die Nutzung eines verschlüsselten VLAN, wenn keine räumliche Nähe erwünscht ist.

[cols="10,10,~,~",options="header"]
|===
|Port |Protokoll |Bezeichnung |Ergänzende Informationen
// |80 |TCP |Hypertext Transfer Protocol (HTTP) | Administration über Weboberfläche
// |443 |TCP |Hypertext Transfer Protocol over SSL/TLS (HTTPS) | Administration über Weboberfläche, mit Transportverschlüsselung
|3121 |TCP |Pacemaker |Pacemaker Cluster resource manager
|4321 |UDP |Corosync |Corosync Cluster Engine
|4323 |UDP |Corosync |Corosync Cluster Engine
|7789 |TCP |DRBD |Synchronisierung der DRBD (Distributed Replicated Block Device)
|===
endif::[]


ifdef::onprem[]
[#misc_ports]
== Erreichbare Ports (ausgehend)

Eventuell benötigen Sie, vom {CMK}-Server ausgehend, einige weitere Ports:
// MA: Eigentlich braucht man doch nur Zugang zu anderen Servern und deren eingehenden Ports, oder? Also z.B. dem Port 53 UDP des Nameservers. Ausgehend von der Perspektive, die ketzerische Frage: Sprechen wir dann nicht immer von eingehenden Ports?

[cols="10,10,~,~",options="header"]
|===
|Port |Protokoll |Bezeichnung |Ergänzende Informationen
|53 |UDP |DNS |Die systemweit konfigurierten Nameserver müssen erreichbar sein
|123 |UDP |NTP |Zeitsynchronisation
|25/465/587 |TCP |SMTP |Versand von Benachrichtigungen vom {CMK}-Server über E-Mail (Ports je nach Konfiguration des verwendeten Mailservers)
|443 |TCP |HTTPS |Kommunikation mit dem xref:license#[Lizenzserver] (nur kommerzielle Editionen, Server: `license.checkmk.com`, Alternative: xref:license#manualtrans[manuelle Übermittlung])
|389/636 |TCP |LDAP |LDAP Authentifizierung (Port 389 TCP, als LDAPS auf Port 636 TCP)
|===

////
* DNS (Port 53 UDP)
* SMTP zur Versendung von Benachrichtigungen vom {CMK}-Server über E-Mail (je nach Konfiguration des Mailservers Port 25, 465 oder 587 TCP)
* NTP Zeitsynchronisation (Port 123 UDP)
* HTTPS zur Kommunikation mit dem xref:license#[Lizenzserver] (nur kommerzielle Editionen, Server: `license.checkmk.com`, Port 443)
* LDAP Authentifizierung (Port 389 TCP, als LDAPS auf Port 636 TCP)
////
endif::[]

// Abschließende Gedanken, Grafik wird evaluiert…
// MA: Wenn wir von eingehenden und ausgehenden Ports sprechen wollen, müssen wir eher die Sicht der Firewall einnehmen. Dann ist die Relation aber eine anderen und es geht eher darum, wer mit wem über welche Ports spricht. Eine Grafik ist da eigentlich sehr plastisch und erlaubt es sich besser vorzustellen, wer mit wem und warum über welchen Port spricht.
// MFS: Ich sehe hier keinen Bedarf für eine Grafik. Die Formulierungen "eingehend" und "ausgehend" habe ich versucht, so zu verwenden, dass sie direkt in "incoming" und "outgoing" übersetzbar sind. 
