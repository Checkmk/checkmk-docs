// -*- coding: utf-8 -*-
// IGNORE 
include::global_attr.adoc[]
= Der {CMK} Micro Core (CMC)
:revdate: draft
:title: Der {CMK} Micro Core
:description: Alles über den spezifischen {CMK} Micro Core (CMC) und seine Vorteile erfahren Sie in diesem Artikel.

{related-start}
xref:cmc_differences#[Besonderheiten des CMC]
ifdef::onprem[]
xref:cmc_migration#[Migration auf den CMC]
xref:cmc_files#[Dateien und Verzeichnisse des CMC]
endif::[]
{related-end}


[#core]
== Der Monitoring-Kern

An zentraler Stelle im {CMK}-System arbeitet der Monitoring-Kern.
Seine Aufgaben sind

* das regelmäßige Anstoßen von Checks und Sammeln der Ergebnisse,
* das Bereitstellen des aktuellen Zustands für die GUI und
* das Erkennen von Zustandsänderungen und darauf basierend das xref:notifications#[Benachrichtigen.]

ifdef::onprem[]
Folgendes Architekturbild zeigt den Kern im Zusammenhang mit den wichtigsten Komponenten der kommerziellen Editionen:
endif::[]

ifdef::saas[]
Folgendes Architekturbild zeigt den Kern im Zusammenhang mit den wichtigsten Komponenten von {CE}:
endif::[]

[#architecture]
image::cmc_cee_architecture.png[]


ifdef::onprem[]
[#nagios_icinga]
=== Nagios und Icinga

{cre-only}
{CRE} baut auf dem Kern aus dem bekannten Open-Source-Projekt _Nagios_ auf. 
Dieser hat sich weltweit bei Millionen von Benutzern über Jahre hinweg bewährt und bietet zahlreiche nützliche Funktionen. 
Seine Flexibilität ist einer der Gründe für den Erfolg von Nagios.

Alternativ kann auch der Kern von _Icinga_ eingesetzt werden. 
Dieser ist vor allem in Deutschland verbreitet und basiert auf dem gleichen Programm-Code, wird aber seit einigen Jahren unabhängig weiterentwickelt.

Auch wenn Nagios, bzw. Icinga, hervorragende Dienste leistet, flexibel, stabil und gut erprobt ist, so gibt es doch Situationen, in denen man damit an Grenzen stößt. 
Bei einer größeren Zahl von überwachten Hosts und Services treten vor allem drei Probleme auf:

* Die hohe CPU-Last beim Ausführen von Checks.
* Die lange Dauer eines Neustarts nach einer Konfigurationsänderung.
* Die Tatsache, dass das System während dieser Zeit nicht verfügbar ist.
endif::[]


[#cmc]
== Der {CMK} Micro Core (CMC)

ifdef::onprem[]
{cee-only}
Da {CMK} schon länger in immer größeren Umgebungen eingesetzt wird, haben wir im Jahr 2013 mit der Neuentwicklung eines eigenen Kerns speziell für die kommerziellen Editionen begonnen.
Der _{CMK} Micro Core_ -- kurz _CMC_ überwindet die oben genannten Limitierungen von Nagios.
endif::[]
ifdef::saas[]
Da {CMK} schon länger in immer größeren Umgebungen eingesetzt wird, haben wir im Jahr 2013 mit der Neuentwicklung eines eigenen Kerns begonnen.
Der _{CMK} Micro Core_ -- kurz _CMC_ überwindet die Limitierungen des Kerns aus dem Open-Source-Projekt Nagios, der in {RE}, der frei verfügbaren On-Premises-Edition von {CMK}, zum Einsatz kommt.
endif::[]
Der CMC ist dabei nicht als Fork von Nagios entstanden, sondern hat eine komplett eigene Codebasis.
Er verfügt über eine einzigartige und perfekt auf {CMK} zugeschnittene Softwarearchitektur.

Seine wichtigsten Vorteile sind:

* *Hohe Effizienz beim Ausführen von Checks* - 
Das betrifft sowohl xref:glossar#active_check[aktive Checks] als auch {CMK}-basierte Checks. 
In Benchmarks wurden auf einem Desktop-PC (Core i7) mehr als 600.000 Checks pro Minute erreicht.

* *Schnelles Aktivieren von Änderungen* - 
Eine Konfiguration mit 20.000 Hosts und 600.000 Services kann in 0,5 Sekunden geladen werden.

* *Konfigurationsänderungen im laufenden Betrieb* - 
ifdef::onprem[]
Aktuell laufende Checks und xref:livestatus#[Livestatus]-Verbindungen werden nicht unterbrochen. 
endif::[]
ifdef::saas[]
Aktuell laufende Checks und Livestatus-Verbindungen werden nicht unterbrochen. 
endif::[]
Für die Nutzer des Monitorings ist der Vorgang nicht spürbar.

* *Schnelle Verfügbarkeitsabfragen* - Durch einen speziellen Cache können Analysen der xref:availability#[Verfügbarkeit] (_availability_) auch über lange Zeiträume ohne spürbare Wartezeit berechnet werden.

* *Zusätzliche Features* - 
Der CMC verfügt über mehrere nützliche Zusatzfunktionen wie z.B. wiederkehrende xref:glossar#scheduled_downtime[Wartungszeiten] und xref:basics_ackn#[Quittierungen] mit automatischer Ablaufzeit.

Auch an anderen Stellen wurde optimiert. 
So werden z.B. Messwerte jetzt ohne Umwege direkt vom Kern an den RRD-Cache-Daemon übergeben, Benachrichtigungen in einem „KeepAlive“-Modus erzeugt und Host-Checks mit einem eingebauten ICMP-Hilfsprozess ausgeführt. 
Das alles vermeidet kostspielige Prozesserzeugungen und spart CPU-Ressourcen.

Diese Eigenschaften bringen zahlreiche Vorteile -- auch in kleineren Installationen:

* Der geringere Bedarf an Prozessorleistung ermöglicht in vielen Fällen Virtualisierung anstelle echter Hardware.
* Das unterbrechungsfreie Aktivieren von Änderungen ermöglicht häufige Konfigurationsänderungen.
* Dadurch ist auch die Umsetzung von Anforderungen wie z.B. Cloud-Monitoring möglich, bei denen in kurzer Abfolge Server hinzugefügt und entfernt werden.

Die folgenden beiden Grafiken zeigen die CPU-Last auf einem {CMK}-Server vor und nach der Umstellung von Nagios auf CMC. 
Diese wurden uns freundlicherweise von dem Unternehmen DFi Service SA bereitgestellt. 
Sie überwachten zu diesem Zeitpunkt 1.205 Hosts und 13.555 Services auf einem Server mit 10 Prozessorkernen.

image::cmc-migration-cpuload4.png[width=500]
image::cmc-migration-cpuutil4.png[width=500]

In einem anderen Projekt zeigen sich ähnliche Effekte. 
Folgende Graphen zeigen eine Umstellung vom Nagios-Kern auf den CMC in einer Umgebung mit 56.602 Services auf 2.230 überwachten Hosts auf einer virtuellen Maschine mit zwei Prozessorkernen:

[{image-border}]
image::cmc-migration-cpuload.png[width=500]
[{image-border}]
image::cmc-migration-cpuutil.png[width=500]
[{image-border}]
image::cmc-migration-diskio.png[width=500]

Wie groß der Unterschied im Einzelfall ist, hängt natürlich von vielen Rahmenbedingungen ab. 
Im obigen Fall läuft auf dem gleichen Server noch eine kleinere Instanz, die nicht umgestellt wurde. 
Ohne diese wäre der Unterschied in der Last noch deutlicher zu erkennen.

ifdef::onprem[]
Weitere Aspekte des CMC werden in den folgenden Artikeln erläutert:

- xref:cmc_differences#[Besonderheiten des CMC]
- xref:cmc_migration#[Migration auf den CMC]
- xref:cmc_files#[Dateien und Verzeichnisse des CMC]
endif::[]

ifdef::saas[]
Weitere Aspekte des CMC werden im Artikel xref:cmc_differences#[Besonderheiten des CMC] erläutert.
endif::[]


ifdef::onprem[]
[#faq]
== Häufig gestellte Fragen (FAQ)

=== Kann der CMC auch normale Nagios-Plugins ausführen?

Selbstverständlich kann der CMC auch klassische aktive und passive Nagios-Checks ausführen.


=== Wird {CMK} weiterhin Nagios unterstützen?

{CMK} ist mit Nagios kompatibel und wird auch weiterhin den Nagios-Kern unterstützen.
Auch die kommerziellen Editionen enthalten Nagios weiterhin als optionalen Kern -- allerdings nur um die Migration von {RE} auf die kommerziellen Editionen zu unterstützen.


=== Wie kann ich zwischen Nagios und CMC wechseln?

Ein Umschalten zwischen den beiden Kernen ist einfach, sofern Ihre Konfiguration ausschließlich mit dem xref:wato#setup_menu[Setup-Menü] der {CMK} Weboberfläche erstellt wurde. 
Einzelheiten finden Sie im Artikel xref:cmc_migration#[Migration auf den CMC.]
Die kommerziellen Editionen erzeugen neue Instanzen per Default mit CMC als Kern.


=== Ist der CMC frei verfügbar?

Der CMC ist verfügbar als Bestandteil der xref:intro_setup#editions[kommerziellen Editionen,] die über eine Subskription erhältlich sind.
{CE} kann für einen begrenzten Zeitraum unverbindlich getestet und in kleinem Rahmen dauerhaft ohne Lizenzierung betrieben werden.
endif::[]
