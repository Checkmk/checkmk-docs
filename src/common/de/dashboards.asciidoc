// -*- coding: utf-8 -*-geomaps
// IGNORE Alarmierungs Ansichts alerters
include::global_attr.adoc[]
= Dashboards
:revdate: 2025-02-20
:title: Dashboards
:description: {CMK}-Dashboards sind extrem flexibel und passen sich automatisch dem verfügbaren Platz an. Lesen Sie hier, wie Sie Dashboards interpretieren und erstellen.

{related-start}
xref:views#[Ansichten von Hosts und Services]
xref:graphing#[Messwerte und Graphing]
{related-end}


[#intro]
== Einleitung

=== Was genau sind Dashboards?

Dashboards sind in {CMK} die zentralen Ansichten für Ihr Monitoring.
Sie liefern Ihnen sowohl Übersichten als auch detaillierte Einsichten in bestimmte Bereiche.
Sie können etwa den allgemeinen Status ganzer Netzwerksegmente visualisieren, aber auch schlicht auflisten, welche Services just für eine Aus- oder Überlastung bestimmter Systemressourcen sorgen.
{CMK} bringt einige Standard-Dashboards mit sich, so für Probleme, {CMK}-Server-Statistiken und natürlich einen Gesamtüberblick.
Sie dürfen aber völlig individuelle Dashboards von Grund auf selbst gestalten.

Welche Werkzeuge dafür zur Verfügung stehen und wie genau Sie damit eigene Übersichten aufbauen, lesen Sie in diesem Artikel.
Zunächst zeigen wir Ihnen, wie xref:features[Dashboards] funktionieren und wie Sie damit arbeiten.
Anschließend beleuchten wir die Grundlagen für xref:dashboard_layout_config[Layout und Konfiguration], um darauf aufbauend ein komplettes, einfaches xref:example[Beispiel-Dashboard] Schritt für Schritt zu kreieren.
Dann folgt eine kurze Zusammenfassung zum Thema xref:filter[Filter], da diese an mehreren Stellen gesetzt werden können.
Weiter geht es mit der Vorstellung aller bereits eingebauten xref:builtins[Dashboards und Dashlets] -- den einzelnen Bausteinen für Übersichten.
Den Abschluss bilden Tipps zum Umgang mit Fehlern und Problemen.

Das auffälligste Dashboard sehen Sie übrigens direkt auf der Startseite von {CMK}, allerdings können Dashboards wie sonstige Ansichten behandelt und ganz einfach über die xref:user_interface#navigation_bar[Navigationsleiste] und die xref:user_interface#sidebar[Seitenleiste] aufgerufen werden.
Und natürlich eignen sich Dashboards bestens, um sie separat auf einzelne Monitore zu legen, sei es für einen großen Leitstand, als Info-Display für Server-Räume oder als schlichtes Kiosk-Display für den Konferenzsaal.


[#features]
=== Das können Dashboards

Das Besondere an {CMK}-Dashboards ist, dass sie sich über einen intelligenten Algorithmus automatisch an die Dimensionen des Displays beziehungsweise des Browserfensters anpassen.
Dabei können Sie für alle einzelnen Elemente des Dashboards, die Dashlets, festlegen, wie genau sie sich verhalten, und in welche Richtungen sie sich bei Bedarf ausdehnen.

Für den Inhalt stehen Dashlets unterschiedlicher Kategorien zur Verfügung:
Reguläre Ansichten, Graphen, Metriken, vorgefertigte Elemente für diverse Statistiken und Zeitleisten sowie Kästen für statische Texte und beliebige URLs.
Eine Übersicht aller Dashlets finden Sie weiter xref:builtin_dashlets[unten.]
ifdef::onprem[]
Einige der Dashlets gibt es exklusiv in den kommerziellen Editionen. 
endif::[]

Ein wichtiges Feature bei der Dashboard__-Nutzung:__
Über Filter können selbst Dashboards, die Werte für alle Hosts oder Services im Netzwerk anzeigen, auf bestimmte Bereiche heruntergebrochen werden.
Dashboards sind also nicht bloß starre Anzeigen, sondern echte Werkzeuge zum Auffinden und Analysieren von Problemen und Zuständen.


[#usage]
=== Dashboards im Einsatz

==== Main-Dashboard interpretieren

Auf der Startseite von {CMK} sehen Sie das [.guihint]#Main-Dashboard,# das Sie im [.guihint]#Monitor#-Menü und auch im xref:glossar#snapin[Snapin] [.guihint]#Views# jeweils unter [.guihint]#Overview > Main dashboard# finden. 

ifdef::onprem[]
{RE} und kommerzielle Editionen kommen mit unterschiedlichen Standard-Dashboards, hier zunächst ein Blick auf die Variante der kommerziellen Editionen:

image::dashboard_main_numbered.png[alt="Das Standard-Dashboard der kommerziellen Editionen mit Nummern für die detaillierte Beschreibung."]

[cols="7,~,<.>~", options="header"]
|===
|Nr. |Titel |Funktion

|1 |Filter-Knopf |Filter aufrufen
|2 |Layout-Knopf |Layout-Modus ein-/ausschalten
|3 |Host statistics |Aktueller Zustand der Hosts
|4 |Total host problems |Zeitleiste der Host-Probleme
|5 |Service statistics |Aktueller Zustand der Services
|6 |Total service problems |Zeitleiste der Service-Probleme
|7 |Problem notifications |Zeitleiste der Alarmierungen
|8 |Percentage of total service problems |Zeitleiste aktiver Services
|9 |Host overview |Per Mausrad zoombare Visualisierung von Problemen auf Hosts
|10 |Top alerters (last 7 days) |Für Alarmierungen verantwortliche Services
|11 |Filter |Filter zur Beschränkung des Dashboards auf einzelne Hosts/Services
|===

Wenn Sie mit dem Mauszeiger über die Graphen oder die Host-Symbole im Dashlet [.guihint]#Host overview# fahren, bekommen Sie sofort weitere Detailinformationen via Tooltipp. Die Farben entsprechen jeweils der Darstellung der Dashlets zu aktuellen Host- und Service-Statistiken. Über die verlinkten Titelzeilen der Dashlets gelangen Sie zu ausführlicheren Darstellungen.

Bei {CRE} ist das Haupt-Dashboard auf der Startseite hingegen das [.guihint]#Problem Dashboard#, welches auch in den kommerziellen Editionen über icon:icon_dashboard_problems[alt="Symbol des Problem-Dashboards."] aufrufbar ist und ganz klassisch unerledigte Probleme und aktuelle Events in Listenform zeigt:

image::dashboard_main_numbered_raw.png[alt="Das {RE} Standard-Dashboard mit Nummern für die detaillierte Beschreibung."]
endif::[]

ifdef::saas[]
Das Haupt-Dashboard zeigt unerledigte Probleme und aktuelle Events in Listenform:

image::dashboard_main_numbered_saas.png[alt="Das Standard-Dashboard mit Nummern für die detaillierte Beschreibung."]
endif::[]

[cols="7,~,<.>~", options="header"]
|===
|Nr. |Titel |Funktion

|1 |Filter-Knopf |Filter aufrufen
|2 |Layout-Knopf |Layout-Modus ein-/ausschalten
|3 |Host statistics |Aktueller Zustand der Hosts
|4 |Service statistics |Aktueller Zustand der Services
|5 |Host Problems |Liste unbehandelter Host-Probleme
|6 |Service Problems |Liste unbehandelter Service-Probleme
|7 |Events of recent 4 hours |Ereignisse der letzten vier Stunden
|8 |Filter |Filter zur Beschränkung des Dashboards auf einzelne Hosts/Services
|===

[TIP]
====
Hinweis zum icon:icon_dashboard_edit[alt="Symbol des Layout-Modus für Dashboards."] Layout-Knopf:
Bei den xref:builtin_dashboards[eingebauten Dashboards] sehen Sie diesen Knopf standardmäßig zunächst nicht!
Er taucht erst, und dann dauerhaft, auf, wenn Sie einmal den Menüeintrag [.guihint]#Dashboard > Clone builtin dashboard# aufrufen.
Verstehen Sie dies einfach als kleine _Schutzmaßnahme,_ denn es ist ratsam, eingebaute Dashboards zu klonen icon:icon_clone[alt="Symbol für das Klonen."] und dann die Klone anzupassen.
====


[#dashboard_filter]
==== Dashboards filtern

Wie Sie später sehen werden, lassen sich Dashboards von vornherein für eine bestimmte Auswahl von Hosts oder Services erstellen.
Über Filter können Sie aber jedes Dashboard temporär auf eine Auswahl beschränken:

1. Filterfunktion über icon:icon_filter[alt="Symbol eines Filters."] aufrufen.
2. Filter über [.guihint]#Add filter# hinzufügen -- beispielsweise [.guihint]#Host name (regex)#.
3. Filter konfigurieren -- beispielsweise `myhost`.

Der dritte Schritt ist von Filter zu Filter unterschiedlich.
Wichtig ist hier vor allem die Handhabung eingegebener Suchbegriffe, also beispielsweise für Host-Namen:
Wie üblich wertet {CMK} diese als xref:regexes#[reguläre Ausdrücke].
Ein Filter nach `myhost` würde daher sowohl den Host `myhost` finden als auch `2myhost` und `myhost2`.
Wenn Sie nur `myhost` im Dashboard sehen wollen, müssen Sie als Suchbegriff entsprechend `^myhost$` verwenden, um Anfang und Ende der Zeile einzubeziehen und so einen exakten Match zu provozieren.

Natürlich lassen sich auch mehrere Filter miteinander kombinieren, die die Treffermenge dann per _UND-Verknüpfung_ reduzieren.
Innerhalb eines Filters dürfen Sie _ODER-Verknüpfungen_ mit den Mitteln der regulären Ausdrücke verwenden, also beispielsweise `myhost1|db_server`.


[#dashboard_layout_config]
ifdef::onprem[]
== Layout, Konfiguration, Berechtigungen
endif::[]
ifdef::saas[]
== Layout und Konfiguration
endif::[]

Dashboard-Einstellungen gliedern sich in zwei Teile:
Über das Layout bestimmen Sie die Anordnung der Dashlets, deren Dimensionen und dynamische Skalierung.
Die Konfiguration bezieht sich auf die Eigenschaften des Dashboards an sich, vor allem aber auf die einzelnen Dashlets, also welche Inhalte sie wie aufbereitet zeigen.


[#layout]
=== Layout

Das Besondere am Dashboard-Layout ist die Dynamik:
Dashlets können zwar mit fixer Höhe und Breite angelegt werden, sie können aber auch automatisch in beiden Dimensionen wachsen, um den vorhandenen Platz bei jeder Skalierung optimal auszunutzen
-- ähnlich wie beim Responsive-Webdesign, aber detaillierter zu konfigurieren. 

Das Prinzip ist simpel:
Eine beliebige Ecke eines Dashlets wird als Anker festgelegt.
Von diesem Fixpunkt aus kann das Dashlet dann in Höhe und/oder Breite wachsen, sobald mehr Platz zur Verfügung steht, 
also zum Beispiel schlicht auf einem größeren Bildschirm, aber auch, wenn sich die Position oder Größe anderer Dashlets verändert.


==== Dynamisches Layout in Aktion

Zur Verdeutlichung des Prinzips hier ein Beispiel mit einem Host-Matrix-Dashlet mit manueller Höhe und Breite in der Mitte sowie dem Anker oben links.
Den Anker erkennen Sie an der grünen Ecke, die Einstellungen für aktuelle Höhe und Breite finden Sie in der Mitte der Dashlets.

Umrahmt wird es von vier Host-Overview-Dashlets
ifdef::onprem[]
(beziehungsweise xref:dashlet_siteoverview[Site-Overview-Dashlets]), 
endif::[]
ifdef::saas[]
(beziehungsweise Site-Overview-Dashlets), 
endif::[]
allesamt mit automatischer Höhe, die seitlichen auch mit automatischer Breite
-- die Dashlets oben und unten bekommen die Einstellung [.guihint]#max width#.
Standardmäßig sitzt der Anker oben links, hier bekommt jedoch das rechte Dashlet den Anker oben rechts und das untere unten links.

image::dashboard_layout_example_1.png[alt="Ein Host-Matrix-Dashlet in der Dashboard-Mitte."]

Wenn man nun das Host-Matrix-Dashlet zum Beispiel weiter nach links und unten verschiebt, verändern sich die Host-Overview-Dashlets links, rechts und unten
-- denn sie wachsen automatisch von ihren Ankern hin zum zentralen Host-Matrix-Dashlet.

Das obere Dashlet hingegen bleibt wie es ist -- nach unten kann es schließlich nicht wachsen, da die beiden seitlichen Dashlets oben verankert sind.

image::dashboard_layout_example_2.png[alt="Das Host-Matrix-Dashlet, verschoben nach unten links."]

Schaltet man nun das untere Dashlet von [.guihint]#max width# auf [.guihint]#auto width# geht es nicht mehr über die gesamte Breite
-- weil die automatische Höhe des rechten Dashlets vor der automatischen Breite des unteren Dashlets gerendert wird.

image::dashboard_layout_example_3.png[alt="Das unterste Dashlet mit verkürzter Breite."]

Wenn Dashlets mit automatischen Dimensionen um denselben Raum streiten, können Sie mit der Maximaleinstellung quasi den Gewinner festlegen
-- aber Vorsicht: Konkurrieren zwei auf Maximum gesetzte Dashlets um denselben Raum, kann es zu Überlappungen kommen.

Einfacher zu verstehen ist das ganze dynamische Layout-Prinzip, wenn Sie sich solch einen Testaufbau selbst anlegen und die Dashlets ein wenig herumschubsen.


[#config_dashboard]
=== Konfiguration: Dashboard

Die Dashboard-Konfiguration sehen Sie automatisch beim Anlegen eines neuen Dashboards,
später erreichen Sie sie über die Symbole in der Dashboard-Liste ([.guihint]#Customize > Visualization > Dashboards#) oder den Menüeintrag [.guihint]#Dashboard > Properties# eines geöffneten Dashboards.

image::dashboard_config_dashboard.png[alt="Das Menü 'Dashboard' mit ausgewähltem Eintrag 'Properties'.",width=60%]

Die Eigenschaften des Dashboards an sich sind trivial,
hier werden lediglich Metadaten wie Name, Menüeintrag oder Sichtbarkeit gesetzt, zudem bei Bedarf Kontextfilter.
Kontextfilter beschränken Dashboards und Dashlets schlicht auf bestimmte Hosts und/oder Services.

image::dashboard_config_example_dashboard.png[alt="Allgemeine Eigenschaften des Dashboards."]


[#config_layout]
=== Konfiguration: Dashlets

Die Konfiguration einzelner Dashlets sehen Sie automatisch beim Hinzufügen zu einem Dashboard;
später rufen Sie sie direkt über das Zahnrad-Symbol der Dashlets im Layout-Modus auf.

image::dashboard_config_dashlet.png[alt="Das Symbol zum Aufruf der Eigenschaften eines Dashlets.",width=60%]

Die Konfiguration der meisten Dashlets ist recht simpel, wie etwa das Dashlet mit der Host-Matrix aus den obigen Screenshots zeigt:
Dabei handelt es sich nämlich eigentlich um ein Dashlet vom Typ [.guihint]#Sidebar element# und die ganze Konfiguration beschränkt sich auf die Auswahl eben dieses Seitenleistenelements.
Bei allen Dashlets, die sich auf einige oder einzelne Hosts und Services beziehen, finden Sie zudem entsprechende Filtermöglichkeiten.
Und letztlich bieten einige Dashlets noch Optionen zur genauen Gestaltung der Visualisierung, beispielsweise über Grenzwerte.
Als Beispiel hier der [.guihint]#Properties#-Kasten des Dashlets [.guihint]#Gauge#:

image::dashboard_config_example_dashlet.png[alt="Eigenschaften des Dashlets 'Gauge'."]


ifdef::onprem[]
[#permissions]
=== Berechtigungen

Auch abseits der Dashboard- und Dashlet-Konfiguration gibt es in {CMK} wichtige Einstellungen, nämlich die Berechtigungen.
Unter [.guihint]#Setup > Users > Roles & permissions > Edit role user# können Sie einfach nach `dashboard` filtern, um alle Optionen aufzulisten.
Hier lässt sich für eine xref:wato_user#roles[Rolle] detailliert festlegen, welche Standard-Dashboards deren zugewiesene Nutzer sehen und was genau sie mit sonstigen Dashboards anfangen dürfen.

image::dashboard_config_permissions.png[alt="Benutzerrolle mit den Berechtigungen für Dashboards."]
endif::[]


[#example]
== Beispiel-Dashboard

Das Beispiel-Projekt führt Sie einmal durch die notwendigen Schritte, um ein Dashboard von Grund auf aufzusetzen.
Dabei werden Sie grundsätzlich alle Möglichkeiten exemplarisch zu Gesicht bekommen.
ifdef::onprem[]
Um das Beispiel komplett nachzubauen, benötigen Sie eine der kommerziellen Editionen.
endif::[]
Dazu dienen vier Dashlets:

Das Dashlet [.guihint]#Performance graph# zeigt die Nutzung eines Dateisystems eines Hosts,
[.guihint]#Gauge# die durchschnittliche CPU-Auslastung der letzten Minute,
die [.guihint]#Alert timeline# visualisiert Alarmierungen für eine Auswahl von Hosts und Services über einer Zeitleiste
und die Ansicht [.guihint]#Scheduled downtimes# listet xref:glossar#scheduled_downtime[Wartungszeiten.]

Und so wird das fertige Dashboard aussehen:

image::dashboard_example_view.png[alt="Das im Folgenden erstellte Beispiel-Dashboard."]


[#example_build]
=== Beispiel-Dashboard aufsetzen

==== 1. Dashboard anlegen

Legen Sie zunächst ein Dashboard über [.guihint]#Customize > Visualization > Dashboards > Add dashboard# an.
Sie gelangen umgehend zu einer ersten grundsätzlichen Einstellung:

image::dashboard_example_1.png[alt="Auswahl der Objekttypen für das Dashboard."]

Über [.guihint]#Select specific object type# können Sie das Dashboard von vornherein auf bestimmte Hosts, Services und sogar einzelne Objekte wie Docker-Images oder Lüfter beschränken.
Für das Beispiel belassen Sie es bei der Vorgabe [.guihint]#No restrictions to specific objects#.
Filtern können Sie zudem auch später noch.

Anschließend landen Sie mit [.guihint]#Continue# in den Eigenschaften des zu erstellenden Dashboards.

image::dashboard_example_2.png[alt="Allgemeine Eigenschaften des Dashboards mit der notwendigen Eingabe zu ID und Titel."]

Verlangt werden hier lediglich Name und Titel für das Dashboard im Kasten [.guihint]#General properties#, hier `my_dashboard` und `My Dashboard`.
Interessant sind hier zudem die Optionen zur Sichtbarkeit, insbesondere der Punkt [.guihint]#Topic in 'Monitor' menu#.
Darüber bestimmen Sie, unter welchen Thema das Dashboard später im Monitor-Menü der Navigationsleiste sowie in den Seitenleistenelementen [.guihint]#Views# und [.guihint]#Dashboards# aufgelistet wird.

Wichtig sind aber auch die Kontextfilter, die hier gleich zwei mal auftauchen:
Im Kasten [.guihint]#Context / Search Filters# können Sie einen Standardfilter für das Dashboard setzen, so dass bei dessen Aufruf umgehend bestimmte Hosts und/oder Services auftauchen.

Im Kasten [.guihint]#Dashboard Properties# lassen sich über [.guihint]#Required context filters# hingegen benötigte, aber *leere* Filter setzen:
Wenn Sie hier beispielsweise den Filter [.guihint]#Host: Host name (regex)# setzen, startet das Dashboard mit eben diesem Filter
-- und der Nutzer muss dann entsprechend selbst angeben, auf welchen Host-Namen gefiltert werden soll.
Auf diese Weise können Sie Nutzer mit dynamischen Dashboards versorgen und direkt darauf stoßen, dass sie noch für den benötigten Kontext sorgen müssen.

Für das Beispiel-Dashboard lassen Sie die Filter einfach komplett leer -- die Filterung erfolgt über die einzelnen Dashlets.
Bestätigen Sie mit [.guihint]#Save & go to dashboard#.
Daraufhin wird das leere Dashboard angezeigt und Sie können fortan über den icon:icon_dashboard_edit[alt="Symbol des Layout-Modus für Dashboards."] Layout-Knopf zwischen Ansichts- und Layout-Modus hin und her schalten.
Sie erreichen das neue Dashboard jederzeit über den Eintrag im Monitor-Menü.

Übrigens: Sie müssen Dashboards nie manuell speichern, jede Änderung bleibt automatisch erhalten -- auch wenn Sie ein Dashboard verlassen.


==== 2. Dashlet [.guihint]#Performance graph# hinzufügen

Fügen Sie nun auf dem leeren Dashboard das Dashlet über [.guihint]#Add > Performance graph# hinzu.
Unter [.guihint]#General Settings# sollten Sie einen sprechenden Titel vergeben, ansonsten werden Dashboards mit vielen Dashlets schnell unübersichtlich
-- vor allem, wenn sie nicht von vornherein auf bestimmte Elemente gefiltert werden.
Da hier das Root-Dateisystem vom Host `myhost` visualisiert werden soll, bietet sich `My Host - Filesystem/` an.
Komfortabler geht das wie in vielen Eingabefeldern in {CMK} über Makros: `$HOST_NAME$: $SERVICE_DESCRIPTION$`
Welche Makros Sie jeweils nutzen können, entnehmen Sie den Hilfetexten, die Sie sich mit [.guihint]#Help > Show inline help# einblenden können.

image::dashboard_example_3.png[alt="Allgemeine Einstellungen des Dashlets 'Performance graph'."]

Im Kasten für die Kontextfilter geben Sie den Host-Namen und das gewünschte Dateisystem an.
In beiden Eingabefeldern können Sie einfach den ersten Buchstaben eingeben und dann mit der Pfeil-runter-Taste durch die möglichen Einträge scrollen.

image::dashboard_example_4.png[alt="Kontextfilter des Dashlets 'Performance graph'."]

Im dritten Kasten [.guihint]#Properties# werden die beiden Filter automatisch für die Einstellung [.guihint]#Graph# übernommen.
Sie müssen lediglich noch den gewünschten Graphen wählen, hier also [.guihint]#Time usage by phase.#
Die weiteren Darstellungsoptionen können Sie unverändert lassen.

image::dashboard_example_5.png[alt="Eigenschaften des Dashlets 'Performance graph'."]

Wenn Sie das Dashlet nun speichern, landen Sie im Layout-Modus.
Da das Dashlet über die gesamte Breite laufen soll, klicken Sie auf [.guihint]#manual width#, um die manuelle Breite auf [.guihint]#auto width# umzuschalten.
Der Anker kann auf seiner Standardposition oben links verbleiben.

image::dashboard_example_6.png[alt="Das Dashlet 'Performance graph' im Layout-Modus des Dashboards."]


==== 3. Dashlet [.guihint]#Gauge# hinzufügen

Das [.guihint]#Gauge#-Dashlet
ifdef::onprem[]
steht nur in den kommerziellen Editionen zur Verfügung und
endif::[]
visualisiert Werte wie die CPU-Auslastung in Anlehnung an einen Tachometer.

Die Konfiguration unterscheidet sich kaum von der des eben erzeugten Graphen, wieder filtern Sie auf `myhost` und jetzt auf den Service `CPU load`.
Und wieder werden beide Werte automatisch in den [.guihint]#Properties#-Kasten übernommen, nun unter [.guihint]#Metric# (statt wie zuvor unter [.guihint]#Graph#).
Als Metrik wählen Sie [.guihint]#CPU load average of last minute#.

Allerdings müssen Sie dieses mal noch eine weitere Einstellung setzen, nämlich das Maximum der Skala unter [.guihint]#Data range#.
Hier wählen Sie [.guihint]#Floating point number# und setzen das Maximum auf `10`.
Ohne diese Angabe landen Sie in einer Fehlermeldung.

image::dashboard_example_7.png[alt="Eigenschaften des Dashlets 'Gauge'."]

Nach dem Speichern landen Sie wieder im Layout-Modus und können das Dashlet unterhalb des Performance-Graphen platzieren (der zunächst vom neuen Dashlet überlagert wird!).
Hier bieten sich manuelle Breite und Höhe an.
Die gewünschte Größe bestimmen Sie durch Ziehen mit der Maus an den Dashlet-Rändern.
An dieser Stelle könnten Sie nun auch das Graphen-Dashlet auf automatische Höhe setzen und die Höhe dann schlicht durch die Platzierung des neuen Gauge-Dashlets bestimmen lassen.

image::dashboard_example_8.png[alt="Das Dashlet 'Gauge' im Layout-Modus des Dashboards."]


==== 4. Dashlet [.guihint]#Alert Timeline# hinzufügen

Als drittes Dashlet folgt nun die [.guihint]#Alert timeline#
ifdef::onprem[]
-- ebenfalls exklusiv in den kommerziellen Editionen zu finden --
endif::[]
zur Darstellung der Alarmierungen auf einer Zeitachse.

In diesem Dashlet sollen nun Daten mehrerer Hosts und Services landen -- daher auch oben der Verzicht auf eine Dashboard-weite Vorabfilterung.
Um alle Alarmierungen aller Hosts zu bekommen, die mit `my` anfangen, setzen Sie den Filter für den Host-Namen auf `^my*`.
Bei diesem Dashlet bietet sich häufig der komplette Verzicht auf Filter an, um alle Hosts auszuwerten.

image::dashboard_example_9a.png[alt="Kontextfilter des Dashlets 'Alert timeline'."]

Für das Beispiel-Dashlet wird die Darstellung [.guihint]#Bar chart# beibehalten, der Zeitraum auf [.guihint]#The last 35 days# gesetzt, die Einheit auf ganze Tage.

image::dashboard_example_9b.png[alt="Eigenschaften des Dashlets 'Alert timeline'."]

Nach dem Speichern platzieren Sie das Dashlet wieder auf dem Dashboard.
Auch hier bietet sich eine automatische Breite mit manueller Höhe an, um die Zeile mit dem Dashlet [.guihint]#Gauge# zu füllen.

image::dashboard_example_9c.png[alt="Das Dashlet 'Alert timeline' im Layout-Modus des Dashboards."]


==== 5. Dashlet per Ansicht hinzufügen

Auch bereits existierende xref:glossar#view[Tabellenansichten] können als Dashlet genutzt werden.
Das funktioniert etwa über [.guihint]#Add > Link to existing view#, aber auch über die Ansichten selbst, wie Sie es hier sehen.

Um die Ansicht der xref:glossar#scheduled_downtime[Wartungszeiten] einzufügen, rufen Sie diese zum Beispiel über [.guihint]#Monitor > Overview > Scheduled downtimes# auf.
Anschließend fügen Sie die Ansicht Ihrem Dashboard über [.guihint]#Export > Add to dashboard# hinzu.

image::dashboard_example_10.png[alt="Das Menü 'Export' der Tabellenansicht 'Scheduled downtimes'.",width=55%]

Wählen Sie Ihr Dashboard aus.

image::dashboard_example_10a.png[alt="Auswahl des Dashboards für die Ansicht."]

Platzieren Sie das Dashlet als letzte Zeile.
Hier bieten sich nun automatische Höhe und Breite an, um leere Bereiche zu vermeiden.

Wenn Sie nun die icon:icon_dashlet_edit[alt="Symbol für die Eigenschaften."] Eigenschaften des Dashlets aus dem Layout-Modus heraus aufrufen, stehen Ihnen die aus xref:views#[Ansichten] bekannten Einstellungen zur Verfügung, um das Dashlet beispielsweise ein wenig schlanker zu gestalten
-- ein Klick auf den Dashlet-Titel führt Sie schließlich sowieso zur vollständigen Ansicht der Wartungszeiten.

Damit wäre Ihr Beispiel-Dashboard fertig, hier nochmal komplett im Layout-Modus:

image::dashboard_example_11.png[alt="Das komplette Beispiel-Dashboard im Layout-Modus."]


[#filter]
== Filter
Die Filterung von Dashboards und Dashlets ist ein mächtiges Feature, wurde bislang an recht vielen Stellen erwähnt und soll daher hier nochmal kurz zusammengefasst werden.
Sie haben drei Möglichkeiten dies zu tun:

* Dashboard-Eigenschaften
** [.guihint]#Context / Search filters#
** [.guihint]#Required context filters#
* Dashlet-Eigenschaften: [.guihint]#Context / Search filters#
* Dashboard-Ansicht: [.guihint]#Context / Filter#

Der Eintrag [.guihint]#Context / Search filters# ist im Grunde an allen drei Orten identisch, aber:
Wenn Sie ein Dashboard in den Eigenschaften auf einen Host filtern, können Sie in der Dashboard-Ansicht keine anderen Hosts anschauen, lediglich die vorhandenen Hosts noch weiter filtern.
In den Dashlet-Eigenschaften können Sie aber sehr wohl den Filter der Dashboard-Eigenschaften übergehen und andere Hosts einbeziehen!

Die [.guihint]#Required context filters# sind ebenfalls in den Dashboard-Eigenschaften zu finden, filtern aber zunächst nichts.
Sie werden lediglich als benötigte Filter gesetzt:
Ein Dashboard mit solchen Vorgaben erscheint in der Dashboard-Ansicht ohne Informationen zu Hosts und Services, aber mit der geöffneten Filterfunktion und dem Hinweis auf diesen [.guihint]#Mandatory context#, den der Nutzer gewissermaßen zur Laufzeit setzen muss.

image::dashboard_example_mandatory.png[alt="Filterleiste mit verpflichtendem Kontext beim Öffnen des Dashboards.",width=60%]


[#builtins]
== Eingebaute Dashboards und Dashlets

[#builtin_dashboards]
=== Eingebaute Dashboards

Eine Liste aller individuell angelegten sowie eingebauten Dashboards finden Sie über [.guihint]#Customize > Visualization > Dashboards.#
Für die eigenen Varianten können Sie über icon:icon_edit[alt="Symbol für das Bearbeiten."] die Eigenschaften aufrufen und über icon:icon_dashboard_edit[alt="Symbol des Layout-Modus für Dashboards."] den Layout-Modus.
Die werksseitig vorgegebenen Dashboards können Sie nicht direkt aus der Liste heraus bearbeiten, jedoch über icon:icon_clone[alt="Symbol für das Klonen."] klonen und dann anpassen.

ifdef::onprem[]
[TIP]
====
Nicht alle Dashboards sind in allen Editionen von {CMK} integriert.
Die Cloud-Anbieter-spezifischen Dashboards finden Sie nur in {CE} und {ME}, {RE} beschränkt sich auf einige Basis-Dashboards.
====
endif::[]

Hier ein Auszug der eingebauten Dashboards:

[cols="15,30,~",options="header"]
|===
|Name/ID |Monitor-Menüeintrag |Inhalt
|`aws_ec2_overview` |Cloud > AWS EC2 instances |Übersicht der EC2-Instanzen
|`azure_vm_overview` |Cloud > Azure VM instances |Übersicht für Azure-VMs
|`checkmk` |System > Checkmk dashboard |{CMK}-Server und -Instanzen
|`gcp_gce_overview` |Cloud > GCP GCE instances |Übersicht für GCP-VMs
|`kubernetes_overview` |Applications > Kubernetes |Übersicht der Cluster, Ressourcen, Nodes etc.
|`main` |Overview > Main dashboard  |Gesamtübersicht
// onprem, auch wenn ntop_alerts in saas verfügbar ist.
ifdef::onprem[]
|`ntop_alerts` |Network statistics > Alerts |Alerts in xref:ntop#[ntopng]
endif::[]
|`problems` |Problems > Problems dashboard |Probleme und Statistiken aller Hosts und Services. Das [.guihint]#Problems dashboard# ist in {RE} das [.guihint]#Main dashboard#.
|`simple_problems` |Problems > Host & service problems |Probleme aller Hosts und Services
|`site` |-  |Übersicht einer Instanz
|===


[#builtin_dashlets]
=== Dashlets

Hier sehen Sie zunächst alle Dashlets in der Übersicht, anschließend zeigen wir Ihnen noch ein paar Besonderheiten, die im obigen Beispiel-Dashboard nicht mit abgehandelt wurden.

// {RE} als Tabellenspalte auch für saas dringelassen: Tut nicht weh und erspart eine sonst identische saas-Tabelle mit 3 Spalten.
[cols="15,30,12,~",options="header"]
|===
|Kategorie |Name |{RE} |Funktion

|Views |View |ja |Reguläre Ansichten als Dashlets

.4+|Graphs |Single metric graph |nein |Graph für einzelne Metriken über Zeitachse
|Performance graph |ja |Vorgegebene Performance-Graphen für einzelne Hosts/Services
|Custom graph |nein |Manuell erstellte Freiformgraphen
|Combined graph |nein |Graphen mit mehreren Metriken

.5+|Metrics |Average scatterplot |nein |Metriken diverser Hosts/Services als Streudiagramm
|Barplot |nein |Balkendiagramm für einzelne Services
|Gauge |nein |Einzelne Metrik als _Tachometer_
|Single metric |nein |Einzelne Metrik als Zahl
|Top list |nein |Rangliste einer einzelnen Metrik von mehreren Hosts/Services

.4+|State |Host state |nein |Zustand eines einzelnen Hosts
|Service state |nein |Zustand eines einzelnen Services
|Host state summary |nein |Zusammenfassung einzelner Zustände
|Service state summary |nein |Zusammenfassung einzelner Zustände

|HW/SW Inventory |HW/SW Inventory of host |nein |Daten aus dem Inventar

.10+|{CMK} |Site overview |nein |Hosts als Zustand-Hexagons
|Alert overview |nein |Hosts als Alarmierungs-Hexagons
|Host statistics |ja |Gesamtstatistik Host-Zustand
|Service statistics |ja |Gesamtstatistik Service-Zustand
|Event statistics |ja |Gesamtstatistik Event-Zustand
|Notification timeline |nein |Benachrichtigungen über Zeitleiste
|Alert timeline |nein |Alarmierungen über Zeitleiste
|Percentage of service problems |nein |Prozentsatz Service-Probleme über Zeitleiste
|User messages |ja |Nutzerbenachrichtigungen
|Sidebar element |ja |Beliebige Sidebar-Widgets

// Die ntop Dashlets werden in 2.4.0 nicht mehr standardmäßig angezeigt. Evtl. erst wenn die Verbindung zu ntopng eingerichtet ist. Nicht ausgetestet. Daher nur für saas rausgenommen.
ifdef::onprem[]
.3+|Ntop |Alerts |nein |Alerts in xref:ntop#[ntopng]
|Flows |nein |Datenflüsse in ntopng
|Top talkers |nein |Hosts in ntopng, die den meisten Netzwerkverkehr verursachen
endif::[]

.2+|Other |Custom URL |ja |Interne/externe URLs
|Static text |ja |Statischer Text für Hinweise
|===

Die vielleicht wichtigste Frage der meisten Dashlets:
Sind die dargestellten Informationen auf einzelne Hosts oder Services beschränkt?
Die Antwort finden Sie in allen Dashlet-Einstellungen im Kasten [.guihint]#General settings# neben [.guihint]#Show information of single#.
Steht an der Stelle [.guihint]#host, service#, müssen Sie einen Kontextfilter setzen.
Wenn Sie stattdessen die Angabe [.guihint]#Not restricted to showing a specific object# sehen, müssen Sie keinen Filter setzen -- können es teilweise aber.
Bei Dashlets wie [.guihint]#Custom URL# oder [.guihint]#Sidebar element# gibt es freilich keine Filtermöglichkeiten.

Wie genau Sie die Graphen in den Graphing-Dashlets gestalten, ist etwas komplexer und wird im xref:graphing#[Graphing-Artikel] ausführlich erläutert.

Eine besondere Rolle spielt das Dashlet [.guihint]#Custom URL#.
Theoretisch können Sie über die simple Angabe einer Adresse externe Webseiten oder Ressourcen einbinden
-- in der Praxis scheitert das oft an Sicherheitsmaßnahmen der Betreiber und Browser.
Freilich funktioniert das sehr wohl mit {CMK}-eigenen Ressourcen, beispielsweise anderen Dashboards.
So ließen sich etwa mehrere Host-spezifische Dashboards zu einer großen Übersicht verknüpfen.
Was Sie -- mit ein wenig Experimentierfreude -- ebenso einbinden können sind interne Ressourcen des {CMK}-Servers;
beispielsweise jegliche Art von Webanwendungen, sei es ein Wiki oder ein kleines Chat-Programm.

ifdef::onprem[]
[#dashlet_siteoverview]
Das Dashlet [.guihint]#Site overview# hat zwei Funktionen:
In den Erläuterungen zum xref:layout[Layout] oben sehen Sie es als Übersicht der Hosts -- Standard auf einer normalen, einzelnen {CMK}-Instanz.
Im xref:distributed_monitoring#[verteilten Monitoring] zeigt dieses Dashlet hingegen eine Übersicht der namensgebenden Instanzen/Sites.
endif::[]

Ein wenig mehr als Sie vielleicht vermuten würden kann auch das Dashlet [.guihint]#Static text#:
Es eignet sich für Hinweise und simple Beschriftungen, kann aber auch zum Verlinken sonstiger Dashboards oder anderer {CMK}-Bereiche verwendet werden,
wie Sie auch im folgenden Beispiel für ein Top-Down-Dashboard sehen.


== Dashboard-Beispiele

[#dashboard_examples_1]
=== Top-Down-Dashboard

Sie kennen nun also alle verfügbaren Dashlets und fertigen Dashboards, wissen, wo deren Konfigurationen und Layout-Optionen zu erreichen sind und wie man ein komplettes Dashboard zusammenbaut. 
Dashboards müssen aber nicht unbedingt ganz allein für sich stehen, sondern können auch aufeinander aufbauen
-- beispielsweise, um von einer großen Übersicht bis ins kleinste Detail zu navigieren.

Im Grunde funktionieren viele Dashlets bereits genau so:
Die [.guihint]#Host statistics# visualisieren die Host-Zustände und ein Klick auf einen der Zustände leitet zu einer Ansicht weiter, die die zugehörigen Hosts auflistet
-- und von dort geht es wiederum weiter zu den einzelnen Services eines einzelnen Hosts.

Bei eigenen Dashboards können Sie auch Links auf andere Dashboards setzen, indem sie die Titelzeile von Dashlets via [.guihint]#Link of Title# in den Dashlet-Eigenschaften verlinken.
Mal als konkretes Beispiel:
Hier sehen Sie ein Dashboard, das Informationen zu CPU, RAM und Dateisystem aller Hosts zeigt, die mit `my` beginnen.

image::dashboard_topdown1.png[alt="Beispiel-Dashboard aller Hosts, die mit 'my' beginnen."]

Der Titel des CPU-Graphen verlinkt hier ein weiteres Dashboard, welches die CPU-Informationen für jeden Host einzeln visualisiert.
In diesem Dashboard gibt es wiederum ganz oben einen Link zurück zur Übersicht, einfach realisiert über ein Dashlet [.guihint]#Static text#.

image::dashboard_topdown2.png[alt="Link zur Rückkehr in das aufrufende Dashboard."]

Mit solchen Querverlinkungen können Sie komplexe Recherchewerkzeuge über Dashboards realisieren.
Dabei sind Sie übrigens nicht auf die Titelzeile beschränkt, als statischen Text können Sie durchaus HTML-Code verwenden und so ganze Navigationen einbauen.
ifdef::onprem[]
Denken Sie etwa an verteiltes Monitoring und Pfade wie _Gesamtübersicht > Instanzübersicht > Host-Übersicht > Container-Übersicht > Services > Probleme._
endif::[]


[#troubleshooting]
== Fehlerbehebung

=== Fehlende Filter

Es kann vorkommen, dass Sie bei einem Dashlet lediglich die folgende, gelb unterlegte Warnung sehen:

[.guihint]#Unable to render this element, because we miss some required context information (host, service). Please update the form on the right to make this element render.#

In diesem Fall soll das Dashlet Informationen für nur einen Host und/oder Service anzeigen -- für den oder die aber kein Filter gesetzt wurde.
Um das zu beheben, können Sie wahlweise die Filter in der Dashboard-Ansicht nutzen oder in der Dashlet-Konfiguration.



=== Leere Dashlets

Für gänzlich leere Dashlets bei ausbleibenden Fehlermeldungen kann es mehrere Gründe geben.
In der Regel handelt es sich um eine Fehlkonfiguration des Dashlets.

Beispiel: Sie erstellen ein Dashlet für die CPU-Auslastung mit der Metrik und dem gefilterten Service [.guihint]#CPU load#.
Später ändern Sie den Filter der Service-Beschreibung auf etwa [.guihint]#Check_MK Discovery#, belassen die gewählte Metrik aber auf [.guihint]#CPU load#.
Beim Anlegen eines Dashlets kann Ihnen das nicht passieren, da nach dem Filter auf die CPU-Auslastung gar keine Auswahl einer unpassenden Metrik möglich ist
-- beim Umkonfigurieren von Dashlets wird die ursprünglich gewählte Metrik jedoch beibehalten.

Die Lösung ist trivial:
Passen Sie Service-Filter und gewählte Metrik in der Dashlet-Konfiguration an.
Das gilt natürlich auch für alle anderen Dashlet-Varianten.


ifdef::onprem[]
[#host_problems]
=== Leere Dashlets: Total host/service problems

Die Dashlets [.guihint]#Total host problems# und [.guihint]#Total service problems# sind ein Sonderfall für leere Dashlets.
Hier könnte Ihnen folgende Fehlermeldung unterkommen:
[.guihint]#As soon as you add your Checkmk server to the monitoring, a graph showing the history of your host problems will appear here...#

image::dashboard_total_dashlets.png[alt="Fehlermeldung im Dashlet 'Total host problems'."]

Ursache des Problems ist, dass {CMK} nicht alle {CMK}-Server als Hosts im Monitoring sieht.
Dies kann der lokale {CMK}-Server sein, aber auch {CMK}-Server von verbundenen Instanzen, wenn Sie xref:distributed_monitoring#[verteiltes Monitoring] einsetzen.
Es ist grundsätzlich eine gute Idee, alle {CMK}-Server als Hosts in Ihr Monitoring aufzunehmen.

Im verteilten Monitoring kann noch eine andere Ursache für die Fehlermeldung verantwortlich sein:
In der Verbindung zu einer Remote-Instanz wird für diese eine [.guihint]#Site ID# vergeben.
Wenn diese ID nicht *exakt* mit dem Namen der Instanz übereinstimmt, die IP-Adresse aber korrekt ist, wird die Verbindung selbst zwar als okay angezeigt, aber es wird im Dashlet diese Fehlermeldung provoziert.
Für die Dashlets werden die Namen der verbundenen Instanzen aus den Verbindungen des verteilten Monitorings gelesen *und* aus den Service-Ausgaben
-- und nur wenn jeweils exakt dieselben Instanzen gefunden werden, funktionieren die Dashlets korrekt.
So ist sichergestellt, dass auch tatsächlich die korrekten Daten ausgegeben werden.

Die Lösung ist einfach:
Erstellen Sie eine neue Verbindung mit korrekter ID.
endif::[]
