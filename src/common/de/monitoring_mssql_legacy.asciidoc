// -*- coding: utf-8 -*-
// IGNORE Datafiles Securables datafile mssql vbs vgl
include::global_attr.adoc[]
= MSSQL mit dem Legacy-Plugin überwachen
:revdate: 2024-05-17
:title: MSSQL mit dem Legacy-Plugin überwachen
:description: Mit dem Legacy-Plugin `mssql.vbs` für Windows überwachen Sie Microsoft SQL Server.
:keywords: mssql, sql, db, database

{related-start}
link:agent_windows.html[Windows überwachen]
link:wato_monitoringagents.html[Monitoring-Agenten]
link:https://checkmk.com/de/integrations[Katalog der Check-Plugins^]
{related-end}


[#preface]
== Vorwort

Das alte Plugin (`mssql.vbs`) für das Monitoring von Microsoft SQL Server wurde ersetzt.
Wenn Ihre Ihre SQL Server-Netzwerkkonfiguration den Zugriff per TCP/IP erlaubt, empfehlen wir das neue Plugin zu verwenden.

Wie Sie das neue Plugin einrichten und verwenden, erklären wir im Artikel xref:monitoring_mssql#[Microsoft SQL Server überwachen]

`mssql.vbs` wird mit den Version {v24} von {CMK} entfernt (vgl. link:https://checkmk.com/werk/15844[Werk #15844]).

[#intro]
== Einleitung

// SK: Legacy-Hinweis einfügen + Verweis auf neues Plugin `mk-sql` + Link auf neuen Artikel

{CMK} erlaubt Ihnen die umfangreiche Überwachung von Microsoft SQL Server.
Eine vollständige Liste der Überwachungsmöglichkeiten können Sie in unserem link:https://checkmk.com/de/integrations?tags=mssql[Katalog der Check-Plugins^] nachlesen.
Unter anderem kann {CMK} die folgenden Werte überwachen:

* link:https://checkmk.com/de/integrations/mssql_availability_groups[MS SQL: Availability Groups^]
* link:https://checkmk.com/de/integrations/mssql_instance[MS SQL: General State^]
* link:https://checkmk.com/de/integrations/mssql_datafiles[MS SQL: Size of Datafiles^]
* link:https://checkmk.com/de/integrations/mssql_connections[MS SQL Database: Connections^]
* link:https://checkmk.com/de/integrations/mssql_jobs[MS SQL Database: Jobs^]
* link:https://checkmk.com/de/integrations/mssql_databases[MS SQL Database: Properties^]
* link:https://checkmk.com/de/integrations/mssql_blocked_sessions[MS SQL Server: Blocked Sessions^]
* link:https://checkmk.com/de/integrations/mssql_counters_cache_hits[MS SQL Server: Cache Hit Ratio^]
* link:https://checkmk.com/de/integrations/mssql_counters_pageactivity[MS SQL Server: Page Activity^]
* link:https://checkmk.com/de/integrations/mssql_counters_locks[MS SQL Tablespaces: Locks per Second^]
* link:https://checkmk.com/de/integrations/mssql_tablespaces[MS SQL Tablespaces: Size Information^]
* link:https://checkmk.com/de/integrations/mssql_counters_transactions[MS SQL Tablespaces: Transactions per Second^]

Um die Datenbanken überwachen zu können, benötigen Sie neben dem {CMK}-Agenten lediglich das Agentenplugin auf dem Datenbank-Server.
Zusätzliche Software wird weder auf dem {CMK}- noch auf dem Datenbank-Server benötigt.

Im Folgenden wird die Einrichtung für Windows-Hosts beschrieben.
Weiter unten gehen wir auf die Einrichtung über die xref:monitoring_mysql#bakery[Agentenbäckerei] ein.


[#setup_monitoring]
== Überwachung einrichten

=== Systembenutzer verwenden

Wenn Sie den Systembenutzer (`NT AUTHORITY\SYSTEM`) für das Monitoring verwenden können, achten Sie darauf, dass dieses Konto (_login_), mindestens Berechtigungen für die folgenden sicherungsfähigen Elemente ([.guihint]#Securables#) benötigt:

* Verbindung mit beliebiger Datenbank ([.guihint]#Connect any database#)
* [.guihint]#View Server State#
* [.guihint]#Connect SQL#

In Abhängigkeit davon, welche Datenbanken Ihrer Instanzen Sie überwachen möchten und je nachdem über welche Server-Rollen und Mappings der Systembenutzer (`NT AUTHORITY\SYSTEM`) bereits verfügt, kann es notwendig sein, auch die Berechtigung für [.guihint]#Connect Any Database# zu erteilen.
// TK: Connect any database steht doch schon oben in der Liste, wieso jetzt evtl. nochmal - und wieso anders geschrieben?


[#setup_user]
=== Exkurs: Neuen Benutzer einrichten

Sollte es unbedingt notwendig sein, dass in Ihrem Unternehmen nicht der Systembenutzer verwendet wird, so müssen Sie in den zu überwachenden Instanzen einen passenden Datenbankbenutzer für das Monitoring anlegen.
Die Grundvoraussetzung in MSSQL ist, dass die [.guihint]#Server authentication# auf [.guihint]#SQL Server and Windows Authentication mode# gestellt ist.
Wenn Sie nicht den Windows-eigenen Systembenutzer verwenden können, dürfte diese Voraussetzung zwar bereits erfüllt sein, sie soll aber auch nicht unerwähnt bleiben.

Melden Sie sich nun mit einem Benutzer mit ausreichenden Zugriffsberechtigungen in MSSQL an und erstellen Sie über das Microsoft SQL Server Management Studio einen neuen Datenbankbenutzer:

image::mssql_new_user.png[alt="Auswahl der Option 'New Login...' in MSSQL.", width=38%]

Dieser neu angelegte Benutzer benötigt die oben genannte Berechtigung.
Gehen Sie in den [.guihint]#Object Explorer#, öffnen Sie [.guihint]#Security > Logins# und dann die Eigenschaften des Kontos (_login_), welche Sie für das Agentenplugin konfiguriert haben.
// TK: Wann habe ich denn ein Login für das Agentenplugin konfiguriert?
Unter [.guihint]#Securables# finden Sie die explizite Berechtigung [.guihint]#Connect any database,# welche Sie erteilen müssen.

image::mssql_permissions.png[alt="Berechtigung 'Connect any database' erteilen."]

Alternativ können Sie den Benutzer und die Berechtigungen auch über die Befehlszeile erzeugen.
Im folgenden Beispiel wird das für den Benutzer `checkmk` erledigt:


[{sql}]
----
mssql> USE master;
      CREATE USER checkmk WITH PASSWORD = 'MyPassword123';
      GO
----

und danach:

[{sql}]
----
mssql> USE master;
      GRANT CONNECT ANY DATABASE TO checkmk;
      GO
----


==== Konfigurationsdatei erstellen

Auf dem Windows-Host legen Sie im unten angegebenen Verzeichnis eine Datei `mssql.ini` an:
// TK: Mit dem Anlegen ist es ja nicht getan, Inhalt muss da auch noch rein.

.C:\ProgramData\checkmk\agent\config\mssql.ini
[{ini}]
----
[client]
user=checkmk
password=MyPassword123
----

Sollten Sie auf dem Host mehrere MSSQL-Instanzen mit verschiedenen Benutzernamen und Passwörtern betreiben, erstellen Sie einfach pro Instanz eine `ini`-Datei nach dem Namensschema `mssql_instance-ID.ini`.


=== Agentenplugin installieren

Der Agent für Windows wird standardmäßig bereits mit einer ganzen Reihe von Plugins ausgeliefert.
Deshalb finden Sie auch das Plugin für die Überwachung von MSSQL nach der Installation des Agenten bereits auf Ihrem Host.
Die Plugin-Datei kopieren Sie für die Verwendung nur noch in das richtige Verzeichnis:

[{powershell}]
----
PS> copy "c:\Program Files (x86)\checkmk\service\plugins\mssql.vbs" c:\ProgramData\checkmk\agent\plugins\
----


=== Services einrichten

Nachdem Sie das Plugin nun installiert und konfiguriert haben, können Sie für diesen Host eine xref:glossar#service_discovery[Service-Erkennung] durchführen.
Der folgende Screenshot zeigt dabei nur eine Auswahl der auffindbaren Services:

image::mssql_discovery.png[alt="Auszug der Service-Erkennung."]


[#extended_configuration]
== Erweiterte Konfiguration

=== Asynchrone Ausführung des Agentenplugins

Das Plugin für die Überwachung von MSSQL kann - wie so viele andere - asynchron ausgeführt werden, um beispielsweise längeren Laufzeiten bei großen MSSQL-Instanzen Rechnung zu tragen.

Um das Plugin unter Windows asynchron auszuführen, passen Sie die Konfiguration des Agenten an und erweitern die Sektion `execution` unter `plugins` um den folgenden Eintrag:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{yaml}]
----
plugins:
    execution:
        - pattern: mssql.vbs
          cache_age: 300
          async: yes
----

Eine detaillierte Anleitung zur asynchronen Ausführung von Plugins auf einem Windows-Host finden Sie im Artikel über den xref:agent_windows#customizeexecution[Windows-Agenten.]


=== Schwellwerte konfigurieren

==== Verbindungen überwachen

Für die Auslastung der durch MSSQL vorgegebenen maximalen Anzahl an gleichzeitigen Verbindungen können Sie eigene Schwellwerte vorgeben, da diese viel stärker als bei anderen Services vom Aufbau Ihrer MSSQL-Instanz abhängig sind.
Die Einrichtung entsprechender Schwellwerte lässt sich mit einer Regel aus dem Regelsatz [.guihint]#MSSQL Connections# im Handumdrehen bewerkstelligen.

image::mssql_connections.png[alt="Einstellung der oberen Schwellwerte für aktive Verbindungen."]


==== Dateigröße überwachen

Auch für die Größe einzelner Dateien in MSSQL können Sie Schwellwerte festlegen.
Dazu verwenden Sie den Regelsatz [.guihint]#MSSQL datafile sizes.#

image::mssql_size_datafile.png[alt="Einstellung der genutzten Dateigrößen."]


[#bakery]
== Konfiguration über die Agentenbäckerei

{cee-only}
Die Einrichtung wird in den kommerziellen Editionen mittels der xref:glossar#agent_bakery[Agentenbäckerei] sehr vereinfacht,
da Syntaxfehler in den Konfigurationsdateien vermieden werden und Anpassungen an sich verändernde Umgebungen einfach bewerkstelligt werden können.
Der wesentliche Unterschied zu einer manuellen Installation ist, dass Sie nur noch dann auf dem MSSQL-Host auf der Kommandozeile arbeiten müssen, wenn Sie spezielle MSSQL-spezifische Konfigurationen vornehmen möchten.

Für die erste Einrichtung reicht es, wenn Sie den xref:setup_user[Datenbankbenutzer auf dem MSSQL-Host einrichten] und eine entsprechende Regel in der Agentenbäckerei anlegen.
// TK: Und wenn ich den Windows system user verwende? 
Sie finden den Regelsatz unter [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules.#
In dem Suchfeld können Sie dann nach `mssql` suchen:

image::mssql_bakery_ruleset_search.png[alt="Die Regel 'Microsoft SQL Server' in den Agentenregeln."]

Wählen Sie in der neuen Regel im Abschnitt [.guihint]#Microsoft SQL Server (Windows)# idealerweise die Option [.guihint]#System Authentication# für eine einfache und problemlose Anbindung.

image::mssql_bakery.png[alt="Mögliche Einstellungen für den MSSQL Server in der Agentenbäckerei."]

Entscheiden Sie sich stattdessen für die Option [.guihint]#Database User Credentials#, so müssen Sie zusätzlich [.guihint]#User ID# und [.guihint]#Password# des gewünschten Datenbanknutzers angeben (z.B. des Benutzers, den Sie xref:setup_user[zuvor] angelegt haben).


[#diagnostic]
== Diagnosemöglichkeiten

Sollte es beispielsweise bei der Einrichtung der Überwachung zu unerwartetem Verhalten oder Problemen kommen, so empfiehlt sich eine Prüfung direkt auf einem betroffenen Host.
Da es sich bei dem Plugin für die Überwachung von MSSQL um Shell- bzw. Visual Basic-Skripte handelt, können diese leicht auch ohne den Agenten ausgeführt werden.
Der Shell bzw. der Kommandozeile muss vorher nur das jeweilige Konfigurationsverzeichnis bekannt gemacht werden.

Um das Plugin manuell anführen zu können, öffnen Sie zuerst eine Kommandozeile mit Admin-Rechten.
Setzen Sie in dieser Kommandozeile nun die Umgebungsvariable `MK_CONFDIR`.
Diese wird benötigt, damit das Plugin die Konfigurationsdateien finden kann.

[{powershell}]
----
PS> set MK_CONFDIR=c:\ProgramData\checkmk\agent\config
----

*Hinweis:* Auch hier ist die gesetzte Umgebungsvariable nicht permanent, sondern besteht nur, solange diese Kommandozeile offen ist.
// TK: Wieso "Auch hier"?

Bei der eigentlichen Ausführung des Plugins empfiehlt es sich, die Ausgabe auf die Kommandozeile umzulenken.
Zu diesem Zweck liefert Windows das Bordwerkzeug `cscript` mit.

[{powershell}]
----
PS> cscript c:\ProgramData\checkmk\agent\plugins\mssql.vbs
----


=== Mögliche Fehler und Fehlermeldungen

==== Failed to connect to database

Es gibt drei verschiedene Treiber mit deren Hilfe {CMK} alternativ versucht sich mit der MSSQL-Datenbank zu verbinden: `msoledbsql`, `sqloledb` und `sqlncli11`.

Standardmäßig sind alle drei in der Regel vorhanden und werden beim Verbindungsaufbau nacheinander getestet.
In einzelnen Fällen kann es vorkommen, dass diese sukzessive Abarbeitung zu Fehlermeldungen führt.
Gegebenenfalls müssen Sie dann ein oder sogar zwei der genannten Treiber aus der Syntax des Aufrufs entfernen.
// TK: Und wie mach ich das?


==== mssql.vbs: "no backup found"

Meldet ein Plugin "no backup found", so sollten Sie als erstes manuell prüfen, ob ein Backup vorhanden ist.
// TK: ein Plugin? Agentenplugin oder Check-Plugin?
Ist ein Backup vorhanden und das Problem besteht dennoch weiter, so liegt dies möglicherweise an den Namenskonventionen auf der MSSQL-Seite.

{CMK} interpretiert Host-Namen grundsätzlich in Kleinbuchstaben, werden diese aber im Rahmen der Backups vom Host beispielsweise in Großbuchstaben übermittelt, so entstehen Verständigungsprobleme.

Sie können dann den Wert der `serverproperty('collation')` auf der MSSQL-Seite prüfen.
Ist hier zum Beispiel `SQL_Latin1_General_CP1_CS_AS` gesetzt, so steht `CS` für „Case Sensitive“.
// TK: Logik: CS steht in diesem String immer für Case Sensitive, egal, ob der Wert gesetzt ist oder nicht.
Das Plugin kann den Host-Namen dann nicht anpassen und es kann zu Problemen aufgrund der Schreibweise kommen.
Ein Wechsel auf `SQL_Latin1_General_CP1_CI_AS`, d.h. auf `CI` für „Case Insensitive“ sollte das Problem beheben.

Alternativ können Sie auch die Schreibweise des ursprünglichen Namens des MSSQL-Servers ändern.
// TK: Was heißt hier „ursprünglichen Namens“?
Dies ist nur nicht in jedem Unternehmen und in jeder Umgebung möglich.


[#files]
== Dateien und Verzeichnisse

=== Auf dem MSSQL-Host

[cols="55,~",options="header"]
|===
|Pfad |Verwendung
|`C:\ProgramData\checkmk\agent\plugins\` |Plugin-Verzeichnis
|`C:\ProgramData\checkmk\agent\config\` |Konfigurationsverzeichnis
|===


=== Auf dem {CMK}-Server

[cols="55,~",options="header"]
|===
|Pfad |Verwendung
|`~/share/check_mk/agents/plugins/mssql` |Das Plugin, welches auf dem MSSQL-Host die Daten holt.
|===
