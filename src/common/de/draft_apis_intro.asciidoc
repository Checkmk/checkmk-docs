// *** coding: utf-8 **-
// IGNORE Httpie Lifestatus Redoc Rulesets skriptbasierte tbd urllib
include::global_attr.adoc[]
= Übersicht der API-Ressourcen
:revdate: draft
:title: Übersicht der API-Ressourcen
:description: {CMK} bietet mehrere APIs sowie zugehörige Artikel und Referenzen. Hier finden Sie eine Übersicht sowie Tipps zur Navigation.

{related-start}
xref:devel_intro#[Erweiterungen entwickeln]
xref:bakery_api#[Bakery-API]
xref:rest_api#[Rest-API]
{related-end}


[#intro]
== Einleitung
{CMK} bietet mittlerweile eine ganze Menge unterschiedlicher Schnittstellen, allen voran die REST-API, über die Sie alles erledigen können, was auch über die Weboberfläche geht.
Darüber hinaus gibt es jedoch noch APIs für Plugins, das Inventar, die Agentenbäckerei und so weiter.
Zu all diesen Schnittstellen gibt es Artikel, Referenzen und weitere Ressourcen, verteilt über das Benutzerhandbuch, die Webseite und {CMK} selbst.
In diesem Artikel verschaffen wir Ihnen einen Überblick über alle Schnittstellen und Ressourcen und geben einige Tipps zum generellen Umgang.
Viele Links in diesem Artikel sind redundant, da die Informationen drei unterschiedliche Herangehensweisen oder Fragen bedienen sollen: 

- Welche APIs bietet {CMK}?
- Welche API-relevanten Artikel finden sich im Handbuch?
- Welche API-relevanten Ressourcen gibt es in {CMK}?

Die wichtigste Schnittstelle ist fraglos die xref:rest_api#[{CMK}-REST-API], über die sich alles programmatisch erledigen lässt, was auch über die Weboberfläche geht.

[TIP]
====
Einen schnellen, praktischen Einstieg in die REST-API bietet die interaktive Weboberfläche.
Hier können Sie vorgegebene Abfragen absenden und optional auch manipulieren.
Sie finden die GUI in {CMK} selbst über [.guihint]#Help > Developer resources > REST API interactive GUI.#
====

[{image-border}]
.Interaktive Weboberfläche der REST-API
image::restapi_swaggerui.png[alt="Interaktive GUI der REST-API mit Create-Host-Beispiel."]

Die zweite große Schnittstelle ist die xref:devel_intro#[Plugin-API] für die Entwicklung eigener Erweiterungen. Je nach Erfahrung können Sie hier mit unserem xref:devel_intro#[Einführungsartikel] starten oder der Referenz, die Sie wieder direkt in {CMK} selbst finden: [.guihint]#Help > Developer resource > Plug-in API reference.#

[{image-border}]
.Referenz der Plugin-API samt Versionshinweisen
image::devel_cpi_checkapi_doc.png[alt="Bild der API-Referenz mit Versionshinweisen."]

In den Tabellen unten finden Sie nun auch weniger prominente Schnittstellen, wie etwa für das Hardware-/Software-Inventar, Sub-Schnittstellen für die Check-Entwicklung, wie etwa die explizite Graphing-API, sowie _Quasi-Schnittstellen,_ wie das Ausgabeformat von xref:localchecks#[lokalen Checks], der simplen, Skript-basierten Vorstufe ausgewachsener Plugins.

[#apis]
== APIs in {CMK}
[cols="12,18,25,~",options="header"]
|===
|API |Handbuch |Web| Beschreibung 
|REST-API |xref:rest_api#[{CMK}-REST-API] | link:https://checkmk.atlassian.net/wiki/spaces/KB/pages/9473812/REST-API+code+examples[REST-API-Code-Beispiele^]

link:https://checkmk.com/videos/en/ep-46-working-with-checkmk-rest-api[Video-Tutorial^]
|Funktional deckungsgleich mit der Weboberfläche.
|Check-API|xref:devel_check_plugins#[Agentenbasierte Check-Plugins]|link:https://exchange.checkmk.com/[{CMK}-Exchange (Beispiele)^]
|Programmieren von Plugins.
|Bakery-API|tbd|In {CMK}:

[.guihint]#Help > Plug-in API references > Bakery#
|Einbinden von Check-Plugins in die Agentenbäckerei.
|Server-side-Calls-API|tbd|In {CMK}:

[.guihint]#Help > Plug-in API references > Server-side calls#
|Entwickeln von aktiven Checks und Spezialagenten.
|Graphing-API|tbd|In {CMK}:

[.guihint]#Help > Plug-in API references > Graphing#
|Einbinden von Graphen, Perf-o-Metern, Metriken.
|Rulesets-API|tbd|In {CMK}:

[.guihint]#Help > Plug-in API references > Rulesets#
|Entwickeln eigener Regelsätze.
|DCD-API|xref:dcd#[Dynamische Host-Konfiguration]|n.a.|Eigene Konnektoren für den Dynamic Configuration Daemon.
|HW/SW-API|xref:inventory#_zugriff_via_eigener_web_api[Inventurdaten-API]|n.a.|Web-API zur Abfrage von Inventurdaten.
|Livestatus|xref:livestatus#[Statusdaten via Livestatus]

xref:livestatus_references#[Lifestatus-Referenz]|n.a.|Direkter Abruf von Statusdaten via Livestatus Query Language (LQL).
|Event-Console-Schnittstelle|xref:ec#_die_statusschnittstelle[Statusschnittstelle der EC]|n.a.|Zugriff auf interne Status und Ausführen von Befehlen via Unix-Socket.
|Lokale Checks|xref:localchecks#[Lokale Checks]|n.a.|"Mini-Schnittstelle" für eigene, skriptbasierte Checks. 
|===

[#docs]
== Artikel im Handbuch

[cols="12,28,~",options="header"]
|===
|API-Scope |Handbuch | Beschreibung 
|Automatisierung |xref:rest_api#[Die Checkmk REST-API] |Beschreibung der REST-API sowie deren Dokumentation und Nutzungsmöglichkeiten.
|Automatisierung |xref:livestatus#[Statusdaten abrufen via Livestatus] |Die Daten-Schnittstelle für Host- und Service-Informationen in der Übersicht.
|Automatisierung |xref:livestatus_references#[Livestatus-Befehlsreferenz] |Alle Tabellen, Header, Filter und Operatoren.
|Automatisierung |xref:inventory#external[HW/SW-Inventur] |Beschreibung der Inventar-eigenen Web-API für den externen Zugriff.
|Automatisierung |xref:ec#_die_statusschnittstelle#[Statusschnittstelle der Event Console] |Per Unix-Socket und über eine Teilmenge des Livestatus-Protokolls können Daten von der Event Console ausgelesen und Kommandos abgesetzt werden.
|Programmierung |xref:devel_intro#[Erweiterungen für {CMK} entwickeln] |Übersichtsartikel mit allen Möglichkeiten für Erweiterungen und Links zu weiterführenden Informationen.
|Programmierung |xref:devel_check_plugins#[Agentenbasierte Check-Plugins schreiben] |Ausführliche Beschreibung zur Entwicklung von {CMK}-Erweiterungen.
|Programmierung |xref:devel_check_plugins_snmp#[SNMP-basierte Check-Plugins schreiben] |Ausführliche Beschreibung zur Entwicklung von Plugins für SNMP-Daten.
|===

[#ressources]
== Ressourcen in Checkmk
[cols="30,~",options="header"]
|===
|In {CMK} |Beschreibung
|[.guihint]#Help > Plug-in API references# |Auf Sphinx basierende Referenz aller APIs, die für die Entwicklung von Plugins relevant sind.
|[.guihint]#Help > REST API documentation# |Auf Redoc/OpenAPI basierende Referenz für alle Check-relevanten Abfragen; inklusive Code-Beispielen für: requests (Python), urllib (Python), Httpie und Curl.
|[.guihint]#Help > REST API interactive GUI# |Interaktive Weboberfläche zum Testen aller API-Endpunkte, inklusive Rückmeldungen direkt auf der Seite.
|[.guihint]#Help > Plug-in API references > Agent based ("Check API")# |Im Bereich [.guihint]#Version 2 > New in this version# finden Sie wichtige Informationen für die Migration alter Plugins auf die aktuelle API-Version.
|===

[#web]
== Ressourcen im Web

[cols="30,~",options="header"]
|===
|Ressource |Beschreibung
|link:https://checkmk.com/de/blog/checkmk-2-0-apis[{CMK} 2.0: Neue APIs^]|Blog-Artikel zur Einführung der neuen APIs.
|link:https://checkmk.com/videos/en/ep-46-working-with-checkmk-rest-api[Working with the REST API^] |Video-Tutorial mit praktischen Beispielen für den Einsatz der REST API, etwa zum Setzen von Wartungszeiten (englisch).
|link:https://checkmk.atlassian.net/wiki/spaces/KB/pages/9473812/REST-API+code+examples[REST-API-Code-Beispiele^] |Curl-Beispiele für konkrete Abfragen in der {CMK} Knowledge Base, beispielsweise für UND-verknüpfte Abfragen.
|link:https://exchange.checkmk.com/[{CMK} Exchange^] |Im {CMK}-Plugin-Store finden Sie viele praktische Implementierungen der APIs samt Quellcode.
|link:https://checkmk.com/de/blog/migrating-check-plug-ins-to-checkmk-2-0[Migration von Plugins auf 2.0^] |Ausführliche Beschreibung der Migration alter Python-2-basierter Plugins auf Python 3.
|link:

|===

//// 
ML: Ideen


[#usage]
== Beispiele oder FAQ?

Im Prinzip genügt das, devel_check_plugins und rest_api liefern eigentlich genügend Einführung - Ur-Scope dürfte hier schon erfüllt sein.

Aber vielleicht noch aus Nutzersicht: Ich habe ein Projekt, welche Teile davon führen zu welchen APIs und Dokumentationen?
Oder auch die Frage: Local Check oder "richtiges" Plugin? Da wird in den Artikeln minimal drauf eingegangen, aber das muss man sich auch erstmal erarbeiten, wenn man nicht schon im Thema ist.
Noch etwas in der Richtung?
Zwei Ansätze:

Sowas wie Mattias' Hello-Bakery-MKP nehmen und zeigen, welche APIs/Dokumentationen zu welchen Teilen gehören?

Server side script:
_agend_based/hello_bakery.py
http://192.168.178.68/mysite/check_mk/plugin-api/cmk.agent_based/index.html

Agent side script:
_agents/plugins/hello_bakery

Bakery script:
mkp/_lib/check_mk/base/cee/plugins/bakery
http://192.168.178.68/mysite/check_mk/plugin-api/cmk.base.plugins.bakery.bakery_api/index.html

etc.

Oder alternativ mit untechnischen, menschlichen Wünschen herangehen:
Ich will:
Daten erheben -> API X + Doc 1
Eine Regel anbieten -> API Y + Doc 4
Metriken als Graphen zeigen ...
Mein Plugin ausrollen ...
etc.


////
