// -*- coding: utf-8 -*-
// IGNORE WATO df
include::global_attr.adoc[]
= Glossar
:revdate: 2025-02-06
:title: Glossar
:description: Glossar mit den wichtigsten {CMK}-spezifischen Begriffen.

// Take care: Terms are sorted alphabetically, i.e. the order of terms in English and German is different.


=== {CMK}-spezifische Begriffe

[#agent]
==== Agent
Ein Agent sammelt die für das Monitoring relevanten Daten von einem Host ein.
ifdef::onprem[]
Das kann ein kleines, auf dem Host installiertes Programm sein (der {CMK}-Agent), ein unabhängig von {CMK} auf dem Host laufender SNMP-Agent, ein Spezialagent, der sich die Informationen über eine vom Zielsystem bereitgestellte API besorgt -- oder ein aktiver Check, der netzwerkbasierte Dienste abfragt.
endif::[]
ifdef::saas[]
Das kann ein kleines, auf dem Host installiertes Programm sein (der {CMK}-Agent), ein Spezialagent, der sich die Informationen über eine vom Zielsystem bereitgestellte API besorgt -- oder ein aktiver Check, der netzwerkbasierte Dienste abfragt.
endif::[]

Mehr unter xref:wato_monitoringagents#[Monitoring-Agenten.]


[#agent_updater]
==== Agent Updater
ifdef::onprem[]
Der Agent Updater ist ein Agentenplugin in den kommerziellen Editionen, das die automatischen Aktualisierungen der Agenten ermöglicht.
endif::[]
ifdef::saas[]
Der Agent Updater ist ein Agentenplugin, das die automatischen Aktualisierungen der Agenten ermöglicht.
endif::[]

Mehr unter xref:agent_deployment#[Automatische Agenten-Updates.]


[#agent_bakery]
==== Agentenbäckerei
ifdef::onprem[]
Mit der Agentenbäckerei (englisch: _agent bakery_) können Agenten in den kommerziellen Editionen individuell paketiert und optional auch automatisch verteilt werden.
endif::[]
ifdef::saas[]
Mit der Agentenbäckerei (englisch: _agent bakery_) können Agenten individuell paketiert und optional auch automatisch verteilt werden.
endif::[]

Mehr unter xref:wato_monitoringagents#bakery[Die Agentenbäckerei.]


[#agent_plugin]
==== Agentenplugin
Ein Agentenplugin erweitert die Funktionen des standardmäßig ausgelieferten {CMK}-Agenten.
Es ist ein kleines Programm oder Skript, das vom {CMK}-Agenten aufgerufen wird und die Ausgabe des Agenten um weitere Sektionen mit zusätzlichen Monitoring-Daten anreichert.
Ein Beispiel für ein Agentenplugin ist der Agent Updater.

Mehr unter xref:agent_linux#plugins[Agent um Plugins erweitern.]


[#active_check]
==== Aktiver Check
Ein aktiver Check ist ein kleines Programm oder Skript, das eine direkte Verbindung zu einem Dienst im Netzwerk oder Internet aufbaut und von dort die Monitoring-Daten abfragt.
Aktive Checks werden für netzwerkbasierte Dienste wie HTTP, SMTP oder IMAP genutzt, z.B. `check_http` für das Abfragen von Webseiten.
Ein aktiver Check kümmert sich sowohl um die Erhebung als auch um die Auswertung der Daten.
Im Gegensatz dazu wird ein Check-Plugin manchmal auch als passiver Check bezeichnet, da es nur vorhandene Daten auswertet.

Mehr unter xref:active_checks#[Netzwerkdienste überwachen (Aktive Checks).]


[#activate_changes]
==== Änderungen aktivieren
Änderungen an der Konfiguration wirken sich erst auf das Monitoring aus, nachdem sie in einem zweiten Schritt aktiviert wurden; ähnlich, wie es zum Beispiel Partitionierungsprogramme handhaben: Konfigurieren, prüfen, anwenden.

Mehr unter xref:wato#activate_changes[Änderungen aktivieren.]


[#api_integrations]
==== API-Integrationen
Wenn im Setup von {CMK} von [.guihint]#API integrations# die Rede ist, sind Monitoring-Daten gemeint, die zwar das Datenformat des {CMK}-Agenten nutzen, aber aus einer anderen Quelle stammen.
Solche Quellen können Datenquellenprogramme, Spezialagenten oder Hosts sein, die ihre Daten per Piggyback (huckepack) liefern.
Sollen per API-Integration empfangene Daten im Monitoring verwendet werden, muss in den Eigenschaften eines Hosts [.guihint]#API integrations# aktiviert sein.

ifdef::onprem[]
Mehr unter xref:datasource_programs#[Datenquellenprogramme.]
endif::[]


[#automation_user]
==== Automationsbenutzer
Spezielles Konto für die Abfrage und Konfiguration von {CMK} abseits der Weboberfläche, also zum Beispiel über API, Kommandozeile, Skript oder Webdienst.
Ein Automationsbenutzer hat standardmäßig ein zufällig ausgewürfeltes Automationspasswort (englisch _automation secret_).
In einer frischen {CMK}-Instanz sind mehrere Automationsbenutzer bereits eingerichtet, z. B. für Webdienste und für die Registrierung des Agenten beim {CMK}-Server zur TLS-verschlüsselten Datenübertragung.

Mehr unter xref:wato_user#automation[Automationsbenutzer (für Webdienste).]


[#notification]
==== Benachrichtigung
Mit einer Benachrichtigung (englisch: _notification_) wird ein {CMK}-Benutzer über Probleme oder andere Monitoring-Ereignisse aktiv informiert, per HTML-E-Mail, SMS, Slack oder ähnlichem.
Wer wie benachrichtigt wird, legen die Benachrichtigungsregeln fest.
Wenn zum Beispiel Herr Hirsch eine E-Mail mit der Information erhält, dass der Service `Filesystem /` auf dem Host `myserver123` von {WARN} nach {CRIT} gewechselt ist, dann deshalb, weil Herr Hirsch Kontakt für diesen Host ist und in einer Benachrichtigungsregel steht, dass alle Kontakte des Hosts eine E-Mail erhalten sollen, wenn einer seiner Services nach {CRIT} wechselt.

Mehr unter xref:notifications#[Benachrichtigungen.]


[#bi]
==== Business Intelligence (BI)
Business Intelligence in {CMK} ermöglicht es, aus vielen einzelnen Statuswerten den Gesamtzustand einer übergeordneten Ebene abzuleiten und übersichtlich darzustellen.
Das kann die abstrakte Gruppierung einzelner Komponenten oder eine geschäftskritische Anwendung sein.
So lässt sich etwa der Zustand einer Anwendung _E-Mail,_ bestehend aus diversen Hosts, Switches und Diensten wie SMTP und IMAP, über eine einzige Visualisierung erfassen.
Auch die Formulierung gänzlich ungreifbarer und nicht-technischer Belange ist hier möglich, zum Beispiel die termingerechte Verfügbarkeit eines auszuliefernden Produkts:
Dieses Ziel liegt in der Zukunft und hängt von vielen Aspekten ab, der Supply Chain, einem funktionierenden Maschinenpark, verfügbarem Personal etc.
Etwaige Gefährdungen für dieses abstrakte Ziel ließen sich über das BI-Modul erfassen.
// MA: Die Idee dahinter ist nicht nur bestehende Dinge auf andere Weise zusammenzufassen (Ob der SMTP funktioniert, kann man ja auch direkt prüfen), sondern auch Dinge prüfbar zu machen, die nicht direkt prüfbar sind. Ein abstraktes Beispiel dafür ist ein Gerät mit einer zugesicherten Lieferzeit. Da die Lieferzeit in der Zukunft liegt, kann man sie nicht prüfen - man kann aber die Komponenten prüfen, die nötig sind, um die Lieferzeit einzuhalten. Haben Komponenten ein Problem, kann die Fertigstellung/Lieferzeit mehr oder wenig gefährdet sein (= WARN oder CRIT).
// ML: Ich habe das mal erweitert, muss aber sagen, dass das für mich dieselbe Abstraktionsebene ist, außer dass die Anwendung "Mail" in der Gegenwart liegt, die Anwendung "termingerechte Verfügbarkeit" in der Zukunft. Nicht sicher, ob das beim Verständnis hilft oder eher verwirrt.

Mehr unter xref:bi#[Business Intelligence (BI).]


[#check]
==== Check
Ein Check im Sinne von {CMK} ist ein Skript oder Programm, das einen Host oder Service gemäß erstellter Regeln prüft,
also der Vorgang, der den Status von Hosts und Services bestimmt und zu einem der folgenden Ergebnisse führt: {OK}, {DOWN}, {UNREACH}, {WARN}, {CRIT}, {PEND} oder {UNKNOWN}.
Checks können zum Beispiel mit einem Check-Plugin, lokalen Check oder aktiven Check implementiert werden.

Mehr unter xref:monitoring_basics#checks[Checks.]


[#check_plugin]
==== Check-Plugin
Check-Plugins sind in Python geschriebene Module, die auf der {CMK}-Instanz ausgeführt werden und die Services eines Hosts erstellen und auswerten.
ifdef::onprem[]
Ein Beispiel: Das Check-Plugin _df_, zu finden innerhalb einer Instanz unter `~/local/lib/python3/cmk_addons/plugins/<plug-in_family>/agent_based/` (bei Nutzung der Check-API V2) oder `~/local/lib/check_mk/base/plugins/agent_based/` (bei Nutzung der Check-API V1), erstellt aus den Daten eines Agenten in der Instanz Services für die vorhandenen eingebundenen Dateisysteme eines Hosts und überprüft diese Services anhand der Daten, also etwa wie viel freien Speicherplatz es noch gibt.
endif::[]
ifdef::saas[]
Ein Beispiel: Das Check-Plugin _df_ erstellt aus den Daten eines Agenten in der Instanz Services für die vorhandenen eingebundenen Dateisysteme eines Hosts und überprüft diese Services anhand der Daten, also etwa wie viel freien Speicherplatz es noch gibt.
endif::[]

xref:wato_services#checkplugins[Mehr über Check-Plugins.]


ifdef::onprem[]
[#mkp]
==== {CMK}-Erweiterungspaket (MKP)
MKP ist das {CMK}-eigene Dateiformat zum Zusammenfassen und Verteilen von Erweiterungen, also eigenen Check-Plugins, Agentenplugins, Zeitreihen-Graph-Definitionen, Benachrichtigungsskripten, Tabellenansichten, Dashboards und so weiter.

Mehr unter xref:mkps#[{CMK}-Erweiterungspakete (MKPs).]
endif::[]


[#dashboard]
==== Dashboard
Ein Dashboard ist eine frei konfigurierbare Übersicht, bestehend aus Tabellenansichten und/oder so genannten Dashboard-Elementen (englisch: _dashlet_).
Diese Elemente gibt es zum Beispiel in Form von Listen (etwa Host-Probleme), Zeitreihen-Graphen oder kleinen Tachometern, die einzelne Werte wie etwa eine CPU-Temperatur visualisieren.

Mehr unter xref:dashboards#[Dashboards.]


ifdef::onprem[]
[#edition]
==== Edition
{CMK}-Editionen sind die unterschiedlichen Software-Varianten von {CMK}, die geladen und installiert werden können.
Also die Open Source {CRE}, für professionelle Anwender die per Subskription erhältliche {CSE}, die darauf aufbauende {CCE} sowie die mandantenfähige {CME}.
In dieser Reihenfolge enthält jede Edition den kompletten Funktionsumfang der vorher genannten Edition -- und erweitert diesen um spezifische Zusatzfunktionen.
So ist zum Beispiel {CE} eine für Cloud-Umgebungen ausgebaute und optimierte {SE}.

Mehr unter xref:intro_setup#[Edition auswählen.]
endif::[]


ifdef::onprem[]
[#ec]
==== Event Console (EC)
Bei der Überwachung von Hosts und Services geht es in {CMK} um _Zustände._
Die Event Console ist das Modul, das sich im Gegensatz dazu um _Ereignisse_ kümmert, also die Überwachung aus Quellen wie Syslog oder SNMP-Traps, aber optional auch Windows Event Log, Log-Dateien und eigenen Anwendungen.
Ein Beispiel: Eine Warnmeldung des SMTP-Dienstes auf einem Mailserver würde weder den Status/Zustand von dessen Host noch Services ändern -- dennoch ist es eine relevante Information, die ins Monitoring gehört.
Mit der Event Console können solche Ereignisse in {CMK} dargestellt werden.

Mehr unter xref:ec#[Die Event Console.]
endif::[]


==== Flapping
Siehe xref:flapping[Unstetig.]


[#host]
==== Host
Ein Host im Sinne von {CMK} ist jedes eigenständige, physische oder virtuelle System, das von {CMK} überwacht wird.
ifdef::onprem[]
In der Regel handelt es sich um Dinge mit eigener IP-Adresse (Server, Switches, SNMP-Geräte, virtuelle Maschinen), aber auch um beispielsweise Docker Container oder andere logische Objekte ohne eine solche Adresse.
endif::[]
ifdef::saas[]
In der Regel handelt es sich um Dinge mit eigener IP-Adresse (Server, virtuelle Maschinen), aber auch um beispielsweise Docker Container oder andere logische Objekte ohne eine solche Adresse.
endif::[]
Jeder Host hat immer einen der Zustände {UP}, {DOWN}, {UNREACH} oder {PEND} und immer mindestens einen Service.

Noch weiter heruntergebrochen:
Ein Host ist für {CMK} intern lediglich ein Strukturierungselement, das zu überwachende Elemente beinhaltet, also Services.
Jeder Host hat zwangsläufig mindestens einen Service, um überhaupt die Erreichbarkeit zu verifizieren (etwa [.guihint]#PING# oder der {CMK}-Agent selbst, also der Service [.guihint]#Check_MK#).
Insofern meint Host kaum mehr als die Überschrift, unter der eine Anzahl an Services gruppiert ist.

Mehr unter xref:hosts_setup#[Verwaltung der Hosts.]


[#host_group]
==== Host-Gruppe
Hosts werden in {CMK} primär über Ordner verwaltet.
Host-Gruppen ermöglichen eine andere Gruppierung von Hosts, um Hosts im Monitoring z.B. in Tabellenansichten auswählen zu können.
Host-Merkmale, Labels und Ordner werden genutzt, um Hosts über Regeln solchen Gruppen zuzuordnen.
Hosts können aber auch explizit einer Host-Gruppe zugeordnet werden.

Mehr unter xref:hosts_structure#host_groups[Host-Gruppen]


[#host_tag]
==== Host-Merkmal
Host-Merkmale (englisch: _host tags_) sind Kennzeichen, die Hosts zugeordnet werden können, um diese in der Konfiguration für Regeln oder später im Monitoring für Tabellenansichten gezielt ansprechen zu können.
Host-Merkmale sind in Gruppen eingeteilt, beispielsweise lässt sich eine Merkmalsgruppe _Betriebssysteme_ mit den Merkmalen _Linux_ und _Windows_ einrichten.
Einige Merkmalsgruppen sind bereits vordefiniert, etwa zur Art des verwendeten {CMK}-Agenten oder zur IP-Adressfamilie, über die festgehalten wird, ob ein Host über IPv4, IPv6 oder beide Versionen überwacht werden soll.
Sie haben außerdem vorher festgelegte Werte und einen Standard, welcher jedem Host zugeordnet ist, solange er nicht mit einer anderen Option aus der Gruppe überschrieben wurde.

Mehr unter xref:host_tags#[Host-Merkmale.]


[#host_state]
==== Host-Zustand
Der Zustand eines Hosts, also ob dieser über das Netz erreichbar ist ({UP}), nicht auf Anfragen aus dem Netz antwortet ({DOWN}) oder ob der Weg durch ausgefallene zwischengeschaltete Geräte (Switches, Router etc.) versperrt ist ({UNREACH}).
Für frisch ins Monitoring aufgenommene, noch nie abgefragte Hosts gibt es zudem den Zustand {PEND}, welcher aber kein Status im eigentlichen Sinne ist.

Mehr unter xref:monitoring_basics#hosts_services[Hosts und Services.]


[#site]
==== Instanz
Instanz (englisch: _site_) nennt sich *ein* laufendes {CMK}-Monitoring-Projekt.
ifdef::onprem[]
{CMK} lässt sich parallel auf demselben Server in mehreren, unabhängigen Instanzen betreiben, um beispielsweise unterschiedliche {CMK}-Versionen oder -Editionen auszuprobieren oder ein separates Monitoring für (neue) Hosts zu betreiben, die (noch) nicht ins produktive Monitoring aufgenommen werden sollen.

Mehr unter xref:omd_basics#omd_create[Eine Instanz erstellen.]
endif::[]

ifdef::saas[]
Mehr unter xref:admin_panel#admin_site[Instanzen verwalten.]
endif::[]


[#configuration_environment]
==== Konfigurationsumgebung
Die {CMK}-Weboberfläche teilt sich auf in Monitoring- und Konfigurationsumgebung.
Letztere bezeichnet die Bereiche, in denen Regeln gebaut, Host und Services hinzugefügt und eingestellt, Benutzer verwaltet oder generelle Optionen gesetzt werden.
Zur Konfigurationsumgebung geht es über das [.guihint]#Setup#-Menü in der Navigationsleiste.

Mehr unter xref:user_interface#[Die Benutzeroberfläche.]


[#contact]
==== Kontakt
Kontakte werden {CMK}-Benutzer genannt, die für bestimmte Hosts und Services zuständig sind.
Die Zuordnung von Kontakten zu Hosts und Service geschieht über Kontaktgruppen.
Kontakte können auch Benutzerkonten sein, die rein für die Benachrichtigungen existieren, beispielsweise für die Weiterleitung an ein Ticketsystem.

Mehr unter xref:wato_user#contact_groups[Kontaktgruppen.]


[#label]
==== Label
Hosts können mit vordefinierten Host-Merkmalen, aber auch mit direkten Kennzeichen, den Labels, versehen werden.
Ein Label besteht aus zwei Teilen (Schlüssel und Wert), getrennt durch einen Doppelpunkt.
Solche beliebigen Schlüssel-Wert-Paare (`os:linux`, `os:windows`, `foo:bar` etc.) können bei einem Host direkt gesetzt werden -- ohne jede vorherige Konfiguration, wie es bei den Host-Merkmalen nötig ist.
Labels verfügen daher über keinen vorher definierten Umfang und haben auch keinen Standardwert, sind dafür aber sehr dynamisch.
Insbesondere kann {CMK} von Containersystemen wie Kubernetes, Azure oder AWS automatisch erzeugte Objekte selbständig als Hosts ins Monitoring übernehmen und diese dann mit automatisch aus deren Metadaten generierten Labels anreichern.
Label lassen sich z. B. für die Auswahl von Bedingungen in Regeln oder im Monitoring für die Filterung in Tabellenansichten nutzen.

Mehr unter xref:labels#[Labels.]


ifdef::onprem[]
[#livestatus]
==== Livestatus
Livestatus ist die wichtigste Schnittstelle in {CMK}.
Durch sie bekommen {CMK}-Benutzer schnellstmöglich und live Zugriff auf alle Daten der überwachten Hosts und Services.
So werden z.B. die Daten im Snapin [.guihint]#Overview# direkt über diese Schnittstelle abgerufen.
Dass die Daten direkt aus dem RAM geholt werden, vermeidet langsame Festplattenzugriffe und gibt einen schnellen Zugriff auf das Monitoring, ohne das System zu sehr zu belasten.

Mehr unter xref:livestatus#[Statusdaten abrufen via Livestatus.]
endif::[]


[#local_check]
==== Lokaler Check
Ein lokaler Check ist eine (selbst geschriebene) Erweiterung, die in Form eines Skripts in einer beliebigen Sprache auf dem überwachten Host läuft.
Im Gegensatz zu normalen Checks läuft die Statusberechnung direkt auf dem Host.
Die Ergebnisse werden der regulären Agentenausgabe hinzugefügt.

Mehr unter xref:localchecks#[Lokale Checks.]


[#metric]
==== Metrik
Mess- und berechenbare Werte zu Hosts und Services in ihrem zeitlichen Verlauf, etwa Temperatur, Auslastung oder Verfügbarkeit, die beispielsweise für Graphen herangezogen werden können.
Vergangene Werte werden in RRDs (Round-Robin-Datenbank) gespeichert und halten diese in der Standardeinstellung bis zu 4 Jahre vor.

Mehr unter xref:graphing#[Messwerte und Graphing.]


[#monitoring_environment]
==== Monitoring-Umgebung
Die {CMK}-Weboberfläche teilt sich auf in Monitoring- und Konfigurationsumgebung.
Erstere bezeichnet die Bereiche, in denen der Status der überwachten Infrastruktur angezeigt wird; dazu zählen etwa das Inventar, Dashboards, Listen mit Hosts, Services, Ereignissen oder Problemen, historische Daten und so weiter.
Zur Monitoring-Umgebung geht es über das [.guihint]#Monitor#-Menü in der Navigationsleiste.

Mehr unter xref:user_interface#[Die Benutzeroberfläche.]


[#navigation_bar]
==== Navigationsleiste
Die Navigationsleiste ist die Hauptnavigation der {CMK}-Oberfläche, auf der linken Seite u.a. mit den Menüs [.guihint]#Monitor,# [.guihint]#Setup# und [.guihint]#Customize.#

Mehr unter xref:user_interface#navigation_bar[Navigationsleiste.]


ifdef::onprem[]
[#physical_appliance]
==== Physische Appliance
Die physische Appliance ist ein 19"-Server mit einer vorinstallierten, für {CMK} vorbereiteten Firmware, der sofort in Rechenzentren eingesetzt werden kann.
Sie kommt mit einer grafischen Konfigurationsoberfläche, die jegliche Linux-Kenntnisse überflüssig macht.

Mehr unter xref:intro_setup#physical_appliance[Physische Appliance.]
endif::[]


[#piggyback]
==== Piggyback
Manche Hosts im Monitoring werden nicht direkt abgefragt, weil es sich nicht um physischen Geräte, sondern virtuelle Maschinen oder Container handelt, oder die Daten nur von einem Drittsystem bereitgestellt werden können.
Diese Drittsysteme (die physischen Gastgeber) liefern die Daten quasi als Anhang in ihrer eigenen Agentenausgabe mit und werden bei uns als Piggyback-Host bezeichnet.
Ein Docker-Server würde also zum Beispiel neben den eigenen Daten die Daten der Container huckepack (englisch: _piggyback_) mitliefern.

Mehr unter xref:piggyback#[Der Piggyback-Mechanismus.]


[#pull_mode]
==== Pull-Modus
Im Pull-Modus lauscht der {CMK}-Agent am TCP-Port 6556 auf eingehende Verbindungen vom {CMK}-Server.
Sobald der Agent eine Aufforderung erhält, schickt er die Monitoring-Daten an den Server.
Hier geht die Initiative zur Datenübertragung vom Server aus, der die Daten vom Agenten quasi heran__zieht__.
ifdef::saas[]
Der Pull-Modus ist der Standardweg zur Datenübertragung vom {CMK}-Agenten in den On-Premises-Editionen von {CMK}.
Er steht in {CE} nicht zur Verfügung.
endif::[]
ifdef::onprem[]
Der Pull-Modus ist der Standardweg zur Datenübertragung vom {CMK}-Agenten -- und funktioniert in allen {CMK}-Editionen.

Mehr unter xref:wato_monitoringagents#agents[Der {CMK}-Agent.]
endif::[]


[#push_mode]
==== Push-Modus
Im Push-Modus sendet der {CMK}-Agent minütlich die Monitoring-Daten an den {CMK}-Server.
Der Agent _stößt_ also die Datenübertragung von sich aus an und wartet nicht auf eine Aufforderung des Servers.
Der Push-Modus ist immer dann erforderlich, wenn der {CMK}-Server nicht auf das Netzwerk zugreifen kann, in dem sich der zu überwachende Host mit seinem Agenten befindet, also z.B. in einer Cloud-basierte Konfiguration.
ifdef::onprem[]
Daher gibt es den Push-Modus nur ab {CCE}, d. h. für {CE} und {ME}.
endif::[]

Mehr unter xref:wato_monitoringagents#agents[Der {CMK}-Agent.]


// FIXME 2.4.0 SaaS: Quick Setup ist neu
ifdef::onprem[]
[#quick_setup_configuration]
==== Quick Setup-Konfiguration
Eine Quick Setup-Konfiguration besteht aus vier Komponenten, die Sie bereits als Einzelteile aus dem Setup einer {CMK}-Instanz kennen.
Die Komponenten sind eine Regel für den jeweiligen Spezialagenten, ein Host, eine Verbindung in der dynamischen Host-Verwaltung und ein Eintrag im Passwortspeicher.
endif::[]


[#rule]
==== Regel
Regeln sind die Grundlage der Konfiguration von Hosts und Services in {CMK}.
Regeln in einem Regelsatz steuern immer einen einzelnen, fokussierten Aspekt eines Hosts oder Services.
Sie lassen sich mit Bedingungen versehen, sowie innerhalb eines Regelsatzes beliebig aufeinander "stapeln".
Die Auswertung erfolgt dann von oben nach unten, so dass es Standardregeln geben kann, wenn keine Bedingung greift, aber auch sehr spezielle Regeln, die nur einen ganz bestimmten Host betreffen.
Viele Regelsätze in {CMK} haben bereits vordefinierte Standardwerte, so dass nur für abweichende Anforderungen Regeln erstellt werden müssen.

Mehr unter xref:wato_rules#[Regeln.]


[#rule_set]
==== Regelsatz
Ein Regelsatz steht für einen bestimmten Aspekt eines Hosts oder Services, beispielsweise die Schwellwerte der CPU-Auslastung.
In jedem Regelsatz können beliebig viele einzelne Regeln erstellt werden.
So könnte etwa der Regelsatz [.guihint]#CPU utilization on Linux/UNIX# zwei Regeln enthalten, die den Service auf bestimmten Hosts bei 90 Prozent und auf anderen schon bei 70 Prozent auf den Status {WARN} setzen.

Mehr unter xref:wato_rules#rule_set_types[Arten von Regelsätzen.]


[#sidebar]
==== Seitenleiste
Die Seitenleiste (englisch: _sidebar_) lässt sich aus der Navigationsleiste per Mausklick einblenden.
In die Seitenleiste können Benutzer diverse Snapins aufnehmen, die die Navigation erleichtern oder wichtige Statusdaten auf einen Blick zeigen.

Mehr unter xref:user_interface#sidebar[Seitenleiste.]


[#service]
==== Service
Ein Service ist ein logisches Objekt, welches einen oder mehrere Teilaspekte eines Hosts zusammenfasst.
Also beispielsweise Größe, Auslastung und Trends von Dateisystemen, CPU-Auslastung, Temperaturen, Alter und Anzahl laufender Programme, Ports, Sensoren und so weiter.
Jeder Service im Monitoring hat zu jedem Zeitpunkt einen der Zustände {OK}, {WARN}, {CRIT}, {UNKNOWN} oder {PEND}, ist immer genau einem Host zugeordnet und enthält optional eine oder mehrere Metriken.

Mehr unter xref:wato_services#[Services verstehen und konfigurieren.]


[#service_discovery]
==== Service-Erkennung
Sobald ein Host dem Monitoring hinzugefügt wird, erkennt {CMK} automatisch alle verfügbaren Services, die ins Monitoring aufgenommen werden können -- und hält diese Liste auch im laufenden Betrieb stets aktuell.
Die Service-Erkennung (englisch: _service discovery_) lässt sich aber auch jederzeit manuell über die Konfiguration eines Hosts starten.

Mehr unter xref:wato_services#[Services verstehen und konfigurieren.]


[#service_group]
==== Service-Gruppe
Analog zu den Hosts lassen sich auch Services in Gruppen zusammenfassen, um diese Gruppen später in Tabellenansichten zu filtern oder in der Konfiguration gezielt anzusprechen.
Gruppieren lässt sich nach Ordnern, Host-Merkmalen, Host- und Service-Labels sowie via regulären Ausdrücken gefilterten Host- und Service-Namen.

Mehr unter xref:wato_services#service_groups[Service-Gruppen.]


[#service_state]
==== Service-Zustand
Der Service-Zustand ist immer {OK} {WARN}, {CRIT} oder {UNKNOWN} und beschreibt, in welchem Zustand sich der Service aktuell befindet -- gemäß den gesetzten Regeln.
Für frisch ins Monitoring aufgenommene, noch nie abgefragte Services gibt es zudem den Zustand {PEND}, welcher aber kein Status im eigentlichen Sinne ist.

Mehr unter xref:monitoring_basics#services[Services.]


[#snapin]
==== Snapin
Snapins, auch Seitenleistenelemente genannt, sind die einzelnen Bausteine, die sich in der Seitenleiste platzieren lassen, beispielsweise [.guihint]#Overview# und [.guihint]#Master control.#
Zugriff auf die Snapins liefert das Plus-Symbol unten in der Seitenleiste.

Mehr unter xref:user_interface#sidebar[Seitenleiste.]


ifdef::onprem[]
[#snmp]
==== SNMP
Das „Simple Network Management Protocol“ dient der Überwachung und Konfiguration von Netzwerkgeräten wie Routern, Switches oder Firewalls.
{CMK} unterstützt dieses Protokoll -- da es aber vergleichsweise ineffizient ist, sollten Sie SNMP nur bei Geräten einsetzen, die keine besseren Möglichkeiten zur Überwachung anbieten, wie beispielsweise Spezialagenten.

Mehr unter xref:snmp#[SNMP.]
endif::[]


[#special_agent]
==== Spezialagent
Auf einigen Systemen lässt sich der reguläre {CMK}-Agent nicht installieren und SNMP steht nicht (befriedigend) zur Verfügung.
Stattdessen bieten diese Systeme Management-APIs, die auf Telnet, SSH oder HTTP/XML basieren.
Über einen Spezialagenten, der auf dem {CMK}-Server läuft, fragt {CMK} diese Schnittstellen ab, womit der Host per API in {CMK} integriert wird.

Mehr unter xref:special_agents#[Spezialagenten.]


[#view]
==== Tabellenansicht
Neben den Dashboards sind die Tabellenansichten (englisch: _views_) die in der {CMK}-Oberfläche am häufigsten genutzten Darstellungen von Hosts, Services und anderen Objekten.
Diese werden als Tabellen mit den im aktuellen Kontext relevanten Attributen angezeigt.
Zum Beispiel sind [.guihint]#All hosts# und [.guihint]#Host problems# Tabellenansichten im Monitoring.
Mitgelieferte Tabellenansichten können in ihrer Anzeige angepasst werden, und sie können als Basis für neue Ansichten dienen. Es ist auch möglich, Tabellenansichten komplett neu zu erstellen.

Mehr unter xref:views#[Ansichten von Hosts und Services (Views).]


[#flapping]
==== Unstetig
Wenn ein Objekt (Host oder Service) in kurzer Zeit mehrfach den Zustand ändert, gilt es als unstetig (englisch: _flapping_) und wird mit dem Symbol icon:icon_flapping[alt="Symbol zur Anzeige des unstetigen Zustands."] markiert.
Für ein unstetiges Objekt wird bei weiteren Zustandswechseln keine Benachrichtigung mehr versendet.
Die Erkennung von Unstetigkeiten (englisch: _flap detection_) kann ab- oder eingeschaltet werden -- global oder per Regel, getrennt für Hosts und Services.  

Mehr unter xref:notifications#flapping[Unstetige Hosts und Services.]


ifdef::onprem[]
[#distributed_monitoring]
==== Verteiltes Monitoring
In einem verteilten Monitoring besteht das gesamte Monitoring-System aus mehreren miteinander verbundenen {CMK}-Instanzen, das heißt einer Zentralinstanz und mindestens einer Remote-Instanz.
Die Daten aller Instanzen werden zusammen an einer Stelle in der Zentrale angezeigt.
Dies nennt man den _zentralen Status_ im verteilten Monitoring.
Ein verteiltes Monitoring kann optional mit einem _zentralen Setup_ kombiniert werden.

Mehr unter xref:distributed_monitoring#[Verteiltes Monitoring.]


[#central_setup]
==== Verteiltes Monitoring mit zentralem Setup
Bei einem _zentralen Setup_ wird die Konfiguration aller im verteilten Monitoring miteinander verbundenen {CMK}-Instanzen an einer einzigen Stelle vorgenommen.
Die Konfiguration wird nur in der Zentralinstanz durchgeführt und dann an alle Remote-Instanzen verteilt.
Ein zentrales Setup beinhaltet immer auch einen _zentralen Status._

Mehr unter xref:distributed_monitoring#central_setup[Zentrales Setup.]
endif::[]


ifdef::onprem[]
[#virtual_appliance]
==== Virtuelle Appliance
Die virtuelle Appliance ist ein für VirtualBox oder VMware ESXi erstelltes System mit einer vorinstallierten, für {CMK} vorbereiteten Firmware.
Sie beinhaltet eine grafischen Konfigurationsoberfläche, die jegliche Linux-Kenntnisse überflüssig macht.

Mehr unter xref:intro_setup#virtual_appliance[Virtuelle Appliance.]
endif::[]


[#scheduled_downtime]
==== Wartungszeit
Wartungszeiten (englisch: _scheduled downtimes_) sind geplante Ausfälle, etwa für Aktualisierungen bestimmter Hosts. Wartungszeiten setzen beispielsweise die Benachrichtigungen temporär außer Kraft, werden bei der Verfügbarkeitsberechnung extra berücksichtigt und sorgen dafür, dass zugehörige Hosts und Services zeitweilig nicht als Probleme auftauchen.

Mehr unter xref:basics_downtimes#[Wartungszeiten.]


ifdef::onprem[]
[#wato]
==== WATO
Das „Web Administration Tool“ war bis zur {CMK}-Version {v16} das GUI-Werkzeug zur Konfiguration von {CMK}.
Mit der Einführung von WATO hatten Benutzer erstmals die Möglichkeit, {CMK} über eine Weboberfläche statt über Konfigurationsdateien anzupassen.
WATO wurde in der Version {v20} ersetzt durch das [.guihint]#Setup#-Menü in der Navigationsleiste.

Mehr unter xref:wato#setup_menu[Setup-Menü.]
endif::[]


[#werk]
==== Werk
Die Software-Entwicklung von {CMK} ist in sogenannten Werks organisiert.
Jede Änderung, Fehlerbehebung oder Neuerung, die einen Einfluss auf die Erfahrung des Benutzers hat, wird in einem eigenen Werk erfasst, samt Hinweisen zu Auswirkungen und etwaigen Inkompatibilitäten.
Die Liste der Werks gibt es direkt in {CMK} über das [.guihint]#Help#-Menü in der Navigationsleiste und auf der {CMK}-Homepage.

Mehr unter link:https://checkmk.com/de/werks[Werks.^]


[#time_period]
==== Zeitperiode
In {CMK} lassen sich Dinge wie Benachrichtigungen, Verfügbarkeitsberechnungen und selbst die generelle Ausführung von Checks auf bestimmte, regelmäßig wiederkehrende Zeiträume beschränken.
Mit Zeitperioden (englisch: _time periods_) lassen sich zum Beispiel tägliche Arbeitszeiten definieren, Urlaube und Feiertage festlegen oder Wochenenden von Wochentagen trennen.
Diese Zeitperioden können anschließend in Regeln genutzt werden.

Mehr unter xref:timeperiods#[Zeitperioden.]
