// -*- coding: utf-8 -*-
// IGNORE kube
include::global_attr.adoc[]
= Prometheus integrieren
:revdate: 2024-04-12
:title: Prometheus integrieren
:description: Prometheus kann in {CMK} integriert werden, um schnelllebige Containerumgebungen zu überwachen.

{related-start}
link:https://checkmk.com/de/integrations[Katalog der Check-Plugins^]
xref:monitoring_kubernetes#[Kubernetes überwachen]
{related-end}


== Einleitung

=== Hintergrund und Motivation

Vielleicht fragen Sie sich, warum man überhaupt Prometheus in {CMK} integrieren sollte.
Deswegen an dieser Stelle ein wichtiger Hinweis:
Unsere Integration von Prometheus richtet sich an alle unsere Nutzer, die Prometheus bereits im Einsatz haben.
Damit Sie nicht dauerhaft zwei Monitoring-Systeme prüfen müssen, schließen wir durch die Integration von Prometheus in {CMK} die hier entstandene Lücke.

Damit ermöglichen wir eine Korrelation der Daten aus den beiden Systemen, beschleunigen eine etwaige Fehlerursachenanalyse und erleichtern gleichzeitig die Kommunikation zwischen {CMK}- und Prometheus-Nutzern.
So bleibt {CMK} ihr "Single pane of glass".


====  Endlich wieder Kontext

Mit der angenehmste Nebeneffekt dieser Integration ist es wohl, dass Ihre Metriken aus Prometheus in {CMK} automatisch einen sinnvollen Kontext erhalten.
Während Prometheus Ihnen beispielsweise die Menge des belegten Hauptspeichers korrekt anzeigt, müssen Sie in {CMK} keine weiteren manuellen Schritte gehen, um zu erfahren, wie groß dabei der Anteil am insgesamt verfügbaren Speicher ist.
So banal das Beispiel sein mag, zeigt es an welchen Stellen {CMK} das Monitoring bereits im ganz Kleinen erleichtert.


===  Exporter oder PromQL

Die Integration der wichtigsten Exporter für Prometheus wird über einen xref:glossar#special_agent[Spezialagenten] zur Verfügung gestellt.
Für Prometheus stehen Ihnen die folgenden Exporter zur Verfügung:

*  link:https://checkmk.com/de/integrations?tags=cadvisor[cAdvisor (Container Advisor)^]
*  link:https://github.com/prometheus/node_exporter/blob/master/README.md[Node Exporter^]

Wenn wir den von Ihnen benötigten Exporter nicht unterstützen, haben erfahrene Nutzer von Prometheus auch die Möglichkeit direkt über {CMK} selbst-definierte Abfragen an Prometheus zu richten.
Dies geschieht in der Prometheus-eigenen xref:promQL[Abfragesprache PromQL.]


== Einrichten der Integration

=== Host anlegen

Da es das Konzept der Hosts in Prometheus schlicht nicht gibt, schaffen Sie zuerst einen Ort, der die gewünschten Metriken sammelt.
Dieser Host bildet die zentrale Anlaufstelle für den Spezialagenten und verteilt die angelieferten Daten dann später an die richtigen Hosts in {CMK}.
Erzeugen Sie dazu einen neuen Host über [.guihint]#Setup > Hosts > Hosts > Add host.#

image::prometheus_hostname.png[]

Sollte der angegebene Host-Name nicht vom {CMK}-Server auflösbar sein, geben Sie hier noch die IP-Adresse an unter der der Prometheus-Server erreichbar ist.

Nehmen Sie alle weiteren Einstellungen Ihrer Umgebung entsprechend vor und bestätigen Sie Ihre Auswahl mit [.guihint]#Save & view folder.#


=== Regel für Prometheus anlegen

Bevor {CMK} Ihre Metriken aus Prometheus finden kann, müssen Sie zuerst noch den Spezialagenten über den Regelsatz [.guihint]#Prometheus# einrichten.
Diesen finden Sie über [.guihint]#Setup > Agents > VM, cloud, container.#
Unabhängig davon, welchen Exporter Sie verwenden wollen, gibt es verschiedene Möglichkeiten, die Verbindung zu dem Web Frontend Ihres Prometheus-Servers anzupassen.

* [.guihint]#URL server address#:
Geben Sie hier die URL Ihres Prometheus-Servers an, einschließlich aller erforderlichen Ports.
Das Protokoll können Sie weiter unten auswählen.

* [.guihint]#Authentication#:
Ist ein Login erforderlich, geben Sie die Zugangsdaten hier an.

* [.guihint]#Protocol#:
Nach der Installation wird das Web Frontend per HTTP zur Verfügung gestellt.
Sofern Sie den Zugriff mit HTTPS abgesichert haben, stellen Sie hier das Protokoll entsprechend um.

Die Standardwerte sehen Sie in folgendem Screenshot:

image::prometheus_connection_details.png[]


[#node_exporter]
==== Integration per Node Exporter

Wenn Sie nun beispielsweise die Hardware-Komponenten eines sogenannten [.guihint]#Scrape Targets# aus Prometheus integrieren möchten, nutzen Sie dafür den Node Exporter.
Wählen Sie nun [.guihint]#Add new Scrape Target# und danach im ersten Drop-down-Menü [.guihint]#Node Exporter# aus:

image::prometheus_ruleset_exporter.png[]

Hier können Sie auswählen, welche Hardware oder welche Betriebssystem-Instanzen vom Node Exporter abgefragt werden sollen.
// MFS: Meint Hardware hier physikalische Maschinen? Also Wirtssysteme?
Sie haben immer die Option, Informationen abzuwählen, wenn Sie diese nicht abrufen wollen.
Die erzeugten Services benutzen dann dieselben Check-Plugins, wie sie auch für andere Linux-Hosts verwendet werden.
Dadurch sind sie in ihrem Verhalten identisch zu den bekannten und Sie können ohne große Umstellung Schwellwerte konfigurieren oder mit den Graphen arbeiten.

Normalerweise wird der Agent versuchen, die Daten automatisch den Hosts in {CMK} zuzuordnen.
So auch für den Host in {CMK}, der die Daten holt.
Sollte in den Daten des Prometheus-Servers aber weder die IP-Adresse, der FQDN, noch localhost vorkommen,
bestimmen Sie über die Option [.guihint]#Explicitly map Node Exporter host#, welcher Host aus den Daten des Prometheus-Servers dem Prometheus-Host in {CMK} zugeordnet wird.


[#cadvisor]
==== Integration per cAdvisor

Der Exporter cAdvisor erlaubt die Überwachung von Docker-Umgebungen und liefert dabei Metriken zurück.

Über das Menü [.guihint]#Entity level used to create {CMK} piggyback hosts# können Sie festlegen, ob und wie die Daten aus Prometheus schon aggregiert abgeholt werden sollen.
Ihnen stehen dabei die folgenden drei Optionen zur Auswahl:

* [.guihint]#Container - Display the information on container level#
* [.guihint]#Pod - Display the information for pod level#
* [.guihint]#Both - Display the information for both, pod and container, levels#

Wählen Sie hierbei entweder [.guihint]#Both# oder [.guihint]#Container# aus, legen Sie außerdem noch fest, unter welchem Namen Hosts für Ihre Container angelegt
werden. Die folgenden drei Option stehen Ihnen für die Benamsung zur
Verfügung. Die Option [.guihint]#Short# ist hierbei der Standard:

* [.guihint]#Short - Use the first 12 characters of the docker container ID#
* [.guihint]#Long - Use the full docker container ID#
* [.guihint]#Name - Use the name of the container#
// TK: Hier werden in 2 Listen einfach die GUI Strings abgeschrieben: Das ist nicht wirklich hilfreich.

image::prometheus_cadvisor_names.png[]

Beachten Sie, dass die Auswahl an dieser Stelle Auswirkungen auf das automatische Anlegen und Löschen von Hosts entsprechend Ihrer xref:dcd_cadvisor[dynamischen Host-Verwaltung] hat.

Mit [.guihint]#Monitor namespaces matching# haben Sie die Möglichkeit, die Anzahl der überwachten Objekte einzuschränken.
Alle Namespaces, die nicht von den regulären Ausdrücken erfasst werden, werden dann ignoriert.


[#promQL]
==== Integration per PromQL

Wie bereits erwähnt, ist es mit Hilfe des Spezialagenten auch möglich, Ihren Prometheus-Server über PromQL abzufragen.
Wählen Sie [.guihint]#Service creation using PromQL queries > Add new Service# aus.
Mit dem Feld [.guihint]#Service name# bestimmten Sie, wie der neue Service in {CMK} heißen soll.

Wählen Sie dann [.guihint]#Add new PromQL query# und legen Sie über das Feld [.guihint]#Metric label# fest, wie die zu importierende Metrik in {CMK} heißen soll.
// TK: Hier folgt die Option Metric, die es mit einer seeeehr langen Liste von Metriken in sich hat: KNW-1027
In das Feld [.guihint]#PromQL query# geben Sie nun Ihre Abfrage ein.
Dabei ist es wichtig, dass diese Abfrage nur *einen* Rückgabewert haben darf.

image::prometheus_ruleset_promql.png[]

In diesem Beispiel wird Prometheus nach der Anzahl der laufenden und blockierten Prozesse gefragt.
In {CMK} werden diese dann in einem Service mit dem Namen [.guihint]#Processes# und den beiden Metriken [.guihint]#Running# und [.guihint]#Blocked# zusammengefasst.

Sie können diesen Metriken auch Schwellwerte zuweisen.
Aktivieren Sie dafür die [.guihint]#Metric levels# und wählen Sie danach zwischen [.guihint]#Lower levels# oder [.guihint]#Upper levels#.
Beachten Sie, dass sie zwar immer Gleitkommazahlen angeben, diese sich aber natürlich auch auf Metriken beziehen, welche nur Ganzzahlen zurückgeben.
// MFS: ...diese aber natürlich auch auf Metriken angewandt werden, die...


==== Regel dem Prometheus-Host zuweisen

Weisen Sie zum Schluss diese Regel explizit dem soeben angelegten Host zu und bestätigen Sie mit [.guihint]#Save.#

image::prometheus_ruleset_explicit_host.png[]


=== Service-Erkennung

Nachdem Sie den Spezialagenten nun konfiguriert haben, ist es Zeit, eine xref:glossar#service_discovery[Service-Erkennung] auf dem Prometheus-Host durchzuführen.

image::prometheus_discovery.png[]


[#dcd]
== Dynamische Host-Verwaltung

=== Generelle Konfiguration

ifdef::onprem[]
{cee-only}
endif::[]
Die Überwachung von Kubernetes Clustern ist vermutlich eine der Aufgaben, die am häufigsten mit Prometheus bewerkstelligt wird.
ifdef::onprem[]
Um eine Integration der mitunter sehr kurzlebigen Container, die per Kubernetes orchestriert und mit Prometheus überwacht werden, auch in {CMK} ohne großen Aufwand zu gewährleisten,
bietet sich in den kommerziellen Editionen die Einrichtung einer xref:dcd#[dynamischen Host-Verwaltung] an.
endif::[]
ifdef::saas[]
Um eine Integration der mitunter sehr kurzlebigen Container, die per Kubernetes orchestriert und mit Prometheus überwacht werden, auch in {CMK} ohne großen Aufwand zu gewährleisten,
bietet sich die Einrichtung einer xref:dcd#[dynamischen Host-Verwaltung] an.
endif::[]
Die Daten der einzelnen Container werden dabei als xref:glossar#piggyback[Piggyback]-Daten an {CMK} weitergeleitet.

Legen Sie nun über [.guihint]#Setup > Hosts > Hosts > Dynamic host management > Add connection# eine neue Verbindung an, wählen als Sie als Verbindungstyp [.guihint]#Piggyback data# und legen Sie über [.guihint]#Add new element# die Bedingungen fest, unter denen neue Hosts dynamisch erstellt werden sollen.

Überlegen Sie auch, ob es für Ihre Umgebung notwendig ist, Hosts auch wieder dynamisch zu löschen, wenn keine Daten mehr über den Piggyback-Mechanismus bei {CMK} ankommen.
Stellen Sie die Option [.guihint]#Delete vanished hosts# entsprechend ein.


[#dcd_cadvisor]
=== Besonderheit im Zusammenspiel mit cAdvisor

Normalerweise bekommen Container eine neue ID, wenn sie neu gestartet werden.
In {CMK} werden die Metriken des Hosts mit der alten ID nicht automatisch auf die neue ID übertragen.
Das würde in den meisten Fällen auch gar keinen Sinn ergeben.
Im Falle von Containern kann das aber durchaus nützlich sein, wie in dem Beispiel eben gesehen.
// TK: 1. Was zuerst keinen Sinn ergibt, kann dann sehr nützlich sein? Versteh ich nicht.
// TK: 2: "wie in dem Beispiel eben gesehen": Welches Beispiel?

Wenn Container nur neu gestartet werden, möchten Sie sehr wahrscheinlich deren Historie nicht verlieren.
Um das zu erreichen, legen Sie die Container nicht unter ihren IDs, sondern stattdessen unter ihren Namen an -- mit der Option [.guihint]#Name - Use the name of the container# in der xref:cadvisor[Prometheus-Regel.]


Auf diese Weise können Sie nicht mehr vorhandene Container dennoch mit der Option [.guihint]#Delete vanished hosts# in der dynamischen Host-Verwaltung löschen,
ohne befürchten zu müssen, dass die Historie damit auch verloren ist.
Stattdessen wird diese -- durch den identischen Namen des Containers -- fortgeführt, auch wenn es sich um einen anderen Container handelt, der aber denselben Namen hat.
// TK: Und das ist jetzt gut, dass die Historie für verschiedene Container mit gleichem Namen fortgeführt wird?
