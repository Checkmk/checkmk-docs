// -*- coding: utf-8 -*-
// IGNORE
include::global_attr.adoc[]
= Windows services
:revdate: 2024-08-29
:title: Monitor Windows services
:description: By default, Checkmk does not monitor any services on your Windows hosts. This is simply because Checkmk does not know which services are important to you. Use the Windows service discovery rule to tell the service discovery which Windows services are to be monitored.


[#windows_service_discovery]
== Find Windows services

****
*Please note* the process discovery described below is operating system independent. You can proceed in the same way for Linux processes.
****

With the following example rule {CMK} will search Windows services for the Windows event log and DHCP client and then create a separate Checkmk service for each of these Windows services:

++++1. Click *Setup > Services > Discovery rules > Windows service discovery* and then click *link:wato.py?filled_in=new_rule&ruleset_back_mode=rulesets&rule_folder=&varname=inventory_services_rules&mode=new_rule&folder=&_new_dflt_rule=SET["Add rule", window=main]*.

++++2. In the *Windows service discovery* box, check *Services (Regular Expressions)*.

++++3. In the input field enter `EventLog.\*` and `Dhcp.*` in the next input field that opens.

Inputs are case-sensitive.

image::onboarding_adjust_services_windows_step1.png[alt="Find Windows services"]

++++4. Leave the *Create check* boxes untouched in this rule.

++++5. In the *Conditions* box, assign this rule to the Windows host on which you want to monitor these services.

++++6. Click *Save*.

This completes the definition of _what_.


[#service_discovery]
== Run a service discovery

++++1. Click *Setup > Hosts > link:wato.py?mode=folder["Hosts", window=main]*.

++++2. In the *Hosts* table, click the name of the Windows host to which you assigned the rule in the first step.
This opens the *Properties of host* page.

++++3. Click *Save & run service discovery*.

image::onboarding_adjust_services_windows_step2.png[alt="Run service discovery"]

You will find new Checkmk services in the *Undecided services - currently not monitored* table with the names *Service Dhcp* and *Service EventLog*.

++++4. Click *Accept all*.


[#state_and_count]
== Evaluate Windows services

In order to define _how_ the services on your Windows host should be monitored, you can use the *Windows services* rule.
A change made with this rule will be valid even without a new service discovery.

In this step, you will match Windows service state (running, stopped) and start type (auto, demand) to a Checkmk state (OK, WARN, CRIT):

++++1. Click *Setup > Services > Service monitoring rules > Windows Services* and then click *link:wato.py?filled_in=new_rule&ruleset_back_mode=rulesets&rule_folder=&varname=checkgroup_parameters%3Aservices&mode=new_rule&folder=&_new_dflt_rule=SET["Add rule", window=main]*.

++++2. In the *Value* box, check *Services states*.

++++3. Click *Add new element* and set *Expected state* to *running*, *Start type* to *auto* and *Resulting state* to *OK*.

++++4. Click again *Add new element* and set *Expected state* to *running*, *Start type* to *demand* and *Resulting state* to *WARN*.

++++5. Click the last time *Add new element* and set *Expected state* to *stopped*, *Start type* to *auto* and *Resulting state* to *CRIT*.

image::onboarding_adjust_services_windows_step3.png[alt="Match Windows service state with and start type to Checkmk state"]

++++6. In the *Conditions* box, assign this rule again to the Windows host on which you want to monitor the services.

++++7. Click *Save*.


[#activate_changes]
== Activate changes

++++1. Click this link *link:wato.py?mode=changelog["Activate pending changes", window=main]*

This opens the activate changes page.

++++2. Click *Activate on selected sites*.

image::onboarding_activate_changes.png[alt="Activate changes"]

This step concludes the Monitor Windows services topic.
// TK: No User Guide link for this topic, as this section is not providing additional information:
// https://docs.checkmk.com/saas/en/wato_services.html#_monitoring_services_under_windows
