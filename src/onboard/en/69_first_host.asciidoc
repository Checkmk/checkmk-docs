// -*- coding: utf-8 -*-
// IGNORE
include::global_attr.adoc[]
= Add your first host to your monitoring
:revdate: 2024-04-22
:title: Add your first host to your monitoring
:description: So you want to monitor your first host? What could be more obvious than to monitor the host this Checkmk site is running on. Let's do this!

[#intro]
== Introduction

The most important task when setting up a monitoring tool is to manage the systems to be monitored -- the xref:glossar#host[_hosts_].
This is not just a matter of ensuring that they are entered with the correct master data (e.g. host name, IP address).
Settings for the monitoring (e.g. notifications, thresholds, etc.) also require regular maintenance.

{CMK} was designed from the beginning for environments with very many hosts.
To make the configuration of such environments manageable for the user, {CMK} follows a very own approach.
The main {CMK} principles are:

* A xref:folder[hierarchy of folders] in which hosts are stored.
* xref:glossar#host_tag[Host tags] and a xref:wato_rules#[rule-based] configuration derived from the tags.
* Automatic detection of the xref:wato_services#[services to be monitored].

In general, it has proven useful to think about an ordering system first and then fill it with content.
To learn about the possibilities {CMK} offers to bring order to your hosts, see the article on xref:hosts_structure#[structuring hosts].


[#folder]
== Folders and inheritance

Everyone who works with computers knows the principle of files and folders.
{CMK} uses an analogous principle for the administration of the hosts, which effectively take over the role of the files.
Since folders can themselves be contained in folders, the result appears as a tree structure.


=== Folder hierarchy

The user is completely free in the design of their own tree structure. Any form of differentiation is possible.
However, there are three common criteria for the structure of the host tree:

* *Location* (e.g. Munich versus Shanghai)
* *Host type* (e.g. switch versus load balancer)
* *Organization structure* (e.g. database versus network groups)

The criteria can of course be mixed, split by location in the first level of the tree and then by host type in the second for example.

If you like simplicity, you should put hosts only in the 'leaves' of the tree (even if {CMK} allows hosts in middle folders).
The following example shows a simple tree structure by host type:
Hosts A, B, and C are placed in the Servers folder, and D, E, and F are placed in the Network folder:

image::wato_folders_step_2.png[alt="Illustration of a folder structure with two subfolders.",width=430px]


[#inheritance]
=== Inheriting attributes

If you build the tree cleverly, you can use it to inherit attributes in a meaningful way.
This is especially useful for those attributes that are common to large groups of hosts, such as the SNMP community or host tags that you use to determine whether the host should be monitored by a {CMK} agent or by SNMP.

The following example shows the inheritance of the tag groups 'Criticality' (with the values `prod` and `test`) and 'Checkmk agent / API integrations' (with the values `tcp` and `no-agent`).
The `tcp` auxiliary tag is automatically set when the {CMK} agent and/or an API integration is selected, while `no-agent` is the option of choice when monitoring via SNMP.

image::wato_folders_step_4.png[alt="Illustration of a folder structure with attributes assigned at different levels.",width=500px]

Attributes defined further down the tree always take precedence.
So values defined directly at the host override anything coming from the folders.
In the above example, this results in `prod` and `tcp` for host A, `prod` and `no-agent` for D, and `test` and `no-agent` for host F because of the explicitly assigned attribute.

A major advantage of this scheme over the widely used 'copy & paste' approach of database-oriented configuration systems is that any specified attributes will be received by *hosts added in the future*.
This makes work easier for you and your colleagues:
Just drop a new host into the appropriate folder and all the predefined attributes will automatically be correct.


[#create_folders]
=== Creating folders

How to create folders is explained in the xref:intro_setup_monitor#create_folders[Beginner's Guide].


[#create_hosts]
== Creating and editing hosts in the Setup menu

To manage folders and hosts, go to [.guihint]#Setup > Hosts > Hosts:#

image::hosts_main_directory.png[alt="Folder view 'Main' with multiple subfolders."]

Here in the default view you can see an (initially empty) overview of the folders and below these, in tabular form, the hosts already present in the current folder.
Creating a new host with the icon:icon_new[] [.guihint]#Add host# action button, the icon:icon_clone[alt="Icon to clone a list entry."] clone or the icon:icon_edit[alt="Icon to edit a list entry."] edit of an existing host will bring you to the [.guihint]#Properties of host# page.
This lists the attributes of the host.
These attributes are grouped into several sections, the most important of which we present here.

[#host_name]
=== The host name

The [.guihint]#Hostname# field is used everywhere within {CMK} to uniquely identify the host.
Whenever possible, you should use the host's DNS name.
If the DNS name is too bulky, an easier to recognize alias name can be assigned later.
Please note, however, that {CMK} allows a maximum length of 253 characters for the host name.

image::hosts_new_host_1.png[alt="Dialog with host properties: the host name."]

xref:rename[Changes to the host name] are in principle also later possible, however since the host name is used in many places in {CMK}, later changes are more complex and time-consuming when monitoring data has already been accumulated by the time the change is to made.


[#dns]
=== Alias and IP address

You can assign an alternative, descriptive name for the host under [.guihint]#Alias#, which is displayed in many places in the GUI and in reports.
If you do not assign an alias, the host name will be used instead.

image::hosts_new_host_2.png[alt="Dialog with properties of a host: alias and IP address."]

You do not necessarily have to specify an IP address.
Four options are available for configuring the IP address, which also determine when the name is resolved:

[cols="5,65,~",options="header"]
|===
|Option |Procedure |When to perform name resolution?
|1. |You do _not_ specify an IP address. The host name must be resolvable by DNS. |At xref:wato#activate_changes[activating the changes].
|2. |You enter an IPv4 address -- in the usual dot notation. |Never
|3. |Instead of an IP address, you enter an (alternative) host name which is resolvable by DNS. |When running the checks
|4. |Use the [.guihint]#Hosts with dynamic DNS lookup during monitoring# xref:wato_rules#[rule set] to specify hosts for a dynamic DNS. The result is analogous to option 3, except that the [.guihint]#Hostname# field is now used for the DNS query. 
|When running the checks
|===

With the first option {CMK} uses a cache file to avoid repeated DNS requests during the activation of the changes.
This cache is very important for speeding up the process, and it also ensures that you can activate a changed configuration even if the DNS fails in an attempt.
