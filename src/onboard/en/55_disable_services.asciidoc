// -*- coding: utf-8 -*-
// IGNORE
include::global_attr.adoc[]
= Disable services
:revdate: 2024-07-22
:title: Disable services
:description: You will not necessarily want to monitor everything that Checkmk finds. By disabling services you can exclude services from the monitoring that are not of interest to you.


[#service_discovery]
== Run a service discovery

++++1. Click *Setup > Hosts > link:/pass:[$$SITE_NAME$$]/check_mk/index.py?start_url=%2Fpass:[$$SITE_NAME$$]%2Fcheck_mk%2Fwato.py%3Fmode%3Dfolder[Hosts]*.

++++2. In the *Hosts* table, click the name of a host to open the *Properties of host* page.

++++3. Click *Save & run service discovery* to open the *Services of host* page.

All the services currently being monitored are displayed in the *Monitored services* table.


[#disable_click]
== Disable by mouse click

++++1. In the row of the service you want to disable, click the red button with the cross.

The service will be removed from the *Monitored services* table.

Disabling services manually is intended for temporary and smaller actions only.
That would simply be too much work and not really practical in an environment with x-thousand services.


[#disable_rule]
== Disable by rule

It is far more elegant and enduring to permanently remove services with the aid of the *Disabled services* rule.
With this rule you can implement a statement like 'I do not want to monitor services beginning with `myservice` on the `myserver01` host.':

++++1. Click *Setup > Services > Discovery rules > link:/pass:[$$SITE_NAME$$]/check_mk/index.py?start_url=%2Fpass:[$$SITE_NAME$$]%2Fcheck_mk%2Fwato.py%3Fback_mode%3Drulesets%26mode%3Dedit_ruleset%26search_p_ruleset_deprecated%3D60a33e6cf5151f2d52eddae9685cfa270426aa89d8dbc7dfb854606f1d1a40fe%26search_p_ruleset_deprecated_USE%3Don%26search_p_ruleset_group%3D5a81e1f359fb991fc16c855209aca7dc472a8517ee12d418c001a94c69eec5a7%26search_p_ruleset_group_USE%3Don%26varname%3Dignored_services[Disabled services]*.

If you disabled a service with a mouse click in the previous step, you will see the corresponding rule on the *Disabled services* page, because Checkmk converts your mouse click internally into a *Disabled services* rule.

++++2. Click *link:/pass:[$$SITE_NAME$$]/check_mk/index.py?start_url=%2Fpass:[$$SITE_NAME$$]%2Fcheck_mk%2Fwato.py%3Fcsrf_token%3D93f2d8c5-c8b1-4a29-b3ae-91ceee004bc2%26filled_in%3Dnew_rule%26ruleset_back_mode%3Drulesets%26rule_folder%3D%26varname%3Dignored_services%26mode%3Dnew_rule%26folder%3D%26_new_dflt_rule%3DSET[Add rule]*.

++++3. In the *Conditions* box, check *Explicit hosts* and select the *myserver01* host.

++++4. Check *Services* and in the input field enter `myservice.*`.

++++5. Click *Save*.


[#enable]
== Enable services again

On the *Services of host* page, where the service discovery results are displayed, the disabled services are collected in a separate *Disabled Services* table at the bottom of the page.
Here you will find all disabled services, regardless of whether they were disabled by mouse click or by rule.

++++1. In the row of the service you want to enable, click the green button with the plus sign.

The service will be moved from the *Disabled Services* to the *Monitored services* table again.


[#activate_changes]
== Activate changes

++++1. Click the yellow button on the top right of each configuration environment page with the number of pending changes that are not yet activated:

image::onboarding_button_pending_changes.png[alt="Button on 'Setup' pages with number of pending changes."]

This opens the *link:/pass:[$$SITE_NAME$$]/check_mk/index.py?start_url=%2Fpass:[$$SITE_NAME$$]%2Fcheck_mk%2Fwato.py%3Fmode%3Dchangelog[Activate pending changes]* page.

++++2. Click *Activate on selected sites*.

This step concludes the Disable services topic.
// TK: No User Guide link for this topic, as this section is not providing additional information:
// https://docs.checkmk.com/master/en/wato_services.html#remove_unwanted_services
