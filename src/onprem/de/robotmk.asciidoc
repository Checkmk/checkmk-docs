// -*- coding: utf-8 -*-
// IGNORE + MyApp1 MyApplication_mybot mybot × →
// NONASCII →
include::global_attr.adoc[]
= Checkmk Synthetic Monitoring mit Robotmk
:revdate: draft
:title: Checkmk Synthetic Monitoring
:description: Checkmk Synthetic Monitoring integriert Software-Tests auf Basis von Robot Framework ins Monitoring

{related-start}
xref:wato_monitoringagents#[Monitoring-Agenten]
xref:agent_deployment#[Automatische Agenten-Updates]
{related-end}


[#intro]
== Synthetisches Monitoring mit Robot Framework

{cee-only} {CMK} Synthetic Monitoring ist in den kommerziellen {CMK}-Editionen verfügbar, benötigt jedoch eine link:https://checkmk.com/request-quote/synthetic-monitoring[zusätzliche Subskription.^]
Sie können die Funktion allerdings mit bis zu drei Tests kostenlos und ohne Zeitbegrenzung testen.

Mit {CMK} können Sie Ihre eigene Infrastruktur sehr genau überwachen -- bis hin zur Frage, ob ein bestimmter Service, beispielsweise ein Webserver, ordentlich läuft.
Wird Ihre Webseite über einen Cloud-Service von Dritten betrieben, werden Sie keinen Zugriff auf den Service selbst haben, können aber über einen HTTP-Check prüfen, ob die Webseite erreichbar ist.
Aber was sagt das über die Nutzererfahrung aus? Dass ein Online-Shop erreichbar ist, heißt ja noch nicht, dass die Navigation, Bestellprozesse und dergleichen reibungslos funktionieren.

An dieser Stelle setzt das {CMK} Synthetic Monitoring an.
Mit dem Plugin Robotmk bietet {CMK} echtes End-to-End-Monitoring, also die Überwachung laufender Anwendungen aus Sicht der Nutzer.
Das eigentliche Testen übernimmt dabei die Open-Source-Software link:https://robotframework.org/[Robot Framework^] -- in deren Trägerverein auch die {comfull} Mitglied ist.

Mit der Automationssoftware lässt sich Nutzerverhalten komplett automatisieren, um beispielsweise Bestellprozesse in Online-Shops Klick für Klick nachzustellen.
Das Besondere an Robot Framework: Tests werden nicht in einer vollwertigen Programmiersprache geschrieben, sondern über einfach zu verwendende Keywords definiert, wie `Open Browser` oder `Click Button`.
// MFS: Low-Code entfernt, weil hier die grafische Komponente fehlt.
So genügt ein `Open Browser checkmk.com` zum Aufrufen der {CMK}-Webseite.
Mehrere Testfälle werden dann in so genannten Test-Suites zusammengefasst (in Form einer `.robot`-Datei).

Robotmk kann nun diese Robot-Framework-Test-Suites auf dem Host triggern und ihre Ausführung und Resultate als Services in {CMK} überwachen.
In der {CMK}-Weboberfläche finden Sie dann Status, zugehörige Performance-Graphen sowie die Original-Auswertungen von Robot Framework selbst.

=== Komponenten
Für dieses End-to-End-Monitoring spielen allerhand Komponenten zusammen, daher hier ein kurzer Überblick.

==== {CMK}-Server
{CMK} Synthetic Monitoring wird über Robotmk realisiert, das ein Agentenplugin als Datensammler nutzt und den Robotmk-Scheduler (auf dem überwachten Host) für das Triggern von Robot-Framework-Projekten.
Aktiviert und konfiguriert wird das synthetische Monitoring über die Regel [.guihint]#Robotmk Scheduler#.
Hier legen Sie fest, welche Test-Suites ausgeführt werden sollen und wie exakt Robot Framework diese starten soll -- zusammengefasst in einem _Plan._
Einmal ausgerollt, sorgt der Robotmk-Scheduler auf dem Ziel-Host für die planmäßige Ausführung Ihrer Robot-Framework-Suites.

Im Monitoring bekommen Sie letztlich mehrere neue Services: [.guihint]#RMK Scheduler Status# zeigt den Status des Schedulers selbst, also ob Test-Suites erfolgreich gestartet werden konnten.
Hinzu kommen Services für alle konfigurierten Test-Pläne (etwa [.guihint]#RMK MyApp1 Plan#) und einzelnen Tests aus Test-Suites (etwa [.guihint]#RMK MyApp1 Test#).
Zu den Services der einzelnen Tests gehören auch die originalen Robot-Framework-Berichte.

Zu guter Letzt gibt es noch zwei optionale Service-Regeln: [.guihint]#Robotmk plan# und [.guihint]#Robotmk test# sorgen für die Feineinstellung der Plan- und Test-Services -- beispielsweise um Statuswechsel bei bestimmten Laufzeiten zu erwirken.

.Die Robotmk-Regeln in {CMK}
image::robotmk_services_menu.png[alt="Robotmk-Regeln im Setup-Menü."]

==== Testing-Host
Die Robot-Framework-Test-Suites müssen Sie auf einem *Windows-Host* bereit stellen.
Für die Ausführung benötigt Robot Framework Zugriff auf deren Abhängigkeiten (Python, Bibliotheken, Treiber für die Browser-Automation und so weiter).
Diese Konfiguration ist unabhängig von {CMK} und kann deklarativ in einem portablen Paket abgelegt werden.
Dies übernimmt das quelloffene Kommandozeilen-Werkzeug link:https://github.com/robocorp/rcc[RCC:^] 
Dieses baut anhand Ihrer Konfigurationsdateien im YAML-Format virtuelle Python-Umgebungen samt Abhängigkeiten und Robot Framework selbst.
Der als Hintergrundprozess laufende Robotmk-Scheduler stößt diesen Bau an und sorgt anschließend selbst für die Ausführung der Tests.

Ein solches _RCC-Automationspaket_ mit der Paketkonfiguration (`robot.yaml`), der Definition der Ausführungsumgebung (`conda.yaml`) und den Test-Suites (`tests.robot`) wird auch _Robot_ genannt.
RCC und der Scheduler werden mit dem {CMK}-Agenten ausgerollt, das Automationspaket muss auf dem Host bereitstehen.

Der große Vorteil von RCC: Der ausführende Windows-Host selbst benötigt keine konfigurierte Python-Umgebung.

Der Agent selbst wird nur für die Übertragung von Ergebnissen, Protokollen und Screenshots benötigt.
Dies ermöglicht auch die Überwachung sehr lange laufender oder lokal sehr ressourcenintensiver Suites – vorausgesetzt, Ihr Windows-Host verfügt über entsprechende Kapazitäten.

[#ruleconfig]
== Test-Suites überwachen mit Robotmk
Im Folgenden zeigen wir, wie Sie eine Test-Test-Suite ins Monitoring aufnehmen und überwachen.
Als Beispiel dient dazu eine simple Hello-World-Suite, die lediglich zwei Strings ausgibt und dazwischen kurz wartet.
Eine Einführung in Robot Framework ist hier freilich nicht das Thema, ein kurzer Blick in das Automationspaket und die Demo-Test-Suite muss aber sein, damit Sie sehen, welche Daten wo im Monitoring landen.

Das Beispiel läuft auf Basis von RCC, so dass der Windows-Host nicht extra konfiguriert werden muss.
Die `rcc.exe` wird mit dem Agenten ausgerollt und findet sich unter `C:\ProgramData\checkmk\agent\bin\`.
Die Beispiel-Suite können Sie als ZIP-Datei link:https://github.com/Checkmk/robotmk-examples/blob/main/templates/minimal.zip[über GitHub herunterladen.^]
Das Verzeichnis der Suite:

.C:\robots\mybot\
[{file}]
----
conda.yaml
robot.yaml
tests.robot
----

[TIP]
====
*Wichtig:* RCC kann grundsätzlich auch Test-Suites auf Basis etlicher anderer Programmiersprachen verarbeiten, für den Einsatz in {CMK} muss es aber die Deklaration nach Robot Framework sein.
====

Der Suite-Ordner beinhaltet nun zwei wichtige Dateien: Die Deklaration der für die Ausführung benötigten Umgebung in der Datei `conda.yaml` und die eigentlichen Tests in der Datei `tests.robot` (die Suite).
Die `robot.yaml` ist für den Einsatz in {CMK} nicht relevant, wird aber von RCC benötigt.

// ML: Begin new part for translation
Der Vollständigkeit halber, hier ein kurzer Blick in die `robot.yaml`:

.C:\robots\mybot\robot.yaml
[{file}]
----
tasks:
  task1:
    # (task definitions are not required by Robotmk,
    but expected by RCC to be compatible with other Robocorp features)
    shell: echo "nothing to do"

environmentConfigs:
  - conda.yaml

artifactsDir: output 

----

Zu Beginn legt `tasks` fest, welche Aufgaben, sprich Tests, überhaupt ausgeführt werden sollen.
Allerdings wird dieser Part zwar von RCC formal vorausgesetzt, von Robotmk jedoch nicht benötigt.

[TIP]
====
*Wichtig:* Robot Framework unterscheidet zwischen Tests und Tasks, die für Automatisierungen stehen.
Allerdings werden beide exakt gleich verwendet.
====

Im Bereich `environmentConfigs` wird dann lediglich auf die `conda.yaml` verwiesen, die sich um die eigentliche Umgebung kümmert.

// ML: End new part for translation

Für die Umgebung werden in diesem Fall lediglich die Abhängigkeiten Python, Pip und Robot Framework installiert.
Im Monitoring taucht der Umgebungsbau später als [.guihint]#RCC environment build status# auf.
Nur wenn die Umgebung erfolgreich gebaut wird, können auch die Tests abgearbeitet und folglich überwacht werden.

.C:\robots\mybot\conda.yaml
[{file}]
----
channels:
  - conda-forge

dependencies:
  - python=3.10.12
  - pip=23.2.1
  - pip:
     - robotframework==7.0
----

Die eigentliche Test-Suite sieht nun wie folgt aus:

.C:\robots\mybot\tests.robot
[{file}]
----
*** Settings ***
Documentation       Template robot main suite.

*** Variables ***
${MYVAR}    Hello Checkmk!

*** Test Cases ***
My Test
    Log      ${MYVAR}
    Sleep    3
    Log      Done.

----

Hier wird also lediglich der Wert der Variablen `MYVAR` ausgegeben, dann 3 Sekunden gewartet und abschließend `Done` ausgegeben.
Den Wert der Variablen können Sie später in der {CMK}-Weboberfläche setzen -- ansonsten wird der hier gesetzte Standard `Hello Checkmk!` genutzt.

[TIP]
====
Sie können diese Test-Suite manuell ausführen.
Dafür muss der Agent samt RCC bereits installiert sein (oder Sie laden die RCC-Binary selbst herunter).
Navigieren Sie zunächst in Ihren Test-Suite-Ordner, in dem auch die `tests.robot` liegt.
Starten Sie dann die RCC-Shell mit `C:\ProgramData\checkmk\agent\bin\rcc.exe task shell`.
Daraufhin wird die in der `conda.yaml` definierte virtuelle Umgebung gebaut.
Anschließend starten die Suite mit `robot tests.robot`.
====

Und genau diese Ausführung übernimmt der Robotmk-Scheduler, sobald das Agentenplugin aktiv ist.

[#agentconfig]
=== Regel für das Agentenplugin konfigurieren
Den Robotmk-Scheduler finden Sie unter [.guihint]#Setup > Agent rules > Robotmk scheduler (Windows).#
Da die Regel recht umfangreich ist, hier zunächst ein Blick auf die noch leere Konfiguration:

.Konfiguration des Agentenplugins
image::robotmk_scheduler_00.png[alt="Leere Robotmk-Scheduler-Regel."]

Zunächst benötigt der Scheduler die Angabe des Basisverzeichnisses, in dem all Ihre Test-Suites liegen.
Tragen Sie diesen beliebigen, absoluten Pfad unter [.guihint]#Base directory of suites# ein, beispielsweise `C:\robots`.

.Basisverzeichnis für alle Robot-Framework-Projekte
image::robotmk_scheduler_01.png[alt="Pfad für Test-Suites."]

Mit [.guihint]#Parallel plan groups# folgt nun ein {CMK}-eigenes Konzept.

Zur Erklärung müssen wir zunächst eine Hierarchieebene tiefer gehen: Hier sehen Sie den Punkt [.guihint]#Sequential plans.#
Ein solcher sequenzieller Plan legt fest, welche Suites mit welchen Parametern ausgeführt werden sollen.
Und Robot Framework arbeitet diese Suites dann nacheinander ab.
Der Grund ist simpel: In der Praxis geht es manchmal um Tests, die auf dem Desktop ausgeführt werden und da könnten sich mehrere Test-Suites gleichzeitig in die Quere kommen (sich gegenseitig "die Maus klauen").

Die Plangruppen sind nun eine Kapselung für sequenziell ausgeführte Pläne -- und werden selbst parallel ausgeführt.
Auch hier ist der Grund simpel: So können Test-Suites, die eben nicht auf den Desktop angewiesen sind, ohne Verzögerung in eigenen Plänen ausgeführt werden -- wie zum Beispiel die hier im Artikel eingesetzte Test-Suite.

Wieder zurück zum Dialog: Die einzige explizite Einstellung ist das Ausführungsintervall, das Sie unter [.guihint]#Group execution interval# setzen.

.Intervall für die (parallele) Ausführung von Plangruppen
image::robotmk_scheduler_02.png[alt="Ausführungsintervall für Ausführungsgruppen."]

[TIP]
====
*Achtung:* Die Pläne in der Plangruppe haben natürlich selbst eine gewisse Laufzeit, bestimmt durch den Timeout einer einzelnen Ausführung und die maximale Anzahl wiederholter Ausführungen im Falle fehlgeschlagener Tests. 
Das Ausführungsintervall der Plangruppe muss folglich größer sein als die Summe der maximalen Laufzeiten aller Pläne in der Gruppe.
Die maximale Laufzeit eines Plans berechnet sich wie folgt: [.guihint]#Limit per attempt# × (1 + [.guihint]#Maximum number of re-executions#).
====

Nun geht es an die Konfiguration eines ersten Plans.
Unter [.guihint]#Application name# können Sie einen beliebigen Namen eingeben.
Dieser Name muss nicht eindeutig sein!
Sinnvoll ist hier der Name der zu überwachenden Anwendung, beispielsweise `OnlineShop` oder hier im Beispiel schlicht `MyApplication`.
Nun kann es natürlich vorkommen, dass eben dieser Online-Shop mehrfach getestet wird, sei es durch andere Test-Suites oder dieselbe Test-Suite mit unterschiedlichen Parametern.
Um in solchen Fällen trotz identischer Namen dennoch eine Eindeutigkeit in den Ergebnissen zu erzielen, gibt es das Feld [.guihint]#Variant.#
Wird die Anwendung `OnlineShop` etwa einmal auf Deutsch und einmal auf Englisch getestet (über entsprechende Parameter), könnten Sie hier entsprechende Kürzel verwenden.
Im Monitoring gibt es dann Ergebnisse für `My OnlineShop_de` und `My OnlineShop_en.`

Notwendig ist hingegen die Angabe unter [.guihint]#Relative path to test suite file or folder.#
Die Pfadangabe ist relativ zum oben angegebenen Basisverzeichnis, also beispielsweise `mybot\test.robot` für `C:\robots\`.
Alternativ kann hier auch ein ein Verzeichnis (mit mehreren `robot`-Dateien) angegeben werden, dann wäre es schlicht `mybot`. 

.Plan für die Ausführung von Suiten 
image::robotmk_scheduler_03.png[alt="Bezeichnung und Pfad der Suite."]

Weiter geht es mit der [.guihint]#Execution configuration.#
Unter [.guihint]#Timeout per attempt# legen Sie fest, wie lange eine Test-Suite maximal laufen darf -- pro Versuch.
// ML: Oder ein PLAN maximal laufen darf?
Mit [.guihint]#Robot Framework re-executions# können Sie nun Robot Framework anweisen, Test-Suites bei fehlgeschlagenen Tests komplett oder inkrementell zu wiederholen.
// ML Oder Pläne zu wiederholen?
Wenn die einzelnen Tests einer Test-Suite unabhängig voneinander sind, bietet sich die inkrementelle Strategie an, um Zeit zu sparen.
Testet die Test-Suite hingegen eine logische Abfolge, etwa "Login -> Aufruf Produktseite -> Produkt in den Warenkorb -> Checkout", muss die Test-Suite natürlich komplett neu abgearbeitet werden.
Am Ende gibt es immer nur ein Ergebnis.

Bei kompletten Wiederholungen werden für das Endergebnis nur in sich abgeschlossene Suite-Ergebnisse berücksichtigt: Schlägt ein Test bei der letzten Wiederholung fehl, wird die Test-Suite als Fehlschlag gewertet.
Bei inkrementellen Wiederholungen setzt sich das Endergebnis aus den besten Teilergebnissen zusammen: Laufen einige Tests erst im dritten Anlauf erfolgreich durch, wird auch das Endergebnis als Erfolg gewertet.
Zur Erinnerung: Die Kombination aus Versuchen und maximalen Laufzeiten aller Pläne einer Plangruppe bestimmt deren minimales Ausführungsintervall.

.Fehlgeschlagene Tests/Suiten können wiederholt werden
image::robotmk_scheduler_04.png[alt="Konfiguration von Ausfühungslaufzeiten und -wiederholungen."]

Standardmäßig ist die Ausführung via RCC unter [.guihint]#Automated environment setup (via RCC)# aktiviert, für die Sie zwei Werte eintragen müssen.
Zum einen benötigt RCC die Angabe, wo die Datei `robot.yaml` liegt.
Deren primärer Zweck ist der Verweis auf die Datei `conda.yaml`, die für den Aufbau der Python-Umgebung verantwortlich ist, also die Installation von Python und Abhängigkeiten.
Diese Angabe ist relativ zum Basisverzeichnis, das Sie oben unter [.guihint]#Relative path to test suite file or folder# gesetzt haben.
Die YAML-Dateien können durchaus in Unterordnern gespeichert werden, Best-Practice ist aber das oberste Suite-Verzeichnis!
Für das obige Basisverzeichnis `C:\robot\` und das Suite-Verzeichnis `C:\robot\mybot` ist es entsprechend `mybot\robot.yaml`.

Beim folgenden Zeitlimit für den Bau der Python-Umgebung sollten Sie bedenken, dass bisweilen größere Datenmengen heruntergeladen und eingerichtet werden müssen.
Insbesondere für die benötigten Browser fallen hier schnell einige Hundert Megabyte an -- allerdings nur beim ersten Durchlauf.
RCC baut Environments nur dann neu auf, wenn sich der Inhalt der `conda.yaml` geändert hat

.Zeitlimit für den Aufbau virtueller Umgebungen
image::robotmk_scheduler_05.png[alt="RCC-Konfiguration der Suite."]

Unter [.guihint]#Robot Framework parameters# haben Sie die Möglichkeit, einige der Kommandozeilenparameter von Robot Framework zu nutzen (die auch der Befehl `robot --help` anzeigt).
Sollten Sie weitere Parameter nutzen wollen, hilft die Option [.guihint]#Argument files.#
Eine hier angegebene Datei kann beliebige robot-Parameter beinhalten.
Weitere Informationen über die einzelnen Parameter bekommen Sie über die Inline-Hilfe.

Für unser Beispielprojekt wird lediglich die Option [.guihint]#Variables# aktiviert und eine Variable `MYVAR` mit dem Wert `My Value` gesetzt -- Sie erinnern sich an den Befehl `Log    ${MYVAR}` oben in der Datei `tests.robot`?
Dies ist die zugehörige Referenz.

.Einige Optionen des `robot`-Befehls
image::robotmk_scheduler_06.png[alt="Kommandozeilenparameter von Robot Framework."]

Am Ende der Suite-Konfiguration gibt es noch drei weitgehend selbsterklärende Optionen.
[.guihint]#Execute plan as a specific user# ermöglicht es, Robotmk im Kontext eines bestimmten Nutzerkontos auszuführen.
Hintergrund: Standardmäßig wird Robotmk im Kontext des {CMK}-Agenten ausgeführt (link:https://learn.microsoft.com/de-de/windows/win32/services/localsystem-account[LocalSystem-Konto^]), der keine Berechtigung für den Zugriff auf den Desktop hat.
Hier kann nun ein Nutzer angegeben werden, der permanent an einer Desktop-Sitzung angemeldet sein muss und entsprechend Zugriff auf grafische Desktop-Anwendungen hat.

Mit [.guihint]#Assign plan/test result to piggyback host# lassen sich die Ergebnisse des Plans/Tests einem anderen Host zuweisen.
Testet Robot Framework zum Beispiel den Bestellprozess eines Online-Shops, ließen sich die Ergebnisse so dem zugehörigen Webserver zuweisen.

Jeder Testdurchlauf produziert Daten, die unter `C:\ProgramData\checkmk\agent\robotmk_output\working\suites\` abgelegt werden.
Standardmäßig werden die Ergebnisse der letzten 14 Tage behalten, allerdings sollten Sie bedenken, dass sich hier schnell große Datenberge auftürmen.
Pro Durchlauf fallen mindestens knapp 500 Kilobyte Daten an -- mit komplexeren Test-Suites und beispielsweise eingebettete Screenshots können es aber auch schnell einige Megabyte sein.
Je nach Ausführungsintervall, Größe des Reports und Anforderungen an Ihre Dokumentation, sollten Sie hier eingreifen.

.Automatisches Aufräumen der vielen anfallenden Daten
image::robotmk_scheduler_07.png[alt="Optionen für Nutzerkontext, Host-Zuweisung und automatische Aufräumarbeiten."]

Hier angelangt, könnten Sie nun weitere Pläne in dieser Plangruppe oder weitere Plangruppen erstellen.

Am Ende warten noch zwei Optionen, die sich wiederum auf die komplette Robotmk-Scheduler-Konfiguration beziehen.

[.guihint]#RCC profile configuration# erlaubt die Angabe von Proxy-Servern sowie davon auszunehmende Hosts.

Sehr nützlich kann auch [.guihint]#Grace period before scheduler starts# sein: Der Scheduler startet zusammen mit dem {CMK}-Agenten noch vor der Desktop-Anmeldung -- was freilich dazu führt, dass etwaige Tests auf dem Desktop fehlschlagen müssen.
Über eine Vorlaufzeit lässt sich der Start manuell verzögern.

.Eine Vorlaufzeit verhindert Fehlschläge
image::robotmk_scheduler_08.png[alt="Optionen für Proxy-Server und eine Vorlaufszeit für den Scheduler-Start."]

Damit ist die Konfiguration abgeschlossen und Sie können einen neuen xref:wato_monitoringagents#bakery[Agenten mit dem Plugin backen] und anschließend ausrollen, manuell oder über die xref:agent_deployment#[automatischen Agenten-Updates.]



==== Daten in der Agentenausgabe
Die Ausgabe im Agenten ist recht umfangreich: In mehreren Sektionen werden Fehlermeldungen, Status, Konfiguration und Test-Daten übermittelt.
Letztere finden sich in der Sektion `robotmk_suite_execution_report`, hier ein stark gekürzter Auszug:

.mysite-robot-host-agent.txt
[{json}]
----
<<<robotmk_suite_execution_report:sep(0)>>>
{
    "attempts": [
        {
            "index": 1,
            "outcome": "AllTestsPassed",
            "runtime": 20
        }
    ],
    "rebot": {
        "Ok": {
            "xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n
			<robot generator=\"Rebot 6.1.1 (Python 3.10.12 on win32)\" 
			generated=\"20240319 16:23:19.944\" 
			rpa=\"true\" 
			schemaversion=\"4\">\r\n<suite id=\"s1\" 
			name=\"Mybot\" 
			source=\"C:\\robots\\mybot\">\r\n<suite id=\"s1-s1\" 
			name=\"Tests\" 
			source=\"C:\\robots\\mybot\\tests.robot\">\r\n<test id=\"s1-s1-t1\" 
			name=\"Mytest\" 
			line=\"6\">\r\n<kw 
			name=\"Sleep\" 
			library=\"BuiltIn\">\r\n<arg>3 Seconds</arg>\r\n<doc>Pauses the test executed for the given time.</doc>\r\n<msg 
			timestamp=\"20240319 16:23:02.936\" 
			level=\"INFO\">Slept 3 seconds</msg>\r\n<status 
			status=\"PASS\" 
			starttime=\"20240319 16:23:00.934\" 
			endtime=\"20240319 16:23:02.936\"/>"
        }
    },
    "suite_id": "mybot",
    "timestamp": 1710861778
}
...
"html_base64":"PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW ...
----

Interessant sind hier vor allem zwei Bereiche.
Zum einen `rebot`: Das Tool `rebot` hat den eigentlichen Statusbericht für Robot Framework aus gegebenenfalls mehreren Teilergebnissen (daher auch re-bot) produziert.
Zum anderen die letzte Zeile `html_base64`: Danach folgen die HTML-Berichte von Robot Framework base64-kodiert.
Auch Screenshots, die über Tests angefertigt werden, werden auf diese Weise übertragen -- entsprechend umfangreich kann die Ausgabe/Datenmenge im Agenten werden.

==== Daten im Monitoring
Sobald der Robotmk-Scheduler und die Test-Suite durchgelaufen sind, wird die xref:wato_services#discovery[Service-Erkennung] drei neue Services hervorbringen: 

.Die neu erkannten Robotmk-Services
image::robotmk_scheduler_09.png[alt="Robotmk-Services im Monitoring.]

Der Service [.guihint]#RMK Scheduler Status# existiert einmalig und unmittelbar nach dem Deployment.
Die Services für Pläne und Tests, hier [.guihint]#RMK MyApplication_mybot Plan# und [.guihint]#RMK MyApplication_mybot Test: /Test: My Test,# kommen ins Monitoring, sobald die zugehörigen Suites ein erstes Mal durchgelaufen sind.

[#serviceconfig]
=== Service-Regeln konfigurieren
==== Regel für Plan-Status anlegen
Zur Erinnerung: In der Agenten-Regel oben wurden maximale Laufzeiten für Pläne festgelegt.
Mit der Regel [.guihint]#Robotmk plan# lassen sich diese Laufzeiten auswerten.
So können Sie den Service etwa auf {CRIT} setzen, wenn 90 Prozent aller zusammengerechneten Timeouts erreicht werden.

.Schwellwerte für Statuswechsel  aufgrund von Laufzeiten
image::robotmk_service_suite_status_01.png[alt="Konfigurationsdialog für Grenzwerte für Laufzeiten von Test-Suites."]

Im Bereich [.guihint]#Conditions# gibt es die Möglichkeit, die Regel auf bestimmte Pläne zu beschränken.

.Optionale Beschränkung auf bestimmte Pläne
image::robotmk_service_suite_status_02.png[alt="Dialog mit Beschränkung auf die Test-Suite 'mybot'."]

==== Regel für Test-Status anlegen
Auch für einzelne Tests in den Test-Suites lassen sich weitere Daten ins Monitoring holen, über die Regel [.guihint]#Robotmk test.#
Hier finden Sie wieder die Möglichkeit, Laufzeiten zu überwachen, sowohl von Tests als auch von Keywords.
Die Überwachung von Keywords ist dabei eine {CMK}-eigene Funktion.
Daher könnte auch der Suite-interne Status im Robot-Framework-Bericht `OK` sein, weil die Test-Suite innerhalb der maximal erlaubten Laufzeit verarbeitet wurde -- in {CMK} jedoch {WARN} oder {CRIT}, weil schon bei zum Beispiel 80 Prozent dieser maximal erlaubten Laufzeit ein Statuswechsel stattfindet.

Zudem können über die Option [.guihint]#Enable metrics for high-level keywords# Metriken für übergeordnete Keywords erzeugt werden.
Nützlich ist dies insbesondere dann, wenn Ihre Test so organisiert sind, dass die übergeordneten Keywords das "Was" beschreiben und die darunter liegenden Keywords das "Wie" -- so bekommen Sie abstraktere Auswertungen.

Hier im Beispiel liegen die Schwellwerte für die maximale Laufzeit eines Tests bei 2 und 4 Sekunden.
Die Auswirkungen werden Sie unten im Kapitel xref:#monitoring[Robotmk im Monitoring] sehen.

.Über Keyword-Metriken lässt sich das Monitoring ausbauen
image::robotmk_service_test_status_01.png[alt="Regel zum Überwachen von Keywords mit Beispielwerten."]

Abermals gibt es im Bereich [.guihint]#Conditions# eine explizite Filtermöglichkeit, hier für einzelne Tests.

.Optionale Beschränkung auf bestimmte Tests
image::robotmk_service_test_status_02.png[alt="Dialog mit Option zur Beschränkung auf Tests."]

////
ML: Folgendes zunächst geschoben: Das meiste ist schon drin, Dinge wie Desktop-Nutzer, RDB, verschachtelte Tests etc. bekommen gegebenenfalls ein eigenes Kapitel.
MFS: Vor dem Monitoring muss der Agent deployed werden.

Da momentan noch nicht alles automatisiert ist, halte ich hier einen Einschub

=== Windows-Host für Robotmk vorbereiten

für sinnvoll:

* RCC installieren, oder?
* Nutzer anlegen und dafür sorgen, dass der entweder lokal automatisch angemeldet wird (VM mit virtuellem Framebuffer) oder RDP konfigurieren und für Login (bspw. FreeRDP) sorgen.
* Agentenpaket installieren
* Hinweis auf automatische Agenten-Updates, damit _künftig_ alles weitere von selbst geht

Mittelfristig soll der Checkmk-Server auch FreeRDP im Hintergrund machen können und vielleicht legen wir ja auch mal User mit `net user` an.
////

[#monitoring]
=== Robotmk im Monitoring
Im Monitoring finden Sie Services für den Status des Robotmk Schedulers sowie der einzelnen Pläne und Tests -- natürlich auch, wenn sie keine separaten Service-Regeln angelegt haben.

==== Scheduler-Status
Der Service [.guihint]#RMK Scheduler Status# ist {OK}, wenn der Scheduler anläuft und erfolgreich die Ausführungsumgebungen bauen konnte.

.RCC konnte die Umgebungen aufbauen -- in nur einer Sekunde
image::robotmk_monitorng_scheduler.png[alt="Status des Schedulers im Monitoring."]

Hier im Bild sehen Sie den Hinweis [.guihint]#Environment build took 1 second.#
Eine Sekunde, um eine virtuelle Python-Umgebung mit Pip und Robot Framework aufzubauen?
Das geht, weil RCC clever ist: Bereits heruntergeladene Dateien werden wiederverwendet und neu gebaut wird nur nach Änderungen in der `conda.yaml`.
Der erste Bau hätte hier eher 30 oder mehr Sekunden gedauert.

==== Plan-Status
Der Status eines Plans wird in einem Service wiedergegeben, der nach Applikationsnamen und Suite benannt ist, beispielsweise [.guihint]#RMK mybot MyApplication_mybot Plan.#

.Die Ausführung eines Plans -- vor allem relevant für Administratoren
image::robotmk_monitorng_suite.png[alt="Status der Test-Suite im Monitoring."]

==== Test-Status
Wirklich interessant wird es bei der Auswertung der Tests.
Im Bild sehen Sie nun die Auswirkung der oben gesetzten Schwellwerte für die Laufzeit von Tests -- hier die 2 Sekunden für den Zustand {WARN}.
Da im Test selbst die Anweisung `Sleep 3 Seconds` schon für eine längere Laufzeit sorgt, muss dieser Service hier auf {WARN} gehen, obwohl der Test natürlich erfolgreich verlaufen ist.
Dass der Test erfolgreich verlaufen ist, zeigt der Bericht von Robot Framework, den Sie über das icon:icon_log[Alt="Log-Icon."] Log-Icon bekommen.

.Ergebnisse einer konkreten Suite -- vor allem relevant für Entwickler
image::robotmk_monitorng_test.png[alt="Status des Tests im Monitoring."]

Der Bericht zeigt nun klar und deutlich, dass Test und Test-Suite erfolgreich durchgelaufen sind.

.Der Robot-Framework-Log, hier im optionalen Dark-Mode
image::robotmk_monitorng_report_01.png[alt="Robot-Framework-Bericht für Test-Suite 'Mybot'."]

Ganz unten in den Daten sehen Sie auch die einzelnen Keywords, hier zum Beispiel `Log ${MYVAR}` samt dem in {CMK} für `MYVAR` gesetzten Wert `My value`.

.Die Log-Datei lässt sich bis auf kleinste Details ausklappen
image::robotmk_monitorng_report_02.png[alt="Robot-Framework-Bericht auf Ebene der Keywords."]

==== Dashboards
Natürlich können Sie sich wie gewohnt eigene Dashboards bauen -- unter [.guihint]#Monitor > Synthetic Monitoring# finden Sie aber auch zwei eingebaute Übersichten.

.Das komplette {CMK} Synthetic Monitoring im Überblick (gekürzt)
image::robotmk_dashboard_01.png[alt="Robotmk-Dashboard in der Weboberfläche."]

[#troubleshooting]
== Troubleshooting

=== Scheduler meldet `No Data`
Wenn der Scheduler keinerlei Daten bekommt, hat der Bau der Umgebung vermutlich nicht funktioniert.
Ein häufiger Grund dafür sind Netzwerkprobleme, aufgrund derer zum Beispiel bestimmte Abhängigkeiten nicht geladen werden können.
Schauen Sie in diesem Fall in die zugehörige Log-Datei unter `C:\ProgramData\checkmk\agent\robotmk_output\working\environment_building`.

////
=== Environment Building schlägt fehl: `exit status 252`
Grundsätzlich können Test-Suites auch auf zum Beispiel Ruby, Python oder anderen Sprachen aufgebaut werden.
Der Einsatz in {CMK} ist jedoch auf Robot Framework ausgelegt.
Die Meldung `exit status 252` verweist auf eine nicht unterstützte Suite.
////

=== Environment Building schlägt fehl: `post-install script execution`
Dies ist ein besonders _interessanter_ Fehler, der Ihnen auf frischen Windows-Systemen begegnen könnte.
In der `conda.yaml` können auch Anweisungen hinterlegt werden, die nach der Installation der Abhängigkeiten ausgeführt werden sollen -- beispielsweise die Initialisierung des Robot-Framework-Browsers.
Hier sollen also Python-Befehle ausgeführt werden.
Nun hat Windows 11 standardmäßig Aliasnamen für `python.exe` und `python3.exe` vorgegeben, die auf den Microsoft-Store verweisen.
Diese Aliasnamen müssen Sie unter `Einstellungen/Aliase für App-Ausführung` deaktivieren.
	
[#files]
== Dateien und Verzeichnisse
	
[cols="30,~",options="header"]
|===
|Pfad |Bedeutung
|`C:\ProgramData\checkmk\agent\robotmk_output\working\suites\` |Logs und Ergebnisse der Suites
|`C:\ProgramData\checkmk\agent\robotmk_output\working\environment_building` |Logs zum Aufbau virtueller Umgebungen
|`C:\ProgramData\checkmk\agent\robotmk_output\working\rcc_setup` |Meldungen der RCC-Ausführung
|`C:\ProgramData\checkmk\agent\logs\robotmk_scheduler_rCURRENT.log` |Log des Agentenplugins
|`C:\ProgramData\checkmk\agent\bin\` | `rcc.exe` und `robotmk_scheduler.exe`
|`C:\ProgramData\checkmk\agent\plugins\` |Agentenplugin `robotmk_agent_plugin.exe`
|===


