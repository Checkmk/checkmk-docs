// -*- coding: utf-8 -*-
// IGNORE
// NOINDEX
include::global_attr.adoc[]
= Spezialagenten entwickeln
:revdate: draft
:title: Spezialagenten entwickeln
:description: Hier erfahren Sie, wie Sie Spezialagenten entwickeln, mit denen Sie Daten aus einer beliebigen Quelle in eine {CMK}-Agentenausgabe überführen und so im Monitoring berücksichtigen können. 

{related-start}
xref:devel_intro#[Erweiterungen für {CMK} entwickeln]
xref:datasource_programs#[Datenquellenprogramme]
xref:wato_monitoringagents#[Monitoring-Agenten]
xref:wato_services#[Services verstehen und konfigurieren]
xref:cmk_commandline#[{CMK} auf der Kommandozeile]
xref:mkps#[{CMK}-Erweiterungspakete (MKPs)]
{related-end}


[#intro]
== Einleitung

[IMPORTANT]
====
Dieser Artikel ist bislang kaum mehr als eine Sammlung von Code-Beispielen, die noch erläutert werden müssen.
In diesem Zustand genügt er noch lange nicht unseren Ansprüchen.
Dennoch enthält er bereits zu viel nützliche Informationen, um ihn überhaupt nicht bereitzustellen.
Solange der Artikel in Bearbeitung ist, bitten wir um Nachsicht.
====

// Erst einmal etwas zu Agenten...
// Dann der Verweis auf Datenquellenprogramme...

Wir müssen an dieser Stelle voraussetzen, dass Sie sich schon mit xref:datasource_programs#[Datenquellenprogrammen] auseinandergesetzt haben und die prinzipiellen Mechanismen verstehen.
Spezialagenten erweitern Datenquellenprogramm um einfache Konfigurierbarkeit über Regeln im Setup.
Die Konfigurierbarkeit kann hierbei sowohl Umfang und Art der eingeholten Daten betreffen als auch deren Vorverarbeitung, bevor diese als Agentenausgabe in die weitere Verarbeitungskette übergeben werden.

Jeder Spezialagent ist ein selbständig lauffähiges Programm ohne Abhängigkeiten zu Programmierschnittstellen von {CMK}.
Wie bei Datenquellenprogrammen erfolgt der Aufruf im üblichen Check-Intervall (meist eine Minute) in einem Prozess, der gestartet wird, Agentenausgabe auf der Standardausgabe übergibt und sich dann beendet.
Dies erlaubt es Ihnen, Spezialagenten in beliebigen Programmiersprachen zu implementieren, allerdings bedeuten kurz laufende Prozesse, dass _Just-in-time_-kompilierte Sprachen wie Java eher weniger geeignet sind als kompilierte Sprachen oder schnell startende interpretierte Sprachen.

Die Konfiguration der gestarteten Prozesse erfolgt über Kommandozeilenparameter beim Aufruf des Spezialagenten.
Hierfür bestimmen Sie, in welcher Weise GUI-Elemente wie Texteingabefelder oder Checkboxen auf bestimmte Parameter gemappt werden.

== Hello World!

Im Gegensatz zum Datenquellenprogramm kann ein Spezialagent nicht an einer beliebigen Stelle im Dateisystem liegen, er hat seinen Platz in der Verzeichnishierachie von {CMK}, zudem muss der Dateiname mit `agent_` beginnen.
Des weiteren müssen Spezialagenten der {CMK}-Instanz bekannt gemacht werden.
Ein minimaler, lauffähiger Spezialagent benötigt also wenigstens drei Dateien.

Vorbereitend sollten Sie vier Ordner anlegen, die sich alle unterhalb von `local/lib/python3/cmk_addons/plugins/<Name>` befinden.
Der letzte ist optional, er wird gegebenenfalls für den agentenbasierten Check verwendet.

[{shell}]
----
{c-omd} mkdir -p local/lib/python3/cmk_addons/plugins/hellospecial/libexec
{c-omd} mkdir -p local/lib/python3/cmk_addons/plugins/hellospecial/server_side_calls
{c-omd} mkdir -p local/lib/python3/cmk_addons/plugins/hellospecial/rulesets/
{c-omd} mkdir -p local/lib/python3/cmk_addons/plugins/hellospecial/agent_based
----

=== Der Spezialagent

Was wäre für einen minimalen Spezialagenten besser geeignet als ein lokaler Check, der einen "Hallo Welt!" Dienst bereitstellt?
Das gelingt bereits einem simplen Shellskript, welches zwei Zeilen Ausgabe erzeugt:

.local/lib/python3/cmk_addons/plugins/hellospecial/libexec/agent_hellospecial
[{shell-raw}]
----
#!/bin/bash
echo '<<<local>>>'
echo '0 "Hello special" - This static service is always OK'
----

Nicht vergessen!

[{shell}]
----
{c-omd} chmod 0755 local/lib/python3/cmk_addons/plugins/hellospecial/libexec/agent_hellospecial
----

=== Die Regelkonfiguration

Das absolute Minimum.
Titel und Kategorie werden gesetzt, das GUI-Formular zur Konfiguration bleibt leer.
Der `name` verweist auf den Namen des Spezialagenten, der das Präfix `agent_` bekommt.
Der so konfigurierte Agent wird in [.guihint]#Other integrations# verfügbar sein, sein Konfigurationsformular dank leeren `elements={}` aber keine Einträge enthalten.

.local/lib/python3/cmk_addons/plugins/hellospecial/rulesets/special_agent.py
[{python}]
----
#!/usr/bin/env python3
# Shebang needed only for editors

from cmk.rulesets.v1.form_specs import Dictionary
from cmk.rulesets.v1.rule_specs import SpecialAgent, Topic, Help, Title

def _formspec():
    return Dictionary(
        title=Title("Hello special!"),
        help_text=Help("This rule is to demonstrate the minimum special agent."),
        elements={}
    )

rule_spec_hellospecial = SpecialAgent(
    topic=Topic.GENERAL,
    name="hellospecial",
    title=Title("Hello special!"),
    parameter_form=_formspec
)
----


=== Die Aufrufkonfiguration

Diese Konfiguration führt den auszuführenden Spezialagenten mit den aus GUI und Defaults bezogenen Einstellungen zusammen.
Aus Einstellungen werden Aufrufparameter.
Der `name` verweist wieder auf den Namen des Spezialagenten, der das Präfix `agent_` bekommt.

.local/lib/python3/cmk_addons/plugins/hellospecial/server_side_calls/special_agent.py
[{python}]
----
#!/usr/bin/env python3
# Shebang needed only for editors

from cmk.server_side_calls.v1 import noop_parser, SpecialAgentConfig, SpecialAgentCommand

def _agent_arguments(params, host_config):
    yield SpecialAgentCommand(command_arguments=[])

special_agent_hellospecial = SpecialAgentConfig(
    name="hellospecial",
    parameter_parser=noop_parser,
    commands_function=_agent_arguments
)
----


=== Der erste Test

Sind die Dateien angelegt, starten Sie den Instanz-Apache neu:

[{shell}]
----
{c-omd} omd restart apache
----

Jetzt sollte beim Aufruf von [.guihint]#Setup > Agents > Other integrations# in der Rubrik [.guihint]#Custom integrations# der neue Eintrag [.guihint]#Hello special!# auffindbar sein.
Fehlt dieser, prüfen Sie zuerst, ob Sie alle Dateien am für sie vorgesehenen Ort abgelegt haben.
// Weiteres Debugging geht gut über die Bakery, die zeigt gleich an, wenn imports nicht stimmen.
// Nur: wie geht das in der Raw?
// Nun Test mit einem Host: Agent und API konfigurieren, Service-Erkennung und zeigen, dass alles da ist.


== Praxis relevanter: Ein vollständiger Wetter-Service

Ein Check, der nie seinen Zustand ändert, ist – nunja –, ziemlich hervorsagbar.
Wir wagen also den Schritt hin zu einem "echten" Spezialagenten, der ein Web- oder REST-API abfragt und als Antwort ein Objekt als JSON- oder XML-Struktur erhält.
Das sind typische Datenformate auch beim Zugriff auf die APIs von Netzwerkgeräten wie SAN-Devices.
Damit Sie keine bestimmte Hardware benötigen, greifen wir einfach auf das freie API von link:https://open-meteo.com/[Open-Meteo.com^] zu.
Unser Ziel ist, einen kompletten Spezialagenten zu schreiben, der mit Längen- und Breitengrad konfiguriert wird und bei Temperaturen unter 5 Grad Celsius den Zustand {WARN} einnimmt und unter 0 Grad den Zustand {CRIT}.
Im Beispiel nennen wir den Check abgekürzt `ometemp`, den Spezialagenten entsprechend `agent_ometemp` undsoweiter.

[TIP]
====
Open Meteo erlaubt die kostenlose Nutzung für nichtkommerzielle Zwecke und behält sich vor, bei zu vielen Anfragen IP-Adressen zu blocken.
Die minütliche Abfrage des APIs ist noch im tolerierten Rahmen.
Dennoch sollten Sie den Dienst nicht überstrapazieren und Spezialagentenregeln, die diesen Dienst nutzen, nach erfolgreichen Tests wieder löschen.
====

=== Der Spezialagent

Jetzt, wo echte Daten verarbeitet werden sollen, müssen Sie sich einige Gedanken machen, beispielsweise zur Programmiersprache und der Vorverarbeitung.
Unser Beispiel fragt ein öffentliches API ab und erhält JSON-Daten.
Das könnte man in der Shell mit einem `curl`-Kommando erledigen, da aber {CMK} ein gut ausgestattetes Python mitbringt, liegt es nahe, dieses zu verwenden.
Die nächste Entscheidung betrifft die Aufarbeitung der Daten.
Sie können beispielsweise JSON-Daten einfach in die Agentenausgabe durchreichen oder aber im Spezialagenten bereits in ein Tabellenformat konvertieren.
Was sie tun, wird eher davon abhängen, wie arbeitsteilig Ihre Check-Entwicklung gestaltet ist, oder ob aufbereitete Daten bereits die Entwicklung des zugehörigen xref:devel_check_plugins#[agentenbasierten Check-Plugins] vereinfacht oder gar überflüssig macht.

Unser Beispiel reicht die JSON-Antwort einfach durch, das Parsen findet dann im agentenbasierten Check-Plugin statt.
Die Übergabe von Längen- und Breitengrad erfolgt hier durch die Kommandozeilenargumente `--latitude` und `--longitude`.
Um Kommandozeilenargumente besser einlesen zu können, verwenden wir die Bibliothek `argparse`.
Da Open-Meteo Längen- und Breitengrad in die URL kodiert unterstützt, genügt eine URL mit Platzhaltern.
Probieren Sie diese URL mit _Ihrem aktuellen_ Längen- und Breitengrad ruhig einmal im Browser aus.

.local/lib/python3/cmk_addons/plugins/ometemp/libexec/agent_ometemp
[{python}]
----
#!/usr/bin/env python3
# Shebang needed this time to find the interpreter!

import requests
import argparse

url = "https://api.open-meteo.com/v1/forecast?latitude={lat:.4f}&longitude={long:.4f}&current=temperature_2m"

parser = argparse.ArgumentParser("agent_ometemp")
parser.add_argument(
    "--latitude",
    help="Specify the latitude in degrees (decimal notation).",
    type=float,
    default=0.0)
parser.add_argument(
    "--longitude",
    help="Specify the longitude in degrees (decimal notation).",
    type=float,
    default=0.0)
args = parser.parse_args()

# print(url.format(lat=args.latitude, long=args.longitude))
response = requests.get(url.format(lat=args.latitude, long=args.longitude))
print('<<<ometemp:sep(0)>>>')
print(response.json())
----

Die Agentensektion `ometemp` enthält schlussendlich nur das empfangene JSON-Objekt.
Testen Sie den Spezialagenten, indem Sie ihn auf der Kommandozeile aufrufen.

[{shell}]
----
{c-omd} ~/local/lib/python3/cmk_addons/plugins/ometemp/libexec/agent_ometemp --latitude 48.1305 --longitude 11.5953
----

=== Die Regelkonfiguration

Der so konfigurierte Agent wird in [.guihint]#Environmental# verfügbar sein.

////
./cmk/gui/utils/rule_specs/legacy_converter.py:486:        case ruleset_api_v1.rule_specs.Topic.APPLICATIONS:
./cmk/gui/utils/rule_specs/legacy_converter.py:499:        case ruleset_api_v1.rule_specs.Topic.CACHING_MESSAGE_QUEUES:
./cmk/gui/utils/rule_specs/legacy_converter.py:508:        case ruleset_api_v1.rule_specs.Topic.CLOUD:
./cmk/gui/utils/rule_specs/legacy_converter.py:517:        case ruleset_api_v1.rule_specs.Topic.CONFIGURATION_DEPLOYMENT:
./cmk/gui/utils/rule_specs/legacy_converter.py:526:        case ruleset_api_v1.rule_specs.Topic.DATABASES:
./cmk/gui/utils/rule_specs/legacy_converter.py:533:        case ruleset_api_v1.rule_specs.Topic.GENERAL:
./cmk/gui/utils/rule_specs/legacy_converter.py:545:        case ruleset_api_v1.rule_specs.Topic.ENVIRONMENTAL:
./cmk/gui/utils/rule_specs/legacy_converter.py:556:        case ruleset_api_v1.rule_specs.Topic.LINUX:
./cmk/gui/utils/rule_specs/legacy_converter.py:563:        case ruleset_api_v1.rule_specs.Topic.NETWORKING:
./cmk/gui/utils/rule_specs/legacy_converter.py:574:        case ruleset_api_v1.rule_specs.Topic.MIDDLEWARE:
./cmk/gui/utils/rule_specs/legacy_converter.py:581:        case ruleset_api_v1.rule_specs.Topic.NOTIFICATIONS:
./cmk/gui/utils/rule_specs/legacy_converter.py:592:        case ruleset_api_v1.rule_specs.Topic.OPERATING_SYSTEM:
./cmk/gui/utils/rule_specs/legacy_converter.py:605:        case ruleset_api_v1.rule_specs.Topic.PERIPHERALS:
./cmk/gui/utils/rule_specs/legacy_converter.py:614:        case ruleset_api_v1.rule_specs.Topic.POWER:
./cmk/gui/utils/rule_specs/legacy_converter.py:616:        case ruleset_api_v1.rule_specs.Topic.SERVER_HARDWARE:
./cmk/gui/utils/rule_specs/legacy_converter.py:629:        case ruleset_api_v1.rule_specs.Topic.STORAGE:
./cmk/gui/utils/rule_specs/legacy_converter.py:640:        case ruleset_api_v1.rule_specs.Topic.SYNTHETIC_MONITORING:
./cmk/gui/utils/rule_specs/legacy_converter.py:649:        case ruleset_api_v1.rule_specs.Topic.VIRTUALIZATION:
./cmk/gui/utils/rule_specs/legacy_converter.py:662:        case ruleset_api_v1.rule_specs.Topic.WINDOWS:
./cmk/gui/watolib/notification_parameter/_registry.py:66:                topic=rule_specs.Topic.NOTIFICATIONS,
////

.local/lib/python3/cmk_addons/plugins/ometemp/rulesets/special_agent.py
[{python}]
----
#!/usr/bin/env python3
# Shebang needed only for editors

from cmk.rulesets.v1.form_specs import Dictionary, DictElement, Float
from cmk.rulesets.v1.rule_specs import SpecialAgent, Topic, Help, Title

def _formspec():
    return Dictionary(
        title=Title("Open-Meteo temperature"),
        help_text=Help("This rule is used to showcase a special agent with configuration."),
        elements={
            "latitude": DictElement(
                required=True,
                parameter_form=Float(
                    title=Title("Latitude in degrees (decimal notation)"),
                ),
            ),
            "longitude": DictElement(
                required=True,
                parameter_form=Float(
                    title=Title("Longitude in degrees (decimal notation)"),
                ),
            ),
        }
    )

rule_spec_hellospecial = SpecialAgent(
    topic=Topic.ENVIRONMENTAL,
    name="ometemp",
    title=Title("Open-Meteo temperature"),
    parameter_form=_formspec
)
----

Nun können Sie den Instanz-Webserver neu starten:

[{shell}]
----
{c-omd} omd restart apache
----

Jetzt können Sie eine Regel anlegen [.guihint]#Add rule: Open-Meteo temperature#.
Viel macht die allerdings noch nicht...

=== Die Aufrufkonfiguration

Diese Konfiguration führt den auszuführenden Spezialagenten mit den aus GUI und Defaults bezogenen Einstellungen zusammen.
Die oben in der GUI per `_formspec` gesetzten Einstellungen landen im `Dictionary` `params`.
Host spezifische Einstellungen finden Sie im Objekt `host_config`, so erlaubt `host_config.primary_ip_config.address` Zugriff auf die primäre IP-Adresse, `host_config.name` enthält den Hostnamen.
Beachten Sie bei der Übergabe an den Spezialagenten, dass der Aufruf über eine Shell erfolgt, die Liste der Aufrufparameter darf folglich nur Strings enthalten.
Aus Einstellungen werden Aufrufparameter, die in der Liste `command_arguments` landen.

// Prüfung kann an drei Stellen erfolgen: vorneweg in der GUI, in der Funktion _agent_arguments oder in parameter_parser

.local/lib/python3/cmk_addons/plugins/ometemp/server_side_calls/special_agent.py
[{python}]
----
#!/usr/bin/env python3
# Shebang needed only for editors

from cmk.server_side_calls.v1 import noop_parser, SpecialAgentConfig, SpecialAgentCommand

def _agent_arguments(params, host_config):
    args = [ "--latitude", str(params['latitude']), "--longitude", str(params['longitude']) ]
    yield SpecialAgentCommand(command_arguments=args)

special_agent_hellospecial = SpecialAgentConfig(
    name="ometemp",
    parameter_parser=noop_parser,
    commands_function=_agent_arguments
)
----

=== Das Check-Plugin

Der Vollständigheit halber zeigen wir hier noch das agentenbasierte Check-Plugin.
Die Entwicklung dieser Plugins zeigt der Artikel xref:devel_check_plugins#[Entwicklung agentenbasierter Check-Plugins].
Ein Unterschied zum dort erwähnten Beispiel ist die Übergabe der JSON-Rückgabe des REST-APIs:
Wir verwenden die `itertools`, um aus dem zweidimensionalen Array ein eindimensionales zu machen und konkatenieren dieses anschließend mit Leerzeichen.
Dann stellen wir sicher, dass einfache Anführungszeichen durch doppelte ersetzt werden, um mit `json.loads()` den String direkt als Objekt laden zu können.

.local/lib/python3/cmk_addons/plugins/ometemp/agent_based/ometemp.py
[{python}]
----
#!/usr/bin/env python3

from cmk.agent_based.v2 import AgentSection, CheckPlugin, Service, Result, State, Metric, check_levels
import itertools
import json

def parse_ometemp(string_table):
    flatlist = list(itertools.chain.from_iterable(string_table))
    parsed = json.loads(" ".join(flatlist).replace("'", "\""))
    return parsed

def discover_ometemp(section):
    yield Service()

def check_ometemp(section):
    t = section['current']['temperature_2m']
    if t < 0.0:
        yield Result(state=State.CRIT, summary="Brrrrrr!")
    elif t < 5.0:
        yield Result(state=State.WARN, summary="It's getting cold...")
    else:
        yield Result(state=State.OK, summary="Nice here.")
    return

agent_section_ometemp = AgentSection(
    name = "ometemp",
    parse_function = parse_ometemp,
)

check_plugin_myhostgroups = CheckPlugin(
    name = "ometemp",
    service_name = "Open Meteo temperature (2m)",
    discovery_function = discover_ometemp,
    check_function = check_ometemp,
)
----

== Fehler beheben

=== Inkompatibilitäten erkennen

=== Exceptions und Absturzberichte in der GUI

=== Exceptions und Absturzberichte auf der Kommandozeile

=== Agentenausgabe überprüfen



