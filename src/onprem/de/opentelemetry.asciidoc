// -*- coding: utf-8 -*-
// IGNORE Aggregierung Kollektorkonfiguration OTel Tippens Vorschlagsfunktion einzupflegen hellolevel p10 p3 praxisnäher sekündliche
// SKIPCOMMITS 2025-09-10
include::global_attr.adoc[]
= OpenTelemetry-Metriken überwachen
:revdate: 2025-08-26
:title: OpenTelemetry-Metriken überwachen
:description: Ab {CMK} 2.4.0 können experimentell OpenTelemetry-Metriken im Monitoring empfangen werden. Lesen Sie hier, wie Sie den Konnektor einrichten und nutzen.

{related-start}
xref:special_agents#[Spezialagenten]
xref:dcd#[Dynamische Host-Verwaltung]
{related-end}


include::include_technical_preview.asciidoc[]

[#intro]
== Einleitung

{cee-only}
Ab {CMK} {v24} können Sie ab {CCE}, d. h. in {CE} und {ME}, link:https://opentelemetry.io/[OpenTelemetry^]-Metriken empfangen und im Monitoring verarbeiten.
Hierfür bringt {CMK} einen OpenTelemetry-Kollektor mit.
Dieser unterstützt die Transportprotokolle _gRPC_ und _HTTP(S)_ als Empfänger in einer Push-Konfiguration.
Zudem kann er als _Scraper_ Daten von Prometheus-Endpunkten einsammeln (Pull-Konfiguration).

Basierend auf den erkannten OpenTelemetry-Services können mit der xref:dcd#[dynamischen Host-Verwaltung] Hosts automatisch erzeugt werden.
Diesen Hosts werden dann von einem xref:glossar#special_agent[Spezialagenten] OpenTelemetry-xref:glossar#metric[Metriken] als {CMK}-xref:glossar#service[Services] zugeordnet.

Kurz zusammengefasst: Drei Komponenten (Kollektor, dynamische Host-Verwaltung und Spezialagent) müssen zusammenspielen, bevor Services erkannt und Metriken erzeugt werden können.
Sie sollten daher zuerst diese drei Komponenten konfigurieren und erst zum Abschluss die ausstehenden xref:glossar#activate_changes[Änderungen aktivieren.]

[TIP]
====
Dieser Artikel beschreibt den Stand der OpenTelemetry-Integration bei Veröffentlichung von {CMK} {v24}p10.
Wir arbeiten weiterhin daran, danach vorgenommene Änderungen der Patch-Releases einzupflegen.
Bitte beachten Sie die link:https://checkmk.com/werks?search=otel&product=cmk&cmk_version%5B%5D=2.4&level%5B%5D=1&level%5B%5D=2&level%5B%5D=3&class%5B%5D=feature&class%5B%5D=fix&class%5B%5D=security&edition=all[OpenTelemetry betreffenden Werks^], um den aktuellen Stand der von Ihnen verwendeten {CMK}-Version zu erfahren.
====

[#setup]
== Einrichtung

[#collector_activation]
=== OpenTelemetry-Kollektor aktivieren

Zunächst müssen Sie bei gestoppter Instanz den Kollektor aktivieren.
Dies erledigen Sie als Instanzbenutzer auf der Kommandozeile mit xref:omd_basics#omd_config[`omd config`] im textbasierten Konfigurationsmenü:

[{shell}]
----
{c-omd} omd config
----

Wechseln Sie hier zu `Addons` und aktivieren Sie `OPENTELEMETRY_COLLECTOR`:

++++
include::screen_opentelemetry_tui_collector.xml[]
++++

Den Port für das Selbst-Monitoring des Kollektors müssen Sie nicht abändern, er wird auch bei Nutzung mehrerer Instanzen auf den nächsten freien Port ab 14317 eingestellt.

Starten Sie nach Aktivierung des Kollektors die Instanz wieder mit `omd start`.


[#collector_configuration]
=== OpenTelemetry-Kollektor einrichten

Rufen Sie [.guihint]#Setup > Hosts > OpenTelemetry collector (experimental)# auf und starten Sie mit dem Knopf [.guihint]#Add OpenTelemetry collector configuration# die Einrichtung eines neuen Kollektors:

image::opentelemetry_collector_general_properties.png[alt="Die allgemeinen Eigenschaften des OpenTelemetry-Kollektors."]

In den [.guihint]#General properties# vergeben Sie eine ID und einen Titel für den neuen Kollektor.
Für [.guihint]#Site restriction# müssen Sie wenigstens einen Eintrag von der linken auf die rechte Seite verschieben.
Im obigen Screenshot ist die lokale xref:glossar#site[Instanz] `mysite` die einzig verfügbare.

image::opentelemetry_collector_collector_properties.png[alt="Die spezifischen Eigenschaften des OpenTelemetry-Kollektors."]

[#config_basics]
==== Grundeinstellungen

In den Eigenschaften des Kollektors achten Sie auf die folgenden Punkte:

* Sie müssen zumindest einen der beiden Push-Endpunkte (über gRPC oder HTTP) oder einen Prometheus-Scraper (Pull) einrichten.
Der Screenshot zeigt einen unverschlüsselten, nicht authentifizierten gRPC-Endpunkt auf dem Standard-Port 4317 auf allen IPv4-Adressen (`0.0.0.0`).

* Erstellen Sie wenigstens ein Feld für die [.guihint]#Host name computation#.
Im Beispiel ist die einfachste Möglichkeit ausgewählt: das per OpenTelemetry empfangene Feld `service.name` wird als Host-Name in {CMK} verwendet.
In der xref:user_interface#inline_help[Inline-Hilfe] finden Sie mehr Informationen zu den Möglichkeiten, wie Sie aus den OpenTelemetry-Daten Host-Namen erstellen lassen können.

[TIP]
====
Ist eine etwas komplexere Erstellung der Host-Namen gewünscht, speichern Sie die Kollektorkonfiguration und aktivieren Änderungen, ohne eine Regel für die [.guihint]#Host name computation# hinzugefügt zu haben.
Sorgen Sie dann dafür, dass Metriken zum Kollektor xref:test[geschickt werden].
Wenn Sie jetzt Regeln für die [.guihint]#Host name computation# hinzufügen, werden Vorschläge für die verfügbaren Felder angezeigt.
====


[#ec]
==== Logs zur Event Console schicken

OpenTelemetry bietet auch Möglichkeiten, Log-Meldungen zu übertragen.
Der Kollektor kann so konfiguriert werden, dass er diese im Syslog-Format an beliebige Anwendungen übertragen kann, die Syslog-Meldungen über TCP entgegennehmen können.
Im Kontext von {CMK} ist die Verarbeitung von Log-Meldungen durch die xref:ec#[Event Console] interessant.
Diese Funktion können Sie mit der Checkbox [.guihint]#Send log messages to event console# aktivieren.

[TIP]
====
Stellen Sie sicher, dass bereits auf Seiten der _OpenTelemetry Instrumentation_ ein sparsamer Versand von Log-Meldungen gewährleistet ist.
Wenn unklar ist, was alles beim {CMK} Server ankommt, aktivieren Sie temporär einen lokalen `rsyslogd`, der auf Port 514/TCP lauscht.
So können Sie einen Eindruck von den eingehenden Datenmengen bekommen, bevor Sie mit der Aktivierung der Event Console fortfahren.
====

Mit [.guihint]#Save# sichern Sie den Kollektor.


[#dcd]
=== Dynamische Host-Konfiguration einrichten

Damit automatisch Hosts erstellt werden, richten Sie eine neue xref:dcd#connection_opentelemetry[OpenTelemetry-Verbindung] mit der dynamischen Host-Konfiguration ein.
Vorbereitend empfehlen wir (zumindest für die ersten Tests) einen eigenen Ordner zu erstellen, in dem Sie die automatisch erzeugten OpenTelemetry-Hosts ablegen lassen.

Die Einrichtung der neuen Verbindung für die dynamische Host-Konfiguration erledigen Sie unter [.guihint]#Setup > Hosts > Dynamic host management > Add connection:#

image::opentelemetry_dcd_connection.png[alt="Eigenschaften einer OpenTelemetry-Verbindung in der dynamischen Host-Konfiguration."]

Im Kasten [.guihint]#Connection properties# nehmen Sie die folgenden Einstellungen vor:

* Setzen Sie [.guihint]#Connector type# auf [.guihint]#OpenTelemetry collector data.#

* Als Zielordner für die neuen Hosts ([.guihint]#Create hosts in#) wird im Beispiel der Ordner `OpenTelemetryTest` verwendet.

* Setzen Sie die [.guihint]#Host attributes# entsprechend Ihrer Systemumgebung. +
Sofern Sie sich nicht die Mühe gemacht haben, bei der Einrichtung des xref:collector_configuration[OpenTelemetry-Kollektors] Namen existierender Hosts zu erzeugen, werden die automatisch erstellten Hosts _virtuelle_ sein, die nur im Kontext von OpenTelemetry genutzt werden.
Sie können folglich als Monitoring-Agenten ausschließlich Spezialagenten verwenden ([.guihint]#Configured API integrations, no Checkmk agent#) und die Einstellungen für IP-Adressen auf [.guihint]#No IP# belassen.

* Durch Aktivieren der Checkbox bei [.guihint]#Service discovery# legen Sie fest, dass auf den automatisch erzeugten Hosts eine xref:glossar#service_discovery[Service-Erkennung] durchgeführt wird.
Dies führt dann zum gewünschten Ergebnis, wenn der Spezialagent für OpenTelemetry eingerichtet und aktiv ist.

* Für die anderen Parameter finden Sie mehr Informationen im Artikel zur xref:dcd#connection_properties_opentelemetry[dynamischen Host-Konfiguration.]

Sichern Sie die neue Verbindung mit [.guihint]#Save.#


[#special_agent]
=== Spezialagent konfigurieren

Damit auch {CMK}-Services erzeugt werden, muss wenigstens eine Konfiguration des OpenTelemetry-Spezialagenten erstellt werden.
Die benötigte Regel finden Sie unter [.guihint]#Setup > Agents > Other integrations > OpenTelemetry (experimental):#

image::opentelemetry_special_agent.png[alt="Die Regel zur Konfiguration des OpenTelemetry-Spezialagenten."]

Im Kasten [.guihint]#OpenTelemetry (experimental)# entscheiden Sie, ob Sie den OpenTelemetry-Kollektor selbst überwachen wollen -- über den Port, der bei der xref:collector_activation[Aktivierung des Kollektors] angezeigt wurde.

In der Bedingung der Regel ist es naheliegend, den Spezialagenten dem Ordner zuzuordnen, in dem die Hosts automatisch erstellt werden -- im Beispiel ist das der Ordner `OpenTelemetryTest`.

Sichern Sie die Regel mit [.guihint]#Save#.

Nachdem somit die drei Komponenten Kollektor, dynamische Host-Verwaltung und Spezialagent fertig konfiguriert sind, sollten Sie nun die ausstehenden xref:glossar#activate_changes[Änderungen aktivieren.]


[#test]
=== Testdaten an den Kollektor senden

Vermutlich werden Sie den OpenTelemetry-Kollektor für {CMK} deshalb aufsetzen wollen, weil in Ihrer IT-Umgebung schon _irgendwo_ _irgendetwas_ _irgendwelche_ OpenTelemetry-Metriken erzeugt.

Ist das noch nicht der Fall, oder wenn Sie die in diesem Artikel beschriebene beispielhafte Einrichtung schnell ausprobieren wollen, können Sie dies tun mit der in unserem GitHub-Repository bereitgestellten link:https://github.com/Checkmk/checkmk-docs/tree/master/examples/opentelemetry[Beispielapplikation „Hello metric“^], die in einer virtuellen Python-Umgebung ausgeführt wird.

Von dem Zeitpunkt des Sendens der ersten Daten über die Erzeugung des Hosts, der Service-Erkennung bis zur Sichtbarkeit im Monitoring vergehen etwa zwei bis drei Minuten.
Der folgende Screenshot zeigt die Services der „Hello metric“-Beispielapplikation:

image::opentelemetry_services.png[alt="Der mit der Beispielapplikation 'Hello metric' erzeugte OpenTelemetry-Service."]

Der Host-Name [.guihint]#hello-metric# wird aus dem Service-Namen generiert, der dem Kommando `opentelemetry-instrument` als Option mitgegeben wurde
-- genau so, wie es in der Konfiguration des xref:collector_configuration[OpenTelemetry-Kollektors] festgelegt wurde.
Der Service-Name [.guihint]#OTel metric hellolevel# in {CMK} wird aus dem Namen der Metrik erzeugt, wobei der Präfix [.guihint]#OTel metric# vom Spezialagenten hinzugefügt wird.

Wenn Sie bei der xref:special_agent[Konfiguration des Spezialagenten] die Option [.guihint]#Monitor the collector# aktivieren, also die Selbstüberwachung des Kollektors, werden beim Host eine Reihe zusätzlicher Services erstellt.

Ganz ähnlich wie „Hello metric“ funktioniert auch die auf der OpenTelemetry-Website vorgestellte Beispielapplikation „Dice Roll“.
Diese Beispielapplikation ist in vielen Aspekten praxisnäher als „Hello metric“.
So verschickt „Dice Roll“ bei jedem Aufruf des Applikationsservers (und nur dann!) OpenTelemetry-Metriken und führt den Datentyp 
„Counter“ ein.
Sie können die für das „Hello metric“-Beispiel erzeugte virtuelle Python-Umgebung nutzen, um auch das „Dice Roll“-Beispiel auszuprobieren.
Allerdings müssen Sie dazu zusätzlich noch das Python-Modul `flask` installieren (`pip install flask`) und die Datei `app.py` in der um Metriken erweiterten Variante erstellen, wie es in dieser link:https://opentelemetry.io/docs/languages/python/getting-started/#metrics[Anleitung^] beschrieben ist.

Im folgenden Aufruf ersetzen Sie dann den {CMK}-Server als Ziel (hier `198.51.100.42` mit gRPC-Port 4317):

[{shell-raw}]
----
{c-user} opentelemetry-instrument \
    --traces_exporter console \
    --metrics_exporter otlp \
    --exporter_otlp_metrics_endpoint http://198.51.100.42:4317 \
    --logs_exporter console \
    --service_name dice-server \
    flask run -p 8080
----

[TIP]
====
Die bis {CMK} {v24}p3 geltende Einschränkung auf exakt einen _Datenpunkt_ ist weggefallen.
Wie {CMK}-Metriknamen bei OpenTelemetry-Metriken mit mehreren Datenpunkten generiert werden, beschreibt das link:https://checkmk.com/werk/18209[Werk pass:q[#]18209^].
====

Ihr Flask-Server ist jetzt bereit und kann unter dem gewählten Port (hier: 8080) erreicht werden, um pro Aufruf einen Würfelwurf auszuführen.
Sie sehen die Würfeldaten zum Beispiel als Ausgabe von `curl -v \http://localhost:8080/rolldice`.
Jeder Würfelwurf, den Sie so auslösen, wird als ein Datenpunkt an {CMK} übertragen.

Im Monitoring wird nach einigen Minuten der Host [.guihint]#dice-server# erscheinen mit dem Service [.guihint]#OTel metric dice.rolls#.
Diese hat sechs Graphen, `pass:[Value_1__Per_Sec]` bis `pass:[Value_6__Per_Sec]`, welche den Raten der bisher gewürfelten Zahlen eins bis sechs entspricht.
Hintergrund der Umwandlung ist, dass die OpenTelemetry-Metriken _Zähler_ (_Counter_) verwenden, welche nur zunehmen können – ein Datentyp, der in {CMK} nicht vorgesehen ist.
Für eine übersichtlichere Darstellung erfolgt daher in Checkmk die Umwandlung unter Berücksichtigung der Zeitkomponente.

Der Screenshot zeigt einen dieser Graphen, dem das sekündliche Aufrufen von `/rolldice` innerhalb des Überwachungszeitraums zugrunde liegt.

.OpenTelemetry-Metriken verwenden einfache und doppelte Unterstriche, Einheiten werden – falls mitgeliefert – dem Metriknamen angehängt (hier: _per sec_, also _pro Sekunde_)
image::opentelemetry_diceroll_5rate.png[alt="Graph der Rate, wie häufig die Zahl 5 gewürfelt wird."]


[#threshold]
=== Services anpassen

Für die Services können Sie Schwellwerte und mehr festlegen mit der Regel [.guihint]#Setup > Services > Service monitoring rules > OpenTelemetry (experimental).#
Hier haben Sie die Möglichkeit, Regeln für einzelne oder alle Metriken eines Services festzulegen.
Der Beispiel-Screenshot zeigt die Auswahl des oben bereits gezeigten Zählers für Würfe mit der Zahl 5.
Namen bekannter Metriken sind über die Liste beziehungsweise als Vorschlag während des Tippens zugänglich.
Noch unbekannte Metriken, bei denen Sie wissen, dass sie erscheinen werden, können Sie als Freitext eintragen.

Je nachdem, welchen Datentyp der OpenTelemetry-Datenpunkt liefert, kann es sinnvoll sein, Raten berechnen zu lassen.
Bei Zählern – wie für verworfene Netzwerkpakete – ist dies sinnvoll.
Liefern mehrere Quellen Daten, die ein und demselben {CMK}-Service zugeordnet sind, können Sie darüber hinaus festlegen, ob eine Aggregierung (beispielsweise Summe oder Durchschnitt) vorgenommen werden soll oder schlicht die jüngsten, größten oder kleinsten Datenpunkte eines Intervalls dominieren.

image::opentelemetry_service_rules.png[alt="Einstellung der Service-Regeln."]


// == Troubleshooting


[#files]
== Dateien und Verzeichnisse

[cols="50,~",options="header"]
|===
|Pfad |Bedeutung
| `~/var/check_mk/otel_collector/host_monitoring/` |Hier entstehen OpenTelemetry-Daten.
Für jeden Host wird ein Unterverzeichnis erstellt.
Die dort erstellten Dateien sind im JSON-Format.
| `~/var/log/otel-collector.log` |Log-Datei des OpenTelemetry-Kollektors.
| `~/tmp/check_mk/otel_collector/self+monitoring/` |Temporäres Verzeichnis, in dem aggregierte Daten des Kollektors für die Auswertung durch den Spezialagenten abgelegt werden.
| `~/tmp/check_mk/otel_collector/autocompleter/` |Temporäres Verzeichnis, in dem von der Vorschlagsfunktion (Listeneinträge und Vorschläge beim Tippen) benötigte Dateien abgelegt werden.
|===
