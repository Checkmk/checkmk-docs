// -*- coding: utf-8 -*-
// IGNORE CTRL+D Benachrichtigungs XYZ TODO p22 p23
include::global_attr.adoc[]
= Updates und Upgrades
:revdate: 2024-05-08
:title: Updates und Upgrades
:description: Egal, ob Raw oder eine der kommerziellen Editionen: {CMK} zu aktualisieren ist so einfach, wie möglich. Die Prinzipien dazu werden hier erklärt.

{related-start}
xref:cmk_versions#[{CMK}-Versionen]
xref:cmc#[Der {CMK} Micro Core]
xref:cmc_migration#[Migration auf den CMC]
{related-end}


== Einleitung

Das Update von {CMK} auf eine neue Version läuft etwas anders als bei anderer Software.
Warum?

Grund ist, dass {CMK} nicht nur mehrere unabhängige *Instanzen* (_sites_) auf einem Server erlaubt,
sondern auch mehrere gleichzeitig installierte xref:cmk_versions#[Software-Versionen.]
Dabei ist jede Instanz einer installierten Version zugeordnet.
Nehmen Sie als Beispiel folgende Situation auf einem fiktiven Server:

image::update1.png[width=400]

Hier verwendet die Instanz `mysite1` die Version `2.0.0p3.cee`, die Instanzen `mysite2` und `mysite3` die Version `2.0.0p1.cre`.
Die {CMK}-Version `2.0.0p1.cfe` ist zwar installiert, wird aber aktuell nicht verwendet.

Dieses Beispiel macht klar, dass ein Update nicht einfach nur die Installation eines neuen RPM/DEB-Pakets von {CMK} auf dem Server bedeuten kann.
Vielmehr braucht es dazu noch einen weiteren Schritt.
Nehmen Sie nun als Beispiel folgende Situation:

image::update2.png[width=400]

Hier soll die Instanz `mysite` auf die {CMK}-Version `2.0.0p3.cee` aktualisiert werden.
Der erste Schritt ist das Herunterladen und Installieren des passenden RPM/DEB-Pakets.
Dies geschieht genauso wie bei der xref:install_packages#[ersten Installation.]
Die neu installierte Version wird zunächst noch von keiner Instanz verwendet und das sieht dann so aus:

image::update3.png[width=400]

Als zweiter Schritt erfolgt nun ein Update der Instanz von `2.0.0p1.cre` auf `2.0.0p3.cee`.
Dies geschieht durch den Befehl `omd update`, welchen Sie weiter unten im Detail kennenlernen:

image::update4.png[width=400]

Nach dem Update können Sie die (eventuell) nicht mehr benötigte Version `2.0.0p1.cre` durch das Deinstallieren des entsprechenden Pakets entfernen.


[#before_update]
== Vor dem Update

Falls Sie ein Update der {CMK}-Version {v22} auf {v23} planen, sollten Sie zuerst den Artikel xref:update_major#[Update auf Version 2.3.0] lesen, in dem wir die wichtigsten Themen zusammengetragen haben, die Sie vor und nach einem solchen Update beachten sollten.

Aber auch, wenn Sie bereits eine {v23}-Version installiert haben und auf eine neue stabile Patch-Version der {v23} updaten wollen, können die in den folgenden Abschnitten beschriebenen Themen relevant sein.


[#update_major_version]
=== Update der Major-Version

Bei einem Update auf eine höhere Major-Version müssen Sie immer direkt auf die nächste Version aktualisieren und können nicht einfach eine überspringen.
Wenn Sie also beispielsweise von {v21} auf {v23} aktualisieren wollen, aktualisieren Sie zunächst auf die {v22}.
Der Grund ist simpel: Zwischen zwei Major-Versionen gibt es bisweilen schlicht so viele Änderungen, dass es beim Überspringen zu Problemen kommen würde.
// Diese Empfehlung setzt `omd update` durch eine Sperre um und gibt gegebenenfalls eine entsprechende Warnmeldung aus.
// MFS: Wollen wir das drinlassen? Evtl. benötigen wir ein Macro für HIC SVNT DRACONES?
// Dennoch können Sie ein solches Updates durchführen, indem Sie den Vorgang mit der Option `-f` erzwingen:
////
[{shell}]
----
{c-omd} omd -f update
----

*Achtung:* Auf diese Weise aktualisierte Instanzen werden von uns nicht mehr unterstützt!
////

//SP: Ich würde sowohl den oberen Absatz als auch den unterhalb auskommentierten Teil entfernen. Da sollte meiner Meinung nach nur jemand "rumfummeln", der sich eigenständig damit auskennt. Niemand auf dumme Ideen bringen.

Der Befehl `omd update` ermöglicht auch die „Aktualisierung“ auf eine _niedrigere_ Version.
Diese Vorgehensweise ist nur bei Regressionen vorgesehen.
// und sollte nur nach Rücksprache durchgeführt werden.
Nach einem solchen Update in die Rückwärtsrichtung sind viele Anpassungen nötig, um Konfiguration und Laufzeitumgebung wieder kompatibel zu machen – insbesondere, aber nicht nur, bei einem "Update" auf eine niedrigere Major-Version.
Daher raten wir von diesem Vorgehen dringend ab – und können auch bei einem Update auf eine niedrigere Version keinen Support mehr bieten.


[#incompatible_mkps]
=== Inkompatible und obsolete MKPs

Über die xref:glossar#mkp[{CMK}-Erweiterungspakete (MKPs)] lässt sich Ihr Monitoring-System recht einfach und bequem erweitern.
Auf der einen Seite kommt es dabei vor, dass solche MKPs nicht weiter gepflegt werden und dann ggf. mit neuen Versionen von {CMK} nicht mehr kompatibel sind.
Auf der anderen Seite nehmen wir immer wieder neue Plugins und Funktionserweiterungen in {CMK} auf, weshalb MKPs mitunter obsolet werden.
Ihre Funktionalität wird schlicht von {CMK} selbst sichergestellt.

Falls Sie MKPs installiert haben, ist aus diesem Grund eine Prüfung dieser MKPs dringend geboten.
So verhindern Sie, dass inkompatible Pakete das Update behindern oder im Anschluss an das Update doppelte oder zumindest sehr ähnliche Services entstehen.

Prüfen Sie hierzu Ihre installierten MKPs gegen unseren link:https://checkmk.com/de/integrations[Katalog der Check-Plugins^] und entfernen Sie Pakete, welche inzwischen nativ von {CMK} bereitgestellt werden.
Bei dieser Gelegenheit können Sie auch MKPs entfernen, die eventuell nur mal für einen Probelauf installiert worden sind.
Eine Auflistung finden Sie im [.guihint]#Setup#-Menü unter [.guihint]#Maintenance > Extension packages#.
Auf der Kommandozeile können Sie sich installierte Erweiterungen mit dem Befehl `mkp list` anzeigen lassen.
Überprüfen Sie die Ausgabe dieses Befehls auf Erweiterungen, die nicht mehr benötigt werden oder die Sie gar nicht mehr zuordnen können.

{CMK} unterstützt zur Vorbereitung von Updates die Bereitstellung von MKPs für eine neuere als die aktuell laufende Version.
Beim Update wird dann das Paket für die niedrigere {CMK}-Version deaktiviert und das für die höhere aktiviert.
Details erklärt der xref:mkps#[Artikel zur Verwendung von MKPs].

*Achtung:*
Wenn Sie an Dateien, die ursprünglich MKPs entstammen, lokal Änderungen vorgenommen haben, packen Sie das MKP nach Erhöhung der Versionsnummer neu.
Während des Updates werden sonst geänderte Dateien durch die im MKP enthaltenen überschrieben.

// MFS: Sollte hier nicht besser der Verweis auf mkp find und die Empfehlung, vor dem Update MKPs zu erstellen, hin?
//SP: Nein, das wird ja im folgenden Abschnitt aufgeführt.

[#local_files]
=== Lokale Dateien

Mit lokalen Dateien können Sie die von {CMK} bereitgestellte Funktionalität anpassen und erweitern.
Diese Dateien befinden sich im lokalen Teil der Instanzverzeichnisstruktur, d.&thinsp;h. in `~/local`.
Lokale Dateien können bei einem Update Probleme bereiten, da sie eventuell nicht mehr zur neuen {CMK}-Version passen.

Da es für {CMK} bei einem Update nicht möglich ist, die lokalen Anpassungen und jede von einem Drittanbieter hergestellte Erweiterung abzufangen und zu behandeln, sollten Sie Ihre {CMK}-Instanz vor einem Update daraufhin überprüfen, ob lokale Dateien bei Ihnen verwendet werden und gegebenenfalls welche.

Verschaffen Sie sich einen Überblick über die lokalen Dateien Ihrer {CMK}-Instanz, indem Sie als Instanzbenutzer das folgende Kommando ausführen (bei dem die Option `-L` dafür sorgt, dass auch symbolischen Links gefolgt wird):

[{shell}]
----
{c-omd} find -L ~/local -type f
----

In einer frischen Installation von {CMK} wird Ihnen derzeit nur eine Datei namens `README.TXT` aufgelistet.
Alles, was darüber hinaus angezeigt wird, sollte ganz oben auf Ihrer Liste zur Fehlerdiagnose stehen, falls es beim Update Probleme geben sollte.

Im Idealfall sind lokale Dateien bereits vollständig in xref:#incompatible_mkps[MKPs] gebündelt.
Verwenden Sie `mkp find` um unpaketierte Dateien zu identifizieren.
Die weitere Vorgehensweise der Erstellung von Paketen zeigt unser xref:mkps#developers[Artikel zu {CMK}-Erweiterungspaketen.]
Einmal zu einem Paket zusammengefasst, kann eine Erweiterung als ganzes deaktiviert oder erneut aktiviert werden.


[#backup]
=== Backup und Probelauf

Die Selbstverständlichkeit, ein Backup unmittelbar vor dem Update zu erstellen, um im Falle eines Fehlschlags nicht allzu viel Ihrer Monitoring-Historie zu verlieren, müssen wir Ihnen nicht erklären.
An dieser Stelle relevant ist, dass ein reguläres Backup auch gute Dienste für den Probelauf eines Updates leisten kann.
So können Sie das Backup unter einem anderen Namen wiederherstellen – und anschließend mit der Instanz `newsite` das Update testen:

[{shell}]
----
{c-root} omd restore newsite /path/to/backup
----

*Alternativ* können Sie Ihre Instanz auch per `omd cp` kopieren.
Dafür muss die produktiv genutzte Instanz allerdings kurzzeitig gestoppt werden:

[{shell}]
----
{c-root} omd stop mysite && omd cp mysite newsite && omd start mysite
----

Führen Sie das Update im Anschluss erst einmal auf dieser neuen, geklonten Instanz durch, um hier beispielsweise die oben angesprochenen lokalen Änderungen in der neuen Umgebung zu prüfen.
Waren die Tests mit der geklonten Instanz erfolgreich, werden Sie diese aus Platz- und Performance-Gründen meist _vor_ dem eigentlichen Update der Produktivinstanz löschen oder zumindest stoppen wollen.

[TIP]
====
Seit {CMK} {v23} wird bei einem fehlgeschlagenen Update der vor dem Update vorhandene Zustand der Konfiguration wiederhergestellt.
Fehlschlagen kann ein Update durch einen unerwarteten internen Fehler, aber auch durch Benutzereingabe während des Update-Prozesses, zum Beispiel durch Auswahl der Menüoption `abort` oder durch Drücken der Tastenkombination `CTRL+C`.
Die Wiederherstellung der Konfiguration ersetzt kein vollständiges Backup, hilft aber in vielen Fällen, Ausfallzeiten zu verkürzen.
====


[#detailed]
== Update von {CMK}

=== Installation neuer Versionen

Wie in der Einleitung beschrieben, ist der erste Schritt beim Update die xref:install_packages#[Installation] der gewünschten neuen xref:cmk_versions#[Version] von {CMK}.
Dies erfolgt genau wie bei der ersten Installation  --  allerdings wird es wohl etwas schneller gehen, weil die meisten abhängigen Pakete jetzt schon installiert sind.
In folgendem Beispiel installieren wir das Paket für Ubuntu 22.04 (Jammy Jellyfish):

[{shell}]
----
{c-root} apt install /tmp/check-mk-enterprise-2.3.0p1_0.jammy_amd64.deb
----

*Hinweis:* Wenn Sie ein lokal vorliegendes Paket mit `apt install` installieren, müssen Sie den vollständigen Pfad zu der .deb-Datei angeben.

Die Liste der installierten {CMK}-Versionen können Sie jederzeit mit dem Befehl `omd versions` abrufen:

[{shell}]
----
{c-root} omd versions
2.1.0p42.cre
2.2.0p22.cee
2.3.0p1.cee (default)
----

Eine dieser Versionen ist mit `(default)` markiert.
Diese Standardversion wird automatisch beim Anlegen von neuen Instanzen verwendet, sofern Sie nicht mit `omd -V myversion create mysite` eine andere angeben.
Die aktuelle Standardversion können Sie mit `omd version` abfragen und mit `omd setversion` ändern:

[{shell}]
----
{c-root} omd version
OMD - Open Monitoring Distribution Version 2.3.0p1.cee
{c-root} omd setversion 2.2.0p22.cee
{c-root} omd version
OMD - Open Monitoring Distribution Version 2.2.0p22.cre
----

Beim Verwalten _bestehender_ Instanzen spielt die Standardversion keine Rolle.
Der `omd`-Befehl startet immer mit der Version, die zur Instanz passt, für die der Befehl aufgerufen wird.

Eine Auflistung der aktuellen Instanzen und welche Versionen diese verwenden liefert der Befehl `omd sites`:

[{shell}]
----
{c-root} omd sites
SITE             VERSION          COMMENTS
mysite           2.2.0p22.cee
test             2.3.0p1.cee      default version
----


[#execute]
=== Durchführen des Updates

Nachdem die gewünschte neue Version installiert ist, können Sie das Update der Instanz durchführen.
Dazu sind keine `root`-Rechte erforderlich.
Machen Sie das Update am besten als Instanzbenutzer:

[{shell}]
----
{c-root} omd su mysite
----

Stellen Sie sicher, dass die Instanz gestoppt ist:

[{shell}]
----
{c-omd} omd stop
----

Das Updaten -- also eigentlich das Umschalten auf eine andere Version -- geschieht nun einfach mit dem Befehl `omd update`:

[{shell}]
----
{c-omd} omd update
----

Falls es mehr als eine mögliche Zielversion gibt, bekommen Sie diese zur Auswahl:

image::update_omd-update-2.png[width=55%]

Bestätigen Sie in der folgenden Dialogbox das gewählte Update auf die neue Version:

image::update_omd-update-3.png[width=55%]

Wenn Sie gleichzeitig zum _Versions-Update_ ein _Editions-Upgrade_ von einer {RE} auf eine der kommerziellen Editionen durchführen, werden Sie sicherheitshalber noch einmal auf diesen Umstand hingewiesen:

image::update_raw_to_enterprise.png[width=55%]

Ein wichtiger Teil des Updates ist das Aktualisieren von mitausgelieferten Konfigurationsdateien.
Dabei werden von Ihnen eventuell vorgenommene Änderungen in diesen Dateien nicht einfach verworfen, sondern zusammengeführt.
Dies funktioniert sehr ähnlich zu Versionskontrollsystemen, die versuchen, gleichzeitige Änderungen mehrerer Entwickler in der gleichen Datei automatisch zusammenzuführen.

Manchmal -- wenn die Änderungen die gleiche Stelle der Datei betreffen -- funktioniert das nicht und es kommt zu einem _Konflikt_.
Wie Sie diesen lösen können, zeigen wir xref:update#conflicts[weiter unten.]

Das Update zeigt eine Liste aller angepassten Dateien und Verzeichnisse (im folgenden Beispiel gekürzt):

[{shell},highlight=23]]
----
2024-04-09 15:55:04 - Updating site 'mysite' from version 2.2.0p23.cee to 2.3.0p1.cee...

 * Installed dir  etc/default
 * Updated        etc/mk-livestatus/nagios.cfg

...
 * Vanished       etc/jmx4perl/config/websphere
 * Vanished       etc/jmx4perl/config
Creating temporary filesystem /omd/sites/mysite/tmp...OK
ATTENTION
  Some steps may take a long time depending on your installation.
  Please be patient.

Cleanup precompiled host and folder files
Verifying Checkmk configuration...
 01/05 Rulesets...
 02/05 UI extensions...
 03/05 Agent based plugins...
 04/05 Autochecks...
 05/05 Deprecated .mk configuration of plugins...
Done (success)

Completed verifying site configuration. Your site now has version 2.3.0p1.cee.
Executing update-pre-hooks script "01_init_state_creation.py"...OK
Executing update-pre-hooks script "01_mkp-disable-outdated"...OK
Executing update-pre-hooks script "02_cmk-update-config"...
-| ATTENTION
-|   Some steps may take a long time depending on your installation.
-|   Please be patient.
-| 
-| Cleanup precompiled host and folder files
-| Verifying Checkmk configuration...
-|  01/05 Rulesets...
-|  02/05 UI extensions...
-|  03/05 Agent based plugins...
-|  04/05 Autochecks...
-|  05/05 Deprecated .mk configuration of plugins...
-| Done (success)
-| 
-| Updating Checkmk configuration...
-|  01/25 Cleanup microcore config...
...
-|  25/25 Update core config...
-| Generating configuration for core (type cmc)...
-| Starting full compilation for all hosts Creating global helper config...OK
-|  Creating cmc protobuf configuration...OK
-| Done (success)
OK
Finished update.
----

Wenn die in der obigen Ausgabe hervorgehobene Zeile `Completed verifying site configuration` angezeigt wird, ist die Instanz auf die neue Version umgeschaltet:

[{shell}]
----
{c-omd} omd version
OMD - Open Monitoring Distribution Version 2.3.0p1.cee
----

&#8230; und kann gestartet werden:

[{shell}]
----
{c-omd} omd start
----


[#incompatible]
=== Inkompatible Änderungen

Software-Entwicklung bedeutet Änderung.
Und da wir immer daran arbeiten, {CMK} modern zu halten, kommen wir manchmal nicht drumherum, alte Zöpfe abzuschneiden und Änderungen zu machen, die _inkompatibel_ sind.
Das bedeutet, dass Sie nach einem Update _eventuell_ Ihre Konfiguration anpassen oder wenigstens überprüfen sollten.

Ein typisches Beispiel dafür sind neue Check-Plugins, die bestehende Plugins ersetzen.
Falls Sie eines der betroffenen Plugins einsetzen, ist nach dem Update eine erneute xref:glossar#service_discovery[Service-Erkennung] auf den betroffenen Hosts notwendig.

Eine Übersicht über alle Änderungen in {CMK}, inklusive einer Suchfunktion, finden Sie online in unseren link:https://checkmk.com/de/werks[Werks.^]

Noch praktischer ist aber die in {CMK} eingebaute Funktion zur Recherche.
Nachdem Sie sich an der Instanz angemeldet haben, finden Sie oben im [.guihint]#Help#-Menü einen rot hinterlegten Link mit der Zahl inkompatibler _und_ noch nicht bestätigter Änderungen:

image::update_help_menu_incompatible_werks.png[alt="Help-Menü mit Link zur Liste der inkompatblen Änderungen.",width=65%]

{CMK} verfolgt die beim Update zur aktuellen Version angefallenen inkompatiblen Änderungen und fordert Sie auf, diese zu überprüfen und dann zu bestätigen (_acknowledge_):

image::update_incomp_werks.png[alt="Liste der inkompatiblen und offenen Änderungen."]

Wenn Sie diese Seite über den rot hinterlegten Link im [.guihint]#Help#-Menü öffnen, werden Ihnen nur die „Werks“ (d.h. die Änderungen) angezeigt, bei denen etwas zu tun ist, und die daher mit [.guihint]#Incompatible - TODO# gekennzeichnet sind.
Sie können jedes Werk einzeln aufrufen, ansehen, per Mausklick bestätigen -- und damit die Zahl der offenen, inkompatiblen Änderungen sukzessive verringern.
Zusätzlich haben Sie mit dem Menüeintrag [.guihint]#Help > Change log (Werks)# Zugriff auf die komplette Historie der Änderungen in der aktuellen Major-Version.


=== Das Update im Detail

Sind Sie neugierig, was beim Update genau „unter der Haube abläuft“?
Oder haben Sie beim Durchlauf von `omd update` Konflikte in Dateien bekommen?
Dann sollten Sie hier weiterlesen.

Bei `omd update` geschehen drei Dinge:

. Aktualisieren von Standarddateien unter `~/etc/` und `~/var/`, also solchen Dateien, die bei `omd create` erzeugt wurden.

. Umschalten der Version auf die Zielversion durch Ändern des symbolischen Links `version`, welcher sich im Instanzverzeichnis befindet.

. Nachbearbeitungen durch verschiedene Pakete (z.B. {CMK}).
Insbesondere werden automatisch die xref:glossar#activate_changes[Änderungen aktiviert], um eine valide Konfiguration für den Kern zu erzeugen.


==== Aktualisieren von Dateien, Zusammenführen von Änderungen

Der erste Schritt ist der bei weitem umfangreichste.
Hier zeigt sich ein großer Vorteil von {CMK} gegenüber klassischen Software-Installationen:
{CMK} hilft Ihnen, alle Standard-Konfigurationsdateien an die Erfordernisse der neuen Version anzupassen.
Dies ähnelt dem Vorgang beim Update einer Linux-Distribution, geht aber in der Umsetzung darüber hinaus.
So behandelt {CMK} eine Vielzahl von Fällen, zum Beispiel:

* Zusammenführen von Dateiänderungen mit lokalen Änderungen des Benutzers.
* Dateien, Verzeichnisse und symbolische Links, die in der neuen Version obsolet sind oder vom Benutzer gelöscht wurden.
* Änderungen an den Berechtigungen.
* Änderungen des Dateityps (aus Verzeichnis oder Datei wird symbolischer Link oder umgekehrt).
* Änderungen des Ziels von symbolischen Links.

Dabei achtet {CMK} stets darauf, dass Ihre lokalen Änderungen erhalten bleiben,
gleichzeitig aber alle für die neue Version notwendigen Änderungen umgesetzt werden.


[#conflicts]
==== Zusammenführen und Konflikte

Falls die neue Version eine Änderung an einer Konfigurationsdatei vorsieht, an der Sie inzwischen selbst Änderungen vorgenommen haben,
versucht {CMK}, beide Änderungen automatisch zusammenzuführen (_merge_).
Dies geschieht mit den gleichen Methoden, die auch Versionskontrollsysteme verwenden.

Am wenigsten Probleme gibt es immer dann, wenn Ihre und {CMK}s Änderungen räumlich weit genug auseinander liegen (mindestens ein paar Zeilen).
Dann erfolgt die Zusammenführung automatisch und ohne Ihre Hilfe.

Wenn zwei Änderungen kollidieren, weil sie die gleiche Stelle der Datei betreffen,
kann und will {CMK} nicht entscheiden, welche der beiden Änderungen wichtiger ist.
In diesem Fall werden Sie als Benutzer eingeschaltet und können den Konflikt interaktiv auflösen:

image::omd-update.png[width=85%]
//SP: Rückfrage aus Neugier: Das was hier bei "new" abgebildet ist, ist aber genaugenommen kein Update sondern ein Rückstieg auf eine ältere Version, oder?

Sie haben nun folgende Möglichkeiten:

[cols="5,~"]
|===

|*d* |Dies zeigt Ihnen die Unterschiede zwischen der neuen Standardversion der Datei und Ihrer Version in Form eines "unified diff" (`diff -u`).
|*y* |Dies ist ähnlich der vorherigen Funktion, zeigt aber ausgehend von der früheren Standardversion, welche Änderungen Sie an der Datei gemacht haben.
|*n* |Diese dritte Option schließt quasi das Dreieck und zeigt die Änderungen, welche {CMK} an der Datei vornehmen möchte.
|*e* |Lösen Sie den Konflikt manuell im Editor auf.
|*t* |Drücken Sie *t*, so wird Ihre Originaldatei  --  ohne die bereits erfolgreich zusammengeführten Änderungen  --  in einem Editor geöffnet. Editieren Sie nun die Datei, um eventuellen Konflikten aus dem Weg zu gehen. Nach dem Schließen des Editors probiert {CMK} die Zusammenführung erneut.
|*k* |Hier entscheiden Sie sich dafür, die Datei so zu übernehmen, wie sie jetzt ist. Die erfolgreich eingebauten Änderungen bleiben. Ansonsten bleibt die Datei so, wie von Ihnen angepasst.
|*r* |So stellen Sie Ihre Datei im Ausgangszustand wieder her und verzichten auf das Update von {CMK} für diese Datei. Möglicherweise notwendige Anpassungen müssen Sie selbst vornehmen.
|*i* |Installieren der neuen Standardversion der Datei: Ihre Änderungen an der Datei gehen verloren.
|*s* |Wenn Sie unsicher sind, können Sie mit *s* eine Shell öffnen. Sie befinden sich im Verzeichnis, in dem die betroffene Datei liegt, und können sich ein Bild von der Lage machen. Beenden Sie die Shell mit CTRL+D, um das Update fortzusetzen.
|*a* |Abbruch des Updates. Die Instanz bleibt auf der alten Version und deren vorherige Konfiguration wird wiederhergestellt. Sie können jederzeit einen neuen Update-Versuch starten.
|===


==== Weitere Konfliktsituationen

Neben dem inhaltlichen Zusammenführen von Dateien gibt es noch eine ganze Reihe weiterer Fälle, in denen {CMK} Ihre Entscheidung braucht.
Dies sind teils sehr ungewöhnliche Situationen, die aber trotzdem korrekte Behandlung brauchen.
{CMK} wird Ihnen in diesen Fällen stets die Auswahl geben, Ihre Version beizubehalten oder die neue Standardversion zu übernehmen.
Außerdem haben Sie immer die Möglichkeit eines Abbruchs oder können eine Shell öffnen.
Beispiele für solche Fälle sind:

* Kollidierende Änderungen des Dateityps (z.B. wenn eine Datei durch einen symbolischen Link ersetzt wird)
* Kollidierende Änderungen an den Dateirechten
* Geänderte Dateien, die in der neuen Version entfallen
* Von Ihnen angelegte Dateien, Verzeichnisse oder Links, die mit neuen Dateien/Verzeichnissen/Links kollidieren


==== Erklärung der Ausgaben beim Update

Immer wenn der Update-Vorgang automatisch Änderungen an Dateien macht, gibt er eine Zeile zur Erklärung aus.
Dabei gibt es folgende Möglichkeiten (wenn von Datei die Rede ist, gilt dies analog auch für Links und Verzeichnisse):

[cols="20,~"]
|===

|Updated |Eine Datei hat sich in der neuen Version geändert. Da Sie keine Änderungen an der Datei gemacht haben, setzt {CMK} einfach die neue Standardversion der Datei ein.
|Merged |Eine Datei hat sich in der neuen Version geändert, während Sie gleichzeitig andere Änderungen an der Datei gemacht haben. Beide konnten konfliktfrei zusammengeführt werden.
|Identical |Eine Datei hat sich in der neuen Version geändert. Gleichzeitig haben Sie die Datei selbst schon in genau der gleichen Art geändert. {CMK} muss nichts unternehmen.
|Installed |Die neue Version bringt eine neue Konfigurationsdatei mit, welche soeben installiert wurde.
|Identical{nbsp}new |Die neue Version bringt eine Datei mit, inzwischen haben Sie selbst die gleiche Datei mit dem gleichen Inhalt angelegt.
|Obsolete |In der neuen Version ist eine Datei (Link, Verzeichnis) weggefallen. Sie haben diese Datei sowieso schon gelöscht. Nichts passiert.
|Vanished |Auch hier ist eine Datei weggefallen, welche Sie aber weder gelöscht noch verändert haben. {CMK} entfernt diese Datei automatisch.
|Unwanted |Sie haben eine Datei gelöscht, die normalerweise vorhanden ist. Da sich in der neuen Version keine Änderung in der Datei ergeben hat, belässt es {CMK} dabei, dass die Datei fehlt.
|Missing |Sie haben eine Datei gelöscht, an der sich in der neuen Version Änderungen ergeben haben. {CMK} legt die Datei nicht neu an, warnt Sie aber durch diese Ausgabe.
|Permissions |{CMK} hat die Berechtigungen einer Datei aktualisiert, da in der neuen Version andere Rechte gesetzt sind.
|===


=== Update ohne Benutzerinteraktion

Möchten Sie das Software-Update von {CMK} automatisieren?
Dann werden Sie vielleicht erstmal an den interaktiven Rückfragen von `omd update` gescheitert sein.
Dafür gibt es eine einfache Lösung:
Der Befehl kennt nämlich Optionen, die speziell für den Einsatz in Skripten gedacht sind:

* Die Option `-f` oder `--force` direkt nach `omd` verhindert alle Fragen vom Typ „Sind Sie sicher...“.
* Die Option `--conflict=` direkt nach `update` setzt das gewünschte Verhalten bei einem Dateikonflikt.

Mögliche Werte für `--conflict=` sind:

[cols="20,~"]
|===

|`--conflict=keepold` |Behält im Konfliktfall Ihre eigene modifizierte Version der Datei. Eventuell ist {CMK} dann aber nicht lauffähig und ein manuelles Nacharbeiten erforderlich.
|`--conflict=install` |Installiert im Konfliktfall die neue Standardversion der Datei. Damit gehen lokale Änderungen in der Datei zumindest teilweise verloren.
|`--conflict=abort` |Bricht das Update im Konfliktfall ab und stellt die vorherige Konfiguration der alten Version wieder her.
|`--conflict=ask` |Dies ist das Standardverhalten, somit ist die Option in dieser Form eigentlich wirkungslos.
|===

Ein Beispiel für den kompletten Befehl für ein automatisches Update der Instanz `mysite` auf die Version `2.3.0p1.cee`:

[{shell}]
----
{c-root} omd stop mysite ; omd -f -V 2.3.0p1.cee update --conflict=install mysite && omd start mysite
----

Durch das `&amp;&amp;` vor dem `omd start` wird ein Starten der Instanz verhindert, falls das `omd update` mit einem Fehler abbricht.
Ersetzen Sie das `&amp;&amp;` durch ein Semikolon (`;`), falls Sie einen Start auch in diesem Fall unbedingt versuchen wollen.

Falls Sie sicher sind, dass Sie nur eine einzige {CMK}-Instanz auf dem Server haben, können Sie deren Namen zur Verwendung in einem Shell-Skript einfach in einer Variable einfangen:

[{shell}]
----
{c-root} omd sites --bare
mysite
{c-root} SITENAME=$(omd sites --bare)
{c-root} echo $SITENAME
mysite
----

Das ermöglicht Ihnen, obige Zeile vom Namen der Instanz unabhängig zu machen.
Ein kleines Shell-Skript könnte z.B. so aussehen:

.update.sh
[{file}]
----
#!/bin/bash
SITE=$(omd sites --bare)
VERSION=2.3.0p1.cee

omd stop $SITE
omd -f -V $VERSION update --conflict=install $SITE  && omd start $SITE
----


[#updatedistributed]
== Update in verteilten Umgebungen

Es gibt zwei unterschiedliche Vorgehensweisen, um das Update aller in einem xref:glossar#distributed_monitoring[verteilten Monitoring] beteiligten Instanzen –  d.h. der Zentralinstanz und der Remote-Instanzen – durchzuführen.

*Wichtig:*
Für welches Vorgehen Sie sich auch entscheiden:
Sie sollten auch in diesem Szenario vorher xref:backup#[Backups] aller Instanzen anlegen.

Das bevorzugte, sichere Vorgehen ist das _Update in einem Rutsch_, bei dem Sie folgende Schritte ausführen:

. Zunächst stoppen Sie alle Instanzen.
. Führen Sie dann das Update für alle Instanzen durch.
. Starten Sie die aktualisierten Instanzen wieder.

Ist dies nicht möglich – beispielsweise, weil die Umgebung auf Instanzen in verschiedenen Zeitzonen und betreuenden Teams verteilt ist – kann unter strengen Auflagen ein vorübergehender Mischbetrieb erfolgen.
Der Versionsunterschied darf bei Major-Updates exakt eine Version betragen und setzt immer ein bestimmtes Patchlevel der Ausgangsversion voraus.

Diese Reihenfolge muss dafür unbedingt eingehalten werden: Zunächst nehmen Sie die Aktualisierung aller Remote-Instanzen vor, erst als letztes führen Sie das Update der Zentralinstanz durch.
So ist sichergestellt, dass zu keinem Zeitpunkt eine von einer neueren {CMK}-Version erzeugte Konfiguration bei einer älteren {CMK}-Version landet.

Die folgende Tabelle zeigt die möglichen Kombinationen beim Update von {v22} zur {v23}:

[cols="17,17,17,~",options="header"]
|===
|Zentralinstanz |Remote-Instanz |Erlaubt?|Hinweise
|{v22} |{v22} |Ja | Zustand vor dem Update aller Instanzen.
|{v22} |{v23} |Ja | Während des Updates sind kleinere Funktionseinbußen zu erwarten, halten Sie den Mischbetrieb daher kurz. Es besteht keine Gefahr für Daten und Konfiguration.
|{v23} |{v22} |*Nein* | *Achtung:* Bei einem xref:glossar#central_setup[zentralem Setup] besteht hier die Gefahr, Remote-Instanzen irreparabel zu beschädigen. Vermeiden Sie diesen Zustand unbedingt!
|{v23} |{v23} |Ja | Zustand nach dem Update aller Instanzen.
|===

=== Technische Hintergründe

Der technische Grund für die Vorgehensweise liegt in den verwendeten Protokollen:
Die Zentralinstanz greift auf die Daten der Remote-Instanzen primär lesend via xref:glossar#livestatus[Livestatus] zu.
Bei zentralem Setup zudem schreibend über eine nicht öffentliche HTTP-API.
In beiden Fällen gilt, dass neue Versionen echte Obermengen der verwendeten Protokolle einführen.
So nutzt eine ältere Zentralinstanz nur eine echte Teilmenge der Funktionalität der neueren Remote-Instanzen.
Würde man die Zentralinstanz zuerst aktualisieren, würde sie bei den Remote-Instanzen möglicherweise API-Aufrufe oder Livestatus-Anfragen verwenden, welche diese noch nicht verstehen.

Der maximale Versionsunterschied _einer_ Major-Version resultiert wiederum daraus, dass die Entfernung von Schnittstellen mit einer _Schonfrist_ genau einer Version einhergeht.
So wurde die Web-API intern bereits von {CMK} {v21} nicht mehr benutzt, ihre Abschaffung erfolgte aber erst mit Version {v22}.
Aus diesem Grund arbeitet eine {v21} Zentralinstanz mit {v22} Remote-Instanzen zusammen, nicht jedoch eine {v20} Zentralinstanz mit {v22} Remote-Instanzen.


=== Erweiterungspakete bei zentralem Setup

Um die phasenweise Aktualisierung zu erleichtern, bietet {CMK} die Möglichkeit, gleichnamige Erweiterungspakete in verschiedenen Versionen – eines passend zur älteren Zentralinstanz, eines passend zu den neueren Remote-Instanzen – zu hinterlegen.
Aktiviert wird das jeweils passende.
Details beschreibt der xref:mkps#[Artikel zu Erweiterungspaketen (MKPs)].


=== Cascading Livestatus

Bei der Verwendung von xref:distributed_monitoring#viewer[Viewer-Instanzen] dürfen die Viewer-Instanzen erst nach den Instanzen aktualisiert werden, deren Daten sie anzeigen.
Zeigt eine Viewer-Instanz nur Daten von Remote-Instanzen, kann deren Aktualisierung erfolgen, sobald diese aktualisiert sind.
Zeigt sie dagegen auch Daten der Zentralinstanz, darf ihre Aktualisierung erst als letztes stattfinden.


[#updatedocker]
== Update eines Docker-Containers

Der Update-Prozess für eine {CMK}-Instanz im Docker-Container ist sehr einfach.
Es gibt lediglich die folgenden Voraussetzungen:

* Der Container wird nicht gelöscht, wenn er gestoppt wird.
Das heißt, die Option `--rm` wurde beim Starten nicht benutzt.

* Sie kennen die ID des Datenspeichers (_volume_) zum Container.
Normalerweise sollten Sie beim Start des Containers seinem Speicher eine eindeutige ID gegeben haben.
Wenn Sie sich unsicher sind, wie die ID Ihres Volumes ist, können Sie Informationen zum Container namens `myContainer` mit dem xref:managing_docker#commands[Kommando] `docker inspect myContainer` abrufen.

Wenn Sie der xref:introduction_docker#[Installationsanleitung für {CMK} in Docker] gefolgt sind, sollten Sie die Voraussetzungen automatisch erfüllt haben.

Die Aktualisierung selbst ist in 3 Schritten erledigt:

. Stoppen Sie den Container.
Wenn der {CMK}-Container `myContainer` heißt, lautet der Befehl: `docker stop myContainer`.

. Entfernen Sie den Container.
Der Befehl dazu ist: `docker rm myContainer`.

. Starten Sie einen neuen Container mit dem Befehl `docker container run` mit der gewünschten Version und binden Sie das bekannte Volume ein.
Wenn Ihr Volume `myVolume` heißt, ist die entsprechende Option `-v myVolume:/omd/sites`.
Alle Optionen des Kommandos finden Sie in der xref:introduction_docker#[Installationsanleitung für {CMK} in Docker.]
// TK: Der Link ist nicht 100%ig sinnvoll, da das Start-Kommando davon abhängt, wie der Container installiert wurde.

Danach wird {CMK} automatisch den Rest erledigen und Ihre {CMK}-Instanz aktualisieren und starten. Sie können sich danach wie gewohnt anmelden.


[#upgrade]
== Upgrades

Upgrades von {CRE} auf eine der kommerziellen Editionen oder von einer der kommerziellen Editionen auf eine andere mit größerem Funktionsumfang sind jederzeit unkompliziert möglich.
Das Vorgehen ist im wesentlichen immer gleich:
Installieren Sie das gewünschte Paket und stellen Sie betroffene Instanzen mit `omd update` um.
// MFS: Screenshot dahin muss.
// TK: Echt? Wenn du meinst... Dann kannst Du update_raw_to_enterprise.png von oben nehmen.
Wenn Sie auf eine der kommerziellen Editionen upgraden, müssen Sie diese nach dem Upgrade xref:license#[lizenzieren.]

Beim Upgrade einer kommerziellen Version auf eine mit größerem Funktionsumfang ist immer _nach_ dem Upgrade die Lizenz neu einzutragen.
Dies gilt auch für Fälle, in denen Ihr Sales-Kontakt zugesichert hat, dass Sie nach einem Lizenz-Upgrade Ihre "niedrigere" {CMK}-Umgebung bereits mit der "höheren" Lizenz nutzen können:
Beim Upgrade wird der Lizenzstatus zurückgesetzt (die Historie bleibt erhalten), daher muss die Lizenz neu hinterlegt werden.

[#updateraw]
=== Upgrade {RE} auf eine der kommerziellen Editionen

Dieses Kapitel deckt primär das Upgrade zu {SE} ab.
Sie können in einem Schritt auch zu {CE} upgraden, beachten Sie in diesem Fall jedoch auch die Hinweise im folgenden Abschnitt.

Da die kommerziellen Editionen etliche zusätzliche Module und Features haben, gibt es nach der Umstellung ein paar Dinge zu beachten.
Der entscheidende Punkt ist, dass beim Anlegen von _neuen_ Instanzen der {RE} bzw. der kommerziellen Editionen _unterschiedliche Standardeinstellungen_ gesetzt werden.


==== Nagios vs. CMC

Da {RE} nur Nagios als Kern unterstützt, ist dieser bei Instanzen voreingestellt, die mit {RE} erstellt wurden.
Diese Einstellung bleibt beim Upgrade auf {CSE} erhalten.
Das bedeutet, dass Sie nach einem Upgrade zunächst weiterhin mit Nagios als Kern fahren.
Eine Umstellung auf den CMC erfolgt auf der Kommandozeile mit `omd config` oder in [.guihint]#Setup > Global settings# und wird in dem Artikel zur xref:cmc_migration#[Migration auf den CMC] beschrieben.

==== RRD-Format

Die kommerziellen Editionen unterstützen ein alternatives Format für die Speicherung historischer Messdaten, welches deutlich weniger Platten-I/O erzeugt.
Bei neuen Instanzen der kommerziellen Editionen ist dies automatisch voreingestellt.
Instanzen {RE} werden auch hier beim Upgrade nicht automatisch umgestellt.
Wie das Umstellen geht, beschreibt ein eigener xref:graphing#rrdformat[Abschnitt] im Artikel über Messwerte und Graphen.


==== Weitere Unterschiede

Um vollen Nutzen aus {SE} ziehen zu können, beachten Sie die Übersicht der Unterschiede zwischen {RE} und xref:cse#[{SE}.]


[#cee2cce]
=== Upgrade von {SE} auf {CE}

Am Monitoring-Kern und dem Benachrichtigungssystem gibt es keine Unterschiede zwischen {SE} und {CE}.
Je nach Schwerpunkt des Einsatzes werden Sie den größeren Funktionsumfang oft erst beim Hinzufügen neuer Hosts nutzen.
An einigen Stellen ist dennoch die Überprüfung der vorhandenen Einstellungen angeraten.

Eine vollständige Übersicht der zusätzlichen Funktionalität bietet der Artikel zu xref:cce#[{CE} (Self-hosted).]


==== Check-Plugins für Cloud-Services

Wenn Sie xref:monitoring_aws#[Amazon Web Services (AWS),] xref:monitoring_azure#[Microsoft Azure] oder xref:monitoring_gcp#[Google Cloud Platform (GCP)] überwachen, sind die {CE} vorbehaltenen Services bestehender Hosts zunächst nicht aktiviert.
Sie können diese in der Regel [.guihint]#XYZ services to monitor# (wobei XYZ für den Namen der Cloud-Plattform steht) aktivieren.
Führen Sie anschließend eine xref:glossar#service_discovery[Service-Erkennung] bei diesen Hosts durch, um die nun verfügbaren Services zu finden.


==== Agent Controller im Push-Modus

Mit der Möglichkeit, Hosts direkt zu überwachen, welche zwar den {CMK}-Server erreichen können, aber nicht von diesem erreichbar sind, fällt in vielen Fällen die Notwendigkeit selbst gestrickter Lösungen mit xref:datasource_programs#[Datenquellen-Programmen] weg.
Sie können diese Hosts xref:agent_linux#changepush[auf Push-Modus umstellen] und so direktes Monitoring ermöglichen.


[#editiondistributed]
=== Editions-Upgrades in verteilten Umgebungen

Beachten Sie, dass in verteilten Umgebungen immer zuerst das Update der Version durchgeführt werden muss, bevor das Upgrade der Edition folgen kann.
Eine andere Reihenfolge oder ein _Crossgrade_ (Update der Version und Upgrade der Edition in einem Schritt) ist nicht vorgesehen.
Als generelles Vorgehen empfehlen wir das Offline-Upgrade, bei dem von einer beliebigen niedrigeren Edition auf eine beliebige höhere Edition gesprungen werden kann.

Bei zwei häufig nachgefragten Upgrade-Szenarien (xref:cre2cee_distributed[{RE} nach {SE}] und xref:cee2cce_distributed[{SE} nach {CE}]) ist ein Mischbetrieb für einen eingeschränkten Zeitraum möglich.
Während das Offline-Upgrade mit allen Versionen funktioniert, erfordern die beiden Online-Szenarien wenigstens {CMK} {v22}p23.


[#offline_distributed]
==== Offline-Upgrade (alle Kombinationen)

Da das Mischen von Editionen nur in wenigen Kombinationen möglich ist, empfehlen wir grundsätzlich, das Upgrade der Edition _offline_ durchzuführen.
Gehen Sie dafür wie folgt vor:

. Stoppen Sie alle Instanzen.
. Führen Sie das Upgrade der Zentralinstanz durch.
. Wenn Sie möchten (und eine Fülle von Benachrichtigungen kein Problem darstellt), können Sie die Zentralinstanz sofort wieder starten.
. Nun steht das Upgrade der Remote-Instanzen an. Dieses können Sie parallel durchführen und einzelne Remote-Instanzen nach dem Upgrade sofort wieder starten.

Selbstverständlich können Sie mit dem Start warten, bis alle Instanzen das Upgrade erhalten haben, was die Zahl von Benachrichtigungen etwas reduziert.


[#cre2cee_distributed]
==== {RE} nach {SE} (online)

{CMK} erlaubt nur den Mischbetrieb von {SE} als Zentralinstanz mit {RE} oder {CE} als Remote-Instanzen.
Für das Upgrade nach {SE} bedeutet dies, dass die Zentralinstanz das Update _zuerst_ erhält.
Während des Mischbetriebes sollte keine Übertragung der Konfiguration von der Zentralinstanz zu den Remote-Instanzen durchgeführt werden, die noch kein Upgrade erhalten haben.
Daher empfehlen wir, für die Dauer des Mischbetriebes auf der Zentralinstanz via [.guihint]#Setup > General > Read only mode# die Änderung der Konfiguration zu unterbinden.
Theoretisch kann dieser Mischbetrieb von {SE} als Zentralinstanz mit {RE} als Remote-Instanz beliebig lange währen.
// TK: Ok, solange man die Konfiguration nicht ändert. Ist das wirklich ein Punkt, den man hervorheben muss/sollte?

Für das Upgrade ergibt sich daraus folgende Reihenfolge:

. Führen Sie das Upgrade der Zentralinstanz auf {SE} durch.
. Geben Sie die Subskriptionsdaten ein und übermitteln Sie diese, wie im Artikel zur xref:license#[Lizenzierung] beschrieben.
Die von allen Remote-Instanzen bereitgestellten Services werden bei der Berechnung der Subskription gleich behandelt,
das heißt während des Mischbetriebes werden Services von {RE} Remote-Instanzen bereits als {SE} abgerechnet.
. Aktualisieren Sie nach und nach die Remote-Instanzen.
. Falls Sie die Übertragung der Konfiguration nicht global, sondern für jede Remote-Instanz separat deaktiviert haben, können Sie die Übertragung der Konfiguration für jede Remote-Instanz, welche das Upgrade erhalten hat, wieder aktivieren.
. Im verteilten Monitoring ohne xref:glossar#central_setup[zentrales Setup] müssen auch die Remote-Instanzen gleich nach dem Upgrade lizenziert werden.

Nach dem Upgrade aller Instanzen können Sie die {SE} spezifischen Features aktivieren.

[TIP]
====
*Warum empfehlen wir, während des Upgrades auf die Synchronisation der Konfiguration zu verzichten?*

Tatsächlich verwerfen Remote-Instanzen Einstellungen, mit denen sie "nichts anfangen" können.
Dadurch geht zwar nichts kaputt, aber es kann einiges durcheinander kommen.
Nehmen wir an, Sie aktivieren eine {SE} spezifische Einstellung – beispielsweise xref:basics_downtimes#scheduled[regelmäßige Wartungszeiten] –, bevor alle Remote-Instanzen das Upgrade erhalten haben.
In diesem Fall verwerfen {RE}-Instanzen die Einstellung, woraus folgt, dass diese auch nach dem Upgrade nicht zur Verfügung steht.
Erst nach erneuter Änderung der betroffenen Einstellung nach dem Upgrade steht diese zur Verfügung.

Sollte es unvermeidbar sein, während des Upgrades auf die Synchronisation der Konfiguration zu verzichten, prüfen Sie nach dem vollständigen Upgrade die Konsistenz der {SE} spezifischen Einstellungen.
====


[#cee2cce_distributed]
==== {SE} nach {CE} (online)

Wie bereits erwähnt, erlaubt {CMK} nur den Mischbetrieb von {SE} als Zentralinstanz mit {RE} oder {CE} als Remote-Instanzen.
Für das Upgrade nach {CE} bedeutet dies, dass die Zentralinstanz das Update _zuletzt_ erhält.
Das Upgrade der gesamten Umgebung muss in 30 Tagen abgeschlossen sein.
Während des Mischbetriebes kann die Übertragung der Konfiguration von der Zentralinstanz zu den Remote-Instanzen durchgeführt werden.

Daraus resultiert folgende Reihenfolge für das Upgrade:

. Führen Sie das Upgrade der Remote-Instanzen auf {CE} durch.
*Wichtig:* Nur im 30 Tage währenden Lizenzstatus „Trial“ ist der Mischbetrieb mit {SE} als Zentralinstanz möglich.
Hinterlegen Sie also noch keine {CE}-Subskriptionsdaten!
. Hinterlegen Sie in der Zentralinstanz noch unter {SE} die Subskriptionsdaten für {CE}.
. Führen Sie das Upgrade der Zentralinstanz auf {CE} durch.
. Im verteilten Monitoring ohne xref:glossar#central_setup[zentrales Setup] müssen auch die Remote-Instanzen gleich nach dem Upgrade lizenziert werden.

Soll ein Upgrade direkt von {RE} auf {CE} erfolgen, müssen Sie auf der Zentralinstanz als Zwischenschritt auf {SE} hieven:
Zuerst führen Sie das Upgrade der Zentralinstanz von {RE} nach {SE} durch, es folgt das Upgrade der Remote-Instanzen direkt von {RE} nach {CE}.
Zuletzt führen Sie noch das Upgrade der Zentralinstanz von {SE} nach {CE} durch.


[#down2cee]
== Downgrades

Auch Downgrades zwischen den Editionen sind vorgesehen.
Ein Downgrade ist eine komplexere und damit zeitaufwändigere Aktion, da einige Funktionen in der Zielversion möglicherweise nicht funktionieren und manuell deaktiviert und durch eine möglicherweise weniger effiziente oder weniger komfortable Alternative ersetzt werden müssen.

Das eigentliche Downgrade *muss* - genau wie beim Update oder Upgrade - mit dem Befehl `omd update` durchgeführt werden.
Die Details dazu finden Sie im im Abschnitt xref:update#execute[Durchführen des Updates.]

Wenn Sie nun beispielsweise von der {CE} auf die {SE} downgraden wollen, überzeugt sich {CMK}, ob das tatsächlich Ihre Intention ist:

image::update_downgrade_ce_se.png[width=30%]

Sobald Sie diese Abfrage mit [.guihint]#yes# bestätigen, geht das Downgrade unmittelbar los.
Informieren Sie sich im Folgenden unbedingt, was *vor* diesem Downgrade zu erledigen ist.

Andere Downgrades als die im folgenden beschriebenen sind nicht vorgesehen und werden von uns nicht unterstützt, beispielsweise ein Downgrade von {ME}.
Stattdessen empfehlen wir, in einem solchen Fall mit einer frischen Instanz zu beginnen.


[#cce2cee]
=== Downgrade von {CE} nach {SE}

Als Vorbereitung für das Downgrade von {CE} nach {SE} müssen Sie mindestens die folgenden Änderungen vornehmen:

* Stellen Sie Hosts, die im Push-Modus arbeiten, auf xref:agent_linux#changepush[Pull-Modus] um.
Andernfalls empfängt {CMK} von diesen keine Monitoring-Daten und betroffene Hosts werden im Regelfall xref:monitoring_basics#stale[_stale_.]

* Konfigurieren Sie die Agentenpakete für Ordner so um, dass keine xref:hosts_autoregister#[Autoregistrierung] mehr vorgenommen wird.
Backen Sie anschließend die Agentenpakete neu.

Ferner stehen nicht mehr alle Cloud-Services und weniger Dashboards zur Verfügung.
Als Folge werden Sie xref:wato_services#vanished[verschwundene Services] aufräumen müssen.

Falls Sie unter {CE} das xref:grafana#[Grafana-Plugin] aus dem „Grafana Store“ genutzt haben, müssen sie dieses durch ein aus dem Zip-Archiv installiertes ersetzen.

Eine Übersicht der Unterschiede zwischen {CE} und {SE} liefert der Artikel zu xref:cce#[{CE} (Self-hosted).]


[#cee2cre]
=== Downgrade von {SE} nach {RE}

Als Vorbereitung für das Downgrade von {SE} nach {RE} müssen Sie mindestens die folgenden Änderungen vornehmen:

* Änderung des RRD-Datenbankformats mit der Regel [.guihint]#Configuration of RRD databases of hosts# auf [.guihint]#Multiple RRDs per host/service.#
Neben leichten Performance-Nachteilen ist hier anzumerken, dass eine Konvertierung nicht vorgesehen ist, demnach historische Monitoring-Daten nicht mehr sichtbar sind.

* Umschalten des Monitoring-Kerns von CMC auf Nagios – von dieser Änderung sind in erster Linie Performance-Nachteile zu erwarten.

Daneben sind nicht mehr alle Dashboards, Graphen-Einstellungen, Benachrichtigungs-Plugins und Spezialagenten verfügbar.
Im xref:cse#[Artikel zu {SE}] können Sie ermitteln, wie viel {SE}-Funktionalität im Falle des Downgrades nach {RE} wegfällt und wo Sie gegebenenfalls weitere Anpassungen vornehmen müssen.


[#editiondistributed_down]
=== Editions-Downgrades in verteilten Umgebungen

Die in den beiden vorherigen Abschnitten vorgestellten Downgrade-Szenarien können auch in verteilten Umgebungen durchgeführt werden.
Beachten Sie, dass in verteilten Umgebungen immer zuerst das Update der Version durchgeführt werden muss, bevor das Downgrade der Edition folgen kann.
Eine andere Reihenfolge oder ein _Crossgrade_ (Update der Version und Downgrade der Edition in einem Schritt) ist nicht vorgesehen.

In keinem Downgrade-Szenario unterstützt {CMK} den Mischbetrieb zwischen unterschiedlichen Editionen.
Aus diesem Grund empfehlen wir dringend, das Downgrade der Edition _offline_ durchzuführen.
Gehen Sie dafür wie folgt vor:

. Stoppen Sie alle Instanzen.
. Führen Sie das Downgrade der Zentralinstanz durch.
. Wenn Sie möchten (und eine Fülle von Benachrichtigungen kein Problem darstellt), können Sie die Zentralinstanz sofort wieder starten.
. Nun steht das Downgrade der Remote-Instanzen an.
Dieses können Sie parallel durchführen und Remote-Instanzen nach dem Downgrade sofort wieder starten.

Selbstverständlich können Sie mit dem Start warten, bis alle Instanzen das Downgrade erhalten haben, was die Zahl von Benachrichtigungen etwas reduziert.


[#uninstall]
== Deinstallation von {CMK}

=== Übersicht

Das Deinstallieren von nicht mehr benötigten {CMK}-Versionen geschieht mit dem Paketmanager des Betriebssystems.
Geben Sie hier den Namen des installierten Pakets an, _nicht_ den Dateinamen der ursprünglichen RPM/DEB-Datei.
Wichtig: Löschen Sie nur solche {CMK}-Versionen, die von keiner Instanz mehr verwendet werden!

Nicht mehr benötigte {CMK}-Instanzen können Sie einfach mit `omd rm` entfernen (und dabei alle Daten löschen!):

[{shell}]
----
{c-root} omd rm mysite
----


=== SLES, Red Hat Enterprise Linux, CentOS

So finden Sie bei RPM-basierten Systemen heraus, welche {CMK}-Pakete installiert sind:

[{shell}]
----
{c-root} rpm -qa | grep check-mk
check-mk-enterprise-2.3.0p1-el9-38.x86_64.rpm
check-mk-raw-2.2.0p25-el9-38.x86_64.rpm
check-mk-raw-2.1.0p34-el8-38.x86_64.rpm
----

Das Löschen geschieht mit `rpm -e`:

[{shell}]
----
{c-root} rpm -e check-mk-raw-2.1.0p34-el8-38.x86_64.rpm
----


=== Debian, Ubuntu

So finden Sie heraus, welche Pakete installiert sind:

[{shell}]
----
{c-root} dpkg -l | grep check-mk
ii  check-mk-enterprise-2.3.0p1  0.jammy  amd64  Checkmk - Best-in-class infrastructure & application monitoring
ii  check-mk-raw-2.2.0p25        0.jammy  amd64  Checkmk - Best-in-class infrastructure & application monitoring
ii  check-mk-raw-2.1.0p34        0.jammy  amd64  Checkmk - Best-in-class infrastructure & application monitoring
----

Die Deinstallation geschieht mit `dpkg --purge`:

[{shell}]
----
{c-root} dpkg --purge check-mk-raw-2.1.0p34
(Reading database ... 567850 files and directories currently installed.)
Removing check-mk-raw-2.1.0p34 (0.jammy) ...
...
----


[#diagnose]
== Diagnosemöglichkeiten

Sollte es beim Update von {CMK} mal zu einem Fehler kommen, liegt diesem zumeist eine der folgenden drei Ursachen zugrunde, die bereits in den vorherigen Kapiteln angesprochen wurden:

* Der durch eine xref:incompatible[inkompatible Änderung] notwendige manuelle Eingriff wurde nicht vorgenommen.
* Sie haben ein xref:incompatible_mkps[inkompatibles Erweiterungspaket (MKP)] installiert.
* Es befinden sich inkompatible Skripte in den xref:local_files[lokalen Dateien] der Instanzverzeichnisstruktur.

////
Mehr zur Diagnose
{c-omd} find ~/local -follow -type f
Führen Sie anschließend mit cmk-update-config -v ein Update der Konfiguration durch.
Ihre erste Anlaufstelle, um einem Problem beim Update auf die Schliche zu kommen sollte immer das Update-Log ~/var/log/update.log sein.
find -L ~/local > local-files.txt
cmk -Uvv
////


[#files]
== Dateien und Verzeichnisse

Hier finden Sie für diesen Artikel relevante Dateien und Verzeichnisse.
Pfade, die nicht mit einem `/` beginnen, gelten wie immer ab dem Home-Verzeichnis der Instanz (`/omd/sites/mysite`).

[cols="25,~"]
|===
|Pfad |Bedeutung

|`~/version` |Symbolischer Link auf die Installation der von dieser Instanz verwendeten {CMK}-Version.
|`/omd/versions` |In diesem Verzeichnis existiert für jede installierte {CMK}-Version ein Unterverzeichnis. Die Dateien gehören `root` und werden niemals geändert.
|`/omd/sites` |In diesem Verzeichnis liegt für jede Instanz deren Home-Verzeichnis mit den Konfigurationsdateien und den variablen Daten. Die Dateien gehören dem Instanzbenutzer und werden durch Konfiguration und Betrieb geändert.
|`/usr/bin/omd` |Verwaltungsbefehl für {CMK}-Instanzen. Dies ist ein symbolischer Link in das `bin`-Verzeichnis der Standardversion. Sobald auf eine bestimmte Instanz zugegriffen wird, ersetzt sich der `omd`-Befehl selbst durch denjenigen der passenden Version.
|===


