// *** coding: utf-8 **-
// IGNORE tbd
include::global_attr.adoc[]
= Übersicht der API-Ressourcen
:revdate: 2024-10-14
:title: Übersicht der API-Ressourcen
:description: {CMK} bietet mehrere APIs sowie zugehörige Artikel und Referenzen. Hier finden Sie eine Übersicht sowie Tipps zur Navigation.

{related-start}
xref:devel_intro#[Erweiterungen für {CMK} entwickeln]
xref:rest_api#[Die {CMK} REST-API]
{related-end}


[#intro]
== Einleitung

{CMK} bietet mittlerweile eine ganze Menge unterschiedlicher Schnittstellen, allen voran die REST-API, mit der Sie sehr viel von dem erledigen können, was auch über die Weboberfläche möglich ist.
Darüber hinaus gibt es jedoch noch APIs für xref:glossar#check_plugin[Check-Plugins,] die Hardware-/Software-Inventur, die xref:glossar#agent_bakery[Agentenbäckerei] und so weiter.
Zu all diesen Schnittstellen gibt es Artikel, Referenzen und weitere Ressourcen, verteilt über dieses Handbuch, die Website und {CMK} selbst.

In diesem Artikel verschaffen wir Ihnen einen Überblick über alle Schnittstellen und Ressourcen und geben einige Tipps zum generellen Umgang.
Viele Links in diesem Artikel sind redundant, da die Informationen drei unterschiedliche Herangehensweisen oder Fragen bedienen sollen: 

- Welche APIs bietet {CMK}?
- Welche API-relevanten Artikel finden sich im Handbuch?
- Welche API-relevanten Ressourcen gibt es in {CMK}?

Die wichtigste Schnittstelle ist fraglos die xref:rest_api#[{CMK} REST-API], über die sich fast alles programmatisch erledigen lässt, was auch über die Weboberfläche geht.

[TIP]
====
Einen schnellen, praktischen Einstieg in die REST-API bietet die interaktive REST-API GUI.
Hier können Sie vorgegebene Abfragen absenden und optional auch manipulieren.
Sie finden die GUI in {CMK} selbst über [.guihint]#Help > Developer resources > REST API interactive GUI.#
====

[{image-border}]
.Interaktive Weboberfläche der REST-API
image::restapi_swaggerui.png[alt="REST-API GUI mit Beispiel zum Erstellen eines Hosts."]

Die zweite große Schnittstelle sind die _Plugin-APIs_ für die Entwicklung eigener Erweiterungen.
Je nach Erfahrung können Sie hier mit unserem xref:devel_intro#[Einführungsartikel] starten oder der Referenz, die Sie wieder direkt in {CMK} selbst finden:
[.guihint]#Help > Developer resource > Plug-in API references.#

[{image-border}]
.Referenz der Plugin-APIs samt Versionshinweisen für die Check-API
image::devel_cpi_checkapi_doc.png[alt="Bild der API-Referenz mit Versionshinweisen zur Check-API."]

In den Tabellen unten finden Sie diese APIs, aber auch weniger prominente Schnittstellen, wie etwa für das Hardware-/Software-Inventar, Sub-Schnittstellen für die Check-Plugin-Entwicklung, wie etwa die explizite Graphing-API, sowie _Quasi-Schnittstellen,_ wie das Ausgabeformat von xref:localchecks#[lokalen Checks], der simplen, Skript-basierten Vorstufe ausgewachsener Plugins.


[#apis]
== APIs in {CMK}
[cols="12,18,25,~",options="header"]
|===
|API |Handbuch |Web| Beschreibung

|REST-API
|xref:rest_api#[Die {CMK} REST-API]
|link:https://checkmk.atlassian.net/wiki/spaces/KB/pages/9473812/REST-API+code+examples[REST-API-Code-Beispiele^], link:https://checkmk.com/videos/en/ep-46-working-with-checkmk-rest-api[Video-Tutorial^]
|Funktional eine Teilmenge der Weboberfläche.

|Check-API
|xref:devel_check_plugins#[Agentenbasierte Check-Plugins entwickeln]
|link:https://exchange.checkmk.com/[{CMK} Exchange (Beispiele)^]
|Programmieren von Check-Plugins.

|Bakery-API
|xref:bakery_api#[Die Bakery-API]
|In {CMK}: +
[.guihint]#Help > Developer resources > Plug-in API references > Bakery#
|Einbinden von Check-Plugins in die Agentenbäckerei.

|Server-side-calls-API
|xref:devel_special_agents#[Spezialagenten entwickeln]
|In {CMK}: +
[.guihint]#Help > Developer resources > Plug-in API references > Server-side calls#
|Entwickeln von xref:glossar#active_check[aktiven Checks] und xref:glossar#special_agent[Spezialagenten.]

|Graphing-API
|xref:devel_check_plugins#metrics_advanced[Darstellung von Metriken anpassen] im Artikel über agentenbasierte Check-Plugins
|In {CMK}: +
[.guihint]#Help > Developer resources > Plug-in API references > Graphing#
|Einbinden von xref:glossar#metric[Metriken,] Graphen, Perf-O-Metern.

|Rulesets-API
|xref:devel_check_plugins#rule_set[Regelsätze für Check-Parameter] im Artikel über agentenbasierte Check-Plugins
|In {CMK}: +
[.guihint]#Help > Developer resources > Plug-in API references > Rulesets#
|Entwickeln eigener xref:glossar#rule_set[Regelsätze.]

|DCD-API
|tbd
|In {CMK}: +
[.guihint]#Help > Developer resources > Plug-in API references > Dynamic configuration connector#
|Eigene Verbindungen für die dynamische Host-Verwaltung mit dem Dynamic Configuration Daemon (DCD).

|HW/SW-API
|xref:inventory#external[Web-API für HW/SW-Inventurdaten]
|n.a.
|Web-API zur Abfrage von Inventurdaten.

|Livestatus
|xref:livestatus#[Statusdaten abrufen via Livestatus], xref:livestatus_references#[Livestatus Befehlsreferenz]
|n.a.
|Direkter Abruf von Statusdaten via Livestatus Query Language (LQL).

|Event-Console-Schnittstelle|
xref:ec#statusinterface[Die Statusschnittstelle] der Event Console
|n.a.
|Zugriff auf interne Status und Ausführen von Befehlen via Unix-Socket.

|Lokale Checks|
xref:localchecks#[Lokale Checks]
|n.a.
|"Mini-Schnittstelle" für eigene, Skript-basierte Checks.
|===


[#docs]
== Artikel im Handbuch

[cols="12,28,~",options="header"]
|===
|API-Bereich |Handbuch |Beschreibung 
.5+|Automatisierung |xref:rest_api#[Die Checkmk REST-API] |Beschreibung der REST-API sowie deren Dokumentation und Nutzungsmöglichkeiten.
|xref:livestatus#[Statusdaten abrufen via Livestatus] |Die Daten-Schnittstelle für Host- und Service-Informationen in der Übersicht.
|xref:livestatus_references#[Livestatus-Befehlsreferenz] |Alle Tabellen, Header, Filter und Operatoren.
|xref:inventory#external[Web-API für HW/SW-Inventurdaten] |Beschreibung der Inventar-eigenen Web-API für den externen Zugriff.
|xref:ec#statusinterface[Die Statusschnittstelle] der Event Console |Per Unix-Socket und über eine Teilmenge des Livestatus-Protokolls können Daten von der Event Console ausgelesen und Kommandos abgesetzt werden.
.3+|Programmierung |xref:devel_intro#[Erweiterungen für {CMK} entwickeln] |Übersichtsartikel mit allen Möglichkeiten für Erweiterungen und Links zu weiterführenden Informationen.
|xref:devel_check_plugins#[Agentenbasierte Check-Plugins entwickeln] |Ausführliche Beschreibung zur Entwicklung eines Check-Plugins.
|xref:devel_check_plugins_snmp#[SNMP-basierte Check-Plugins entwickeln] |Ausführliche Beschreibung zur Entwicklung eines Check-Plugins für SNMP-Daten.
|===


[#resources]
== Ressourcen in Checkmk

[cols="40,~",options="header"]
|===
|In {CMK} |Beschreibung
|[.guihint]#Help > Developer resources > Plug-in API references# |Auf Sphinx basierende Referenz aller APIs, die für die Entwicklung von Check-Plugins relevant sind.
|[.guihint]#Help > Developer resources > REST API documentation# |Auf ReDoc/OpenAPI basierende Referenz für alle Check-relevanten Abfragen, inklusive Code-Beispielen für Requests (Python), Urllib (Python), Httpie und Curl.
|[.guihint]#Help > Developer resources > REST API interactive GUI# |Interaktive Weboberfläche zum Testen aller API-Endpunkte, inklusive Rückmeldungen direkt auf der Seite.
|[.guihint]#Help > Developer resources > Plug-in API references > Agent based ("Check API")# |Im Bereich [.guihint]#Version 2 > New in this version# finden Sie wichtige Informationen für die Migration alter Plugins auf die aktuelle API-Version.
|===


[#web]
== Ressourcen im Web

[cols="40,~",options="header"]
|===
|Ressource |Beschreibung
// |link:https://checkmk.com/de/blog/checkmk-2-0-apis[{CMK} 2.0: Neue APIs^]|Blog-Artikel zur Einführung der neuen APIs.
|link:https://checkmk.com/videos/en/ep-46-working-with-checkmk-rest-api[Working with the {CMK} REST API^] |Video-Tutorial (in Englisch) mit praktischen Beispielen für den Einsatz der REST-API, etwa zum Setzen von Wartungszeiten.
|link:https://checkmk.atlassian.net/wiki/spaces/KB/pages/9473812/REST-API+code+examples[REST-API-Code-Beispiele^] |Curl-Beispiele in der {CMK} Knowledge Base für konkrete, beispielsweise UND-verknüpfte Abfragen.
|link:https://exchange.checkmk.com/[{CMK} Exchange^] |Im {CMK}-Plugin-Store finden Sie viele praktische Implementierungen der APIs samt Quellcode.
// |link:https://checkmk.com/de/blog/migrating-check-plug-ins-to-checkmk-2-0[Migration von Plugins auf 2.0^] |Ausführliche Beschreibung der Migration alter Python-2-basierter Plugins auf Python 3.
|===



//// 
ML: Ideen

[#usage]
== Beispiele oder FAQ?

Im Prinzip genügt das, devel_check_plugins und rest_api liefern eigentlich genügend Einführung - Ur-Scope dürfte hier schon erfüllt sein.

Aber vielleicht noch aus Nutzersicht: Ich habe ein Projekt, welche Teile davon führen zu welchen APIs und Dokumentationen?
Oder auch die Frage: Local Check oder "richtiges" Plugin? Da wird in den Artikeln minimal drauf eingegangen, aber das muss man sich auch erstmal erarbeiten, wenn man nicht schon im Thema ist.
Noch etwas in der Richtung?
Zwei Ansätze:

Sowas wie Mattias' Hello-Bakery-MKP nehmen und zeigen, welche APIs/Dokumentationen zu welchen Teilen gehören?

Server side script:
_agend_based/hello_bakery.py
http://192.168.178.68/mysite/check_mk/plugin-api/cmk.agent_based/index.html

Agent side script:
_agents/plugins/hello_bakery

Bakery script:
mkp/_lib/check_mk/base/cee/plugins/bakery
http://192.168.178.68/mysite/check_mk/plugin-api/cmk.base.plugins.bakery.bakery_api/index.html

etc.

Oder alternativ mit untechnischen, menschlichen Wünschen herangehen:
Ich will:
Daten erheben -> API X + Doc 1
Eine Regel anbieten -> API Y + Doc 4
Metriken als Graphen zeigen ...
Mein Plugin ausrollen ...
etc.
////
