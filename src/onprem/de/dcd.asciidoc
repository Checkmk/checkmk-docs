// -*- coding: utf-8 -*-
// IGNORE Opentelemetry
// NONASCII ’
include::global_attr.adoc[]
= Dynamische Host-Verwaltung
:revdate: draft
:title: Dynamische Host-Verwaltung - Überwachen von dynamischen Infrastrukturen
:description: {CMK} kann flüchtige Infrastrukturen durch dynamisches Hinzufügen und Löschen von Hosts in einem vollautomatischen Verfahren verwalten.

{related-start}
xref:piggyback#[Der Piggyback-Mechanismus]
xref:monitoring_aws#[Amazon Web Services (AWS) überwachen]
xref:monitoring_azure#[Microsoft Azure überwachen]
xref:monitoring_gcp#[Google Cloud Platform (GCP) überwachen]
xref:monitoring_kubernetes#[Kubernetes überwachen]
xref:monitoring_docker#[Docker überwachen]
xref:monitoring_vmware#[VMware ESXi überwachen]
{related-end}


[TIP]
====
Dieser Artikel wird gerade für die {CMK}-Version {v24} überarbeitet.
====

// TK: Mal ganz allgemein: Entfernen oder Löschen von Hosts? Sind das eigentlich Synonyme - grundsätzlich und in diesem Fall? Ich hab entfernen genommen.

[#intro]
== Einleitung

In Cloud- und Containerumgebungen ist es immer öfter der Fall, dass zu überwachende Hosts automatisch entstehen und vergehen.
Die Konfiguration des Monitorings hier aktuell zu halten, ist manuell nicht mehr sinnvoll möglich.
Aber auch klassische Infrastrukturen wie z.B. VMware-Cluster können sehr dynamisch sein, und selbst wenn eine manuelle Pflege hier noch möglich ist, ist sie doch auf jeden Fall lästig.

ifdef::onprem[]
{cee-only}
Die kommerziellen Editionen von {CMK} unterstützen Sie
endif::[]
ifdef::saas[]
{CE} (SaaS) unterstützt Sie 
endif::[]
bei diesem Thema mit einem smarten Werkzeug: der dynamischen Host-Verwaltung (_dynamic host management_).
Die dynamische Host-Verwaltung nutzt dabei Informationen aus der Überwachung von Amazon Web Services (AWS), Microsoft Azure, Kubernetes, VMware ESXi
und anderen Quellen, um vollautomatisch Hosts in das Monitoring aufzunehmen -- und auch wieder zu entfernen.

Die dynamische Host-Verwaltung ist dabei generisch gehalten und nicht auf das Anlegen von Hosts beschränkt.
Sie bildet die Grundlage für künftige Erweiterungen von {CMK}, welche dynamisch die Konfiguration anpassen.
Zu diesem Zweck arbeitet die dynamische Host-Verwaltung mit Verbindungen (_connections_).
Jede Verbindung kann aus einer ganz bestimmten Art von Quelle Informationen holen und hat dazu ihre eigene spezifische Konfiguration.

Die Software-Komponente für die dynamische Host-Verwaltung ist der Dynamic Configuration Daemon (DCD).
Die Software-Architektur des DCD wurde in {CMK} {v24} komplett überarbeitet, um den Anforderungen von großen, hochdynamischen Umgebungen gerecht zu werden und eine stabile und sichere Verarbeitung zu gewährleisten.
Dabei wird nunmehr die Sammlung der Informationen aus den konfigurierten Verbindungen entkoppelt von den daraus resultierenden Konfigurationsänderungen in {CMK}.
Die anstehenden Konfigurationsänderungen werden in Warteschlangen organisiert und in Zyklen sequentiell abgearbeitet.
Dies garantiert eine stabile und sichere Verarbeitung.
Mit den Host-Manager-Einstellungen werden Ihnen Optionen angeboten, um die Verarbeitungszyklen anzupassen.
Mehr dazu steht im Kapitel xref:configuration[Konfiguration.]


[#connection_types]
== Verbindungstypen

Durch die Einrichtung einer Verbindung in der dynamischen Host-Verwaltung können Sie Hosts automatisch ins Monitoring aufnehmen und auch wieder entfernen lassen, um so immer zeitnah die Realität abzubilden.
Dazu analysiert die dynamische Host-Verwaltung die vorhandenen Daten, vergleicht, welche der Hosts bereits in der xref:glossar#configuration_environment[Konfigurationsumgebung] vorhanden sind
und legt die fehlenden Hosts neu an bzw. entfernt inzwischen weggefallene.
Anschließend wird auf den Hosts (optional) eine xref:glossar#service_discovery[Service-Erkennung] durchgeführt und abschließend die xref:glossar#activate_changes[Änderungen aktiviert], damit der aktuelle Zustand in der xref:glossar#monitoring_environment[Monitoring-Umgebung] sichtbar ist.


[#connection_piggyback]
=== Piggyback-Verbindung

Mit der Piggyback-Verbindung werden -- wenig überraschend -- xref:glossar#piggyback[Piggyback]-Daten ausgewertet.
Dieser Verbindungstyp ist in {CMK} universell einsetzbar, denn der Piggyback-Mechanismus wird von {CMK} in allen Situationen verwendet,
wo die Abfrage eines Hosts (meist per xref:glossar#special_agent[Spezialagent]) Daten zu anderen Hosts liefert (meist virtuelle Maschinen oder Cloud-Objekte).

{CMK} nutzt Piggyback zum Beispiel bei der Überwachung von
xref:monitoring_aws#[Amazon Web Services (AWS)], xref:monitoring_azure#[Microsoft Azure], xref:monitoring_gcp#[Google Cloud Platform (GCP)], xref:monitoring_kubernetes#[Kubernetes], xref:monitoring_docker#[Docker] und xref:monitoring_vmware#[VMware ESXi.]
In allen diesen Fällen werden beim Monitoring automatisch Daten zu anderen Hosts, z.B. den virtuellen Maschinen (VM), geholt,
die nicht direkt per Netzwerk angesprochen werden und auf denen auch kein {CMK}-Agent laufen muss.
Solche Hosts können Sie automatisch ins Monitoring aufnehmen und auch wieder entfernen lassen.

// TK: Den folgenden Satz hab ich entfernt (gelöscht?): Ich fand ihn nicht wirklich wichtig.
// Dabei sind automatisch erstellte Hosts trotzdem für Sie in der Setup-GUI editierbar.

// TK: Die folgende Überschrift hab ich entfernt
////
[discrete]
==== Sind Piggyback-Daten da?
////

Um eine Piggyback-Verbindung zu nutzen, benötigen Sie als einzige Voraussetzung Piggyback-Daten.
Diese haben Sie immer dann, wenn Sie das Monitoring für AWS, Azure und Co. korrekt aufgesetzt haben.

ifdef::onprem[]
Sie können das auch leicht auf der Kommandozeile überprüfen, denn die Piggyback-Daten werden von {CMK} im Verzeichnis `~/tmp/check_mk/piggyback` angelegt:

[{shell}]
----
{c-omd} ls tmp/check_mk/piggyback
myvm01  myvm02  myvm03
----

Wenn dieses Verzeichnis nicht leer ist, dann wurden in dieser Instanz Piggyback-Daten erzeugt.
endif::[]


// TK: OT gibt es nicht in SaaS 2.4.0
ifdef::onprem[]
[#connection_opentelemetry]
=== OpenTelemetry-Verbindung

{cee-only}
{CMK} {v24} bietet ab {CCE}, d. h. für {CE} und {ME}, eine experimentelle Unterstützung für die Verarbeitung von link:https://opentelemetry.io/[OpenTelemetry^]-Metriken.
Dafür sammelt in {CMK} ein OpenTelemetry-Kollektor Metrikdaten, die der Kollektor per OpenTelemetry Protocol (OTLP) erhält oder über einen Prometheus-Endpunkt abruft.
Bei der Konfiguration des Kollektors werden außerdem Regeln aufgestellt, um aus den Daten Host-Namen für {CMK} zu erzeugen.
Fertig konfiguriert legt der Kollektor los, sammelt die Daten und legt sie in der {CMK}-Instanz ab mit Dateinamen, die den Host-Namen entsprechen.

// TK: Link zum OT-Artikel einfügen.
Die Einrichtung von OpenTelemetry einschließlich des OpenTelemetry-Kollektors wird in einem eigenen Artikel beschrieben, der hier verlinkt wird, sobald er geschrieben ist.

Die OpenTelemetry-Daten sind in der Instanz immer dann verfügbar, wenn der OpenTelemetry-Kollektor korrekt aufgesetzt wurde.
// TK: Das Verzeichnis otel_collector existiert nicht in einer frischen CCE-Instanz, auch nicht, wenn der Kollektor per omd config eingeschaltet ist.
Sie können das auf der Kommandozeile überprüfen, denn die OpenTelemetry-Daten werden im Verzeichnis `~/tmp/check_mk/otel_collector` angelegt:

[{shell}]
----
{c-omd} ls tmp/check_mk/otel_collector
myotelapp01  myotelapp02  myotelapp03
----

Wenn dieses Verzeichnis nicht leer ist, dann wurden in dieser Instanz OpenTelemetry-Daten erzeugt.
endif::[]


[#setup_dcd]
== Verbindung einrichten

Öffnen Sie die Seite der dynamischen Host-Verwaltung mit [.guihint]#Setup > Hosts > Dynamic host management:#

image::dcd_connections_empty.png[alt="Die Seite 'Dynamic host management' mit leerer Verbindungsliste."]

Legen Sie mit icon:icon_new[alt="Symbol zum Erstellen eines neuen Objekts."] [.guihint]#Add connection# eine neue Verbindung an.


[#general_properties]
=== Allgemeine Eigenschaften

Der erste Teil der Konfiguration sind die [.guihint]#General properties#:

image::dcd_connection_general.png[alt="Allgemeine Eigenschaften beim Hinzufügen einer neuen Verbindung."]

Hier vergeben Sie, wie so oft, eine eindeutige ID dieser Verbindung und einen Titel.
Wichtig ist ferner die Auswahl der {CMK}-Instanz, auf der diese Verbindung laufen soll.
Da die Daten immer nur lokal verarbeitet werden können, muss die Verbindung immer einer konkreten Instanz zugeordnet werden.
// TK: Was bedeutet hier "nur lokal verarbeitet"? Stimmt das noch für Piggyback? Und auch für OpenTelemetry?
// TK: https://checkmk.com/werk/17202 - Werk #17202: Distributed piggyback: Piggyback data for distributed setups: The Piggyback Connector of the Dynamic Configration Daemon now also supports the creation of hosts on other sites.
// TK: Ist das die Umsetzung für Werk 17202? Wenn ich hier eine andere als die lokale Instanz auswähle, werden die Hosts in der anderen Instanz erstellt?


[#connection_properties_piggyback]
=== Eigenschaften einer Piggyback-Verbindung

Der zweite Teil sind die Verbindungseigenschaften ([.guihint]#Connection properties#).
Da es hier einiges zu konfigurieren gibt, nehmen wir uns die Optionen Stück für Stück vor.

image::dcd_connection_pb_01.png[alt="Erster Teil der Eigenschaften einer Piggyback-Verbindung zu Quell-Host und Synchronisierungsintervall."]

Für eine xref:connection_piggyback[Piggyback-Verbindung] wählen Sie [.guihint]#Piggyback data# als [.guihint]#Connector type# aus.

Mit [.guihint]#Restrict source hosts# können Sie die Hosts auf die Piggyback-Hosts einschränken.
Das sind in der Regel die Hosts, für die jeweils ein Spezialagent eingerichtet wurde.
Nur für diese Hosts wird die dynamische Host-Verwaltung aktiv.
Die Einschränkung erfolgt in dem zugehörigen Eingabefeld, dessen Inhalt als xref:regexes#[regulärer Ausdruck] interpretiert wird.
Wenn Sie das erste Eingabefeld editiert haben, wird automatisch das nächste geöffnet, das heißt, Sie können mehrere reguläre Ausdrucke festlegen.
// TK: Nur noch mal zur Sicherheit, dass es bei Restrict source hosts um Piggyback-Hosts geht - und nicht um Piggybacked-Hosts.
// Alter Text: Letzteres können Sie mit der Option [.guihint]#Restrict source hosts# erreichen. Diese bezieht sich auf die Namen der Hosts, welche Piggyback-Daten _erzeugen_.
// Inline help PB: Whenever Checkmk creates, modifies or deletes hosts via this connection, it will only consider hosts that receive piggyback data from hosts with names matching one of these regular expressions. Please note: The attribution of piggyback data to existing hosts is not affected by this setting.

Mit dem [.guihint]#Sync interval# bestimmen Sie, wie oft die Verbindung nach neuen Hosts suchen soll.
Wenn Sie den regulären Check-Zeitraum von einer Minute beibehalten haben, macht es keinen Sinn, das wesentlich öfter zu machen,
da ja maximal einmal pro Minute eine Änderung der Daten stattfinden kann.
In dynamischeren Umgebungen können Sie sowohl Check-Zeitraum als auch Verbindungsintervall auch auf deutlich kleinere Werte einstellen.
Dies hat allerdings auch eine höhere CPU-Auslastung auf dem {CMK}-Server zur Folge.

Unter [.guihint]#Piggyback creation options# muss mindestens ein Eintrag existieren.
Mit [.guihint]#Add new entry# können Sie auch weitere hinzufügen:

image::dcd_connection_pb_02.png[alt="Zweiter Teil der Eigenschaften einer Piggyback-Verbindung zu den automatisch erstellten Hosts."]

Hier geht es um die Eigenschaften der automatisch erzeugten Hosts, für die Sie zwei wichtige Dinge festlegen können:
In welchem Ordner die Hosts erzeugt werden sollen ([.guihint]#Create hosts in#) und welche Host-Attribute gesetzt werden sollen.
Vier wichtige Attribute sind dabei voreingestellt, welche für Piggybacked-Host meistens sinnvoll sind:

. Kein Monitoring per SNMP.
. Kein {CMK}-Agent auf dem Host selbst (Daten kommen ja per Piggyback).
. Piggyback-Daten werden immer erwartet (und es gibt einen Fehler, wenn diese fehlen).
. Die Hosts haben keine IP-Adresse.

Wenn Sie die Piggyback-Daten auf einer anderen Instanz nutzen wollen, so aktivieren Sie mit [.guihint]#Add attribute# zusätzlich die Option [.guihint]#Basic settings: Monitored on site# und geben dahinter die gewünschte Instanz an.

Nur wenn Sie die Checkbox bei [.guihint]#Delete vanished hosts# aktivieren, werden Hosts auch wieder entfernt, wenn Sie in Ihrer dynamischen Umgebung verschwunden sind.

Möchten Sie nicht automatisch alle Piggybacked-Hosts anlegen, so können Sie das mit der Option [.guihint]#Only add matching hosts# mit einem xref:regexes#[regulären Ausdruck] einschränken.
// TK: Die folgende Zeile verwirrt mich eher, daher auskommentiert: Dass es um die automatisch angelegten Piggybacked-Hosts geht, wird doch aus dem Kontext klar.
// *Wichtig:* Gemeint sind hier die Hosts, welche _angelegt_ werden und _nicht_ die Hosts, über die Sie die Überwachung von z.B. AWS eingerichtet haben.

Im dritten und letzte Teil der Verbindungseigenschaften können Sie durch Aktivieren der Checkbox bei [.guihint]#Service discovery# festlegen, dass auf den automatisch erzeugten Hosts eine xref:glossar#service_discovery[Service-Erkennung] durchgeführt wird:

image::dcd_connection_pb_03.png[alt="Dritter Teil der Eigenschaften einer Piggyback-Verbindung zum automatischen Entfernen der Hosts."]

[#host_delete_options]
Die restlichen drei Optionen beeinflussen das Entfernen der automatisch erstellten Hosts, ein Thema, das in einem xref:automatic_deletion_of_hosts[eigenen Kapitel] noch detailliert erläutert wird.

Die Option [.guihint]#Prevent host deletion after initialization# betrifft einen kompletten Neustart des {CMK}-Servers selbst.
Denn in dieser Situation fehlen erst einmal die Daten von allen Hosts, bis diese zum ersten Mal abgefragt wurden.
Um ein sinnloses Löschen und Wiedererscheinen von Hosts zu vermeiden (welches auch mit wiederholten Benachrichtigungen zu schon bekannten Problemen einhergeht),
wird standardmäßig in den ersten 10 Minuten auf ein Löschen generell verzichtet.
Diese Zeit können Sie hier einstellen.

Die Option [.guihint]#Validity of missing data# behandelt den Fall, dass ein Host, aufgrund dessen Monitoring-Daten etliche Hosts automatisch angelegt wurden, keine Piggyback-Daten mehr liefert.
Das kann z.B. der Fall sein, wenn ein Zugriff auf AWS und Co. nicht mehr funktioniert.
Oder natürlich auch, wenn Sie den Spezialagenten aus der Konfiguration entfernt haben.
Die automatisch erzeugten Hosts bleiben dann noch die eingestellte Zeit im System, bevor sie aus der Setup-GUI entfernt werden.

Die Option [.guihint]#Validity of outdated data# ist ähnlich, behandelt aber den Fall, dass schon noch Daten kommen, allerdings für manche Hosts nicht mehr.
Das ist der normale Fall wenn z.B. virtuelle Maschinen oder Cloud-Dienste nicht mehr vorhanden sind.
Wenn Sie möchten, dass die entsprechenden Objekte aus {CMK} dann zeitnah verschwinden, dann setzen Sie hier eine entsprechend kurze Zeitspanne.


ifdef::onprem[]
[#connection_properties_opentelemetry]
=== Eigenschaften einer OpenTelemetry-Verbindung

Die Optionen bei der Erstellung einer Piggyback- und OpenTelemetry-Verbindung, die ab {CE} eingerichtet werden kann, sind nahezu identisch.
Daher werden die Eigenschaften einer OpenTelemetry-Verbindung im Schnelldurchlauf vorgestellt.

image::dcd_connection_ot_01.png[alt="Eigenschaften einer OpenTelemetry-Verbindung."]

Für eine xref:connection_opentelemetry[OpenTelemetry-Verbindung] wählen Sie [.guihint]#Opentelemetry collector data# als [.guihint]#Connector type# aus.

[.guihint]#Restrict source hosts# ist für OpenTelemetry nicht relevant.
Möchten Sie nicht automatisch alle Hosts anlegen lassen, so können Sie das mit der Option [.guihint]#Only add matching hosts# weiter unten erreichen.
Mit [.guihint]#Sync interval# bestimmen Sie, wie oft die Verbindung nach neuen Hosts suchen soll.

Unter [.guihint]#Open telemetry hosts creation options# legen Sie fest, in welchem Ordner die Hosts erzeugt werden sollen ([.guihint]#Create hosts in#) und welche Host-Attribute gesetzt werden sollen.
Zwei Attribute sind dabei voreingestellt:

. Kein Monitoring per SNMP.
. Die Hosts haben keine IP-Adresse.

Nur wenn Sie die Checkbox bei [.guihint]#Delete vanished hosts# aktivieren, werden Hosts auch wieder entfernt, wenn Sie in Ihrer dynamischen Umgebung verschwunden sind.
Möchten Sie nicht automatisch alle Hosts anlegen lassen, so können Sie das mit der Option [.guihint]#Only add matching hosts# mit einem xref:regexes#[regulären Ausdruck] einschränken.

Durch Aktivieren der Checkbox bei [.guihint]#Service discovery# legen Sie fest, dass auf den automatisch erzeugten Hosts eine xref:glossar#service_discovery[Service-Erkennung] durchgeführt wird.
// TK: Im folgenden Satz das entsprechende Kapitel im OT-Artikel verlinken:
Dies führt allerdings nur dann zum gewünschten Ergebnis, wenn der Spezialagent für OpenTelemetry eingerichtet ist.

Die beiden letzten Optionen [.guihint]#Prevent host deletion after initialization# und [.guihint]#Validity of outdated data# beeinflussen das Entfernen der automatisch erstellten Hosts.
Diese Optionen wirken so, wie es bei der xref:host_delete_options[Piggyback-Verbindung] beschrieben ist.
Das Entfernen der automatisch erstellten Hosts wird in einem xref:automatic_deletion_of_hosts[eigenen Kapitel] detailliert erläutert.
endif::[]


[#connection_save]
=== Verbindung speichern

Nachdem Sie gespeichert haben, erscheint die Verbindung in der Verbindungsliste.
Sie kann aber erst ausgeführt werden, wenn Sie die Änderungen aktiviert haben.
Erst dadurch nimmt die Verbindung ihren Dienst auf.

Lassen Sie sich daher nicht von der Meldung irritieren, welche zunächst nach dem Speichern in der [.guihint]#Status#-Spalte erscheint: +
`Connection 'my_connection' isn't found: consider activating changes`


[#connection_activate]
=== Verbindung aktivieren

Nach dem Speichern der Verbindungseigenschaften und einem Aktivieren der Änderungen nimmt die Verbindung automatisch ihren Betrieb auf.
Das kann so schnell gehen, dass Sie bereits direkt nach dem Aktivieren der Änderungen sehen, wie Hosts im Monitoring angelegt wurden.

// TK: Konnte ich mit meiner lokalen Primitiv-Instanz nicht testen. Ich vermute mal, dass das Kapitel umgeschrieben werden muss und evtl. sogar ganz weg kann.
// TK: Hier sollte erwähnt und gezeigt werden, dass nach der Aktivierung unter Recent processing cycles die "batches" und die Zeit bis zur nächsten Ausführung angezeigt werden.
// TK: Den ollen Screenshot hab ich rausgenommen.
// image::dcd_pending_changes.png[alt="Liste der anstehenden Änderungen unmittelbar vor der automatischen Übernahme ins Monitoring."]

Wenn Sie diese Seite kurz darauf neu laden, sind diese Änderungen wahrscheinlich schon wieder verschwunden, weil sie ja von der dynamischen Host-Verwaltung automatisch aktiviert wurden.
Die neuen Hosts sind dann bereits im Monitoring und werden regelmäßig überwacht.


[#actions]
=== Aktionen für eine Verbindung

Für jede Verbindung zeigt die Verbindungsliste in der Spalte [.guihint]#Actions# Symbole, um Aktionen auszuführen:

image::dcd_connection_list.png[alt="Tabelle der Verbindungen mit einem Eintrag."]

Einige der folgenden Symbole werden nur für eine aktivierte Verbindung angezeigt:

// TK: Ich meine, dass 3 der Aktionen im Kapitel Diagnose näher beschrieben werden sollten/müssten/könnten: icon_dcd_history (Abschnitt gibts ja schon, icon_dcd_connections (?) und icon_dcd_execute
[cols="10,~"]
|===
|Symbol |Aktion 

|icon:icon_edit[alt="Symbol für das Bearbeiten."]
|Öffnet die Verbindung zum Bearbeiten.

|icon:icon_clone[alt="Symbol für das Klonen."]
|Klont die Verbindung und öffnet sie zum Bearbeiten.

|icon:icon_host[alt="Symbol eines Hosts."]
|Zeigt eine Liste der zu dieser Verbindung gehörenden Hosts.

|icon:icon_dcd_history[alt="Symbol der Ausführungshistorie."]
|Zeigt die xref:execution_history[Ausführungshistorie] der Verbindung.

// TK: Keine Ahnung, warum ich da drauf klicken soll: zeigt nur als "Recent processing batches" das, was auf der Haupseite als "Recent processing cycles" eh immer zu sehen ist.
|icon:icon_dcd_connections[alt="Symbol für den Zustand der dynamischen Host-Verwaltung."]
|Zeigt den Zustand der dynamischen Host-Verwaltung, d.h. die aktuellen Bearbeitungszyklen.

|icon:icon_dcd_execute[alt="Symbol für die Ausführung einer Verbindung der dynamischen Host-Verwaltung."]
|Führt die Verbindung aus, ohne auf den nächsten Bearbeitungszyklus zu warten.

|icon:icon_export_rule[alt="Symbol für den Export der Verbindung."]
|Zeigt, wie die Verbindung mit der {CMK} xref:rest_api#[REST-API] erstellt werden kann.

|icon:icon_delete[alt="Symbol für das Löschen."]
|Löscht die Verbindung nach Rückfrage.
|===


[#automatic_deletion_of_hosts]
== Automatisch Hosts entfernen lassen

Wie oben erwähnt, können Sie Hosts, die es „nicht mehr gibt“, von der dynamischen Host-Verwaltung automatisch aus dem Monitoring entfernen lassen.
Das klingt erst einmal sehr logisch.
Was _genau_ das „nicht mehr gibt“ allerdings bedeutet, ist auf den zweiten Blick doch etwas komplexer, da es verschiedene Fälle zu betrachten gibt.

Wir gehen in folgender Übersicht davon aus, dass Sie für die Verbindung die Option bei [.guihint]#Delete vanished hosts# aktiviert haben.
Denn sonst werden grundsätzlich nie Hosts automatisch entfernt.

[cols="30,~",options="header"]
|===
|Situation |Was geschieht? 

|Eine Verbindung wird entfernt.
|Wenn Sie eine Verbindung stilllegen (mit [.guihint]#do not activate this connection# in den [.guihint]#General properties#) oder ganz entfernen, bleiben alle Hosts, die durch diese Verbindung erzeugt wurden, erhalten.
Bei Bedarf müssen Sie diese von Hand entfernen.

// TK: Folgende Tabellenzeile auskommentiert und neu geschrieben, weil dort Piggybacked-Hosts stand, aber meiner Meinung nach Piggyback-Host gemeint ist.
// |Ein Piggybacked-Host wird nicht mehr überwacht.
// |Wenn Sie den Host, über den Sie Ihre Cloud- oder Containerumgebung überwachen, aus dem Monitoring entfernen, erzeugt dieser natürlich keine Piggyback-Daten mehr.
// In diesem Fall werden die automatisch erzeugten Hosts _nach einer Stunde_ automatisch entfernt.
|Ein Piggyback-Host wird nicht mehr überwacht.
|Wenn Sie einen Piggyback-Host, über den Sie Ihre Cloud- oder Containerumgebung überwachen, aus dem Monitoring entfernen, erzeugt dieser natürlich keine Piggyback-Daten mehr.
In diesem Fall werden die automatisch erzeugten Piggybacked-Host standardmäßig _nach einer Stunde_ automatisch entfernt.
Den Zeitraum können Sie mit der Option [.guihint]#Validity of missing data# anpassen.

// TK: Unverändert gelassen. Bin nicht sicher, ob das für OpenTelemetry-Hosts analog auch so ist.
|Ein Piggybacked-Host ist nicht erreichbar.
|Wenn Ihre Cloud-Umgebung mal nicht erreichbar ist, und der Service [.guihint]#Check_MK,# der diese abfragt, auf {CRIT} geht, so bleiben die automatisch erzeugten Hosts _auf unbestimmte Zeit_ im Monitoring.
Hier gibt es keinen einstündigen Timeout!

// TK: Folgende Tabellenzeile auskommentiert und neu generisch geschrieben - und "sofort" durch die Option Validity of outdated data ersetzt.
// |Ein Host ist nicht mehr in den Piggyback-Daten enthalten.
// |Das ist quasi der Normalfall:
// Ein Host in der Cloud-/Containerumgebung ist verschwunden.
// In diesem Fall wird er _sofort_ aus dem Monitoring entfernt.
|Ein automatisch erstellter Host ist nicht mehr in den Daten enthalten.
|Das ist quasi der Normalfall in einer Cloud-/Containerumgebung.
In diesem Fall wird der Host standardmäßig nach einer Minute automatisch entfernt.
Den Zeitraum können Sie mit der Option [.guihint]#Validity of outdated data# anpassen.

|Der {CMK}-Server selbst ist gestoppt.
|Ein Stoppen des ganzen Monitorings führt zwar dazu, dass Daten veralten, aber natürlich werden bestehende Hosts deswegen _nicht_ entfernt.
Das gleiche gilt, wenn der {CMK}-Server neu gebootet wird (wodurch vorübergehend alle Daten verloren gehen, da diese in der RAM-Disk liegen).
|===

Beachten Sie, dass es mit der Regel [.guihint]#Automatic host removal# für alle Hosts die Möglichkeit gibt, diese xref:hosts_setup#hosts_autoremove[automatisch entfernen zu lassen.]
Beide Optionen zum _Lifecycle Management_ arbeiten unabhängig voneinander, d.h. ein Host wird entfernt, wenn eine der beiden Voraussetzungen erfüllt ist.


[#configuration]
== Konfiguration

Mit den Host-Manager-Einstellungen können Sie die Verarbeitungszyklen der dynamischen Host-Verwaltung anpassen.
Sie erreichen den Dialog über [.guihint]#Setup > Hosts > Dynamic host management > Host manager settings:# 

image::dcd_host_manager.png[alt="Dialog der Host-Manager-Einstellungen."]

// TK: Hier sollten die Hintergrundinfos rein, die man braucht, um die Optionen in den Host manager settings zu verstehen.
// TK: Also quasi, den Absatz in der Einleitung detaillierter beschreiben, so dass man versteht, was processing cycle, bulk discovery, etc. sind.
// TK: Ich meine, dass die Inline-Hilfe von Martin gut genug ist, und die Beschreibung der Optionen im Handbuch daher überflüssig ist.

// TK: Die Option Group "Activate changes" gibts nicht mehr und Exclude "Activate changes" for time ranges ist aus den Connection Properties in die Host manager settings gewandert.
// TK: Alter Text folgt:
////
Zwei weitere Optionen befassen sich mit dem automatischen Aktivieren von Änderungen -- für den Fall, dass wirklich Hosts angelegt oder entfernt wurden.
Denn nur dadurch tauchen diese dann auch im Monitoring auf.

Wenn das xref:wato#activate_changes[Aktivieren der Änderungen] bei Ihrer Instanz sehr lange dauert, können Sie mit [.guihint]#Group "Activate changes"# dafür sorgen,
dass das nach Möglichkeit nicht bei jedem neuen Host sofort passiert, sondern nachdem einige „zusammengekommen" sind.

Ferner können Sie das automatische Aktivieren von Änderungen auch für bestimmte Tageszeiten komplett verbieten -- z.B. für die Tageszeiten, wo ihr Monitoring-System aktiv betreut wird.
Denn wenn der DCD Änderungen aktiviert, werden auch alle anderen Änderungen aktiv, die Sie oder ein Kollege gerade gemacht haben!
////


[#diagnosis]
== Diagnose
// TK: https://checkmk.com/werk/17302 - Werk #17302: Added tool to diagnose DCD from the command line
// TK: cmk-dcd --help: Uff - die verfügbaren Optionen sind sehr merkwürdig: Ich kann quasi keine einer Aktion in der GUI zuordnen (wie z.B: -S Stop DCD host?)
// TK: Hab mal testweise 1 paar Kommandos ausgeführt: cmk-dcd -vR und cmk-dcd -S: Keine Rückmeldung, aber sehr doofe Idee, weil cmk-dcd -S keinen Host "stoppt" sondern den dcd omd Service.
// TK: Dann ist die DCD GUI leer bis auf solch schöne Fehlermeldungen: ConnectionRefusedError: [Errno 111] Connection refused
// TK: (Erstmal?) Finger weg von cmk-dcd?


[#execution_history]
=== Ausführungshistorie

Wenn Sie dem DCD bei der Arbeit zusehen möchten, finden Sie in der Liste der Verbindungen bei jedem Eintrag das Symbol icon:icon_dcd_history[].
Dieses führt Sie zur Ausführungshistorie:

// TK: Der Screenshot muss auch neu gezogen werden.
image::dcd_execution_history.png[alt="Ausführungshistorie bei Suche und Anlegen neuer Hosts."]

Sollte aus irgendwelchen Gründen die Erstellung eines Hosts fehlschlagen, sehen Sie dies in der Ausführungshistorie.


// TK: Kapitel ist meiner Meinung nach obsolet, weil ich in Audit log nichts DCD-spezifisches mehr sehe. Den Automationsbenutzer gibt es schließlich nicht mehr.
////
=== Audit Log

Mit [.guihint]#Setup > General > Audit log# öffnen Sie eine Seite mit der Liste aller Änderungen, die in der Setup-GUI gemacht wurden -- egal ob diese bereits aktiviert wurden oder nicht.

Suchen Sie nach Einträgen vom Benutzer `automation` bzw. dem Benutzer, den Sie stattdessen autorisiert haben (siehe hierzu den Abschnitt xref:user_automation[Der Automationsbenutzer]).
Unter diesem Benutzerkonto arbeitet der DCD und erzeugt Änderungen.
So können Sie nachvollziehen, wann er welchen Host angelegt oder entfernt hat.
////


ifdef::onprem[]
=== Log-Datei des DCD

Die Log-Datei des DCD ist `~/var/log/dcd.log`.
Hier ist ein Beispiel, welches zur vorherigen Abbildung passt:

.~/var/log/dcd.log
[{file}]
----
2021-11-10 14:45:22,916 [20] [cmk.dcd] ---------------------------------------------------
2021-11-10 14:45:22,916 [20] [cmk.dcd] Dynamic Configuration Daemon (2.0.0p14) starting (Site: mysite, PID: 7450)...
2021-11-10 14:45:22,917 [20] [cmk.dcd.ConnectionManager] Initializing 0 connections
2021-11-10 14:45:22,918 [20] [cmk.dcd.ConnectionManager] Initialized all connections
2021-11-10 14:45:22,943 [20] [cmk.dcd.CommandManager] Starting up
2021-11-10 15:10:58,271 [20] [cmk.dcd.Manager] Reloading configuration
2021-11-10 15:10:58,272 [20] [cmk.dcd.ConnectionManager] Initializing 1 connections
2021-11-10 15:10:58,272 [20] [cmk.dcd.ConnectionManager] Initializing connection 'piggy01'
2021-11-10 15:10:58,272 [20] [cmk.dcd.ConnectionManager] Initialized all connections
2021-11-10 15:10:58,272 [20] [cmk.dcd.ConnectionManager] Starting new connections
2021-11-10 15:10:58,272 [20] [cmk.dcd.piggy01] Starting up
2021-11-10 15:10:58,273 [20] [cmk.dcd.ConnectionManager] Started all connections
----
endif::[]


ifdef::onprem[]
[#files]
== Dateien und Verzeichnisse

[cols="30,~",options="header"]
|===
|Pfad |Bedeutung 
|`~/tmp/check_mk/piggyback` |Hier entstehen Piggyback-Daten. Für jeden in den Piggyback-Daten enthaltenen Piggybacked-Host entsteht ein Verzeichnis.
|`~/tmp/check_mk/otel_collector` |Hier entstehen OpenTelemetry-Daten. Für jeden OpenTelemetry-Host wird eine Datei erstellt.
|`~/var/log/dcd.log` |Log-Datei des Dynamic Configuration Daemon (DCD).
|===
endif::[]


// TK: Alte Texte zum Draufschauen und dann Löschen:
////
[{image-left}]
image::dcd_large_icon_dcd_connections.png[alt="Symbol für Dynamische Host-Verwaltung.",width=100%]

Er bildet die Grundlage für künftige Erweiterungen von {CMK}, welche dynamisch die Konfiguration anpassen.
Das kann z.B. auch das Verwalten von Benutzern bedeuten.
Zu diesem Zweck arbeitet der DCD mit Verbindungen (_connections_).
Jede Verbindung kann aus einer ganz bestimmten Art von Quelle Informationen holen und hat dazu seine eigene spezifische Konfiguration.

Mit speziellen Verbindungen wird es in Zukunft noch einfacher werden, Hosts aus einer vorhandenen CMDB automatisch nach {CMK} zu übernehmen.


[#user_automation]
=== Der Automationsbenutzer

In {CMK} gibt es standardmäßig einen xref:glossar#automation_user[Automationsbenutzer.]
Dieser Benutzer wird von {CMK} angelegt, um automatisierte Abrufe durchführen zu können.
Ein existierender Automationsbenutzer ist auch für die dynamische Host-Verwaltung zwingend notwendig.

Haben Sie, aus welchen Gründen auch immer, in Ihrem System diesen Benutzer gelöscht oder geändert, so müssen Sie einen anderen Benutzer mit automatisiertem Zugriff auf die REST-API schaffen.
In diesem Fall öffnen Sie die globale Einstellung [.guihint]#Connection to the REST API# in [.guihint]#Setup > General > Global settings > Dynamic configuration.#

image::dcd_connection_RESTAPI.png[alt="Auswahl eines Benutzers für die REST-API."]

Hier können Sie einen anderen Benutzer und dessen Zugriffsdaten (Name, Passwort) eintragen statt des standardmäßig ausgewählten Automationsbenutzers.
Sobald Sie die Änderungen mit icon:icon_save[alt="Symbol für das Speichern."] [.guihint]#Save# gespeichert haben, wird der ausgewählte Benutzer zum Zugriff auf die REST-API genutzt und Sie können mit der dynamischen Host-Verwaltung fortfahren.
////