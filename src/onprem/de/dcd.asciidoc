// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= Dynamische Host-Verwaltung
:revdate: draft
:title: Dynamische Host-Verwaltung - Überwachen von dynamischen Infrastrukturen
:description: {CMK} kann flüchtige Infrastrukturen durch dynamisches Hinzufügen und Löschen von Hosts in einem vollautomatischen Verfahren verwalten.

{related-start}
xref:piggyback#[Der Piggyback-Mechanismus]
xref:monitoring_aws#[Amazon Web Services (AWS) überwachen]
xref:monitoring_azure#[Microsoft Azure überwachen]
xref:monitoring_gcp#[Google Cloud Platform (GCP) überwachen]
xref:monitoring_kubernetes#[Kubernetes überwachen]
xref:monitoring_docker#[Docker überwachen]
xref:monitoring_vmware#[VMware ESXi überwachen]
{related-end}


[TIP]
====
Dieser Artikel wird gerade für die {CMK}-Version {v24} überarbeitet.
====


[#intro]
== Einleitung

In Cloud- und Containerumgebungen ist es immer öfter der Fall, dass zu überwachende Hosts automatisch entstehen und vergehen.
Die Konfiguration des Monitorings hier aktuell zu halten, ist manuell nicht mehr sinnvoll möglich.
Aber auch klassische Infrastrukturen wie z.B. VMware-Cluster können sehr dynamisch sein, und selbst wenn eine manuelle Pflege hier noch möglich ist, ist sie doch auf jeden Fall lästig.

ifdef::onprem[]
{cee-only}
Die kommerziellen Editionen von {CMK} unterstützen Sie
endif::[]
ifdef::saas[]
{CE} (SaaS) unterstützt Sie 
endif::[]
bei diesem Thema mit einem smarten Werkzeug: der dynamischen Host-Verwaltung (_dynamic host management_).
Die dynamische Host-Verwaltung nutzt dabei Informationen aus der Überwachung von Amazon Web Services (AWS), Microsoft Azure, Kubernetes, VMware ESXi
und anderen Quellen, um vollautomatisch Hosts in das Monitoring aufzunehmen -- und auch wieder zu entfernen.

Die dynamische Host-Verwaltung ist dabei generisch gehalten und nicht auf das Anlegen von Hosts beschränkt.
Sie bildet die Grundlage für künftige Erweiterungen von {CMK}, welche dynamisch die Konfiguration anpassen.
Zu diesem Zweck arbeitet die dynamische Host-Verwaltung mit Verbindungen (_connections_).
Jede Verbindung kann aus einer ganz bestimmten Art von Quelle Informationen holen und hat dazu ihre eigene spezifische Konfiguration.

Die Software-Komponente für die dynamische Host-Verwaltung ist der Dynamic Configuration Daemon (DCD).
Die Software-Architektur des DCD wurde in {CMK} {v24} komplett überarbeitet, um den Anforderungen von großen, hochdynamischen Umgebungen gerecht zu werden und eine stabile und sichere Verarbeitung zu gewährleisten.
Dabei wird nunmehr die Sammlung der Informationen aus den konfigurierten Verbindungen entkoppelt von den daraus resultierenden Konfigurationsänderungen in {CMK}.
Die anstehenden Konfigurationsänderungen werden in Warteschlangen organisiert und in Zyklen sequentiell abgearbeitet.
Dies garantiert eine stabile und sichere Verarbeitung.
Mit den Host-Manager-Einstellungen (_host manager settings_) werden Ihnen Optionen angeboten, um die Verarbeitungszyklen anzupassen.
Mehr dazu steht im Kapitel xref:configuration[Konfiguration.]


[#connection_types]
== Verbindungstypen

[#connection_piggyback]
=== Piggyback-Verbindung
//TK: Hier steht wahrscheinlich viel Zeug, was auch für OpenTelemetry gültig ist.

Mit der Piggyback-Verbindung werden -- wenig überraschend -- xref:glossar#piggyback[Piggyback-Daten] ausgewertet.
Dieser Verbindungstyp ist in {CMK} universell einsetzbar, denn der Piggyback-Mechanismus wird von {CMK} in allen Situationen verwendet,
wo die Abfrage eines Hosts (meist per xref:glossar#special_agent[Spezialagent]) Daten zu anderen Hosts liefert (meist virtuelle Maschinen oder Cloud-Objekte).

{CMK} nutzt Piggyback zum Beispiel bei der Überwachung von
xref:monitoring_aws#[Amazon Web Services (AWS)], xref:monitoring_azure#[Microsoft Azure], xref:monitoring_gcp#[Google Cloud Platform (GCP)], xref:monitoring_kubernetes#[Kubernetes], xref:monitoring_docker#[Docker] und xref:monitoring_vmware#[VMware ESXi.]
In allen diesen Fällen werden beim Monitoring automatisch Daten zu anderen Hosts, z.B. den virtuellen Maschinen (VM), geholt,
die nicht direkt per Netzwerk angesprochen werden und auf denen auch kein {CMK}-Agent laufen muss.

Durch die Einrichtung einer Piggyback-Verbindung können Sie solche Hosts automatisch ins Monitoring aufnehmen und auch wieder entfernen lassen, um so immer zeitnah die Realität abzubilden.
Dazu analysiert die dynamische Host-Verwaltung die vorhandenen Piggyback-Daten, vergleicht, welche der Hosts bereits in der xref:glossar#configuration_environment[Konfigurationsumgebung] vorhanden sind
und legt die fehlenden Hosts neu an bzw. entfernt inzwischen weggefallene.
Anschließend wird auf den Hosts eine xref:glossar#service_discovery[Service-Erkennung] durchgeführt und abschließend die xref:glossar#activate_changes[Änderungen aktiviert], damit der aktuelle Zustand in der xref:glossar#monitoring_environment[Monitoring-Umgebung] sichtbar ist.

// TK: Ist der folgende Satz wirklich wichtig?
Dabei sind automatisch erstellte Hosts trotzdem für Sie in der Setup-GUI editierbar.


// TK: Ich würde die folgende Überschrift gerne entfernen 
[discrete]
==== Sind Piggyback-Daten da?

Um eine Piggyback-Verbindung zu nutzen, benötigen Sie als einzige Voraussetzung Piggyback-Daten.
Diese haben Sie immer dann, wenn Sie das Monitoring für AWS, Azure und Co. korrekt aufgesetzt haben.

ifdef::onprem[]
Sie können das auch leicht auf der Kommandozeile überprüfen, denn die Piggyback-Daten werden von {CMK} im Verzeichnis `~/tmp/check_mk/piggyback` angelegt:

[{shell}]
----
{c-omd} ls tmp/check_mk/piggyback
myvm01  myvm02  myvm03
----

Wenn dieses Verzeichnis nicht leer ist, dann wurden in dieser Instanz Piggyback-Daten erzeugt.
endif::[]


[#connection_opentelemetry]
=== OpenTelemetry-Verbindung

ifdef::onprem[]
{cee-only}
Die OpenTelemetry-Verbindung gibt es nur ab {CCE}, d. h. für {CE} und {ME}.
endif::[]

tbw...


[#setup_dcd]
== Verbindung einrichten

Öffnen Sie die Seite der dynamischen Host-Verwaltung mit [.guihint]#Setup > Hosts > Dynamic host management:#

image::dcd_connections_empty.png[alt="Die Seite 'Dynamic host management' mit leerer Verbindungsliste."]
// TK: Screenshots zu einem durchgehenden Beispiel wären schön.

Legen Sie mit icon:icon_new[alt="Symbol zum Erstellen eines neuen Objekts."] [.guihint]#Add connection# eine neue Verbindung an.

[TIP]
====
Im Folgenden zeigen wir beispielhaft die Einrichtung einer Piggyback-Verbindung.
Das Vorgehen bei der Erstellung einer Piggyback- und OpenTelemetry-Verbindung ist nahezu identisch.
Wo es Unterschiede gibt, wird das in der Beschreibung der Optionen vermerkt.
====


[#general_properties]
=== Allgemeine Eigenschaften

Der erste Teil der Konfiguration sind die [.guihint]#General properties#:

image::dcd_connection_general.png[alt="Allgemeine Eigenschaften beim Hinzufügen einer neuen Verbindung."]

Hier vergeben Sie, wie so oft, eine eindeutige ID dieser Verbindung und einen Titel.
Wichtig ist ferner die Auswahl der {CMK}-Instanz, auf der diese Verbindung laufen soll.
Da Piggyback-Daten immer nur lokal verarbeitet werden können, muss die Verbindung immer einer konkreten Instanz zugeordnet werden.
// TK: Was bedeutet hire "nur lokal verarbeitet"? Stimmt das noch?
// TK: Hinweis aufnhemen zu: https://checkmk.com/werk/17202 - Werk #17202: Distributed piggyback: Piggyback data for distributed setups: The Piggyback Connector of the Dynamic Configration Daemon now also supports the creation of hosts on other sites.


// TK: Ab hier nur noch Texte kopiert ohne Überarbeitung
[#connection_properties]
=== Eigenschaften der Verbindung

Der zweite Teil sind die [.guihint]#Connection properties#:

image::dcd_connection_properties.png[alt="Einstellungen der Verbindung im Detail."]

Hier ist bereits der Verbindungstyp [.guihint]#Piggyback data# vorausgewählt (und aktuell auch der einzig mögliche).

Mit dem [.guihint]#Sync interval# bestimmen Sie, wie oft die Verbindung nach neuen Hosts suchen soll.
Wenn Sie den regulären Check-Zeitraum von einer Minute beibehalten haben, macht es keinen Sinn, das wesentlich öfter zu machen,
da ja maximal einmal pro Minute eine Änderung der Piggyback-Daten stattfinden kann.
In dynamischeren Umgebungen können Sie sowohl Check-Zeitraum als auch Verbindungsintervall auch auf deutlich kleinere Werte einstellen.
Dies hat allerdings auch eine höhere CPU-Auslastung auf dem {CMK}-Server zur Folge.

Wichtig ist jetzt, dass Sie unter [.guihint]#Piggyback creation options# mindestens ein neues Element hinzufügen ([.guihint]#Add new element#).
Damit gelangen Sie zu den Einstellungen für automatisch erzeugte Hosts:

image::dcd_connection_properties_2.png[alt="Ordner, in dem Hosts erstellt werden und Datenquellen, die hierfür herangezogen werden."]

Hier können Sie zwei wichtige Dinge festlegen:
In welchem Ordner die Hosts erzeugt werden sollen (hier z.B. [.guihint]#AWS Cloud 02#) und welche Host-Attribute gesetzt werden sollen (für letzteres müssen Sie den xref:intro_gui#show_less_more[Show-more-Modus] aktiviert haben).
Vier wichtige Attribute sind dabei voreingestellt, welche für piggybacked Hosts meistens Sinn ergeben:

. Kein Monitoring per SNMP.
. Kein {CMK}-Agent auf dem Host selbst (Daten kommen ja per Piggyback).
. Piggyback-Daten werden immer erwartet (und es gibt einen Fehler, wenn diese fehlen).
. Die Hosts haben keine IP-Adresse.

*Wichtig:* Nur wenn Sie [.guihint]#Delete vanished hosts# aktivieren, werden Hosts auch wieder entfernt, wenn Sie in Ihrer dynamischen Umgebung verschwunden sind.

Möchten Sie nicht automatisch alle Hosts anlegen, so können Sie das mit der Option [.guihint]#Only add matching hosts# mit einem xref:regexes#[regulären Ausdruck] einschränken. 
*Wichtig:* Gemeint sind hier die Hosts, welche _angelegt_ werden und _nicht_ die Hosts, über die Sie die Überwachung von z.B. AWS eingerichtet haben.

Letzteres können Sie mit der Option [.guihint]#Restrict source hosts# erreichen.
Diese bezieht sich auf die Namen der Hosts, welche Piggyback-Daten _erzeugen_.


==== Optionen zum Löschen von Hosts

Neben der Frage, ob Hosts überhaupt automatisch entfernt werden sollen, gibt es bei den Verbindungseigenschaften noch drei weitere Optionen,
die das Löschen beeinflussen und die wir vorhin übersprungen haben:

image::dcd_deletion_tuning.png[alt="Feineinstellungen zum automatischen Löschen von Hosts."]

Die erste Einstellung -- [.guihint]#Prevent host deletion right after initialization# -- betrifft einen kompletten Neustart des {CMK}-Servers selbst.
Denn in dieser Situation fehlen erst einmal Piggyback-Daten von allen Hosts, bis diese zum ersten Mal abgefragt wurden.
Um ein sinnloses Löschen und Wiedererscheinen von Hosts zu vermeiden (welches auch mit wiederholten Benachrichtigungen zu schon bekannten Problemen einhergeht),
wird standardmäßig in den ersten 10 Minuten auf ein Löschen generell verzichtet.
Diese Zeit können Sie hier einstellen.

Die Option [.guihint]#Validity of missing data# behandelt den Fall, dass ein Host, aufgrund dessen Monitoring-Daten etliche Hosts automatisch angelegt wurden, keine Piggyback-Daten mehr liefert.
Das kann z.B. der Fall sein, wenn ein Zugriff auf AWS und Co. nicht mehr funktioniert.
Oder natürlich auch, wenn Sie den Spezialagenten aus der Konfiguration entfernt haben.
Die automatisch erzeugten Hosts bleiben dann noch die eingestellte Zeit im System, bevor sie aus der Setup-GUI entfernt werden.

Die Option [.guihint]#Validity of outdated data# ist ähnlich, behandelt aber den Fall, dass schon noch Piggyback-Daten kommen, allerdings für manche Hosts nicht mehr.
Das ist der normale Fall wenn z.B. virtuelle Maschinen oder Cloud-Dienste nicht mehr vorhanden sind.
Wenn Sie möchten, dass die entsprechenden Objekte aus {CMK} dann zeitnah verschwinden, dann setzen Sie hier eine entsprechend kurze Zeitspanne.


=== Verbindung speichern

Nachdem Sie gespeichert haben, erscheint die Verbindung in der Liste.
Er kann aber erst ausgeführt werden, wenn Sie die Änderungen aktiviert haben.
Erst dadurch nimmt er seinen Dienst auf.
Lassen Sie sich daher nicht von der Meldung irritieren, welche zunächst nach dem Speichern erscheint: +
`Failed to get the status from DCD (The connection 'piggy01' does not exist)`
//Connection 'piggy01' isn't found: consider activating changes


[#start_connection]
=== Verbindung aktivieren

Nach dem Speichern der Verbindungseigenschaften und einem Aktivieren der Änderungen nimmt die Verbindung automatisch ihren Betrieb auf.
Das kann so schnell gehen, dass Sie bereits direkt nach dem Aktivieren der Änderungen sehen, wie Hosts im Monitoring angelegt wurden:

image::dcd_pending_changes.png[alt="Liste der anstehenden Änderungen unmittelbar vor der automatischen Übernahme ins Monitoring."]

Wenn Sie diese Seite kurz darauf neu laden, sind diese Änderungen wahrscheinlich schon wieder verschwunden, weil sie ja vom DCD automatisch aktiviert wurden.
Die neuen Hosts sind dann bereits im Monitoring und werden regelmäßig überwacht.


[#actions]
=== Aktionen für eine Verbindung

tbw.



[#automatic_deletion_of_hosts]
== Automatisches Löschen von Hosts

Wie oben erwähnt, können Sie den DCD selbstverständlich Hosts, die es „nicht mehr gibt“, automatisch aus dem Monitoring löschen lassen.
Das klingt erst einmal sehr logisch.
Was _genau_ das „nicht mehr gibt“ allerdings bedeutet, ist auf den zweiten Blick doch etwas komplexer, da es verschiedene Fälle zu betrachten gibt.
Wir gehen in folgender Übersicht davon aus, dass Sie die Löschoption aktiviert haben.
Denn sonst werden grundsätzlich nie Hosts automatisch entfernt.

[cols="30,~"]
|===
|Situation |Was geschieht? 

|Eine DCD-Verbindung wird entfernt.
|Wenn Sie eine DCD-Verbindung stilllegen ([.guihint]#do not activate this dynamic configuration connection#) oder ganz entfernen, bleiben alle Hosts, die durch diese Verbindung erzeugt wurden, erhalten.
Bei Bedarf müssen Sie diese von Hand löschen.

|Ein piggybacked Host wird nicht mehr überwacht.
|Wenn Sie den Host, über den Sie Ihre Cloud- oder Containerumgebung überwachen, aus dem Monitoring entfernen, erzeugt dieser natürlich keine Piggyback-Daten mehr.
In diesem Fall werden die automatisch erzeugten Hosts _nach einer Stunde_ automatisch entfernt.

|Ein piggybacked Host ist nicht erreichbar.
|Wenn Ihre Cloud-Umgebung mal nicht erreichbar ist, und der {CMK}-Service, der diese abfragt, auf {CRIT} geht, so bleiben die erzeugten Hosts _auf unbestimmte Zeit_ im Monitoring.
Hier gibt es keinen einstündigen Timeout!

|Der {CMK}-Server selbst ist gestoppt.
|Ein Stoppen des ganzen Monitorings führt zwar dazu, dass Piggyback-Daten veralten, aber natürlich werden angelegte Hosts deswegen _nicht_ gelöscht.
Das gleiche gilt, wenn der {CMK}-Server neu gebootet wird (wodurch vorübergehend alle Piggyback-Daten verloren gehen, da diese in der RAM-Disk liegen).

|Ein Host ist nicht mehr in den Piggyback-Daten enthalten.
|Das ist quasi der Normalfall:
Ein Host in der Cloud-/Containerumgebung ist verschwunden.
In diesem Fall wird er _sofort_ aus dem Monitoring entfernt.

|===

Beachten Sie, dass es mit der Regel [.guihint]#Automatic host removal# für alle Hosts die Möglichkeit gibt, diese xref:hosts_setup#hosts_autoremove[automatisch entfernen zu lassen.]
Beide Optionen zum _Lifecycle Management_ arbeiten unabhängig voneinander, d.h. ein Host wird entfernt, wenn eine der beiden Voraussetzungen erfüllt ist.





[#configuration]
== Konfiguration
// Hier kommen 1) die Hintergrundinfos rein, die man braucht, um die Optionen in den Host manager settings zu verstehen und 2) die Beschreibung der Optionen selbst (sofern die Inline-Hilfe nicht ausreicht)
// Die Option Group "Activate changes" gibts nicht mehr und Exclude "Activate changes" for time ranges ist aus den Connection Properties in die Host manager settings gewandert

////
Zwei weitere Optionen befassen sich mit dem automatischen Aktivieren von Änderungen -- für den Fall, dass wirklich Hosts angelegt oder entfernt wurden.
Denn nur dadurch tauchen diese dann auch im Monitoring auf.

Wenn das xref:wato#activate_changes[Aktivieren der Änderungen] bei Ihrer Instanz sehr lange dauert, können Sie mit [.guihint]#Group "Activate changes"# dafür sorgen,
dass das nach Möglichkeit nicht bei jedem neuen Host sofort passiert, sondern nachdem einige „zusammengekommen" sind.

Ferner können Sie das automatische Aktivieren von Änderungen auch für bestimmte Tageszeiten komplett verbieten -- z.B. für die Tageszeiten, wo ihr Monitoring-System aktiv betreut wird.
Denn wenn der DCD Änderungen aktiviert, werden auch alle anderen Änderungen aktiv, die Sie oder ein Kollege gerade gemacht haben!
////


[#diagnosis]
== Diagnose

=== Ausführungshistorie

Wenn Sie dem DCD bei der Arbeit zusehen möchten, finden Sie in der Liste der Verbindungen bei jedem Eintrag das Symbol icon:icon_dcd_history[].
Dieses führt Sie zur Ausführungshistorie:

image::dcd_execution_history.png[alt="Ausführungshistorie bei Suche und Anlegen neuer Hosts."]

Sollte aus irgendwelchen Gründen die Erstellung eines Hosts fehlschlagen, sehen Sie dies in der Ausführungshistorie.


=== Audit Log

Mit [.guihint]#Setup > General > Audit log# öffnen Sie eine Seite mit der Liste aller Änderungen, die in der Setup-GUI gemacht wurden -- egal ob diese bereits aktiviert wurden oder nicht.
// TK: Die 3 folgenden Sätze stimmen dann auch nicht mehr.
// Suchen Sie nach Einträgen vom Benutzer `automation` bzw. dem Benutzer, den Sie stattdessen autorisiert haben (siehe hierzu den Abschnitt xref:user_automation[Der Automationsbenutzer]).
// Unter diesem Benutzerkonto arbeitet der DCD und erzeugt Änderungen.
// So können Sie nachvollziehen, wann er welchen Host angelegt oder entfernt hat.


ifdef::onprem[]
=== Log-Datei des DCD

Die Log-Datei des DCD ist `~/var/log/dcd.log`.
Hier ist ein Beispiel, welches zur vorherigen Abbildung passt:

.~/var/log/dcd.log
[{file}]
----
2021-11-10 14:45:22,916 [20] [cmk.dcd] ---------------------------------------------------
2021-11-10 14:45:22,916 [20] [cmk.dcd] Dynamic Configuration Daemon (2.0.0p14) starting (Site: mysite, PID: 7450)...
2021-11-10 14:45:22,917 [20] [cmk.dcd.ConnectionManager] Initializing 0 connections
2021-11-10 14:45:22,918 [20] [cmk.dcd.ConnectionManager] Initialized all connections
2021-11-10 14:45:22,943 [20] [cmk.dcd.CommandManager] Starting up
2021-11-10 15:10:58,271 [20] [cmk.dcd.Manager] Reloading configuration
2021-11-10 15:10:58,272 [20] [cmk.dcd.ConnectionManager] Initializing 1 connections
2021-11-10 15:10:58,272 [20] [cmk.dcd.ConnectionManager] Initializing connection 'piggy01'
2021-11-10 15:10:58,272 [20] [cmk.dcd.ConnectionManager] Initialized all connections
2021-11-10 15:10:58,272 [20] [cmk.dcd.ConnectionManager] Starting new connections
2021-11-10 15:10:58,272 [20] [cmk.dcd.piggy01] Starting up
2021-11-10 15:10:58,273 [20] [cmk.dcd.ConnectionManager] Started all connections
----
endif::[]


ifdef::onprem[]
[#files]
== Dateien und Verzeichnisse

[cols="30,~",options="header"]
|===
|Pfad |Bedeutung 
|`~/tmp/check_mk/piggyback` |Hier entstehen Piggyback-Daten. Für jeden in den Piggyback-Daten enthaltenen piggybacked Host entsteht ein Verzeichnis.
|`~/var/log/dcd.log` |Log-Datei des Dynamic Configuration Daemon (DCD).
|===
endif::[]


////
Alte Texte:
[{image-left}]
image::dcd_large_icon_dcd_connections.png[alt="Symbol für Dynamische Host-Verwaltung.",width=100%]

Er bildet die Grundlage für künftige Erweiterungen von {CMK}, welche dynamisch die Konfiguration anpassen.
Das kann z.B. auch das Verwalten von Benutzern bedeuten.
Zu diesem Zweck arbeitet der DCD mit Verbindungen (_connections_).
Jede Verbindung kann aus einer ganz bestimmten Art von Quelle Informationen holen und hat dazu seine eigene spezifische Konfiguration.

Mit speziellen Verbindungen wird es in Zukunft noch einfacher werden, Hosts aus einer vorhandenen CMDB automatisch nach {CMK} zu übernehmen.


[#user_automation]
=== Der Automationsbenutzer

In {CMK} gibt es standardmäßig einen xref:glossar#automation_user[Automationsbenutzer.]
Dieser Benutzer wird von {CMK} angelegt, um automatisierte Abrufe durchführen zu können.
Ein existierender Automationsbenutzer ist auch für die dynamische Host-Verwaltung zwingend notwendig.

Haben Sie, aus welchen Gründen auch immer, in Ihrem System diesen Benutzer gelöscht oder geändert, so müssen Sie einen anderen Benutzer mit automatisiertem Zugriff auf die REST-API schaffen.
In diesem Fall öffnen Sie die globale Einstellung [.guihint]#Connection to the REST API# in [.guihint]#Setup > General > Global settings > Dynamic configuration.#

image::dcd_connection_RESTAPI.png[alt="Auswahl eines Benutzers für die REST-API."]

Hier können Sie einen anderen Benutzer und dessen Zugriffsdaten (Name, Passwort) eintragen statt des standardmäßig ausgewählten Automationsbenutzers.
Sobald Sie die Änderungen mit icon:icon_save[alt="Symbol für das Speichern."] [.guihint]#Save# gespeichert haben, wird der ausgewählte Benutzer zum Zugriff auf die REST-API genutzt und Sie können mit der dynamischen Host-Verwaltung fortfahren.
////