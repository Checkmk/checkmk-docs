// -*- coding: utf-8 -*-
// IGNORE
include::global_attr.adoc[]
= {CMK} in Grafana integrieren
:title: {CMK} in Grafana integrieren
:description: Mit dem {CMK}-Plugin für Grafana können Sie Ihre Monitoring-Daten in Grafana-Dashboards visualisieren. Lesen Sie hier, wie Sie das Plugin einrichten.

{related-start}
xref:monitoring_kubernetes#[Kubernetes überwachen]
xref:monitoring_docker#[Docker überwachen]
{related-end}

[#intro]
== Einleitung

[{image-left}]
image::grafana_logo.png[width=168]

{CMK} verfügt mit seinem integrierten xref:graphing#[Graphing-System] über ein mächtiges Werkzeug zum Aufzeichnen und Visualisieren von xref:glossar#metric[Metriken.]
Dennoch kann es sinnvoll sein, link:https://grafana.com/[Grafana^] als externes Graphing-System anzubinden,
z.B. weil Sie Grafana bereits nutzen und die Daten von {CMK} mit Daten aus anderen Systemen in gemeinsamen Dashboards zusammenführen möchten.

In allen aktuell gepflegtes Grafana-Versionen ist es möglich, {CMK} in allen Editionen direkt als Datenquelle anzusprechen.
So können Sie einzelne Metriken oder sogar ganze, in {CMK} bereits vordefinierte Graphen, anzeigen zu lassen.
Zusätzlich haben Sie die Möglichkeit, dynamisch eigene Graphen erstellen lassen, indem Sie über xref:regexes#[reguläre Ausdrücke] eine Gruppe von Hosts und Services bestimmen, von denen bestimmte Metriken in dem Graphen berücksichtigt werden sollen.

Dieser Artikel beschreibt, wie Sie Ihre Metriken aus {CMK} in Grafana abrufen und darstellen.
Eine ausführliche Anleitung, wie Sie Grafana nutzen und konfigurieren können, finden Sie in der link:https://grafana.com/docs/[Dokumentation bei Grafana Labs.^]

Das Grafana-Plugin wird unabhängig von {CMK} entwickelt und in einem eigenen link:https://github.com/Checkmk/grafana-checkmk-datasource[Github-Repository^] gepflegt.
Dieser Artikel beschreibt die Einrichtung des Plugins in Version 4, welche mit {CMK} {v22} bis {current-major} zusammenspielt.
Exakte Angaben, welche Plugin-Version welche Versionen von {CMK} und Grafana miteinander koppelt, entnehmen Sie bitte der link:https://github.com/Checkmk/grafana-checkmk-datasource/blob/main/README.md[Readme-Datei im Github-Repository^].
Da die Installation des Plugins in Grafana erfolgt, ist eine Auslieferung zusammen mit {CMK} nicht sinnvoll.


[#installation]
== Das Plugin in Grafana installieren

Je nach Installationsart Ihres Grafana-Servers und Ihrer {CMK}-Edition kommen verschiedene Methoden der Plugin-Installation in Frage.
Einzige Einschränkung hierbei: Benutzer des Grafana-Cloud-Angebots müssen das Plugin xref:installation_marketplace[über die offizielle Grafana Plugin-Sammlung] aktivieren.

Bei On-Premises-Installationen von Grafana können Sie zudem das Plugin auch per Befehlszeile aus der offiziellen Grafana-Plugin-Sammlung aktivieren.
Des Weiteren haben Sie die Möglichkeit der Installation aus einem Zip-Archiv.
Dies ermöglicht auch das Testen neuer Versionen, wenn diese noch nicht in die offizielle Grafana-Plugin-Sammlung aufgenommen wurden.

Die hier vorgestellten Installationsmethoden wurden mit Grafana 12.1 getestet.
Bei älteren Versionen stehen möglicherweise nicht alle Installationsarten zur Verfügung oder die Vorgehensweise weicht ab.

[#installation_marketplace]
=== Installation aus der Grafana GUI (Grafana Cloud und eigener Server)

Sowohl bei Grafana Cloud als auch bei Deployment auf einem eigenen Server können Sie die {CMK}-Datenquelle direkt aus der Grafana-GUI installieren.
Navigieren Sie zu [.guihint]#Home > Connections > Add new connection# und geben Sie dann im Suchfeld "{CMK}" ein.
Sie erhalten dann die Ergebnisliste mit einem einzigen Fund, der Sie zur Übersichtsseite des Plugins bringt.
Hier sehen Sie noch einmal die detaillierte Beschreibung der {CMK}-Datenquelle und können diese mit Klick auf [.guihint]#Install# in Ihrer Grafana-Instanz verfügbar machen.
Die verfügbaren Optionen ändern sich nun und Sie haben die Möglichkeit, mit Klick auf den neuen Link [.guihint]#Add new data source# eine xref:activate[Verbindung zu Ihrer {CMK}-Instanz einzurichten.]

[#installation_cli]
=== Installation auf der Kommandozeile (eigener Grafana-Server)

Bei Betrieb von Grafana auf einem eigenen Server ist dort die Installation aus der Grafana Plugin-Sammlung via Kommandozeile möglich.
Die gezeigten Befehle beziehen sich auf Grafana unter Linux.
Gehen Sie auf anderen Plattformen analog vor.

[{shell-raw}]
----
{c-root} grafana-cli plugins install checkmk-cloud-datasource
----

Starten Sie den Grafana-Serverdienst neu:

[{shell}]
----
{c-root} systemctl restart grafana-server
----

Anschließend ist das Plugin in der Oberfläche von Grafana verfügbar und kann aktiviert und eingerichtet werden.

[#installation_zip]
=== Installation aus Zip-Archiv (eigener Grafana-Server)

Auf der link:https://github.com/Checkmk/grafana-checkmk-datasource/releases[Releases-Seite des GitHub-Repositorys^] finden Sie das signierte Zip-Archiv `checkmk-cloud-datasource-X.Y.Z.zip`.
Das Namensschema weist noch auf die einstige Zweiteilung bis zur Version 3.x des Plugins hin, jedoch ist mit Version 4.0 die Einschränkung auf {CE} weggefallen und das signierte Plugin kann mit allen {CMK}-Editionen verwendet werden.

Falls Sie das Grafana-Plugin mit {RE} oder {SE} bereits in Version 3.x benutzt haben, bedeutet das für das Update auf 4.x,
dass Sie zuerst das alte Plugin  _tribe-29-checkmk-datasource_ deinstallieren müssen.

[{image-border}]
image::grafana_download_plugin.png[]

Statt über den Browser können Sie die Datei natürlich auch direkt über die Kommandozeile laden.
Beachten Sie, dass Sie dafür die aktuelle Version wissen müssen – im folgenden Beispiel schreiben wir die Version in die Variable `$plugvers`.
Auch hier beziehen sich die gezeigten Befehle auf Grafana unter Linux.
Gehen Sie auf anderen Plattformen analog vor.

[{shell-raw}]
----
{c-root} plugvers='4.0.3'
{c-root} wget https://github.com/Checkmk/grafana-checkmk-datasource/releases/download/v${plugvers}/checkmk-cloud-datasource-${plugvers}.zip
----

Entpacken Sie jetzt das Zip-Archiv:

[{shell}]
----
{c-root} unzip checkmk-cloud-datasource-${plugvers}.zip
----

Erstellen Sie ein Plugin-Verzeichnis, falls dieses noch nicht existiert, und machen Sie den Linux-Benutzer, unter dessen Kennung die Grafana-Prozesse ausgeführt werden (meist `grafana`), zu dessen Eigentümer:

[{shell}]
----
{c-root} mkdir -p /var/lib/grafana/plugins
{c-root} chown grafana:grafana /var/lib/grafana/plugins
----

Verschieben Sie den entstandenen Ordner in das Plugin-Verzeichnis von Grafana.
Üblicherweise ist das der Pfad `/var/lib/grafana/plugins/`:

[{shell}]
----
{c-root} mv -v checkmk-cloud-datasource /var/lib/grafana/plugins/
----

Ändern Sie den Eigentümer auf den Grafana-Benutzer:

[{shell}]
----
{c-root} chown -R grafana:grafana /var/lib/grafana/plugins/checkmk-cloud-datasource
----

Eine Installation über das Klonen des Git-Archivs (wie in früheren Versionen dieses Artikels beschrieben) ist nicht mehr möglich.
Falls Sie am Plugin mitentwickeln wollen, lesen Sie die link:https://github.com/Checkmk/grafana-checkmk-datasource/blob/main/DEVELOPMENT.md[Hinweise für Entwickler^].


[#create_user]
== Grafana-Benutzer in {CMK} erstellen

Die Grafana-Anbindung benötigt auf Seite von {CMK} einen Benutzer, der über ausreichende Berechtigungen verfügt und sich zudem über ein Automationspasswort (_automation secret_) statt eines Passworts authentifiziert.
Normale Gast- oder Monitoring-Benutzer genügen nicht, aus Sicherheitsgründen sollten Sie jedoch keinen Administrator verwenden.
	
Der einfachste Weg zu einem "passenden" Benutzer ist, die xref:wato_user#roles[Rolle] des Gastbenutzers (`guest`) zu klonen und mit der zusätzlichen Berechtigung [.guihint]#User management# (lesender Zugriff auf Benutzerinformationen) zu versehen.
// MFS: User management ist sehr irreführend für eine read-only Berechtigung!
Falls Sie Ihre Grafana-Benutzerrolle auf einer anderen Rolle basieren lassen, achten Sie darauf, dass neben [.guihint]#User management# auch die Berechtigung [.guihint]#See all host and services# gesetzt ist.

Ist die Rolle erstellt, legen Sie einen oder mehrere Grafana-Benutzer mit Automationspasswort (_automation secret_) an.
Der Rolle zugewiesene Berechtigungen können Sie später weiter einschränken, beispielsweise wird kein Zugriff auf xref:glossar#bi[BI] oder die xref:glossar#ec[Event Console] benötigt.

[#activate]
== Plugin einrichten
// TK: Nicht so wichtig, aber allgemein sollten alle Screenshots aus dem normalen {CMK} Plugin, also nicht {CMK} for Cloud, gezogen werden.
// MFS: Einige hübsche, lange gepflegte Graphen habe ich nur auf meinem produktiven CMK-Server, den ich eben mit Grafana Cloud verbunden habe. Die Testsysteme hinter der Firewall haben viele Flatlines.
// MFS: Und zwei Jahre später habe ich nun eine aus dem Internet erreichbare Raw-Instanz mit produktiven Monitoringdaten...

Nachdem die notwendigen Dateien installiert wurden, können Sie das Plugin in Grafana aktivieren.
Wechseln Sie dazu in die Konfiguration und navigieren Sie zu [.guihint]#Home > Connections > Data sources#.
Hier können Sie über den Knopf [.guihint]#Add data source# eine neue Datenquelle hinzufügen.

// image::grafana_plugins_overview.png[]

Damit gelangen Sie zur Übersicht der verfügbaren Datenquellen.
Den Eintrag zu {CMK} finden Sie unten in der Kategorie [.guihint]#Others# oder einfach, indem Sie auch hier ins Suchfeld "Checkmk" eingeben.

// image::grafana_plugin_cmk.png[]

Das Formular zu dieser Datenquelle ist recht einfach gehalten.
Geben Sie hier die URL zu Ihrer Instanz, den Typ Ihrer Edition und den soeben für Grafana angelegten xref:create_user[Benutzer] ein.
// TK: Der Zugriff auf die REST-API gelingt, weil ich für den Grafana-Benutzer in {CMK} ein Automationspasswort gewählt habe, oder?
// MFS: Exakt.

[TIP]
====
Wenn Sie {CMK} in einer xref:distributed_monitoring#[verteilten Umgebung] verwenden, dann geben Sie hier die URL zu Ihrer Zentralinstanz an:
====

image::grafana_plugin_config.png[]

Falls Sie mehrere {CMK}-Instanzen anbinden möchten, können Sie die einzelnen Verbindungen optional mit einem eindeutigen Namen versehen.
Ansonsten lassen Sie den Standard `Checkmk` respektive `Checkmk for Cloud Edition` einfach stehen.

Nachdem Sie die Verbindung mit dem Knopf [.guihint]#Save & test# gespeichert haben, steht sie Ihnen als Datenquelle in Grafana zur Verfügung und Sie können Ihre ersten Graphen konfigurieren.


[#graphs]
== Graphen erstellen

[#emptydash]
=== Ein leeres Dashboard erzeugen

Unter [.guihint]#Home > Dashboards# finden Sie ein Drop-down-Menü, welches mit dem Pluszeichen gekennzeichnet ist.
Klicken Sie dort auf [.guihint]#New dashboard#, um ein neues Dashboard zu erstellen:

image::grafana_new_dashboard.png[]


[#singlemetric]
=== Eine einzelne Metrik eines Hosts anzeigen

Das einfachste Dashboard zeigt einen einzigen Graphen eines Services eines Hosts. 
Dies kann auch die Metrik eines xref:glossar#local_check[lokalen Checks] sein, für den keine vorgefertigten Graphen existieren.
In einem bestehenden oder dem eben erzeugten Dashboard erstellen Sie eine neue Visualisierung.
Wählen Sie hier zuerst [.guihint]#Add visualization# aus:

image::grafana_dashboard_addpanel.png[]

Mit Erstellung der Visualisierung gelangen Sie zur Auswahl der Datenquelle.
Nach der Auswahl von [.guihint]#Checkmk# befinden Sie sich direkt im Editiermodus der Abfrage (_Query_) für das neu erstellte Panel.
Ein Panel ist ein Container für eine Visualisierung.

Der Zugriff auf zu visualisierende Daten unterscheidet sich etwas zwischen {CRE} und den kommerziellen Editionen:
In {RE} arbeiten Sie mit vordefinierten Menüs für Instanz, Host-Name, Service und so weiter.
In den kommerziellen Editionen haben Sie die Möglichkeit, Kaskaden von Filtern zu bestimmen.
Dies erlaubt eine sehr detaillierte Auswahl auch unter Verwendung regulärer Ausdrücke.
Das folgende einfache Beispiel ist so gewählt, dass Sie es mit allen Editionen durchspielen können.

Wählen Sie zunächst die [.guihint]#Site#, danach filtern Sie nach einem [.guihint]#Hostname# im Monitoring.
Nutzen Sie für den ersten Test einen beliebigen Host, der den Windows- oder Linux-Agenten nutzt.
Als [.guihint]#Service# wählen Sie [.guihint]#Check_MK#.
Setzen Sie den Typ der [.guihint]#Aggregation# auf [.guihint]#Maximum#.
Als [.guihint]#Graph type# stehen [.guihint]#Single metric# oder [.guihint]#Predefined graph# (vordefinierte Graphen) zur Auswahl:
[.guihint]#Predefined graphs# übernehmen Metriken aus {CMK}, welche auch kombinierte Graphen enthalten können.
Unsere Screenshots zeigen hier die [.guihint]#Single metric#, welche die Gesamtausführungszeit des Agenten ([.guihint]#Time spent waiting for Checkmk agent#) enthält.

.Auswahl der Metriken über Filter in den kommerziellen Editionen
image::grafana_dashboard_single_config.png[]

.Auswahl der Metriken über vordefinierte Menüs in {RE}
image::grafana_dashboard_single_config_cre.png[]

Grafana zeigt das Ergebnis direkt an.
Mit dem Knopf [.guihint]#Apply# können Sie den Graphen anwenden, ohne das Dashboard zu sichern.
Mit [.guihint]#Save# werden Sie aufgefordert, einen Titel für das neue [.guihint]#Dashboard# anzugeben und speichern schließlich das neu erstellte Dashboard.

.Neues Dashboard mit wiedererkennbarer Benennung
image::grafana_dashboard_single_view.png[]


[#predefined]
=== Einen vordefinierten Graphen aus {CMK} anzeigen

Die Entwickler von {CMK} haben bereits viele korrespondierende Metriken in gemeinsamen Graphen zusammengefasst, damit Benutzer leichter einen Überblick über verschiedene Aspekte einer einzigen Ressource erhalten.
Sie können die Metriken aus einem solchen vorgefertigten Graphen direkt in Grafana anzeigen lassen.

Die Vorgehensweise entspricht zunächst der im vorherigen Abschnitt erläuterten.
Allerdings wählen Sie zum Abschluss als [.guihint]#Graph type# den Eintrag [.guihint]#Predefined graph# und den zu verwendenden [.guihint]#Predefined graph# des Services.

Sollten Sie eine Fehlermeldung erhalten, dass die Auswahl kombinierter Metriken mit mehr als 200 Elementen unzulässig ist, schränken Sie mit weiteren Filtern ein.
Stellen Sie im Zweifel die Filter nach vorne, die eine deutliche Einschränkung der Ergebnismenge versprechen.

image::grafana_dashboard_predefined_config.png[]

Sind Sie mit der getroffenen Auswahl zufrieden, klicken Sie den Knopf [.guihint]#Apply#.
Der Graph ist nun im gewählten Dashboard verfügbar.

image::grafana_dashboard_predefined_view.png[]


[#complexgraphs]
=== Komplexe Graphen erstellen

Gerade in einem dynamischen Cluster möchte man oft den gesamten Verlauf einer Metrik über alle beteiligten Hosts verfolgen können, ohne einen Graphen jedes Mal anpassen zu müssen, wenn ein neuer Knoten hinzukommt oder wegfällt.
Um dies zu erreichen, haben Sie verschiedene Möglichkeiten, Graphen dynamisch anzupassen.

Die erste Möglichkeit besteht in der Filterung nach [.guihint]#Host Labels# oder [.guihint]#Host Tags# statt der Auswahl einzelner Hosts.
Eine weitere Möglichkeit ist die Verwendung xref:regexes#[regulärer Ausdrücke.]
Sie können reguläre Ausdrücke auf Hosts oder Services anwenden.
Im folgenden Beispiel matcht `pass:[filesystem]` alle Services, die `filesystem` enthalten – egal, wie viele Dateisysteme ein Host eingebunden hat.

image::grafana_dashboard_combined_config.png[]

Mit `pass:[filesystem.*nvme]` würden Sie die Auswahl auf alle Dateisysteme auf NVMe-Laufwerken einschränken, ganz gleichen welchen Dateisystemtyp diese nutzen, da der Teil des Strings zwischen `filesystem` und `nvme` beliebig sein kann.

Zusätzlich zu den erweiterten Filtermöglichkeiten bestimmen Sie mit [.guihint]#Aggregation# die Darstellung der Metriken im Graphen und mit [.guihint]#Graph#, welcher Graph als Referenz herangezogen werden soll.
Beachten Sie, dass nur dann Metriken zu einem Host/Service angezeigt werden, wenn dieser auch über den ausgewählten Graphen verfügt.
Der Graph sieht dann zum Beispiel so aus:

image::grafana_dashboard_combined_view.png[]

[#transform]
=== Umbenennung über reguläre Ausdrücke

Im Editiermodus jedes Panels finden Sie einen Reiter [.guihint]#Transform#.
Mit dem hier vorhandenen Unterpunkt [.guihint]#Rename by regex# können
Sie die Bezeichnung von Metriken umsortieren oder nicht benötigte Informationen unterdrücken.
Unser folgendes Beispiel sucht zwei durch Komma und folgendes Leerzeichen getrennte Zeichengruppen, vertauscht diese und stellt explizit `Service` und `Host` vorne an:

image::grafana_series_renaming_regex.png[]

Die Variablen `$1` und `$2` entsprechen hierbei den in der Zeile darüber „eingefangenen“ Zeichenketten (_Match-Gruppen_ oder _Capture Groups_).
Grafana erlaubt auch verschachtelte Match-Gruppen.
Einen Überblick über deren Möglichkeiten zeigt der entsprechende Abschnitt im xref:regexes#matchgroups[Artikel zu regulären Ausdrücken].

[#variables]
== Flexiblere Graphen mit Variablen

Über Variablen können Sie Dashboards flexibel mit Graphen versehen.
So haben Sie die Möglichkeit, per Drop-down-Auswahl den Host einer bestimmten Metrik zu bestimmen, oder Sie nutzen Variablen, um Graphen für mehrere Hosts auf einen Schlag einem Dashboard hinzuzufügen.
Dieser Artikel kann und soll nicht die link:https://grafana.com/docs/grafana/latest/dashboards/variables/[Dokumentation bei Grafana^] ersetzen.
In erster Linie wollen wir einen Überblick der Einsatzmöglichkeiten und einen Einstieg in das Thema vermitteln.

Variablen können aus _Queries_ erstellt werden.
In diesem Fall können Sie auf Sites, Hosts oder Services filtern.
Alternativ haben Sie die Möglichkeit, _Mengen_ oder _Freitextfelder_ zu definieren, was beliebige Filter ermöglicht.

[#variable_create]
=== Variablen erstellen

Jede Variable ist eine Eigenschaft eines Dashboards.
Sie muss in den Einstellungen des Dashboards erstellt werden und kann dann nur innerhalb dieses Dashboards verwendet werden.
Da _Query_ die umfangreichste Konfiguration erfordert, zeigen wir dessen Verwendung in unserem Beispiel.

Die relevanten Eigenschaften einer Variablen sind ihr Typ und ihr Name, alle anderen Eigenschaften dienen nur der Übersichtlichkeit im Dashboard.
Der Name sollte Unterscheidungen unterstützen.
Wenn Sie also planen, mehrere Variablen zur Auswahl von Hosts aus verschiedenen Untermengen zu nutzen, verwenden Sie statt `host` wie im Beispiel einen Namen, der auf diese Menge referenziert, zum Beispiel `host_from_linuxservers`.

.Erstellung einer Variable `host` in den Dashboard-Eigenschaften
image::grafana_variable_name.png[]

Achten Sie bei der Wahl der Datenquelle darauf, dass eine {CMK}-Verbindung ausgewählt ist.
Den gewählten Objekttyp können Sie weiter einschränken, zum Beispiel mit regulären Ausdrücken.
Verwendete Filter werden auf dem {CMK}-Server ausgewertet.
Dagegen werden die folgenden Felder [.guihint]#Regex# und [.guihint]#Sort# von Grafana ausgewertet.

.Mit Filtern legen Sie fest, welche Werte die Variable annehmen kann
image::grafana_variable_query.png[]

Die beiden Checkboxen für [.guihint]#Selection options# ganz unten auf der Seite sind von der späteren Verwendung abhängig.
Sie können diese bei Bedarf jederzeit anpassen, lassen Sie für den ersten Test beide auf der (leeren) Voreinstellung.
Speichern Sie die Variablen mittels [.guihint]#Save dashboard#, wenn Sie alle Einstellungen vorgenommen haben.
// TK: Die beiden genannten GUI-Elemente sind im Screenshot nicht zu sehen.


[#variable_use]
=== Variablen für Graphen nutzen

Sie können die vergebenen Variablen nun in die dafür passenden Felder eintragen, um einen flexiblen Graphen zu erstellen.
Die Verwendung der Variablen ist zudem im Titel des Graphen möglich.

.Der Zugriff auf Variablennamen geschieht, wie in einigen Shells, über das vorangestellte Dollarzeichen
image::grafana_variable_use.png[]

Im Dashboard wird für jede Variable eine Drop-down-Auswahl angezeigt, über die Sie einstellen, für welche Variablenwerte (Hosts, Services...) Sie das Dashboard anzeigen lassen.
Wenn Sie Mehrfachauswahl aktiviert haben, können Sie in den Einstellungen des Panels die Option [.guihint]#Repeat by variable# setzen, um das Panel für jeden ausgewählten Variablenwert anzuzeigen.

.Drop-down-Auswahl der referenzierten Hosts mit Möglichkeit der Mehrfachauswahl
image::grafana_variable_panel.png[]

[#files]
== Dateien und Verzeichnisse

Die folgenden Dateien und Verzeichnisse sind auf einem selbst gehosteten Grafana-Server relevant.
Alle Angaben beziehen sich auf Linux-Server und die Installation aus von Grafana bereitgestellten Paketen.
Für andere Betriebssysteme oder die Installation aus den Quellcodes können abweichende Pfade gelten.

[cols="30,~",options="header"]
|===
|Pfad |Bedeutung
|`/var/lib/grafana/plugins/` |Hier sucht Grafana nach (neuen) Plugins. Jedes Plugin bekommt dabei ein eigenes Unterverzeichnis. Das Plugin von {CMK} legen Sie daher hier ab.
|`/etc/grafana/` |Konfigurationsverzeichnis von Grafana.
|`/etc/grafana/grafana.ini` |Zentrale Konfigurationsdatei von Grafana. Hier legen Sie fest, welche nicht signierten Plugins Sie zulassen.
|===
