// -*- coding: utf-8 -*-
// IGNORE unpackaged
include::global_attr.adoc[]
= MKPs für GUI-Erweiterungen
:revdate: 2023-06-02
// SKIPCOMMITS 2025-06-02
:title: MKPs für GUI-Erweiterungen - {CMK}-Erweiterungspakete für Dashboards, Ansichten, Berichte
:description: Dashboards, Ansichten und Berichte lassen sich ganz einfach paketieren und mit anderen teilen - auch über die {CMK} Exchange.

{related-start}
xref:devel_intro#[Erweiterungen für {CMK} entwickeln]
// xref:dev_guidelines#[Richtlinien für Check-Plugins]
xref:mkps#[{CMK}-Erweiterungspakete (MKPs)]
{related-end}


== Einleitung
{cee-only} Die xref:glossar#mkp[{CMK}-Erweiterungspakete (MKPs)] können neben funktionalen Erweiterungen auch solche für die Benutzeroberfläche (GUI) verpacken, also Dashboards, Ansichten oder Berichte.
Das Besondere daran: Sie können derlei MKPs in den kommerziellen Editionen direkt über die Weboberfläche erstellen, externe Dateien oder Werkzeuge werden nicht benötigt.
Alternativ steht dafür natürlich auch die Kommandozeile zur Verfügung, ebenfalls exklusiv in den kommerziellen Editionen.

Die MKPs lassen sich dann intern mit weiteren Nutzern und {CMK}-Installationen teilen und natürlich auch über die link:https://exchange.checkmk.com/[{CMK} Exchange.]
Doch auch ohne Beteiligung der Community oder weiterer Instanzen kann es nützlich sein, komplexe Kreationen zu paketieren.

Wird beispielsweise ein Dashboard mit der Option [.guihint]#Make this dashboard available for other users# erstellt, steht dieses allen oder einigen Nutzern ebenfalls zur Verfügung.
Löschen Nutzer ihre Dashboards dann aber irgendwann wieder, sind sie natürlich auch für alle anderen verloren -- sofern sie sich nicht rechtzeitig persönliche Kopien angefertigt haben.
Da bietet es sich an, dass mit entsprechenden Rechten ausgestattete Nutzer Dashboards bei Bedarf als Erweiterung zur Verfügung stellen.

Auch eine _Versionierung_ von Dashboards wird so möglich -- nützlich für reibungslose Updates.

////
ML: Hier kommt noch ein hübsches Beispielboard hin.
image::mkp_visuals_example.png[alt="Ein individuelles Dashboard."]
////

Das Vorgehen zum Erstellen von MKPs ist für alle Arten von GUI-Erweiterungen identisch, daher beschränken wir uns im Folgenden auf das Beispiel Dashboard.

Voraussetzung: Nutzer benötigen die Berechtigung [.guihint]#Manage Extension Packages (MKPs).#


[#webgui]
== Weboberfläche

=== GUI-MKPs erstellen

Los geht es in der Dashboard-Liste unter [.guihint]#Customize > Visualization > Dashboards.#
Wenn Sie bereits ein eigenes Dashboard angelegt haben, können Sie damit arbeiten.
Ansonsten erstellen Sie eine private Kopie eines beliebigen eingebauten Dashboards.
In beiden Fällen ist Ihr Ausgangspunkt ein Dashboard im Bereich [.guihint]#Customized.#

image::mkp_visuals_01.png[alt="Liste mit angepassten Dashboards."]

Über icon:icon_mkp_viewable_clone[alt="Icon für das Klonen von Elementen."] [.guihint]#Clone this dashboard for packaging as extension package# erstellen Sie aus dem Dashboard eine Erweiterung, die anschließend im Bereich [.guihint]#Extensions# gelistet wird:

image::mkp_visuals_03.png[alt="Listen mit angepassten und als Erweiterungen geführten Dashboards."]

Von hier aus gelangen Sie über icon:icon_mkp_viewable_package[alt="Icon, das zum Paketmanagement führt."] [.guihint]#Go to extension packages# zur Verwaltung der Erweiterungspakete.
Ihre unpaketierten Erweiterungen, beziehungsweise Dateien, sehen Sie unter [.guihint]#Packages > List unpackaged files.#

image::mkp_visuals_04.png[alt="Liste mit GUI-Erweiterungen."]

Über icon:icon_new_mkp[] [.guihint]#Create Package# erstellen Sie nun das Paket.

image::mkp_visuals_05.png[alt="Einstellungsdialog eines zu paketierenden Dashboards."]

In den Paketeinstellungen fügen Sie unten unter [.guihint]#Packaged files# die eben erstellte GUI-Erweiterung ein.
Natürlich können dies auch mehrere Dashboards oder sonstige Elemente sein.
Ansonsten müssen Sie vor allem auf die korrekten Versionsinformationen achten.
Zum einen benötigt das Paket selbst eine Versionsnummer.
Diese muss den Richtlinien des link:https://semver.org/[Semantic Versioning^] folgen, also zum Beispiel `1.0.0`.
Zum anderen können Sie die minimal und maximal unterstützten {CMK}-Versionen angeben.
Praktisch ist die Versionierung für {CMK}-Updates und verteiltes Monitoring mit Instanzen mit unterschiedlichen {CMK}-Versionen (mehr dazu im xref:mkps#enabled_inactive_cli[MKP-Artikel]).

Nach der Paketierung werden Ihre Pakete auf der Startseite der Erweiterungspakete gelistet -- hier im Beispiel in zwei unterschiedlichen Versionen, ein mal aktiviert, ein mal deaktiviert:

image::mkp_visuals_06.png[alt="Versionierte und paketierte Erweiterungen in der Übersicht."]

Unter [.guihint]#All packages (enabled or disabled)# haben Sie nun die Möglichkeit, die Pakete als MKP-Dateien herunterzuladen.


=== GUI-MKPs installieren

Die Installation von Paketen ist weitgehend selbsterklärend.
Zunächst laden Sie das gewünschte Paket unter [.guihint]#Setup > Maintenance > Extension packages# über icon:icon_upload[alt="Icon für den Paket-Upload."] [.guihint]#Upload package# hoch.

image::mkp_visuals_07.png[alt="Upload-Formular für Erweiterungspakete mit Dashboard-MKP."]

Das Paket landet wieder in der Tabelle [.guihint]#All packages (enabled or disabled)# und kann dort über icon:icon_install[alt="Icon zum Aktivieren von Erweiterungen."] aktiviert werden.

image::mkp_visuals_08.png[alt="Hochgeladenes, nicht aktiviertes Paket in der Paketverwaltung."]


[#cli]
== Kommandozeile

=== GUI-MKPs erstellen

Alternativ können Sie auch über die Kommandozeile paketieren.
Das Vorgehen entspricht exakt dem Paketieren funktionaler Erweiterungen, wie im xref:mkps#[MKP-Artikel] ausführlich beschrieben.
Daher hier nur die Kurzversion:



. Erstellen des Dashboards.
. Wechsel auf die Kommandozeile als Instanzbenutzer.
. Nicht paketierte Dateien auflisten: +
`mkp find`
. Erstellen der Paketkonfiguration: +
`mkp template mydashboard`
. Bearbeiten der Konfiguration in: +
`~/tmp/check_mk/mydashboard.manifest.temp`
. Erstellen des Pakets mit: +
`mkp package tmp/check_mk/mydashboard.manifest.temp`
. Paket wird gespeichert unter: +
`/var/check_mk/packages_local/mydashboard-1.0.0.mkp`


=== GUI-MKPs installieren
Wenn Sie derlei MKPs nun installieren und aktivieren möchten:

. Installieren: +
`mkp add /tmp/mydashboard-1.0.0.mkp`
. Aktivieren: +
`mkp enable mydashboard-1.0.0.mkp`

Befehlsreferenzen, eine Beschreibung des MKP-Formats und weitere Hinweise finden Sie im xref:mkps#[MKP-Artikel.]

{cre-only} *Hinweis* für Nutzer von {RE}:
Auch hier können Sie GUI-Erweiterungen wie alle anderen MKPs installieren.
Da die kommerziellen Editionen jedoch einige exklusive visuelle Elemente (etwa Dashlets) enthalten, könnten Sie über eine Meldung folgender Art stolpern: +
`Dashlet type 'state_host' could not be found. Please remove it from your dashboard configuration.` +
Hier fehlt also ein einzelnes Dashlet, das übrige Dashboard ist aber weiterhin nutzbar.

[#files]
== Dateien und Verzeichnisse

[cols="44,~",options="header"]
|===
|Pfad |Bedeutung
|`~/local/lib/check_mk/gui/plugins/views` |Ablageort für als Erweiterung geklonte Ansichten.
|`~/local/lib/check_mk/gui/plugins/reports` |Ablageort für als Erweiterung geklonte Berichte.
|`~/local/lib/check_mk/gui/plugins/dashboards` |Ablageort für als Erweiterung geklonte Dashboards.
|`~/tmp/check_mk/mydashboard.manifest.temp` |Konfigurationsdatei zum Erstellen des Pakets.
|`~/var/check_mk/packages_local/` |Ablageort für installierte MKPs.
|`~/local/share/check_mk/enabled_packages/` |Ablageort für aktivierte MKPs.
|===
