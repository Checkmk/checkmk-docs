// -*- coding: utf-8 -*-
// IGNORE UserPrincipalName saml |
include::global_attr.adoc[]
= Anmeldung mit SAML
:revdate: 2024-04-23
:title: Anmeldung mit SAML
:description: {CMK} kann in eine Single-Sign-On-Lösung (SSO) eingebunden werden. Lesen Sie hier, wie Sie die Authentifizierung mit SAML einrichten.

{related-start}
xref:ldap#[Benutzerverwaltung mit LDAP/Active Directory]
{related-end}


[#intro]
== Einleitung

In diesem Artikel erfahren Sie, wie Sie eine Anmeldung via _Secure Assertion Markup Language_ (SAML) einrichten.

SAML ist eine standardisierte Methode, externen Anwendungen und Diensten mitzuteilen, dass ein Benutzer derjenige ist, der er zu sein behauptet.
Durch SAML wird Single Sign-On (SSO) möglich, denn man kann damit einen Benutzer einmal authentifizieren und diese Authentifizierung dann an mehrere Anwendungen übermitteln.
Mit Hilfe der Verbindung und Kommunikation zwischen sogenanntem „Service Provider“ (SP) und sogenanntem „Identity Provider“ (IdP) wird es somit den Mitarbeitern ermöglicht, mit nur einer einzigen Anmeldung auf verschiedene Webanwendungen zuzugreifen.
In der SAML-Architektur stellt der Service Provider die Anwendung zur Verfügung und der Identity Provider verwaltet die digitalen Identitäten der Benutzer.

SAML wird in den kommerziellen Editionen von {CMK} unterstützt und kann dort direkt in der {CMK}-Weboberfläche eingerichtet werden.
Die Rolle des Service Providers übernimmt {CMK}.
Als Identity Provider (IdP) fungiert beispielhaft Entra ID, wie im xref:saml_cee[Kapitel zur Einrichtung] beschrieben.

[TIP]
====
Microsoft Entra ID (kurz: Entra ID) ist seit 2023 der neue Name für Azure Active Directory (Azure AD).
Die in diesem Artikel enthaltenen Screenshots und Inhalte von Konfigurationsdateien verwenden aber noch den alten Namen Azure AD.
====

{cre-only}
Bis zur {CMK}-Version {v22} wurde SAML alternativ auch mit dem Apache-Modul `mod_auth_mellon` unterstützt und dieses als Bestandteil der {CMK}-Software mit ausgeliefert.
Beginnend mit Version {v23} ist `mod_auth_mellon` nicht mehr in der {CMK}-Software enthalten.
Wenn Sie als Benutzer von {CRE} SAML nutzen wollen, müssen Sie `mod_auth_mellon` daher selbst installieren.
Die darauf aufbauende Konfiguration ist im xref:saml_re[Kapitel zu {RE}] beschrieben.
Sie wird aber von uns *nicht* mehr unterstützt.

[TIP]
====
Die Thematik Transportverschlüsselung (TLS/SSL) wird in den Beispielen nur in einer simplen, beispielhaften Umsetzung aufgenommen.
In Produktivumgebungen mit link:https://checkmk.com/de/blog/how-become-your-own-certificate-authority[eigener CA^] und sorgfältiger Zertifikatsbehandlung werden sich entsprechende Abweichungen ergeben, die von Ihrer eigenen Infrastruktur abhängen.
====


[#use_saml]
== SAML in {CMK} nutzen

Sobald Sie alle Punkte der Einrichtung durchlaufen haben, kann das SAML-Login vom Benutzer in {CMK} verwendet werden.
Die Button-Beschriftung kann verändert werden, wie xref:configure_saml[unten beschrieben.]

image::saml_login.png[alt="{CMK} Login mit SAML-Button.", width=55%]

Jeder durch SAML berechtigte Benutzer wird automatisch in {CMK} angelegt, sobald er sich das erste Mal dort anmeldet.
Vorausgesetzt, es gibt nicht bereits einen Benutzer mit der gleichen ID.
Sollte bereits ein Benutzer mit gleicher ID vorhanden sein, so wird die aktuelle Erstellung des Benutzers abgelehnt.

Die Benutzerdaten werden bei jeder {CMK}-Anmeldung des Benutzers synchronisiert.

Damit SAML funktioniert, müssen mehrere Voraussetzungen erfüllt sein:

* Die xref:omd_https#[Weboberfläche muss mit HTTPS abgesichert] sein. HTTP-Adressen werden aus Sicherheitsgründen nicht akzeptiert.

* {CMK}s SAML-Endpunkte für ID/Metadaten und Antworten (Assertion Consumer Service) müssen beim IdP registriert worden sein. Wie dies geschehen kann, zeigen wir weiter unten.

* Nachrichten, die der IdP an {CMK} richtet -- Antworten auf Authentifizierungsanfragen (nur für die Assertion zwingend) und Attributangaben -- müssen mit einem der xref:supported_algorithms[unterstützten Algorithmen] signiert sein.


[#supported_algorithms]
=== Unterstützte Algorithmen

Für die Kommunikation mit dem IdP akzeptiert {CMK} die folgenden Algorithmen:

* RSA-SHA256
* RSA-SHA384
* RSA-SHA512
* ECDSA-SHA256
* ECDSA-SHA384
* ECDSA-SHA512

{CMK} selber nutzt RSA-SHA256 für die Signierung seiner Anfragen.

Sollte der IdP für seine Antwort keinen der genannten Algorithmen verwenden, so wird seine Antwort von {CMK} abgewiesen.


[#saml_cee]
== SAML einrichten

Um SAML in den kommerziellen Editionen nutzen zu können, muss erst der IdP eingerichtet werden, in unserem Beispiel ist das Entra ID (hieß bis 2023 Azure Active Directory).
Danach wird der SP, also {CMK}, mit den benötigten Informationen versorgt.


[#access_azure]
=== Anmeldung in Entra ID

==== {CMK}-SAML-Service in Entra ID registrieren

Als nächstes wird der {CMK}-SAML-Service bei Entra ID registriert.
Rufen Sie hierfür [.guihint]#Enterprise applications > Create your own application# auf.

image::saml_azure_own_application.png[alt="Erstellung einer eigenen Applikation in Entra ID."]

Vergeben Sie einen beliebigen Namen, z.B. `checkmk-saml`.
Wir empfehlen, die Applikation nicht `checkmk` zu nennen, um Verwechslungen mit dem {CMK}-Agenten zu vermeiden.

Wählen Sie die Option [.guihint]#Integrate any other application you don't find in the gallery (Non-gallery)# und klicken Sie danach auf den Button [.guihint]#Create.#

Auf der Entra ID-Übersichtsseite haben Sie damit folgende Funktion angelegt: [.guihint]#Single sign-on > SAML > Basic SAML Configuration:#

image::saml_azure_sign_on.png[alt="Übersicht der Applikationsdaten in Entra ID."]

Jetzt benötigt Entra ID noch zwei weitere Angaben:

* den [.guihint]#Identifier (Entity ID)# im Format `\https://myserver.com/mysite/check_mk/saml_metadata.py` und

* die [.guihint]#Reply URL (Assertion Consumer Service URL)# im Format `\https://myserver.com/mysite/check_mk/saml_acs.py?acs`.

Alle anderen Optionen lassen Sie unangetastet auf dem Default-Wert bzw. leer.
Insbesondere der [.guihint]#Relay State# in der [.guihint]#Basic SAML Configuration# muss unverändert bleiben, da sonst SAML nicht funktioniert.

Rufen Sie nun [.guihint]#Edit > Signing Option > Sign SAML assertion# auf, um Entra ID für die Antworten und Verifizierungen zu konfigurieren:

image::saml_signing_certificate.png[alt="SAML Zugangsdaten in Entra ID."]


[#url_from_azure]
==== SAML-Informationen aus Entra ID erhalten

Als nächstes suchen Sie jetzt in Entra ID die SAML-Informationen, die Sie für {CMK} brauchen.

Und zwar in der Ansicht [.guihint]#Enterprise applications | All applications > Browse Microsoft Entra Gallery > checkmk-saml | SAML-based Sign-On# (siehe oben):

* Im Kasten [.guihint]#SAML Certificates# finden Sie die [.guihint]#App Federation Metadata Url.#
Diese benötigen Sie im nächsten Abschnitt für die Einrichtung von SAML in {CMK} [.guihint]#(Identity provider metadata)#.

* Über den Kasten [.guihint]#Attributes & Claims# gelangen Sie zu einer Ansicht der Benutzerattribute für {CMK}, z.B. E-Mail-Adresse, Vor- und Nachname:

image::saml_attributes_claims.png[alt="Ansicht der Benutzerattribute in Entra ID."]


[#configure_saml]
=== SAML in der {CMK}-Weboberfläche aktivieren

Mit den zuvor ermittelten Informationen richten Sie die SAML-Verbindung auf der {CMK}-Seite ein. 

Falls nötig, fügen Sie vorab das TLS-Zertifikat Ihres IdPs in {CMK} zu den vertrauenswürdigen Zertifikaten hinzu, indem Sie es unter [.guihint]#Setup > Global settings > Trusted certificate authorities for SSL# eintragen.

Öffnen Sie nun [.guihint]#Setup > Users > SAML authentication.#
Nutzen Sie dort [.guihint]#Add connection,# um die Konfiguration einer neuen Verbindung zu beginnen:

image::saml_saml_authentication.png[alt="Die SAML-Verbindung in {CMK}."]

Vergeben Sie für die neue Verbindung eine [.guihint]#Connection ID# und einen Namen.
Der [.guihint]#Name# wird hinterher für die xref:use_saml[Benennung des {CMK}-Anmeldeknopfs] genutzt.

Als nächstes legen Sie im Kasten [.guihint]#Security# fest, ob Sie die Zugriffsverbindungen mit {CMK}- oder mit eigenen Zertifikaten absichern wollen:

image::saml_security.png[alt="Auswahl des Zertifikats für SAML."]

Nutzen Sie eigene Zertifikate, so müssen Sie den [.guihint]#Private key# sowie das [.guihint]#Certificate# angeben.
Eigene Zertifikate werden im Instanzverzeichnis unter `~/etc/ssl/saml2/custom/` abgelegt.

Danach tragen Sie im Kasten [.guihint]#Connection# als [.guihint]#Identity provider metadata# die URL (z.B. App Federation Metadata URL) ein, die Sie im xref:access_azure[vorherigen Abschnitt] herausgesucht haben:

image::saml_connection.png[alt="Eingabe der Verbindungsdaten."]

Alternativ können Sie die Metadaten-XML-Datei auch direkt aus Entra ID herunter- und im obigen Dialog hochladen durch Auswahl des Eintrags [.guihint]#Upload XML file# unter [.guihint]#Identity provider metadata.#
Das ist zum Beispiel dann praktisch, wenn Ihr {CMK}-Server keinen Zugriff auf das Internet hat.
Geben Sie für die zwingend benötigte [.guihint]#{CMK} server URL# die Adresse ein, über die Sie -- nicht Entra ID -- normalerweise auf {CMK} zugreifen, z.B. `\https://myserver.com`.

Nun benötigen Sie im Kasten [.guihint]#Users# noch die Angaben zum Benutzer:

image::saml_users.png[alt="Eingabe der Benutzerinformationen."]

Auch diese Angaben müssen Sie, wie im xref:access_azure[vorherigen Abschnitt] beschrieben, heraussuchen.
Wichtig ist hierbei, dass [.guihint]#User ID attribute# unbedingt eindeutig sein muss, z.B. die User-ID.
{CMK} benötigt hier für jede Angabe den kompletten [.guihint]#claim name# aus Entra ID, also die mit `http` beginnende Adresse,
beispielsweise für die User-ID in obigem Beispiel `\http://schemas.xmlsoap.org/ws/2005/05/identity/claims/userID`.

Um die Zuständigkeiten für alle Benutzer, die sich mit SAML authentisieren, in {CMK} zu regeln, kann jeder Benutzer einer bzw. mehreren xref:wato_user#contact_groups[Kontaktgruppen zugeordnet] werden.
Sie haben verschiedene Möglichkeiten, die Zuordnung in den [.guihint]#Contact groups# zu definieren.

Über die [.guihint]#Roles# können Sie Benutzer gezielt verschiedenen Rollen zuweisen, um hiermit normale Benutzer, Administratoren etc. festzulegen.


[#saml_re]
== SAML in {RE}

[IMPORTANT]
====
Die in diesem Kapitel beschriebene Konfiguration ist nur für Benutzer von {RE} von Interesse, welche die in den kommerziellen Editionen von {CMK} eingebaute xref:saml_cee[SAML-Anbindung] nicht nutzen können.
Voraussetzung ist, dass Sie das Apache-Modul `mod_auth_mellon`, das nicht mit der {CMK}-Software ausgeliefert wird, systemweit nach der link:https://github.com/latchset/mod_auth_mellon[Anleitung auf der Projektseite^] installiert haben.
Die darauf aufbauende Konfiguration wird in diesem Kapitel beschrieben.
Die SAML-Anbindung über `mod_auth_mellon` wird von uns aber nicht mehr unterstützt.
====

Die folgenden Abschnitte beschreiben lediglich die Konfiguration von `mod_auth_mellon` für unterschiedliche, bereits laufende IdPs, exemplarisch anhand von Active Directory Federation Services (ADFS).
Die Anbindung in {CMK} selbst beschränkt sich auf den letzten Schritt aus der ADFS-Anleitung.
Auf dem {CMK}-Server sorgt `mod_auth_mellon` als Service Provider für die Authentifizierung.


=== Anmeldung mit Active Directory Federation Services
// TK: Abhängigkeit auskommentiert
// *Hinweis:* Dieses Feature wird von den SUSE Linux Enterprise Server (SLES) Versionen 12 SP3, 12 SP4 und 15 aufgrund fehlender Abhängigkeiten nicht unterstützt (ab SLES 15 SP1 ist die Anbindung möglich).

==== Voraussetzungen

Die Anmeldung an {CMK} mittels Active Directory ist im Grunde relativ simpel:
Active Directory Federation Services (ADFS) dient als Identity Provider (IdP), {CMK} übernimmt die SAML-Authentifizierung.

Voraussetzungen für diese Anleitung sind entsprechend:

* Funktionierende LDAP-AD-Integration
* Funktionierendes ADFS als IdP
* {CMK}-Server mit SSL
* Ein unterstütztes Betriebssystem
// TK: Abhängigkeit auskommentiert
// SLES 15 SP4 wird derzeit _nicht_ unterstützt!

Die Einrichtung erfolgt in drei Schritten:

. Konfiguration von Apache (ein Ergebnis: XML-Datei mit Metadaten).
. Konfiguration von ADFS: Relying Party Trust mit Mellon-Metadaten einrichten.
. Aktivierung des Logins in {CMK} selbst.


==== Apache konfigurieren

// TK: Abhängigkeit auskommentiert
////
Unter Umständen müssen noch zusätzliche Abhängigkeiten installiert werden, unter Debian/Ubuntu z.B.:

[{shell}]
----
{c-root} apt-get update
{c-root} apt-get install wget libxmlsec1-openssl
----

*Hinweis:* In der {CMK} Appliance ist `libxmlsec1-openssl` bereits installiert.
////

Es geht hier natürlich um die Konfiguration des Instanz-eigenen Apache-Servers, loggen Sie sich also zunächst dort ein:

[{shell}]
----
{c-root} omd su mysite
----

Erstellen Sie nun ein Verzeichnis für `mod_auth_mellon` und wechseln Sie in das Verzeichnis:

[{shell}]
----
{c-omd} mkdir etc/apache/mellon
{c-omd} cd etc/apache/mellon
----

Führen Sie nun `mellon_create_metadata` unter Angabe Ihres Servers sowie Ihrer Instanz mit dem Zusatz `mellon` aus:

[{shell-raw}]
----
OMD[mysite]:~/etc/apache/mellon$ mellon_create_metadata https://myserver "https://myserver/mysite/mellon"
----

Das Modul erzeugt dabei drei Dateien: Zertifikat (`.cert`), Schlüssel (`.key`) und statische Metadaten (`.xml`).
Die XML-Datei wird nicht benötigt und kann gelöscht werden:

[{shell}]
----
OMD[mysite]:~/etc/apache/mellon$ rm *.xml
----

Benennen Sie die Schlüssel- und Zertifikatsdateien der Einfachheit halber um:

[{shell}]
----
OMD[mysite]:~/etc/apache/mellon$ mv *.key mellon.key
OMD[mysite]:~/etc/apache/mellon$ mv *.cert mellon.cert
----

Nun besorgen Sie die benötigten Metadaten direkt von Ihrem ADFS-Server (hier `myadfs`) und speichern sie als `idp-metadata.xml`:

[{shell-raw}]
----
OMD[mysite]:~/etc/apache/mellon$ wget --no-check-certificate -O ./idp-metadata.xml https://myadfs/FederationMetadata/2007-06/FederationMetadata.xml 
----

Nun benötigen Sie das öffentliche Zertifikat des ADFS-Servers, das in der Datei `idp-public-key.pem` gespeichert wird:

[{shell}]
----
OMD[mysite]:~/etc/apache/mellon$ echo -n | openssl s_client -connect myadfs:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | openssl x509 -pubkey -noout > idp-public-key.pem
----

Nur für den Fall, dass Sie sich über das `echo -n` wundern:
Darüber wird die folgende SSL-Sitzung terminiert.

[TIP]
====
Das Zertifikat sollte oder muss gar in den Trust Store hochgeladen werden, für den Fall, dass zum Beispiel der IdP-Service die Zertifikatskette prüft.
Weitere Informationen zum Thema finden Sie im xref:omd_https#[HTTPS-Artikel.]
====

Als letzten Schritt ersetzen Sie die Authentifizierungskonfigurationsdatei `~/etc/apache/conf.d/auth.conf` mit der folgenden Variante -- natürlich unter Angabe Ihres {CMK}-Servers (hier `myserver`) und Ihrer Instanz (hier `mysite`).
Beachten Sie in der folgenden Beispielkonfiguration, dass in der mit `LoadModule` beginnenden Zeile der Pfad des Installationsverzeichnisses je nach verwendeter Distribution variieren kann:

.~/etc/apache/conf.d/auth.conf
[{file}]
----
# Set this to the Name of your {CMK} site, e.g.
#Define SITE
Define SITE mysite

# ServerName from listen-ports.conf needs to be overwritten here
# and being set to the URL of the real server. auth_mellon uses this
# to generate the needed URLs in the metadata
ServerName https://myserver

# Load the module.
<IfModule !mod_auth_mellon.c>

	LoadModule auth_mellon_module /usr/lib/apache2/modules/mod_auth_mellon.so

</IfModule>

# Only enable this for debugging purposes
#MellonDiagnosticsFile /opt/omd/sites/${SITE}/tmp/mellon_diagnostics.txt
#MellonDiagnosticsEnable On

<Location /${SITE}>

	# Use SAML auth only in case there is no {CMK} authentication
	# cookie provided by the user and whitelist also some other required URLs
	<If "! %{HTTP_COOKIE} =~ /^(.*;)?auth_${SITE}/ && \
		! %{REQUEST_URI} = '/${SITE}/check_mk/register_agent.py' && \
		! %{REQUEST_URI} = '/${SITE}/check_mk/deploy_agent.py' && \
		! %{REQUEST_URI} = '/${SITE}/check_mk/run_cron.py' && \
		! %{REQUEST_URI} = '/${SITE}/check_mk/restapi.py' && \
		! %{REQUEST_URI} = '/${SITE}/check_mk/automation.py' && \
		! %{REQUEST_URI} -strmatch '/${SITE}/check_mk/api/*' && \
		! %{REQUEST_URI} = '/${SITE}check_mk/ajax_graph_images.py' && \
		! %{QUERY_STRING} =~ /(_secret=|auth_|register_agent)/ && \
		! %{REQUEST_URI} =~ m#^/${SITE}/(omd/|check_mk/((images|themes)/.*\.(png|svg)|login\.py|.*\.(css|js)))# ">
		
		MellonIdPMetadataFile /opt/omd/sites/${SITE}/etc/apache/mellon/idp-metadata.xml
		MellonIdPPublicKeyFile /opt/omd/sites/${SITE}/etc/apache/mellon/idp-public-key.pem
		MellonSPCertFile /opt/omd/sites/${SITE}/etc/apache/mellon/mellon.cert
		MellonSPPrivateKeyFile /opt/omd/sites/${SITE}/etc/apache/mellon/mellon.key
		MellonEndpointPath "/${SITE}/mellon"
		MellonDefaultLoginPath "/${SITE}/check_mk/"
		
		Order allow,deny
		Allow from all

		MellonSecureCookie On
		MellonCookieSameSite None

		AuthType Mellon
		AuthName "{CMK} SAML Login"
		MellonEnable auth
		Require valid-user
		
		# Get Username
		# ADFS sends username as DOMAIN\username pair.
		# {CMK} just wants the username.
		RewriteEngine on
		RequestHeader set X-Remote-User "expr=%{REMOTE_USER}"
		RequestHeader edit X-Remote-User "^.*\\\(.*)$" "$1"
		
		# When SAML auth fails, show the login page to the user. This should only happen,
		# if e.g. the mellon cookie is lost/rejected or if the IDP is misconfigured.
		# A failed login at the IDP will not return you here at all.
		
    ErrorDocument 401 '<html> \
      <head> \
        <meta http-equiv="refresh" content="1; URL=/${SITE}/check_mk/login.py"> \
      </head> \
      <body> \
        SAML authentication failed, redirecting to login page. \
        <a href="/${SITE}/check_mk/login.py">Click here</a>. \
      </body> \
    </html>'
	
	</If>
	
	# This header is also needed after authentication (outside of the If clause)
	RequestHeader set X-Remote-User "expr=%{REMOTE_USER}"
	RequestHeader edit X-Remote-User "^.*\\\(.*)$" "$1"
	
</Location>
----

Anschließend starten Sie Apache neu:

[{shell}]
----
OMD[mysite]:~/etc/apache/mellon$ omd restart apache
----

Zu guter Letzt laden Sie nun die dynamisch erstellten Mellon-Metadaten als XML-Datei herunter, um sie gleich im AD-Management importieren zu können:

[{shell-raw}]
----
OMD[mysite]:~/etc/apache/mellon$ wget https://myserver/mysite/mellon/metadata -o metadata.xml
----


==== Active Directory konfigurieren

Um einen Relying Party Trust in ADFS anzulegen, gehen Sie wie folgt vor:

Starten Sie die ADFS-Oberfläche:

[.border]
image::saml_adfs_01.png[]

Klicken Sie auf [.guihint]#Add Relying Party Trust:#

[.border]
image::saml_adfs_02.png[]

Belassen Sie die Option auf [.guihint]#Claims aware# und fahren Sie mit dem Start-Knopf fort:

[.border]
image::saml_adfs_03.png[]

Wählen Sie nun [.guihint]#Import data about the relying party from a file# und geben Sie die eben heruntergeladene XML-Datei an:

[.border]
image::saml_adfs_04.png[]

Die [.guihint]#AD FS Management#-Warnung können Sie getrost ignorieren:

[.border]
image::saml_adfs_05.png[]

Unter [.guihint]#Specify Display Name# geben Sie nun `{CMK}` als Namen ein:

[.border]
image::saml_adfs_06.png[]

Bei der Rechtevergabe können Sie *zum Testen* zunächst für [.guihint]#Choose Access Control Policy# den Wert [.guihint]#Permit everyone# wählen; später sollten Sie nach [.guihint]#Permit specific group# ändern.

[.border]
image::saml_adfs_07.png[]

Bestätigen Sie die Zusammenfassung unter [.guihint]#Ready to Add Trust#:

[.border]
image::saml_adfs_08.png[]

Bestätigen Sie abschließend den [.guihint]#Finish#-Dialog und behalten Sie das Häkchen bei [.guihint]#Configure claims issuance policy for this application:#

[.border]
image::saml_adfs_09.png[]

Wählen Sie den eben erstellten Relying Party Trust aus und starten Sie dann den Editor mit [.guihint]#Edit Claim Issuance Policy... :#

[.border]
image::saml_adfs_10.png[]

Fügen Sie im folgenden Dialog über [.guihint]#Add Rule...# eine neue Regel hinzu:

[.border]
image::saml_adfs_11.png[]

Im ersten Schritt [.guihint]#Select Rule Template# wählen Sie [.guihint]#Transform an Incoming Claim# und bestätigen:

[.border]
image::saml_adfs_12.png[]

Im zweiten Schritt [.guihint]#Configure Rule# setzen Sie folgende Werte:

* [.guihint]#Incoming claim type:# `Windows account name`
* [.guihint]#Outgoing claim type:# `Name ID`
* [.guihint]#Outgoing name ID format:# `Transient Identifier`

[.border]
image::saml_adfs_13.png[]

Damit ist auch die ADFS-Konfiguration abgeschlossen.
FS kann nun aus der Windows-Authentifizierung die Authentifizierung für {CMK} ableiten, das Sie im nächsten Schritt anweisen, Benutzer über HTTP-Anfragen zu authentifizieren.


==== {CMK} konfigurieren

In {CMK} aktivieren Sie nun unter [.guihint]#Setup > General > Global Settings > User Interface > Authenticate users by incoming HTTP requests# bei [.guihint]#Current settings# die Option [.guihint]#Activate HTTP header authentication#:

image::saml_adfs_cmk.png[]


=== Ergänzende Informationen zu anderen Systemen

==== Entra ID mit mod_auth_mellon

Wenn Entra ID (hieß bis 2023 Azure Active Directory) als IdP fungiert, ergeben sich einige Änderungen, beispielsweise kann der Benutzername direkt gesetzt werden, ohne umgeschrieben zu werden.

Voraussetzungen für die folgende Beispielkonfiguration:

* UserPrincipalName in LDAP-Verbindung als Identifier setzen (weitere Informationen in der link:https://learn.microsoft.com/de-de/windows/win32/adschema/a-userprincipalname[Microsoft-Dokumentation^]).

* Custom Enterprise App in Entra ID mit UserPrincipalName als 'name'-Attribut (auch dazu mehr in der link:https://learn.microsoft.com/de-de/entra/identity/enterprise-apps/add-application-portal[Microsoft-Dokumentation^]).

Beachten Sie in der folgenden Beispielkonfiguration, dass in der mit `LoadModule` beginnenden Zeile der Pfad des Installationsverzeichnisses je nach verwendeter Distribution variieren kann:

.~/etc/apache/conf.d/auth.conf
[{file}]
----
#Set this to the Name of your {CMK} site, e.g.
# Define SITE mysite
Define SITE mysite

# ServerName from listen-ports.conf needs to be overwritten here
# and being set to the URL of the real server.
# auth_mellon uses this to generate the needed URLs in the metadata.
ServerName https://myserver

# Load the module.
<IfModule !mod_auth_mellon.c>

	LoadModule auth_mellon_module /usr/lib/apache2/modules/mod_auth_mellon.so

</IfModule>

# Only enable this for debugging purposes
# MellonDiagnosticsFile /opt/omd/sites/${SITE}/tmp/mellon_diagnostics.log
# MellonDiagnosticsEnable On

<Location /${SITE}>

	# Use SAML auth only in case there is no {CMK} authentication
	# cookie provided by the user and whitelist also some other required URLs.
   <If "! %{HTTP_COOKIE} =~ /^auth_${SITE}/ && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/register_agent.py' && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/restapi.py' && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/run_cron.py' && \
	! %{REQUEST_URI} = '/${SITE}/check_mk/automation.py' && \
        ! %{REQUEST_URI} -strmatch '/${SITE}/check_mk/api/*' && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/deploy_agent.py' && \
		! %{REQUEST_URI} = '/${SITE}check_mk/ajax_graph_images.py' && \
        ! %{QUERY_STRING} =~ /(_secret=|auth_|register_agent)/ && \
		! %{REQUEST_URI} =~ m#^/${SITE}/(omd/|check_mk/((images|themes)/.*\.(png|svg)|login\.py|.*\.(css|js)))# ">

        RequestHeader unset X-Remote-User
        MellonIdPMetadataFile /opt/omd/sites/${SITE}/etc/apache/mellon/idp-metadata.xml
        # Azure-AD-specific: Not needed because in metadata:
        #MellonIdPPublicKeyFile /opt/omd/sites/${SITE}/etc/apache/mellon/idp-public-key.pem
        MellonSPCertFile /opt/omd/sites/${SITE}/etc/apache/mellon/mellon.cert
        MellonSPPrivateKeyFile /opt/omd/sites/${SITE}/etc/apache/mellon/mellon.key
        MellonEndpointPath "/${SITE}/mellon"
        MellonDefaultLoginPath "/${SITE}/check_mk/"

		Order allow,deny
		Allow from all
				       
		MellonSecureCookie On
		MellonCookieSameSite None
        
		AuthType Mellon
		MellonEnable auth
		require valid-user

        # Azure-AD-specific:
        # Get Username
        # If your assertion offers the username for {CMK} in an attribute you can set it directly as the remote user (REMOTE_USER):
        MellonUser "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"
        RequestHeader set X-Remote-User "%{MELLON_http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name}e" env=MELLON_http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name
		
        # When SAML auth fails, show the login page to the user. This should only happen, if e.g. the mellon cookie is lost/rejected or if the IDP is misconfigured.
        # A failed login at the IDP will not return you here at all.
        ErrorDocument 401 '<html> \
          <head> \
            <meta http-equiv="refresh" content="1; URL=/${SITE}/check_mk/login.py"> \
          </head> \
          <body> \
            SAML authentication failed, redirecting to login page. \
            <a href="/${SITE}/check_mk/login.py">Click here</a>. \
          </body> \
        </html>'
		
	</If>
	
	# Azure-AD-specific:
	# This header is also needed after authentication (outside of the If clause)
	RequestHeader set X-Remote-User "%{MELLON_http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name}e" env=MELLON_http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name
	
</Location>
----


==== NetIQ Access Manager

Wenn NetIQ Access Manager als IdP fungiert, ergeben sich einige Änderungen, beispielsweise kann der Benutzername direkt gesetzt werden, ohne umgeschrieben zu werden.

Beachten Sie in der folgenden Beispielkonfiguration, dass in der mit `LoadModule` beginnenden Zeile der Pfad des Installationsverzeichnisses je nach verwendeter Distribution variieren kann:

.~/etc/apache/conf.d/auth.conf
[{file}]
----

# Set this to the Name of your {CMK} site, e.g.# Define SITE mysite
# Define SITE mysite
Define SITE mysite

# ServerName from listen-ports.conf needs to be overwritten here
# and being set to the URL of the real server. auth_mellon uses this to generate the needed URLs in the metadata.

ServerName https://myserver.mydomain.tld

# Load the module.
<IfModule !mod_auth_mellon.c>

	LoadModule auth_mellon_module /usr/lib/apache2/modules/mod_auth_mellon.so

</IfModule>

# Only enable this for debugging purposes
#MellonDiagnosticsFile /opt/omd/sites/${SITE}/tmp/mellon_diagnostics.log
#MellonDiagnosticsEnable On

<Location /${SITE}>

	# Use SAML auth only in case there is no {CMK} authentication
	# Cookie provided by the user and whitelist also some other required URLs.

    <If "! %{HTTP_COOKIE} =~ /^auth_${SITE}/ && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/register_agent.py' && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/run_cron.py' && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/deploy_agent.py' && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/restapi.py' && \
        ! %{REQUEST_URI} -strmatch '/${SITE}/check_mk/api/*' && \
		! %{REQUEST_URI} = '/${SITE}check_mk/ajax_graph_images.py' && \
        ! %{QUERY_STRING} =~ /(_secret=|auth_|register_agent)/ && \
		! %{REQUEST_URI} =~ m#^/${SITE}/(omd/|check_mk/((images|themes)/.*\.(png|svg)|login\.py|.*\.(css|js)))# ">

        MellonIdPMetadataFile /opt/omd/sites/${SITE}/etc/apache/mellon/idp-metadata.xml
        # NetIQ-specific: Not needed because in metadata:
        #MellonIdPPublicKeyFile /opt/omd/sites/${SITE}/etc/apache/mellon/idp-public-key.pem
        MellonSPCertFile /opt/omd/sites/${SITE}/etc/apache/mellon/mellon.cert
        MellonSPPrivateKeyFile /opt/omd/sites/${SITE}/etc/apache/mellon/mellon.key
        MellonEndpointPath "/${SITE}/mellon"
        MellonDefaultLoginPath "/${SITE}/check_mk/"

		Order allow,deny
		Allow from all
		
		MellonSecureCookie On
		MellonCookieSameSite None

		AuthType Mellon
		MellonEnable auth
		require valid-user


        # NetIQ-specific:
        # Even though it is set as 'optional' in https://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf
        # a NetIQ Access Manager requires it to be set.
        # Specified in oasis link above - line 396
        MellonOrganizationName "<countrycode>" "<your organisation name>"
        # Specified in oasis link above - line 443 / 452
        MellonOrganizationURL  "<countrycode>" "<your organisation url>"
        # Specified in oasis link above - line 454
        MellonOrganizationDisplayName "<countrycode>" "<your organisation display name>"

        # NetIQ-specific:
        # If your assertion offers the username for {CMK} in an attribute you can set it directly as the remote user (REMOTE_USER)
        MellonUser "myusername"

        # NetIQ-specific:
        # If the assertion does contain the username (and was set to MellonUser) then you can set the header directly.
        RequestHeader set X-Remote-User "expr=%{REMOTE_USER}"

    # When SAML auth fails, show the login page to the user. This should only happen,
    # if e.g. the mellon cookie is lost/rejected or if the IDP is misconfigured.
    # A failed login at the IDP will not return you here at all.
        ErrorDocument 401 '<html> \
          <head> \
            <meta http-equiv="refresh" content="1; URL=/${SITE}/check_mk/login.py"> \
          </head> \
          <body> \
            SAML authentication failed, redirecting to login page. \
            <a href="/${SITE}/check_mk/login.py">Click here</a>. \
          </body> \
        </html>'

# This header is also needed after authentication (outside of the If clause)
RequestHeader set X-Remote-User "expr=%{REMOTE_USER}"

</Location>
----


[#migration]
== Bestehende Benutzer migrieren

Nachdem Sie SAML aktiviert haben, können Sie bestehende Benutzer von einer Passwort-basierten Verbindung auf die SAML-Verbindung migrieren.
Setzen Sie dafür in der Benutzerverwaltung unter [.guihint]#Setup > Users > Users# Häkchen bei den gewünschten Konten.
Anschließend starten Sie die Migration über [.guihint]#Migrate selected users.#

image::saml_migration_list.png[alt="Liste mit zur Migration vorgemerkten Benutzern."	]

In einem Zwischenschritt können Sie beliebige Attribute löschen lassen.

image::users_migration.png[alt="Dialog mit löschbaren Benutzerattributen."]
