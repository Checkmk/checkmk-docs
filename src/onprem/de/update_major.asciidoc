// -*- coding: utf-8 -*-
// IGNORE Alertmanager p16 p20 p22 p23 p7
include::global_attr.adoc[]
= Update auf Version 2.3.0
:revdate: draft
:title: Update auf Version 2.3.0
:description: Was es beim Update von {CMK} Version 2.2.0 auf 2.3.0 zu beachten gibt, erfahren Sie in diesem Artikel.

{related-start}
xref:update#[Updates und Upgrades]
xref:install_packages#[Grundsätzliches zur Installation von {CMK}]
{related-end}

[#intro]
== Einleitung

In diesem Artikel finden Sie die wichtigsten Themen, die für das Update Ihrer {CMK}-Version {v22} auf {v23} relevant sind.

Wir empfehlen Ihnen, vor dem Update den kompletten Artikel durchzulesen, damit Sie genau wissen, was auf Sie zukommt: vor, während und nach dem Update.


[#prep]
== Vorbereitungen

In diesem Kapitel erhalten Sie die Übersicht der Themen, um die Sie sich kümmern sollten, bevor Sie das Update durchführen.
Wahrscheinlich wird nicht jedes der Themen für Sie relevant sein:
Bei einem solchen können Sie intern einen Haken setzen und sich gleich das nächste Thema vornehmen.


[#backup]
=== Backup

Wie vor jedem Update einer produktiven Software sollten Sie auch vor dem von {CMK} die Aktualität Ihrer Backups prüfen.

*Betrifft Sie das?*
Ja.

*Was müssen Sie tun?*
Wenn Sie Ihre Backups automatisiert über [.guihint]#Setup > Maintenance > Backups# erstellen, prüfen Sie dort, ob die letzten Backup-Aufträge fehlerfrei durchgelaufen sind.

Weitere Informationen finden Sie in den Artikeln zu xref:backup#[Backups] und zum Thema xref:omd_basics#omd_backup_restore[Instanzen sichern und wiederherstellen.]


[#editions]
=== Auswahl der {CMK}-Edition

// KNW-1291
_TBD: {CME}  basiert nun auf {CCE}._

////
Die {CMK}-Editionsfamilie hat Zuwachs bekommen mit der brandneuen {CCE}.
Was diese zu bieten hat, können Sie im Artikel zur xref:cce#[{CE}] nachlesen.
Dafür heißt es Abschied nehmen von der {CFE}, die es in der {v23} nicht mehr gibt.

Die Möglichkeiten der {FE} leben aber weiter in der {CE}: das zeitlich begrenzte Ausprobieren und das dauerhafte Nutzen einer der kommerziellen Editionen in kleinem Rahmen.
Eine Änderung gibt es allerdings bei der Limitierung zur dauerhaften Nutzung:
Während Sie in der {FE} Edition bis zu 25 Hosts in einer xref:glossar#site[Instanz] überwachen können, sind es in der Cloud Edition 750 Services in einer Instanz.

*Betrifft Sie das?*
Falls Sie in der Version {v22} die {FE} nutzen, müssen Sie sich in der {v23} eine neue Edition suchen.
Eine Kurzvorstellung der {CMK}-Editionen finden Sie xref:intro_setup#editions[hier.]

*Was müssen Sie tun?*
Sollte in Ihrem Fall die Limitierung auf 25 Hosts der {FE} ausreichend gewesen sein, die 750 kostenlosen Services der {CE} aber nicht,
so können Sie entweder eine Subskription erwerben und das Upgrade auf eine der kommerziellen Editionen durchführen -- oder Sie entscheiden sich für das Downgrade auf die kostenlose {RE}.
Führen Sie das Upgrade oder das Downgrade der Edition _vor_ dem Update auf die Version {v23} durch.
Beachten Sie die dabei auch die Hinweise im Artikel zu xref:update#[Updates und Upgrades], insbesondere beim xref:update.html#down2cee[Downgrade auf die {RE}.]

Sollten Sie mit der neuen Grenze von 750 Services keine Probleme haben, dann bietet sich der Upgrade der {FE} auf die neue {CE} an,
so wie er xref:cfe2cce[weiter unten] beschrieben ist.
////

[#linux_versions]
=== Linux-Distributionsversionen

In der {CMK} Version {v23} werden einige veraltete Distributionen nicht mehr unterstützt werden.

*Betrifft Sie das?*
Das betrifft Sie, wenn auf Ihrem {CMK}-Server eine der folgenden – in der {v22} noch unterstützten – Linux-Distributionen installiert ist:

* Debian 10 _Buster_ (finale Entscheidung steht noch aus)
* RedHat Enterprise Linux 7
* Ubuntu in Short Term Support (STS) Versionen 22.10 bis 23.10. +
Ab {v23} unterstützt {CMK} nur noch Ubuntu Long Term Support (LTS) Versionen.
* SLES 15 SP1 und SP2

*Was müssen Sie tun?*
Führen Sie vor dem Update von {CMK} zuerst ein xref:release_upgrade#[Versions-Upgrade der Linux-Distribution] durch.
Achten Sie darauf, dass die Zielversion der Linux-Distribution von {CMK} {v22} *und* {v23} unterstützt wird.
Welche Linux-Distributionsversionen {CMK} unterstützt, erfahren Sie in der xref:update_matrix#[Update-Matrix für {v23}] und auf der link:https://checkmk.com/de/download[Download-Seite^] nachdem Sie die {CMK}-Version und Ihre Linux-Distribution ausgewählt haben.

Kurz nach Erscheinen von Ubuntu 24.04 LTS werden wir Pakete von {CMK} {v22} und {v23} für diese Distributionsversion bereitstellen. Dies erlaubt es Ihnen, zunächst auf die neueste Patch-Version von {CMK} {v22} zu aktualisieren, dann das Update von Ubuntu 23.10 STS nach 24.04 LTS durchzuführen und hier schließlich auf die neueste Patch-Version von {CMK} {v23} zu aktualisieren.

[#browser]
=== Browser-Unterstützung

{CMK} {v23} nutzt neue JavaScript-Funktionen, die in älteren Browsern nicht zur Verfügung stehen.
Welche Browser in welchen Versionen unterstützt werden, steht in den xref:release_notes#browser[Release notes.]
// Unterstützt werden Chromium ab Version 101, Firefox ab Version 102 und Safari ab Version 16.
// Internet Explorer und Edge/Trident werden nicht unterstützt.

*Betrifft Sie das?*
In der Regel werden Sie auf Desktop-Systemen automatische Updates auf die neueste Version aktiviert haben.

*Was müssen Sie tun?*
Prüfen Sie die verwendete Browser-Version und installieren Sie gegebenenfalls einen aktuelleren Browser.
Wenn Sie für die Anzeige von Dashboards _Single Board Computer_, _Smart TVs_ oder _Digital Signage_ Lösungen verwenden, auf deren Systembrowser Sie keinen Einfluss haben, testen Sie vor dem Update, ob benötigte Dashboards korrekt angezeigt werden.
Kontaktieren Sie gegebenenfalls den Hardware-Hersteller für Updates.


[#agentupdaterhash]
=== Automatische Agenten-Updates von Versionen vor {v22}p8

{CMK} {v23} erstellt keine SHA1-Signaturen für Agentenpakete mehr.
Die Prüfung von SHA256-Signaturen wurde mit Checkmk {v22}p8 eingeführt.
Damit Agenten-Updates auf Version {v23} automatisch stattfinden können, müssen die Agenten vorher auf Version {v22}p8 oder höher aktualisiert werden.

*Betrifft Sie das?*
Dies betrifft Sie, wenn Sie automatische Agenten-Updates durchführen, aber Patch-Versionen des Agenten gelegentlich auslassen.
Es betrifft Sie außerdem, wenn Ihr Deployment vorbereitete Betriebssystem-Images verwendet, die den {CMK} Agent Updater mit ausliefern und sich auf automatische xref:agent_deployment#automatic_installer[Installation/Aktualisierung] verlassen.

*Was müssen Sie tun?*
Stellen Sie sicher, dass alle Agenten, die automatisch aktualisiert werden sollen, mindestens auf Version {v22}p8 aktualisiert wurden.
Überprüfen Sie insbesondere vorbereitete Betriebssystem-Images und aktualisieren Sie den dort vorhandenen Agenten ebenfalls auf Version {v22}p8 oder höher.
Und wenn Sie gerade mit Agenten-Updates beschäftigt sind, können Sie bereits jetzt das per Agentenbäckerei ausgelieferte xref:agentupdatercert[Zertifikat hinzufügen,], sofern dieses später nötig ist.

[#agentlinux]
=== Der Agent für Linux

_TBD: Prüfen, ob hier etwas eingefügt werden muss._

[#agentwindows]
=== Der Agent für Windows: Deprecated Plugins

_TBD: Deprecated Plugins_


[#pythonwindows]
=== Der Agent für Windows: Python 3.4 entfernt

Bis Version {v22} bot {CMK} die Möglichkeit, per Regel der Agentenbäckerei eine Python 3.4 Laufzeitumgebung für Windows-Agenten mitzuliefern.
Diese Option fällt in {v23} weg.

*Betrifft Sie das?*
Hoffentlich nicht: Der Wegfall betrifft Sie nur, wenn Sie in Python geschriebene Agentenplugins auf Windows Server 2008 R2 (EOL bereits in 2020) nutzen.
Auf allen neueren Windows-Versionen laufen aktuelle Python-Versionen.
Alle noch älteren Windows-Versionen – wie Windows Server 2008 R1 oder Windows Vista – unterstützt {CMK} bereits in Version {v22} nicht mehr.

*Was müssen Sie tun?*
Wenn Sie diese Windows-Systeme weiterhin überwachen wollen, müssen Sie Laufzeitumgebung für Agentenplugins, die Python benötigen, selbst bereitstellen:
Installieren Sie auf betroffenen Systemen Python 3.4 manuell.
Stellen Sie für diese Systeme in der Regel [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules > Windows modules > Install Python runtime environment# die Einstellung [.guihint]#Install Python runtime environment > Installation# auf [.guihint]#Never install Python with the agent#.

////
In {CMK} {v23} unterstützt der xref:agent_windows#[Windows-Agent] nicht länger Windows 6.0 (Vista und Server 2008 R1).
Auf betroffenen Systemen kann der Agent von {v22} aber weiter genutzt werden.

*Betrifft Sie das?*
Nur, wenn bei Ihnen diese antiquierten Windows-Systeme (Support-Ende 11. April 2017 respektive 14. Januar 2020) noch im Einsatz sind.

*Was müssen Sie tun?*
Identifizieren Sie die betroffenen Systeme und aktualisieren Sie die installierten Agenten auf die letzte verfügbare Patch-Version der {v22}.
Falls automatische Agenten-Updates konfiguriert sind, xref:automatic_agent_updates[deaktivieren Sie diese] vor dem Update der {CMK}-Instanz.
////

[#mod_auth_mellon]
=== {CMK} ohne Apache-Modul mod_auth_mellon
// https://checkmk.com/werk/14977 - Werk #14977: SAML Apache configuration with mod_auth_mellon is deprecated

link:https://github.com/Uninett/mod_auth_mellon[mod_auth_mellon^] ist ein Software-Modul für Apache, das Dienste zur Authentifizierung (_authentication_) über Secure Assertion Markup Language (SAML) bereitstellt.
Die Anbindung an SAML-Authentifizierungsdienste war in {CMK} {v22} auf zwei Arten möglich:
Auf Apache-Ebene mit mod_auth_mellon (bis Version {v21} die einzig unterstützte Möglichkeit) oder in den kommerziellen Editionen von {CMK} xref:saml#saml_cee[eingebaute SAML-Authentifizierung].
Mit Version {v23} wird mod_auth_mellon nicht mehr mit der {CMK}-Software ausgeliefert.

*Betrifft Sie das?*
Dies betrifft Sie, wenn Sie die {RE} benutzen oder SAML-Authentifizierung in den kommerziellen Editionen mit mod_auth_mellon nutzen.

*Was müssen Sie tun?*
Nutzer der kommerziellen Editionen sollten _vor_ dem Update auf {v23} die SAML-Authentifizierung auf die in {CMK} integrierte Lösung umstellen.
Falls Sie die {RE} benutzen, raten wir _vor_ dem Update zur Deaktivierung der SAML-Authentifizierung.
Sie können dann _nach_ dem Update mod_auth_mellon manuell aus dem Source Code nachinstallieren und erneut aktivieren.
// TK: Reicht das für das Thema mod_auth_mellon?
// MFS: TBD Vertagt für Weekly.


[#pip3]
=== Python-Module deinstallieren

{CMK} {v23} aktualisiert Python von 3.11 auf 3.12.
Diese Aktualisierung betrifft in einer Instanz nachinstallierte Module.
In vielen Fällen sind nachinstallierte Module mit Python 3.12 inkompatibel.
Schlimmstenfalls überschreiben veraltete Module Funktionalität der von {CMK} mitgelieferten Module.

*Betrifft Sie das?*
Dies betrifft Sie nur, wenn Sie für selbst geschriebene oder aus der Exchange bezogene Spezialagenten oder agentenbasierte Check-Plugins explizit Python-Module nachinstalliert haben.
Wenn Sie unsicher sind, führen Sie die im folgenden Schritt beschriebene Prüfung durch.

*Was müssen Sie tun?*
Finden Sie zunächst heraus, ob und – wenn ja –, welche Python-Module in der Instanz installiert sind.
Suchen Sie hierfür die Verzeichnisse `dist-info` und `egg-info`:

[{shell}]
----
{c-omd} find ~/local/lib/python3/ -type d -name '*.*-info'
local/lib/python3/cryptography-41.0.5.dist-info
local/lib/python3/ecdsa-0.18.0.dist-info
----

Notieren Sie die installierten Module und deinstallieren Sie diese anschließend:

[{shell}]
----
{c-omd} pip3 uninstall cryptography ecdsa
----

Wie Sie mit deinstallierten Python-Modulen nach dem Update umgehen, erfahren Sie weiter xref:pip3post[unten.]


////
[#rest-api]
=== REST-API ersetzt Web-API
// https://checkmk.com/werk/13640 - Werk #13640: Deprecation of Web API
// https://checkmk.com/werk/14298 - Werk #14298: Remove Web API

Wie bereits in der {v22} angekündigt, ist die Web-API (auch HTTP-API genannt) in der {CMK}-Version {v23} entfernt worden.
Die Web-API wird durch die xref:rest_api#[REST-API] ersetzt.

*Betrifft Sie das?* Das betrifft Sie, falls Sie eigene Skripte geschrieben haben, die noch die Web-API nutzen.

*Was müssen Sie tun?* Migrieren Sie alle bestehenden Skripte, die die Web-API verwenden, auf die REST-API, bevor Sie auf die {CMK}-Version {v23} umsteigen.
Im xref:rest_api#rest-web-api[Artikel zur REST-API] finden Sie eine Übersicht, welche REST-API-Endpunkte die Web-API-Befehle ersetzen.
////

////
[#kubernetes]
=== Kubernetes-Monitoring
// https://checkmk.com/werk/13561 - Werk #13561: agent_kubernetes: deprecate special agent and associated checks

Den {CMK} {v20} Spezialagenten und die zugehörigen Check-Plugins für das Kubernetes-Monitoring gibt es nicht mehr in der {v23}.
Nutzen Sie stattdessen das in der Version {v22} von Grund auf neu geschriebene und stark verbesserte xref:monitoring_kubernetes#[Kubernetes-Monitoring.]
////

[#prometheus]
=== Prometheus-Checks Datenquelle und Einstellungen

_TBD: Kopiert aus Ausblick_

////
Der xref:monitoring_prometheus#[Prometheus-Spezialagent] bietet `kube-state-metrics` als Datenquelle, dessen Checks nicht mehr aktiv unterstützt werden.
Diese wurden mittlerweile durch verbesserte Gegenstücke im Kubernetes-Agenten ersetzt (siehe link:https://checkmk.com/de/werk/14572[Werk pass:q[#]14572^]).
Zudem wird in den Regeln [.guihint]#Prometheus# und [.guihint]#Alertmanager# die Angabe von IP-Adresse/Host-Name, Port und Pfadpräfix durch ein einziges Eingabefeld [.guihint]#Custom URL# abgelöst (siehe link:https://checkmk.com/de/werk/14573[Werk pass:q[#]14573^]).

In beiden Fällen funktioniert das alte Verfahren weiterhin in {v22}.
Zur Verwendung in {v23} müssen Sie jedoch Ihre Konfiguration auf das neue Verfahren umgestellt haben.
////

[#mk_file_config]
=== Keine Konfiguration von Check-Plugin-Standardwerten mit mk-Dateien

_TBD: Kopiert aus Ausblick_

////
// https://checkmk.com/werk/15250 - Werk #15250: Deprecate configuration of check plugin default levels via .mk file

In der Version {v23} wird es nicht mehr möglich sein, Standardwerte von Check-Plugins oder andere globale Variablen mithilfe von mk-Dateien zu überschreiben.

Dieser veraltete Weg, Plugins zu konfigurieren, ist seit langem nicht mehr dokumentiert --
und funktioniert sowieso nicht mehr bei all jenen Plugins, die auf die in der {v20} eingeführte link:https://docs.checkmk.com/2.1.0/de/update_major.html#check-api[Check-API] umgestellt worden sind.
// TK: Da die Check-API im 2.2.0 update_major herausgefallen ist, stattdessen in die 2.1.0 gelinkt.
Daher wird die Konfiguration von Check-Plugin-Standardwerten mit mk-Dateien beginnend mit der Version {v23} nicht mehr unterstützt.

Details und Hinweise zur Umstellung finden Sie im link:https://checkmk.com/de/werk/15250[Werk #15250.^]
////

[#local_files]
=== Paketierte (MKPs) und nicht paketierte lokale Dateien

Mit lokalen Dateien können Sie die von {CMK} bereitgestellte Funktionalität anpassen und erweitern.
Diese Dateien befinden sich im lokalen Teil der Instanzverzeichnisstruktur, d.h. in `~/local` und können in Erweiterungspaketen organisiert sein oder einfach so „herumliegen“.
Lokale Dateien können bei einem Update Probleme bereiten, wenn sie nicht mehr zur neuen {CMK}-Version passen.

*Betrifft Sie das?*
Da es für {CMK} bei einem Update nicht möglich ist, die Kompatibilität von lokalen Anpassungen vollständig sicherzustellen, sollten Sie Ihre {CMK}-Instanz vor einem Update daraufhin überprüfen, ob lokale Dateien bei Ihnen verwendet werden, welche das sind und wie sie organisiert sind.

*Was müssen Sie tun?*

. Erstellen Sie mit `mkp list` einen Überblick über vorhandene xref:mkps#[Erweiterungspakete (MKPs)] und deren Quellen:
Ihre selbst entwickelten Erweiterungen können Sie meist leicht testen und gegebenenfalls anpassen.
Bei extern bezogenen MKPs sollten Sie recherchieren, ob bekannte Probleme mit {CMK} {v23} vorhanden sind und neue Versionen vorliegen.
In Fällen, in denen bisher vom MKP bereitgestellte Funktionalität nun von  {CMK} {v23} bereitgestellt wird, deaktivieren Sie das Paket vor dem Update.

. Verschaffen Sie sich einen xref:mkps#find_unpackaged[Überblick] über _nicht paketierte_ lokale Dateien Ihrer {CMK}-Instanz, indem Sie als Instanzbenutzer das Kommando `mkp find` ausführen.
Tauchen hier Pfade mit `python3` auf, gehen Sie noch einmal xref:pip3[nach oben zu den Python-Modulen].
Für alle weiteren Dateien gilt: Fassen Sie zusammen gehörende Dateien in xref:mkps#package_mkp[MKPs zusammen.]
Dies erleichtert später die Deaktivierung _en bloc_, sollten nach dem Update Inkompatibilitäten festgestellt werden.

. Vor allem beim Update in xref:distributed_monitoring#[verteilten Umgebungen] mit xref:glossar#distributed_setup[zentraler Konfiguration] sollten Sie sorgfältig darauf achten, für MKPs, die für {CMK} {v22} und {v23} unterschiedliche Versionen erfordern, beide Paketversionen mit korrekten Kompatibilitätsinformationen zu hinterlegen.
Beim Update aktivieren die Remote-Instanzen dann automatisch die passende Version.


[#apis]
=== Programmierschnittstellen
// TK: In dem Kontext muss was zur Migration auf die neuen APIs rein

In {CMK} {v23} wurden einige intern Programmierschnittstellen (APIs) umgebaut.
So werden einige bislang _ad-hoc_ definierte APIs durch wohl spezifizierte ersetzt.

*Betrifft Sie das?*
Das Thema APIs Sie betrifft Sie, wenn Sie die mit {CMK} ausgelieferten um Ihre eigenen, selbst geschriebenen Checks erweitert haben und/oder wenn Sie Plugins aus anderen Quellen nutzen.

*Was müssen Sie tun?*
Überprüfen Sie selbst geschriebene Erweiterungen und solche von Drittanbietern auf ihre Funktionsfähigkeit.
Da die alten APIs während {CMK} {v23} parallel zu den alten benutzt werden können und Änderungen an den bestehenden APIs klein ausfallen konnten, werden die meisten Erweiterungen ohne Modifikationen weiter benutzbar sein.
Sollten Änderungen notwendig sein, raten wir dazu, gleich auf die xref:outlook_newapi[neuen APIs zu migrieren], die ab 
{CMK} {v24} die alten APIs vollständig ersetzen.

// {v20} Thema - auch gültig für {v21}. In {v22} vorerst auskommentiert
////
[#check-api]
=== Die Check-API

In {CMK} {v20} wurde eine neue Check-API eingeführt, die die Check-Plugins neu strukturiert, um ihre Handhabung zu vereinheitlichen und zu vereinfachen.
Da es aber eine große Zahl von Checks gibt, die nach der alten, bis zur Version {v16} gültige Check-API programmiert wurden, kann es sein, dass die Migration von der alten auf die neue Check-API auch in der Version {v22} ein Thema für Sie ist.
Die große Zahl existierender Checks ist auch der Grund, warum die alte Check-API für eine Übergangszeit weiterhin unterstützt wird.

*Betrifft Sie das?* Das Thema Check-API _kann_ Sie betreffen, wenn Sie die mit {CMK} ausgelieferten um Ihre eigenen, selbst geschriebenen Checks erweitert haben und/oder wenn Sie Plugins aus anderen Quellen nutzen und diese z.B. von der link:https://exchange.checkmk.com/[{CMK} Exchange^] heruntergeladen haben.
Das Thema betrifft Sie, wenn eines, einige oder gar alle dieser Check-Plugins noch der alten Check-API folgen.
Die betroffenen Dateien finden Sie in den xref:local_files[lokalen Dateien] Ihrer Instanz.

*Was müssen Sie tun?* Wir versuchen Ihnen den Umstieg auf die neue Check-API so leicht und komfortabel wie möglich zu machen:

So wie beim Update auf die Version {v20} versucht {CMK} auch beim Update auf die Version {v22} alle lokalen Plugins aus den Verzeichnissen `~/local/share/check_mk/checks` und `~/local/share/check_mk/inventory` automatisch auf die neue Check-API zu migrieren.
Diese „Automigration“ passiert zur Laufzeit; die Plugin-Dateien werden nicht verändert.
Wie Sie sich nach dem Update die Ergebnisse anzeigen lassen können, erfahren Sie im Kapitel xref:automigration[Automigration auf die Check-API überprüfen].

Die Chancen stehen zwar gut, dass die Automigration Ihrer Check-Plugins reibungslos funktioniert, dennoch erfordert die ebenfalls in der Version {v20} durchgeführte Umstellung auf Python 3 möglicherweise einige Anpassungen.
Durch die neue Check-API und die Code-Basis Python 3 gibt es gleich zwei gute Gründe, Ihre selbst geschriebenen Check-Plugins zu überarbeiten.
Wir informieren Sie ausführlich über die notwendigen Schritte im link:https://blog.checkmk.com/de/migration-von-checkplugins-auf-checkmk-2.0[Blogpost zur Migration von Check-Plugins.^]

Zu guter Letzt punktet die neue Check-API mit verbesserter Dokumentation:
Es gibt einen einführenden Artikel zur xref:devel_check_plugins#[Programmierung eigener Check-Plugins] und die stets aktuelle Plugin-API-Referenzdokumentation.
Beides können Sie über die {CMK}-Oberfläche aufrufen -- im [.guihint]#Help#-Menü der Navigationsleiste unter [.guihint]#Developer resources.#
////

////
// MFS: Wir sollten relativ früh auf ein Mindest-Patchlevel für Updates verweisen – der Verweis auf p22 kann dann entfallen. Die Beispiele zeigen mittlerweile eh Output der p22.
[#incompatible_mkps]
=== Inkompatible und obsolete MKPs

Über die xref:glossar#mkp[{CMK}-Erweiterungspakete (MKPs)] lässt sich Ihr Monitoring-System recht einfach und bequem erweitern.
Auf der einen Seite kommt es dabei vor, dass solche MKPs nicht weiter gepflegt werden und dann ggf. mit neuen Versionen von {CMK} nicht mehr kompatibel sind.
Auf der anderen Seite nehmen wir immer wieder neue Plugins und Funktionserweiterungen in {CMK} auf, weshalb MKPs mitunter obsolet werden.
Ihre Funktionalität wird schlicht von {CMK} selbst sichergestellt.

*Betrifft Sie das?*
Falls Sie MKPs installiert haben, ist aus diesem Grund eine Prüfung dieser MKPs dringend geboten -- besonders vor einem umfangreichen Update.
So verhindern Sie, dass inkompatible Pakete das Update behindern oder im Anschluss an das Update doppelte oder zumindest sehr ähnliche Services entstehen.

*Was müssen Sie tun?*
Prüfen Sie hierzu Ihre installierten MKPs gegen unseren link:https://checkmk.com/de/integrations[Katalog der Check-Plugins^] und entfernen Sie Pakete, welche inzwischen nativ von {CMK} bereitgestellt werden.
Bei dieser Gelegenheit können Sie auch MKPs entfernen, die eventuell nur mal für einen Probelauf installiert worden sind.
Eine Auflistung finden Sie in den kommerziellen Editionen über [.guihint]#Setup > Maintenance > Extension packages.#
// MA: Hier würde ich der Einfachheit halber einen Screenshot erwarten.

Auf der Kommandozeile können Sie sich installierte Erweiterungen mit dem folgenden Befehl anzeigen lassen:

[{shell}]
----
{c-omd} mkp list
Name        Version Title         Req. Version Until Version Files State                          
----------- ------- ------------- ------------ ------------- ----- -------------------------------
my_cool_mkp 1.0.2   Best MKP ever 2.0.0        2.3.9p99      6     Enabled (active on this site)
hello_world 0.2.1   Hello world!  2.1.0        2.1.99        6     Enabled (active on this site)
----

Zu jedem gelistetem MKP können Sie dann in der Folge auch die Dateien anzeigen lassen, die zu dem Paket gehören:

[{shell}]
----
{c-omd} mkp list my_cool_mkp
/omd/sites/mysite/local/lib/check_mk/base/plugins/agent_based/check_mk.py
/omd/sites/mysite/local/share/check_mk/web/plugins/metrics/custom_metrics.py
----

Sollten Sie über die Prüfung der installierten MKPs und dem Abgleich mit unserem Katalog nicht alle Pakete zuordnen können, empfiehlt sich der hiernach beschriebene xref:dry_run[Probelauf des Updates,] um dabei Inkompatibilitäten zu identifizieren und dann in Ihrem produktiven Monitoring vor dem Update zu entfernen.

[#mkp_backport]
==== MKP-Verwaltung für verschiedene {CMK}-Versionen

Für die Erleichterung von Updates hat {CMK} die Möglichkeit eingeführt, MKPs in verschiedenen Versionen vorzuhalten.
Beim Update wird dann das Paket für {CMK} {v22} automatisch deaktiviert und das für {CMK} {v23} automatisch aktiviert.

Bei Nutzung eines verteilten Monitorings mit xref:glossar#distributed_setup[zentraler Konfiguration] können Sie mit diesem Feature von der Zentralinstanz aus Pakete in verschiedenen Versionen an die Remote-Instanzen xref:dist_setup[verteilen.]
Das klappt sogar, wenn die Remote-Instanzen eine höhere Version haben, wie es beim Update im verteilten Monitoring für eine Übergangszeit der Fall ist.

Falls Sie dieses Feature nutzen wollen, lesen Sie bitte den xref:mkps#[Artikel zur Verwaltung von Erweiterungspaketen (MKPs)].
////

[#incompatible]
=== Inkompatible Änderungen

Wie in jeder {CMK} Version, so gibt es auch in der aktuellen Version {v23} Änderungen der Software, die Rückwirkungen auf ihre {CMK}-Installation haben _können_.
Eine sogenannte _inkompatible Änderung_ erfordert, dass Sie manuelle Anpassungen durchführen, um bestehende Funktionen weiterhin wie gewohnt ablaufen zu lassen und/oder neue Funktionen nutzen zu können.

*Betrifft Sie das?*
In aller Regel wird es inkompatible Änderungen geben, die auch Ihre {CMK}-Installation betreffen.
Eine generelle Aussage ist aber leider unmöglich.
In diesem Artikel haben wir diejenigen Themen zusammengetragen, die für alle oder die meisten {CMK}-Installationen zutreffen.
Es kann aber sein, dass es darüber hinaus weitere, für Sie relevante Änderungen gibt, zum Beispiel bei Checks, die Sie in Ihrer Installation verwenden.

*Was müssen Sie tun?*
Nachdem Sie das xref:update[Update] durchgeführt haben, werden Ihnen in der {CMK}-Oberfläche Anzahl und Inhalt der inkompatiblen Änderungen angezeigt, und Sie werden aufgefordert, diese zu prüfen und zur Kenntnis zu nehmen.
Also werden Sie auf jeden Fall mit diesem Thema konfrontiert werden -- allerdings erst, nachdem Sie das Update durchgeführt haben.
// TK: Das scheint jetzt beim Update etwas anders zu laufen...
// TK: Ist das https://checkmk.com/de/werk/15292 (https://jira.lan.tribe29.com/browse/KNW-1239) was für update_major, für update oder für beide?

Es ist daher eine gute Idee, sich bereits *vor* dem Update einen Überblick über die inkompatiblen Änderungen zu verschaffen:
Öffnen Sie die Liste der link:https://checkmk.com/de/werks?search=&cmk_version$$[$$$$]$$=2.2&compatible=0[Werks.^]
(Die Software-Entwicklung von {CMK} ist in sogenannten Werks organisiert.)
In der Beschreibung eines Werks finden Sie Hinweise, was gegebenenfalls zu tun ist, um die Änderung kompatibel zu machen.

Die frustrierende Nachricht:
Die Werkliste einer Version ist sehr, sehr lang -- selbst wenn sie nur die inkompatiblen Änderungen enthält.
Die tröstliche Nachricht:
An der Anzahl der Änderungen können Sie sehen, wie groß unsere Anstrengungen sind, {CMK} für Sie zu verbessern.


[#update]
== Update

[#dry_run]
=== Best Practices beim Update

Im Folgenden beschreiben wir bewährte Vorgehensweisen (_best practices_), welche wir selbst bei Updates von großen {CMK}-Umgebungen befolgen.
Diese sind sicherlich nicht in jeder Umgebung Pflicht, Sie können Ihnen den Prozess des Updates jedoch erleichtern.


[#update_patch]
==== {CMK}-Version aktualisieren
// https://checkmk.com/werk/13320 - Werk #13320: omd update: Add version compatibility barrier

Vor dem Update auf die Version {v23} muss auf der {CMK}-Instanz die Version {v22} installiert sein.

Wir haben bereits früher von einem Update mit Auslassung einer Hauptversion abgeraten, da es dazwischen einfach zu viele Änderungen gibt, die ein reibungsloses Update behindern und mit großer Wahrscheinlichkeit zu Problemen führen.
Mit der Version {v22} wurde aus dieser Empfehlung eine Voraussetzung -- und eine Sperre eingeführt, die zum Beispiel ein direktes Update von Version {v20} auf {v23} verhindert.

////
Ein Update auf die Version {v22} setzt zurzeit keine bestimmte {v20} Patch-Version voraus.
Es gibt jedoch auch hier gute Gründe, den Sprung auf die {v22} nur von der neuesten {v20} Patch-Version aus zu starten, da z.B. ein {v20} Patch Korrekturen enthalten kann, die das Update auf die Version {v22} erleichtern.
////

Das Update auf {v23} setzt zurzeit mindestens {v22}p23 voraus.
Es kann aber sein, dass in der Zukunft eine bestimmte {v23} Patch-Version eine höhere {v22} Patch-Version für das Update voraussetzt.
Generell empfehlen wir, zuerst {CMK} auf die neueste {v22} Patch-Version zu aktualisieren und erst dann das Update auf die {v23} durchzuführen.


==== Probelauf des Updates durchführen

In großen Umgebungen, in denen auch das Zurückspielen eines selbstverständlich vorhandenen Backups Ihrer {CMK}-Umgebung mit einem gewissen zeitlichen Aufwand verbunden wäre, empfiehlt es sich, vor dem Update der produktiven Umgebung, einen Test mit einer geklonten Instanz durchzuführen.
Zu diesem Zweck können Sie beispielsweise das letzte reguläre Backup Ihrer Instanz unter einem anderen Namen wiederherstellen.

[{shell}]
----
{c-root} omd restore newsite /path/to/backup
----

*Alternativ* können Sie Ihre Instanz auch per `omd cp` kopieren.
Dafür muss die Instanz allerdings kurzzeitig gestoppt werden:

[{shell}]
----
{c-root} omd stop mysite
{c-root} omd cp mysite newsite
----

Führen Sie das Update im Anschluss erst einmal auf dieser neuen geklonten Instanz durch, um hier beispielsweise die oben angesprochenen lokalen Änderungen in der neuen Umgebung zu prüfen.


[#automatic_agent_updates]
==== Agenten-Update vorübergehend abschalten

{cee-only}
Wenn Sie in den kommerziellen Editionen die automatischen Agenten-Updates verwenden, sollten Sie überlegen, diese vor dem Update von {CMK} vorübergehend zu deaktivieren, um den Wechsel auf die neuen Agenten bei den Hosts später kontrolliert vollziehen zu können.
Dazu wählen Sie zuerst [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX# und auf der folgenden Seite den Menüeintrag [.guihint]#Agents > Automatic updates.#
Durch Klick auf den Knopf icon:icon_edit[alt="Symbol zum Bearbeiten eines Listeneintrags."] vor dem [.guihint]#Master switch# können Sie das Agenten-Update komplett abschalten:

image::update_major_automatic_agent_updates.png[alt="Abschaltung des Agenten-Updates per Hauptschalter."]

Nach dem erfolgreichen Update von {CMK} können Sie das Agenten-Update auf gleichem Weg wieder anschalten.

Wir empfehlen an dieser Stelle das automatische Agenten-Update erstmal nur für einzelne Hosts oder Host-Gruppen wieder zu aktivieren.
Auf diese Weise wird der neue Agent nicht gleich auf all Ihre Server ausgerollt und Sie können sich auf einigen wenigen Systemen mit den neu angelieferten Daten vertraut machen.
Auch aufgrund der deutlich gestiegenen Zahl an mitgelieferten Check-Plugins könnten Sie eine ganze Reihe neuer Services finden, welche Sie dann auf den von Ihnen gewählten Testsystemen richtig einstellen können.
Eventuell sind für neue Services auch neue Schwellwerte vonnöten.
Wenn Sie dies erst einmal im Kleinen angehen, ersparen Sie sich so einige Fehlalarme.

Auf der oben angegebenen Seite können Sie dafür einfach ein paar Hosts oder Host-Gruppen in die entsprechenden Felder eintragen und dann den [.guihint]#Master switch# wieder aktivieren.

image::update_major_activate_update_on_selected_hosts.png[alt="Optionen beim Agenten-Update zur Aktivierung auf bestimmten Hosts."]

*Wichtig:* Denken Sie daran, diese Einschränkungen auf explizite Hosts und Host-Gruppen wieder zu entfernen, sobald Sie mit den Ergebnissen zufrieden sind.


[#notifications]
==== Benachrichtigungen vorübergehend abschalten

Sie sollten auch überlegen, xref:glossar#notification[Benachrichtigungen] in der Instanz vor dem Update abzuschalten -- aus ähnlichen Gründen, die wir im vorherigen Abschnitt zu den automatischen Agenten-Updates erklärt haben.
So vermeiden Sie, dass Ihre Kollegen aus dem Monitoring-Team _unnötige_ Benachrichtigungen erhalten.

Die Benachrichtigungen können Sie zentral im Snapin xref:user_interface#master_control[Master control] mit dem Schalter [.guihint]#Notifications# abschalten.

Es kann durchaus vorkommen, dass nach dem Update der eine oder andere Service {CRIT} ist, der dies vorher nicht gewesen ist.
Kümmern Sie sich nach dem Update zuerst um neu auftretende Probleme.
Die unbehandelten Probleme (_unhandled problems_) können Sie sich z.B. im Snapin xref:user_interface#overview[Overview] anzeigen lassen.

*Wichtig:* Vergessen Sie nicht, die Benachrichtigungen wieder einzuschalten, z.B. dann, wenn sich die Zahl der unbehandelten Probleme nach dem Update auf das Niveau vor dem Update eingepegelt hat.


[#update_distributed_monitoring]
=== Update im verteilten Monitoring

Es gibt zwei unterschiedliche Vorgehensweisen, um das Update aller in einem xref:distributed_monitoring#[verteilten Monitoring] beteiligten Instanzen durchzuführen:

* Alle Instanzen stoppen, das Update _en bloc_ durchführen und dann alle Instanzen wieder starten.
* Unter strengen Auflagen ist ein _Mischbetrieb_ für einen gewissen Zeitraum möglich, in dem zunächst die Remote-Instanzen aktualisiert werden und zum Schluss mit dem Update der Zentralinstanz wieder Versionsgleichstand hergestellt wird.

Insbesondere, wenn Sie die Aktualisierung im laufenden Betrieb anstreben, sollten Sie die Hinweise im allgemeinen Artikel zu xref:update#updatedistributed[Updates und Upgrades] lesen.

////
MFS: Mit den Vorbereitungen zusammenziehen
[#dist_setup]
==== MKPs im verteilten Setup

Falls Sie verteiltes Monitoring mit einer xref:glossar#distributed_setup[zentralen Konfiguration] betreiben, aus der auch xref:glossar#mkp[{CMK}-Erweiterungspakete (MKPs)] an die Remote-Instanzen verteilt werden, haben Sie die Möglichkeit, in der {CMK} {v22} Zentralinstanz Pakete für die Remote-Instanzen in Versionen für {v22} und {v23} vorzuhalten.
Es werden dann automatisch die zur Remote-Instanz passenden MKPs verteilt.

Um dieses Feature nutzen zu können, muss zunächst die Zentralinstanz auf Patch-Version {v22}p22 gebracht werden.
Ist dies geschehen, können Sie beginnen, auf der Zentralinstanz zusätzlich xref:mkp_backport[Pakete für {v23} hinzuzufügen.]
Wenn Sie nun Remote-Instanzen auf {v23} aktualisieren, erhalten und aktivieren diese dann automatisch das zur neuen Version passende Paket.
////

=== Das Update durchführen

Am eigentlichen Update der Software hat sich in der {CMK} {v23} nichts Grundlegendes geändert,
d.h. Sie installieren die neue Version, führen das Update der {CMK}-Instanz durch, kümmern sich um Konflikte (falls es denn welche geben sollte) und überprüfen und bestätigen die inkompatiblen Änderungen.

Führen Sie die Update-Prozedur so aus, wie sie im Artikel zu xref:update#detailed[Updates und Upgrades] beschrieben ist.


[#follow-up]
== Nachbereitungen

[#gui]
=== Änderungen der Benutzeroberfläche

Die Benutzeroberfläche (GUI) von {CMK}, die mit Version {v20} komplett neu gestaltet wurde, hat sich auch in der {v23} nicht grundlegend verändert.
Die generellen Abläufe, die Sie aus der Version {v20} und {v22} kennen, können Sie auch in der {v23} unverändert anwenden.
Allerdings haben sich Menüs, Menüeinträge, Symbole und andere Details geändert, um neue Funktionen verfügbar zu machen -- und bestehende zu verbessern.

In den Artikeln dieses Handbuchs stellen wir Ihnen diese Änderungen vor - und im xref:intro_setup#[Leitfaden für Einsteiger] finden Sie eine ausführliche Einführung,
unter anderem in die wichtigsten Elemente der xref:intro_gui#[Benutzeroberfläche.]


////
[#favorites]
==== Die Favoriten wurden entfernt
// https://checkmk.com/de/werk/14727 - Werk #14727: Remove Favorites feature
// TK: Die Info kommt etwas spät, ist aber bei dieser nicht besonders wichtigen Änderung zu verschmerzen.

Die kaum bekannte, wenig genutzte und im Handbuch auch nicht beschriebene Möglichkeit, Hosts und Services als _Favoriten_ zu kennzeichnen wurde mit link:https://checkmk.com/de/werk/14727[Werk pass:q[#]14727^] entfernt.
// TK: Link zum Werk nur deshalb, weil da der Link zum Forum drin ist.
Favoriten konnten bis zur {v22} über den Menüeintrag [.guihint]#Commands > Favorites# gesetzt werden, d.h. im gleichen Menü, indem auch die Kommandos zur Quittierung von Problemen oder der Erstellung von Wartungszeiten zu finden sind.

Als Ersatz für den schnellen Zugriff auf wichtige Hosts und Services bieten sich die xref:user_interface.html#bookmarks[Bookmarks] an, die Sie z.B. in Ansichten setzen können, nachdem Sie sich die gezeigten Hosts oder Services zurechtgefiltert haben.
Eine Beschreibung dazu finden Sie im xref:intro_tools#views[Leitfaden für Einsteiger.]
////


////
[#automigration]
=== Automigration auf die Check-API überprüfen
// https://checkmk.com/werk/10601 - Werk #10601: Auto migration of check plugins to new section definitions

Sie können überprüfen, ob alle lokalen Plugins aus den Verzeichnissen `~/local/share/check_mk/checks` und `~/local/share/check_mk/inventory` automatisch auf die neue xref:check-api[Check-API] migriert werden können.

*Betrifft Sie das?*
Diese Überprüfung ist sinnvoll, wenn in Ihren lokalen Dateien Check-Plugins existieren, die nach der alten, bis zur Version {v16} gültigen Check-API programmiert wurden.

*Was müssen Sie tun?*
Führen Sie als Instanzbenutzer das folgende Kommando aus:

[{shell}]
----
{c-omd} cmk -R
Failed to auto-migrate legacy plugin to check plugin: mssql_counters
Please refer to Werk 10601 for more information.
----

Die Meldung oben zeigt, dass ein Plugin nicht automatisch migriert werden konnte.
Alle gelisteten Plugins müssen von Ihnen manuell migriert werden.
Es gibt einige Gründe, aus denen eine Automigration nicht durchgeführt werden kann und die Sie im genannten link:https://checkmk.com/de/werk/10601[Werk #10601^] nachlesen können.
Wie Sie die manuelle Migration durchführen, erfahren Sie im link:https://blog.checkmk.com/de/migration-von-checkplugins-auf-checkmk-2.0[Blogpost zur Migration von Check-Plugins.^]
////


[#service_discovery]
=== Services aktualisieren

Wie jede Hauptversion, so bringt auch {CMK} {v23} eine ganze Reihe neuer Check-Plugins mit sich.
Sollten Sie den xref:wato_services#discovery_check["Discovery Check"] nicht einsetzen, d.h. das automatische Update der Service-Konfiguration über die periodische Service-Erkennung, werden Sie auf einer ganzen Reihe von Hosts die Suche nach Services durchführen müssen.

Wenn Ihre Hosts entsprechend organisiert sind (z.B. in Ordnern), können Sie hierfür zumeist mit der Funktion [.guihint]#Bulk discovery# arbeiten.
Diese finden Sie unter [.guihint]#Setup > Hosts > Hosts# und dann im Menü [.guihint]#Hosts > Run bulk service discovery.#


[#service_descriptions]
==== Service-Beschreibungen
// MFS: Eigentlich wäre "Service-Namen" passender, es steht aber überall "Service Description" 

Jedes Update von {CMK} bedeutet, dass Service-Beschreibungen geändert werden, um die Konsistenz der Benennung innerhalb des Monitorings und der Dokumentation von {CMK} zu verbessern.
Da die Änderung von Service-Beschreibungen bedeutet, dass mitunter Regeln angepasst werden müssen und historische Monitoring-Daten verloren gehen, belässt {CMK} bei Updates zunächst die alten Beschreibungen.
Sie sollten bei Services, bei denen Verlust alter Monitoring-Daten zu verschmerzen und der Aufwand für die Anpassung von Regeln überschaubar ist, zeitnah auf neue Service-Beschreibungen umstellen.

Gehen Sie hierfür in [.guihint]#Setup > General > Global settings > Execution of checks# die Liste [.guihint]#Use new service descriptions# durch und identifizieren Sie die Services, bei denen die Checkboxen noch nicht aktiv sind und aktivieren Sie diese.
Nach Anwenden der Änderungen sind die neuen Service-Beschreibungen aktiv und es werden wenige Minuten vergehen, bis Sie wieder definierte Zustände der betroffenen Services im Monitoring sehen.


[#agentupdatercert]
=== Zertifikatsprüfung bei Agenten-Updates

Das Verhalten des Kommandozeilenparameters `--trust-cert` des Befehls `cmk-update-agent` wurde geändert.
Bislang wurde die gesamte Zertifikatskette geprüft und dem in der Hierarchie höchsten gefundenen selbst signierten Zertifikat vertraut, in der Regel ist dies das Root- oder ein Intermediate-Zertifikat.
Ab {CMK} {v23} wird nur das Serverzertifikat importiert und diesem vertraut.

*Betrifft Sie das?*
Dies betrifft Sie nur, wenn Sie sich bei der Registrierung von Hosts für automatische Agenten-Updates auf `--trust-cert` verlassen und daneben kein xref:agent_deployment#connection_to_cmk_server[Zertifikat per Agentenbäckerei] bereitstellen.
In diesem Fall verlieren ab {CMK} {v23} Hosts bereits bei Ablauf des Serverzertifikats die Vertrauensstellung, mit {CMK} {v22} registrierte Hosts erst bei Ablauf der Root- oder Intermediate-Zertifikate.

*Was müssen Sie tun?*
Wir empfehlen, zeitnah nach dem Update auf {v23} die korrekten Zertifikate per Agentenbäckerei bereitzustellen und ein Update aller Agenten durchzuführen, um so ein konsistentes Verhalten bei allen Hosts herzustellen, die den Agent Updater verwenden.

////
// TBD: Zusammenziehen mit dem restlichen MKP-Management
[#remove_old_mkps]
=== Obsolete MKPs entfernen

*Betrifft Sie das?*
Dies betrifft Sie, wenn Sie von der Funktion Gebrauch gemacht haben, xref:mkp_backport[MKPs in verschiedenen Versionen] vorzuhalten.

*Was müssen Sie tun?*
Während des Updates werden inkompatible Pakete automatisch auf den Zustand [.guihint]#Disabled# gesetzt, aber nicht vollständig gelöscht.
Zur neuen {CMK}-Version kompatible Pakete werden automatisch aktiviert, Sie erhalten den Zustand [.guihint]#Enabled (active on this site)#.

[{shell}]
----
{c-omd} mkp list
Name        Version Title        Req. Version Until Version Files State                          
----------- ------- ------------ ------------ ------------- ----- -----------------------------
hello_world 0.2.1   Hello world! 2.1.0        2.1.99        6     Enabled (active on this site)
hello_world 0.2.0   Hello world! 2.0.0        2.0.99        6     Disabled
----

Wenn die Funktionalität der neuen Pakete sichergestellt ist und die alten nicht mehr als Referenz benötigt werden, können Sie nach veralteten Paketen suchen:

[{shell}]
----
{c-omd} mkp list | grep Disabled
----

Deinstallieren Sie diese dann mit `mkp remove`.

[{shell}]
----
{c-omd} mkp remove hello_world 0.2.0
----
////

[#pip3post]
=== Python-Module installieren

*Betrifft Sie das?*
Dies betrifft Sie nur, wenn Sie für selbst geschriebene oder aus der Exchange bezogene Spezialagenten oder agentenbasierte Check-Plugins explizit Python-Module nachinstalliert hatten, und diese im Zuge der Vorbereitung des Updates xref:pip3[entfernt] haben.

*Was müssen Sie tun?*
Finden Sie zunächst heraus, ob die zuvor deinstallierten Module bereits mit der neuen {CMK}-Version ausgeliefert werden, zum Beispiel:

[{shell}]
----
{c-omd} pip3 list | grep '^cryptography'
----

Wird das Modul bereits gefunden, kennzeichnen Sie es in Ihren Notizen als nicht benötigt.
Installieren Sie nicht mitgelieferte Module in Ihrer aktuellsten Version nach:

[{shell}]
----
{c-omd} pip3 install ecdsa
----

Testen Sie anschließend die Check-Plugins oder Spezialagenten, die auf in der Instanz installierte Python-Module angewiesen sind.


[#outlook]
== Ausblick

In diesem Kapitel geht es um Themen, die nicht die aktuelle {CMK} Version {v23}, sondern eine der darauf folgenden Versionen betreffen.

[#outlook_newapi]
=== Programmierschnittstellen

Nach {CMK} Version {v23} werden nur noch die wohl spezifizierten APIs zur Programmierung von Check-Plugins, Spezialagenten, Graphing... unterstützt werden.
Die Änderungen betreffen die Verzeichnisstruktur, Erkennung der Plugins (_Discovery_ statt _Registry_) und natürlich die Funktionen und Objekte der APIs selbst.
Einen Überblick über die größten Änderungen liefert link:https://checkmk.com/de/werk/16259[Werk pass:q[#]16259^].

Da die bisherigen APIs ab {CMK} {v24} nicht mehr unterstützt werden, müssen bis zum Update auf {v24} alle Plugins, welche die älteren APIs nutzen, auf die neuen APIs migriert sein.

[#management_board]
=== Management Boards

Die Bezeichnung [.guihint]#Management board# steht für separate Steckkarten oder erweiterte BIOS-Funktionalität (Baseboard Management Controller/BMC, Management Engine/ME, Lights Out Management/LOM) zur Überwachung und Verwaltung der Hardware neben dem installierten Betriebssystem.

Bis {CMK} {v23} können Management Boards auf zwei Arten konfiguriert werden: Als Eigenschaft eines Hosts oder als separater Host. Da die Konfigurierbarkeit als Eigenschaft eines Hosts sehr limitiert ist, wird diese Möglichkeit künftig wegfallen. Hintergründe und Alternativen erläutern wir im link:https://checkmk.com/blog/monitoring-management-boards[Blogartikel "Monitoring management boards"].