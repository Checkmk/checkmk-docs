// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= Single Sign-On mit Kerberos
:revdate: 2023-09-21
:title: Single Sign-On mit Kerberos
:description: Single Sign-On (SSO) ist kein offizielles Feature von {CMK}, trotzdem erfahren Sie in diesem Artikel, wie Sie SSO mit Kerberos in {CMK} integrieren.

{related-start}
xref:ldap#[Benutzerverwaltung mit LDAP/Active Directory]
xref:wato_user#[Benutzer, Zuständigkeiten, Berechtigungen]
xref:omd_https#[Weboberfläche mit HTTPS absichern]
{related-end}


== Einleitung

Ein Single Sign-On auf die GUI von {CMK} mit Kerberos wird von {CMK} zwar nicht offiziell unterstützt, aber Sie können es sich selbst einrichten, sofern Sie grundsätzliches Wissen rund um Kerberos mitbringen.
Was Sie auf der Seite von {CMK} benötigen, zeigt Ihnen diese Anleitung.

Folgende Voraussetzungen müssen erfüllt sein, um die Konfiguration in {CMK} nachträglich auf SSO (Single Sign-On) mit Kerberos umzustellen:

* Die Apache-Version ist 2.4 oder neuer.
* Auf dem {CMK}-Server ist das Modul `libapache-mod-auth-kerb` installiert (bzw. `mod_auth_kerb` unter Red Hat Enterprise Linux und CentOS oder `apache2-mod_auth_kerb` unter SUSE).
* Der Kerberos-Client ist auf dem {CMK}-Server installiert und konfiguriert.
* Eine Keytab wurde -- z.B. in der {CMK}-Instanz unter `~/etc/apache/cmk_http.keytab` -- erstellt und darf nur von dem Instanzbenutzer gelesen werden.
* Der {CMK}-Server wurde als _Service Principal_ eingerichtet.
* Der Browser der Clients ist für den Zugriff mittels Kerberos konfiguriert.

_Optional:_

Wenn Sie möchten, dass sich Nutzer *ohne SSO* weiterhin über die reguläre Login-Seite anmelden können, muss die xref:cookie[Cookie-Authentifizierung] eingeschaltet sein.


[#configuration]
== Integration von Kerberos

Um {CMK} auf die Authentifizierung über Kerberos umzustellen, löschen Sie die Datei `~/etc/apache/conf.d/auth.conf` und schreiben sie neu.
Die Einträge am Anfang des folgenden Dateiinhalts sind lediglich Beispiele.
Passen Sie daher alle mit dem Ausdruck `Define` beginnenden Zeilen Ihrer Umgebung entsprechend an:

.~/etc/apache/conf.d/auth.conf
[source,apache,subs="attributes+"]
----
Define SITE My{CMK}Site
Define REALM MyRealm.org
Define SERVICENAME myservice.mydomain.tld
Define KEYTAB /omd/sites/${SITE}/etc/apache/cmk_http.keytab

<IfModule !mod_auth_kerb.c>
  LoadModule auth_kerb_module /usr/lib/apache2/modules/mod_auth_kerb.so
</IfModule>

<Location /${SITE}>
  <If "! %{HTTP_COOKIE} =~ /^(.*;)?auth_${SITE}/ && \
    ! %{REQUEST_URI} = '/${SITE}/check_mk/register_agent.py' && \
    ! %{REQUEST_URI} = '/${SITE}/check_mk/deploy_agent.py' && \
    ! %{REQUEST_URI} = '/${SITE}/check_mk/run_cron.py' && \
    ! %{REQUEST_URI} = '/${SITE}/check_mk/restapi.py' && \
    ! %{REQUEST_URI} = '/${SITE}/check_mk/webapi.py' && \
    ! %{REQUEST_URI} = '/${SITE}/check_mk/automation.py' && \
    ! %{REQUEST_URI} -strmatch '/${SITE}/check_mk/api/*' && \
    ! %{REQUEST_URI} = '/${SITE}check_mk/ajax_graph_images.py' && \
    ! %{QUERY_STRING} =~ /(_secret=|auth_|register_agent)/ && \
    ! %{REQUEST_URI} =~ m#^/${SITE}/(omd/|check_mk/((images|themes)/.*\.(png|svg)|login\.py|.*\.(css|js)))# ">
  Order allow,deny
  Allow from all
  Require valid-user

  AuthType Kerberos
  AuthName "{CMK} Kerberos Login"

  KrbMethodNegotiate on
  KrbMethodK5Passwd off
  KrbLocalUserMapping on


  # Environment specific: Path to the Keytab, Realm and ServicePrincipal
  KrbAuthRealm ${REALM}
  KrbServiceName HTTP/${SERVICENAME}@${REALM}
  Krb5Keytab ${KEYTAB}

  # When Kerberos auth fails, show the login page to the user
  ErrorDocument 401 '<html> \
      <head> \
        <meta http-equiv="refresh" content="1; URL=/${SITE}/check_mk/login.py"> \
      </head> \
      <body> \
        Kerberos authentication failed, redirecting to login page. \
        <a href="/${SITE}/check_mk/login.py">Click here</a>. \
      </body> \
    </html>'
  </If>
</Location>

# These files are accessible unauthenticated (login page and needed ressources)
<LocationMatch /${SITE}/(omd/|check_mk/(images/.*\.png|login\.py|.*\.(css|js)))>
  Order allow,deny
  Allow from all
  Satisfy any
</LocationMatch>
----

In der Beispiel-Konfiguration werden anschließend nur noch Authentifizierungen über Kerberos zugelassen.
Sie müssen nun entscheiden, ob Sie weiterhin `basic auth` mit oder ohne Cookies - für Nutzer ohne SSO bzw. als Fallback - unterstützen möchten.
Was Sie dazu einstellen müssen erklären wir in den beiden folgenden Kapiteln.


[#basic_auth]
== Basic-Authentifizierung zulassen

Wenn Sie zusätzlich zum SSO per Kerberos weiterhin die Authentifizierung per `basic auth` erlauben möchten, müssen Sie in der oben angegebenen Konfiguration eine Zeile anpassen.

Ändern Sie dazu in der folgenden Zeile den Wert auf `on`:

.~/etc/apache/conf.d/auth.conf
[{apache}]
----
  KrbMethodK5Passwd on
----


[#cookie]
== Cookie-Authentifizierung prüfen

Um die Authentifizierung komfortabler zu gestalten, bietet {CMK} darüber hinaus noch die Anmeldung über ein Cookie an.
In einer neuen und unveränderten {CMK}-Instanz ist dies derzeit der Standard.

Zu guter Letzt sollten Sie noch prüfen, ob diese Möglichkeit der Authentifizierung noch eingeschaltet ist und ob dies so bleiben soll.

Den aktuellen Zustand Ihrer Instanz prüfen Sie mit dem folgenden Befehl:

[{shell}]
----
{c-omd} omd config show MULTISITE_COOKIE_AUTH
----

Wenn Sie hier ein `on` zurückbekommen und die Cookie-Authentifizierung - beispielsweise als Fallback - weiterhin aktiviert lassen wollen, sind Sie an dieser Stelle fertig.

Möchten Sie die `MULTISITE_COOKIE_AUTH` hingegen abschalten, funktioniert dies über den folgenden Befehl:

[{shell}]
----
{c-omd} omd config set MULTISITE_COOKIE_AUTH off
----

Löschen Sie anschließend noch die Datei `cookie_auth.conf` aus dem Apache-Verzeichnis der Instanz:

[{shell}]
----
{c-omd} rm ~/etc/apache/conf.d/cookie_auth.conf
----


== Fehlerdiagnose

Mit den folgenden Kommandos können Sie prüfen, ob das Kerberos-Setup an sich funktioniert:

[{shell}]
----
{c-root} kinit username
{c-root} klist
----

// H2:Konfiguration auf dem Server
//
// Damit der {CMK}-Server mit dem Kerberosserver kommunizieren und die
// Authentizität eines Benutzers überprüfen kann, muss der Server als
// Service Principal eingerichtet werden. Falls Sie bei der Installation des
// Kerberos-Client diesen noch nicht konfiguriert haben, können Sie das in
// der Datei `krb5.conf` nachholen. Ersetzen Sie `mycompany.org`
// durch Ihre Domäne:
//
// F+:/etc/krb5.conf
// [libdefaults]
//         default_realm = MYCOMPANY.ORG
//         forwardable = true
//         proxiable = true
// [realms]
//         MY.REALM.ROOT = {
//                 kdc = kerberos.mycompany.org
//                 admin_server = kerberos.mycompany.org
//                 default_domain = mycompany.org
//         }
//
// [domain_realm]
//         .mycompany.org = MYCOMPANY.ORG
//         mycompany.org = MYCOMPANY.ORG
//
// [logging]
//         kdc = SYSLOG:INFO:DAEMON
//         admin_server = SYSLOG:INFO:DAEMON
//         default = SYSLOG:INFO:DAEMON
// F-:
//
// Als nächstes wird der Server als _Service Principal_
// eingerichtet. Über diesen kann ein Client später verifizieren, dass es sich
// wirklich um den angeforderten Dienst ({CMK}) handelt und der Dienst kann
// wiederum den Client authentifizieren:
//
// C+:
// RP:kadmin -p myprincipaladmin -q "addprinc -randkey HTTTP/myserver.mycompany.org"
// C-:
//
// LI:mit kinit/klist testen
// C+:
// RP:kinit -k -t /path/to/http.keytab HTTP/myserver.mycompany.org
// RP:klist -e
// C-:

