// -*- coding: utf-8 -*-
// IGNORE ons plattformabhängige Einstellungs Monitoringdaten
// NONASCII ✔ 
include::global_attr.adoc[]
= Installation als Docker-Container
:revdate: 2025-09-10
:title: Installation als Docker-Container
:description: Die Installation von {CMK} in einem Docker-Container ist mit den offiziellen Images sehr einfach. Lesen Sie hier, wie Sie diese Container nutzen.

{related-start}
xref:intro_setup#[{CMK} aufsetzen]
{related-end}

== Grundsätzliches

Mit Docker haben Sie die Möglichkeit, {CMK} innerhalb einer leichtgewichtigen, in sich abgeschlossenen Container-Umgebung zu installieren.
In diesem Artikel führen wir Sie durch die Einrichtung von {CMK} in Docker und zeigen Ihnen einige Tricks, die das Leben mit {CMK} in Docker einfacher machen.

[TIP]
====
{com} stellt offizielle Docker-Images bereit, hat aber keine Kontrolle darüber, welche Eigenschaften das Host-System hat, auf dem Sie die entsprechenden Container einrichten.
Hier gelten die bekannten Vor- und Nachteile von Container-Umgebungen.
Es kann in speziellen Fällen zu unerwarteten Problemen in Bezug auf die Performance kommen, beispielsweise wenn der Kernel des Host-Systems deutlich neuer oder deutlich älter ist als der Kernel, den die {CMK}-Installation im Container erwartet.
In diesen Fällen können zusätzliche `sysctl`-Einstellungen nötig sein.
====


[#prerequisites]
== Voraussetzungen

Zur Ausführung der in diesem Artikel vorgestellten Befehle benötigen Sie eine funktionierende Installation der link:https://docs.docker.com/engine/install/[Docker Engine^] und Grundkenntnisse in deren Nutzung.

[IMPORTANT]
====
Für den Betrieb von {CMK} anhand der hier vorgestellten Images wird immer eine offizielle Docker-Installation vorausgesetzt.
Andere mit Docker kompatible Containerumgebungen können funktionieren, werden aber nicht offiziell unterstützt.
Die Nutzung geschieht in so einem Fall auf eigene Verantwortung und ist nicht für produktive Umgebungen empfohlen.
====
// TK: Was unterscheidet denn eine offizielle von einer inoffiziellen Docker-Installation?
// TK: Mich lässt die Admonition etwas ratlos zurück.
// TK: Vielleicht so: ... benötigen Sie eine offizielle Installation der Docker Engine, so wie sie unter dem oben angebebenen Link beschrieben ist?


[#acquire_cmk_docker_image]
== Ein {CMK}-Image beziehen

Um Ihnen die Nutzung als Container so einfach wie möglich zu machen, stellen wir für jede {CMK}-xref:glossar#edition[Edition] eigene Images auf verschiedenen Wegen zur Verfügung.
Dabei sind die Images aus den unterschiedlichen Quellen für eine Edition jeweils identisch.

[#image_sources]
[cols="25,~,~,~,~"]
|===
|{CRE} |link:https://hub.docker.com/r/checkmk/check-mk-raw/[Docker Hub^] | link:https://checkmk.com/de/download?platform=docker&edition=cre[{CMK}-Download-Seite^] |-- |--
|{CSE} | -- |link:https://checkmk.com/de/download?platform=docker&edition=cee[{CMK}-Download-Seite^] |link:https://portal.checkmk.com/de/[{CMK}-Kundenportal^] |xref:registry_images[{CMK} Docker Registry] 
|{CCE} |link:https://hub.docker.com/r/checkmk/check-mk-cloud/[Docker Hub^] |link:https://checkmk.com/de/download?platform=docker&edition=cce[{CMK}-Download-Seite^] |link:https://portal.checkmk.com/de/[{CMK}-Kundenportal^] |-- 
|{CME} |link:https://hub.docker.com/r/checkmk/check-mk-managed/[Docker Hub^] |link:https://checkmk.com/de/download?platform=docker&edition=cme[{CMK}-Download-Seite^] |link:https://portal.checkmk.com/de/[{CMK}-Kundenportal^] |-- 
|===

Beim ersten Start eines dieser Images wird nicht nur der passende Container ausgeführt, sondern auch gleich eine Monitoring-Instanz mit dem Namen `cmk` eingerichtet und gestartet.
Diese ist sofort bereit zur Anmeldung mit dem Benutzer `cmkadmin`.

[#license_notes]

{cce-only}
Auch für die kommerziellen Editionen {CE} und {ME} sind die offiziellen Images auf verschiedenen Plattformen frei verfügbar.
Diese Editionen von {CMK} können im Rahmen einer 30-tägigen Testphase mit allen Features getestet werden.
Falls Sie keine Lizenz für die gewählte Edition erwerben, wechseln Sie nach Ablauf der Testphase in den Lizenzstatus „Free“.
In diesem Status können Sie bis zu 750 Services überwachen und sind dabei auf eine einzige Instanz ohne Add-ons und mit bis zu drei synthetischen Tests beschränkt.
// TK: Achja, eigentlich sollten wir die Beschränkungen im Lizenzstatus „Free“ nur 1x beschreiben. Beste Stelle derzeit: https://docs.checkmk.com/master/de/intro_setup.html#editions
// TK: Vielleicht braucht es dafür einen eigenen Glossareintrag, denn die 750 Services stehen jetzt in 9 Artikeln, hier und da mit weiteren Einschränkungen wie maximal 1 Instanz. Und jetzt noch Add-ons und synthetische Tests. Alles verwirrend und schwer pflegbar.
// TK: Pragmatisches Vorgehen: "ohne Add-ons und mit bis zu drei synthetischen Tests" würd es hier weglassen. Wirft außerdem Fragen auf: Synthetic monitoring ist ja gerade ein Add-on, dass ich einerseits nicht haben, aber trotzdem 3x testen darf ;-)


[#runtime_download]
=== Images beim ersten Containerstart automatisch herunterladen

Bei bestehender Internetverbindung sucht die Docker Engine automatisch im Docker Hub nach dem Image-Namen, den Sie zum Anlegen eines Containers angeben.
Sie können für die Editionen, deren Images laut Tabelle im Docker Hub verfügbar sind, direkt zum Abschnitt xref:container_start[Start eines {CMK}-Containers] springen.

// ES: Falls die Registry alle Editionen bereitstellt, brauchen wir kein cce-only und formulieren leicht um
{cce-only}
[#registry_images]
// Images für die kommerziellen Editionen von {CMK} sind in der {CMK} Docker Registry hinterlegt.
Images für {SE} sind in der {CMK} Docker Registry hinterlegt.
Hier kann die Docker Engine automatisch Images anhand ihres vollen Namens und Pfads finden und herunterladen.
Allerdings ist dafür vorher ein Login in der Registry mit Ihren Anmeldedaten aus dem {CMK}-Kundenportal nötig.
Zum Einloggen nutzen Sie den Credential Store von Docker oder den folgenden Befehl:

[{shell}]
----
{c-root} docker login registry.checkmk.com --username myusername
Password: 
Login Succeeded
----

Nach dem erfolgreichen Einloggen kann die Docker Engine über die Registry auf das Image für die Version zugreifen.
Geben Sie dazu beim Containerstart den vollen Pfad zum gewünschten Image an.
Die Docker Engine prüft dann, ob das Image bereits lokal verfügbar ist, und lädt es andernfalls automatisch herunter.

Für die Version {current} von {SE} geben Sie zum Beispiel beim Containerstart den vollen Pfad für das Image wie folgt an:
// TK: Containerstart verlinken auf [#container_start], damit klarer wird, wo man den Pfad angeben muss.
`registry.checkmk.com/enterprise/check-mk-enterprise:{current}`

// Für die entsprechenden Versionen von {CE} oder {ME} ersetzen Sie in diesem Pfad alle Vorkommen von `enterprise` durch `cloud` beziehungsweise `managed`.

[#manual_download]
=== Images manuell herunterladen und vorbereiten

Sie können die Images auch als Archivdateien herunterladen und auf dem System hinterlegen, in dem Sie den Container starten möchten.
Das kann zum Beispiel nützlich sein, wenn Ihr Docker-Host zum Zeitpunkt des Containerstarts über keine Internetverbindung verfügt.
Laden Sie das gewünschte Image herunter und bringen Sie die Datei auf Ihrem bevorzugten Weg auf Ihren Docker-Host.
Mit `docker load -i` stellen Sie die Image-Datei für die Docker Engine auf Ihrem System zur Verfügung:
// TK:  ... stellen Sie dann ...: damit klarer wird, dass sich das docker load -i check-mk-*.tar.gz nur auf das Image beziehen kann, dass ich vorher geladen hab.

[{shell}]
----
{c-root} docker load -i check-mk-*.tar.gz 
346f14bf17b9: Loading layer [==================================================>]  80.41MB/80.41MB
87334b162001: Loading layer [==================================================>]  2.048kB/2.048kB
4c6fcf6a2c87: Loading layer [==================================================>]  335.7MB/335.7MB
1ba0c3ef2749: Loading layer [==================================================>]  279.7MB/279.7MB
bebf82ffc112: Loading layer [==================================================>]  1.291GB/1.291GB
88b55249828a: Loading layer [==================================================>]  7.168kB/7.168kB
Loaded image: checkmk/check-mk-raw:{current}
----


[#container_start]
== Start eines {CMK}-Containers

Sie können {CMK}-Images entweder mit xref:docker-compose[`docker compose`] und einer Compose-Datei oder mit xref:docker_container_run[`docker container run`] unter Angabe einer Reihe von Parametern starten.
Welche Option Sie wählen, hängt von Ihrem konkreten Einsatzszenario ab.

[#docker-compose]
=== Start mit `docker compose`

Das folgende Beispiel zeigt die Variante mit `docker compose`, in der es mit wenig Aufwand möglich ist, parallel weitere Container zu starten.

In der Datei `compose.yaml` beschreiben Sie mit Parametern die gewünschten Eigenschaften für den zu startenden Docker-Container.
Hier können auch mehrere Container beschrieben werden, die dann zusammen gestartet werden.

Das folgende Beispiel für eine geeignete `compose.yaml`-Datei zeigt die Parameter zum Starten eines einzigen {CMK}-Containers.
Die enthaltenen Parameter und ihre Werte werden nachfolgend erläutert.

.compose.yaml
[{yaml},subs="attributes+"]
----
services:
  checkmk:
    image: "checkmk/check-mk-raw:{current-major}-latest"
    container_name: "monitoring"
    environment:
      - CMK_PASSWORD=mypassword
      - TZ=Europe/Berlin
    volumes:
      - monitoring:/omd/sites
    tmpfs:
      - /opt/omd/sites/cmk/tmp:uid=1000,gid=1000
    ports:
      - 8080:5000
      - 8000:8000
    restart: always

volumes:
  monitoring:
----


Nähere Informationen zu den benutzten Optionen:

[#container_options]
[cols="40,~",options="header"]
|===
|Option |Beschreibung

| `checkmk:` | Selbst gewählter sprechender Name für den Docker-Service, für den der {CMK}-Container gestartet werden soll.

| `image: "checkmk/check-mk-raw:{current-major}-latest"` | Bezeichnung des {CMK}-Images im Format `<Repository>:<Tag>`.
Die Bezeichnungen für bereits vorhandene Images können Sie über den Befehl `docker images` auslesen.
Falls Sie das Image aus der {CMK} Docker-Registry beziehen, muss das Image mit seinem vollen Pfad angegeben werden.

| `container_name: "monitoring"` | Selbst gewählter sprechender Name für den Container.
Dieser Name muss eindeutig sein und darf auf dem Docker-Node kein zweites Mal verwendet werden.

l|environment:
  - CMK_PASSWORD=mypassword
  - TZ=Europe/Berlin | Mit der Umgebungsvariable `CMK_PASSWORD` legen Sie fest, wie das Passwort zum Einloggen als `cmkadmin`-Benutzer in der {CMK}-Instanz lauten soll.
  Sie können dieses Passwort jederzeit ändern, indem Sie innerhalb des laufenden Containers als OMD-Benutzer `cmk-passwd cmkadmin` ausführen.
// TK: Instanzbenutzer statt OMD-Benutzer

  {nbsp}

  `TZ` ist die Zeitzone, die Sie für den Container einstellen.
  Falls Sie diese Einstellung weglassen, wird der Container (und damit auch Ihre {CMK}-Instanz) automatisch mit UTC arbeiten, bis Sie die Einstellung im Container ändern.

  Falls Sie die Zeitzone nicht explizit setzen möchten, können Sie alternativ die Zeiteinstellungen vom Docker-Host übernehmen.
  Hierfür binden Sie die auf dem Host befindliche Datei `/etc/localtime` als Volume im Container ein.
  Wir empfehlen aber die Verwendung der Umgebungsvariable `TZ`, da so mögliche plattformabhängige Kompatibilitätsprobleme im Umgang mit `/etc/localtime` vermieden werden.

l|volumes:
  - monitoring:/omd/sites | Diese Angabe bindet die Daten der Instanz in diesem Container an eine persistente Stelle im Dateisystem des Docker-Nodes.
Das Volume namens `monitoring` wird im Container im Pfad `/omd/sites` eingebunden.
Volumes werden von der Docker Engine verwaltet und können mit `docker volume` eingesehen oder verändert werden.
Wenn der Container entfernt wird, gehen die Daten nicht verloren.

l|tmpfs:
  - /opt/omd/sites/cmk/tmp:uid=1000,gid=1000 | Für eine optimale Performance können Sie ein temporäres Dateisystem direkt im RAM des Docker-Nodes nutzen.
Mit dieser Option geben Sie den Pfad zu diesem Dateisystem an.
Wenn Sie die Instanz beim Erstellen xref:environment_variables[anders benennen], so muss auch dieser Pfad entsprechend angepasst werden.

l|ports:
  - 8080:5000
  - 8000:8000 | Der Webserver des Containers lauscht standardmäßig auf Port 5000.
In diesem Beispiel wird der Port 8080 des Docker-Nodes an den Port 5000 des Containers gebunden, damit dessen Web-Interface von außen erreichbar ist.
Wenn Sie keinen anderen Container oder Prozess haben, welcher den Standard-HTTP-Port 80 benutzt, können Sie den Container auch daran binden.
In diesem Fall würde die Option so aussehen: `80:5000`.
Die Nutzung von HTTPS wird im Abschnitt xref:https[HTTPS] erläutert.
Zusätzlich müssen Sie noch den Port des Agent Receivers veröffentlichen, um die xref:agent_linux#registration[Registrierung des Agent Controllers] durchführen zu können, wenn Sie einen Host mit installiertem {CMK}-Agenten ins Monitoring aufnehmen möchten.

{nbsp}

Für bestimmte Szenarien, die über die Grundfunktionalität von {CMK} hinausgehen, müssen weitere Ports explizit freigegeben werden.
Dies betrifft beispielsweise den xref:livestatus#network[Zugriff auf Livestatus per TCP] im xref:glossar#distributed_monitoring[verteilten Monitoring] oder die Nutzung der xref:ec#setup[Event Console] innerhalb eines {CMK}-Containers.
Einen Überblick über die dafür relevanten Ports finden Sie im Artikel xref:ports#cmk_incoming_host_outgoing[Ports].

| `restart: always` | Normalerweise startet ein Container nicht neu, wenn er gestoppt wurde.
Mit dieser Option sorgen Sie dafür, dass er eben doch automatisch neu startet.
Wenn Sie allerdings einen Container manuell stoppen, wird er nur neu gestartet, wenn der Docker-Daemon neu startet oder der Container selbst manuell neu gestartet wird.

l|volumes:
  monitoring: | Hier geben Sie alle Volumes an, die innerhalb von den beschriebenen Docker-Compose-Services benötigt werden.
  In diesem Fall ist das nur das Volume `monitoring`.
|===

Zusätzlich zum Docker-Compose-Service `checkmk` können Sie in Ihrer `compose.yaml`-Datei noch weitere Services definieren, die in der gleichen Containergruppe gestartet werden sollen.

Sobald Sie alles wie gewünscht beschrieben haben, können Sie den oder die Container anlegen und starten.
Führen Sie dazu in dem Verzeichnis, in dem Ihre `compose.yaml`-Datei liegt, `docker compose up` aus.
`docker compose up` sorgt dafür, dass alle Container und ihre zugehörigen Volumes ordnungsgemäß angelegt werden.
Bei `docker compose up -d` (für _detached_) werden die Container im Hintergrund gestartet.

Falls Sie noch kein Image heruntergeladen und auf Ihrem System hinterlegt haben, dauert das Ausführen von `docker compose up` einige Minuten, da zu diesem Zeitpunkt das angegebene Image aus dem Docker Hub oder aus der {CMK} Docker-Registry geladen wird.

[TIP]
====
Falls in Ihrem Docker-Host bereits ein Image mit dem angegebenen Namen vorhanden ist, wird kein neues Image heruntergeladen -- Ihr lokales Image könnte also beim ersten Start des Containers schon veraltet sein.
Um sicherzustellen, dass Sie mit dem aktuellsten Image arbeiten, führen Sie zum Starten des Containers `docker compose pull && docker compose up` (optional mit dem Parameter `-d`) aus.
====

Die Ausgabe hier basiert auf einem Szenario, in dem das Image mit `docker load -i` vorbereitet wurde.

[{shell}]
----
{c-root} docker compose up
[+] Running 3/3
 [green]#✔# Network cmk_compose_default      Created                           0.0s 
 [green]#✔# Volume "cmk_compose_monitoring"  Created                           0.0s 
 [green]#✔# Container monitoring             Created                           0.0s 
Attaching to monitoring
monitoring  | pass:[###] CREATING SITE 'cmk'
monitoring  | Generating configuration for core (type nagios)...
monitoring  | Precompiling host checks...OK
monitoring  | Adding /opt/omd/sites/cmk/tmp to /etc/fstab.
monitoring  | Going to set TMPFS to off.
monitoring  | Updating core configuration...
monitoring  | Executing post-create script "01_create-sample-config.py"...OK
monitoring  | Executing post-create script "02_cmk-compute-api-spec"...OK
monitoring  | Executing post-create script "03_message-broker-certs"...OK
monitoring  | Adding /opt/omd/sites/cmk/tmp to /etc/fstab.
monitoring  | Going to set TMPFS to off.
monitoring  | Skipping Apache restart.
monitoring  | Created new site cmk with version {current}.cre.
monitoring  | 
monitoring  |   The site can be started with omd start cmk.
monitoring  |   The default web UI is available at \http://2403d4ed552d/cmk/
monitoring  | 
monitoring  |   The admin user for the web applications is cmkadmin with password: mypassword
monitoring  |   For command line administration of the site, log in with 'omd su cmk'.
monitoring  |   After logging in, you can change the password for cmkadmin with 'cmk-passwd cmkadmin'.
monitoring  | 
monitoring  | pass:[###] STARTING XINETD
monitoring  |  * Starting internet superserver xinetd
monitoring  |    ...done.
monitoring  | pass:[###] STARTING SITE
monitoring  | Starting agent-receiver...OK
monitoring  | Starting mkeventd...OK
monitoring  | Starting rrdcached...OK
monitoring  | Starting redis...OK
monitoring  | Starting npcd...OK
monitoring  | Starting automation-helper...OK
monitoring  | Starting ui-job-scheduler...OK
monitoring  | Starting nagios...OK
monitoring  | Starting apache...OK
monitoring  | Starting crontab...OK
monitoring  | pass:[###] STARTING CRON
monitoring  | pass:[###] CONTAINER STARTED
----

Laufende Container stoppen Sie mit `docker compose stop`.
Um bereits angelegte Container erneut zu starten, führen Sie `docker compose start` aus.

Sie können die Ausgaben des Containers `monitoring` mit `docker container logs monitoring` einsehen.
Ausführliche Informationen über den Container, beispielsweise über die in ihn eingebundenen Volumes, erhalten Sie mit `docker inspect monitoring`.


[#docker_container_run]
=== Start mit `docker container run`

Alternativ zum Ausführen mit `docker compose` können Sie das {CMK}-Image mit `docker container run` starten.
Dabei übergeben Sie die Angaben aus der `compose.yaml`-Datei nun als Parameter.

Der folgende Befehl erzeugt den gleichen Container mit den gleichen xref:container_options[Eigenschaften] wie im eben gezeigten Beispiel.
Die gezeigte Ausgabe basiert auf einem Szenario, in dem das Image noch nicht manuell heruntergeladen wurde.
Optional erzwingen Sie wieder mit einem vorangestellten `docker pull checkmk/check-mk-raw:{current-major}-latest` das Herunterladen des aktuellsten Images.

[{shell}]
----
{c-root} docker container run -dit \
          --name monitoring  \
          -e CMK_PASSWORD='mypassword' \
          -e TZ='Europe/Berlin' \
          -v monitoring:/omd/sites \
          --tmpfs /opt/omd/sites/cmk/tmp:uid=1000,gid=1000 \
          -p 8080:5000 \
          -p 8000:8000 \
          --restart always \
          checkmk/check-mk-raw:{current-major}-latest 
Unable to find image 'checkmk/check-mk-raw:{current-major}-latest' locally
{current-major}-latest: Pulling from checkmk/check-mk-raw
215ed5a63843: Pull complete 
942691e22878: Pull complete 
fafdf3fa2522: Pull complete 
1888d204a5e5: Pull complete 
c126aa904d34: Pull complete 
b469f01932b5: Pull complete 
Digest: sha256:bbabed3f4f5e88775f872bcf0f1df36660e13d0ebf613e4e6141f4c81e5c6354
Status: Downloaded newer image for checkmk/check-mk-raw:{current-major}-latest
c850572de41592afff9de610d1ef3faecb267bf4fbccf2a9d8dae92dec11aacb
----

Hier wird der Container im _detached_-Modus ausgeführt (`-d`).
Um die Ausgaben aus dem Container einzusehen, nutzen Sie `docker container logs monitoring`.
Ausführliche Informationen über den Container erhalten Sie mit `docker inspect monitoring`.

[#short-lived_containers]
[TIP]
====
Beim Start mit `docker container run` haben Sie die Möglichkeit, von Anfang an festzulegen, dass der Container und seine Volumes nach dem Stoppen automatisch entfernt werden sollen.
Der persistente Datenspeicher wird durch den Parameter `-v monitoring:/omd/sites` angelegt.
Lassen Sie diese Option weg, wird kein persistenter Speicher angelegt.
====


[#managing_docker]
=== Weitere Optionen bei der Einrichtung

Die bisher gezeigten Beispiele dienen der einfachen Einrichtung von {CMK}-Containern.
Für besondere Anwendungsszenarien stehen Ihnen einige weitere Optionen zur Verfügung.

[#https]
==== HTTPS

Auch innerhalb eines Docker-Containers können Sie xref:omd_https#[die Weboberfläche Ihrer Instanz über HTTPS absichern].
Gängige Praxis hierfür ist es, einen _Reverse Proxy_ zu nutzen, der die Schnittstelle für HTTP(S)-Verbindungen zwischen den Containern in Ihrem System und der Außenwelt darstellt.
Dieser Proxy kann sicherstellen, dass nur HTTPS-Verbindungen akzeptiert bzw. an den {CMK}-Container durchgereicht werden.

Falls Sie einen Reverse Proxy nutzen, geben Sie beim Start Ihres {CMK}-Containers gar keine Ports mehr explizit frei.
Stattdessen werden dann alle eingehenden und ausgehenden Verbindungen ausschließlich über den Reverse Proxy abgewickelt.

[#environment_variables]
==== Zusätzliche Umgebungsvariablen

Die Tabelle zeigt alle {CMK}-spezifischen Umgebungsvariablen, die Sie beim Containerstart nutzen können, um Ihren Container wunschgemäß einzurichten.
Dabei geben Sie die Variablenwerte in der Compose-Datei beziehungsweise in der Parameterliste beim Aufruf von `docker container run` jeweils in der gleichen Form an wie die schon erwähnten Umgebungsvariablen `CMK_PASSWORD` und `TZ`.

[cols="40,~"]
|===
| `CMK_SITE_ID` | Selbst gewählter Name der zu erstellenden {CMK}-Instanz innerhalb des Containers, falls Sie vom Standard-Instanznamen `cmk` abweichen möchten.
| `CMK_LIVESTATUS_TCP` | Einstellung für die Verwendung von Livestatus über TCP.
Wählen Sie als Wert hierfür `on`, wird innerhalb des Containers für die Instanz der Befehl xref:livestatus#network[`omd config set LIVESTATUS_TCP on`] ausgeführt.
| `MAIL_RELAY_HOST` | Adresse eines von Ihnen bereitgestellten Mail-Relay-Servers (z.B. `mailrelay.mydomain.com`) zum Senden von {CMK}-xref:glossar#notification[Benachrichtigungen].
Benachrichtigungen werden zunächst von der Instanz innerhalb des Containers an den hier angegebenen Mailserver (SMTP-Relay-Server, Smarthost ohne Authentifizierung) außerhalb des Containers weitergereicht, um von dort dann an das eigentliche Ziel verschickt zu werden.
|===


[#login]
== Nutzung von {CMK} im laufenden Container

Nachdem alle benötigten Dateien geladen wurden und der Container gestartet ist, sollten Sie die GUI von {CMK} über `\http://localhost:8080/cmk/check_mk/` beziehungsweise über die Adresse des Docker-Nodes erreichen:

image::login.png[alt="{CMK}-Anmeldedialog.",width=60%]

Sie können sich nun erstmals einloggen und xref:intro_gui#[{CMK} ausprobieren].
Hierfür nutzen Sie den Benutzer namens `cmkadmin` und das von Ihnen beim Anlegen des Containers gewählte Passwort.
Falls Ihre Instanz einen anderen Namen als `cmk` erhalten hat, passen Sie den Namen in der URL an.

Um über die Befehlszeile auf Ihre Instanz innerhalb des Containers zuzugreifen, loggen Sie sich als Instanzbenutzer im Container ein.
Dieser Benutzer hat in {CMK} immer den gleichen Namen wie die Instanz, die er verwaltet.
Mit dem folgenden Befehl öffnen Sie eine interaktive Bash-Sitzung im Container `monitoring` und loggen sich darin als Benutzer `cmk` an:

[{shell}]
----
{c-root} docker container exec -it -u cmk monitoring bash
----

Danach können Sie Ihre xref:cmk_commandline#[Befehle] an die Instanz übergeben.


[#update]
== Update

Wie Sie {CMK} im Docker-Container aktualisieren können, ist im Artikel xref:update#updatedocker[Updates und Upgrades] beschrieben.

[#uninstall]
== Deinstallation

Wenn Sie einen Container nicht mehr benötigen, können Sie ihn entfernen und bei Bedarf auch die dazugehörigen Volumes löschen.
Die Befehle dazu finden Sie in den folgenden Abschnitten.

[#uninstall_docker_compose]
=== Deinstallation mit `docker compose`

Um einen Container zu entfernen, führen Sie `docker compose down` (bei laufendem Container) oder `docker compose rm` (bei gestopptem Container) aus.

[{shell}]
----
{c-root} docker compose down
[+] Running 2/2
 [green]#✔# Container monitoring         Removed                    6.3s 
 [green]#✔# Network cmk_compose_default  Removed                    0.1s 
----

Wenn Sie die Option `-v` ergänzen, werden zusammen mit dem Container auch die dazugehörigen Volumes auf dem Docker-Node entfernt.

[IMPORTANT]
====
Verwenden Sie die Option `-v` nur, wenn Sie sich sicher sind, dass Sie die Einstellungs- und Monitoringdaten aus den Volumes des Containers nicht mehr benötigen.
Es gibt keine Möglichkeit, entfernte Volumes später wiederherzustellen, wenn diese nicht von regulären Backups abgedeckt werden.
====


[#uninstall_docker_container]
=== Deinstallation nach dem Start mit `docker container run`

Einen mit `docker container run` gestarteten Container namens `monitoring` stoppen Sie mit `docker container stop monitoring`.
Danach können Sie mit `docker rm monitoring` den Container entfernen.
Ein Volume namens `monitoring`, das Sie nach dem Entfernen des dazugehörigen Containers nicht mehr benötigen, löschen Sie mit `docker volume rm monitoring`.

[#remove_cmk_image]
=== Das {CMK}-Image löschen

Möchten Sie das gewählte {CMK}-Image gar nicht mehr benutzen, können Sie es mit `docker rmi myimageid` entfernen.
Der Befehl `docker images` listet alle vorhandenen Images auf.
Identifizieren Sie das Image, das Sie löschen möchten, und fügen Sie die entsprechende Image-ID in Ihren Aufruf von `docker rmi` ein.