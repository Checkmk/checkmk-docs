// -*- coding: utf-8 -*-
// IGNORE 
// NONASCII ✔ 
include::global_attr.adoc[]
= Installation als Docker-Container
:revdate: 2025-08-05
:title: Installation als Docker-Container
:description: Die Installation von {CMK} in einem Docker-Container ist mit dem offiziellen Image sehr einfach. Die sinnvollen Optionen dabei werden hier näher beschrieben.

{related-start}
xref:intro_setup#[{CMK} aufsetzen]
{related-end}


== Grundsätzliches

Mit Docker haben Sie die Möglichkeit, {CMK} innerhalb einer leichtgewichtigen, in sich abgeschlossenen Container-Umgebung zu installieren.
In diesem Artikel führen wir Sie durch die Einrichtung von {CMK} in Docker und zeigen Ihnen einige Tricks, die das Leben mit {CMK} in Docker einfacher machen.

[TIP]
====
{CMK} stellt offizielle Docker-Images bereit, hat aber keine Kontrolle darüber, welche Eigenschaften das Host-System hat, auf dem Sie die entsprechenden Container einrichten.
Hier gelten die bekannten Vor- und Nachteile von Container-Umgebungen.
Es kann in speziellen Fällen zu unerwarteten Problemen in Bezug auf die Performance kommen, beispielsweise wenn der Kernel des Host-Systems deutlich neuer oder deutlich älter ist als der Kernel, den die {CMK}-Installation im Container erwartet.
In diesen Fällen können zusätzliche `sysctl`-Einstellungen nötig sein.
====
// TK: Ich hab {com} durch {CMK} ersetzt. {com} nur dann verwenden, wenn es um Rechtliches geht und/oder der exakte Firmenname relevant ist. 
// TK: In diesem Artikel wird Checkmk eher als Synonym für das Produkt verwendet. Ist das nachvollziehbar? Ich musste jetzt auch nochmal überlegen...


[#prerequisites]
== Voraussetzungen

Zur Ausführung der in diesem Artikel vorgestellten Befehle benötigen Sie eine funktionierende Installation der link:https://docs.docker.com/engine/install/[Docker Engine^] und Grundkenntnisse in deren Nutzung.

[#acquire_cmk_docker_image]
== Ein {CMK}-Image beziehen

Um Ihnen die Nutzung als Container so einfach wie möglich zu machen, stellen wir für jede {CMK}-xref:glossar#edition[Edition] eigene Images zur Verfügung:

[#image_sources]
[cols="25,~"]
|===
|{CRE} |link:https://hub.docker.com/r/checkmk/check-mk-raw/[Docker Hub^], link:https://checkmk.com/de/download?platform=docker&edition=cre&version=stable[{CMK}-Download-Seite^]
|Kommerzielle Editionen |link:https://checkmk.com/de/download?platform=docker&edition=cce&version=stable[{CMK}-Download-Seite^], link:https://portal.checkmk.com/de/[{CMK}-Kundenportal^]
|===

Beim ersten Start eines dieser Images wird nicht nur der passende Container ausgeführt, sondern auch gleich eine Monitoring-Instanz mit dem Namen `cmk` eingerichtet und gestartet.
Diese ist sofort bereit zur Anmeldung mit dem Benutzer `cmkadmin`.

[#install_cre]
=== Images für {RE}

{cre-only}
Für {RE} können Sie das gewünschte Docker-Image direkt aus dem Docker Hub beziehen.
Bei bestehender Internetverbindung sucht die Docker Engine automatisch im Docker Hub nach dem Image-Namen, den Sie zum Anlegen eines Containers angeben.
Sie können direkt zum Abschnitt xref:container_start[Start eines {CMK}-Containers] springen.

Alternativ dazu laden Sie das Image selbst aus dem Docker Hub oder von der link:https://checkmk.com/de/download?platform=docker&edition=cre&version={current}[{CMK}-Download-Seite^] herunter und hinterlegen Sie es auf dem System, in dem Sie einen {RE}-Container starten möchten.
Mit `docker load -i check-mk-*.tar.gz` stellen Sie die Image-Datei für die Docker Engine auf Ihrem Docker-Node zur Verfügung:
// TK: Warum im vorherigen Satz das Kommando im Text nennen, dass Du eh gleich eingeben musst?

[{shell}]
----
{c-root} docker load -i check-mk-*.tar.gz 
346f14bf17b9: Loading layer [==================================================>]  80.41MB/80.41MB
87334b162001: Loading layer [==================================================>]  2.048kB/2.048kB
4c6fcf6a2c87: Loading layer [==================================================>]  335.7MB/335.7MB
1ba0c3ef2749: Loading layer [==================================================>]  279.7MB/279.7MB
bebf82ffc112: Loading layer [==================================================>]  1.291GB/1.291GB
88b55249828a: Loading layer [==================================================>]  7.168kB/7.168kB
Loaded image: checkmk/check-mk-raw:{current}
----


[#install_cee]
=== Images für die kommerziellen Editionen

{cce-only}
Die Images der kommerziellen Editionen sind nicht frei im Docker Hub verfügbar.
Sie können das gewünschte Image entweder manuell herunterladen und auf Ihrem Docker-Node hinterlegen, oder Sie lassen die Docker Engine das Image selbst aus der dafür vorgesehenen {CMK} Docker-Registry herunterladen.

Für das manuelle Herunterladen finden Sie Ihre gewünschte Edition und Version auf der link:https://checkmk.com/de/download?platform=docker&edition=cce&version=stable[{CMK}-Download-Seite^] oder im link:https://portal.checkmk.com/de/[{CMK}-Kundenportal^].
Verwenden Sie nach dem Herunterladen `docker load -i` wie im Abschnitt xref:install_cre[Images für {RE}] beschrieben.
// TK: docker load -i oder docker load -i check-mk-*.tar.gz?

Um das Image von der Docker Engine herunterladen zu lassen, loggen Sie sich zunächst in der {CMK} Docker-Registry mit Ihrem Kundenportal-Login ein.
Zum Einloggen nutzen Sie den Credential Store von Docker oder den folgenden Befehl:

[{shell}]
----
{c-root} docker login registry.checkmk.com --username myusername
Password: 
Login Succeeded
----

Nach dem erfolgreichen Einloggen kann die Docker Engine über die Registry auf das Image für die gewünschte Version zugreifen.
// TK: Edition und Version, oder?
Geben Sie dazu beim Containerstart den vollen Pfad zum gewünschten Image an.
Die Docker Engine prüft dann, ob das Image bereits lokal verfügbar ist, und lädt es andernfalls automatisch herunter.

Für die Version {current} von {SE} geben Sie zum Beispiel beim Containerstart den vollen Pfad für das Image wie folgt an:
`registry.checkmk.com/enterprise/check-mk-enterprise:{current}`
// TK: Hier solltest Du auch die Cloud statt Enterprise als Bsp. nehmen. In allen Download-Links oben ist auch die Cloud vorausgewählt.

Für die entsprechenden Versionen von {CE} oder {ME} ersetzen Sie in diesem Pfad alle Vorkommen von `enterprise` durch `cloud` beziehungsweise `managed`.


[#container_start]
== Start eines {CMK}-Containers

Sie können {CMK}-Images entweder xref:docker-compose[mit `docker compose` und einer Compose-Datei] oder xref:docker_container_run[mit `docker container run` unter Angabe einer Reihe von Parametern] starten.
// TK: Mir sind die Link-Source-Texte viel zu lang. Ich find es lesbarer, wenn da nur `docker compose` und `docker container run` steht. Und in den Zielen stehen ja auch nur die Befehle.
Welche Option Sie wählen, hängt von Ihrem konkreten Einsatzszenario ab.

[#docker-compose]
=== Start mit `docker compose`

Das folgende Beispiel zeigt die Variante mit `docker compose`, in der es mit wenig Aufwand möglich ist, parallel weitere Container zu starten.

In der Datei `compose.yaml` beschreiben Sie mit Parametern die gewünschten Eigenschaften für den zu startenden Docker-Container.
Hier können auch mehrere Container beschrieben werden, die dann zusammen gestartet werden.

Das folgende Beispiel für eine geeignete `compose.yaml`-Datei zeigt die Parameter zum Starten eines einzigen {CMK}-Containers.
Die enthaltenen Parameter und ihre Werte werden nachfolgend erläutert.

.compose.yaml
[{yaml},subs="attributes+"]
----
services:
  checkmk:
    image: "checkmk/check-mk-raw:{current-major}-latest"
    container_name: "monitoring"
    environment:
      - CMK_PASSWORD=mypassword
      - TZ=Europe/Berlin
    volumes:
      - monitoring:/omd/sites
    tmpfs:
      - /opt/omd/sites/cmk/tmp:uid=1000,gid=1000
    ports:
      - 8080:5000
      - 8000:8000
    restart: always

volumes:
  monitoring:
----


Nähere Informationen zu den benutzten Optionen:

[#container_options]
[cols="40,~",options="header"]
|===
|Option |Beschreibung

| `checkmk:` | Selbst gewählter sprechender Name für den Docker-Service, für den der {CMK}-Container gestartet werden soll.

| `image: "checkmk/check-mk-raw:{current-major}-latest"` | Bezeichnung des {CMK}-Images im Format `<Repository>:<Tag>`.
Die Bezeichnungen können Sie über den Befehl `docker images` auslesen.
Falls Sie das Image aus der {CMK} Docker-Registry beziehen, muss das Image mit seinem vollen Pfad angegeben werden.

| `container_name: "monitoring"` | Selbst gewählter sprechender Name für den Container.
Dieser Name muss eindeutig sein und darf auf dem Docker-Node kein zweites Mal verwendet werden.

l|environment:
  - CMK_PASSWORD=mypassword
  - TZ=Europe/Berlin | Mit der Umgebungsvariable `CMK_PASSWORD` legen Sie fest, wie das Passwort zum Einloggen als `cmkadmin`-Benutzer in der {CMK}-Instanz lauten soll.
  Sie können dieses Passwort jederzeit ändern, indem Sie innerhalb des Containers als OMD-Benutzer `cmk-passwd cmkadmin` ausführen.
// TK: jederzeit? Gestartet muss der Container schon sein, oder?

  {nbsp}

  `TZ` ist die Zeitzone, die Sie für den Container einstellen.
  Falls Sie diese Einstellung weglassen, wird der Container (und damit auch Ihre {CMK}-Instanz) automatisch mit UTC arbeiten, bis Sie die Einstellung im Container ändern.

l|volumes:
  - monitoring:/omd/sites | Diese Angabe bindet die Daten der Instanz in diesem Container an eine persistente Stelle im Dateisystem des Docker-Nodes.
Das Volume namens `monitoring` wird im Container im Pfad `/omd/sites` eingebunden.
Volumes werden von der Docker Engine verwaltet und können mit `docker volume` eingesehen oder verändert werden.
Wenn der Container entfernt wird, gehen die Daten nicht verloren.

l|tmpfs:
  - /opt/omd/sites/cmk/tmp:uid=1000,gid=1000 | Für eine optimale Performance können Sie ein temporäres Dateisystem direkt im RAM des Docker-Nodes nutzen.
Mit dieser Option geben Sie den Pfad zu diesem Dateisystem an.
Wenn Sie die ID der Instanz ändern, so muss auch dieser Pfad entsprechend angepasst werden.
// TK: Hm, von einer Instanz-ID war noch nicht die Rede...

l|ports:
  - 8080:5000
  - 8000:8000 | Der Webserver des Containers lauscht standardmäßig auf Port 5000.
In diesem Beispiel wird der Port 8080 des Docker-Nodes an den Port 5000 des Containers gebunden, damit dessen Web-Interface von außen erreichbar ist.
Wenn Sie keinen anderen Container oder Prozess haben, welcher den Standard-HTTP-Port 80 benutzt, können Sie den Container auch daran binden.
In diesem Fall würde die Option so aussehen: `80:5000`.
Die Nutzung von HTTPS wird im Abschnitt xref:https[HTTPS] erläutert.
Zusätzlich müssen Sie noch den Port des Agent Receivers veröffentlichen, um die xref:agent_linux#registration[Registrierung des Agent Controllers] durchführen zu können.
// TK: Etwas mehr Kontext? Die Registrierung ist ja erst dann ein Thema, wenn ich meinen ersten Host ins Monitoring aufnehmen möchte, also quasi Vorbereitung für später.

{nbsp}

Für bestimmte Szenarien, die über die Grundfunktionalität von {CMK} hinausgehen, müssen weitere Ports explizit freigegeben werden.
Dies betrifft beispielsweise den xref:livestatus#network[Zugriff auf Livestatus per TCP] im xref:glossar#distributed_monitoring[verteilten Monitoring] oder die Nutzung der xref:ec#setup[Event Console] innerhalb eines {CMK}-Containers.
Einen Überblick über die dafür relevanten Ports finden Sie im Artikel xref:ports#cmk_incoming_host_outgoing[Ports].

| `restart: always` | Normalerweise startet ein Container nicht neu, wenn er gestoppt wurde.
Mit dieser Option sorgen Sie dafür, dass er eben doch automatisch neu startet.
Wenn Sie allerdings einen Container manuell stoppen, wird er nur neu gestartet, wenn der Docker-Daemon neu startet oder der Container selbst manuell neu gestartet wird.

l|volumes:
  monitoring: | Hier erscheinen alle Volumes, die innerhalb von Services benötigt werden.
// TK: erscheinen? Die muss man doch wohl eher eintippen. Ist der Doppelpunkt hinter monitoring richtig?
// TK: Docker-Services oder Checkmk-Services?
  In diesem Fall ist das nur das Volume `monitoring`.
|===

Zusätzlich zum `checkmk`-Service können Sie in Ihrer `compose.yaml`-Datei noch weitere Services definieren, die in der gleichen Containergruppe gestartet werden sollen.
// TK: Um Missverständnisse zu vermeiden: Docker-Service `checkmk`?

Sobald Sie alles wie gewünscht beschrieben haben, können Sie die Container anlegen und starten.
// TK: die Container? Ja, du hast geschrieben, dass man mehrere starten kann, aber spezifiziert ist ja nur einer.
Führen Sie dazu in dem Verzeichnis, in dem Ihre `compose.yaml`-Datei liegt, `docker compose up` aus.
Bei `docker compose up -d` (für _detached_) werden die Container im Hintergrund gestartet.
`docker compose up` sorgt dafür, dass alle Container und ihre zugehörigen Volumes ordnungsgemäß angelegt werden.
// TK: Die beiden vorherigen Sätze vertauschen: Zuerst Erklärung des Standardfalls, dann Erwähnung der Zusatzoption.

Falls Sie noch kein Image heruntergeladen und auf Ihrem System hinterlegt haben, dauert das Ausführen von `docker compose up` einige Minuten, da zu diesem Zeitpunkt das angegebene Image aus dem Docker Hub (nur für {RE} möglich) oder aus der {CMK} Docker-Registry geladen wird.
Die Ausgabe hier basiert auf einem Szenario, in dem das Image mit `docker load -i` vorbereitet wurde.

[{shell}]
----
{c-root} docker compose up
[+] Running 3/3
 [green]#✔# Network cmk_compose_default      Created                           0.0s 
 [green]#✔# Volume "cmk_compose_monitoring"  Created                           0.0s 
 [green]#✔# Container monitoring             Created                           0.0s 
Attaching to monitoring
monitoring  | pass:[###] CREATING SITE 'cmk'
monitoring  | Generating configuration for core (type nagios)...
monitoring  | Precompiling host checks...OK
monitoring  | Adding /opt/omd/sites/cmk/tmp to /etc/fstab.
monitoring  | Going to set TMPFS to off.
monitoring  | Updating core configuration...
monitoring  | Executing post-create script "01_create-sample-config.py"...OK
monitoring  | Executing post-create script "02_cmk-compute-api-spec"...OK
monitoring  | Executing post-create script "03_message-broker-certs"...OK
monitoring  | Adding /opt/omd/sites/cmk/tmp to /etc/fstab.
monitoring  | Going to set TMPFS to off.
monitoring  | Skipping Apache restart.
monitoring  | Created new site cmk with version {current}.cre.
monitoring  | 
monitoring  |   The site can be started with omd start cmk.
monitoring  |   The default web UI is available at \http://2403d4ed552d/cmk/
monitoring  | 
monitoring  |   The admin user for the web applications is cmkadmin with password: mypassword
monitoring  |   For command line administration of the site, log in with 'omd su cmk'.
monitoring  |   After logging in, you can change the password for cmkadmin with 'cmk-passwd cmkadmin'.
monitoring  | 
monitoring  | pass:[###] STARTING XINETD
monitoring  |  * Starting internet superserver xinetd
monitoring  |    ...done.
monitoring  | pass:[###] STARTING SITE
monitoring  | Starting agent-receiver...OK
monitoring  | Starting mkeventd...OK
monitoring  | Starting rrdcached...OK
monitoring  | Starting redis...OK
monitoring  | Starting npcd...OK
monitoring  | Starting automation-helper...OK
monitoring  | Starting ui-job-scheduler...OK
monitoring  | Starting nagios...OK
monitoring  | Starting apache...OK
monitoring  | Starting crontab...OK
monitoring  | pass:[###] STARTING CRON
monitoring  | pass:[###] CONTAINER STARTED
----

Laufende Container stoppen Sie mit `docker compose stop`.
Um bereits angelegte Container erneut zu starten, führen Sie `docker compose start` aus.

Sie können die Ausgaben des Containers `monitoring` mit `docker container logs monitoring` einsehen.
Ausführliche Informationen über den Container, beispielsweise über die in ihn eingebundenen Volumes, erhalten Sie mit `docker inspect monitoring`.


[#docker_container_run]
=== Start mit `docker container run`

Alternativ zum Ausführen mit `docker compose` können Sie das {CMK}-Image mit `docker container run` starten.
Dabei übergeben Sie die Angaben aus der `compose.yaml`-Datei nun als Parameter.

Der folgende Befehl erzeugt den gleichen Container mit den gleichen Eigenschaften wie im eben gezeigten Beispiel.
Die gezeigte Ausgabe basiert auf einem Szenario, in dem das Image noch nicht manuell heruntergeladen wurde.

[{shell}]
----
{c-root} docker container run -dit \
          --name monitoring  \
          -e CMK_PASSWORD='mypassword' \
          -e TZ='Europe/Berlin' \
          -v monitoring:/omd/sites \
          --tmpfs /opt/omd/sites/cmk/tmp:uid=1000,gid=1000 \
          -p 8080:5000 \
          -p 8000:8000 \
          --restart always \
          checkmk/check-mk-raw:{current-major}-latest 
Unable to find image 'checkmk/check-mk-raw:{current-major}-latest' locally
{current-major}-latest: Pulling from checkmk/check-mk-raw
215ed5a63843: Pull complete 
942691e22878: Pull complete 
fafdf3fa2522: Pull complete 
1888d204a5e5: Pull complete 
c126aa904d34: Pull complete 
b469f01932b5: Pull complete 
Digest: sha256:bbabed3f4f5e88775f872bcf0f1df36660e13d0ebf613e4e6141f4c81e5c6354
Status: Downloaded newer image for checkmk/check-mk-raw:{current-major}-latest
c850572de41592afff9de610d1ef3faecb267bf4fbccf2a9d8dae92dec11aacb
----
// TK: Wäre schöner, die Optionen in der gleichen Reihenfolge zu listen wie in der Beschreibung der Yaml-Datei.
// TK: Ist die Ausgabe gekürzt? Wo sehe ich die URL zum Login und Name + Pwd des Administrators?
// TK: Wenn ich dafür docker container logs monitoring absetzen muss, dann dollte das beim Erwähnen im nächsten Absatz deutlich machen.

Hier wird der Container im _detached_-Modus ausgeführt (`-d`).
Um die Ausgaben aus dem Container einzusehen, nutzen Sie `docker container logs monitoring`.
Ausführliche Informationen über den Container erhalten Sie mit `docker inspect monitoring`.

[#short-lived_containers]
[TIP]
====
Beim Start mit `docker container run` haben Sie die Möglichkeit, von Anfang an festzulegen, dass der Container und seine Volumes nach dem Stoppen automatisch entfernt werden sollen.
Der persistente Datenspeicher wird durch den Parameter `-v monitoring:/omd/sites` angelegt.
Lassen Sie diese Option weg, wird kein persistenter Speicher angelegt.
====


[#managing_docker]
=== Weitere Optionen bei der Einrichtung

Die bisher gezeigten Beispiele dienen der einfachen Einrichtung von {CMK}-Containern.
Für besondere Anwendungsszenarien stehen Ihnen einige weitere Optionen zur Verfügung.

[#https]
==== HTTPS

Auch innerhalb eines Docker-Containers können Sie xref:omd_https#[die Weboberfläche Ihrer Instanz über HTTPS absichern].
Gängige Praxis hierfür ist es, einen _Reverse Proxy_ zu nutzen, der die Schnittstelle für HTTP(S)-Verbindungen zwischen den Containern in Ihrem System und der Außenwelt darstellt.
Dieser Proxy kann sicherstellen, dass nur HTTPS-Verbindungen akzeptiert bzw. an den {CMK}-Container durchgereicht werden.

Falls Sie einen Reverse Proxy nutzen, geben Sie beim Start Ihres {CMK}-Containers gar keine Ports mehr explizit frei.
Stattdessen werden dann alle eingehenden und ausgehenden Verbindungen ausschließlich über den Reverse Proxy abgewickelt.


==== Zusätzliche Umgebungsvariablen

Die Tabelle zeigt alle {CMK}-spezifischen Umgebungsvariablen, die Sie beim Containerstart nutzen können, um Ihren Container wunschgemäß einzurichten.
Dabei geben Sie die Variablenwerte in der Compose-Datei beziehungsweise in der Parameterliste beim Aufruf von `docker container run` jeweils in der gleichen Form an wie die schon erwähnten Umgebungsvariablen `CMK_PASSWORD` und `TZ`.

[cols="40,~"]
|===
| `CMK_SITE_ID` | Selbst gewählter Name der zu erstellenden {CMK}-Instanz innerhalb des Containers, falls Sie vom Standard-Instanznamen `cmk` abweichen möchten.
| `CMK_LIVESTATUS_TCP` | Einstellung für die Verwendung von Livestatus über TCP.
Wählen Sie als Wert hierfür `on`, wird innerhalb des Containers für die Instanz der Befehl xref:livestatus#network[`omd config set LIVESTATUS_TCP on`] ausgeführt.
| `MAIL_RELAY_HOST` | Adresse eines von Ihnen bereitgestellten Mail-Relay-Servers (z.B. `mailrelay.mydomain.com`) zum Senden von {CMK}-xref:glossar#notification[Benachrichtigungen].
Benachrichtigungen werden zunächst von der Instanz innerhalb des Containers an den hier angegebenen Mailserver (SMTP-Relay-Server, Smarthost ohne Authentifizierung) außerhalb des Containers weitergereicht, um von dort dann an das eigentliche Ziel verschickt zu werden.
|===


[#login]
== Nutzung von {CMK} im laufenden Container

Nachdem alle benötigten Dateien geladen wurden und der Container gestartet ist, sollten Sie die GUI von {CMK} über `\http://localhost:8080/cmk/check_mk/` beziehungsweise über die Adresse des Docker Nodes erreichen:
// TK: Damit meinst Du die http://2403d4ed552d/cmk/ aus der obigen Ausgabe?

image::login.png[alt="{CMK}-Anmeldedialog.",width=60%]

Sie können sich nun erstmals einloggen und xref:intro_gui#[{CMK} ausprobieren].

Um über die Befehlszeile auf Ihre Instanz innerhalb des Containers zuzugreifen, loggen Sie sich als Instanzbenutzer im Container ein.
Dieser Benutzer hat in {CMK} immer den gleichen Namen wie die Instanz, die er verwaltet.
Mit dem folgenden Befehl öffnen Sie eine interaktive Bash-Sitzung im Container `monitoring` und loggen sich darin als Benutzer `cmk` an:

[{shell}]
----
{c-root} docker container exec -it -u cmk monitoring bash
----

Danach können Sie Ihre xref:cmk_commandline#[Befehle] an die Instanz übergeben.


[#update]
== Update

Wie Sie {CMK} im Docker-Container aktualisieren können, ist im Artikel xref:update#updatedocker[Updates und Upgrades] beschrieben.

[#uninstall]
== Deinstallation

Wenn Sie einen Container nicht mehr benötigen, können Sie ihn entfernen und bei Bedarf auch die dazugehörigen Volumes löschen.
Die Befehle dazu finden Sie in den folgenden Abschnitten.

[#uninstall_docker_compose]
=== Deinstallation mit `docker compose`

Um einen Container zu entfernen, führen Sie `docker compose down` (bei laufendem Container) oder `docker compose rm` (bei gestopptem Container) aus.

[{shell}]
----
{c-root} docker compose down
[+] Running 2/2
 [green]#✔# Container monitoring         Removed                    6.3s 
 [green]#✔# Network cmk_compose_default  Removed                    0.1s 
----

Wenn Sie die Option `-v` ergänzen, werden zusammen mit dem Container auch die dazugehörigen Volumes auf dem Docker-Node entfernt.


[#uninstall_docker_container]
=== Deinstallation nach dem Start mit `docker container run`

Einen mit `docker container run` gestarteten Container namens `monitoring` stoppen Sie mit `docker container stop monitoring`.
Danach können Sie mit `docker rm monitoring` den Container entfernen.
Ein Volume namens `monitoring`, das Sie nach dem Entfernen des dazugehörigen Containers nicht mehr benötigen, löschen Sie mit `docker volume rm monitoring`.

[#remove_cmk_image]
=== Das {CMK}-Image löschen

Möchten Sie das gewählte {CMK}-Image gar nicht mehr benutzen, können Sie es mit `docker rmi myimageid` entfernen.
Der Befehl `docker images` listet alle vorhandenen Images auf.
Identifizieren Sie das Image, das Sie löschen möchten, und fügen Sie die entsprechende Image-ID in Ihren Aufruf von `docker rmi` ein.