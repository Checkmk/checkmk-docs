// -*- coding: utf-8 -*-
// IGNORE 
include::global_attr.adoc[]
= MKPs for GUI extensions
:revdate: 2023-06-19
:title: MKPs for GUI extensions - {CMK} extensions packages for dashboards, views, reports
:description: Dashboards, views and reports can be easily packaged and shared with others - even via the {CMK} Exchange.

{related-start}
xref:devel_intro#[Developing extensions for {CMK}]
xref:dev_guidelines#[Guidelines for coding check plug-ins]
xref:mkps#[{CMK} extension packages (MKP)]
{related-end}


== Introduction

{cee-only} The xref:glossar#mkp[{CMK} extension packages (MKPs)] can package functional extensions as well as those for the graphical user interface (GUI), i.e. dashboards, views or reports.
The advantage with this feature is that in the commercial editions you can create such MKPs directly from the web interface, and no external files or tools are needed.
Of course, the command line is also available for this purpose, also exclusively in the commercial editions.

The MKPs can then be shared internally with other users and {CMK} installations, and of course via the link:https://exchange.checkmk.com/[{CMK} Exchange].
But even without the participation of the community or other sites, it can be useful to be able to package complex creations.

For example, if a dashboard is created using the [.guihint]#Make this dashboard available for other users# option, it will also be available to all or to selected users.
If users delete their dashboards at some point, they are of course lost for everyone else -- unless others have already made personal copies.
This is why it makes sense for users with the appropriate rights to make dashboards available as an extension.

This also enables the _versioning_ of dashboards -- useful for problem-free updates.

//ML: Hier kommt noch ein hÃ¼bsches Beispielboard hin.
//image::mkp_visuals_example.png[alt="Ein individuelles Dashboard."]

The procedure for creating MKPs is identical for all types of GUI extensions, so we will limit ourselves to the dashboard example described below.

Prerequisite: Users need the [.guihint]#Manage Extension Packages (MKPs)# permission.


[#webgui]
== Web interface

=== Creating GUI-MKPs

Let's start in the dashboard list under [.guihint]#Customize > Visualization > Dashboards#.
If you have already created your own dashboard, you can work with that one.
Otherwise, create a private copy of any built-in dashboard.
In both cases, your starting point is a dashboard in the [.guihint]#Customized# section.

image::mkp_visuals_01.png[alt="List of custom dashboards."]

Via icon:icon_mkp_viewable_clone[alt="Icon for cloning elements."] [.guihint]#Clone this dashboard for packaging as extension package# you create an extension from the dashboard, which will subsequently be listed in the [.guihint]#Extensions# section:

image::mkp_visuals_03.png[alt="Lists of customized dashboards and dashboards managed as extensions."]

From here, icon:icon_mkp_viewable_package[alt="Icon leading to package management."] [.guihint]#Go to extension packages# will take you to the extension package management.
You can see your unpackaged extensions, or files, under [.guihint]#Packages > List unpackaged files.#

image::mkp_visuals_04.png[alt="List of GUI extensions."]

Via icon:icon_new_mkp[] [.guihint]#Create Package# you can now create the package.

image::mkp_visuals_05.png[alt="Settings dialog for a dashboard to be packaged."]

In the package properties, at the bottom under [.guihint]#Packaged files#, add the GUI extension you have just created.
Of course, this can also be multiple dashboards or other elements.
Otherwise, the main thing you need to pay attention to is the correct version information.
First, the package itself needs a version number.
This must follow the guidelines explained in link:https://semver.org/[Semantic Versioning^], for example `1.0.0`.
Secondly, you can specify the minimum and maximum supported {CMK} versions.
Versioning is handy for {CMK} updates and distributed monitoring which includes sites with different {CMK} versions (see the xref:mkps#enabled_inactive_cli[MKP article] for more information).

After packaging, your new packages will be listed on the extension packages home page -- here in our example in two different versions, one activated, one deactivated:

image::mkp_visuals_06.png[alt="Versioned and packaged extensions in the packages overview."]

Under [.guihint]#All packages (enabled or disabled)# you now have the option to download the packages as MKP files.


=== Installing GUI-MKPs

The installation of packages is largely self-explanatory.
First, upload the desired package via icon:icon_upload[alt="Icon for package upload."] [.guihint]#Upload package# under [.guihint]#Setup > Maintenance > Extension packages#.

image::mkp_visuals_07.png[alt="Upload extension packages selection menu in the MKP dashboard."]

The package then ends up in the [.guihint]#All packages (enabled or disabled)# table again and from there can be activated via icon:icon_install[alt="Icon to enable (install) extensions."].

image::mkp_visuals_08.png[alt="Uploaded, not activated package in package management."]


[#cli]
== Command line

=== Creating GUI-MKPs

As an alternative, you can also perform packaging from the command line.
The procedure is exactly the same as packaging functional extensions, as described in detail in the xref:mkps#[MKP article], so only a shortened version is presented here:

. Create the dashboard.
. Switch to the command line as site user.
. List unpackaged files: +
`mkp find`
. Create the package configuration: +
`mkp template mydashboard`
. Edit the configuration in: +
`~/tmp/check_mk/mydashboard.manifest.temp`
. Create the package with: +
`mkp package tmp/check_mk/mydashboard.manifest.temp`
. Package is saved as: +
`/var/check_mk/packages_local/mydashboard-1.0.0.mkp`


=== Installing GUI-MKPs

If you now want to install and activate such MKPs:

. Install: +
`mkp add /tmp/mydashboard-1.0.0.mkp`
. Activate: +
`mkp enable mydashboard-1.0.0.mkp`

For command references, a description of the MKP format, and other notes, see the xref:mkps#[MKP article].

{cre-only} *Note* for users of the {RE}:
Again, you can install GUI extensions just like all other MKPs.
However, since the commercial editions contain some exclusive visual elements (such as dashlets), you might stumble across a message of the following type: +
`Dashlet type 'state_host' could not be found. Please remove it from your dashboard configuration.` +
In this case a single dashlet is missing, but the rest of the dashboard is still usable.


[#files]
== Files and directories

[cols="44,~",options="header"]
|===
|File path |Description
|`~/local/lib/check_mk/gui/plugins/views` |Depository for views cloned as extensions.
|`~/local/lib/check_mk/gui/plugins/reports` |Storage location for reports cloned as extensions.
|`~/local/lib/check_mk/gui/plugins/dashboards` |Location for dashboards cloned as extensions.
|`~/tmp/check_mk/mydashboard.manifest.temp` |Configuration file to build the package.
|`~/var/check_mk/packages_local/` |Location for installed MKPs.
|`~/local/share/check_mk/enabled_packages/` |Location for activated MKPs.
|===
