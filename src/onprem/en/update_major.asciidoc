// -*- coding: utf-8 -*-
// IGNORE Alertmanager p16 p20 p22 p23 p7 pre
include::global_attr.adoc[]
= Update to version 2.2.0
:revdate: 2024-02-22
:title: Update to version 2.2.0
:description: In this article you will learn what to consider when updating from {CMK} version 2.1.0 to 2.2.0.

{related-start}
xref:update#[Updates and Upgrades]
xref:install_packages#[Basic information on the installation of {CMK}]
{related-end}


[#intro]
== Introduction

In this article you will find the most important topics relevant to an update of your {CMK} from version {v21} to version {v22}.

We recommend that you read through the entire article before updating so that you know exactly what to expect: before, during and after the update.


[#prep]
== Preparations

This chapter gives you an overview of the topics you should take into consideration before you perform the update.
Probably not every topic will be relevant for you:
For each topic, you can check the corresponding box for your own reference and immediately move on to the next topic.


[#backup]
=== Backup

As with any update to production software, you should check that your backups are up to date before performing the update of {CMK}.

*Does this apply to you?*
Yes.

*What do you have to do?*
If you create your backups automatically via [.guihint]#Setup > Maintenance > Backups#, check there that your backups are up to date and that the most recent backup jobs have completed without errors.

For more information, see the articles on xref:backup#[Backups] and on xref:omd_basics#omd_backup_restore[Backing up and restoring sites].


[#editions]
=== Selecting a {CMK} edition

The {CMK} edition family has grown with the brand new {CCE}.
You can read about what this edition has to offer in the xref:cce#[{CE}] article.
This means saying goodbye to the {CFE}, which is no longer available in {v22}.

However, the functionality of the {FE} lives on in the {CE}: the time-limited trial and the permanent use of one of the commercial editions on a small scale.
However, there is a change to the limitation for permanent use:
With the {FE} you can monitor up to 25 hosts in one xref:glossar#site[site], with the {CE} you are limited to monitor 750 services in one site.

*Does this affect you?*
If you are currently using the {FE} in the {v21} version, you will need to find a new edition when updating to the {v22}.
A short introduction to the various {CMK} editions can be found xref:intro_setup#editions[here.]

*What do you need to do?*
If in your case the 25 host limit in the {FE} was sufficient, but the 750 free services of the {CE} were not, you can either purchase a subscription and upgrade to one of the commercial editions -- or choose to downgrade to the free {RE}.
Upgrade or downgrade the edition _before_ updating to version {v22}.
Follow the instructions in the article on xref:update#[Updates and Upgrades], especially for a xref:update.html#down2cee[downgrade to the {RE}].

If you don't have any problems with the new limit of 750 services, simply upgrade your {FE} to the new {CE},
as described xref:cfe2cce[below].


[#linux_versions]
=== Linux distribution versions

// During the beta phase, most of the distributions supported by {v21} will continue to be supported to facilitate testing in existing system environments.
Some obsolete distributions will no longer be supported in the {CMK} {v22} version.

*Does this affect you?*
This will affect you if your {CMK} server has one of the following -- still supported in {v21} -- Linux distributions installed:

* Debian 9 _Stretch_
* Ubuntu in the Long Term Support (LTS) versions 16.04 _Xenial_ and 18.04 _Bionic_.
* Ubuntu in the Short Term Support (STS) version 21.10 _Impish_ 
// and 22.10 _Kinetic_
* SLES 12 SP3 and SP4
* SLES 15 without service pack

*What do you need to do?*
Before updating {CMK}, first perform a xref:release_upgrade#[Linux distribution version upgrade].
Make sure that the target version of the Linux distribution is supported by {CMK} {v21} *and* {v22}.
To find out which Linux distribution versions are supported by {CMK}, see the xref:update_matrix#[update matrix for version {v22}] and the link:https://checkmk.com/download[download page^] after you have selected the {CMK} version and your Linux distribution.

More recent Ubuntu STS versions will not receive support for the entire product lifecycle of {CMK} {v22}.
However, we give users of these versions the opportunity to seamlessly update to the next LTS 24.04.
Details can be found in the xref:update_matrix#ossupport[OS support policy].


[#browser]
=== Browser support

{CMK} {v22} uses new JavaScript features that are not available in older browsers.
Which browsers are supported in which versions can be found in the xref:release_notes#browser[Release notes].
// Supported are Chrome version 101 and later, Firefox version 102 and later, and Safari version 16 and later.
// Internet Explorer and Edge/Trident are not supported.

*Does this affect you?*
You will usually have automatic updates to the latest version enabled on desktop systems.

*What do you need to do?*
Check the browser version you are using and install a more recent browser if necessary.
If you are using _Single Board Computers_, _Smart TVs_ or _Digital Signage_ solutions to display dashboards and you have no control over the system browser, test that any required dashboards are displayed correctly before updating.
If necessary, contact the hardware manufacturer for updates.


[#agentlinux]
=== The Linux agent

In {CMK} {v22} the xref:agent_linux#[Linux agent] no longer supports Python 2.6 for plug-ins.

*Does this affect you?*
Only if you have very old Linux systems in use (Python 2.6 is from October 2008 and was superseded by Python 2.7 as of July 2010) _and_ you use xref:glossar#agent_plugin[agent plug-ins] written in Python on these.

*What do you need to do?*
Identify the affected systems and update the installed agents to the latest available patch version of {v21}.
If automatic agent updates are configured, xref:automatic_agent_updates[disable them] before updating the {CMK} site.
You can then manually update the individual components -- agent script, plug-ins and local checks -- after compatibility tests.


[#agentwindows]
=== The Windows agent

In {CMK} {v22}, the xref:agent_windows#[Windows agent] no longer supports Windows 6.0 (Vista and Server 2008 R1).
However, on affected systems, the agent from {v21} can still be used.

*Does this affect you?*
Only if you are still using these antiquated Windows systems (support ended April 11, 2017 and January 14, 2020, respectively).

*What do you need to do?*
Identify the affected systems and update the installed agents to the latest available patch version of {v21}.
If automatic agent updates are configured, xref:automatic_agent_updates[disable them] before updating the {CMK} site.


[#bakery_plugins]
=== Older Bakery plug-ins

Bakery plug-ins include functions in the xref:glossar#agent_bakery[Agent Bakery's] agent packages.
As announced in link:https://checkmk.com/werk/14648[Werk #14648^], support for legacy Bakery plug-ins will be discontinued from version {v22}.
These are custom plug-ins that were used in version {v16} and earlier, and which have not yet been migrated to the Bakery API introduced in {v20}.

*Does this affect you?*
The Agent Bakery and thus the Bakery API are only relevant for users of the commercial editions. +

Before the introduction of the Bakery API, the Bakery plug-ins were stored in the site directory under `~/local/share/check_mk/agents/bakery/`.
To determine whether you have any old plug-ins, you can search for the `bakery_info` string here.

As of {v20}, {CMK} also displays a warning when baking agent packages with legacy Bakery plug-ins.
You can also view this afterwards under [.guihint]#Setup > Maintenance > Background jobs# in the [.guihint]#Agent baking# section.
When xref:cmk_commandline#bake_agents[baking via the command line] with `cmk -A` the warning is displayed as command output.

*What do you need to do?*
Migrate old Bakery plug-ins to the Bakery API.
You can find an introduction to using the API in the xref:bakery_api#[Bakery API] article.


[#python]
=== Python 3.11

{CMK} {v22} upgrades Python from 3.10 to 3.11.
This leads to link:https://github.com/python/cpython/issues/66683[a stricter interpretation^] of xref:regexes#[regular expressions.]
link:https://www.regular-expressions.info/modifiers.html[Modifiers^] as 'inline flags' have been marked as _deprecated_ since Python 3.6, and previously resulted in a warning when tested in the Python prompt.
In Python 3.11 they are only allowed at the beginning of a regular expression.

*Does this affect you?*
It will most likely affect you if you use the `(?i)` modifier to indicate that the following regular expression should be evaluated case-insensitively.
Since for performance reasons Checkmk in some places merges several regular expressions into a single one, this change may also affect regular expressions (i.e. that begin with modifiers) that when considered alone would also be valid.

*What do you need to do?*
Identify _all_ regular expressions that use inline flags.
For this it is usually sufficient to search for the `(?` string, for example with this command:

[{shell}]
----
{c-omd} find etc/ -type f -exec grep -Hn '(?.)' {}  \;
----

Modify any affected regular expressions.
Since modifiers are still valid if their scope is specified, you can equivalently link:https://github.com/Checkmk/checkmk-docs/blob/master/examples/update_major/fix_inline_arguments.py[rewrite^] an existing regular expression:

[{file}]
----
(?i)somestring
----

to:

[{file}]
----
(?i:somestring)
----


[#pip3]
=== Uninstalling Python modules

The update of Python from 3.10 to 3.11 also affects any modules installed in a site.
In many cases, post-installed modules are incompatible with Python 3.11.
In the worst case, obsolete modules overwrite the functionality of the modules supplied by {CMK}.

*Does this affect you?*
This will only affect you when you have explicitly-installed Python modules for special agents or agent-based check plug-ins that you have written yourself or obtained from the Exchange.
If you are unsure, carry out the check described in the following section.

*What do you need to do?*
First find out whether Python modules are installed in the site, and if so -- identify them.
To do this, search for the directories `dist-info` and `egg-info`:

[{shell}]
----
{c-omd} find ~/local/lib/python3/ -type d -name '*.*-info'
local/lib/python3/cryptography-41.0.5.dist-info
local/lib/python3/ecdsa-0.18.0.dist-info
----

Make a note of the installed modules and then uninstall them:

[{shell}]
----
{c-omd} pip3 uninstall cryptography ecdsa
----

You can find out how to deal with uninstalled Python modules after the update xref:pip3post[below].


[#user_id]
=== Incompatible user names

As of version {v22}, the use of certain special characters in user names is no longer allowed.
With invalid user names an update to {v22} is not possible, because `omd update` will abort with an error.

User names in {CMK} may only contain letters (as defined by the link:https://www.unicode.org/reports/tr44/[Unicode database^]), digits and the following special characters: Hyphen (`-`), underscore (`_`), period (`.`), the 'at' character (`@`) and dollar sign (`$`).
Only a single letter, digit, underscore or dollar sign is allowed as the first character.

*Does this affect you?*
When creating local users via [.guihint]#Setup > Users#, {CMK} has been rejecting invalid user names for quite some time, i.e. even before version {v16}.
So only user names from external connections like LDAP are affected, if at all.
As announced in link:https://checkmk.com/werk/14393[Werk pass:q[#]14393^], since version {v21}p20 {CMK} has issued warnings for incompatible user names 
-- on the one hand when running `omd update` and on the other hand in the user administration, which you can call via [.guihint]#Setup > Users#.
The user names are displayed in the [.guihint]#ID# column and in case of invalid user names there is a warning.

*What do you need to do?*
Update any incompatible user names found at their source.


[#pwd_hash]
=== Insecure hash functions for passwords

As of version {v22}, the use of insecure and obsolete hash functions for passwords is no longer allowed.
This affects the hash functions _DES-Crypt, MD5-Crypt, Apr MD5-Crypt_ and _SHA-256 Crypt_.
Although the latter is still considered secure for passwords, all users' password hashes should be switched to the more modern _bcrypt_ hash function. 

A local user whose password has been converted using one of the aforementioned outdated hash functions will no longer be able to log in under version {v22}.

*Does this affect you?*
Since version {v21}p16 (see link:https://checkmk.com/werk/14391[Werk pass:q[#]14391^]) {CMK} has been warning  when insecure password hashes are found in the site directory's `~/etc/htpasswd` file.
When `omd update` is executed, a warning message is displayed with all affected (local) user names.
Users from external connections like LDAP are not affected.

In {v21}, each affected user was then either prompted to choose a new password after logging in,
or the hash was automatically updated in the background during login.
However, if a user has not logged in at all since then, it is possible that an outdated password hash is still being used.
This user will not be able to log in after updating to version {v22}.

*What do you need to do?*
To restore access for an affected user, you must reset their password manually.
A new password is assigned either in the user administration via [.guihint]#Setup > Users#, or on the xref:wato_user#change_passwd[command line] with the `cmk-passwd <username>` command.
For password changes, use only the `cmk-passwd` command and no longer `htpasswd`, which comes from the Apache installation and which would generate obsolete password hashes without additional options.


[#omd_update-apache-config]
=== Site user and System Apache

Each Checkmk site provides its HTTP services (GUI, APIs) via its own site-specific Apache process.
Global access to this site-specific Apache is provided by the System Apache, which opens ports 80 and 443 for external requests, depending on the system configuration.

To learn about the site-specific Apache, System Apache reads a reverse proxy configuration provided by the site user.
A malicious site user could now trick System Apache into executing code as the root user, because System Apache is normally started with root privileges first.

To close this security loophole, we need to separate the System Apache configuration from the site user's access.
To remove the privilege escalation, the `omd update-apache-config <sitename>` command must be run _once_ for each site.

See link:https://checkmk.com/werk/14281[Werk #14281^] for more detailed information on this topic and additional notes, including how to execute the `omd update` command when it is used to change certain options.

*Does this affect you?*
Since version {v21}p7, when running `omd update` you are prompted to also run `omd update-apache-config <sitename>`.
If you have already done this when updating to {v21}, there is nothing further to do when updating to {v22}.
The previously urgent recommendation now becomes a requirement when updating to the {v22}.

*What do you need to do?*
As the root user, run the `omd update-apache-config <sitename>` command when prompted while running `omd update`.


[#rest-api]
=== REST API replaces Web API

As announced in {v21}, the Web API (also called HTTP API) has been removed in {CMK} version {v22}.
The Web API is replaced by the xref:rest_api#[REST API].

*Does this affect you?*
This will affect you if you have written custom scripts that still use the Web API.

*What do you need to do?*
Migrate all existing scripts that use the Web API to the REST API before moving to {CMK} version {v22}.
See the xref:rest_api#rest-web-api[REST API article] for an overview of which REST API endpoints replace the Web API commands.


[#kubernetes]
=== Kubernetes monitoring

The {CMK} {v20} special agent and its associated check plug-ins for monitoring Kubernetes are no longer available in {v22}.
Instead, use the xref:monitoring_kubernetes#[Kubernetes monitoring], rewritten from scratch and greatly improved in the {v21} version.


[#nsca]
=== NSCA

As announced in version {v21}, {CMK} {v22} no longer supports the Nagios Service Check Acceptor (NSCA).
NSCA is a Nagios add-on to get results from passive xref:monitoring_basics#checks[checks] on remote hosts in a distributed Nagios configuration.
This deprecated method for setting up xref:distributed_monitoring#[distributed monitoring] offers no advantages over {CMK}'s own methods.
Details and notes on its replacement can be found in link:https://checkmk.com/werk/13644[Werk #13644^].


[#local_files]
=== Non-packaged local files

Local files allow you to customize and extend the functionality provided by {CMK}.
These files are located in the local part of the site's directory structure, i.e. in `~/local`.
Local files can cause problems when updating, if they no longer match the new {CMK} version.

*Does this affect you?*
Since it is not possible for {CMK} to fully ensure compatibility of local customizations when updating, you should check your {CMK} site before an update to see if any local files are used on your system, and if so, which ones.

*What do you need to do?*
Get an overview of unpackaged local files on your {CMK} site by running the following command as the site user:

[{shell}]
----
{c-omd} mkp find
----

If files are listed here, you should group files that belong together in xref:mkps#[extension packages (MKPs)].
This makes it easier to deactivate _en bloc_ later, should xref:incompatible_mkps[incompatibilities] be detected after the update.


[#apis]
=== Programming interfaces

In {CMK} {v22} some internally used programming interfaces (APIs) have been rebuilt.

*Does this affect you?*
The issue of APIs _may_ affect you if you have extended the checks shipped with {CMK} with your own, self-written checks and/or if you use plug-ins from other sources.
Since the restructured APIs are considered _internal_ and are also not available to plug-ins from the link:https://exchange.checkmk.com[{CMK} Exchange^],
the number of extensions affected should be small.

*What do you need to do?*
Check third-party extensions for functionality and make any necessary adjustments to import paths.

Affected:

* Splitting of GUI imports related to datasource programs and active checks into multiple files (link:https://checkmk.com/werk/14716[Werk pass:q[#]14716^]).
* Splitting of GUI imports regarding the use of the password store (_password store_) into multiple files (link:https://checkmk.com/werk/14719[Werk pass:q[#]14719^]).
* Restructuring of the GUI code (link:https://checkmk.com/werk/15493[work pass:q[#]15493^]).
* Restructuring of the `ValueSpec` class (link:https://checkmk.com/werk/13094[work pass:q[#]13094^]).
* Changed scope of the `Transform` class (link:https://checkmk.com/werk/14821[Werk pass:q[#]14821^]).
* Finer granulation of access to rights for built-in users (link:https://checkmk.com/werk/14824[Werk pass:q[#]14824^]).
* End of support for the dashlet configuration format in {CMK} prior to version {v16} (link:https://checkmk.com/werk/14297[Werk pass:q[#]14297^]).
* End of support for the old plug-in API for HW/SW Inventory (link:https://checkmk.com/werk/14084[Werk pass:q[#]14084^]).


[#incompatible_mkps]
=== Incompatible and obsolete MKPs

Your monitoring system can be extended quite easily and conveniently via the xref:glossar#mkp[{CMK} extension packages (MKPs)].
On the one hand, it can be the case that such MKPs are no longer maintained and may then no longer be compatible with new versions of {CMK}.
On the other hand, we keep adding new plug-ins and functional extensions to {CMK}, which is why MKPs sometimes simply become obsolete, and their functionality will be provided by {CMK} itself.

*Does this affect you?*
If you have MKPs installed, for this reason a check of these MKPs is strongly recommended -- especially before a major update.
This will prevent incompatible packages from interfering with the update, or the creation of duplicate or at least very similar services following the update.

*What do you need to do?*
To do this, check your installed MKPs against our link:https://checkmk.com/integrations[Catalog of Check Plug-ins^] and remove packages which are now provided natively by {CMK}.
You can also use this opportunity to remove MKPs that may have only been installed for a test run.
A listing can be found in the commercial editions via [.guihint]#Setup > Maintenance > Extension packages#.

On the command line, you can view installed extensions with the following command:

[{shell}]
----
{c-omd} mkp list
Name        Version Title         Req. Version Until Version Files State                          
----------- ------- ------------- ------------ ------------- ----- -------------------------------
my_cool_mkp 1.0.2   Best MKP ever 2.0.0        2.3.9p99      6     Enabled (active on this site)
hello_world 0.2.1   Hello world!  2.1.0        2.1.99        6     Enabled (active on this site)
----

Then for each listed MKP you can subsequently also display the files that belong to the package:

[{shell}]
----
{c-omd} mkp list my_cool_mkp
/omd/sites/mysite/local/lib/check_mk/base/plugins/agent_based/check_mk.py
/omd/sites/mysite/local/share/check_mk/web/plugins/metrics/custom_metrics.py
----

Should you not be able to assign all packages via the check of the installed MKPs and the comparison with our catalog, the xref:dry_run[test run of the update,] described hereafter is recommended to identify incompatibilities in the process and then before the update remove these from your production monitoring.


[#mkp_backport]
==== MKP management for different {CMK} versions

To facilitate updates, {CMK} {v21}p22 introduced the ability to maintain MKPs in different versions.
When updating, the package for {CMK} {v21} is then automatically deactivated and the one for {CMK} {v22} automatically activated.
When operating a distributed monitoring with a xref:glossar#distributed_setup[centralized configuration], you can use this feature to xref:dist_setup[distribute] packages in versions that can differ between the remote sites and the central site.
This works even if the remote sites have a higher version than the central site, as is the case when updating in a distributed monitoring during a transitional period.

Note that you can only use this feature if you use at least {v21}p22 as the initial version!
If these requirements are met, you can add additional packages for {v22} on the central site.

When installing an MKP written for {CMK} {v22}, you will get a warning message when using {CMK} {v21}p22 and higher:

[{shell}]
----
{c-omd} mkp install /tmp/hello_world-0.2.2.mkp 
The package requires Check_MK version 2.2.0, but you have 2.1.0p22 installed.
----

This package is identified in the list of packages as being [.guihint]#Enabled (inactive on this site)#:

[{shell}]
----
{c-omd} mkp list
Name        Version Title        Req. Version Until Version Files State                          
----------- ------- ------------ ------------ ------------- ----- -------------------------------
hello_world 0.2.2   Hello world! 2.2.0        2.2.99        6     Enabled (inactive on this site)
hello_world 0.2.1   Hello world! 2.1.0        2.1.99        6     Enabled (active on this site)
----

Details on the revised package management function can be found in the xref:mkps#[article on extension package (MKPs) management].


[#incompatible]
=== Incompatible changes

As in every {CMK} version, there are alterations to the software in the current version {v22} that _may_ have repercussions on your {CMK} installation.
A so-called _incompatible change_ requires that you make manual modifications in order to allow existing functions to continue to run as usual and/or to be able to use new functions.

*Does this affect you?*
In general, there will be incompatible changes that will also affect your {CMK} installation, it is however impossible to make a general statement.
In this article we have collected those issues that apply to all or most {CMK} installations.
In any case there may be additional changes that are relevant to you, for example in checks that you use in your installation.

*What do you need to do?*
Once you have performed the xref:update[update], the {CMK} interface will show you the number and content of any incompatible changes, and prompt you to review and take note of them.
So you will definitely be confronted with this issue -- but only after you have performed the update.

It is therefore a good idea to get an overview of the incompatible changes *before* the update:
Open the list of link:https://checkmk.com/werks?search=&cmk_version$$[$$$$]$$=2.2&compatible=0[Werks^].
(The software development of {CMK} is organized in so-called Werks).
In the description of a Werk, you will find instructions on what, if anything, needs to be done to make the change compatible.

The frustrating news:
A version's Werks list is very, very long -- even if it contains only the incompatible changes.
The comforting news:
You will be able to see from the number of changes how much effort we put into improving {CMK} for you.


[#update]
== Update

[#dry_run]
=== Best practices when updating

In this section we describe the best practices that we follow even when updating large {CMK} environments.
These are certainly not mandatory in every environment, but they can make the process of updating easier for you.

[#update_patch]
==== Update the {CMK} version

Before updating to version {v22}, the {CMK} site must have version {v21} installed.

We have previously advised against omitting an intermediate major version when performing a major update, as there are simply too many changes in between that will hinder a smooth update and almost certainly cause problems.
With version {v21}, this recommendation was turned into a requirement -- and a lock was introduced that prevents, for example, a direct update from version {v20} to {v22}.

The update to {v22} currently requires at least {v21}p23.
However, in the future, a specific {v22} patch version may require a higher {v21} patch version for the update.
In general, we recommend updating {CMK} to the latest {v21} patch version first, and only then updating to {v22}.


==== Perform a test run of the update

In large environments, where obviously even restoring a current backup of your {CMK} environment could take quite some time, it is recommended to perform a test with a cloned site before updating the production environment.
For this purpose, you can, for example, restore the last regular backup of your site under a different name.

[{shell}]
----
{c-root} omd restore newsite /path/to/backup
----

*Alternatively* you can also copy your site using `omd cp`.
For this, however, the site must be stopped for a short time:

[{shell}]
----
{c-root} omd stop mysite
{c-root} omd cp mysite newsite
----

Then, perform the update first on this new cloned site, for example to check the above mentioned local changes in the new environment.


[#automatic_agent_updates]
==== Temporarily disable agent updates

{cee-only}
If you are using the automatic agent updates in the commercial editions, you should consider disabling them temporarily before updating {CMK} so as to be able to later switch to the new agents at the hosts in a controlled manner.
To do this, first select [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX# and on the following page select the menu item [.guihint]#Agents > Automatic updates.#
By clicking on the icon:icon_edit[alt="Icon to edit a list entry."] button in front of the [.guihint]#Master switch# you can disable the agent update completely:

image::update_major_automatic_agent_updates.png[alt=" Disabling agent update using the master switch."]

Following a successful update of {CMK}, you can reactivate the agent update in the same way.

At this point, we recommend that you initially only reactivate the automatic agent update for individual hosts or host groups.
By doing so, the new agent will not be rolled out to all of your servers right away and you can familiarize yourself with the newly delivered data on a few systems.
Also, due to the significant increase in the number of check plug-ins supplied, you might find a whole new set of services that you can then set up properly on the test systems you choose.
You may also need new thresholds for new services.
If you tackle this on a small scale first, you will be able to minimize unnecessary false positives.

To do this, you can simply enter a few hosts or host groups in the appropriate fields on the above page and then re-enable the [.guihint]#Master switch#.

image::update_major_activate_update_on_selected_hosts.png[alt="Options when updating agents to activate on specific hosts."]

*Important:* Remember to remove these restrictions on explicit hosts and host groups again once you are satisfied with the results.


[#notifications]
==== Temporarily disable notifications

You should also consider turning off xref:glossar#notification[notifications] in the pre-update site -- for similar reasons to the ones we explained in the previous section on automatic agent updates.
This way you avoid your colleagues from the monitoring team receiving _unnecessary_ notifications.

You can turn off notifications centrally with the main [.guihint]#Notifications# switch in the xref:user_interface#master_control[Master control] snap-in.

It may will happen that after the update one or another service is {CRIT} which had not been the case previously.
Take care of new problems after the update first.
You can also view any 'unhandled' problems, e.g. in the xref:user_interface#overview[Overview] snap-in.

*Important:* Don't forget to turn on the notifications again, e.g. when the number of unhandled problems after the update has leveled off to the level before the update.


[#update_distributed_monitoring]
=== Updates in distributed monitoring

There are two different procedures for performing an update of all sites included in a xref:distributed_monitoring#[distributed monitoring]:

* Stop all sites, perform the update of all sites in a bulk action, and then restart all sites.
* Under strict conditions, a _mixed operation_ is possible for a certain period of time, in which the remote sites are updated first, following which version equivalency is restored with the update of the central site.

In particular, if you want to update while the system is running, you should read the notes in the general article on xref:update#updatedistributed[Updates and Upgrades].


[#dist_setup]
==== MKPs in a distributed setup

If you are running a distributed monitoring with a xref:glossar#distributed_setup[central configuration] from which xref:glossar#mkp[{CMK} extension packages (MKPs)] are also distributed to the remote sites, you have the option to keep packages for the remote sites in versions for {v21} and {v22} on the {CMK} {v21} central site.
The MKPs matching the remote sites will then be distributed automatically.

To use this feature, you must first update the central site to patch version {v21}p22.
Once this has been done, you can start adding additional xref:mkp_backport[packages for {v22} on the central site].
Now, when you upgrade remote sites to {v22}, they will automatically receive and activate the package matching the new version.


=== Performing the update

Nothing fundamental has changed with the actual update of the software in {CMK} {v22}, 
i.e. you install the new version, perform the update of the {CMK} site, rectify any possible conflicts and check and confirm the incompatible changes.

Perform the update procedure as described in the article on xref:update#detailed[Updates and Upgrades].


[#cfe2cce]
=== Upgrading to the {CE}

If you already have the {FE} in the {v21} version, it is an obvious option to upgrade to the {CE} when you update to the {v22} version,
because you can try this xref:editions[{CMK} edition] in the {v22} for a limited time or use it permanently on a small scale.

*Note:* The _direct crossgrade_ described here is only supported for the change from {v21} {FE} to {v22} {CE}.
In all other cases, first update {CMK} and then upgrade the edition.
For distributed environments, again pay attention to the order described xref:update#editiondistributed[here].

. Download the {CE} from the link:https://checkmk.com/download[download page^].
You do not need any credentials for the download.

. Update to version {v22} as described in the article on xref:update#detailed[Updates and Upgrades]. +
In doing so, perform an _upgrade_ to another {CMK} edition at the same time as the _update_ to version {v22}, 
because in this particular case there is no common version of the {v21} {FE} and the {v22} {CE}.
For this reason, you must confirm an additional query when the `omd update` is executed:

+

image::update_major_omd_update_upgrade_confirmation.png[alt="Query when upgrading to the {CE}.",width=40%]

+
The last lines of the output from `omd update` tell you that the {CE} will start its life in the license state "Trial",
during which you can test the {CE} for 30 days without any restrictions:

+
[{shell}]
----
You are now starting your trial of Checkmk Cloud Edition.
If you are intending to use Checkmk to monitor more than 750 services after 30 days, you must purchase a license.
In case you already have a license, please enter your license credentials on the product's licensing page (Setup > Maintenance > Licensing > Edit settings).
Finished update.
----

. After upgrading to the {CE}, restart your site.
The login dialog will show the countdown for the remaining time in the license state "Trial":

+

image::update_major_login_cce_trial.png[alt="{CMK} login dialog for the {CE} in license state 'Trial'.",width=60%]


Entering a license key after 30 days at the latest is only necessary if you want to use the {CE} without restrictions.
If you stay below the limit of 750 services in a single site, the {CE} will switch to the license state "Free" after 30 days.


[#follow-up]
== Follow-ups

[#gui]
=== Changes to the user interface

The {CMK} user interface (GUI), which was completely redesigned with version {v20}, has not been changed fundamentally in version {v22}.
The general procedures, which you are already familiar with from versions {v20} and {v21}, can also be used as they are in {v22}.
However, menus, menu items, icons, and other details have been modified to make new features available -- and to improve existing ones.

We will present these changes in this User Guide's articles -- and in the xref:intro_setup#[Beginner's Guide] you will find a detailed introduction,
including the most important elements of the xref:intro_gui#[user interface].


[#favorites]
==== The 'Favorites' have been removed

The little known, little used and in the User Guide also not described option to mark hosts and services as _favorites_ was removed with link:https://checkmk.com/werk/14727[Werk pass:q[#]14727^].
Favorites could be set until {v21} via the [.guihint]#Commands > Favorites# menu item, i.e. in the same menu in which the commands for acknowledging problems or creating scheduled downtimes can be found.

As a substitute for quick access to important hosts and services, the xref:user_interface.html#bookmarks[Bookmarks] can be set, e.g. in views, after you have filtered the hosts or services shown.
For a description of how to do this, see the xref:intro_tools#views[Beginner's Guide].


[#service_discovery]
=== Updating services

As with every major version, {CMK} {v22} introduces a whole new set of check plug-ins.
If you do not use the xref:wato_services#discovery_check['discovery check'], i.e. the automatic update of the service configuration via the periodic service discovery, you will have to search for services on quite a number of hosts.

If your hosts are organized accordingly (e.g. in folders), you can generally use the [.guihint]#Bulk discovery# function for this.
This function can be found under [.guihint]#Setup > Hosts > Hosts# and then in the [.guihint]#Hosts > Run bulk service discovery# menu.


[#service_descriptions]
==== Service descriptions

Each update of {CMK} will involve changing service descriptions to improve the consistency of naming within the monitoring and documentation of {CMK}.
Since changing service descriptions means that rules sometimes need to be modified and historical monitoring data is lost, {CMK} initially leaves the old descriptions in place for updates.
For services where the loss of old monitoring data is acceptable and the effort for adapting rules is manageable, you should switch to new service descriptions as soon as possible.

To do this, go to [.guihint]#Setup > General > Global settings > Execution of checks# and go through the list [.guihint]#Use new service descriptions# and identify the services where the checkboxes are not yet active and activate them.
After applying the changes, the new service descriptions will be active and a few minutes will pass before you see the defined states of the affected services in the monitoring again.


[#new_ports]
=== Ports

Since {CMK} {v21}, hosts need access to the following ports on the {CMK} server to perform xref:wato_monitoringagents#agents[TLS registration]: port 443 (80 respectively) for REST API requests and port 8000 for the Agent Receiver.
If security policies speak against making these ports available, you can perform a xref:agent_linux#proxyregister[registration by proxy] directly on the {CMK} server when using xref:glossar#pull_mode[pull mode].

To use the {CE}'s xref:glossar#push_mode[push mode] introduced in {CMK} {v22}, port 8000 of the {CMK} server must be accessible from the monitored host.


[#certificate_lifetime]
=== Agent Controller certificate lifetime

{CMK} {v21} used certificates with de facto unlimited validity to establish the TLS connection.
In {CMK} {v22}, the certificate lifetime is customizable and set to a default value of five years (see link:https://checkmk.com/werk/14964[Werk pass:q[#]14964^]).
In addition, a custom _Certificate Authority_ can also be used.
Certificates created before the update to version {v22} are automatically replaced by newly generated certificates once the maximum runtime has expired.

Therefore, update {CMK} {v21} agents that use the Agent Controller with encryption to the {v22} agent in a timely manner.

In the few cases where updating the agent is not possible -- for example, because the operating system version is no longer supported by the {v22} agent -- you must manually xref:agent_windows#registration[re-register] affected hosts after the certificate expires.
The same applies if hosts running the {v22} agent are inactive for a longer period of time.


[#remove_old_mkps]
=== Removing obsolete MKPs

*Does this affect you?*
This will affect you if you have made use of the feature to keep xref:mkp_backport[MKPs in differing versions].

*What do you need to do?*
During the update, incompatible packages will be automatically set to the [.guihint]#Disabled# state, but not completely deleted.
Packages compatible with the new {CMK} version will be automatically enabled, and you will see the [.guihint]#Enabled (active on this site)# state.

[{shell}]
----
{c-omd} mkp list
Name        Version Title        Req. Version Until Version Files State                          
----------- ------- ------------ ------------ ------------- ----- -----------------------------
hello_world 0.2.1   Hello world! 2.1.0        2.1.99        6     Enabled (active on this site)
hello_world 0.2.0   Hello world! 2.0.0        2.0.99        6     Disabled
----

Once the functionality of the new packages has been verified and the old ones are no longer needed for reference, you can search for obsolete packages:

[{shell}]
----
{c-omd} mkp list | grep Disabled
----

Then uninstall them with `mkp remove`.

[{shell}]
----
{c-omd} mkp remove hello_world 0.2.0
----


[#pip3post]
=== Installing Python modules

*Does this affect you?*
This will only apply to you if you have explicitly installed Python modules for special agents or agent-based check plug-ins that you have written yourself or obtained from the Exchange and have xref:pip3[removed] these in the course of preparing for the update.

*What do you need to do?*
First find out whether the previously uninstalled modules have already been delivered with the new {CMK} version, for example:

[{shell}]
----
{c-omd} pip3 list | grep '^cryptography'
----

If the module has already been found, mark it as not required in your notes.
Install the latest version of any modules that are not included:

[{shell}]
----
{c-omd} pip3 install ecdsa
----

Then test the check plug-ins or special agents that rely on Python modules installed in the site.


[#outlook]
== The outlook

This chapter covers topics not directly related to the current {CMK} version {v22}, but to one of its subsequent versions.


[#mod_auth_mellon]
=== {CMK} without the mod_auth_mellon Apache module

link:https://github.com/Uninett/mod_auth_mellon[mod_auth_mellon^] is a software module for Apache that provides services for authentication via the Secure Assertion Markup Language (SAML).
Up until {CMK} version {v21}, logging into {CMK} via SAML was only possible with the help of mod_auth_mellon.
As of version {v22}, SAML authentication is built into the {CMK} commercial editions and the configuration is done through the {CMK} user interface, as described in the article on xref:saml#saml_cee[SAML].
SAML authentication via mod_auth_mellon is also still supported in version {v22}.

However, this will change starting with version {v23} --
mod_auth_mellon will then no longer be shipped with the {CMK} software.
If you would like to continue using this approach to SAML authentication from version {v23} onwards, you will need to install mod_auth_mellon manually.
That said, from version {v23}, we will no longer provide support for this method.


[#mk_file_config]
=== No configuration of check plug-in default values with mk files

In version {v23} it will no longer be possible to override the default values in check plug-ins or other global variables using mk files.

This deprecated method for configuring plug-ins has long been undocumented -- and in any case no longer works for all of those plug-ins that have been switched to the link:https://docs.checkmk.com/2.1.0/en/update_major.html#check-api[Check API] that was introduced with version {v20}.
Therefore, from version {v23} configuring check plug-in defaults with mk files is no longer supported.

For details and notes on the changeover, see link:https://checkmk.com/werk/15250[Werk #15250^].


[#prometheus]
=== Prometheus checks data sources and settings

The xref:monitoring_prometheus#[Prometheus special agent] provides `kube-state-metrics` as a data source, but its checks are no longer actively supported.
These have since been replaced by improved counterparts in the Kubernetes agent (see link:https://checkmk.com/werk/14572[Werk pass:q[#]14572^]).
In addition, in the [.guihint]#Prometheus# and [.guihint]#Alertmanager# rules, the specification of IP address/host name, port and file path prefix is replaced by a single input field [.guihint]#Custom URL# (see link:https://checkmk.com/werk/14573[Werk pass:q[#]14573^]).

In both cases, the old method still works in version {v22}.
However, to use it in version {v23}, the configuration must be changed to the new procedure.