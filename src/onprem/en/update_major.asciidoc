// -*- coding: utf-8 -*-
// IGNORE Alertmanager p17 p21 p23 p8 pre % × b6
include::global_attr.adoc[]
= Update to version 2.3.0
:revdate: draft
:title: Update to version 2.3.0
:description: In this article you will learn what to consider when updating from {CMK} version 2.2.0 to 2.3.0.

{related-start}
xref:update#[Updates and Upgrades]
xref:install_packages#[Basic information on the installation of {CMK}]
{related-end}


[#intro]
== Introduction

In this article you will find the most important topics relevant to an update of your {CMK} from version {v22} to version {v23}.

We recommend that you read through the entire article before updating so that you know exactly what to expect: before, during and after the update.

////
[TIP]
====
_Work in progress:_
This article is subject to constant change until the release of the final version of {CMK} {v23}.
We hope to have covered the most important topics at the beginning of the beta phase.
If something is missing, please report link:https://github.com/Checkmk/checkmk-docs/issues[an issue via GitHub].
The content on this page has been partly automatically translated and may not always up to date with link:../de/update_major.html[the German version].
====
////


[#prep]
== Preparations

This chapter gives you an overview of the topics you should take into consideration before you perform the update.
Probably not every topic will be relevant for you:
For each topic, you can check the corresponding box for your own reference and immediately move on to the next topic.


[#backup]
=== Backup

As with any update to production software, you should check that your backups are up to date before performing the update of {CMK}.

*Does this affect you?*
Yes.

*What do you have to do?*
If you create your backups automatically via [.guihint]#Setup > Maintenance > Backups#, check there that your backups are up to date and that the most recent backup jobs have completed without errors.

For more information, see the articles on xref:backup#[Backups] and on xref:omd_basics#omd_backup_restore[Backing up and restoring sites].

[TIP]
====
From the update to {v23}, changes are rolled back in the event of a failed update (link:https://checkmk.com/werk/16408[Werk pass:q[#]16408^]).
An update can fail due to an unexpected internal error, but also due to user input during the update process, for example by selecting the menu option `abort` or by pressing the key combination `CTRL+C`.
Only when the text `Completed verifying site configuration. Your site now has version {v23}pX` is displayed, the updated configuration is active.
Restoring the configuration does not replace a backup, but usually reduces downtime if something goes wrong.
====

[#performance]
=== Check hardware utilization

{CMK} {v23} requires slightly higher system resources than {v22}.
It is therefore advisable to find out before updating which free capacity the servers used for {CMK} still have. 

*Does this apply to you?*
Yes, but the extent to which you are affected depends heavily on how you use {CMK}.
The update of the Python interpreter from version 3.11 to 3.12 alone causes a load increase in the single-digit percentage range.
Furthermore – depending on the proportion to the total number of checks – more extensive checks, especially in the cloud area, can result in further additional load, so that a total of 10-15{nbsp}% (in extreme cases around 20{nbsp}%) more CPU load can be expected.

*What do you have to do?*
Make sure that there is sufficient free capacity available.
As a rule of thumb: If the _CPU load_ is below _number of processor cores × 0.8_ and the CPU utilization is below 70{nbsp}%, no problems are to be expected.
If one or both values are higher, create sufficient free capacity, for example by deactivating test sites on the same server or moving hosts to other sites.


[#linux_versions]
=== Linux distribution versions

In {CMK} version {v23} some obsolete distributions will no longer be supported.

*Does this affect you?*
This affects you if one of the following Linux distributions - still supported in {v22} - is installed on your {CMK} server:

* RedHat Enterprise Linux 7
* Ubuntu Short Term Support (STS) versions 22.10 to 23.10. +
From {v23} {CMK} only supports Ubuntu Long Term Support (LTS) versions.
* SLES 15 SP1 and SP2

*What do you need to do?*
Before updating {CMK}, first perform an xref:release_upgrade#[Linux distribution version upgrade].
Make sure that the target version of the Linux distribution of {CMK} is {v22} *and* {v23} is supported.
You can find out which Linux distribution versions {CMK} supports in the xref:update_matrix#[update matrix for {v23}] and on the link:https://checkmk.com/download[download page^] after you have selected the {CMK} version and your Linux distribution.

Shortly after the release of Ubuntu 24.04 LTS, we will provide packages of {CMK} {v22} and {v23} for this distribution version. This will allow you to first update to the latest patch version of {CMK} {v22}, then update from Ubuntu 23.10 STS to 24.04 LTS and finally update to the latest patch version of {CMK} {v23}.


[#sles_php]
=== PHP on SLES 15 SP3/SP4

With {CMK} version {v23} (and {v22}p21) on SUSE Linux Enterprise Server 15 Service Pack 3 and 4, the dependency on the PHP programming language runtime environment is increased from version 7 to version 8.

*Does this affect you?*
Yes, as a user of SLES 15 SP3/SP4. The update is somewhat more complex, as package sources for the outdated version 7 must be deactivated and activated for the new version 8.

*What do you need to do?*
If, in addition to {CMK} applications on your server that use the PHP programming language, make sure that they can handle PHP 8 without any problems.
Then prepare the package sources for the update to {v22}p21 (or higher), which is mandatory for the installation of {CMK} {v23}, as described in link:https://checkmk.com/werk/16025[Werk pass:q[#]16025^].


[#browser]
=== Browser support

{CMK} {v23} uses new JavaScript features that are not available in older browsers.
Which browsers are supported in which versions can be found in the xref:release_notes#browser[Release notes].

*Does this affect you?*
You will usually have automatic updates to the latest version enabled on desktop systems.

*What do you need to do?*
Check the browser version you are using and install a more recent browser if necessary.
If you are using _Single Board Computers_, _Smart TVs_ or _Digital Signage_ solutions to display dashboards and you have no control over the system browser, test that any required dashboards are displayed correctly before updating.
If necessary, contact the hardware manufacturer for updates.


[#openssl]
=== SSL compatibility

For the first time, {CMK} {v23} provides OpenSSL in version 3.0 instead of the previous 1.1.
This change affects almost all components that use _Secure Socket Layer_ or _Transport Level Security_.

*Does this affect you?*
As OpenSSL 3 is now widely used, hardly any surprises are to be expected.
Problems can occur - especially with active checks - if connections are to be established to devices that expect old _ciphers_ or attempt _renegotiation_.
These are usually old network devices (switches, printers...) that no longer receive updates.
In some cases, services on older Linux distributions or Unix versions are affected, which are still supplied with updates.

*What do you need to do*
If possible, try to find out in advance which devices are likely to have problems.
Good indicators for this are age and how long ago updates were installed.
Test these devices with {CMK} {v23}.
If problems occur, you have two options:

. Check whether updates or configuration changes are possible.
Older but still supported operating systems in particular often allow older default settings to be overwritten with more secure modern settings.

. If this is not possible, the affected active checks can be manually configured for other default settings using the rule [.guihint]#Integrate Nagios plugins#.
We are currently preparing detailed instructions.
If required, you can request a preliminary version via Help Desk Beta or in the forum.


[#cme]
=== {ME} is based on {CE}

With {CMK} {v23}, {ME} changes its foundation from {SE} to {CE}.
This not only means that the {ME} receives the extended range of functions of the {CE}, but also that the license management is aligned with that of the {CE}.

*Does this affect you?*
This only affects users of {ME}, other forms of distributed monitoring are not affected.

*What do you need to do?*
Updating a {ME} to {v23} follows the general xref:update_distributed_monitoring[procedure in distributed environments with distributed setup].
However, it must be ensured that the central site can still transfer the license information under {CMK} {v22} to remote sites already updated on {CMK} {v23}.

As the necessary changes are only implemented in {CMK} {v22}p17 (link:https://checkmk.com/werk/16193[Werk pass:q[#]16193^]), you must therefore update the central site to at least this version.
This ensures the transfer of the xref:license#license_cce[license information].
The remote sites can then be updated to {v23} and finally the central site.

Irrespective of the minimum requirement for {v22}p17 mentioned here, we recommend that you first update all involved sites to the latest available patch version of {v22} and only then start the update to {v23}.


[#agentupdaterhash]
=== Automatic agent updates from versions prior to {v22}p8

{CMK} {v23} no longer creates SHA1 signatures for agent packages.
The verification of SHA256 signatures was introduced with Checkmk {v22}p8.
In order for agent updates to version {v23} to take place automatically, the agents must first be updated to version {v22}p8 or higher.

*Does this affect you?*
This affects you if you perform automatic agent updates but occasionally skip patch versions of the agent.
It also affects you if your deployment uses prepared operating system images that include the {CMK} Agent Updater and rely on automatic xref:agent_deployment#automatic_installer[installation/update].

*What do you need to do?*
Make sure that all agents that are to be updated automatically have been updated to at least version {v22}p8.
In particular, check prepared operating system images and update the existing agent to version {v22}p8 or higher.
And if you are currently working on agent updates, you can already add the xref:agentupdatercert[certificate] provided by the agent bakery now, if this is required later.


////
[#agentlinux]
=== The agent for Linux
_TBD: We are still checking whether something needs to be added here. At the moment (March 5, 2024) it does not look like this is the case._
////


[#agentwindows]
=== The agent for Windows: Deprecated plug-ins

Some plug-ins that were marked as _deprecated_ have been removed and may require manual installation if needed: link:https://checkmk.com/werk/16359[Werk pass:q[#]16359^]


[#pythonwindows]
=== The agent for Windows: Python 3.4 removed

The official support for the {CMK} agent under Windows Server 2008 and Windows 7 by {comfull} already ended with the release of {CMK} {v22}.
Nevertheless, operation under Windows Server 2008 R2 and Windows 7 was still possible without restrictions.
With {v23}, restrictions must be accepted: 
The previous option of supplying a Python 3.4 runtime environment for Windows agents via the agent bakery rule is no longer available in {v23}.

*Does this affect you?*
Hopefully not: The discontinuation only affects you if you use agent plug-ins written in Python on Windows Server 2008 R2 or Windows 7 (both end-of-life already in 2020).
Current Python versions run on all newer Windows versions.
On all even older Windows versions - such as Windows Server 2008 R1 or Windows Vista - the agent could no longer be used in version {v22}.

*What do you have to do?*
If you want to continue monitoring these Windows systems, you must provide the runtime environment for agent plug-ins that require Python yourself:
Install Python 3.4 manually on affected systems.
For these systems, usually set [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules > Windows modules > Install Python runtime environment# the setting [.guihint]#Install Python runtime environment > Installation# to [.guihint]#Never install Python with the agent#.
Please note that we cannot guarantee support for such old Windows systems and no longer test new agent versions in patch releases.


[#mod_auth_mellon]
=== {CMK} without Apache module mod_auth_mellon

link:https://github.com/Uninett/mod_auth_mellon[`mod_auth_mellon`^] is a software module for Apache that provides services for authentication via Secure Assertion Markup Language (SAML).
The connection to SAML authentication services was possible in {CMK} {v22} in two ways:
At Apache level with `mod_auth_mellon` (the only supported option until version {v21}) or in the commercial editions of {CMK} the xref:saml#saml_cee[built-in SAML authentication].
With version {v23} `mod_auth_mellon`` is no longer delivered with the {CMK} software.

*Does this affect you?*
This affects you if you use SAML authentication with `mod_auth_mellon`.

*What do you need to do?*
Users of the commercial editions should switch SAML authentication to the solution integrated in {CMK} _before_ updating to {v23}.

If you are using the {RE}, you can already install `mod_auth_mellon` system-wide before the update according to the link:https://github.com/latchset/mod_auth_mellon[instructions on the project page^].
Then change the line for loading the module in the configuration file `~/etc/apache/conf.d/auth.conf` to the system-wide installation path.
The installation directory may vary depending on the distribution used:

[{apache}]
----
LoadModule auth_mellon_module /usr/lib/apache2/modules/mod_auth_mellon.so
----

Restart your site after making the change.
Finally, test -- still under {v22} -- whether SAML authentication continues to work.
If this is the case, no difficulties are to be expected after the update.


[#pip3]
=== Uninstalling Python modules

Checkmk 2.3.0 updates Python from 3.11 to 3.12.
This update affects modules installed to a {CMK} site.
In many cases, post-installed modules are incompatible with Python 3.12.
In the worst case, obsolete modules overwrite the functionality of the modules supplied by {CMK}.

*Does this affect you?*
This will only affect you when you have explicitly-installed Python modules for special agents or agent-based check plug-ins that you have written yourself or obtained from the Exchange.
If you are unsure, carry out the check described in the following section.

*What do you need to do?*
First find out whether Python modules are installed in the site, and if so -- identify them.
To do this, search for the directories `dist-info` and `egg-info`:

[{shell}]
----
{c-omd} find ~/local/lib/python3/ -type d -name '*.*-info'
local/lib/python3/cryptography-41.0.5.dist-info
local/lib/python3/ecdsa-0.18.0.dist-info
----

Make a note of the installed modules and then uninstall them:

[{shell}]
----
{c-omd} pip3 uninstall cryptography ecdsa
----

You can find out how to deal with uninstalled Python modules after the update xref:pip3post[below].


[#prometheus]
=== Prometheus checks data source and settings
// _TBD: Copied from outlook in {v22}, this section is work in progress._

The xref:monitoring_prometheus#[Prometheus special agent] offered `kube-state-metrics` as data source, whose checks are no longer supported.
These have since been replaced by improved counterparts in the Kubernetes agent (see link:https://checkmk.com/werk/14572[Werk pass:q[#]14572^]).
In addition, in the [.guihint]#Prometheus# and [.guihint]#Alertmanager# rules, the specification of IP address/host name, port and path prefix has been replaced by a single input field [.guihint]#Custom URL# (see link:https://checkmk.com/werk/14573[Werk pass:q[#]14573^]).

In both cases, the old method continued to work in {v22}.
To use it in {v23}, however, you must have changed your configuration to the new method.


[#local_files]
=== Packaged (MKPs) and non-packaged local files

Local files allow you to customize and extend the functionality provided by {CMK}.
These files are located in the local part of the site directory structure, i.e. in `~/local` and can be organized in extension packages or just "lying around".
Local files can cause problems during an update if they no longer match the new {CMK} version.

*Does this affect you?*
Since it is not possible for {CMK} to fully ensure the compatibility of local adaptations during an update, you should check your {CMK} site before an update to see whether local files are used, which ones they are and how they are organized.

*What do you need to do?*

////
[IMPORTANT]
====
*Risk of loss of settings!*
When updating the major version, {CMK} deletes rules that are no longer required.
If you uninstall packages _before_ performing the update in order to install a new version _after_ the succesful update, settings that are still required may be lost.
Instead, install new and old packages in parallel and only remove old ones after the update.
====
////

. Use `mkp list` to create an overview of existing xref:mkps#[extension packages (MKPs)] and their sources:
You can usually easily test the extensions you have developed yourself and adapt them if necessary.
For externally sourced MKPs, you should research whether there are known problems with {CMK} {v23} and whether new versions are available.
In cases where functionality previously provided by the MKP is now provided by {CMK} {v23}, deactivate the package before updating.

. Get an xref:mkps#find_unpackaged[overview] of _unpackaged_ local files of your {CMK} site by executing the command `mkp find` as site user.
If paths with `python3` appear here, go xref:pip3[back to Python modules] again.
The following applies to all other files: Combine files that belong together in xref:mkps#package_mkp[MKPs].
This makes it easier to deactivate _en bloc_ later if incompatibilities are detected after the update.

. In the case of MKPs that require different versions for {CMK} {v22} and {v23}, you should have installed xref:mkps#enabled_inactive_cli[both package versions with correct compatibility information] in {CMK} before performing the update.
If different versions of a package are available, {CMK} automatically activates the appropriate version during the update.
As central sites with {CMK} {v22} can hold packages for {v23} and distribute them to remote sites, this feature also helps when updating in xref:glossar#distributed_monitoring[distributed environments] with a xref:glossar#distributed_setup[distributed setup].


[#apis]
=== Programming interfaces

In {CMK} {v23} some internal programming interfaces (APIs) have been rebuilt.
Some previously _ad-hoc_ defined APIs have been replaced by well-specified ones.
In addition, the check APIs already marked as _deprecated_ in {v20} have been permanently removed.

*Does this affect you?*
The topic of APIs affects you if you have extended the checks delivered with {CMK} with your own, self-written checks and/or if you use plug-ins from other sources.

*What do you need to do?*
Check the functionality of extensions you have written yourself and those from third-party providers.
Since the new APIs can be used parallel to the old ones during {CMK} {v23} and changes to the existing APIs could be small, most extensions will continue to be usable without modifications.
If changes are necessary, we recommend migrating to the xref:outlook_newapi[new APIs], which are available from {CMK} {v24} completely replace the old APIs.

[IMPORTANT]
====
With {CMK} {v23}b6, the check APIs for versions up to {v16} that were already marked as _deprecated_ in {v20} finally have been removed (link:https://checkmk.com/werk/16689[Werk #16689^]).
Checks that were created using these programming interfaces will be deactivated during the update.
Before updating, check whether such checks are present and port them to one of the two new API versions -- preferably, of course, the well-specified ones available from {v23}.
====

[#rest_api]
=== Deprecations in the REST-API

Deprecated endpoints or parameters of the {CMK} REST API are marked in the API documentation with the icon icon:icon_rest_api_deprecated[alt="Icon to indicate a deprecation in the REST API documentation].

*Does this affect you?*
This may affect you if you use the {CMK} REST API in your own scripts, for example.

*What do you need to do?*
Open the REST API documentation with [.guihint]#Help > Developer Resources > REST API documentation#.
Search for `Deprecated` in the browser on the page, check whether you are using deprecated elements in your scripts and replace them before updating.
In the REST API documentation, you will usually find instructions on how to replace the functions that no longer exist in the new version.


[#incompatible]
=== Incompatible changes

As in every {CMK} version, there are also changes to the software in the current version {v23} – at {CMK} organized and documented in so-called _Werks_ – which _may_ have repercussions on your {CMK} installation.
A so-called _incompatible change_ requires that you make manual modifications in order to allow existing functions to continue to run as usual and/or to be able to use new functions.

*Does this affect you?*
In general, there will be incompatible changes that will also affect your {CMK} installation, it is however impossible to make a general statement.
In this article we have collected those issues that apply to all or most {CMK} installations.
In any case there may be additional changes that are relevant to you, for example in checks that you use in your installation.

*What do you need to do?*
After every update – including patch releases – {CMK} will show you the number and content of incompatible changes and ask you to check and take note of them.
Before performing the update is the right time to check for any changes from version {v22} that may have an impact on the update.
Since {CMK} {v23}, such Werks are no longer dragged on, but deleted during the update after showing a confirmation dialog (link:https://checkmk.com/werk/15292[Werk #15292^]).

It is also a good idea to get an overview of the incompatible changes in version {v23} *before* the update:
Open the list of link:https://checkmk.com/werks?search=&cmk_version$$[$$$$]$$=2.3&compatible=0[Werks^] on the {CMK} website.
In the description of a Werk, you will find information on what you may need to do to make the change compatible.

After you have carried out the xref:update[update], the number and content of the incompatible changes will be displayed in the {CMK} interface and you will be asked to check and take note of them.
Links help you to check so that you can find out with just a few clicks whether you are using an affected component.
If it is certain that a Werk has no impact or you have made the required changes, confirm it with [.guihint]#Acknowledge#.


[#update]
== Update

[#dry_run]
=== Best practices when updating

In this section we describe the best practices that we follow even when updating large {CMK} environments.
These are certainly not mandatory in every environment, but they can make the process of updating easier for you.


[#update_patch]
==== Update the {CMK} version

Before updating to version {v23}, the {CMK} site must have version {v22} installed.

We have previously advised against omitting an intermediate major version when performing a major update, as there are simply too many changes in between that will hinder a smooth update and almost certainly cause problems.
With version {v22}, this recommendation was turned into a requirement -- and a lock was introduced that prevents, for example, a direct update from version {v20} to {v23}.

The update to {v23} currently requires at least {v22}p8.
However, in the future, a specific {v23} patch version may require a higher {v22} patch version for the update.
In general, we recommend updating {CMK} to the latest {v22} patch version first, and only then updating to {v23}.


==== Perform a test run of the update

In large environments, where obviously even restoring a current backup of your {CMK} environment could take quite some time, it is recommended to perform a test with a cloned site before updating the production environment.
For this purpose, you can, for example, restore the last regular backup of your site under a different name.

[{shell}]
----
{c-root} omd restore newsite /path/to/backup
----

*Alternatively* you can also copy your site using `omd cp`.
For this, however, the site must be stopped for a short time:

[{shell}]
----
{c-root} omd stop mysite
{c-root} omd cp mysite newsite
----

Then, perform the update first on this new cloned site, for example to check the above mentioned local changes in the new environment.


[#automatic_agent_updates]
==== Temporarily disable agent updates

{cee-only}
If you are using the automatic agent updates in the commercial editions, you should consider disabling them temporarily before updating {CMK} so as to be able to later switch to the new agents at the hosts in a controlled manner.
To do this, first select [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX# and on the following page select the menu item [.guihint]#Agents > Automatic updates.#
By clicking on the icon:icon_edit[alt="Icon to edit a list entry."] button in front of the [.guihint]#Master switch# you can disable the agent update completely:

image::update_major_automatic_agent_updates.png[alt=" Disabling agent update using the master switch."]

Following a successful update of {CMK}, you can reactivate the agent update in the same way.

At this point, we recommend that you initially only reactivate the automatic agent update for individual hosts or host groups.
By doing so, the new agent will not be rolled out to all of your servers right away and you can familiarize yourself with the newly delivered data on a few systems.
Also, due to the significant increase in the number of check plug-ins supplied, you might find a whole new set of services that you can then set up properly on the test systems you choose.
You may also need new thresholds for new services.
If you tackle this on a small scale first, you will be able to minimize unnecessary false positives.

To do this, you can simply enter a few hosts or host groups in the appropriate fields on the above page and then re-enable the [.guihint]#Master switch#.

image::update_major_activate_update_on_selected_hosts.png[alt="Options when updating agents to activate on specific hosts."]

*Important:* Remember to remove these restrictions on explicit hosts and host groups again once you are satisfied with the results.


[#notifications]
==== Temporarily disable notifications

You should also consider turning off xref:glossar#notification[notifications] in the pre-update site -- for similar reasons to the ones we explained in the previous section on automatic agent updates.
This way you avoid your colleagues from the monitoring team receiving _unnecessary_ notifications.

You can turn off notifications centrally with the main [.guihint]#Notifications# switch in the xref:user_interface#master_control[Master control] snap-in.

It may will happen that after the update one or another service is {CRIT} which had not been the case previously.
Take care of new problems after the update first.
You can also view any 'unhandled' problems, e.g. in the xref:user_interface#overview[Overview] snap-in.

*Important:* Don't forget to turn on the notifications again, e.g. when the number of unhandled problems after the update has leveled off to the level before the update.


[#update_distributed_monitoring]
=== Updates in distributed monitoring

There are two different procedures for performing an update of all sites included in a xref:glossar#distributed_monitoring[distributed monitoring]:

* Stop all sites, perform the update of all sites in a bulk action, and then restart all sites.
* Under strict conditions, a _mixed operation_ is possible for a certain period of time, in which the remote sites are updated first, following which version equivalency is restored with the update of the central site.

In particular, if you want to update while the system is running, you should read the notes in the general article on xref:update#updatedistributed[Updates and Upgrades].


=== Performing the update

Nothing fundamental has changed with the actual update of the software in {CMK} {v23}, 
i.e. you install the new version, perform the update of the {CMK} site, rectify any possible conflicts and check and confirm the incompatible changes.

Perform the update procedure as described in the article on xref:update#detailed[Updates and Upgrades].


[#follow-up]
== Follow-ups

[#gui]
=== Changes to the user interface

The {CMK} user interface (GUI), which was completely redesigned with version {v20}, has not been changed fundamentally in version {v23}.
The general procedures, which you are already familiar with from versions {v20} and {v22}, can also be used as they are in {v23}.
However, menus, menu items, icons, and other details have been modified to make new features available -- and to improve existing ones.

We will present these changes in this User Guide's articles -- and in the xref:intro_setup#[Beginner's Guide] you will find a detailed introduction,
including the most important elements of the xref:intro_gui#[user interface].


[#service_discovery]
=== Updating services

As with every major version, {CMK} {v23} introduces a whole new set of check plug-ins.
If you do not use the xref:wato_services#discovery_check['discovery check'], i.e. the automatic update of the service configuration via the periodic service discovery, you will have to search for services on quite a number of hosts.

If your hosts are organized accordingly (e.g. in folders), you can generally use the [.guihint]#Bulk discovery# function for this.
This function can be found under [.guihint]#Setup > Hosts > Hosts# and then in the [.guihint]#Hosts > Run bulk service discovery# menu.


[#service_descriptions]
==== Service descriptions

Each update of {CMK} will involve changing service descriptions to improve the consistency of naming within the monitoring and documentation of {CMK}.
Since changing service descriptions means that rules sometimes need to be modified and historical monitoring data is lost, {CMK} initially leaves the old descriptions in place for updates.
For services where the loss of old monitoring data is acceptable and the effort for adapting rules is manageable, you should switch to new service descriptions as soon as possible.

To do this, go to [.guihint]#Setup > General > Global settings > Execution of checks# and go through the list [.guihint]#Use new service descriptions# and identify the services where the checkboxes are not yet active and activate them.
After applying the changes, the new service descriptions will be active and a few minutes will pass before you see the defined states of the affected services in the monitoring again.


[#agentupdatercert]
=== Certificate check for agent updates

The behavior of the command line parameter `--trust-cert` of the `cmk-update-agent` command has been changed.
Previously, the entire certificate chain was checked and the highest self-signed certificate found in the hierarchy was trusted; this is usually the root or an intermediate certificate.
From {CMK} {v23}, only the server certificate is imported and trusted.

*Does this affect you?*
This only affects you if you rely on `--trust-cert` when registering hosts for automatic agent updates and do not provide an xref:agent_deployment#connection_to_cmk_server[certificate via agent bakery].
In this case, from {CMK} {v23} hosts already lose the trust position when the server certificate expires, hosts registered with {CMK} {v22} only when the root or intermediate certificates expire.

*What do you need to do?*
We recommend providing the correct certificates via agent bakery promptly after the update to {v23} and updating all agents to ensure consistent behavior for all hosts that use the Agent Updater.


[#pip3post]
=== Installing Python modules

*Does this affect you?*
This will only apply to you if you have explicitly installed Python modules for special agents or agent-based check plug-ins that you have written yourself or obtained from the Exchange and have xref:pip3[removed] these in the course of preparing for the update.

*What do you need to do?*
First find out whether the previously uninstalled modules have already been delivered with the new {CMK} version, for example:

[{shell}]
----
{c-omd} pip3 list | grep '^cryptography'
----

If the module has already been found, mark it as not required in your notes.
Install the latest version of any modules that are not included:

[{shell}]
----
{c-omd} pip3 install ecdsa
----

Then test the check plug-ins or special agents that rely on Python modules installed in the site.


[#winnet]
=== Network interfaces on Windows

Until {CMK} {v22}, the Windows agent relied on the additional plug-in link:https://checkmk.com/integrations/winperf_if[Windows: State and Performance of Network Interfaces^] to correctly transmit the status of network interfaces.
Without the plug-in, the status was always _up_.
As of {CMK} {v23}, the agent can transmit the correct status on its own (link:https://checkmk.com/werk/15839[Werk pass:q[#]15839^]).

*Does this affect you?*
Depending on the extent to which you have distributed the plug-in and whether you have deactivated the monitoring of the status of network interfaces for hosts without a plug-in, this may affect you.
Hosts that have not previously used a plug-in and whose network interfaces were included in the monitoring will change many interfaces from _up_ to _down_, resulting in the status {CRIT} and triggering notifications.

*What do you need to do?*
Check whether the status determined for the affected network interfaces is the desired one.
Then carry out the service discovery again for the affected hosts.
Take the opportunity to first implement the recommendations of the blog article link:https://checkmk.com/blog/network-monitoring-with-checkmk-2-0[Network monitoring with Checkmk: 3 rules to rule them all^], at least for your Windows hosts.
For Windows, the above-mentioned settings have to be made in the [.guihint]#Network interfaces on Windows# rule.


[#cmeccelicense]
=== Synchronize license information

With {CMK} {CE} and {ME} with distributed setup, license information is sometimes not synchronized to remote sites during the update.

*Does this affect you?*
If you need a complete overview of your license usage immediately after the update, you may be affected.
Check the license status and initiate synchronization manually if necessary.

*What do you need to do?*
Under [.guihint]#Setup > General > Distributed Monitoring#, take a look at the overview of remote sites and search for sites marked with [.guihint]#License state: trial#.
To force an immediate synchronization for these sites, check the license under [.guihint]#Setup > Licensing# or save the license settings.
If this step is forgotten, the license data is usually synchronized in the background within seven days of the update.


[#outlook]
== The outlook

This chapter covers topics not directly related to the current {CMK} version {v23}, but to one of its subsequent versions.


[#check_http]
=== HTTP check in new version

{CMK} {v23} contains a new active check for HTTP connections and certificates, which is significantly better performing, more robust and easier to configure than the previous [.guihint]#Check HTTP service#.
In addition, it is now possible to monitor several things at once with a single rule, for example HTTP response code, response time and certificate validity.

The new [.guihint]#Check HTTP web service# can be found under [.guihint]#Setup > Services > HTTP, TCP, Email, ...# in the [.guihint]#Networking# box. 
In the medium term, it will completely replace the old [.guihint]#Check HTTP service#, which you can find on the same page.
For this reason, we recommend that you no longer use the previous check (internal: `check_http`) when creating new hosts and gradually migrate existing hosts to the new check (internal: `check_httpv2`).

Migration help will be provided during the lifecycle of {CMK} {v23}, but a fully automated migration tends to be difficult because for many hosts rules from two checks need to be merged to benefit from the improved efficiency.
Further information can be found in the two Werks link:https://checkmk.com/werk/15514[pass:q[#]15514^] and link:https://checkmk.com/werk/15515[pass:q[#]15515^].

[#check_cert]
=== New check for certificates

The legacy [.guihint]#Check HTTP service# contained basic functionality for checking certificates and the new [.guihint]#Check HTTP web service# mentioned in the previous section improves it even further.
However, both have a few things in common:
First of all, they are just only applicable if a certificate is used at an HTTPS endpoint, and they also lack the option of a detailed examination of the certificates, for example for contained _Certificate Subject Alternative Names_ or the issuing authority.

We have implemented the resulting user requests with the new [.guihint]#Check certificates# (internal: `check_cert`).
All settings for the new check can also be found under [.guihint]#Setup > Services > HTTP, TCP, Email, ...# in the [.guihint]#Networking.# box. 

Further information can be found in the work link:https://checkmk.com/werk/15516[pass:q[#]15516^].

[#outlook_newapi]
=== Programming interfaces

After {CMK} version {v23} only the well-specified APIs for programming check plug-ins, special agents, graphing, etc. will be supported.
The changes concern the directory structure, recognition of plug-ins (_Discovery_ instead of _Registry_) and of course the functions and objects of the APIs themselves.
An overview of the biggest changes can be found at link:https://checkmk.com/werk/16259[Werk pass:q[#]16259^].

As the previous APIs are no longer supported from {CMK} {v24}, all plug-ins that use the older APIs must be migrated to the new APIs before the update to {v24}.

[#mk_sql]
=== Improved Microsoft SQL Server Monitoring

A new agent plugin is available for monitoring Microsoft SQL Server with {CMK} {v23}.
You can find it under [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules > Microsoft SQL Server (Linux, Windows)#.
This one is implemented in Rust and will replace the previous one written in VBS in the long term.
The new plugin runs under Linux and Windows on the x86/64 platform.
It also offers increased flexibility through local and remote monitoring under Windows and remote monitoring under Linux.
Of course, you can monitor an MS SQL database running locally under Linux using the TCP/IP interface.

The configurability has been significantly improved, so now you can choose which sections are to be checked and add your own SQL statements.
Furthermore, you can monitor databases on different hosts using a plugin.
To keep this clear, the piggyback mechanism can be used to assign databases to other hosts.
All configuration is done via a YAML file. The stable options are available via Bakery rules.
Other settings, which we reserve the right to modify, can be configured using the text editor.
Details can be found in the Werk link:https://checkmk.com/werk/15842[pass:q[#]15842^].

With the introduction of the new plugin, the deprecation of the previous plugin [.guihint]#Microsoft SQL Server (Windows)# starts.
In {CMK} {v23} you will only receive information about the use of an obsolete ruleset.
From {v24} it will no longer be possible to create new rules and with {v25} the previous plugin will probably be removed from {CMK}.
Further information can be found at link:https://checkmk.com/werk/15844[pass:q[#]15844^].

[#management_board]
=== Management Boards

The term _Management Board_ stands for separate plug-in cards or extended BIOS functionality (Baseboard Management Controller/BMC, Management Engine/ME, Lights Out Management/LOM) for monitoring and managing the hardware in addition to the installed operating system.

Up to {CMK} {v23}, management boards can be configured in two ways: As a property of a host or as a separate host.
As the configurability as a property of a host is very limited, this option will no longer be available in the future.
Support for Redfish compatible management boards will be added and improved during the lifecycle of {CMK} {v23}, initially as an optional MKP (link:https://checkmk.com/werk/16589[Werk pass:q[#]16589^]).
We explain additional background information and alternatives in the blog article link:https://checkmk.com/blog/monitoring-management-boards[Monitoring management boards^].


[#automation_login]
=== Authentication via GET parameter

Up to {CMK} {v22}, every xref:glossar#automation_user[automation user] could be logged in with a user name and password passed via GET parameter.
This option will be reduced from {CMK} {v23} and eventually removed completely (link:https://checkmk.com/werk/16223[Werk pass:q[#]16223^]).
In the medium term, you must therefore switch your scripts to authentication via HTTP headers.

First, {v23} makes the option of logging in via GET parameter configurable.
However, the global setting [.guihint]#Enable automation user authentication via HTTP parameters# will initially use [.guihint]#enabled# as the default.
In {CMK} {v24}, the default will then change to [.guihint]#disabled#.
Finally, the option of logging in via GET parameter will be completely removed with {CMK} {v25}.


[#ntopng56_deprecation]
=== ntopng 5.6 and older are no longer supported

{CMK} {v23} will be the last version to support xref:ntop#[ntopng] in versions 5.x _and_ 6.x (link:https://checkmk.com/werk/16483[Werk pass:q[#]16483^]).
With {CMK} {v24}, support for ntopng 5.x will be discontinued and only ntopng 6.x will be supported.
Therefore, update your ntopng installations to 6.x during the lifecycle of {CMK} {v23}.
