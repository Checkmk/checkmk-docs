// -*- coding: utf-8 -*-
// IGNORE 
// NONASCII âœ”
include::global_attr.adoc[]
= Installation as a Docker container
:revdate: 2025-08-18
:title: Installation as a Docker container
:description: Installing {CMK} in a Docker container is very easy with the official image. The relevant options are described in more detail here.

{related-start}
xref:intro_setup#[Setting up {CMK}]
{related-end}


== The basics

Docker allows you to install {CMK} within a lightweight, self-contained container environment.
In this article, we will guide you through the setting up of {CMK} in Docker, and show you some tricks that can make life with {CMK} in Docker easier.

[TIP]
====
{CMK} provides official Docker images, but has no control over the characteristics of the host system on which you set up the corresponding containers.
The known advantages and disadvantages of container environments apply here.
In special cases, unexpected performance issues may arise, for example if the host system's kernel is significantly newer or older than the kernel expected by the {CMK} installation in the container.
In such cases, additional `sysctl` settings may be necessary.
====


[#prerequisites]
== Prerequisites    

To execute the commands presented in this article, you will need a working installation of link:https://docs.docker.com/engine/install/[Docker Engine^] and have a basic understanding of how to use it.  


[#acquire_cmk_docker_image]
== Obtaining a {CMK} image

To make it as easy as possible for you to use as a container, we provide separate images for each {CMK} xref:glossar#edition[edition]:

[#image_sources]
[cols="25,~"]
|===
|{CRE} |link:https://hub.docker.com/r/checkmk/check-mk-raw/[Docker Hub^], link:https://checkmk.com/download?platform=docker&edition=cre&version=stable[{CMK} download page^]
|Commercial editions |link:https://checkmk.com/download?platform=docker&edition=cce&version=stable[{CMK} download page^], link:https://portal.checkmk.com/[{CMK} customer portal^]
|===

When one of these images is started for the first time, not only is the appropriate container executed, but a monitoring site named `cmk` will also be set up and started.
This site will immediately be ready for a login with the user `cmkadmin`.


[#install_cre]
=== Images for {RE}

{cre-only}
For {RE}, you can obtain the desired Docker image directly from Docker Hub.
If you have an Internet connection, the Docker Engine automatically searches Docker Hub for the image name you specify to create a container.
You can jump directly to the section xref:container_start[Starting a {CMK} container].

Alternatively, download the image yourself from Docker Hub or from the link:https://checkmk.com/download?platform=docker&edition=cre&version={current}[{CMK} download page^] and store it on the system where you want to start a {RE} container.
Use `docker load -i check-mk-*.tar.gz` to make the image file available for the Docker Engine on your Docker node:

[{shell}]
----
{c-root} docker load -i check-mk-*.tar.gz 
346f14bf17b9: Loading layer [==================================================>]  80.41MB/80.41MB
87334b162001: Loading layer [==================================================>]  2.048kB/2.048kB
4c6fcf6a2c87: Loading layer [==================================================>]  335.7MB/335.7MB
1ba0c3ef2749: Loading layer [==================================================>]  279.7MB/279.7MB
bebf82ffc112: Loading layer [==================================================>]  1.291GB/1.291GB
88b55249828a: Loading layer [==================================================>]  7.168kB/7.168kB
Loaded image: checkmk/check-mk-raw:{current}
----


[#install_cee]
=== Images for the commercial editions

{cce-only}
The images for commercial editions are not freely available in Docker Hub.
You can either download the desired image manually and store it on your Docker node, or you can have the Docker engine itself download the image from the designated {CMK} Docker registry.

To download manually, find the edition and version you want at the link:https://checkmk.com/download?platform=docker&edition=cce&version=stable[{CMK} download page^] or at the link:https://portal.checkmk.com/[{CMK} customer portal^].
After downloading, use `docker load -i` as described in the xref:install_cre[Images for {RE}] section.

To have the image downloaded from the Docker Engine, first log in to the {CMK} Docker registry with your customer portal login.
To log in, use Docker's credential store or the following command:

[{shell}]
----
{c-root} docker login registry.checkmk.com --username myusername
Password: 
Login Succeeded
----

After successfully logging in, the Docker Engine can access the image for the desired version via the registry.
To do this, specify the full path to the desired image when starting the container.
The Docker Engine then checks whether the image is already available locally and, if not, downloads it automatically.

For version {current} of {SE}, for example, specify the full path for the image as follows when starting the container:
`registry.checkmk.com/enterprise/check-mk-enterprise:{current}`

For the corresponding versions of {CE} or {ME}, replace all occurrences of `enterprise` in this path with `cloud` or `managed`, respectively.


[#container_start]
== Starting a {CMK} container

You can start {CMK} images either xref:docker-compose[with `docker compose` and a compose file] or xref:docker_container_run[with `docker container run`, specifying a set of parameters].
Which option you choose depends on your specific usage case.


[#docker-compose]
=== Starting with `docker compose`

The following example shows the variant using `docker compose`, with which only a little setup effort makes it possible to start additional containers in parallel.

In the `compose.yaml` file, you use parameters to describe the desired properties for the Docker container to be started.
Several containers can also be described here, which are then started together.

The following example of a suitable `compose.yaml` file shows the parameters for starting a single {CMK} container.
The parameters contained and their values are explained below.

.compose.yaml
[{yaml},subs="attributes+"]
----
services:
  checkmk:
    image: "checkmk/check-mk-raw:{current-major}-latest"
    container_name: "monitoring"
    environment:
      - CMK_PASSWORD=mypassword
      - TZ=Europe/Berlin
    volumes:
      - monitoring:/omd/sites
    tmpfs:
      - /opt/omd/sites/cmk/tmp:uid=1000,gid=1000
    ports:
      - 8080:5000
      - 8000:8000
    restart: always

volumes:
  monitoring:
----

More information about the options used:

[#container_options]
[cols="40,~",options="header"]
|===
|Option |Description

| `checkmk:` | Self-defined descriptive name for the Docker service for which the {CMK} container is to be started.

| `image: "checkmk/check-mk-raw:{current-major}-latest"` | Name of the {CMK} image in the format `<repository>:<tag>`.
You can read the names using the command `docker images`.
If you obtain the image from the {CMK} Docker registry, the image must be specified with its full path.

| `container_name: "monitoring"` | Self-chosen descriptive name for the container.
This name must be unique and may not be used a second time on the Docker node.

l|environment:
  - CMK_PASSWORD=mypassword
  - TZ=Europe/Berlin | Use the environment variable `CMK_PASSWORD` to specify the password for logging in as the `cmkadmin` user in the {CMK} site.
  You can change this password at any time by running `cmk-passwd cmkadmin` as the OMD user within the container.

  {nbsp}

  `TZ` is the time zone you set for the container. If you omit this setting, the container (and thus your {CMK} site) will automatically use UTC until you change the setting in the container.

l|volumes:
  - monitoring:/omd/sites | This specification binds the site's data in this container to a persistent location in the file system of the Docker node.  
The volume named `monitoring` is mounted in the container in the path `/omd/sites`.  
Volumes are managed by the Docker Engine and can be viewed or modified with `docker volume`.  
If the container is removed, the data is not lost.

l|tmpfs:
  - /opt/omd/sites/cmk/tmp:uid=1000,gid=1000 | For optimal performance, you can use a temporary file system directly in the RAM of the Docker node.
With this option, you specify the path to this file system.
If you change the ID of the site this path must also be updated accordingly.

l|ports:
  - 8080:5000
  - 8000:8000 | The container's web server listens on port 5000 by default.
In this example, port 8080 of the Docker node is bound to port 5000 of the container so that its web interface is accessible from the outside.
If you do not have another container or process that uses the standard HTTP port 80, you can also bind the container to it.
In this case, the option would look like this: `80:5000`.
The use of HTTPS is explained in the section xref:https[HTTPS].
In addition, you must publish the port of the Agent Receiver in order to perform the xref:agent_linux#registration[registration of the Agent Controller].

{nbsp}

For certain scenarios that go beyond the basic functionality of {CMK}, additional ports must be explicitly enabled.
This applies, for example, to xref:livestatus#network[access to Livestatus via TCP] in xref:glossar#distributed_monitoring[distributed monitoring] or the use of xref:ec#setup[Event Console] within a {CMK} container.
An overview of the relevant ports can be found in the xref:ports#cmk_incoming_host_outgoing[Ports] article.

| `restart: always` | Normally, a container does not restart when it is stopped.
This option ensures that it does restart automatically.
However, if you stop a container manually, it will only restart when the Docker daemon restarts or the container itself is restarted manually.

l|volumes:
  monitoring: | All volumes required within services appear here.
  In this case, this is only the `monitoring` volume.
|===

In addition to the `checkmk` service, in your `compose.yaml` file you can define additional services that are to be started in the same container group.

Once you have described everything as desired, you can create and start the containers.
To do this, run `docker compose up` in the directory where your `compose.yaml` file is located.
With `docker compose up -d` (for _detached_), the containers are started in the background.
`docker compose up` ensures that all containers and their associated volumes are created properly.

If you have not yet downloaded an image and stored it on your system, executing `docker compose up` will take a few minutes, as the specified image will be loaded from Docker Hub (only possible for {RE}) or from the {CMK} Docker registry at this point.
The output here is based on a scenario in which the image was prepared with `docker load -i`.

[{shell}]
----
{c-root} docker compose up
[+] Running 3/3
 [green]#âœ”# Network cmk_compose_default      Created                           0.0s 
 [green]#âœ”# Volume "cmk_compose_monitoring"  Created                           0.0s 
 [green]#âœ”# Container monitoring             Created                           0.0s 
Attaching to monitoring
monitoring  | pass:[###] CREATING SITE 'cmk'
monitoring  | Generating configuration for core (type nagios)...
monitoring  | Precompiling host checks...OK
monitoring  | Adding /opt/omd/sites/cmk/tmp to /etc/fstab.
monitoring  | Going to set TMPFS to off.
monitoring  | Updating core configuration...
monitoring  | Executing post-create script "01_create-sample-config.py"...OK
monitoring  | Executing post-create script "02_cmk-compute-api-spec"...OK
monitoring  | Executing post-create script "03_message-broker-certs"...OK
monitoring  | Adding /opt/omd/sites/cmk/tmp to /etc/fstab.
monitoring  | Going to set TMPFS to off.
monitoring  | Skipping Apache restart.
monitoring  | Created new site cmk with version {current}.cre.
monitoring  | 
monitoring  |   The site can be started with omd start cmk.
monitoring  |   The default web UI is available at \http://2403d4ed552d/cmk/
monitoring  | 
monitoring  |   The admin user for the web applications is cmkadmin with password: mypassword
monitoring  |   For command line administration of the site, log in with 'omd su cmk'.
monitoring  |   After logging in, you can change the password for cmkadmin with 'cmk-passwd cmkadmin'.
monitoring  | 
monitoring  | pass:[###] STARTING XINETD
monitoring  |  * Starting internet superserver xinetd
monitoring  |    ...done.
monitoring  | pass:[###] STARTING SITE
monitoring  | Starting agent-receiver...OK
monitoring  | Starting mkeventd...OK
monitoring  | Starting rrdcached...OK
monitoring  | Starting redis...OK
monitoring  | Starting npcd...OK
monitoring  | Starting automation-helper...OK
monitoring  | Starting ui-job-scheduler...OK
monitoring  | Starting nagios...OK
monitoring  | Starting apache...OK
monitoring  | Starting crontab...OK
monitoring  | pass:[###] STARTING CRON
monitoring  | pass:[###] CONTAINER STARTED
----

Stop running containers with `docker compose stop`.
To restart containers that have already been created, run `docker compose start`.  

View the output of the `monitoring` container with `docker container logs monitoring`.  
With `docker inspect monitoring` get detailed information about the container -- the volumes it includes, for example.  


[#docker_container_run]
=== Start with `docker container run`

As an alternative to running with `docker compose`, you can start the {CMK} image with `docker container run`.
To do this, pass the information from the `compose.yaml` file as parameters.

The following command creates the same container with the same properties as in the example just shown.
The output shown is based on a scenario in which the image has not yet been downloaded manually.

[{shell}]
----
{c-root} docker container run -dit \
          --name monitoring  \
          -e CMK_PASSWORD='mypassword' \
          -e TZ='Europe/Berlin' \
          -v monitoring:/omd/sites \
          --tmpfs /opt/omd/sites/cmk/tmp:uid=1000,gid=1000 \
          -p 8080:5000 \
          -p 8000:8000 \
          --restart always \
          checkmk/check-mk-raw:{current-major}-latest 
Unable to find image 'checkmk/check-mk-raw:{current-major}-latest' locally
{current-major}-latest: Pulling from checkmk/check-mk-raw
215ed5a63843: Pull complete 
942691e22878: Pull complete 
fafdf3fa2522: Pull complete 
1888d204a5e5: Pull complete 
c126aa904d34: Pull complete 
b469f01932b5: Pull complete 
Digest: sha256:bbabed3f4f5e88775f872bcf0f1df36660e13d0ebf613e4e6141f4c81e5c6354
Status: Downloaded newer image for checkmk/check-mk-raw:{current-major}-latest
c850572de41592afff9de610d1ef3faecb267bf4fbccf2a9d8dae92dec11aacb
----

Here the container is run in _detached_ mode (`-d`).
To view the output from the container, use `docker container logs monitoring`.
For detailed information about the container, use `docker inspect monitoring`.

[#short-lived_containers]
[TIP]
====
When starting with `docker container run`, you have the option of specifying from the outset that the container and its volumes should be automatically removed after stopping.
The persistent data storage is created by the parameter `-v monitoring:/omd/sites`.
If you omit this option, no persistent storage will be created.
====


[#managing_docker]
=== Additional setup options
The examples shown so far are for the simple setup of {CMK} containers.
Several additional options are available for special application scenarios.

[#https]
==== HTTPS  

You can also xref:omd_https#[secure your site's web interface via HTTPS] within a Docker container.
The common practice for this is to use a _reverse proxy_, which acts as the interface for HTTP(S) connections between the containers in your system and the outside world.
This proxy can ensure that only HTTPS connections are accepted or passed on to the {CMK} container.

If you use a reverse proxy, do not explicitly enable any ports when starting your {CMK} container.
Instead, all incoming and outgoing connections will then be handled exclusively via the reverse proxy.


==== Additional environment variables

The table shows all {CMK}-specific environment variables that you can use when starting the container to set up your container as desired.
To do this, specify the variable values in the compose file or in the parameter list when calling `docker container run` in the same form as the previously mentioned environment variables `CMK_PASSWORD` and `TZ`.

[cols="40,~"]
|===
| `CMK_SITE_ID` | Self-defined name of the {CMK} site to be created within the container, if you want to deviate from the default site name `cmk`.
| `CMK_LIVESTATUS_TCP` | Setting for using Livestatus via TCP.
If you select `on` as the value for this, the command xref:livestatus#network[`omd config set LIVESTATUS_TCP on`] is executed within the container for the site.
| `MAIL_RELAY_HOST` | Address of a mail relay server provided by you (e.g., `mailrelay.mydomain.com`) for sending {CMK} xref:glossar#notification[notifications].
Notifications are first forwarded by the site within the container to the mailserver specified here (SMTP relay server, smarthost without authentication) outside the container, from where they are then sent to the actual destination.
|===


[#login]
== Using {CMK} in the running container

Once all the necessary files have been loaded and the container has started, you should be able to access the {CMK} GUI via `\http://localhost:8080/cmk/check_mk/` or via the address of the Docker node:

image::login.png[alt="{CMK} login dialog.",width=60%]

You can now log in for the first time and xref:intro_gui#[try out {CMK}].

To access your site within the container via the command line, log in to the container as an site user.
In {CMK}, this user always has the same name as the site it manages.
Use the following command to open an interactive Bash session in the `monitoring` container and log in as user `cmk`:

[{shell}]
----
{c-root} docker container exec -it -u cmk monitoring bash
----


You can then pass your xref:cmk_commandline#[commands] to the site.


[#update]
== Update

How to update {CMK} in the Docker container is described in the article xref:update#updatedocker[Updates and Upgrades].


[#uninstall]
== Uninstallation

If you no longer need a container, you can remove it and, if necessary, delete its associated volumes.
The commands for this can be found in the following sections.


[#uninstall_docker_compose]
=== Uninstalling with `docker compose`

To remove a container, run `docker compose down` (with the container running) or `docker compose rm` (with the container stopped).

[{shell}]
----
{c-root} docker compose down
[+] Running 2/2
 [green]#âœ”# Container monitoring         Removed                    6.3s 
 [green]#âœ”# Network cmk_compose_default  Removed                    0.1s 
----

If you add the `-v` option, the associated volumes on the Docker node will also be removed along with the container.


[#uninstall_docker_container]
=== Uninstalling after starting with `docker container run`

You can stop a container named `monitoring` that was started with `docker container run` using `docker container stop monitoring`. You can then remove the container using `docker rm monitoring`. You can delete a volume named `monitoring` that you no longer need after removing its associated container using `docker volume rm monitoring`.


[#remove_cmk_image]
=== Deleting the {CMK} image

If you no longer wish to use the selected {CMK} image, you can remove it with `docker rmi myimageid`.
The command `docker images` lists all existing images.
Identify the image you want to delete and add the corresponding image ID to your call to `docker rmi`.