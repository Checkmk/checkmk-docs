// -*- coding: utf-8 -*-
// IGNORE lt
include::global_attr.adoc[]
= Sending metrics to InfluxDB and Graphite
:revdate: 2024-01-22
:title: Sending metrics to InfluxDB and Graphite - via InfluxDB v2 API or Carbon plaintext protocol
:description: Metrics stored in {CMK} can be sent to InfluxDB and Graphite metric databases for further processing.

{related-start}
xref:graphing#[Measured values and graphing]
xref:grafana#[Integrating {CMK} in Grafana]
{related-end}


[#intro]
== Introduction

xref:glossar#metric[Metrics] are the measurable and computable values relating to hosts and services and these are stored internally by {CMK} in the so-called xref:graphing#rrds[Round-Robin Databases (RRDs)].
These metrics are processed by the built-in graphing system and visualized in the {CMK} web interface in many places, for example as Perf-o-meters in the list of services or as graphs that you can display from the service list using the icon:icon_pnp[alt="Icon to display graphs."] graph icon.
The interface for visualizing the metrics is based on HTML5 and is identical in the commercial editions and {RE}.
See the xref:graphing#[Graphing] article for full details on this subject.

{cee-only}
In parallel to the graphing built into {CMK}, you can additionally connect to external metrics databases and send the metrics to link:https://influxdata.com/[InfluxDB^] or link:https://graphiteapp.org/[Graphite^].
Since the forwarding is done by the {CMK} Micro Core (CMC), this feature is only available in the commercial editions.

In this article you will learn how to set up the forwarding of metrics to InfluxDB and Graphite in {CMK}.


[#influxdb]
== Sending metrics to InfluxDB

[{image-left}]
image::influxdb-logo.png[alt="InfluxDB logo.",width=120]
InfluxDB is an open-source database management system (DBMS) for time series -- and is currently the most popular solution in this segment.
Starting with its V2.0, InfluxDB provides a new unified API -- the InfluxDB v2 API -- that can be used to write metrics data to the database, among other functions.
{CMK} uses the InfluxDB v2 API and provides you with the ability to not only send the metrics from {CMK} to InfluxDB, but also store them appropriately in InfluxDB's existing structure.
By using the API, on the one hand the configuration for sending the metrics data is simplified and on the other hand {CMK} is prepared for future extensions.

*Important:* The configuration described in this chapter only applies to the connection of an InfluxDB V2.0 (or later), as the InfluxDB v2 API is only available from this version onwards.
If you are using an InfluxDB +<=+ V1.8, then set it up as described in the xref:graphite[chapter] on Graphite connection instead, since InfluxDB supports the carbon protocol in link:https://docs.influxdata.com/influxdb/v1.8/supported_protocols/graphite/[Graphite^] up to V1.8.


[#influxdb_collect]
=== Gathering information

Before you get started with the setup in {CMK}, you should get the following information for the InfluxDB target system you want to connect to {CMK}:

[cols="30,~",options="header"]
|===
|Parameter |Description
|Host name |Name (or IP address) of the InfluxDB server.
Entering the DNS name is especially important if the connection is encrypted over HTTPS, since certificates are almost never issued for IP addresses.
|Port number |Number of the TCP port through which the InfluxDB server can be reached.
The default port is `8086`.
When starting with `influxd` another port can be specified with the `--http-bind-address` option.
|Protocol |`HTTP` for unencrypted connections or `HTTPS` to secure the connection.
|Organization |In InfluxDB the _organization_ is the workspace for multiple users.
The initial organization is requested during InfluxDB setup.
Additional organizations can be created manually via the InfluxDB GUI.
|Buckets |InfluxDB stores time series data in containers, called _buckets_.
In particular, a retention period is defined for each bucket.
InfluxDB automatically deletes all data points older than this period. +
A bucket always belongs to an organization.
The initial bucket is defined together with the organization during InfluxDB setup.
Additional buckets can be created manually.
|Token |Communication between {CMK} and InfluxDB is done via the InfluxDB v2 API.
InfluxDB uses API tokens to authorize requests via API.
An API token belongs to a specific user and identifies InfluxDB permissions within the user's organization.
Tokens are created through the InfluxDB GUI, either with full read and write access to all resources within an organization (_All Access Token_) or with selected access rights to specific buckets within an organization (_Read/Write Token_).
A token can be copied to the clipboard, making it easier to paste later during {CMK} configuration.
The token used to connect to the {CMK} server should of course have read and write permissions for the bucket being configured in {CMK}. 
|===

For more details, see the link:https://docs.influxdata.com/influxdb/latest/[InfluxDB documentation^].

With this information at hand, the configuration in {CMK} is accomplished with only two straightforward operations.


[#influxdb_connection]
=== Connecting {CMK} to InfluxDB

Open the xref:user_interface#setup_menu[Setup menu] and activate the xref:intro_gui#show_less_more[Show more mode] -- because only then will the [.guihint]#Setup > Exporter > InfluxDB connections# menu item be displayed.
Select this to display the list of existing InfluxDB connections.
Since you probably haven't configured anything here yet, this list will be empty.

A connection is a prerequisite for sending the data.
However, without the xref:influxdb_metrics[rule to select metrics information], no data will be sent.

So first create a new connection with icon:icon_new[alt="Icon to create a new connection."] [.guihint]#Add connection#:

.ID, title and site selection are enough for the general properties 
image::metrics_exporter_influxdb_new_connection_general_properties.png[alt="The general properties of an InfluxDB connection."]

In the [.guihint]#General properties#, you specify the internal ID and title for the connection, as usual.

If there are other sites connected to the current site, as is the case with a xref:distributed_monitoring#[distributed monitoring], you can restrict the connection to specific sites under [guihint]#Site restriction#.
To do this, first move the [.guihint]#All sites# entry to the left column and then move the sites that should receive metrics from the left to the right [guihint]#Selected# column. The sites that will not receive metrics then remain in the left column.

We then continue in the next box with the [.guihint]#InfluxDB Connection properties:#

.Setting the InfluxDB-specific properties
image::metrics_exporter_influxdb_new_connection_influxdb_properties.png[alt="Setting the InfluxDB-specific connection properties."]

Here enter the first set of parameter values you compiled in the xref:influxdb_collect[previous section].

Save the connection with [.guihint]#Save# and you will return to the list of connections:

[#influxdb_connection_list]
.Active, inactive, with or without rule? The connection list shows the configuration
image::metrics_exporter_influxdb_connection_list.png[alt="List of InfluxDB connections."]

In the connection list, the [.guihint]#Enabled# column shows important information about the state of the connection.
Don't be surprised to see three entries in the list in the above screenshot:
To be able to see all of the symbols in action, we have added two more connections to the list.
From the first column in [.guihint]#Enabled# you can see whether the connection is icon:icon_perm_yes[alt="Icon showing an active connection."] enabled, or is icon:icon_perm_no[alt="Icon showing a disabled connection."] disabled.
In the second column you can see whether there is already a rule for icon:button_rulesets_enabled[alt="Button to display the list of rules in the ruleset."] the connection, or icon:button_rulesets_disabled[alt="Button to create a new rule."] not.

No data will be sent over a connection until it has been associated with a rule that selects the metrics information.
This rule is called [guihint]#Send metrics to InfluxDB#.
The rule icons are buttons and provide a shortcut to rule creation.
For a connection with a rule, click icon:button_rulesets_enabled[alt="Button to display the list of rules in the ruleset."] to open the rule set overview page, which highlights which rule takes or would take effect for the connection.
For a connection without rules, clicking icon:button_rulesets_disabled[alt="Button to create a new rule."] takes you directly to the rule creation page.

In the following chapter we will describe in detail what can be specified in this rule.


[#influxdb_metrics]
=== Selecting metrics information

With a rule you determine in {CMK} which data is sent to the InfluxDB server and where it is stored.

The [ guihint]#Send metrics to InfluxDB# rule set can be found in [guihint]#Setup > Services > Service monitoring rules#, can be accessed more quickly with the xref:user_interface#search_setup[search in Setup menu], and quickest by clicking in the xref:influxdb_connection_list[connection list]:

.Selection of metrics information is done by rule
image::metrics_exporter_influxdb_send_metrics_rule.png[alt="Rule to select metrics information to send via InfluxDB connection."]

In the [guihint]#Send metrics to InfluxDB# box, first select the connection created in the xref:influxdb_connection[previous section] and then specify where the data will be stored on the InfluxDB server.
Here, enter the second set of xref:influxdb_collect[collected information] for the InfluxDB server.
Use [guihint]#Organization# to decide which users receive the data, and [guihint]#Bucket# to decide how long the metrics are kept.
Multiple selection is not possible, i.e. you cannot send the metrics to multiple buckets for use by different organizations, for example.

Below you select the metrics data that will be sent from {CMK} to the InfluxDB server.
[guihint]#Metrics of service# is already selected by default and enables the sending of metrics.
Checking the [guihint]#Service state# checkbox will send the xref:monitoring_basics#services[service state] as its own metric.

After enabling [guihint]#Additional values per metric# you can add a number of meta-data to the metrics for display purposes, e.g. the [guihint]#State of  service# and the [guihint]#Thresholds#.
Note here that [guihint]#Unit# currently only works for metrics from xref:glossar#active_check[active checks] if these support it. 
The reason is that only active checks have an option to supply the unit and the CMC has no access to others.

In the last selection menu, [guihint]#Tags to use#, meta data such as xref:glossar#host_tag[host tags] or xref:glossar#label[labels] are added to the metrics, which are mainly used for filtering and have been optimized for this purpose.
The [guihint]#Host name# and [guihint]#Service name# selected by default are mandatory entries that cannot be deselected.

In InfluxDB, the [guihint]#Additional values per metric# are stored as _fields_ and the [guihint]#Tags to use# are stored as _tags_.

Finally, xref:glossar#activate_changes[activate the changes] to create the connection and create the rule(s).
In the event of problems with the transmission of metrics, see the xref:diagnosis[information on diagnosing errors] below.


[#influxdb_display]
=== Displaying metrics in InfluxDB

Once the metrics from {CMK} have arrived at the InfluxDB server, they can be displayed in the InfluxDB GUI.
As an example, the following image shows the graph for the `total_used` metric, which shows the amount of memory used:

.In the InfluxDB GUI, below the graph there are lists for selection and filtering
image::metrics_exporter_influxdb_show_metric.png[alt="Display of the used memory metric in the InfluxDB GUI."]

*Note:* This metric can be found in {CMK} at the [guihint]#Memory# service under the metric named [guihint]#Total used memory.#


[#graphite]
== Sending metrics to Graphite

[{image-left}]
image::graphite-logo.png[alt="Graphite-Logo.",width=120]
Graphite is also a well-known open-source time series DBMS for storing, retrieving, sharing and visualizing metrics.
Graphite consists of the Carbon daemon, which waits for the data and stores it in a database, from where it is processed and displayed as graphs using the Graphite web application.
You can use {CMK} to forward the metrics in the plaintext protocol to Graphite's Carbon daemon, which waits for data from this protocol on port 2003.
In the plaintext protocol, a record is very simply structured in the format `<metricpath> <value> <timestamp>`, where `<metricpath>` is a unique identifier separated by periods.

Unlike the xref:influxdb[InfluxDB connection], by default *all* metric data is sent as soon as a graphite connection has been enabled.
If you don't want this, you should select the metrics by rule *before* enabling the connection, and then enable both the rules and the connection together.


[#graphite_metrics]
=== Selecting metrics information

In {CMK} under [guihint]#Setup > Services > Service monitoring rules# you will find the two rule sets [guihint]#Send host metrics to Graphite# and [guihint]#Send service metrics to Graphite#.
The configuration is carried out in the same way for host and service metrics.
We show the configuration for service metrics here.
You then set up the host metrics in the same way.

You can use the [guihint]#Send service metrics to Graphite# rule to select the values to be sent with the metrics:

.Likewise with Graphite the selection of the metrics information is done by rule
image::metrics_exporter_graphite_rule.png[alt="Rule for selecting the service metrics to send over the Graphite connection."]

Secondly, you can restrict sending to certain hosts and services in the [guihint]#Conditions# box.
Since without a restrictive rule all data will be sent, it is recommended to first create a rule that disables sending globally by unchecking all of the check boxes shown in the above screenshot.
Next, create a specific rule with the desired metric information for the hosts and services whose metrics should be sent to the Graphite server.
Sequence the specific rule before the global rule:

.By placing the two rules in this sequence, only service metrics from the host `myhost` will be sent
image::metrics_exporter_graphite_rule_list.png[alt="List of rules for sending over the Graphite connection."]


[#graphite_connection]
=== Connecting {CMK} with Graphite

You set up the connection to the Graphite server under [.guihint]#Setup > General > Global Settings > Monitoring Core > Send metrics to Graphite#. Click there on [.guihint]#Add new Graphite connection:#

.The Graphite connection will be created in the [.guihint]#Global Settings#
image::metrics_exporter_graphite_new_connection.png[alt="The properties for a Graphite connection."]

In addition to the obvious Graphite server details (the port name and number for the Carbon plaintext protocol), you can also use [.guihint]#Optional variable prefix# to configure a prefix to be added to each host name, e.g. to enforce unique names.
{CMK} sets the metric path for the plaintext protocol to `<host>.<service>.<metric>`.

An xref:glossar#activate_changes[activate changes] for the rules and connection completes the configuration for Graphite.


[#graphite_display]
=== Displaying metrics in Graphite

In the Graphite GUI you can also view the metrics received from {CMK}.
The following image shows the graph for the `total_used` metric that we have already shown xref:influxdb_display[above] as an example in the InfluxDB GUI: 

.In the Graphite GUI the selection is made in a navigation panel to the left of the graph
image::metrics_exporter_graphite_show_metric.png[alt="Displaying the metric for memory used in the Graphite GUI."]


[#diagnosis]
== Error diagnosis

If the metrics do not arrive where you expect them to, you can find the diagnostic information from your site in the `~/var/log/cmc.log` file -- the xref:cmc_files#[{CMK} Micro Core's log file].

The following example shows the messages if the bucket configured in {CMK} does not exist on the InfluxDB server:

.~/var/log/cmc.log
[{file}]
----
2022-01-10 11:41:35 [5] [influxdb https://myinfluxdb.example.com:8086] Successfully initiated connection
2022-01-10 11:41:36 [5] [influxdb https://myinfluxdb.example.com:8086] Successfully connected
2022-01-10 11:41:36 [3] [influxdb https://myinfluxdb.example.com:8086] POST [404] {"code": "not found", "message": "bucket \"my_bucket\" not found"}
2022-01-10 11:41:36 [5] [influxdb https://myinfluxdb.example.com:8086] Closing connection
----

The following example shows the messages received when a connection to the Graphite server fails:

.~/var/log/cmc.log
[{file}]
----
2021-12-15 17:33:33 [5] [carbon 10.0.0.5:2003] Successfully initiated connection
2021-12-15 17:33:33 [4] [carbon 10.0.0.5:2003] Connection failed: Connection refused
2021-12-15 17:33:33 [5] [carbon 10.0.0.5:2003] Closing connection
----

The {CMK} Micro Core keeps trying to connect on its own in such situations. 

*Important:* For performance reasons metrics that are generated during a time when there is no connection to the target system are _not_ cached, but are lost (or are then only available in the {CMK} RRDs).

*Note:* If the log messages are not meaningful enough for you, you can change the default values for the log level under [.guihint]#Setup > General > Global Settings > Monitoring Core > Logging of the core#. Here you can find entries for the logging of InfluxDB ([.guihint]#InfluxDB processing#) and for Graphite ([.guihint]#Carbon connections#).

