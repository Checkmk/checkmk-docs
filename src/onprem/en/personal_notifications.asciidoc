// -*- coding: utf-8 -*-
// IGNORE 
// NONASCII 
include::global_attr.adoc[]
= Personal notification rules
:revdate: draft
:title: Personal notification rules
:description: Notifications can not only be configured centrally, but also customized individually. Find out more about personal notifications here.

{related-start}
xref:notifications#[Notification basics]
xref:notification_rules#[Setting up notifications by rules]
xref:basics_ackn#[Acknowledging problems]
xref:commands#[Commands]
xref:wato_user#[Users, roles and permissions]
{related-end}


// delete from here
[TIP]
====
This article is incomplete as it is currently being revised for publication.
Please be patient. Thank you! +
By the way, the https://docs.checkmk.com/master/de/personal_notifications.html[German version] of this article has already been updated -- if that is an alternative for you.
====
// delete to here


[#intro]
== Introduction

A useful feature in {CMK}’s notification system is the one with which users -- even without administrator rights -- can customize notifications.
Users can:

* Add notifications they would not otherwise receive (‘subscribe’)
* Delete notifications they would otherwise receive (if not restricted)
* Customize notification parameters
* Completely disable their notifications altogether


== Controlling notifications with personal rules

The entry point from the user's point of view is the xref:user_interface#user_menu[User menu], and there the entry [.guihint]#Notification rules#.
On the [.guihint]#Your personal notification rules# page, a new rule can be created with [.guihint]#Add rule#.

The content of personal notification rules is similar to that of xref:notification_rules#[global notification rules] -- with one difference: they do not contain a contact selection.
The user himself is automatically selected as the contact.
This means that a user can only add or delete notifications for himself.

However, the user can only delete notifications if the [.guihint]#Allow users to deactivate this notification# option is activated in the (global) rule that creates them:

image::personal_notifications_rule_settings.png[alt="Rule with the option to enable disabling of notifications by users."]

In the order of notification rules, the personal rules always come _after_ the global rules and so can adjust the notification table that has been generated so far.
So, except for the deletion blocking just described, the global rules always apply as the default setting that can be customized by the user.

[TIP]
====
Changes to notification rules do *not* require activation of the changes,
rather they take effect immediately.
====


[#notification_rule]
=== Structure of the notification rules

In the following, we present the general structure of the personal notification rules with the definitions of general properties, notification method and conditions.


==== General properties

As with all rules in {CMK}, here you can include a description and a commentary for the rule, or even temporarily deactivate the rule.

image::personal_notifications_rule_part1.png[alt="General properties of a personal notification rule."]


[#notification_method]
==== Notification method

The notification method specifies the technique to be used for sending the notification., e.g. with HTML email.

image::notifications_rule_part2.png[alt="Rule with notification method options."]

Each method is realized using a script.
ifdef::onprem[]
{CMK} includes a number of xref:notifications#includedscripts[scripts].
You can also quite easily write your xref:notifications#scripts[custom scripts] in any desired programming language in order to implement special notifications -- for example, to redirect a notification to your own ticket system.
endif::[]
ifdef::saas[]
{CMK} includes a number of xref:notifications#scripts[scripts].
endif::[]

A method can include parameters -- such as allowing the method that sends ASCII and HTML emails to explicitly set the sender’s address (`From:`) for example.

Before making settings directly in the notification rule, one should know that parameters for the notification methods can also be specified via xref:wato_rules#[rules] for hosts and services:
Under [.guihint]#Setup > Services > Service monitoring rules#, in the [.guihint]#Notifications# section, you will find a rule set for each notification method, which you can use to define the same settings -- and as usual, can be dependent on the host or service.

Parameter definitions in notification rules enable these settings to be varied in individual cases.
So you can, for example, define a global subject for your email, but also define an alternative subject with an individual notification rule.

Instead of parameters you can also select [.guihint]#Cancel previous notifications# –
with which all of this method’s notifications from prior rules will be deleted.
For more on this, see the topic xref:cancel[deleting notifications].

[TIP]
====
For many notification methods for forwarding to other systems, you will find more detailed information in separate articles.
The list of articles can be found in the chapter on
ifdef::onprem[]
xref:notifications#includedscripts[notification scripts].
endif::[]
ifdef::saas[]
xref:notifications#scripts[notification scripts].
endif::[]
When using
ifdef::onprem[]
a ticket system, a messenger or an event engine
endif::[]
ifdef::saas[]
a ticket system or a messenger
endif::[]
as notification method, you should also observe the notes on these xref:notification_rules#ticketsystem[special cases].
====


[#rule_conditions]
==== Conditions

Conditions determine when a rule will be used. For comprehension it is important to remember that the source is always a monitoring event on a concrete host or service.

The conditions address

* the object's static attributes – e.g., whether the service name contains the `/tmp` text  or whether a host is in a specific xref:glossar#host_group[host group],
* with the current state or the change of the state, e.g. whether the service has just changed from {OK} to {CRIT},
* or with completely different things, e.g., whether the 'working time' xref:glossar#time_period[time period] is currently active.

There are two important points to consider when setting the conditions:

. If no conditions have been defined the rule will take effect for *every* monitoring event.
. As soon as you select even a single condition, the rule takes effect only if *all* conditions are met.
All selected conditions are linked with AND.
There is only one exception to this important rule, which we will discuss later and not consider now.

This means that you should pay very close attention to whether the conditions you have chosen can be met at the same time so that a notification is triggered for the desired case. 

Let's say you want a notification to be triggered when a monitoring event occurs for a service starting with the name `NTP` on a host in the [.guihint]#Main# folder:

image::notifications_rule_part4.png[alt="Rule containing the conditions for creating a notification."]

Suppose further that this condition is now *extended* by also notifying all state changes of a host to the {DOWN} state:

image::notifications_rule_part4_match_host_types.png[alt="Rule with extended conditions for creating a notification."]

The result of this notification rule with the three single conditions is that *never* a notification will occur, because no monitoring event will contain the state change of a host *and* the service name with `NTP`.

The following note is repeated in this User guide from time to time.
However, in connection with the configuration of your notifications, it should be emphasized again:
Show the xref:user_interface#inline_help[inline help] with [.guihint]#Help > Show inline help# to get details about the effect of the various conditions.
The following excerpt from the inline help for the [.guihint]#Match services# option illustrates the behavior very well:
"_Note: Host notifications will never match this rule, if this option is being used._"


[discrete]
==== The exception to the AND operation

Only if a monitoring event satisfies all configured conditions, the notification rule will apply. 
As mentioned above, there is one important exception to this general rule: for the [.guihint]#Match host event type# and [.guihint]#Match service event type# conditions:

image::notifications_rule_part4_match_event_types.png[alt="The conditions 'Match host event type' and 'Match service event type'."]

Should you select *only* [.guihint]#Match host event type#, the rule will match no single service event. 
Similarly, this applies to the selection of [.guihint]#Match service event type# and host events. 
Should you activate *both* conditions however, the rule will match if the event type is activated in *any* of the two checkbox lists.
In this exceptional case these conditions will thus not be linked with a logical AND, but rather with an OR.
In this way you can simply administer host and service notifications with a single rule.

A further tip regarding the [.guihint]#Match contacts# and [.guihint]#Match contact groups# conditions:

image::notifications_rule_part4_contacts.png[alt="The conditions 'Match contacts' and 'Match contact groups'."]

The condition checked here is whether the host/service in question has a certain contact assignment.
This can be used to implement functions such as "Host notifications in the contact group Linux should never be sent by SMS".
This has nothing to do with the contact selection described above.


[#cancel]
=== Deleting notifications by rules

As already mentioned in the selection of the notification method, you will also find the selection option [.guihint]#Cancel previous notifications#.
In order to be able to understand the functioning of such a rule, it is best to visualize the notification table.
// This block is new
// start translation
////
Nehmen wir an, einige Regeln zu einem konkreten Monitoring-Ereignis wurden bereits abgearbeitet.
Dadurch wurden für unseren Benutzer zwei Benachrichtigungen erzeugt, eine per E-Mail und eine per SMS.

Nun kommt die nächste Regel mit der Methode [.guihint]#SMS# und der Auswahl [.guihint]#Cancel previous notifications#.
Als Ergebnis dieser Regel wird die SMS-Benachrichtigung an unseren Benutzer entfernt.
Es wird also nur noch eine E-Mail erzeugt.
////
// end translation

Should a subsequent rule again define an SMS notification for Bruno, then this rule will have priority and the SMS will be added anew to the table.

To summarize:

* Rules can suppress (delete) specific notifications.
* Deletion rules must come after the rules that create the notifications.
* A deletion rule does not actually ‘delete’ a preceding rule, rather it suppresses the notifications that are generated by (possibly multiple) preceding rules.
* Subsequent rules can reinstate the previously suppressed notifications.


[#sync_html]
=== Synchronous delivery for HTML emails

You can select and configure the traceable delivery via SMTP for the notification method HTML email by entering the smarthost (with name and port number) and the access data and encryption method:

image::notification_rules_enable_sync_smtp.png[alt="Notification method with synchronous email delivery options."]

// This block is new
// start translation
////
Im Artikel zu den xref:notification_rules#sync_html[globalen Benachrichtigungsregeln] finden Sie genauere Informationen darüber, wie die erfolgreiche bzw. fehlgeschlagenen Zustellung in der {CMK}-Benutzeroberfläche und in Log-Dateien nachvollzogen werden kann.
////
// end translation



[#bulk]
== Bulk notifications

=== Overview

Everyone who works with monitoring has experienced an isolated problem setting off a veritable flood of (successive) notifications.
The principle of the xref:notifications#parents[parent hosts] is a way of reducing these under specific circumstances, but unfortunately it doesn’t help in all cases.

You can take an example from the {CMK} project itself:
Once each day we build {CMK} installation packages for every supported Linux distribution.
Our own {CMK} monitoring is set up so that we have a service that is then only {OK} if the right number of packages have been correctly constructed.
It can occasionally happen that a general error in the software hampers the packaging, causing 43 services to go into a {CRIT} state simultaneously.

We have configured the notifications in such a way that in such a case only a single email listing all 43 notifications in sequence will be sent.
This is naturally clearer than 43 single emails, and it also reduces the risk that ‘in the heat of the battle’ one misses a 44th email belonging to quite another problem.

The mode of operation of this _bulk notification_ is very simple.
When a notification occurs, at first it will be held back for a short time.
Subsequent notifications that occur during this time will be immediately added into the same email.
This collecting can be defined _for each rule_.
So, for example, during the day you can operate with individual emails, but overnight with a bulk notification.
If a bulk notification is activated you will generally be offered the following options:

image::notifications_bulk.png[alt="Notification method with bulk notification options."]

The waiting time can be configured as desired.
In many cases one minute suffices as by then at the latest all related problems should have appeared.
You can of course set a longer time,
but that will result in a fundamental delay to the notifications.

Since it naturally makes no sense to throw everything into a single pot, you can specify which groups of problems should be notified collectively.
The [.guihint]#Host# option is very commonly used -- this ensures that only notifications from the same host are bundled.

Here are a few additional facts about bulk notifications:

* If the bundling is activated in a rule, the activation can be deactivated by a subsequent rule – and vice versa.

* The bulk notification always takes place per contact.
Each contact has their own 'private collection pot' in effect.

* You can limit the size of the pot ([.guihint]#Maximum bulk size#).
Once the maximum is reached the bulk notification will immediately be sent.


=== Bulk notifications and time periods

What happens when a notification is within the notification period, but the bulk notification that contains this notification -- and which comes somewhat later -- is outside the notification period?
The reverse situation is also possible...

Here a very simple principle applies:
all configurations that restrict notifications to time periods are valid only *for the actual notification*.
The subsequent bulk notification will always be delivered *independently* of all time periods.


[#admin]
== Administrator settings

=== Temporarily disabling notifications

ifdef::onprem[]
The complete disabling of notifications by a user is protected with the xref:wato_user#roles[permission] [.guihint]#General Permissions > Disable all personal notifications#, which is set to `no` for the user role `user` by default.
A user will only see the corresponding checkboxes in his personal settings if you explicitly assign this right to the `user` role:

image::notifications_edit_profile_disable.png[alt="Personal setting to temporarily disable notifications."]

As an administrator with access to the user’s personal settings, you can carry out disablement actions on the user’s behalf -- even if the permission as described above is not present.
You can find this setting under [.guihint]#Setup > Users > Users# and then in the properties of the user profile.
endif::[]

ifdef::saas[]
As an administrator with access to the user’s personal settings, you can carry out disablement actions on the user’s behalf.
You can find this setting under [.guihint]#Setup > Users > Users# and then in the properties of the user profile as [.guihint]#Personal settings > Disable notifications#.
endif::[]

With this, for example, you can very quickly silence a holidaying colleague's notifications -- without needing to alter the actual configuration.


=== Preventing user-defined customizations

ifdef::onprem[]
If you want to prevent customization altogether, you can revoke the xref:wato_user#roles[permission] [.guihint]#General Permissions > Edit personal notification settings# of the `user` role.
endif::[]

As an administrator, you can display all user rules by selecting [.guihint]#Setup > Events > Notifications#, and then the [.guihint]#Display > Show user rules# menu entry:

image::notifications_show_user_roles.png[alt="List of user rules from an administrator's point of view."]

After the global rules, the personal rules are listed, which you can also edit with icon:icon_edit[alt="Icon for editing."].
