// *** coding: utf-8 **-
// IGNORE tbd
include::global_attr.adoc[]
= Overview of API resources
:revdate: 2024-11-12
:title: Overview of API resources
:description: {CMK} offers several APIs as well as related articles and references. Here you will find an overview and tips for navigation.

{related-start}
xref:devel_intro#[Developing extensions for {CMK}]
xref:rest_api#[The {CMK} REST API]
{related-end}


[#intro]
== Introduction

{CMK} now offers a whole host of diverse interfaces, above all the REST API, with which you can do a great deal of what is also possible via the web interface.
However, there are also APIs for xref:glossar#check_plugin[check plug-ins], the hardware/software inventory, the xref:glossar#agent_bakery[Agent Bakery] and so on.
There are articles, references and other resources for all of these interfaces, distributed throughout this User Guide, the website and {CMK} itself.

In this article, we will provide an overview of all interfaces and resources and give some tips on general handling.
Many links in this article are redundant, as the information is intended to serve three different approaches or questions: 

- Which APIs does {CMK} provide?
- Which API-relevant articles can be found in the User Guide?
- What API-relevant resources are available in {CMK}?

The most important interface is undoubtedly the xref:rest_api#[{CMK} REST API], which can be used to do almost everything from a programming perspective that can also be performed via the web interface.

[TIP]
====
The interactive REST API GUI offers a quick, practical introduction to the REST API.
Here you can send and, optionally, modify predefined queries.
You can find the GUI in {CMK} itself via [.guihint]#Help > Developer resources > REST API interactive GUI#.
====

[{image-border}]
.The REST API interactive web interface
image::restapi_swaggerui.png[alt="REST API GUI with example for creating a host."]

The second major interface is the _Plugin APIs_ for developing your own extensions.
Depending on your experience, you can start here with our xref:devel_intro#[introductory article] or the reference, which you can again find directly in {CMK} itself:
[.guihint]#Help > Developer resource > Plug-in API references#.

[{image-border}]
.Reference for the plug-in APIs including release notes for the Check API
image::devel_cpi_checkapi_doc.png[alt="Image of the API reference with release notes for the Check API."]

In the tables below you will find these APIs, but also less familiar interfaces, such as for the hardware/software inventory, sub-interfaces for check plug-in development, such as the explicit Graphing API, as well as _quasi-interfaces,_ such as the output format of xref:localchecks#[local checks], the simple, script-based precursor to full-blown plug-ins.


[#apis]
== APIs in {CMK}
[cols="12,18,25,~",options="header"]
|===
|API |User Guide |Web| Description

|REST API
|xref:rest_api#[The {CMK} REST API]
|link:https://checkmk.atlassian.net/wiki/spaces/KB/pages/9473812/REST-API+code+examples[REST API code examples^], link:https://checkmk.com/videos/en/ep-46-working-with-checkmk-rest-api[video tutorial^]
|Functionally a subset of the web interface.

|Check API
|xref:devel_check_plugins#[Developing agent-based check plug-ins]
|link:https://exchange.checkmk.com/[{CMK} Exchange (examples)^]
|Coding check plug-ins.

|Bakery API
|xref:bakery_api#[The Bakery API]
|In {CMK}: +
[.guihint]#Help > Developer resources > Plug-in API references > Bakery#
|Include check plug-ins in the agent bakery.

|Server-side calls API
|xref:devel_special_agents#[Developing special agents]
|In {CMK}: +
[.guihint]#Help > Developer resources > Plug-in API references > Server-side calls#
|Develop xref:glossar#active_check[active checks] and xref:glossar#special_agent[special agents].

|Graphing API
|xref:devel_check_plugins#metrics_advanced[Customizing the metric displays] in the agent-based check plug-in article
|In {CMK}: +
[.guihint]#Help > Developer resources > Plug-in API references > Graphing#
|Include xref:glossar#metric[metrics,] graphs, Perf-O-Meters.

|Rulesets API
|xref:devel_check_plugins#rule_set[Rule sets for check parameters] in the agent-based check plug-in article
|In {CMK}: +
[guihint]#Help > Developer resources > Plug-in API references > Rulesets#
|Develop your own xref:glossar#rule_set[rule sets].

|DCD API
|tbd
|In {CMK}: +
[guihint]#Help > Developer resources > Plug-in API references > Dynamic configuration connector#
|Custom connections for the dynamic host management with the Dynamic Configuration Daemon (DCD).

|HW/SW API
|xref:inventory#external[Web API for HW/SW inventory data]
|n.a.
|Web API for querying inventory data.

|Livestatus
|xref:livestatus#[Retrieving status data via Livestatus], xref:livestatus_references#[Livestatus command reference]
|n.a.
|Direct retrieval of status data via Livestatus Query Language (LQL).

|Event Console interface|
xref:ec#statusinterface[The status interface] of the Event Console
|n.a.
|Access to internal status and execution of commands via Unix socket.

|Local checks|
xref:localchecks#[Local checks]
|n.a.
|'Mini interface' for your own script-based checks.
|===


[#docs]
== Articles in the User Guide

[cols="12,28,~",options="header"]
|===
|API area |User Guide | Description 
.5+|Automation |xref:rest_api#[The Checkmk REST API] |Description of the REST API as well as its documentation and possible uses.
|xref:livestatus#[Retrieving status data via Livestatus] |An overview of the data interface for host and service information.
|xref:livestatus_references#[Livestatus command reference] |All tables, headers, filters and operators.
|xref:inventory#external[Web API for HW/SW inventory data] |Description of the inventory's own web API for external access.
|xref:ec#statusinterface[The status interface] of the Event Console |Data can be read from the Event Console and commands can be sent via Unix socket and a subset of the Livestatus protocol.
.3+|Programming |xref:devel_intro#[Developing extensions for {CMK}] |Overview article with all possibilities for extensions and links to further information.
|xref:devel_check_plugins#[Developing agent-based check plug-ins] |Detailed description of how to develop a check plug-in.
|xref:devel_check_plugins_snmp#[Developing SNMP-based check plug-ins] |Detailed description of the development of a check plug-in for SNMP data.
|===


[#resources]
== Resources in Checkmk

[cols="40,~",options="header"]
|===
|In {CMK} |Description
|[.guihint]#Help > Developer resources > Plug-in API references# |A Sphinx-based reference of all APIs that are relevant for the development of Check plug-ins.
|[.guihint]#Help > Developer resources > REST API documentation# |ReDoc/OpenAPI-based reference for all Check-relevant queries, including code examples for Requests (Python), Urllib (Python), httpie and curl.
|[.guihint]#Help > Developer resources > REST API interactive GUI# |Interactive web interface for testing all API endpoints, including feedback directly on the page.
|[.guihint]#Help > Developer resources > Plug-in API references > Agent based ("Check API")# |In the section [.guihint]#Version 2 > New in this version# you will find important information for the migration of old plug-ins to the current API version.
|===


[#web]
== Resources on the web

[cols="40,~",options="header"]
|===
|Resource |Description
|link:https://checkmk.com/videos/en/ep-46-working-with-checkmk-rest-api[Working with the {CMK} REST API^] |Video tutorial (in English) with practical examples for using the REST API, for example for setting scheduled downtimes.
|link:https://checkmk.atlassian.net/wiki/spaces/KB/pages/9473812/REST-API+code+examples[REST API code examples^] |Curl examples in the {CMK} Knowledge Base for concrete, e.g. AND-linked queries.
|link:https://exchange.checkmk.com/[{CMK} Exchange^] |In the {CMK} plug-in store you will find many practical implementations of the APIs including source code.
|===