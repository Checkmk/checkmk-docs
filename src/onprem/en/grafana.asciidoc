// -*- coding: utf-8 -*-
// IGNORE 
// NONASCII 
include::global_attr.adoc[]
= Integrating {CMK} in Grafana
:title: Integrating {CMK} in Grafana
:description: With the {CMK} plug-in for Grafana, you can visualize your monitoring data in Grafana dashboards. Read here how to set up and use the plug-in.

{related-start}
xref:monitoring_kubernetes#[Monitoring Kubernetes]
xref:monitoring_docker#[Monitoring Docker]
{related-end}


[#intro]
== Introduction

[{image-left}]
image::grafana_logo.png[width=168]

With its integrated xref:graphing#[graphing system], {CMK} has a powerful tool for recording and visualizing xref:glossar#metric[metrics].
Nevertheless, it can be useful to connect link:https://grafana.com/[Grafana^] as an external graphing system,
for example, when you already use Grafana and want to merge the data from {CMK} with data from other systems into shared dashboards.

In all currently maintained Grafana versions, it is possible to access {CMK} in all xref:glossar#edition[editions] directly as a data source.
This allows you to display individual metrics or even entire graphs that have already been predefined in {CMK}.
In addition, there is the option to dynamically create your own graphs by using xref:regexes#[regular expressions] to define a group of hosts and services from which specific metrics are to be included in the graph.

This article describes how to retrieve and display your {CMK} metrics in Grafana.
Detailed instructions on how to use and configure Grafana can be found in the link:https://grafana.com/docs/[documentation at Grafana Labs^].

The Grafana plug-in has been developed independently of {CMK} and is maintained in its own link:https://github.com/Checkmk/grafana-checkmk-datasource[GitHub repository^].
This article describes how to set up the plug-in in version 4, which works with {CMK} {v22} to {current-major}.
For exact details on which plug-in version links which versions of {CMK} and Grafana, refer to the link:https://github.com/Checkmk/grafana-checkmk-datasource/blob/main/README.md[Readme file in the GitHub repository^].
As the plug-in is installed in Grafana, it does not make sense to deliver it together with {CMK}.


[#installation]
== Installing the plug-in in Grafana

Depending on your Grafana server's installation type and your {CMK} edition, there are various methods for installing the plug-in.
The only restriction here is that users of the Grafana cloud offering must activate the plug-in xref:installation_marketplace[via the official Grafana plug-in collection].

For on-premises installations of Grafana, via the command line you can also activate the plug-in from the official Grafana plug-in collection.
You also have the option of installing from a zip archive.
This also allows you to test new versions if they have not yet been added to the official Grafana plug-in collection.

The installation methods presented here have been tested with Grafana 12.1.
With older versions, not all installation types may be available, or the procedure may differ.


[#installation_marketplace]
=== Installation from the Grafana GUI (Grafana Cloud and your own server)

For both Grafana Cloud and for deployment on your own server, you can install the {CMK} data source directly from the Grafana GUI.

Navigate to [.guihint]#Home > Connections > Add new connection# and then enter `{CMK}` in the search field.
You will then see a list of results with a single entry that will take you to the plug-in overview page.
Here you will once again see a detailed description of the {CMK} data source and can make it available in your Grafana instance by clicking [.guihint]#Install#.
The available options will now change, and you will have the option to click on the new [.guihint]#Add new data source# link to set up a xref:activate[connection to your {CMK} site].


[#installation_cli]
=== Installation via the command line (own Grafana server)

If you are running Grafana on your own server, you can install it from the Grafana plug-in collection via the command line.
The commands shown refer to Grafana on Linux.
Proceed in the same way on other platforms.

[{shell-raw}]
----
{c-root} grafana-cli plugins install checkmk-cloud-datasource
----

Restart the Grafana server service:

[{shell}]
----
{c-root} systemctl restart grafana-server
----

The plug-in will then be available in the Grafana interface and so can there be activated and set up.


[#installation_zip]
=== Installation from zip Archive (own Grafana Server)

At the link:https://github.com/Checkmk/grafana-checkmk-datasource/releases[Releases page of the GitHub repository^], you will find the signed zip archive `checkmk-cloud-datasource-X.Y.Z.zip`.
The naming scheme still refers to the former division of the plug-in into two parts (up to version 3.x of the plug-in), but with version 4.0, the restriction to {CE} has been removed and the signed plug-in can be used with all {CMK} editions.

If you have already used the Grafana plug-in with {RE} or {SE} in version 3.x, this means that to update to 4.x,
you must first uninstall the old `tribe-29-checkmk-datasource` plug-in:

image::grafana_download_plugin.png[]

Instead of using the browser, you can of course also load the file directly via the command line.
Note that you need to know the current version to do this â€“ in the following example, we write the version to the `$plugvers` variable.
Here too, the commands shown refer to Grafana on Linux.
Proceed in the same way on other platforms.

[{shell-raw}]
----
{c-root} plugvers='4.0.3'
{c-root} wget https://github.com/Checkmk/grafana-checkmk-datasource/releases/download/v${plugvers}/checkmk-cloud-datasource-${plugvers}.zip
----

Now unpack the zip archive:

[{shell}]
----
{c-root} unzip checkmk-cloud-datasource-${plugvers}.zip
----

Create a plug-in directory if it does not already exist, and make the Linux user under whose ID the Grafana processes are running (usually `grafana`) the directory's owner:

[{shell}]
----
{c-root} mkdir -p /var/lib/grafana/plugins
{c-root} chown grafana:grafana /var/lib/grafana/plugins
----

Move the resulting folder to the Grafana plug-in directory,
which is usually located at `/var/lib/grafana/plugins/`:

[{shell}]
----
{c-root} mv -v checkmk-cloud-datasource /var/lib/grafana/plugins/
----

Change the owner to the Grafana user:

[{shell}]
----
{c-root} chown -R grafana:grafana /var/lib/grafana/plugins/checkmk-cloud-datasource
----

Installation via cloning the Git archive (as described in earlier versions of this article) is no longer possible.
If you want to contribute to the plug-in, read the link:https://github.com/Checkmk/grafana-checkmk-datasource/blob/main/DEVELOPMENT.md[Notes for developers^].


[#create_user]
== Creating a Grafana user in {CMK}

The Grafana connection requires a user on the {CMK} side who has sufficient permissions and is also authenticated via an automation password (_automation secret_) instead of a password.
Normal guest or monitoring users are not sufficient, and for security reasons you should not use an administrator.

The easiest way to create a 'suitable' user is to clone the xref:wato_user#roles[role] of the guest user (`guest`) and provide it with the additional authorization [.guihint]#User management# (allow read access to user information).
If you base your Grafana user role on another role, make sure that the [.guihint]#See all host and services# authorization is set in addition to [.guihint]#User management#.

Once the role has been created, create one or more Grafana users with an automation password (_automation secret_).
You can further restrict the authorizations assigned to the role later, for example no access to xref:glossar#bi[BI] or the xref:glossar#ec[Event Console] is required.


[#activate]
== Setting up the plug-in

Once the necessary files have been installed, you can activate the plug-in in Grafana.
To do this, switch to the configuration and navigate to [.guihint]#Home > Connections > Data sources#.
Here you can add a new data source using the [.guihint]#Add data source# button.

This will take you to an overview of the available data sources.
You can find the entry for {CMK} at the bottom of the [.guihint]#Others# category or simply by entering `{CMK}` in the search field here as well.

The template for this data source is quite simple.
Enter the URL for your site, the type of your edition and the xref:create_user[user] you have just created for Grafana.

[TIP]
====
If you use {CMK} in a xref:glossar#distributed_monitoring[distributed environment], enter the URL to your central site here.
====

image::grafana_plugin_config.png[]

If you want to connect several {CMK} sites, you can optionally give each individual connection a unique name.
Otherwise, simply leave the default as `Checkmk` or `Checkmk for Cloud Edition`.

Once you have saved the connection with the [.guihint]#Save & test# button, it will be available to you as a data source in Grafana and you can configure your first graphs.


[#graphs]
== Creating graphs

[#emptydash]
=== Creating a blank dashboard

Under [.guihint]#Home > Dashboards# you will find a drop-down menu marked with a plus sign.
Click on [.guihint]#New dashboard# to create a new dashboard:

image::grafana_new_dashboard.png[]


[#singlemetric]
=== Displaying a single host metric

The simplest dashboard shows a single graph for a host's service. 
This can also be the metric from a xref:glossar#local_check[local check] for which no ready-made graphs exist.
Create a new visualization in an existing dashboard or the one you have just created.
First select [.guihint]#Add visualization# here:

image::grafana_dashboard_addpanel.png[]

Creating a visualization takes you to the selection of the data source.
After selecting [.guihint]#Checkmk#, you are directly in the editing mode of the _Query_ for the newly created panel.
A panel is a container for a visualization.

Access to the data to be visualized differs slightly between {CRE} and the commercial editions:
In {RE} you work with predefined menus -- for site, host name, service and so on.
In the commercial editions, you have the option of defining cascades of filters.
This allows a very detailed selection, also using regular expressions.
The following simple example has been chosen so that you can run through it with all editions.

First select the [.guihint]#Site#, then filter for a [.guihint]#Hostname# in the monitoring.
For the first test, use any host that uses the Windows or Linux agent.
Select [.guihint]#Check_MK# as the [.guihint]#Service#.
Set the type of [.guihint]#Aggregation# to [.guihint]#Maximum#.
The [.guihint]#Graph type# available for selection is [.guihint]#Single metric# or [.guihint]#Predefined graph#:
[.guihint]#Predefined graphs# take metrics from {CMK}, which can also contain combined graphs.
Our screenshots here show the [.guihint]#Single metric#, which contains the total execution time of the agent ([.guihint]#Time spent waiting for Checkmk agent#).

.Selection of metrics via filters in the commercial editions
image::grafana_dashboard_single_config.png[]

.Selection of metrics via predefined menus in {RE}
image::grafana_dashboard_single_config_cre.png[]

Grafana displays the result directly.
With the [.guihint]#Apply# button you can apply the graph without saving the dashboard.
With [.guihint]#Save# you are prompted to enter a title for the new [.guihint]#Dashboard# and can then save the newly created dashboard.

.New dashboard with a meaningful name
image::grafana_dashboard_single_view.png[]


[#predefined]
=== Displaying a predefined graph from {CMK}

The developers of {CMK} have already compiled many related metrics into common graphs to make it easier for users to get an overview of the various aspects of a single resource.
You can display the metrics from such a ready-made graph directly in Grafana.

The procedure is initially the same as explained in the previous section.
However, to complete the process select the [.guihint]#Graph type# entry [.guihint]#Predefined graph# and the [.guihint]#Predefined graph# for the service to be used.

If you receive an error message that the selection of combined metrics with more than 200 elements is not permitted, use additional filters to restrict the selection.
If in doubt, move the filters that will significantly limit the result to the front of the set.

image::grafana_dashboard_predefined_config.png[]

Once you are satisfied with your selection, click the [.guihint]#Apply# button.
The graph will now be available in the selected dashboard.

image::grafana_dashboard_predefined_view.png[]


[#complexgraphs]
=== Creating complex graphs

Especially in a dynamic cluster, you will often want to be able to track the entire progress of a metric across all participating hosts without having to customize a graph every time a new node is added or removed.
To achieve this, there are various options for dynamically adapting graphs.

The first option is to filter by [.guihint]#Host Labels# or [.guihint]#Host Tags# instead of selecting individual hosts.
Another option is to use xref:regexes#[regular expressions].
You can apply regular expressions to hosts or services.
In the following example, `pass:[filesystem]` matches all services that contain `filesystem` -- regardless of how many file systems a host has mounted.

image::grafana_dashboard_combined_config.png[]

With `pass:[filesystem.*nvme]` you would restrict the selection to all file systems on NVMe drives, no matter which file system type they use, since the part of the string between `filesystem` and `nvme` can be arbitrary.

In addition to the extended filter options, use [.guihint]#Aggregation# to determine the display of the metrics in the graph and [.guihint]#Graph# to determine which graph is to be used as a reference.
Note that metrics for a host/service are only displayed if it also has the selected graph.
A graph could then look like this, for example:

image::grafana_dashboard_combined_view.png[]


[#transform]
=== Renaming using regular expressions

In each panel's edit mode, you will find a [.guihint]#Transform# tab.
You can use the [.guihint]#Rename by regex# sub-item available here to reorder the names of metrics or suppress information that is not required.
Our following example searches for two groups of characters separated by a comma followed by a space, swaps them and explicitly places `Service` and `Host` at the front:

image::grafana_series_renaming_regex.png[]

The variables `$1` and `$2` correspond to the strings 'captured' in the line above (_match groups_ or _capture groups_).
Grafana also allows nested match groups.
The corresponding section in the article on  xref:regexes#matchgroups[regular expressions] provides an overview of the possibilities available for these.


[#variables]
== Making graphs more flexible using variables

You can use variables to flexibly add graphs to dashboards.
This allows you to determine the host of a specific metric via a drop-down selection or you can use variables to simultaneously add graphs for multiple hosts to a dashboard.
This article cannot and should not replace the link:https://grafana.com/docs/grafana/latest/dashboards/variables/[documentation for Grafana^].
First and foremost, here we want to provide an overview of the possible applications and an introduction to the topic.

Variables can be created from _queries_.
In this case, you can filter on sites, hosts or services.
Alternatively, there is also the option of defining _quantities_ or _free text fields_, which allows you to create any number of filters.


[#variable_create]
=== Creating variables

Each variable is a property of a dashboard.
It must be created in the dashboard settings and can then only be used within this dashboard.
As _query_ requires the most extensive configuration, we will show its use in our example.

The relevant properties for a variable are its type and its name; all other properties are only used for the purpose of clarity in the dashboard.
The name should differentiate between variables.
So if you plan to use several variables to select hosts from different subsets, use a name that references this set instead of `host` as in the example, for example `host_from_linuxservers`.

.Creation of the variable `host` in the dashboard properties
image::grafana_variable_name.png[]

When selecting a data source, make sure that a {CMK} connection is selected.
You can further restrict the selected object type, for example with regular expressions.
Any filters used are evaluated on the {CMK} server.
In contrast, the following fields [.guihint]#Regex# and [.guihint]#Sort# are evaluated by Grafana.

.Filters are used to define which values the variable can take on
image::grafana_variable_query.png[]

The two checkboxes for [.guihint]#Selection options# at the bottom of the page can be optionally used later depending on need.
You can modify these settings at any time if required; for the first test, leave both at the (empty) default setting.
Save the variables using [.guihint]#Save dashboard# when you have made all the settings.


[#variable_use]
=== Using variables for graphs

You can now enter the assigned variables in the appropriate fields to create a flexible graph.
The variables can also be used in the graph's title.

.Variable names are accessed, as in some shells, via the prefixed dollar sign
image::grafana_variable_use.png[]

A drop-down selection for each variable is displayed in the dashboard, which you can use to set the variable values (hosts, services...) which you want to display on the dashboard.
If you have activated multiple selection, you can set the [.guihint]#Repeat by variable# option in the panel settings to display the panel for each selected variable's value.

.Drop-down selection of the referenced hosts with the option of multiple selection
image::grafana_variable_panel.png[]


[#files]
== Files and directories

The following files and directories are relevant on a self-hosted Grafana server.
All information refers to Linux servers and installation from packages provided by Grafana.
Different file paths may apply for other operating systems or for installations from source code.

[cols="30,~",options="header"]
|===
|File path |Description
|`/var/lib/grafana/plugins/` |Here Grafana searches for (new) plug-ins. Each plug-in has its own subdirectory. The plug-in from {CMK} should therefore be placed here.
|`/etc/grafana/` |Grafana configuration directory.
|`/etc/grafana/grafana.ini` |Grafana's central configuration file. Here you define which unsigned plug-ins you allow.
|===
