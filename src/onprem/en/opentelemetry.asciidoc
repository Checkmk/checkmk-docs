// -*- coding: utf-8 -*-
// IGNORE OTel hellolevel p10 p3
include::global_attr.adoc[]
= Monitoring OpenTelemetry metrics
:revdate: draft
:title: Monitoring OpenTelemetry metrics
:description: {CMK} 2.4.0 introduces experimental support for displaying OpenTelemetry metrics in the monitoring.

{related-start}
xref:special_agents#[Special agents]
xref:dcd#[Dynamic host management]
{related-end}


include::include_technical_preview.asciidoc[]

[#intro]
== Introduction

{cee-only}
Starting with {CMK} {v24} you can receive link:https://opentelemetry.io/[OpenTelemetry^] metrics from {CCE} onwards, i.e. in {CE} and {ME}, and process them in the monitoring.
For this purpose, {CMK} comes with an OpenTelemetry collector.
This collector supports the _gRPC_ and _HTTP(S)_ transport protocols as recipients in a push configuration.
As a _scraper_, it can also collect data from Prometheus endpoints (in a pull configuration).

Based on any OpenTelemetry services identified, hosts can be created automatically with the xref:dcd#[dynamic host management].
These hosts are then assigned OpenTelemetry xref:glossar#metric[metrics] as {CMK} xref:glossar#service[services] by a xref:glossar#special_agent[special agent].

Briefly summarized: Three components (collector, dynamic host management and special agent) must interact before services can be discovered and metrics generated.
You should therefore configure these three components first and only xref:glossar#activate_changes[activate the pending changes] at the end.

[TIP]
====
This article describes the status of OpenTelemetry integration at the time of release of {CMK} {v24}p10.
We are continuing to work on incorporating subsequent changes from patch releases.
Some of the limitations described have already been fixed and frequently requested features have been added.
Please refer to the link:https://checkmk.com/werks?search=otel&product=cmk&cmk_version%5B%5D=2.4&level%5B%5D=1&level%5B%5D=2&level%5B%5D=3&class%5B%5D=feature&class%5B%5D=fix&class%5B%5D=security&edition=all[OpenTelemetry related Werks^] to find out the current status for the {CMK} version you are using.
====


[#setup]
== Setting up

[#collector_activation]
=== Activating the OpenTelemetry collector

First, you must activate the collector when the site is stopped.
This can be done as the site user on the command line using xref:omd_basics#omd_config[`omd config`] in the text-based configuration menu:

[{shell}]
----
{c-omd} omd config
----

Go to `Addons` and activate `OPENTELEMETRY_COLLECTOR`:

++++
include::screen_opentelemetry_tui_collector.xml[]
++++

You do not need to change the port for the self-monitoring of the collector, as it is set to the next free port from 14317 even if multiple sites are being used.

After activating the collector, start the site again with `omd start`.


// This block replaces the following text
// start translation
////
[#collector_configuration]
=== OpenTelemetry-Kollektor einrichten

Rufen Sie [.guihint]#Setup > Hosts > OpenTelemetry collector (experimental)# auf und starten Sie mit dem Knopf [.guihint]#Add OpenTelemetry collector configuration# die Einrichtung eines neuen Kollektors:

image::opentelemetry_collector_general_properties.png[alt="Die allgemeinen Eigenschaften des OpenTelemetry-Kollektors."]

In den [.guihint]#General properties# vergeben Sie eine ID und einen Titel für den neuen Kollektor.
Für [.guihint]#Site restriction# müssen Sie wenigstens einen Eintrag von der linken auf die rechte Seite verschieben.
Im obigen Screenshot ist die lokale xref:glossar#site[Instanz] `mysite` die einzig verfügbare.

image::opentelemetry_collector_collector_properties.png[alt="Die spezifischen Eigenschaften des OpenTelemetry-Kollektors."]

[#config_basics]
==== Grundeinstellungen

In den Eigenschaften des Kollektors achten Sie auf die folgenden Punkte:

* Sie müssen zumindest einen der beiden Push-Endpunkte (über gRPC oder HTTP) oder einen Prometheus-Scraper (Pull) einrichten.
Der Screenshot zeigt einen unverschlüsselten, nicht authentifizierten gRPC-Endpunkt auf dem Standard-Port 4317 auf allen IPv4-Adressen (`0.0.0.0`).

* Erstellen Sie wenigstens ein Feld für die [.guihint]#Host name computation#.
Im Beispiel ist die einfachste Möglichkeit ausgewählt: das per OpenTelemetry empfangene Feld `service.name` wird als Host-Name in {CMK} verwendet.
In der xref:user_interface#inline_help[Inline-Hilfe] finden Sie mehr Informationen zu den Möglichkeiten, wie Sie aus den OpenTelemetry-Daten Host-Namen erstellen lassen können.

[TIP]
====
Ist eine etwas komplexere Erstellung der Host-Namen gewünscht, speichern Sie die Kollektorkonfiguration und aktivieren Änderungen, ohne eine Regel für die [.guihint]#Host name computation# hinzugefügt zu haben.
Sorgen Sie dann dafür, dass Metriken zum Kollektor xref:test[geschickt werden].
Wenn Sie jetzt Regeln für die [.guihint]#Host name computation# hinzufügen, werden Vorschläge für die verfügbaren Felder angezeigt.
====


[#ec]
==== Logs zur Event Console schicken

OpenTelemetry bietet auch Möglichkeiten, Log-Meldungen zu übertragen.
Der Kollektor kann so konfiguriert werden, dass er diese im Syslog-Format an beliebige Anwendungen übertragen kann, die Syslog-Meldungen über TCP entgegennehmen können.
Im Kontext von {CMK} ist die Verarbeitung von Log-Meldungen durch die xref:ec#[Event Console] interessant.
Diese Funktion können Sie mit der Checkbox [.guihint]#Send log messages to event console# aktivieren.

[TIP]
====
Beachten Sie, dass bereits auf Seiten der _OpenTelemetry Instrumentation_ ein sparsamer Versand von Log-Meldungen sichergestellt ist.
Wenn unklar ist, was alles beim {CMK} Server ankommt, aktivieren Sie temporär einen lokalen `rsyslogd`, der auf Port 514/TCP lauscht.
So können Sie einen Eindruck von den eingehenden Datenmengen bekommen, bevor Sie mit der Aktivierung der Event Console fortfahren.
====

Mit [.guihint]#Save# sichern Sie den Kollektor.
////
// end translation
// delete from here
[#collector_configuration]
=== Setting up the OpenTelemetry collector

Call [guihint]#Setup > Hosts > OpenTelemetry collector (experimental)# and start setting up a new collector with the [guihint]#Add OpenTelemetry collector configuration# button:

image::opentelemetry_collector_general_properties.png[alt="The general properties of the OpenTelemetry collector."]

In [guihint]#General properties#, assign an ID and a title for the new collector.
For [guihint]#Site restriction# you must move at least one entry from the left-hand side to the right-hand side.
In the image above, the local xref:glossar#site[site] `mysite` is the only one available.

image::opentelemetry_collector_collector_properties.png[alt="The specific properties of the OpenTelemetry collector."]

Pay attention to the following points in the collector's properties:

* You must set up at least one of the two push endpoints (via gRPC or HTTP) or a Prometheus scraper (pull).
The picture shows an unencrypted, unauthenticated gRPC endpoint on the standard port 4317 on all IPv4 addresses (`0.0.0.0`).

* Create at least one field for the [guihint]#Host name computation#.
In the example, the simplest option has been selected: the `service.name` field received via OpenTelemetry is used as the host name in {CMK}.
In the xref:user_interface#inline_help[inline help] you will find more information on how to create host names from the OpenTelemetry data.

Use [guihint]#Save# to save the collector.
// delete to here


[#dcd]
=== Setting up dynamic host management

To ensure that hosts are created automatically, set up a new xref:dcd#connection_opentelemetry[OpenTelemetry connection] with the dynamic host management.
In preparation -- at least for the first tests -- we recommend creating a separate folder in which you store the automatically-generated OpenTelemetry hosts.

To set up the new connection for the dynamic host management, go to [.guihint]#Setup > Hosts > Dynamic host management > Add connection:#

image::opentelemetry_dcd_connection.png[alt="Properties of an OpenTelemetry connection in the dynamic host management."]

Make the following settings in the [.guihint]#Connection properties# box:

* Set [.guihint]#Connector type# to [.guihint]#OpenTelemetry collector data.#

* The `OpenTelemetryTest` folder is used as the target folder for the new hosts ([.guihint]#Create hosts in#) in the example.

* Set the [.guihint]#Host attributes# according to your system environment.
Unless you have taken the trouble to create names of existing hosts when setting up the xref:collector_configuration[OpenTelemetry collector], the automatically-created hosts will be _virtual_ hosts that are only used in the context of OpenTelemetry.
You can therefore only use special agents as monitoring agents ([.guihint]#Configured API integrations, no Checkmk agent#) and leave the settings for IP addresses at [.guihint]#No IP#.

* By activating the checkbox at [.guihint]#Service discovery#, you specify that xref:glossar#service_discovery[service discovery] will be performed on the automatically-generated hosts.
This leads to the desired result if the special agent for OpenTelemetry has been configured and is active.

* For the other parameters, you can find more information in the article on xref:dcd#connection_properties_opentelemetry[dynamic host management].

Complete the new connection with [.guihint]#Save#.


[#special_agent]
=== Configuring the special agent

To ensure that {CMK} services are also generated, at least one configuration of the OpenTelemetry special agent must be created.
The required rule can be found under [.guihint]#Setup > Agents > Other integrations > OpenTelemetry (experimental):#

image::opentelemetry_special_agent.png[alt="The rule for configuring the OpenTelemetry special agent."]

In the [.guihint]#OpenTelemetry (experimental)# box, decide whether you want to monitor the OpenTelemetry collector itself -- via the port that was displayed during xref:collector_activation[activation of the collector].

In the condition for the rule, it is obvious to assign the special agent to the folder in which the hosts will be automatically-created -- in the example, this is the `OpenTelemetryTest` folder.

Save the rule with [.guihint]#Save#.

Now that the three components -- collector, dynamic host management and special agent -- have been configured you should xref:glossar#activate_changes[activate the pending changes].


[#test]
=== Sending test data to the collector

You will probably want to set up the OpenTelemetry collector for {CMK} because _somewhere_ in your IT environment _something_ is already generating _some_ OpenTelemetry metrics.

If this is not yet the case, or if you want to quickly try out the example setup described in this article, you can do so with the link:https://github.com/Checkmk/checkmk-docs/tree/master/examples/opentelemetry[example application "Hello metric"^] provided in our GitHub repository, which runs in a virtual Python environment.

It takes around two to three minutes from the time the first data is sent, the host has been created and the service has been detected, and then becomes visible in the monitoring.
The following image shows the services of the "Hello metric" sample application:

image::opentelemetry_services.png[alt="The OpenTelemetry service created with the 'Hello metric' sample application."]

The host name [.guihint]#hello-metric# is generated from the service name given as an option in the `opentelemetry-instrument` command
-- exactly as specified in the configuration of the xref:collector_configuration[OpenTelemetry collector].
The [.guihint]#OTel metric hellolevel# service name in {CMK} is generated from the name of the metric, with the [.guihint]#OTel metric# prefix added by the special agent.

If you activate the [.guihint]#Monitor the collector# option in the xref:special_agent[special agent configuration], i.e. the self-monitoring of the collector, a number of additional services will be created at the host,


// This block replaces the following text
// start translation
////
Ganz ähnlich wie „Hello metric“ funktioniert auch die auf der OpenTelemetry-Website vorgestellte Beispielapplikation „Dice Roll“.
Diese Beispielapplikation ist in vielen Aspekten praxisnäher als „Hello metric“.
So verschickt „Dice Roll“ bei jedem Aufruf des Applikationsservers (und nur dann!) OpenTelemetry-Metriken und führt den Datentyp 
„Counter“ ein.
Sie können die für das „Hello metric“-Beispiel erzeugte virtuelle Python-Umgebung nutzen, um auch das „Dice Roll“-Beispiel auszuprobieren.
Allerdings müssen Sie dazu zusätzlich noch das Python-Modul `flask` installieren (`pip install flask`) und die Datei `app.py` in der um Metriken erweiterten Variante erstellen, wie es in dieser link:https://opentelemetry.io/docs/languages/python/getting-started/#metrics[Anleitung^] beschrieben ist.

Im folgenden Aufruf ersetzen Sie dann den {CMK}-Server als Ziel (hier `198.51.100.42` mit gRPC-Port 4317):

[{shell-raw}]
----
{c-user} opentelemetry-instrument \
    --traces_exporter console \
    --metrics_exporter otlp \
    --exporter_otlp_metrics_endpoint http://198.51.100.42:4317 \
    --logs_exporter console \
    --service_name dice-server \
    flask run -p 8080
----

[TIP]
====
Die bis {CMK} {v24}p3 geltende Einschränkung auf exakt einen _Datenpunkt_ ist weggefallen.
Wie {CMK}-Metriknamen bei OpenTelemetry-Metriken mit mehreren Datenpunkten generiert werden, beschreibt das link:https://checkmk.com/werk/18209[Werk pass:q[#]18209^].
====

Ihr Flask-Server ist jetzt bereit und kann unter dem gewählten Port (hier: 8080) erreicht werden, um pro Aufruf einen Würfelwurf auszuführen.
Sie sehen die Würfeldaten zum Beispiel als Ausgabe von `curl -v \http://localhost:8080/rolldice`.
Jeder Würfelwurf, den Sie so auslösen, wird als ein Datenpunkt an {CMK} übertragen.

Im Monitoring wird nach einigen Minuten der Host [.guihint]#dice-server# erscheinen mit dem Service [.guihint]#OTel metric dice.rolls#.
Diese hat sechs Graphen, `pass:[Value_1__Per_Sec]` bis `pass:[Value_6__Per_Sec]`, welche den Raten der bisher gewürfelten Zahlen eins bis sechs entspricht.
Hintergrund der Umwandlung ist, dass die OpenTelemetry-Metriken _Zähler_ (_Counter_) verwenden, welche nur zunehmen können – ein Datentyp, der in {CMK} nicht vorgesehen ist.
Für eine übersichtlichere Darstellung erfolgt daher in Checkmk die Umwandlung unter Berücksichtigung der Zeitkomponente.

Der Screenshot zeigt einen dieser Graphen, dem das sekündliche Aufrufen von `/rolldice` innerhalb des Überwachungszeitraums zugrunde liegt.

.OpenTelemetry-Metriken verwenden einfache und doppelte Unterstriche, Einheiten werden – falls mitgeliefert – dem Metriknamen angehängt (hier: _per sec_, also _pro Sekunde_)
image::opentelemetry_diceroll_5rate.png[alt="Graph der Rate, wie häufig die Zahl 5 gewürfelt wird."]


[#threshold]
=== Services anpassen

Für die Services können Sie Schwellwerte und mehr festlegen mit der Regel [.guihint]#Setup > Services > Service monitoring rules > OpenTelemetry (experimental).#
Hier haben Sie die Möglichkeit, Regeln für einzelne oder alle Metriken eines Services festzulegen.
Der Beispiel-Screenshot zeigt die Auswahl des oben bereits gezeigten Zählers für Würfe mit der Zahl 5.
Namen bekannter Metriken sind über die Liste beziehungsweise als Vorschlag während des Tippens zugänglich.
Noch unbekannte Metriken, bei denen Sie wissen, dass sie erscheinen werden, können Sie als Freitext eintragen.

Je nachdem, welchen Datentyp der OpenTelemetry-Datenpunkt liefert, kann es sinnvoll sein, Raten berechnen zu lassen.
Bei Zählern – wie für verworfene Netzwerkpakete – ist dies sinnvoll.
Liefern mehrere Quellen Daten, die ein und demselben {CMK}-Service zugeordnet sind, können Sie darüber hinaus festlegen, ob eine Aggregierung (beispielsweise Summe oder Durchschnitt) vorgenommen werden soll oder schlicht die jüngsten, größten oder kleinsten Datenpunkte eines Intervalls dominieren.

image::opentelemetry_service_rules.png[alt="Einstellung der Service-Regeln."]
////
// end translation
// delete from here
[TIP]
====
Only OpenTelemetry metrics that contain exactly one _data point_ are displayed as a service with exactly one metric in {CMK}.
====

The "Dice Roll" sample application presented on the OpenTelemetry website works in a very similar way to "Hello metric".
You can use the virtual Python environment created for the "Hello metric" example to try out the "Dice Roll" example.
However, you must also install the Python `flask` module (`pip install flask`) and create the `app.py` file in the metrics-enhanced version, as described link:https://opentelemetry.io/docs/languages/python/getting-started/#metrics[here^].

In the following call, replace the {CMK} server as the target (here `198.51.100.42` with gRPC port 4317):

[{shell-raw}]
----
{c-user} opentelemetry-instrument \
    --traces_exporter console \
    --metrics_exporter otlp \
    --exporter_otlp_metrics_endpoint http://198.51.100.42:4317 \
    --logs_exporter console \
    --service_name dice-server \
    flask run -p 8080
----

After a few minutes, the host [.guihint]#dice-server# will appear in the monitoring with the service [.guihint]#OTel metric dice.rolls.#
In the "Dice Roll" example application, however, the ‘dice.rolls’ metric is nested and therefore only generates an informative service that always remains {OK}.
Instead of one nested metric, create two ‘flat’ metrics to get two separate services in {CMK}.


[#threshold]
=== Customizing services

You can define threshold values and more for the services using the [.guihint]#Setup > Services > Service monitoring rules > OpenTelemetry (experimental)# rule.
// delete to here


[#files]
== Files and directories

[cols="50,~",options="header"]
|===
|File path |Description
| `~/var/check_mk/otel_collector/host_monitoring/` |This is where OpenTelemetry data is created.
A subdirectory is created for each host.
The files created there are in JSON format.
| `~/var/log/otel-collector.log` |Log file of the OpenTelemetry collector
|`~/tmp/check_mk/otel_collector/self+monitoring/` |Temporary directory in which aggregated data from the collector is stored for evaluation by the special agent.
| `~/tmp/check_mk/otel_collector/autocompleter/` |Temporary directory where files required by the suggestion function (list entries and suggestions when typing) are stored.
|===
