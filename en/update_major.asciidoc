//encoding: utf-8
include::global_attr.adoc[]
= Update to version {v21}
:revdate: 2022-06-01
:title: Update to version {v21}
:description: In this article you will learn what to consider when updating from {CMK} version 2.0.0 to 2.1.0.

{related-start}
xref:update#[Updates and Upgrades]
xref:install_packages#[Basic information on the installation of {CMK}]
{related-end}


////
Hints for translation:
At the beginning of this article, their is an (outdated) Deepl translated text, that will be displayed for our readers as long as you are not finished.
You can delete it right away.
The German text to be translated is commented out at the end of this file (starting at line 595.
////


_In order to quickly provide you the new information for {CMK} version {v21}, we have had this draft machine translated for now. Update and language revision will follow later._

[#intro]
== Introduction

In this article you will find the most important topics relevant to updating your {CMK} version {v20} to {v21}.

We recommend that you read through the entire article before the update so that you know exactly what to expect -- before, during and after the update.


[#prep]
== Preparations

This chapter gives you the overview of the topics you should take care of before you perform the update.
Not every topic will probably be relevant for you: You can tick one internally and move on to the next topic.


[#backup]
=== Backup

As before updating any production software, you should check that your backups are up-to-date before updating {CMK}.

*Does this affect you?* Yes.

*What do you need to do?* If you create your backups automatically via [.guihint]#Setup > Maintenance > Backups#, check there whether the last backup jobs have run through without errors.

For more information, see the articles on xref:backup#[backups] and on xref:omd_basics#backup[backing-up and restoring sites].


[#linux_versions]
=== Linux distribution versions

In {CMK} version {v21}, some obsolete versions of the Ubuntu distribution are no longer supported.
There are no changes for users of Debian, SLES and RHEL (and binary-compatible derivatives such as CentOS).

*Does this affect you?* This affects you if your {CMK} server has one of the following Ubuntu versions installed that are still supported in {v20}:

* Ubuntu 20.10 _Groovy Gorilla_
* Ubuntu 21.04 _Hirsute Hippo_

Still supported at release of {v21}, but not recommended:
For Ubuntu 21.10 (_Impish Indri_), support with security updates was discontinued by Canonical during the beta phase of {v21}.
Debian 9 (_Stretch_) will also no longer receive security updates shortly after the release of {CMK} {v21}.

New additions are Debian 11 _Bullseye_ and Ubuntu 22.04 _Yammy_.
For both distributions we also build installation packages of {v20} to simplify the recommended update path.

*What do you need to do?* Before updating {CMK}, first upgrade the Linux distribution.
Make sure that the target version of the Linux distribution is supported by {CMK} {v20} *and* {v21}.

You can find out which Linux distribution versions {CMK} supports in the xref:install_packages#supported_distributions[installation article] and on the link:https://checkmk.com/download[download page^] after you have selected the {CMK} version and your Linux distribution.

If it is now necessary to upgrade Linux before updating {CMK}, we recommend the following procedure:

. First stop your {CMK} site:
+
[{shell}]
----
{c-root} omd stop mysite
----

[start=2]
. Unmount the site's tmp directory:
+
[{shell}]
----
{c-root} umount /opt/omd/sites/mysite/tmp
----

[start=3]
. Move the entire `omd` directory so that no unwanted changes can occur in the next step.
During a release upgrade, all packages whose dependencies can no longer be fulfilled are usually removed.
{CMK} would also belong to these packages.
To prevent any possible data loss here, this step is necessary and can be carried out via `mv`.
+
[{shell}]
----
{c-root} mv /opt/omd /opt/omd.bak
----

[start=4]
. Upgrade Linux according to the instructions from the respective distributor.

. After the successful upgrade of your Linux distribution, you must now move the `omd` directory that you temporarily put into a safe place back into its correct location:
+
[{shell}]
----
{c-root} mv /opt/omd.bak /opt/omd
----

[start=6]
. Now install the package from {CMK} that matches the new version of the distribution you are using.
*Important:* The version number of {CMK} must be exactly the same as the one used before.
So if you were using {CMK} 2.0.0p23 before upgrading the distribution, now install the 2.0.0p23 that matches your new Linux distribution version.
+
In the case of Ubuntu, the following command would suffice at this point:
+
[{shell}]
----
{c-root} apt install /tmp/check-mk-enterprise-2.0.0p23_0.jammy_amd64.deb
----

+
*Note:* During installation, specify the full path to the DEB file via `apt install`.

When reinstalling {CMK}, follow the xref:install_packages#distribution_instructions[detailed installation instructions] for your respective distribution.


[#agents]
=== The agents for Linux and Windows

With {v21}, {CMK} first introduces for the Linux and Windows agents on x86_64 the two components _Agent Controller_ (on the host) and _Agent Receiver_ (on the server), which allow TLS encrypted transmission of the agent output.
The Agent Controller initially operates in a compatibility mode (*legacy pull mode*) that also allows access from {v20} sites.

*Does this affect you?* Yes.

*What do you need to do?* Identify those Windows hosts in monitoring that are using Windows Server operating systems 2008 R2 and Client operating systems 7 or later on x86_64.
The same applies to Linux hosts on x86_64 that use `systemd` version 220 or later for service management.
On these hosts, register with the monitoring server after the update to use TLS encrypted transmission.
For more detailed information, see the detailed instructions for xref:agent_linux#registration[Linux] or xref:agent_windows#registration[Windows].


[#local_files]
=== Local files

Local files allow you to customize and extend the functionality provided by {CMK}.
These files are located in the local part of the site directory structure, i.e. in `~/local`.
Local files can cause problems when updating, as they may no longer match the new {CMK} version.

*Does this affect you?* Since it is not possible for {CMK} to intercept and handle local customizations and any third-party extension during an update, you should check your {CMK} site before an update to see if and which local files you are using.

*What do you need to do?* Get an overview of the local files of your {CMK} site by executing the following command as the site user (where the `-L` option ensures that symbolic links are also followed):

[{shell}]
----
{c-omd} find -L ~/local -type f
----

In a fresh installation of {CMK}, you will currently only see a file called `README.TXT` listed.
Anything beyond that should be at the top of your troubleshooting list in case you have problems updating.
Special attention should be paid to check plug-ins that still follow the old check API that was valid until version {v16}.
We will go into this in more detail in the next chapter.


[#check-api]
=== The Check API

In {CMK} {v20}, a new check API was introduced, which restructures the check plug-ins to unify and simplify their handling.
However, since there are many checks that were programmed according to the old Check API that was valid until version {v16}, migrating from the old to the new Check API may be an issue for you in version {v21} as well.
The large number of existing checks is also the reason why the old Check API will continue to be supported for a transition period.

*Does this affect you?* The Check-API issue _may_ affect you if you have extended the checks shipped with {CMK} with your own, self-written checks and/or if you use plug-ins from other sources and have downloaded them e.g. from the link:https://exchange.checkmk.com/[{CMK} Exchange^].
The issue affects you if one, some or even all of these check plug-ins still follow the old check API.
You can find the affected files in the xref:local_files[local files] of your site.

*What do you have to do?* We have tried to make the change to the new Check API as easy and comfortable as possible for you:

Just like when updating to version {v20}, {CMK} tries to automatically migrate all local plug-ins from the directories `~/local/share/check_mk/checks` and `~/local/share/check_mk/inventory` to the new Check API when updating to version {v21}.
This 'automigration' happens at runtime; the plug-in files are not changed.
You can find out how to view the results after the update in the chapter xref:automigration[Check automigration to the new Check API].

Although the chances are good that the automigration of your Check plug-ins will work smoothly, the changeover to Python 3 also made in version {v20} may require some adjustments.
Due to the introduction of the new Check API and the change of the code base to Python 3, there are two good reasons to revise your self-written check plug-ins.
We provide detailed information on the necessary steps for this in the link:https://blog.checkmk.com/migrating-check-plug-ins-to-checkmk-2.0[Blogpost on the migration of check plug-ins^].

Last but not least, the new Check API scores with improved documentation:
There is an introductory article on xref:devel_check_plugins#[programming your own check plug-ins] and the always up-to-date plugin API reference documentation.
Both can be accessed via the {CMK} interface -- in the [.guihint]#Help# menu of the navigation bar under [.guihint]#Developer resources#.


[#incompatible_mkps]
=== Incompatible and obsolete MKPs

The xref:glossar#mkp[{CMK} extension packages (MKPs)] can be used to extend your monitoring system quite easily and conveniently.
On the one hand, it happens that such MKPs are no longer maintained and may then no longer be compatible with new versions of {CMK}.
On the other hand, we keep adding new plug-ins and functional extensions to {CMK}, which is why MKPs sometimes become obsolete.
Their functionality is simply ensured by {CMK} itself.

*Does this affect you?* If you have installed MKPs, it is strongly recommended checking them, especially before such a major update.
This will prevent incompatible packages from interfering with the update, or of having duplicate or at least very similar services following the update.

*What do you need to do?* To do this, check your installed MKPs against our link:https://checkmk.com/integrations[Catalog of Check plug-ins^] and remove packages which are now provided natively by {CMK}.
You can also take this opportunity to remove MKPs that may have only been installed for a test run.
You can find a list via [.guihint]#Setup > Maintenance > Extension packages#.
On the command line, you can view installed extensions with the following command:

[{shell}]
----
{c-omd} mkp list
my_mkp_from_exchange
my_peronal_mkp
----

For each listed MKP you can then also display the files that belong to the package:

[{shell}]
----
{c-omd} mkp list my_personal_mkp
/omd/sites/mysite/local/lib/check_mk/base/plugins/agent_based/check_mk.py
/omd/sites/mysite/local/share/check_mk/web/plugins/metrics/custom_metrics.py
----

Should you not be able to assign all packages via the check of the installed MKPs and the comparison with our catalog, we recommend the xref:dry_run[dry run of the update] described below in order to identify incompatibilities and then remove these from your production monitoring before the update.


[#incompatible]
=== Incompatible changes

As in every {CMK} version, there are changes to the software in the current version {v21} that _may_ have repercussions on your {CMK} installation.
A so-called _incompatible change_ may require you to make manual adjustments so that existing functions continue to run as usual and/or new functions can be used.

*Does this affect you?* In general, there will be incompatible changes that will also affect your {CMK} installation.
However, a general statement is unfortunately impossible.
In this article we have collected those issues that apply to all or most {CMK} installations.
However, there may be other changes that are relevant to you, for example in checks that you use in your installation.

*What do you need to do?* After you have performed the xref:update[update], the {CMK} interface will show you the number and content of the incompatible changes and ask you to check and take note of them.
So you will definitely be confronted with this issue -- but only after you have performed the update.

It is therefore a good idea to get an overview of the incompatible changes *before* the update.
Open the list of link:https://checkmk.com/de/werks?search=&cmk_version$$[$$$$]$$=2.1&compatible=0[Werks^].
(The software development of {CMK} is organised in so-called _Werks_).
In the description of a Werk you will find hints on what to do, if necessary, to make the change compatible.

The frustrating news:
The Werk list of a version is very, very long -- even if it only contains the incompatible changes.
The comforting news:
You can see from the number of changes how much effort we put into improving {CMK} for you.


[#update]
== Update

[#dry_run]
=== Best practices for update

In the following we describe best practices which we follow even when updating large {CMK} environments.
These are certainly not mandatory in every environment, but they can make the process of updating easier for you.


==== Updating the operating system

The operating system on a {CMK} server should always be up to date anyway.
Before updating {CMK}, however, it certainly does not hurt to make sure that it is up to date, again using `apt` (for Debian and Ubuntu), `yum` (for Red Hat Enterprise Linux (RHEL) based systems) or `zypper` (for SUSE Linux Enterprise Server).


==== Updating the {CMK} version
Before updating to version {v21}, the {CMK} site must have version {v20} installed.

We have previously advised against updating with a major version omitted, as there are simply too many changes in between that will hinder a smooth update and almost certainly cause problems.
With link:https://checkmk.com/werk/13320[Werk #13320^], this recommendation is now turned into a requirement -- and a lock is introduced that prevents, for example, a direct update from version {v16} to {v21}.

An update to version {v21} does not currently require a specific {v20} patch version.
However, again, there are good reasons to start the jump to {v21} only from the latest {v20} patch version, since, for example, a {v20} patch may contain fixes that make it easier to update to version {v21}.

Therefore, we recommend updating {CMK} to the latest {v20} patch version first, and only then update to the {v21}.


==== Perform a dry run of the update

In large environments, where even restoring a naturally-existing backup of your {CMK} environment would require a certain amount of time, it is advisable to carry out a test with a cloned site before updating the production environment.
For this purpose, you can, for example, restore the last regular backup of your site under a different name.

[{shell}]
----
{c-root} omd restore newsite /path/to/backup
----

*Alternatively* you can also copy your site via `omd cp`.
For this, however, the site must be stopped for a short time:

[{shell}]
----
{c-root} omd stop mysite
{c-root} omd cp mysite newsite
----

Afterwards, run the update on this new cloned site first, for example to check the local changes in the new environment mentioned above.


[#automatic_agent_updates]
==== Temporarily disable Agent Updater

{cee-only}
If you use the automatic agent updates, you should consider disabling them before updating {CMK} to be able to make the switch to the new agents on the hosts later in a controlled manner.
To do this, first select [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX# and on the following page select the [.guihint]#Agents > Automatic updates# menu item.
By clicking on the button icon:icon_edit[alt="Icon to edit a list entry."] in front of the [.guihint]#Master switch# you can disable the agent update completely:

image::update_major_automatic_agent_updates.png[alt="Turn off agent update by master switch."]

After the successful update of {CMK}, you can turn the agent update back on using the same method.

At this point we recommend reactivating the automatic agent update for a select few of your hosts or host groups at first.
In this way, the new agent is not immediately rolled out across all of your servers, and you can familiarize yourself with the newly-delivered data on a few systems.
Also, due to the significantly-increased number of check plug-ins supplied, you could find a whole range of new services which you can then set up correctly on the test systems you have chosen.
New threshold values may also be required for new services.
If you tackle this on a small scale first, you may save yourself some false alarms later.

To do this, you can simply enter a few hosts or host groups in the appropriate fields on the above page and then re-enable the [.guihint]#Master switch#.

image::update_major_activate_update_on_selected_hosts.png[alt="Options when updating agents to activate on specific hosts."]

*Important:* Remember to remove these restrictions on explicit hosts and host groups again once you are satisfied with the results.


[#notifications]
==== Temporarily disable notifications

You should also consider turning off xref:glossar#notification[notifications] in the pre-update site -- for similar reasons we explained in the previous section on automatic agent updates.
This way you avoid your colleagues from the monitoring team receiving _unnecessary_ notifications.

You can turn off notifications centrally in the xref:user_interface#master_control[Master control] snapin with the main switch [.guihint]#Notifications#.

It may well happen that after the update one or the other service is {CRIT} that was not before.
Take care of newly occurring problems first after the update.
You can view the _unhandled problems_ e.g. in the xref:user_interface#overview[Overview] snapin.

*Important:* Don't forget to turn on the notifications again, e.g., when the number of unhandled problems after the update has leveled off to the level before the update.


[#update_distributed_monitoring]
=== Update in distributed monitoring

There are different procedures to update the sites involved in a xref:distributed_monitoring#[distributed monitoring], i.e., the central site and the remote sites.

*Important:* Whichever approach you choose:
You should create xref:backup#[backups] beforehand in this scenario as well.

The recommended, safe procedure is _Update in one go_, where you perform the following steps:

. Stop all sites.
. Perform the update for all sites.
. Restart the updated sites.

There is another variant: the _Update during operation_.
You may need this option for example if you manage many distributed sites that cannot be updated in one go for technical or organizational reasons.

When updating during operation, sites with different {CMK} versions must communicate with each other for a transition period -- until the update of all sites involved is complete.
For this cooperation to work, the versions involved in this mixed operation must be compatible.

With link:https://checkmk.com/werk/13313[Werk #13313^], version checks have been added to ensure that the sites involved are using compatible versions.
The short version is:
Sites must have the same major version -- with one exception: the {CMK} version of a remote site may be exactly one major version higher than that of the central site.
The following table shows the possible combinations when updating from {v20} to {v21}:

[cols="40,40,~",options="header"]
|===
|Central site |Remote site |Allowed?
|{v20} |{v20} |Yes
|{v20} |{v21} |Yes
|{v21} |{v20} |*No*
|{v21} |{v21} |Yes
|===

It follows from these rules that when updating during operation, the central site is updated last.
Note that also when updating in distributed monitoring: major versions must not be omitted, so e.g. a connection between a {v16} and a {v21} site is not supported.

*Note:* Since the feature set of different {CMK} versions differs, some features of {CMK} may not work or work only in a limited way in this mixed mode.
In a mixed operation mode, problems can occur even with compatible versions, and smooth interaction is only ensured if all sites have the same major version.
You should therefore keep the period of a mixed operation with different versions as short as possible and update all sites quickly after starting the update.


=== Carry out the update

Nothing fundamental has changed in the actual update of the software in {CMK}  {v21}, i.e. you install the new version, perform the update of the {CMK} site, take care of any possible conflicts, and check and confirm the incompatible changes.

Carry out the update procedure as described in the xref:update#detailed[article on updates and upgrades].


[#follow-up]
== Follow-ups

[#gui]
=== User interface changes

The user interface (GUI) of {CMK} was completely redesigned with version {v20}.
In the new version {v21}, on the other hand, it will look very familiar to you, because there have been hardly any changes compared to {v20} that are visible at first glance.
However, menus, menu items, and other details have changed to make new features available -- and to improve existing ones.

We introduce these changes in the articles in this User guide, and the xref:intro_welcome#[Beginner's guide] provides a detailed introduction to the major elements of the xref:intro_gui#[user interface].


==== Removed snapins for the sidebar

With link:https://checkmk.com/werk/13736[Werk #13736^], some obsolete and little-used xref:glossar#snapin[snapins] for the sidebar have been removed.
There are replacements for almost all of these snapins, mostly via xref:glossar#navigation_bar[navigation bar] menu items.


[#automigration]
=== Check automigration to the new Check API

You can check if all local plug-ins from the directories `~/local/share/check_mk/checks` and `~/local/share/check_mk/inventory` can be automatically migrated to the new xref:check-api[Check-API].

*Does this affect you?* This check is useful if there are check plug-ins in your local files that were programmed conforming to the old Check API that was valid up to version {v16}.

*What do you need to do?* As a site user, run the following command:

[{shell}]
----
{c-omd} cmk -R
Failed to auto-migrate legacy plugin to check plugin: mssql_counters
Please refer to Werk 10601 for more information.
----

The message above shows that a plug-in could not be migrated automatically.
All the listed plug-ins will need to be migrated manually by you.
There are a number of reasons why an automigration cannot be performed, and you can read about these in the mentioned link:https://checkmk.com/werk/10601[Werk #10601^].
You can find out how to carry out manual migration in the link:https://blog.checkmk.com/migrating-check-plug-ins-to-checkmk-2.0[blogpost on the migration of check plug-ins^].


[#service_discovery]
=== Discovering new services

Like every major release, {CMK} {v21} brings with it a whole new set of check plug-ins.
If you do not use the xref:wato_services#discovery_check['discovery check"], i.e. the automatic update of the service configuration via the periodic service discovery, you will have to search for services on quite a number of hosts.

If your hosts are organized accordingly (e.g. in folders), you can usually use the [.guihint]#Bulk discovery# function for this.
You can find this under [.guihint]#Setup > Hosts > Hosts# and then in the menu [.guihint]#Hosts > Discover services#.

Below we list some components with the most new features.


[#service_check_mk_agent]
==== Check_MK and Check_MK Agent

image::update_major_check_mk_services.png[alt="The two services 'Check_MK' and 'Check_MK Agent' in monitoring."]

The [.guihint]#Check_MK# and [.guihint]#Check_MK Agent# services are still called the same as in the {v20} version, but in the {v21} they have partly a different meaning:

* The [.guihint]#Check_MK Agent# service is now always present and provides all information related to agent deployment, such as the version of the agent, the time of the last update, the number of agent plug-ins and local checks, or the restriction of IP addresses.
Previously, this service only took care of agent updates -- and was only available when agent updates were set up.

* Also, the [.guihint]#Check_MK# service is now always there -- previously it was only when passive services were running on the host.
The service [.guihint]#Check_MK# now exclusively takes care of the state of the used agents in running operation (_operational state_).
It reports e.g. connection errors or missing data and shows the execution time.


[#cluster_services]
==== Cluster services

With {CMK} version {v21} the behavior of some xref:clustered_services#[cluster services] changes.
Affected services assume the {UNKNOWN} state and require configuration adjustments.

{CMK} knows four cluster modes:

* _Best_ (the value of the best node determines the overall state).
* _Worst_ (analog: value of the worst node)
* _Failover_ (only one node is allowed to return {OK})
* _Native Clustering_ via API function (freely programmable, e.g.: _80% of nodes must be {OK}_ for the cluster to be OK).

Legacy plug-ins using the old Check API previously had an additional implicit clustering capability, where the output of the assigned hosts was simply evaluated in order, and the last individual state received determined the overall state of the cluster.
Since this behavior was not reliable, it was removed in {v21}.

In the course of porting to {v21}, we removed the _native cluster mode_ retrofitted to {v20} from some supplied check plug-ins when it was not useful.
Instead, we selected one of the _best_, _worst_, or _failover_ behaviors as the default.
link:https://checkmk.com/werk/12908#[This list^] shows affected plug-ins and the new default behavior.
Also affected are plug-ins programmed in-house or obtained from link:https://exchange.checkmk.com[{CMK} Exchange^] that do not use API integration for native cluster mode.

All of these services will assume the {UNKNOWN} state after updating to {v21} if the cluster mode once selected is no longer supported.
In these cases, use the [.guihint]#Aggregation options for clustered services# rule to define one of the three cluster modes _best_, _worst_, or _failover_.


[#service_descriptions]
==== Service descriptions

Each update to {CMK} means that service descriptions are changed to improve naming consistency within {CMK}'s monitoring and documentation.
Since changing service descriptions means that rules sometimes need to be adjusted and historical monitoring data is lost, {CMK} initially leaves the old descriptions in place for updates.
For services where the loss of old monitoring data is acceptable and the effort for adapting rules is manageable, you should switch to new service descriptions as soon as possible.

To do this, go to [.guihint]#Setup > General > Global Settings > Execution of checks# and go through the [.guihint]#Use new service descriptions# list and identify the services where the checkboxes are not yet active and activate them.
After applying the changes, the new service descriptions are active and a few minutes will pass before you see defined states of the affected services in the monitoring again.


[#new_ports]
=== New ports

xref:agent_registration[TLS registration] of monitored hosts requires access to ports 443 (respectively 80) for REST API calls and port 8000 (new component _Agent Receiver_).
Take care to adjust your firewall and routing settings to make these ports accessible for hosts affected.

In case security policies forbid opening these ports we added the possibility to xref:agent_linux#proxyregister[register by proxy] on the {CMK} server.


[#agent_registration]
=== Registering agents for TLS

After updating the agents to {v21}, the [.guihint]#Check_MK Agent# service takes on {WARN} status for the affected hosts and displays the message _TLS is not activated on monitored_ host.
In the two articles on the xref:agent_linux#[Linux] and xref:agent_windows#[Windows] agents, we describe the registration of the certificates used with the command line tool `cmk-agent-ctl`.
This tool also provides many options for automatic registration -- for example, via postinstall snippet in xref:bakery_api#[Bakery plug-ins].

If unencrypted data transfer is desired for a transition period for parallel operation of {v20} servers in a {v21} environment, adjust the [.guihint]#Checkmk Agent installation auditing# rule set to allow the [.guihint]#Check_MK Agent# service to assume {OK} status despite not being registered.


[#kubernetes]
=== The new Kubernetes monitoring

Kubernetes monitoring has been rewritten from the ground up in {CMK} {v21} for simplified and efficient monitoring.
Unfortunately, since the architecture has fundamentally changed in version {v21}, it is not possible to transfer or rewrite previous monitoring data of your Kubernetes objects from previous {CMK} versions.

*Does this affect you?* This affects you if you used the {CMK} special agent to monitor Kubernetes in version {v20}.
The old special agent and associated check plugins will still work in version {v21}, but will subsequently be xref:kubernetes_20[removed] from {CMK}.
We therefore recommend a complete move to the new, much improved Kubernetes monitoring in version {v21}.

*What do you need to do?* Completely redeploy Kubernetes monitoring as described in the xref:monitoring_kubernetes#[Monitoring Kubernetes] article.


=== Encrypting notification spooler connections

*Does this affect you?*
If you are using distributed monitoring with xref:notifications#async[central notification], you will benefit from increased security when enabling transport encryption of the notification spooler `mknotifyd`.

*What do you need to do?*
When updating existing {CMK} installations, connections already configured will initially remain usable without encryption.
However, in this case [.guihint]#Analyze configuration# will fault the setting with {CRIT}.
After migrating all involved sites to {v21}, change [.guihint]#Global settings > Notification spooler configuration > Encryption# to [.guihint]#Encrypt communication with TLS#.
New connections automatically use TLS encryption when they are created.


[#rest-api]
=== REST API replaces Web API

The Web API (also called xref:web_api#[HTTP API]) has been deprecated and will be xref:web-api[removed] in the next {CMK} version.
Replacement is ready with the xref:rest_api#[REST API] introduced in version {v20}.

*Does this affect you?* This affects you if you have written custom scripts that use the Web API.

The Web API will continue to work in the {CMK} version and in existing sites updated from version {v20} to {v21}, the Web API will remain enabled.
In sites newly created with the {v21} version, the Web API is already turned off in the [.guihint]#Global settings#.
The switch to turn the Web API on and off can be found in [.guihint]#Setup > General > Global settings > Site management > Disable Web API#.

*What do you need to do?* We recommend migrating all existing scripts that use the Web API to the REST API as soon as possible to catch issues early before moving to {CMK} version {v22}.

The REST API already provides access to more areas in {CMK} than the Web API, such as host status, service status, scheduled downtimes, time periods, problem acknowledgement, and Business Intelligence (BI).

The functions for accessing sites in distributed monitoring and metrics and graphs that are still missing in the REST API will be added in {v21} patch versions, so that over time all functions will be available that could also be used in the Web API.


[#outlook]
== Outlook

This chapter deals with topics that do not concern the current {CMK} version {v21}, but one of the subsequent versions.


[#web-api]
=== The Web API is removed

The Web API (also called HTTP API) will be removed in the next {CMK} version {v22}.
The Web API will be replaced by the xref:rest-api[REST API] introduced in {v20}.


[#kubernetes_20]
=== The old Kubernetes special agent is removed

The {CMK} {v20} special agent for Kubernetes monitoring and associated check plug-ins will be removed in the next {CMK} version {v22}.
Details can be found in link:https://checkmk.com/werk/13561[Werk #13561^].
Replacements are available in version {v21} with the completely xref:kubernetes[new Kubernetes monitoring].


[#nsca]
=== NSCA is no longer supported

Support for the Nagios Service Check Acceptor (NSCA) will be removed in the next {CMK} release {v22}.

NSCA is a Nagios add-on to get results xref:wato_services#passive_checks[passive checks] from remote hosts in a distributed Nagios configuration.
This deprecated method for setting up xref:distributed_monitoring#[distributed monitoring] offers no advantages over {CMK}'s own methods.

Details and notes on replacement can be found in link:https://checkmk.com/werk/13644[Werk #13644^].


[#hw_sw_inventory_plugin_api]
=== The old HW/SW inventory plug-in API is no longer supported.

Support for the old HW/SW inventory plug-in API will be removed in the next {CMK} release {v22}.

The plug-ins following this API are located in the site directory under `~/share/check_mk/inventory` and (as local files) under `~/local/share/check_mk/inventory`.
These plug-ins work in version {v21}, but will be ignored from version {v22} onwards.

If you use custom plug-ins, migrate them to the new Check API before moving to version {v22}.
See link:https://checkmk.com/werk/14084[Werk #14084^] for more details and information on migration.




////
[#intro]
== Einleitung

In diesem Artikel finden Sie die wichtigsten Themen, die für das Update Ihrer {CMK}-Version {v20} auf {v21} relevant sind.

Wir empfehlen Ihnen, vor dem Update den kompletten Artikel durchzulesen, damit Sie genau wissen, was auf Sie zukommt: vor, während und nach dem Update.


[#prep]
== Vorbereitungen

In diesem Kapitel erhalten Sie die Übersicht der Themen, um die Sie sich kümmern sollten, bevor Sie das Update durchführen.
Wahrscheinlich wird nicht jedes der Themen für Sie relevant sein:
Bei einem solchen können Sie intern einen Haken setzen und sich gleich das nächste Thema vornehmen.


[#backup]
=== Backup

Wie vor jedem Update einer produktiven Software sollten Sie auch vor dem von {CMK} die Aktualität Ihrer Backups prüfen.

*Betrifft Sie das?* Ja.

*Was müssen Sie tun?*  Wenn Sie Ihre Backups automatisiert über [.guihint]#Setup > Maintenance > Backups# erstellen, prüfen Sie dort, ob die letzten Backup-Aufträge fehlerfrei durchgelaufen sind.

Weitere Informationen finden Sie in den Artikeln zu xref:backup#[Backups] und zum Thema xref:omd_basics#backup[Instanzen sichern und wiederherstellen.]


[#linux_versions]
=== Linux-Distributionsversionen
// Werk #13012: Add support for Ubuntu 22.04

In der {CMK} Version {v21} werden einige veraltete Versionen der Distribution Ubuntu nicht mehr unterstützt.
Für Nutzer von Debian, SLES und RHEL (sowie binärkompatiblen Derivaten wie CentOS) ergeben sich keine Änderungen.

*Betrifft Sie das?* Das betrifft Sie, wenn auf Ihrem {CMK}-Server eine der folgenden, in der {v20} noch unterstützten, Ubuntu-Versionen installiert ist:

* Ubuntu 20.10 _Groovy Gorilla_
* Ubuntu 21.04 _Hirsute Hippo_

Bei Veröffentlichung von {v21} noch unterstützt, aber nicht empfohlen:
Für Ubuntu 21.10 (_Impish Indri_) wurde während der Beta-Phase von {v21} seitens Canonical die Unterstützung mit Sicherheits-Updates eingestellt.
Auch Debian 9 (_Stretch_) wird kurz nach Veröffentlichung  von {CMK} {v21} keine Sicherheits-Updates mehr erhalten.

Neu hinzugekommen sind Debian 11 _Bullseye_ und Ubuntu 22.04 _Yammy_.
Für beide Distributionen bauen wir auch Installationspakete von {v20}, um den empfohlenen Update-Pfad zu vereinfachen.

*Was müssen Sie tun?* Führen Sie vor dem Update von {CMK} zuerst ein Versions-Upgrade der Linux-Distribution durch.
Achten Sie darauf, dass die Ziel-Version der Linux-Distribution von {CMK} {v20} *und* {v21} unterstützt wird.

Welche Linux-Distributionsversionen {CMK} unterstützt, erfahren Sie im xref:install_packages#supported_distributions[Artikel zur Installation] und auf der link:https://checkmk.com/download[Download-Seite^] nachdem Sie die {CMK}-Version und Ihre Linux-Distribution ausgewählt haben.

Sollte es nun notwendig sein, vor dem Update von {CMK}, ein Versions-Upgrade Ihrer Linux-Distribution vorzunehmen, so empfehlen wir die folgende Vorgehensweise:

. Stoppen Sie zunächst Ihre {CMK}-Instanz:
+
[{shell}]
----
{c-root} omd stop mysite
----

[start=2]
. Hängen Sie das `tmp`-Verzeichnis der Instanz aus:
+
[{shell}]
----
{c-root} umount /opt/omd/sites/mysite/tmp
----

[start=3]
. Verschieben Sie das gesamte `omd`-Verzeichnis, damit hieran im nächsten Schritt keine ungewollten Änderungen auftreten können.
Bei einem Release-Upgrade werden im Regelfall alle Pakete entfernt, deren Abhängigkeiten nicht mehr erfüllt werden können.
Zu diesen Paketen würde auch {CMK} gehören.
Um hier einen Datenverlust zu verhindern, ist dieser Schritt notwendig und kann per `mv` durchgeführt werden.
+
[{shell}]
----
{c-root} mv /opt/omd /opt/omd.bak
----

[start=4]
. Führen Sie das Versions-Upgrade von Linux entsprechend der Anleitung des jeweiligen Distributors durch.

. Nach der erfolgreichen Aktualisierung Ihrer Linux-Distribution müssen Sie nun das in Sicherheit gebrachte `omd`-Verzeichnis wieder an Ort und Stelle verschieben:
+
[{shell}]
----
{c-root} mv /opt/omd.bak /opt/omd
----

[start=6]
. Installieren Sie nun das zur neuen Version der verwendeten Distribution passende Paket von {CMK}.
*Wichtig:* Die Versionsnummer von {CMK} muss exakt der vorher verwendeten entsprechen.
Wenn Sie also vor dem Upgrade der Distribution {CMK} 2.0.0p23 verwendet haben, so installieren Sie nun die 2.0.0p23, die zu Ihrer neuen Linux-Distributionsversion passt.
+
Im Falle von Ubuntu würde an dieser Stelle der folgende Befehl genügen:
+
[{shell}]
----
{c-root} apt install /tmp/check-mk-enterprise-2.0.0p23_0.jammy_amd64.deb
----
+
*Hinweis:* Geben Sie bei der Installation per `apt install` den vollständigen Pfad zur DEB-Datei an.

Halten Sie sich bei der Neu-Installation von {CMK} an die jeweilige xref:install_packages#distribution_instructions[detaillierte Installationsanleitung] für Ihre Distribution.


[#agents]
=== Die Agenten für Linux und Windows
// Werk #14089: Checkmk agent TLS encryption and compression

Mit {v21} führt {CMK} zunächst für die Linux- und Windows-Agenten auf x86/64 die beiden Komponenten _Agent Controller_ (auf dem Host) und _Agent Receiver_ (auf dem Server) ein, mit denen eine TLS verschlüsselte Übertragung des Agenten-Outputs möglich ist.
Der Agent Controller arbeitet zunächst in einem Kompatibilitätsmodus (*Legacy-Pull-Modus*), der auch den Zugriff von {v20}-Instanzen zulässt.

*Betrifft Sie das?* Ja.

*Was müssen Sie tun?* Identifizieren Sie diejenigen Windows-Hosts im Monitoring, welche die Windows Serverbetriebssysteme 2008 R2 und Client Betriebssysteme 7 oder höher auf x86_64 nutzen.
Gleiches gilt für Linux-Hosts auf x86_64, welche zur Diensteverwaltung `systemd` ab Version 220 verwenden.
Auf diesen Hosts registrieren Sie nach der Aktualisierung beim Monitoring-Server, um die TLS verschlüsselte Übertragung zu nutzen.
Detailliertere Informationen finden sie in der ausführlichen Anleitung für xref:agent_linux#registration[Linux] oder xref:agent_windows#registration[Windows].


[#local_files]
=== Lokale Dateien

Mit lokalen Dateien können Sie die von {CMK} bereitgestellte Funktionalität anpassen und erweitern.
Diese Dateien befinden sich im lokalen Teil der Instanzverzeichnisstruktur, d.h. in `~/local`.
Lokale Dateien können bei einem Update Probleme bereiten, da sie eventuell nicht mehr zur neuen {CMK}-Version passen.

*Betrifft Sie das?* Da es für {CMK} bei einem Update nicht möglich ist, die lokalen Anpassungen und jede von einem Drittanbieter hergestellte Erweiterung abzufangen und zu behandeln, sollten Sie Ihre {CMK}-Instanz vor einem Update daraufhin überprüfen, ob lokale Dateien bei Ihnen verwendet werden und gegebenenfalls welche.

*Was müssen Sie tun?* Verschaffen Sie sich einen Überblick über die lokalen Dateien Ihrer {CMK}-Instanz, indem Sie als Instanzbenutzer das folgende Kommando ausführen (bei dem die Option `-L` dafür sorgt, dass auch symbolischen Links gefolgt wird):

[{shell}]
----
{c-omd} find -L ~/local -type f
----
// MA: Ist es ggf. sinnvoller, wenn wir auf die Tools `mkp` oder `cmk -P` verweisen?
// MA: `mkp find` listet alle local-Dateien, die nicht zu einem Paket gehören.

In einer frischen Installation von {CMK} wird Ihnen derzeit nur eine Datei namens `README.TXT` aufgelistet.
Alles, was darüber hinaus angezeigt wird, sollte ganz oben auf Ihrer Liste zur Fehlerdiagnose stehen, falls es beim Update Probleme gibt.
Besondere Aufmerksamkeit verdienen Check-Plugins, die immer noch der alten, bis zur Version {v16} gültigen, Check-API folgen.
Wir gehen darauf im nächsten Kapitel genauer ein.


// {v20} Thema - auch gültig für {v21}
[#check-api]
=== Die Check-API

In {CMK} {v20} wurde eine neue Check-API eingeführt, die die Check-Plugins neu strukturiert, um ihre Handhabung zu vereinheitlichen und zu vereinfachen.
Da es aber eine große Zahl von Checks gibt, die nach der alten, bis zur Version {v16} gültige Check-API programmiert wurden, kann es sein, dass die Migration von der alten auf die neue Check-API auch in der Version {v21} ein Thema für Sie ist.
Die große Zahl existierender Checks ist auch der Grund, warum die alte Check-API für eine Übergangszeit weiterhin unterstützt wird.

*Betrifft Sie das?* Das Thema Check-API _kann_ Sie betreffen, wenn Sie die mit {CMK} ausgelieferten um Ihre eigenen, selbstgeschriebenen Checks erweitert haben und/oder wenn Sie Plugins aus anderen Quellen nutzen und diese z.B. von der link:https://exchange.checkmk.com/[{CMK} Exchange^] heruntergeladen haben.
Das Thema betrifft Sie, wenn eines, einige oder gar alle dieser Check-Plugins noch der alten Check-API folgen.
Die betroffenen Dateien finden Sie in den xref:local_files[lokalen Dateien] Ihrer Instanz.

*Was müssen Sie tun?* Wir versuchen Ihnen den Umstieg auf die neue Check-API so leicht und komfortabel wie möglich zu machen:

So wie beim Update auf die Version {v20} versucht {CMK} auch beim Update auf die Version {v21} alle lokalen Plugins aus den Verzeichnissen `~/local/share/check_mk/checks` und `~/local/share/check_mk/inventory` automatisch auf die neue Check-API zu migrieren.
Diese „Automigration“ passiert zur Laufzeit; die Plugin-Dateien werden nicht verändert.
Wie Sie sich nach dem Update die Ergebnisse anzeigen lassen können, erfahren Sie im Kapitel xref:automigration[Automigration auf die Check-API überprüfen].

Die Chancen stehen zwar gut, dass die Automigration Ihrer Check-Plugins reibungslos funktioniert, dennoch erfordert die ebenfalls in der Version {v20} durchgeführte Umstellung auf Python 3 möglicherweise einige Anpassungen.
Durch die neue Check-API und die Code-Basis Python 3 gibt es gleich zwei gute Gründe, Ihre selbstgeschriebenen Check-Plugins zu überarbeiten.
Wir informieren Sie ausführlich über die notwendigen Schritte im link:https://blog.checkmk.com/de/migration-von-checkplugins-auf-checkmk-2.0[Blogpost zur Migration von Check-Plugins.^]

Zu guter Letzt punktet die neue Check-API mit verbesserter Dokumentation:
Es gibt einen einführenden Artikel zur xref:devel_check_plugins#[Programmierung eigener Check-Plugins] und die stets aktuelle Plugin-API-Referenzdokumentation.
Beides können Sie über die {CMK}-Oberfläche aufrufen -- im [.guihint]#Help#-Menü der Navigationsleiste unter [.guihint]#Developer resources.#


// {v20} Thema - auch gültig für {v21}
[#incompatible_mkps]
=== Inkompatible und obsolete MKPs

Über die xref:glossar#mkp[{CMK}-Erweiterungspakete (MKPs)] lässt sich Ihr Monitoring-System recht einfach und bequem erweitern.
Auf der einen Seite kommt es dabei vor, dass solche MKPs nicht weiter gepflegt werden und dann ggf. mit neuen Versionen von {CMK} nicht mehr kompatibel sind.
Auf der anderen Seite nehmen wir immer wieder neue Plugins und Funktionserweiterungen in {CMK} auf, weshalb MKPs mitunter obsolet werden.
Ihre Funktionalität wird schlicht von {CMK} selbst sichergestellt.

*Betrifft Sie das?* Falls Sie MKPs installiert haben, ist aus diesem Grund eine Prüfung dieser MKPs dringend geboten -- besonders vor einem umfangreichen Update.
So verhindern Sie, dass inkompatible Pakete das Update behindern oder im Anschluss an das Update doppelte oder zumindest sehr ähnliche Services entstehen.

*Was müssen Sie tun?* Prüfen Sie hierzu Ihre installierten MKPs gegen unseren link:https://checkmk.com/de/integrations[Katalog der Check-Plugins^] und entfernen Sie Pakete, welche inzwischen nativ von {CMK} bereitgestellt werden.
Bei dieser Gelegenheit können Sie auch MKPs entfernen, die eventuell nur mal für einen Probelauf installiert worden sind.
Eine Auflistung finden Sie über [.guihint]#Setup > Maintenance > Extension packages#.
// MA: Hier würde ich der Einfachheit halber einen Screenshot erwarten.
Auf der Kommandozeile können Sie sich installierte Erweiterungen mit dem folgenden Befehl anzeigen lassen:

[{shell}]
----
{c-omd} mkp list
my_mkp_from_exchange
my_peronal_mkp
----

Zu jedem gelistetem MKP können Sie dann in der Folge auch die Dateien anzeigen lassen, die zu dem Paket gehören:

[{shell}]
----
{c-omd} mkp list my_personal_mkp
/omd/sites/mysite/local/lib/check_mk/base/plugins/agent_based/check_mk.py
/omd/sites/mysite/local/share/check_mk/web/plugins/metrics/custom_metrics.py
----

Sollten Sie über die Prüfung der installierten MKPs und dem Abgleich mit unserem Katalog nicht alle Pakete zuordnen können, empfiehlt sich der hiernach beschriebene xref:dry_run[Probelauf des Updates,] um dabei Inkompatibilitäten zu identifizieren und dann in Ihrem produktiven Monitoring vor dem Update zu entfernen.


// {v20} Thema - auch gültig für {v21}
[#incompatible]
=== Inkompatible Änderungen

Wie in jeder {CMK} Version, so gibt es auch in der aktuellen Version {v21} Änderungen der Software, die Rückwirkungen auf ihre {CMK}-Installation haben _können_.
Eine sogenannte _inkompatible Änderung_ erfordert, dass Sie manuelle Anpassungen durchführen, um bestehende Funktionen weiterhin wie gewohnt ablaufen zu lassen und/oder neue Funktionen nutzen zu können.

*Betrifft Sie das?* In aller Regel wird es inkompatible Änderungen geben, die auch Ihre {CMK}-Installation betreffen.
Eine generelle Aussage ist aber leider unmöglich.
In diesem Artikel haben wir diejenigen Themen zusammengetragen, die für alle oder die meisten {CMK}-Installationen zutreffen.
Es kann aber sein, dass es darüber hinaus weitere, für Sie relevante Änderungen gibt, zum Beispiel bei Checks, die Sie in Ihrer Installation verwenden.

*Was müssen Sie tun?* Nachdem Sie das xref:update[Update] durchgeführt haben, werden Ihnen in der {CMK}-Oberfläche Anzahl und Inhalt der inkompatiblen Änderungen angezeigt, und Sie werden aufgefordert, diese zu prüfen und zur Kenntnis zu nehmen.
Also werden Sie auf jeden Fall mit diesem Thema konfrontiert werden -- allerdings erst, nachdem Sie das Update durchgeführt haben.

Es ist daher eine gute Idee, sich bereits *vor* dem Update einen Überblick über die inkompatiblen Änderungen zu verschaffen:
Öffnen Sie die Liste der link:https://checkmk.com/de/werks?search=&cmk_version$$[$$$$]$$=2.1&compatible=0[Werks.^]
(Die Software-Entwicklung von {CMK} ist in sogenannten Werks organisiert.)
In der Beschreibung eines Werks finden Sie Hinweise, was gegebenenfalls zu tun ist, um die Änderung kompatibel zu machen.

Die frustrierende Nachricht:
Die Werkliste einer Version ist sehr, sehr lang -- selbst wenn sie nur die inkompatiblen Änderungen enthält.
Die tröstliche Nachricht:
An der Anzahl der Änderungen können Sie sehen, wie groß unsere Anstrengungen sind, {CMK} für Sie zu verbessern.


[#update]
== Update

[#dry_run]
=== Best Practises beim Update

Im Folgenden beschreiben wir bewährte Vorgehensweisen (_best practises_), welche wir selbst bei Updates von großen {CMK}-Umgebungen befolgen.
Diese sind sicherlich nicht in jeder Umgebung Pflicht, Sie können Ihnen den Prozess des Updates jedoch erleichtern.


==== Betriebssystem aktualisieren

Das Betriebssystem auf einem {CMK}-Server sollte ohnehin immer auf dem aktuellen Stand sein.
Vor einem Update von {CMK} schadet es aber bestimmt nicht, sich dessen noch einmal zu versichern:
mithilfe von `apt` (für Debian und Ubuntu), `yum` (für Red Hat Enterprise Linux (RHEL) basierte Systeme) oder `zypper` (für SUSE Linux Enterprise Server).


==== {CMK}-Version aktualisieren
// Werk #13320: omd update: Add version compatibility barrier

Vor dem Update auf die Version {v21} muss auf der {CMK}-Instanz die Version {v20} installiert sein.

Wir haben bereits früher von einem Update mit Auslassung einer Hauptversion abgeraten, da es dazwischen einfach zu viele Änderungen gibt, die ein reibungsloses Update behindern und mit großer Wahrscheinlichkeit zu Problemen führen.
Mit link:https://checkmk.com/de/werk/13320[Werk #13320^] wird aus dieser Empfehlung nun eine Voraussetzung -- und eine Sperre eingeführt, die zum Beispiel ein direktes Update von Version {v16} auf {v21} verhindert.

Ein Update auf die Version {v21} setzt zurzeit keine bestimmte {v20} Patch-Version voraus.
Es gibt jedoch auch hier gute Gründe, den Sprung auf die {v21} nur von der neuesten {v20} Patch-Version aus zu starten, da z.B. ein {v20} Patch Korrekturen enthalten kann, die das Update auf die Version {v21} erleichtern.

Daher empfehlen wir, zuerst {CMK} auf die neueste {v20} Patch-Version zu aktualisieren und erst dann das Update auf die {v21} durchzuführen.


==== Probelauf des Updates durchführen

In großen Umgebungen, in denen auch das Zurückspielen eines selbstverständlich vorhandenen Backups Ihrer {CMK}-Umgebung mit einem gewissen zeitlichen Aufwand verbunden wäre, empfiehlt es sich, vor dem Update der produktiven Umgebung, einen Test mit einer geklonten Instanz durchzuführen.
Zu diesem Zweck können Sie beispielsweise das letzte reguläre Backup Ihrer Instanz unter einem anderen Namen wiederherstellen.

[{shell}]
----
{c-root} omd restore newsite /path/to/backup
----

*Alternativ* können Sie Ihre Instanz auch per `omd cp` kopieren.
Dafür muss die Instanz allerdings kurzzeitig gestoppt werden:

[{shell}]
----
{c-root} omd stop mysite
{c-root} omd cp mysite newsite
----

Führen Sie das Update im Anschluss erst einmal auf dieser neuen geklonten Instanz durch, um hier beispielsweise die oben angesprochenen lokalen Änderungen in der neuen Umgebung zu prüfen.


[#automatic_agent_updates]
==== Agenten-Update vorübergehend abschalten

{cee-only}
Wenn Sie die automatischen Agenten-Updates verwenden, sollten Sie überlegen, diese vor dem Update von {CMK} vorübergehend zu deaktivieren, um den Wechsel auf die neuen Agenten bei den Hosts später kontrolliert vollziehen zu können.
Dazu wählen Sie zuerst [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX# und auf der folgenden Seite den Menüeintrag [.guihint]#Agents > Automatic updates.#
Durch Klick auf den Knopf icon:icon_edit[alt="Symbol zum Bearbeiten eines Listeneintrags."] vor dem [.guihint]#Master switch# können Sie das Agenten-Update komplett abschalten:

image::update_major_automatic_agent_updates.png[alt="Abschaltung des Agenten-Updates per Hauptschalter."]

Nach dem erfolgreichen Update von {CMK} können Sie das Agenten-Update auf gleichem Weg wieder anschalten.

Wir empfehlen an dieser Stelle das automatische Agenten-Update erstmal nur für einzelne Hosts oder Host-Gruppen wieder zu aktivieren.
Auf diese Weise wird der neue Agent nicht gleich auf all Ihre Server ausgerollt und Sie können sich auf einigen wenigen Systemen mit den neu angelieferten Daten vertraut machen.
Auch aufgrund der deutlich gestiegenen Zahl an mitgelieferten Check-Plugins könnten Sie eine ganze Reihe neuer Services finden, welche Sie dann auf den von Ihnen gewählten Testsystemen richtig einstellen können.
Eventuell sind für neue Services auch neue Schwellwerte vonnöten.
Wenn Sie dies erst einmal im Kleinen angehen, ersparen Sie schnell einige Fehlalarme.

Auf der oben angegebenen Seite können Sie dafür einfach ein paar Hosts oder Host-Gruppen in die entsprechenden Felder eintragen und dann den [.guihint]#Master switch# wieder aktivieren.

image::update_major_activate_update_on_selected_hosts.png[alt="Optionen beim Agenten-Update zur Aktivierung auf bestimmten Hosts."]

*Wichtig:* Denken Sie daran, diese Einschränkungen auf explizite Hosts und Host-Gruppen wieder zu entfernen, sobald Sie mit den Ergebnissen zufrieden sind.


[#notifications]
==== Benachrichtigungen vorübergehend abschalten

Sie sollten auch überlegen, xref:glossar#notification[Benachrichtigungen] in der Instanz vor dem Update abzuschalten -- aus ähnlichen Gründen, die wir im vorherigen Abschnitt zu den automatischen Agenten-Updates erklärt haben.
So vermeiden Sie, dass Ihre Kollegen aus dem Monitoring-Team _unnötige_ Benachrichtungen erhalten.

Die Benachrichtigungen können Sie zentral im Snapin xref:user_interface#master_control[Master control] mit dem Hauptschalter [.guihint]#Notifications# abschalten.

Es kann durchaus vorkommen, dass nach dem Update der eine oder andere Service {CRIT} ist, der dies vorher nicht gewesen ist.
Kümmern Sie sich nach dem Update zuerst um neu auftretende Probleme.
Die unbehandelten Probleme (_unhandled problems_) können Sie sich z.B. im Snapin xref:user_interface#overview[Overview] anzeigen lassen.

*Wichtig:* Vergessen Sie nicht, die Benachrichtigungen wieder einzuschalten, z.B. dann, wenn sich die Zahl der unbehandelten Probleme nach dem Update auf das Niveau vor dem Update eingepegelt hat.


[#update_distributed_monitoring]
=== Update im verteilten Monitoring
// Werk #13313: Distributed monitoring: Improve version compatibility validation

Es gibt unterschiedliche Vorgehensweisen, um das Update der in einem xref:distributed_monitoring#[verteilten Monitoring] beteiligten Instanzen durchzuführen, d.h. der Zentralinstanz und der Remote-Instanzen.

*Wichtig:* Für welches Vorgehen Sie sich auch entscheiden:
Sie sollten auch in diesem Szenario vorher xref:backup#[Backups] anlegen.

Das empfohlene, sichere Vorgehen ist das _Update in einem Rutsch_, bei dem Sie folgende Schritte ausführen:

. Alle Instanzen stoppen.
. Das Update für alle Instanzen durchführen.
. Die aktualisierten Instanzen wieder starten.

Es gibt noch eine andere Variante: das _Update im laufenden Betrieb._
Dieses Vorgehen wird unter anderem dann benötigt, wenn man eine große Menge von verteilten Instanzen verwaltet, die aus technischen oder organisatorischen Gründen nicht in einem Rutsch aktualisiert werden können.

Bei einem Update im laufenden Betrieb müssen Instanzen mit unterschiedlichen {CMK}-Versionen für eine Übergangszeit miteinander kommunizieren -- solange, bis das Update aller beteiligten Instanzen abgeschlossen ist.
Damit diese Zusammenarbeit klappt, müssen die in diesem Mischbetrieb beteiligten Versionen kompatibel sein.

Mit link:https://checkmk.com/de/werk/13313[Werk #13313^] wurden Versionsprüfungen hinzugefügt, die sicherstellen, dass die beteiligten Instanzen kompatible Versionen verwenden.
Die Kurzfassung ist:
Instanzen müssen die gleiche Hauptversion haben -- mit einer Ausnahme: die {CMK}-Version einer Remote-Instanz darf um genau eine Hauptversion höher sein als die der Zentralinstanz.
Die folgende Tabelle zeigt die möglichen Kombinationen beim Update von {v20} zur {v21}:

[cols="40,40,~",options="header"]
|===
|Zentralinstanz |Remote-Instanz |Erlaubt?
|{v20} |{v20} |Ja
|{v20} |{v21} |Ja
|{v21} |{v20} |*Nein*
|{v21} |{v21} |Ja
|===

Aus diesen Regeln folgt, dass bei einem Update im laufenden Betrieb die Zentralinstanz zuletzt aktualisiert wird.
Beachten Sie, dass auch beim Update im verteilten Monitoring gilt: Hauptversionen dürfen nicht ausgelassen werden, sodass z.B. eine Verbindung zwischen einer {v16} und einer {v21} Instanz nicht unterstützt wird.

*Hinweis:* Da sich der Funktionsumfang verschiedener {CMK}-Versionen unterscheidet, kann es sein, dass einige Features von {CMK} in diesem Mischbetrieb nicht oder nur eingeschränkt funktionieren.
In einem Mischbetrieb können auch bei kompatiblen Versionen Probleme auftreten und ein reibungsloses Zusammenspiel ist nur dann gesichert, wenn alle Instanzen die gleiche Hauptversion haben.
Sie sollten daher den Zeitraum eines Mischbetriebs mit verschiedenen Versionen möglichst kurz halten und nach dem Start des Updates alle Instanzen zügig aktualisieren.


=== Das Update durchführen

Am eigentlichen Update der Software hat sich in der {CMK} {v21} nichts Grundlegendes geändert, d.h. Sie installieren die neue Version, führen das Update der {CMK}-Instanz durch, kümmern sich um Konflikte (falls es denn welche geben sollte) und überprüfen und bestätigen die inkompatiblen Änderungen.

Führen Sie die Update-Prozedur so aus, wie sie im xref:update#detailed[Artikel zu Updates und Upgrades] beschrieben ist.


[#follow-up]
== Nachbereitungen

[#gui]
=== Änderungen der Benutzeroberfläche
// Werk #13736 - Remove obsolete sidebar snapins

Die Benutzeroberfläche (GUI) von {CMK} wurde mit Version {v20} komplett neu gestaltet.
In der neuen Version {v21} wird sie Ihnen dagegen sehr vertraut vorkommen, denn es hat kaum Änderungen im Vergleich zur {v20} gegeben, die auf den ersten Blick sichtbar sind.
Allerdings haben sich Menüs, Menüeinträge und andere Details geändert, um neue Funktionen verfügbar zu machen -- und bestehende zu verbessern.

In den Artikeln dieses Handbuchs stellen wir Ihnen diese Änderungen vor und im xref:intro_welcome#[Leitfaden für Einsteiger] finden Sie eine ausführliche Einführung in die wichtigsten Elemente der xref:intro_gui#[Benutzeroberfläche.]


==== Entfernte Snapins für die Seitenleiste

Mit link:https://checkmk.com/de/werk/13736[Werk #13736^] wurden einige veraltete und wenig genutzte xref:glossar#snapin[Snapins] für die Seitenleiste entfernt.
Für fast alle dieser Snapins gibt es Ersatz, meist über Menüeinträge der xref:glossar#navigation_bar[Navigationsleiste.]


[#automigration]
=== Automigration auf die Check-API überprüfen
// Werk #10601: Auto migration of check plugins to new section definitions

Sie können überprüfen, ob alle lokalen Plugins aus den Verzeichnissen `~/local/share/check_mk/checks` und `~/local/share/check_mk/inventory` automatisch auf die neue xref:check-api[Check-API] migriert werden können.

*Betrifft Sie das?* Diese Überprüfung ist sinnvoll, wenn in Ihren lokalen Dateien Check-Plugins existieren, die nach der alten, bis zur Version {v16} gültigen Check-API programmiert wurden.

*Was müssen Sie tun?* Führen Sie als Instanzbenutzer das folgende Kommando aus:

[{shell}]
----
{c-omd} cmk -R
Failed to auto-migrate legacy plugin to check plugin: mssql_counters
Please refer to Werk 10601 for more information.
----

Die Meldung oben zeigt, dass ein Plugin nicht automatisch migriert werden konnte.
Alle gelisteten Plugins müssen von Ihnen manuell migriert werden.
Es gibt einige Gründe, aus denen eine Automigration nicht durchgeführt werden kann und die Sie im genannten link:https://checkmk.com/de/werk/10601[Werk #10601^] nachlesen können.
Wie Sie die manuelle Migration durchführen, erfahren Sie im link:https://blog.checkmk.com/de/migration-von-checkplugins-auf-checkmk-2.0[Blogpost zur Migration von Check-Plugins.^]


[#service_discovery]
=== Services aktualisieren

Wie jede Hauptversion, so bringt auch {CMK} {v21} eine ganze Reihe neuer Check-Plugins mit sich.
Sollten Sie den xref:wato_services#discovery_check["Discovery Check"] nicht einsetzen, d.h. das automatische Update der Service-Konfiguration über die periodische Service-Erkennung, werden Sie auf einer ganzen Reihe von Hosts die Suche nach Services durchführen müssen.

Wenn Ihre Hosts entsprechend organisiert sind (z.B. in Ordnern), können Sie hierfür zumeist mit der Funktion [.guihint]#Bulk discovery# arbeiten.
Diese finden Sie unter [.guihint]#Setup > Hosts > Hosts# und dann im Menü [.guihint]#Hosts > Discover services.#

Im Folgenden listen wir einige Bereiche mit den meisten Neuerungen auf.


[#service_check_mk_agent]
==== Check_MK und Check_MK Agent
// Werk #13849: Add Check_MK service for hosts without passive services
// Werk #13697: "Check_MK Agent" service: Combine with new plugin service

image::update_major_check_mk_services.png[alt="Die beiden Services 'Check_MK' und 'Check_MK Agent' im Monitoring."]

Die Services [.guihint]#Check_MK# und [.guihint]#Check_MK Agent# heißen zwar noch genauso wie in der Version {v20}, haben aber in der {v21} teilweise eine andere Bedeutung:

* Der Service [.guihint]#Check_MK Agent# ist nun immer präsent und liefert alle Informationen, die mit der Agentenverteilung (_agent deployment_) zu tun haben, wie die Version des Agenten, der Zeitpunkt des letzten Updates, die Zahl von Agentenplugins und lokalen Checks, oder die Beschränkung der IP-Adressen.
Bisher kümmerte sich dieser Service nur um die Agenten-Updates -- und war auch nur dann verfügbar, wenn Agenten-Updates eingerichtet waren.

* Auch der Service [.guihint]#Check_MK# ist nun immer da --  vorher war er es nur dann, wenn auf dem Host passive Services liefen.
Der Service [.guihint]#Check_MK# kümmert sich nun ausschließlich um den Zustand der verwendeten Agenten im laufenden Betrieb (_operational state_).
Er meldet z.B. Verbindungsfehler oder fehlende Daten und zeigt die Ausführungszeit.


[#cluster_services]
==== Cluster-Services
// Werk #12908: Add predefined cluster modes for all services

Mit {CMK} Version {v21} verändert sich das Verhalten einiger xref:clustered_services#[Cluster-Services].
Betroffene Services nehmen den Zustand {UNKNOWN} an und erfordern eine Anpassung der Konfiguration.

{CMK} kennt vier Cluster-Modi:

* _Best_ (der Wert der besten Node bestimmt den Gesamtzustand)
* _Worst_ (analog: Wert der schlechtesten Node)
* _Failover_ (nur eine Node darf {OK} liefern)
* _Natives Clustering_ per API-Funktion (frei programmierbar, z.B.: _80% der Nodes müssen {OK}_ sein, damit der Cluster OK ist)

Legacy-Plugins, welche die alte Check-API nutzen, verfügten bislang über eine zusätzliche implizite Cluster-Möglichkeit, bei der die Ausgabe der zugeordneten Hosts lediglich der Reihe nach ausgewertet wurde und der letzte erhaltene Einzelzustand den Gesamtzustand des Clusters bestimmte.
Da dieses Verhalten nicht verlässlich war, wurde es in {v21} entfernt.

Im Zuge der Portierung auf {v21} haben wir bei einigen mitgelieferten Check-Plugins den zur {v20} nachgerüsteten _nativen Cluster-Modus_ wieder entfernt, wenn er nicht sinnvoll war.
Stattdessen haben wir als Standard eines der Verhalten _best_, _worst_ oder _failover_ ausgewählt.
link:https://checkmk.com/de/werk/12908#[Diese Liste^] zeigt betroffene Plugins und das neue Standardverhalten.
Ebenfalls betroffen sind selbst programmierte oder aus der link:https://exchange.checkmk.com[{CMK} Exchange^] bezogene Plugins, die keine API-Integration für den nativen Cluster-Modus verwenden.

All diese Dienste nehmen nach dem Update auf {v21} den Zustand {UNKNOWN} an, wenn der einst ausgewählte Cluster-Modus nicht mehr unterstützt wird.
Verwenden Sie in diesen Fällen die Regel [.guihint]#Aggregation options for clustered services#, um einen der drei Cluster-Modi _best_, _worst_ oder _failover_ zu definieren.


[#service_descriptions]
==== Service-Beschreibungen

Jedes Update von {CMK} bedeutet, dass Service-Beschreibungen geändert werden, um die Konsistenz der Benennung innerhalb des Monitorings und der Dokumentation von {CMK} zu verbessern.
Da die Änderung von Service-Beschreibungen bedeutet, dass mitunter Regeln angepasst werden müssen und historische Monitoring-Daten verloren gehen, belässt {CMK} bei Updates zunächst die alten Beschreibungen.
Sie sollten bei Services, bei denen Verlust alter Monitoring-Daten zu verschmerzen und der Aufwand für die Anpassung von Regeln überschaubar ist, zeitnah auf neue Service-Beschreibungen umstellen.

Gehen Sie hierfür in [.guihint]#Setup > General > Global Settings > Execution of checks# die Liste [.guihint]#Use new service descriptions# durch und identifizieren Sie die Services, bei denen die Checkboxen noch nicht aktiv sind und aktivieren Sie diese.
Nach Anwenden der Änderungen sind die neuen Service-Beschreibungen aktiv und es werden wenige Minuten vergehen, bis Sie wieder definierte Zustände der betroffenen Services im Monitoring sehen.


[#new_ports]
=== Neue Ports

Um die xref:agent_registration[TLS-Registrierung] von Hosts im Monitoring durchzuführen, benötigen diese Zugriff auf die Ports 443 (respektive 80) für REST-API-Anfragen und Port 8000 (neue Komponente _Agent Receiver_).
Achten Sie gegebenenfalls darauf, Routing- und Firewall-Einstellungen dahingehend anzupassen, dass die betreffenden Hosts auf diese Ports des {CMK}-Servers zugreifen können.

Sollten Sicherheitsrichtlinien dagegen sprechen, diese Ports verfügbar zu machen, können Sie eine xref:agent_linux#proxyregister[Registrierung im Auftrag] direkt auf dem {CMK}-Server durchführen.


[#agent_registration]
=== Agenten für TLS registrieren

Nach der Aktualisierung der Agenten auf {v21} nimmt der Dienst [.guihint]#Check_MK Agent# für die betreffenden Hosts den Status {WARN} an und zeigt die Meldung _TLS is not activated on monitored_ Host.
In den beiden Artikeln zum xref:agent_linux#[Linux-] und xref:agent_windows#[Windows-]Agenten beschreiben wir die Registrierung der verwendeten Zertifikate mit dem Kommandozeilenwerkzeug `cmk-agent-ctl`.
Dieses Werkzeug stellt auch viele Optionen zur automatischen Registrierung bereit -- beispielsweise per Postinstall-Snippet in xref:bakery_api#[Bakery Plugins].

Falls für einen Übergangszeitraum unverschlüsselte Datenübertragung für den Parallelbetrieb von {v20}-Servern in einer {v21}-Umgebung erwünscht ist, passen Sie den Regelsatz [.guihint]#Checkmk Agent installation auditing# an, damit der Service [.guihint]#Check_MK Agent# trotz fehlender Registrierung den Status {OK} annehmen kann.


[#kubernetes]
=== Das neue Kubernetes-Monitoring

Das Kubernetes-Monitoring wurde in {CMK} {v21} von Grund auf neu geschrieben und ermöglicht nun eine vereinfachte und effiziente Überwachung.
Da sich die Architektur in Version {v21} grundlegend geändert hat, ist eine Übernahme oder Weiterschreibung bisheriger Monitoring-Daten Ihrer Kubernetes-Objekte aus früheren {CMK}-Versionen leider nicht möglich.

*Betrifft Sie das?* Das betrifft Sie, wenn Sie in der Version {v20} den {CMK}-Spezialagenten zur Überwachung von Kubernetes verwendet haben.
Der alte Spezialagent und die zugehörigen Check-Plugins werden zwar in der Version {v21} noch funktionieren, aber anschließend aus {CMK} xref:kubernetes_20[entfernt werden.]
Wir empfehlen daher den kompletten Umstieg auf das neue, stark verbesserte Kubernetes-Monitoring der Version {v21}.

*Was müssen Sie tun?* Setzen Sie das Kubernetes-Monitoring komplett neu auf, wie es im Artikel zur xref:monitoring_kubernetes#[Überwachung von Kubernetes] beschrieben ist.


[#encrypt_notification_spooler]
=== Benachrichtigungs-Spooler verschlüsseln
// Werk #13610: Notification spooler connections can now be encrypted

*Betrifft Sie das?*
Wenn Sie verteiltes Monitoring mit xref:notifications#async[zentraler Benachrichtigung] verwenden, profitieren Sie von erhöhter Sicherheit bei Aktivierung der Transportverschlüsselung des Notification Spooler `mknotifyd`.

*Was müssen Sie tun?*
Bei der Aktualisierung vorhandener {CMK}-Installationen bleiben bereits konfigurierte Verbindungen zunächst ohne Verschlüsselung weiter nutzbar.
Allerdings wird in diesem Fall [.guihint]#Analyze configuration# die Einstellung mit {CRIT} bemängeln.
Ändern Sie nach Migration aller beteiligten Instanzen auf {v21} die Option [.guihint]#Global settings > Notification spooler configuration > Encryption# auf die Einstellung [.guihint]#Encrypt communication with TLS#.
Neue Verbindungen verwenden bei der Erstellung automatisch die TLS-Verschlüsselung.


[#rest-api]
=== REST-API ersetzt Web-API
// Werk #13640: Deprecation of Web API

Die Web-API (auch xref:web_api#[HTTP-API] genannt) ist abgekündigt und wird in der nächsten {CMK}-Version xref:web-api[entfernt werden.]
Ersatz steht bereit mit der in Version {v20} eingeführten xref:rest_api#[REST-API.]

*Betrifft Sie das?* Das betrifft Sie, falls Sie eigene Skripte geschrieben haben, die die Web-API nutzen.

Die Web-API wird in der {CMK}-Version weiterhin funktionieren
und in bestehenden Instanzen, die von der Version {v20} auf {v21} aktualisiert werden, bleibt die Web-API eingeschaltet.
In Instanzen, die mit der Version {v21} neu erstellt werden, ist die Web-API bereits in den [.guihint]#Global settings# abgeschaltet.
Den Schalter zum Ein- und Ausschalten der Web-API finden Sie unter [.guihint]#Setup > General > Global settings > Site management > Disable Web API.#

*Was müssen Sie tun?* Wir empfehlen, alle bestehenden Skripte, die die Web-API verwenden, so bald wie möglich auf die REST-API zu migrieren, um Probleme frühzeitig zu erkennen, bevor Sie auf die {CMK}-Version {v22} umsteigen.

Die REST-API bietet bereits jetzt Zugriff zu mehr Bereichen in {CMK} als die Web-API, z.B. zu Host-Status, Service-Status, Wartungszeiten, Zeitperioden, Quittierung von Problemen und der Business Intelligence (BI).

Die in der REST-API noch fehlenden Funktionen zum Zugriff auf Instanzen im verteilten Monitoring und auf Metriken und Graphen werden in {v21} Patch-Versionen nachgeliefert, sodass im Laufe der Zeit alle Funktionen zur Verfügung stehen, die auch in der Web-API genutzt werden konnten.


[#outlook]
== Ausblick

In diesem Kapitel geht es um Themen, die nicht die aktuelle {CMK} Version {v21}, sondern eine der darauf folgenden Versionen betreffen.


[#web-api]
=== Die Web-API wird entfernt
// Werk #13640: Deprecation of Web API

Die Web-API (auch HTTP-API genannt) wird in der nächsten {CMK}-Version {v22} entfernt.
Die Web-API wird ersetzt durch die in der {v20} eingeführte xref:rest-api[REST-API].


[#kubernetes_20]
=== Der alte Kubernetes Spezialagent wird entfernt
// Werk #13561: agent_kubernetes: deprecate special agent and associated checks

Der {CMK} {v20} Spezialagent für das Kubernetes-Monitoring und die zugehörigen Check-Plugins werden in der nächsten {CMK}-Version {v22} entfernt.
Details finden Sie im link:https://checkmk.com/de/werk/13561[Werk #13561^].
Ersatz gibt es in Version {v21} mit dem komplett xref:kubernetes[neuen Kubernetes-Monitoring.]


[#nsca]
=== NSCA wird nicht mehr unterstützt
// Werk #13644: Deprecating NSCA as part of Checkmk

Die Unterstützung für den Nagios Service Check Acceptor (NSCA) wird in der nächsten {CMK}-Version {v22} entfernt.

NSCA ist ein Nagios Add-on, um Ergebnisse xref:wato_services#passive_checks[passiver Checks] von fernen Hosts in einer verteilten Nagios-Konfiguration zu erhalten.
Dieses veraltete Verfahren zum Aufbau eines xref:distributed_monitoring#[verteilten Monitoring] bietet gegenüber den {CMK}-eigenen Verfahren keine Vorteile.

Details und Hinweise zum Ersatz finden Sie im link:https://checkmk.com/de/werk/13644[Werk #13644^].


[#hw_sw_inventory_plugin_api]
=== Die alte HW/SW-Inventur Plugin-API wird nicht mehr unterstützt
// Werk #14084: Deprecate old HW/SW inventory plugin API

Die Unterstützung der alten Plugin-API für die HW/SW-Inventur wird in der nächsten {CMK}-Version {v22} entfernt.

Die dieser API folgenden Plugins befinden sich im Instanzverzeichnis unter `~/share/check_mk/inventory` und (als lokale Dateien) unter `~/local/share/check_mk/inventory`.
Diese Plugins funktionieren in der Version {v21}, werden aber ab der Version {v22} ignoriert werden.

Falls Sie benutzerdefinierte Plugins nutzen, migrieren Sie diese auf die neue Check-API bevor Sie auf die Version {v22} wechseln.
Im link:https://checkmk.com/de/werk/14084[Werk #14084^] finden Sie weitere Details und Informationen zur Migration.
////