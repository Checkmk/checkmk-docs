//encoding: utf-8
include::global_attr.adoc[]
= Update to version {v21}
:revdate: 2022-05-18
:title: Update to version {v21}
:description: In this article you will learn what to consider when updating from {CMK} version 2.0.0 to 2.1.0.

{related-start}
xref:update#[Updates and Upgrades]
xref:install_packages#[Basic information on the installation of {CMK}]
{related-end}


_In order to quickly provide you the new information for {CMK} version {v21}, we have had this draft machine translated for now. Update and language revision will follow later._

[#intro]
== Introduction

In this article you will find the most important topics relevant to updating your {CMK} version {v20} to {v21}.

We recommend that you read through the entire article before the update so that you know exactly what to expect -- before, during and after the update.


[#prep]
== Preparations

This chapter gives you the overview of the topics you should take care of before you perform the update.
Not every topic will probably be relevant for you: You can tick one internally and move on to the next topic.


[#backup]
=== Backup

As before updating any production software, you should check that your backups are up-to-date before updating {CMK}.

*Does this affect you?* Yes.

*What do you need to do?* If you create your backups automatically via [.guihint]#Setup > Maintenance > Backups#, check there whether the last backup jobs have run through without errors.

For more information, see the articles on xref:backup#[backups] and on xref:omd_basics#backup[backing-up and restoring sites].


[#linux_versions]
=== Linux distribution versions

In {CMK} version {v21}, some obsolete versions of the Ubuntu distribution are no longer supported.
There are no changes for users of Debian, SLES and RHEL (and binary-compatible derivatives such as CentOS).

*Does this affect you?* This affects you if your {CMK} server has one of the following Ubuntu versions installed that are still supported in {v20}:

* Ubuntu 20.10 _Groovy Gorilla_
* Ubuntu 21.04 _Hirsute Hippo_

Still supported at release of {v21}, but not recommended:
For Ubuntu 21.10 (_Impish Indri_), support with security updates was discontinued by Canonical during the beta phase of {v21}.
Debian 9 (_Stretch_) will also no longer receive security updates shortly after the release of {CMK} {v21}.

New additions are Debian 11 _Bullseye_ and Ubuntu 22.04 _Yammy_.
For both distributions we also build installation packages of {v20} to simplify the recommended update path.

*What do you need to do?* Before updating {CMK}, first upgrade the Linux distribution.
Make sure that the target version of the Linux distribution is supported by {CMK} {v20} *and* {v21}.

You can find out which Linux distribution versions {CMK} supports in the xref:install_packages#supported_distributions[installation article] and on the link:https://checkmk.com/download[download page^] after you have selected the {CMK} version and your Linux distribution.

If it is now necessary to upgrade Linux before updating {CMK}, we recommend the following procedure:

. First stop your {CMK} site:
+
[{shell}]
----
{c-root} omd stop mysite
----

[start=2]
. Unmount the site's tmp directory:
+
[{shell}]
----
{c-root} umount /opt/omd/sites/mysite/tmp
----

[start=3]
. Move the entire `omd` directory so that no unwanted changes can occur in the next step.
During a release upgrade, all packages whose dependencies can no longer be fulfilled are usually removed.
{CMK} would also belong to these packages.
To prevent any possible data loss here, this step is necessary and can be carried out via `mv`.
+
[{shell}]
----
{c-root} mv /opt/omd /opt/omd.bak
----

[start=4]
. Upgrade Linux according to the instructions from the respective distributor.

. After the successful upgrade of your Linux distribution, you must now move the `omd` directory that you temporarily put into a safe place back into its correct location:
+
[{shell}]
----
{c-root} mv /opt/omd.bak /opt/omd
----

[start=6]
. Now install the package from {CMK} that matches the new version of the distribution you are using.
*Important:* The version number of {CMK} must be exactly the same as the one used before.
So if you were using {CMK} 2.0.0p23 before upgrading the distribution, now install the 2.0.0p23 that matches your new Linux distribution version.
+
In the case of Ubuntu, the following command would suffice at this point:
+
[{shell}]
----
{c-root} apt install /tmp/check-mk-enterprise-2.0.0p23_0.jammy_amd64.deb
----

+
*Note:* During installation, specify the full path to the DEB file via `apt install`.

When reinstalling {CMK}, follow the xref:install_packages#distribution_instructions[detailed installation instructions] for your respective distribution.


[#agents]
=== The agents for Linux and Windows

With {v21}, {CMK} first introduces for the Linux and Windows agents on x86_64 the two components _Agent Controller_ (on the host) and _Agent Receiver_ (on the server), which allow TLS encrypted transmission of the agent output.
The Agent Controller initially operates in a compatibility mode (*legacy pull mode*) that also allows access from {v20} sites.

*Does this affect you?* Yes.

*What do you need to do?* Identify those Windows hosts in monitoring that are using Windows Server operating systems 2008 R2 and Client operating systems 7 or later on x86_64.
The same applies to Linux hosts on x86_64 that use `systemd` version 220 or later for service management.
On these hosts, register with the monitoring server after the update to use TLS encrypted transmission.
For more detailed information, see the detailed instructions for xref:agent_linux#registration[Linux] or xref:agent_windows#registration[Windows].


[#local_files]
=== Local files

Local files allow you to customize and extend the functionality provided by {CMK}.
These files are located in the local part of the site directory structure, i.e. in `~/local`.
Local files can cause problems when updating, as they may no longer match the new {CMK} version.

*Does this affect you?* Since it is not possible for {CMK} to intercept and handle local customizations and any third-party extension during an update, you should check your {CMK} site before an update to see if and which local files you are using.

*What do you need to do?* Get an overview of the local files of your {CMK} site by executing the following command as the site user (where the `-L` option ensures that symbolic links are also followed):

[{shell}]
----
{c-omd} find -L ~/local -type f
----

In a fresh installation of {CMK}, you will currently only see a file called `README.TXT` listed.
Anything beyond that should be at the top of your troubleshooting list in case you have problems updating.
Special attention should be paid to check plug-ins that still follow the old check API that was valid until version {v16}.
We will go into this in more detail in the next chapter.


[#check-api]
=== The Check API

In {CMK} {v20}, a new check API was introduced, which restructures the check plug-ins to unify and simplify their handling.
However, since there are many checks that were programmed according to the old Check API that was valid until version {v16}, migrating from the old to the new Check API may be an issue for you in version {v21} as well.
The large number of existing checks is also the reason why the old Check API will continue to be supported for a transition period.

*Does this affect you?* The Check-API issue _may_ affect you if you have extended the checks shipped with {CMK} with your own, self-written checks and/or if you use plug-ins from other sources and have downloaded them e.g. from the link:https://exchange.checkmk.com/[{CMK} Exchange^].
The issue affects you if one, some or even all of these check plug-ins still follow the old check API.
You can find the affected files in the xref:local_files[local files] of your site.

*What do you have to do?* We have tried to make the change to the new Check API as easy and comfortable as possible for you:

Just like when updating to version {v20}, {CMK} tries to automatically migrate all local plug-ins from the directories `~/local/share/check_mk/checks` and `~/local/share/check_mk/inventory` to the new Check API when updating to version {v21}.
This 'automigration' happens at runtime; the plug-in files are not changed.
You can find out how to view the results after the update in the chapter xref:automigration[Check automigration to the new Check API].

Although the chances are good that the automigration of your Check plug-ins will work smoothly, the changeover to Python 3 also made in version {v20} may require some adjustments.
Due to the introduction of the new Check API and the change of the code base to Python 3, there are two good reasons to revise your self-written check plug-ins.
We provide detailed information on the necessary steps for this in the link:https://blog.checkmk.com/migrating-check-plug-ins-to-checkmk-2.0[Blogpost on the migration of check plug-ins^].

Last but not least, the new Check API scores with improved documentation:
There is an introductory article on xref:devel_check_plugins#[programming your own check plug-ins] and the always up-to-date plugin API reference documentation.
Both can be accessed via the {CMK} interface -- in the [.guihint]#Help# menu of the navigation bar under [.guihint]#Developer resources#.


[#incompatible_mkps]
=== Incompatible and obsolete MKPs

The xref:glossar#mkp[{CMK} extension packages (MKPs)] can be used to extend your monitoring system quite easily and conveniently.
On the one hand, it happens that such MKPs are no longer maintained and may then no longer be compatible with new versions of {CMK}.
On the other hand, we keep adding new plug-ins and functional extensions to {CMK}, which is why MKPs sometimes become obsolete.
Their functionality is simply ensured by {CMK} itself.

*Does this affect you?* If you have installed MKPs, it is strongly recommended checking them, especially before such a major update.
This will prevent incompatible packages from interfering with the update, or of having duplicate or at least very similar services following the update.

*What do you need to do?* To do this, check your installed MKPs against our link:https://checkmk.com/integrations[Catalog of Check plug-ins^] and remove packages which are now provided natively by {CMK}.
You can also take this opportunity to remove MKPs that may have only been installed for a test run.
You can find a list via [.guihint]#Setup > Maintenance > Extension packages#.
On the command line, you can view installed extensions with the following command:

[{shell}]
----
{c-omd} mkp list
my_mkp_from_exchange
my_peronal_mkp
----

For each listed MKP you can then also display the files that belong to the package:

[{shell}]
----
{c-omd} mkp list my_personal_mkp
/omd/sites/mysite/local/lib/check_mk/base/plugins/agent_based/check_mk.py
/omd/sites/mysite/local/share/check_mk/web/plugins/metrics/custom_metrics.py
----

Should you not be able to assign all packages via the check of the installed MKPs and the comparison with our catalog, we recommend the xref:dry_run[dry run of the update] described below in order to identify incompatibilities and then remove these from your production monitoring before the update.


[#incompatible]
=== Incompatible changes

As in every {CMK} version, there are changes to the software in the current version {v21} that _may_ have repercussions on your {CMK} installation.
A so-called _incompatible change_ may require you to make manual adjustments so that existing functions continue to run as usual and/or new functions can be used.

*Does this affect you?* In general, there will be incompatible changes that will also affect your {CMK} installation.
However, a general statement is unfortunately impossible.
In this article we have collected those issues that apply to all or most {CMK} installations.
However, there may be other changes that are relevant to you, for example in checks that you use in your installation.

*What do you need to do?* After you have performed the xref:update[update], the {CMK} interface will show you the number and content of the incompatible changes and ask you to check and take note of them.
So you will definitely be confronted with this issue -- but only after you have performed the update.

It is therefore a good idea to get an overview of the incompatible changes *before* the update.
Open the list of link:https://checkmk.com/de/werks?search=&cmk_version$$[$$$$]$$=2.1&compatible=0[Werks^].
(The software development of {CMK} is organised in so-called _Werks_).
In the description of a Werk you will find hints on what to do, if necessary, to make the change compatible.

The frustrating news:
The Werk list of a version is very, very long -- even if it only contains the incompatible changes.
The comforting news:
You can see from the number of changes how much effort we put into improving {CMK} for you.


[#update]
== Update

[#dry_run]
=== Best practices for update

In the following we describe best practices which we follow even when updating large {CMK} environments.
These are certainly not mandatory in every environment, but they can make the process of updating easier for you.


==== Updating the operating system

The operating system on a {CMK} server should always be up to date anyway.
Before updating {CMK}, however, it certainly does not hurt to make sure that it is up to date, again using `apt` (for Debian and Ubuntu), `yum` (for Red Hat Enterprise Linux (RHEL) based systems) or `zypper` (for SUSE Linux Enterprise Server).


==== Updating the {CMK} version
Before updating to version {v21}, the {CMK} site must have version {v20} installed.

We have previously advised against updating with a major version omitted, as there are simply too many changes in between that will hinder a smooth update and almost certainly cause problems.
With link:https://checkmk.com/werk/13320[Werk #13320^], this recommendation is now turned into a requirement -- and a lock is introduced that prevents, for example, a direct update from version {v16} to {v21}.

An update to version {v21} does not currently require a specific {v20} patch version.
However, again, there are good reasons to start the jump to {v21} only from the latest {v20} patch version, since, for example, a {v20} patch may contain fixes that make it easier to update to version {v21}.

Therefore, we recommend updating {CMK} to the latest {v20} patch version first, and only then update to the {v21}.


==== Perform a dry run of the update

In large environments, where even restoring a naturally-existing backup of your {CMK} environment would require a certain amount of time, it is advisable to carry out a test with a cloned site before updating the production environment.
For this purpose, you can, for example, restore the last regular backup of your site under a different name.

[{shell}]
----
{c-root} omd restore newsite /path/to/backup
----

*Alternatively* you can also copy your site via `omd cp`.
For this, however, the site must be stopped for a short time:

[{shell}]
----
{c-root} omd stop mysite
{c-root} omd cp mysite newsite
----

Afterwards, run the update on this new cloned site first, for example to check the local changes in the new environment mentioned above.


[#automatic_agent_updates]
==== Temporarily disable Agent Updater

{cee-only}
If you use the automatic agent updates, you should consider disabling them before updating {CMK} to be able to make the switch to the new agents on the hosts later in a controlled manner.
To do this, first select [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX# and on the following page select the [.guihint]#Agents > Automatic updates# menu item.
By clicking on the button icon:icon_edit[alt="Icon to edit a list entry."] in front of the [.guihint]#Master switch# you can disable the agent update completely:

image::update_major_automatic_agent_updates.png[alt="Turn off agent update by master switch."]

After the successful update of {CMK}, you can turn the agent update back on using the same method.

At this point we recommend reactivating the automatic agent update for a select few of your hosts or host groups at first.
In this way, the new agent is not immediately rolled out across all of your servers, and you can familiarize yourself with the newly-delivered data on a few systems.
Also, due to the significantly-increased number of check plug-ins supplied, you could find a whole range of new services which you can then set up correctly on the test systems you have chosen.
New threshold values may also be required for new services.
If you tackle this on a small scale first, you may save yourself some false alarms later.

To do this, you can simply enter a few hosts or host groups in the appropriate fields on the above page and then re-enable the [.guihint]#Master switch#.

image::update_major_activate_update_on_selected_hosts.png[alt="Options when updating agents to activate on specific hosts."]

*Important:* Remember to remove these restrictions on explicit hosts and host groups again once you are satisfied with the results.


[#notifications]
==== Temporarily disable notifications

You should also consider turning off xref:glossar#notification[notifications] in the pre-update site -- for similar reasons we explained in the previous section on automatic agent updates.
This way you avoid your colleagues from the monitoring team receiving _unnecessary_ notifications.

You can turn off notifications centrally in the xref:user_interface#master_control[Master control] snapin with the main switch [.guihint]#Notifications#.

It may well happen that after the update one or the other service is {CRIT} that was not before.
Take care of newly occurring problems first after the update.
You can view the _unhandled problems_ e.g. in the xref:user_interface#overview[Overview] snapin.

*Important:* Don't forget to turn on the notifications again, e.g., when the number of unhandled problems after the update has leveled off to the level before the update.


[#update_distributed_monitoring]
=== Update in distributed monitoring

There are different procedures to update the sites involved in a xref:distributed_monitoring#[distributed monitoring], i.e., the central site and the remote sites.

*Important:* Whichever approach you choose:
You should create xref:backup#[backups] beforehand in this scenario as well.

The recommended, safe procedure is _Update in one go_, where you perform the following steps:

. Stop all sites.
. Perform the update for all sites.
. Restart the updated sites.

There is another variant: the _Update during operation_.
You may need this option for example if you manage many distributed sites that cannot be updated in one go for technical or organizational reasons.

When updating during operation, sites with different {CMK} versions must communicate with each other for a transition period -- until the update of all sites involved is complete.
For this cooperation to work, the versions involved in this mixed operation must be compatible.

With link:https://checkmk.com/werk/13313[Werk #13313^], version checks have been added to ensure that the sites involved are using compatible versions.
The short version is:
Sites must have the same major version -- with one exception: the {CMK} version of a remote site may be exactly one major version higher than that of the central site.
The following table shows the possible combinations when updating from {v20} to {v21}:

[cols="40,40,~",options="header"]
|===
|Central site |Remote site |Allowed?
|{v20} |{v20} |Yes
|{v20} |{v21} |Yes
|{v21} |{v20} |*No*
|{v21} |{v21} |Yes
|===

It follows from these rules that when updating during operation, the central site is updated last.
Note that also when updating in distributed monitoring: major versions must not be omitted, so e.g. a connection between a {v16} and a {v21} site is not supported.

*Note:* Since the feature set of different {CMK} versions differs, some features of {CMK} may not work or work only in a limited way in this mixed mode.
In a mixed operation mode, problems can occur even with compatible versions, and smooth interaction is only ensured if all sites have the same major version.
You should therefore keep the period of a mixed operation with different versions as short as possible and update all sites quickly after starting the update.


=== Carry out the update

Nothing fundamental has changed in the actual update of the software in {CMK}  {v21}, i.e. you install the new version, perform the update of the {CMK} site, take care of any possible conflicts, and check and confirm the incompatible changes.

Carry out the update procedure as described in the xref:update#detailed[article on updates and upgrades].


[#follow-up]
== Follow-ups

[#gui]
=== User interface changes

The user interface (GUI) of {CMK} was completely redesigned with version {v20}.
In the new version {v21}, on the other hand, it will look very familiar to you, because there have been hardly any changes compared to {v20} that are visible at first glance.
However, menus, menu items, and other details have changed to make new features available -- and to improve existing ones.

We introduce these changes in the articles in this User guide, and the xref:intro_welcome#[Beginner's guide] provides a detailed introduction to the major elements of the xref:intro_gui#[user interface].


==== Removed snapins for the sidebar

With link:https://checkmk.com/werk/13736[Werk #13736^], some obsolete and little-used xref:glossar#snapin[snapins] for the sidebar have been removed.
There are replacements for almost all of these snapins, mostly via xref:glossar#navigation_bar[navigation bar] menu items.


[#automigration]
=== Check automigration to the new Check API

You can check if all local plug-ins from the directories `~/local/share/check_mk/checks` and `~/local/share/check_mk/inventory` can be automatically migrated to the new xref:check-api[Check-API].

*Does this affect you?* This check is useful if there are check plug-ins in your local files that were programmed conforming to the old Check API that was valid up to version {v16}.

*What do you need to do?* As a site user, run the following command:

[{shell}]
----
{c-omd} cmk -R
Failed to auto-migrate legacy plugin to check plugin: mssql_counters
Please refer to Werk 10601 for more information.
----

The message above shows that a plug-in could not be migrated automatically.
All the listed plug-ins will need to be migrated manually by you.
There are a number of reasons why an automigration cannot be performed, and you can read about these in the mentioned link:https://checkmk.com/werk/10601[Werk #10601^].
You can find out how to carry out manual migration in the link:https://blog.checkmk.com/migrating-check-plug-ins-to-checkmk-2.0[blogpost on the migration of check plug-ins^].


[#service_discovery]
=== Discovering new services

Like every major release, {CMK} {v21} brings with it a whole new set of check plug-ins.
If you do not use the xref:wato_services#discovery_check['discovery check"], i.e. the automatic update of the service configuration via the periodic service discovery, you will have to search for services on quite a number of hosts.

If your hosts are organized accordingly (e.g. in folders), you can usually use the [.guihint]#Bulk discovery# function for this.
You can find this under [.guihint]#Setup > Hosts > Hosts# and then in the menu [.guihint]#Hosts > Discover services#.

Below we list some components with the most new features.


[#service_check_mk_agent]
==== Check_MK and Check_MK Agent

image::update_major_check_mk_services.png[alt="The two services 'Check_MK' and 'Check_MK Agent' in monitoring."]

The [.guihint]#Check_MK# and [.guihint]#Check_MK Agent# services are still called the same as in the {v20} version, but in the {v21} they have partly a different meaning:

* The [.guihint]#Check_MK Agent# service is now always present and provides all information related to agent deployment, such as the version of the agent, the time of the last update, the number of agent plug-ins and local checks, or the restriction of IP addresses.
Previously, this service only took care of agent updates -- and was only available when agent updates were set up.

* Also, the [.guihint]#Check_MK# service is now always there -- previously it was only when passive services were running on the host.
The service [.guihint]#Check_MK# now exclusively takes care of the state of the used agents in running operation (_operational state_).
It reports e.g. connection errors or missing data and shows the execution time.


[#cluster_services]
==== Cluster services

With {CMK} version {v21} the behavior of some xref:clustered_services#[cluster services] changes.
Affected services assume the {UNKNOWN} state and require configuration adjustments.

{CMK} knows four cluster modes:

* _Best_ (the value of the best node determines the overall state).
* _Worst_ (analog: value of the worst node)
* _Failover_ (only one node is allowed to return {OK})
* _Native Clustering_ via API function (freely programmable, e.g.: _80% of nodes must be {OK}_ for the cluster to be OK).

Legacy plug-ins using the old Check API previously had an additional implicit clustering capability, where the output of the assigned hosts was simply evaluated in order, and the last individual state received determined the overall state of the cluster.
Since this behavior was not reliable, it was removed in {v21}.

In the course of porting to {v21}, we removed the _native cluster mode_ retrofitted to {v20} from some supplied check plug-ins when it was not useful.
Instead, we selected one of the _best_, _worst_, or _failover_ behaviors as the default.
link:https://checkmk.com/werk/12908#[This list^] shows affected plug-ins and the new default behavior.
Also affected are plug-ins programmed in-house or obtained from link:https://exchange.checkmk.com[{CMK} Exchange^] that do not use API integration for native cluster mode.

All of these services will assume the {UNKNOWN} state after updating to {v21} if the cluster mode once selected is no longer supported.
In these cases, use the [.guihint]#Aggregation options for clustered services# rule to define one of the three cluster modes _best_, _worst_, or _failover_.


[#service_descriptions]
==== Service descriptions

Each update to {CMK} means that service descriptions are changed to improve naming consistency within {CMK}'s monitoring and documentation.
Since changing service descriptions means that rules sometimes need to be adjusted and historical monitoring data is lost, {CMK} initially leaves the old descriptions in place for updates.
For services where the loss of old monitoring data is acceptable and the effort for adapting rules is manageable, you should switch to new service descriptions as soon as possible.

To do this, go to [.guihint]#Setup > General > Global Settings > Execution of checks# and go through the [.guihint]#Use new service descriptions# list and identify the services where the checkboxes are not yet active and activate them.
After applying the changes, the new service descriptions are active and a few minutes will pass before you see defined states of the affected services in the monitoring again.


[#agent_registration]
=== Registering agents for TLS

After updating the agents to {v21}, the [.guihint]#Check_MK Agent# service takes on {WARN} status for the affected hosts and displays the message _TLS is not activated on monitored_ host.
In the two articles on the xref:agent_linux#[Linux] and xref:agent_windows#[Windows] agents, we describe the registration of the certificates used with the command line tool `cmk-agent-ctl`.
This tool also provides many options for automatic registration -- for example, via postinstall snippet in xref:bakery_api#[Bakery plug-ins].

If unencrypted data transfer is desired for a transitional period for parallel operation of {v20} servers in a {v21} environment, adjust the _Checkmk Agent installation auditing_ rule set to allow [.guihint]#Check_MK Agent# to assume {OK} status even though registration is pending.


[#kubernetes]
=== The new Kubernetes monitoring

Kubernetes monitoring has been rewritten from the ground up in {CMK} {v21} for simplified and efficient monitoring.
Unfortunately, since the architecture has fundamentally changed in version {v21}, it is not possible to transfer or rewrite previous monitoring data of your Kubernetes objects from previous {CMK} versions.

*Does this affect you?* This affects you if you used the {CMK} special agent to monitor Kubernetes in version {v20}.
The old special agent and associated check plugins will still work in version {v21}, but will subsequently be xref:kubernetes_20[removed] from {CMK}.
We therefore recommend a complete move to the new, much improved Kubernetes monitoring in version {v21}.

*What do you need to do?* Completely redeploy Kubernetes monitoring as described in the xref:monitoring_kubernetes#[Monitoring Kubernetes] article.


=== Encrypting notification spooler connections

*Does this affect you?*
If you are using distributed monitoring with xref:notifications#async[central notification], you will benefit from increased security when enabling transport encryption of the notification spooler `mknotifyd`.

*What do you need to do?*
When updating existing {CMK} installations, connections already configured will initially remain usable without encryption.
However, in this case [.guihint]#Analyze configuration# will fault the setting with {CRIT}.
After migrating all involved sites to {v21}, change [.guihint]#Global settings > Notification spooler configuration > Encryption# to [.guihint]#Encrypt communication with TLS#.
New connections automatically use TLS encryption when they are created.


[#rest-api]
=== REST API replaces Web API

The Web API (also called xref:web_api#[HTTP API]) has been deprecated and will be xref:web-api[removed] in the next {CMK} version.
Replacement is ready with the xref:rest_api#[REST API] introduced in version {v20}.

*Does this affect you?* This affects you if you have written custom scripts that use the Web API.

The Web API will continue to work in the {CMK} version and in existing sites updated from version {v20} to {v21}, the Web API will remain enabled.
In sites newly created with the {v21} version, the Web API is already turned off in the [.guihint]#Global settings#.
The switch to turn the Web API on and off can be found in [.guihint]#Setup > General > Global settings > Site management > Disable Web API#.

*What do you need to do?* We recommend migrating all existing scripts that use the Web API to the REST API as soon as possible to catch issues early before moving to {CMK} version {v22}.

The REST API already provides access to more areas in {CMK} than the Web API, such as host status, service status, scheduled downtimes, time periods, problem acknowledgement, and Business Intelligence (BI).

The functions for accessing sites in distributed monitoring and metrics and graphs that are still missing in the REST API will be added in {v21} patch versions, so that over time all functions will be available that could also be used in the Web API.


[#outlook]
== Outlook

This chapter deals with topics that do not concern the current {CMK} version {v21}, but one of the subsequent versions.


[#web-api]
=== The Web API is removed

The Web API (also called HTTP API) will be removed in the next {CMK} version {v22}.
The Web API will be replaced by the xref:rest-api[REST API] introduced in {v20}.


[#kubernetes_20]
=== The old Kubernetes special agent is removed

The {CMK} {v20} special agent for Kubernetes monitoring and associated check plug-ins will be removed in the next {CMK} version {v22}.
Details can be found in link:https://checkmk.com/werk/13561[Werk #13561^].
Replacements are available in version {v21} with the completely xref:kubernetes[new Kubernetes monitoring].


[#nsca]
=== NSCA is no longer supported

Support for the Nagios Service Check Acceptor (NSCA) will be removed in the next {CMK} release {v22}.

NSCA is a Nagios add-on to get results xref:wato_services#passive_checks[passive checks] from remote hosts in a distributed Nagios configuration.
This deprecated method for setting up xref:distributed_monitoring#[distributed monitoring] offers no advantages over {CMK}'s own methods.

Details and notes on replacement can be found in link:https://checkmk.com/werk/13644[Werk #13644^].


[#hw_sw_inventory_plugin_api]
=== The old HW/SW inventory plug-in API is no longer supported.

Support for the old HW/SW inventory plug-in API will be removed in the next {CMK} release {v22}.

The plug-ins following this API are located in the site directory under `~/share/check_mk/inventory` and (as local files) under `~/local/share/check_mk/inventory`.
These plug-ins work in version {v21}, but will be ignored from version {v22} onwards.

If you use custom plug-ins, migrate them to the new Check API before moving to version {v22}.
See link:https://checkmk.com/werk/14084[Werk #14084^] for more details and information on migration.
