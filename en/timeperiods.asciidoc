include::global_attr.adoc[]
= Time periods
:revdate: 2021-06-25
:title: Time periods - Restricting actions to specific times of the day
:description: Here you will learn how to use time periods to map common restrictions such as working or service hours.

{related-start}
link:wato.html[Configuring {CMK}]
link:basics_downtimes.html[Scheduled downtimes]
link:wato_rules.html[Host and service parameters]
{related-end}


== Introduction

[{image-left}]
image::timeperiods.png[alt"Icon for time periods.",width=107px]

In order to adapt the monitoring to the working rhythms of humans, and so, for example, to avoid senseless notifications, {CMK} has the capability of making various settings dependent on both the time of day, or day of the week.

So that the configuration is simple and clear, this is achieved in two stages.
First, define the *time periods*. 
For example, a period could be called ‘Working Hours’, and contain Monday to Friday, and 8:00 to 17:00 (8 am to 5 pm). 
Thus every time period is either active or inactive at any particular point in time.

These time periods can then subsequently be used in the configuration.
They are used in the following rules -- among others. 
What these rules all have in common is that the application of time periods is optional, and that the time periods restrict the rules’ chronological operation range:

[cols="30,~"]
|===

|[.guihint]#Notification period for ...# |A restriction to the times in which a xref:notifications#[notification] will be generated for a host or service. No notification will be triggered outside the defined times and the chain of notification rules will not be actioned.
|Notification rules |Likewise, in each xref:notifications#rules[notification rule] you can define a specific time period as a condition. For example, the notification method (email or SMS) can be made dependent on the time of day.
|[.guihint]#Check period for ...# |With this the execution of checks can be restricted by time. The checks will not be executed outside the defined time period, and the status retains the same condition it had at the last check execution. However, use this carefully: A service can still remain flagged as {OK}, even though it may actually have been {CRIT} for hours.
|[.guihint]#Service period for ...# |With the aid of a service period you can calculate the percentage of the time a service is available over a specified time period.
|Event Console |The validity of rules in the xref:ec#[Event Console] can be dependent on a time period. For example, you can declare particular log messages to be unproblematic at certain times.
|Alert handler |The execution of xref:alert_handlers#[alert handler] rules can likewise be controlled using time periods.
|Thresholds |You can link the validity of the threshold values of certain checks to a time period. A server’s threshold values for CPU utilization could be configured differently depending on day or night, for example.
|===

*Tip*: You can easily find the concrete rules mentioned above with the search [.guihint]#Setup > General > Rule search#.


== Configuring time periods

=== Weekdays

You enter the administration of time periods with [.guihint]#Setup > General > Time periods#. 
The displayed list contains the always existing time period [.guihint]#Always#, which can neither be altered nor deleted.

Click [.guihint]#Add time period# to create a new time period.

As usual in {CMK}, also the definition of a time period requires at least an internal ID and a name to display ([.guihint]#Alias#).
Only the latter can be altered later, and this is the name which will be shown in lists, etc.:

image::timeperiods_create.png[alt"Dialogue for creating a time period for working days."]

You can either configure every single day of the week or set the same value for all seven days via [.guihint]#Same times for all weekdays#.
For each weekday, you can enter several time ranges in which the time period will be _active_. Use the 24-hour format for entries.

*Important:* To include a complete day up until midnight, enter `00:00` -- `24:00`, even though the time 24:00 doesn’t actually exist.


=== Individual calendar days

With the aid of [.guihint]#Add Exception# you can enter single calendar days in the ‘international date format’ `YYYY-MM-DD` -- for example, `2021-12-25`.
On these days _only_ the times of day entered there are effective:

image::timeperiods_exception.png[alt"Dialogue for creating a time period with exceptions for public holidays."]

In this way you can, for example, compile an individual calendar of public holidays.
For example, an individual calendar of public holidays can be compiled.
You enter the period `00:00` - `24:00` for each of the holidays created.


=== Excluding time periods from other time periods

A holiday calendar such as this can be _excluded_ from another time period.
The most common example is excluding the holidays from a time period for normal office hours. 
Simply check your ‘holidays calendar’ box in the [.guihint]#Exclude# field:

image::timeperiods_holidays.png[alt"Dialogue in which the holiday calendar is defined as an exception."]


=== Importing a calendar

For vacation and holiday calendars, importing calendar data in the iCal format is conveniently available. 
Such files are easily found on the Internet and spare you the work of having to enter dates laboriously by hand.
For example, holidays for all German states can be found under
link:https://www.ferienwiki.de/exports/de[www.ferienwiki.de/exports/de].
No doubt there will be a similar source for your country as well.

Import such a file on the [.guihint]#Time periods# page with the icon:icon_ical[alt"Icon for importing a file in iCal format."] [.guihint]#Import iCalendar# button, and in the next page specify the range of future years for which the regular holidays should be entered into the time period:

image::timeperiods_ical.png[alt"Dialogue for importing a file in iCal format."]

A pre-filled time period definition will then be opened, in which you only need to enter the ID and name -- once completed you can then exclude this time period from other time periods, as described above.
