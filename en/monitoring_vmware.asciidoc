include::global_attr.adoc[]
= Monitoring VMWare ESXi
:revdate: 2021-12-29
:title: Monitoring VMWare ESXi
:description: With {CMK} you can monitor a vCenter, its ESXi hosts and also the virtual machines (VMs) without requiring extra agents.

{related-start}
xref:wato_monitoringagents#[Monitoring agents]
xref:introduction_virt1#[Installation of a virtual appliance]
xref:datasource_programs#[Datasource programs]
{related-end}


== Introduction

With {CMK} you can monitor ESXi-Hosts and also its VMs. Thus, for example,
on a host it is possible to query Disk-IO, datastore performance, the status
of physical network interfaces, diverse hardware sensors, and much more.
{CMK} likewise offers a series of check plug-ins for the VMs.
A comprehensive list of these can be found in the
link:https://checkmk.com/integrations?tags=vsphere[Catalog of check plug-ins].

Using the piggyback technique VM data will be displayed directly in
its associated host. Thus the VM related data is found right where it is actually
required, and where it can be compared to that reported by the VM’s OS:

image::vmware_services.png[]

Access to this data is achieved via the HTTP-based vSphere-API -- not over the
normal agents or SNMP. This means that no agent or other software needs to be
installed on the ESXi-Hosts, and that the access is very simple to set up.

== Setting up

=== Setting up via the ESXi host system

The initial setup for monitoring a ESXi-server is very simple, and can be completed
in less than five minutes. Before you can set up the access however, the following
prerequisites must be satisfied:

* You must have defined a user on the ESXi-server. It is sufficient that this user only has read access.
* You must have defined the ESXi-server as the host in {CMK}, and configured it as an agent [.guihint]#({CMK} Agent)#. Tip: Select the host name so that it is the same as that known to the server itself.


Once the prerequisites have have been satisfied you can create a xref:wato_rules#create_rules[Rule] in the
[.guihint]#Setup > VM, Cloud, Container > VMWare ESX via vSphere# rule set.
This will be assigned to the defined host, so that instead of the
standard agent the xref:datasource_programs#specialagents[special agent]
will be used for retrieving data from the VMware-monitoring.

Enter the user’s name and password as they have been defined on the ESXi-Server.
The condition for the rule must be set on the host defined in {CMK}.
After this the first installation will be complete and {CMK} can retrieve
the data from the server.

image::vmware_username.png[]

Finally, go back to the host configuration, and execute a
xref:wato_hosts#services[Service discovery]. This should find a number of
services:

image::vmware_discovery.png[]

Activate the changes as usual.
If no services have been identified, you can search for errors in the configuration with
the xref:monitoring_vmware#diagnose[Diagnostic options], as described later in this article.


=== Setting up using vCenter

If a vCenter is available, instead of retrieving the monitoring data via the individual host systems you can also call up the vCenter. This method has various advantages and disadvantages:

[cols=2]
|===
|Advantages |Disadvantages

|Simple application in situations where VMs are assigned dynamically using vMotion. |No monitoring if vCenter is unavailable.
|Monitoring of a cluster’s total RAM usage is possible. |No monitoring of hardware-specific data in the cluster’s nodes (e.g., RAM-disks and network cards).
|===


A combination of both methods can also be utilised --
then you can have the best of both worlds.

==== Configuring the vCenter

Similar prerequisites apply for this configuration as for the
configuration over a single ESXi-Server:

* A user with read access must be present on the vCenter.
* The vCenter has been defined as a host and configured as a [.guihint]#{CMK} Agent# agent in {CMK}
* If the ESXi-Servers have already been configured in {CMK} and you wish to combine the monitoring, then in vCenter their names will be the same as they are configured as hosts in {CMK}

As described earlier, create a rule for the VMware-monitoring’s special agent,
in [.guihint]#Type of Query# select the vCenter, and set the condition to the appropriate
host as defined in {CMK}:

image::vmware_vcenter_username.png[]

With this the configuration will be completed.
Execute a service discovery for the vCenter-host as described earlier.

[#datasource_combination]

==== Retrieving from ESXi-Hosts and vCenter

In order to avoid duplicated data retrieval when using a combination of both
configuration methods, the rule for the vCenter can be configured to retrieve
only specific data. One possibility is to access the [.guihint]#Datastores# and
the [.guihint]#Virtual Machines# over the vCenter, and the other data directly
from the ESXi-hosts. The license usage can be fetched in both configurations
since the vCenter reports an overall status.

image::vmware_data1.png[]

If you have already configured the ESXi-hosts, its rules will be adapted accordingly.
Here only access to the [.guihint]#Host Systems# and [.guihint]#Performance Counters# is available,
since these belong unalterably to a particular ESXi-server.
The license status is applicable only to the retrieved ESXi-server.

image::vmware_data2.png[]

=== Monitoring the VMs

By default, only the status of the VMs as services is created and assigned to the
ESXi, or the vCenter respectively. There is however even more information available from
these VMs -- from RAM, or the Snapshots, for example.
This data is stored as piggyback data and assigned directly to the hosts which correspond to the VMs in {CMK}.

In order to make this data visible, the VM must be defined as a host in
{CMK}. You can of course install the {CMK} agent on the VM and take full
advantage of its functions. The piggyback data will simply be added to that
already available.

[#rename_piggyback]

==== Naming the piggyback data

If the host name of the VM in {CMK} matches the name of the VM, the assignment works automatically. If not, there are various options in {CMK} to customize the piggyback name. The following options are available in the configuration rule itself:

* You may use the VM’s operating system’s host name, if this can be accessed via the vSphere-API
* If the VM’s name includes blank characters, the name will be truncated after the first blank. Alternatively, the blanks can be replaced with underscores

image::vmware_nametranslation.png[]

If the host’s name is quite different in {CMK}, an explicit allocation can be
performed with the help of the [.guihint]#Setup > Agents > Access to agents > Hostname translation for piggybacked hosts# rule.

image::vmware_nametranslation2.png[]

If the host is configured in {CMK} and the names conform, you can activate the
[.guihint]#Display VM power state on# check box in the configurations rule --
select if and where the data is to be made available.
Select [.guihint]#The Virtual Machine# here.

image::vmware_vms.png[]

With a service discovery on the host(s) the new services will now be identified and
can be activated. Be aware that the information from the services could differ
from one another. The ESXi-Server will see a virtual machine’s RAM usage differently
to how the machine’s own OS reports it.

image::vmware_services.png[]

[#diagnose]
== Diagnostic options

=== Introduction

When searching for the source of an error there are a number of ‘ports of call’.
Since the data comes from the ESXi-/vCenter-Server, this is a logical place to start
searching for the error. Later it is important that the the data gets to the
{CMK}-Server, and can be correctly processed and displayed there.

=== Problems with an ESXi-/vCenter-Server configuration

With the `curl` command you can verify whether the server is accessible from
the monitoring:

[{shell}]
----
{c-omd} curl -Ik https://myESXhost.my-domain.net
HTTP/1.1 200 OK
Date: Fri, 4 Nov 2016 14:29:31 GMT
Connection: Keep-Alive
Content-Type: text/html
X-Frame-Options: DENY
Content-Length: 5426
----

Whether the access data has been entered correctly -- and whether {CMK} can access the host --
can be tested on the console with the Special-Agent. Use the `--help` or `-h` option
to receive a complete list of the available options. In the example, with the aid
of `grep` the output was limited to a specific section and the first four
lines following it -- you can omit this in order to receive a complete output,
or filter for another:

[{shell-raw}]
----
{c-omd} share/check_mk/agents/special/agent_vsphere --debug --user myesxuser --secret myesxpassword -D myESXhost | grep -A4 esx_vsphere_objects
<<<esx_vsphere_objects:sep(9)>>>
hostsystem      myESXhost           poweredOn
hostsystem      myESXhost2          poweredOn
virtualmachine  myVM123             myESXhost   poweredOn
virtualmachine  myVM126             myESXhost   poweredOn
----

Whether {CMK} can access the host can be verified on the console. Here the output is
also limited to five lines:

[{shell-raw}]
----
{c-omd} cmk -d myESXhost | grep -A4 esx_vsphere_objects
<<<esx_vsphere_objects:sep(9)>>>
hostsystem      myESXhost           poweredOn
hostsystem      myESXhost2          poweredOn
virtualmachine  myVM123             myESXhost   poweredOn
virtualmachine  myVM126             myESXhost   poweredOn
----

Alternatively, you can carry out the test on the host’s diagnostic page in WATO:

image::vmware_agent_test.png[]

If everything works up to this point the output should have been saved to a
temporary directory. Whether such a file has been produced, and whether the
content is correct can be determined with the following:

[{shell-raw}]
----
{c-omd} ll tmp/check_mk/cache/myESXhost
-rw-r--r-- 1 mysite mysite 17703 Nov  4 15:42 myESXhost
{c-omd} head -n5 tmp/check_mk/cache/myESXhost
<<<esx_systeminfo>>>
Version: 6.0
AgentOS: VMware ESXi
<<<esx_systeminfo>>>
vendor VMware, Inc.
----

=== Problems with piggyback data

{CMK} creates a directory containing a text file for each host. In this text
file can be found the data which is to be allocated to the hosts.

[{shell}]
----
{c-omd} ll tmp/check_mk/piggyback/
total 0
drwxr-xr-x 2 mysite mysite 60 Nov  4 15:51 myVM123/
drwxr-xr-x 2 mysite mysite 60 Nov  4 15:51 myVM124/
drwxr-xr-x 2 mysite mysite 60 Nov  4 15:51 myVM126/
drwxr-xr-x 2 mysite mysite 60 Nov  4 15:51 myESXhost2/
{c-omd} ll tmp/check_mk/piggyback/myVM123/
-rw-r--r-- 1 mysite mysite 1050 Nov  4 15:51 myESXhost
----

If these directories or files are absent they have not been created by the
Special-Agents. You can see if the VM’s data is included in the agent’s output.
Should this situation arise, look in the configuration rule for the ESXi-/vCenter-host to see if the
xref:monitoring_vmware#datasource_combination[data retrieval] has been activated.

[{shell-raw}]
----
{c-omd} grep "<<<<myVM123>>>>" tmp/check_mk/cache/myESXhost
<<<<myVM123>>>>
----

In the case of a very large number of such directories for piggyback data it
can be very difficult to find those that have no allocation to a host.
Here we provide a script with which unassigned piggyback hosts can easily be found:

[{shell}]
----
{c-omd} share/doc/check_mk/treasures/find_piggy_orphans
myESXhost2
----

From the script output it can be that {CMK} can’t find a host with the same
name to which it can allocate the data.
The piggyback names can however be xref:monitoring_vmware#rename_piggyback[altered]
in a number of ways.

== Files and directories

[cols="60,~"]
|===
|File Path |Function

|tmp/check_mk/piggyback/ |WATO saves the piggyback data here. For each host a subfolder is created with the host’s name -- this subfolder contains a text file with the host’s data. The filename is the name of the host providing the data.
|tmp/check_mk/cache/ |Here the respective latest agent output from all hosts is temporarily saved. The content of a host’s file is identical to the [.guihint]#cmk -d myhost# command.
|share/check_mk/agents/special/agent_vsphere |The special agent for executing a query of ESXi and vCenter servers. This script can also be executed manually for testing purposes.
|share/doc/check_mk/treasures/find_piggy_orphans |A script for finding piggyback data that is not allocated to a host.
|===

