include::global_attr.adoc[]
= Monitoring Amazon Web Services (AWS)
:revdate: 2022-01-06
:title: Monitoring Amazon Web Services (AWS)
:description: How to monitor and seamlessly integrate Amazon S3, EC2, EBS, RDS and ELB or their costs into {CMK} without an agent is described here.

{related-start}
xref:monitoring_azure#[Monitoring Microsoft Azure]
xref:check_plugins_catalog#[Catalog of Check Plug-ins]
xref:dcd#[Dynamic host configuration]
{related-end}


== Introduction

[{image-left}]
image::logo_aws.png[width=140]

According to a survey among our users,
link:https://docs.aws.amazon.com/aws-technical-content/latest/aws-overview/introduction.html[Amazon Web Services^]
is currently the most important provider of cloud-based
Services, so goes without saying that {CMK} must here provide excellent monitoring.

{CMK} contains a comprehensive monitoring for AWS which consists of a connector
to AWS and an impressive collection of check plug-ins consisting of various
metrics for the retrieval and evaluation of states. Because of the amount
of check plug-ins only some of them, to show the AWS areas that {CMK}
can currently monitor:

* link:https://checkmk.com/cms_check_aws_ebs_summary.html[AWS EBS Summary^]
* link:https://checkmk.com/cms_check_aws_ec2.html[AWS EC2 Instance Status^]
* link:https://checkmk.com/cms_check_aws_elb.html[AWS ELB Statistics^]
* link:https://checkmk.com/cms_check_aws_elbv2_application_statistics.html[AWS ELB Application Statistics^]
* link:https://checkmk.com/cms_check_aws_elbv2_network_statistics.html[AWS ELB Network Statistics^]
* link:https://checkmk.com/cms_check_aws_rds_summary_db_status.html[AWS RDS Database Info^]
* link:https://checkmk.com/cms_check_aws_s3_summary.html[AWS S3 Summary^]
* link:https://checkmk.com/cms_check_aws_glacier_summary.html[AWS Glacier Summary^]
* link:https://checkmk.com/cms_check_aws_cloudwatch_alarms.html[AWS Cloudwatch Alarms^]
* link:https://checkmk.com/cms_check_aws_costs_and_usage.html[AWS Costs and Usage Summary^]

For a complete, up-to-date list of all available plug-ins,
see the link:https://checkmk.com/cms_check_plugins_catalog.html[Catalog of Check plug-ins^].


== Concrete implementation of AWS monitoring

=== Hosts and services

In {CMK} all objects to be monitored are arranged in a hierarchical structure of hosts and services.
The concept of hosts does not exist in cloud-based services.
However to retain the simplicity and consistency of {CMK},
we still map AWS objects according to the host/service schema.

How that is achieved can best be illustrated by an example: In one region several
EC2 instances have been configured. An EC2 is usually assigned to EBS. This
constellation looks like this in {CMK}:

* There is a host that matches the AWS account. This host gives an overview of all EC2 instances and their status as a service.
* The EC2 instances themselves are their own hosts.
* On these EC2 hosts you can find services with the actual metrics.
* The EBS are interpreted as a type of hard disk, and accordingly provide metrics to I/O (e.g., the number of bytes read or written). For this purpose, in each EBS there are separate services in {CMK} with the name `AWS/EBS Disk IO` which are assigned to the EC2 instance.


=== Access to AWS

An agent is actually not necessary for monitoring AWS services since AWS provides an HTTP-based API over
which monitoring data is also available.

{CMK} accesses this API via the `agent_aws` ‘special agent’ --
which replaces the {CMK} agent -- but in contrast this agent runs locally on the
{CMK} server.


== Preparing AWS

=== Creating the user

To enable monitoring via {CMK}, it is best to achieve it by creating a special AWS user under your root account.
link:https://console.aws.amazon.com[Log in^] to AWS as the root user, and navigate in [.guihint]#All services# to [.guihint]#Security, Identity, & Compliance > IAM# (Identity and Access Management).
Go to [.guihint]#Users# and create a new user with [.guihint]#Add user#.
As a user name choose, for example, `check-mk`.
It is important that you select the [.guihint]#Access key - Programmatic access# for [.guihint]#Select AWS credential type#.

[{image-border}]
image::aws_create_user.png[]

=== Permissions

The user you just created should only be used for monitoring by {CMK} and only needs read-only access to AWS.
We recommend simply assigning the policy [.guihint]#ReadOnlyAccess# to this user.
To find this policy, first click [.guihint]#Attach existing policies directly# and then type `readonlyaccess` in the search box.
In the list below the search field, you still have to scroll down quite far, because there are quite a few policies that contain this string.

image::aws_create_user_policies.png[]

=== Keys

After completing the user creation an access key will be generated
automatically for you. Note: The key’s secret is displayed only
once -- directly after its creation. Therefore without fail copy the key and
save it, for example, in the {CMK} password store. Alternatively specify
it in plain text as a rule (see below). For {CMK} you need the [.guihint]#Access key ID#
in addition to the secret. The name of the user (in our example
`check-mk`) does not matter here.

image::aws_create_user_key.png[]

If for some reason you should lose the secret, you can create a new access key
for the user and get a new secret:

image::aws_create_access_key.png[]

=== Access to billing information

If you want {CMK} to have read access for the billing information
(in order to perform the [.guihint]#Costs and Usage# global check), you need another policy for your AWS user -- a policy you yourself must first define.

Under [.guihint]#Security, Identity, & Compliance > IAM > Policies# select the [.guihint]#Create Policy# button.
Select from [.guihint]#Select a Service > Service > Choose a Service# the [.guihint]#Billing# service.
Under [.guihint]#Actions# tick the [.guihint]#Read# checkbox.
We have to set an additional permission. Add one via the [.guihint]#Add additional permissions# button.
Select from [.guihint]#Select a Service > Service > Choose a Service# the [.guihint]#Cost Explorer Service# service.
Under [.guihint]#Actions# again tick the [.guihint]#Read# checkbox.

image::aws_policies.png[]

Click [.guihint]#Review# to go to step two. Set `BillingViewAccess` as the [.guihint]#Name#,
and save it with the [.guihint]#Create policy# button.

You must now add this new policy to the user.
Go again to [.guihint]#Security, Identity, & Compliance > IAM > Policies# -- in the
[.guihint]#Filter Policies# search box look for `BillingViewAccess`, select this by clicking in the circle to the left, and then go to [.guihint]#Policy actions > Attach#.
Here you will find your `check-mk` user,
select this and confirm it with [.guihint]#Attach policy#.
// The following message will be received once it has been executed successfully:


== Configuring the monitoring in {CMK}

=== Create a host for AWS in {CMK}

Now create a host to monitor AWS in {CMK}.
You can assign the host name as you wish. Important: Because AWS is not a service
it has no IP-address or DNS name (access is granted by the special agent itself),
so you need to set the [.guihint]#IP address family# to [.guihint]#No IP#.

image::azure_wato_no_ip.png[]


[#agent_rule]
=== Create a rule for AWS agent

AWS cannot be queried through the regular {CMK} agent,
so next set up the AWS special agent. To do so,
under [.guihint]#Setup > Agents > VM, Cloud, Container > Amazon Web Services (AWS)#
add a rule whose xref:wato_rules#conditions[conditions] apply only to the just-created
AWS host.

In the actual content of the rule, you will first find the information for the login.
Here enter the 'Access key ID' for the newly-created AWS user `check-mk`.
Also choose here if you need a proxy to fetch the data and which global data you want to monitor,
i.e., those that are independent of a region. That is currently
only the data relating to the costs:

image::aws_rule_1.png[]

In the image above you can also see the option [.guihint]#Use STS AssumeRole to assume a different IAM role#.
If you do use different accounts at AWS,
you may use a single monitoring user to monitor the other accounts, too.

But the really interesting data is assigned to regions.
Therefore here select your AWS region(s):

image::aws_rule_2.png[]

Under [.guihint]#Services by region to monitor# you specify which information you
want to retrieve from these regions. At default all AWS services and
the monitoring of their xref:monitoring_aws#limits[limits] are activated. In
the following image are all but one deactivated to get a better overview:

image::aws_rule_3.png[]

You now can restrict the fetched data per web service or globally with
[.guihint]#Restrict moinitoring services by one of these AWS tags#. The global restriction
will be overwritten, if you restrict by web service. Also you not only
have the option to restrict by AWS tags but additionally to specify the
explicit names:

image::aws_rule_4.png[]

Don't forget to assign the special agent to the previously created host by
entering that host name in [.guihint]#Conditions > Explicit hosts#.


=== Services on the AWS host itself

Now switch to the service discovery of the newly created AWS host in {CMK}, where {CMK} should now find several services.
After you add the services and after an xref:wato#activate_changes[activating changes] it will look something like this in monitoring:

image::aws_services_ec.png[]


===  Create hosts for the EC2 instances

Services associated with EC2 instances are not associated with the AWS host,
but to so-called xref:piggyback#[piggyback hosts].
This works in such a way that data retrieved from the AWS host is distributed to
these piggyback hosts, which operate without their own monitoring agents.
In this process, each EC2 instance is assigned a piggyback host named after the private DNS name of the EC2 instance.

The piggyback hosts are not automatically created by {CMK}.
Create these hosts either manually or optionally with the xref:dcd#[Dynamic Configuration Daemon (DCD)].
It is important that the names of the hosts exactly match the private DNS names of the
EC2 instance -- they are also case-sensitive!

*Tip:* with the auxiliary script `find_piggy_orphans` from the
Treasures directory you can find all of the piggyback hosts for which there are data
but which are not yet created as hosts in {CMK}:

[{shell}]
----
{c-omd} share/doc/check_mk/treasures/find_piggy_orphans
ip-172-31-44-50.eu-central-1.compute.internal
ip-172-31-44-51.eu-central-1.compute.internal
----

Configure the EC2 hosts without IP addresses (analogous to the
AWS host), and select [.guihint]#No API integrations, no {CMK} agent# as agent.

image::wato_host_no_agent.png[]


=== Hosts for the ELB (Classic Load Balancer)

The services for the ELB are also assigned to piggyback hosts.
The names correspond to their DNS names.


[#limits]
=== Monitoring limits

Some web services of AWS do have limits and {CMK} is able to monitor them. Here
some examples:

* link:https://checkmk.com/cms_check_aws_ebs_summary.html[AWS EBS Limits^]
* link:https://checkmk.com/cms_check_aws_ec2_limits.html[AWS EC2 Limits^]
* link:https://checkmk.com/cms_check_aws_elb_limits.html[AWS ELB Limits^]
* link:https://checkmk.com/cms_check_aws_elbv2_limits.html[AWS Application and Network Limits^]
* link:https://checkmk.com/cms_check_aws_glacier_limits.html[AWS Galcier Limits^]
* link:https://checkmk.com/cms_check_aws_rds_limits.html[AWS RDS Limits^]
* link:https://checkmk.com/cms_check_aws_s3_limits.html[AWS S3 Limits^]
* link:https://checkmk.com/cms_check_aws_cloudwatch_alarms_limits.html[AWS Cloudwatch Alarm Limits^]

As soon as such a check plug-in creates services and checks them later on,
the special agent will always fetch *all* elements of the web service. 
Only in this way {CMK} is able to reasonably calculate the current workload at these limits and check the thresholds.
That's also the case even if you restrict the fetched data by some tags or names in the configuration.

The checking of the limits is activated by default for each
monitored web service. If you want to restrict the fetched data in the
xref:monitoring_aws#agent_rule[special agent rule] to limit the amount of
transferred data, you need also to turn off the limits.


=== Further services

The other web services in AWS are assigned as follows:

[cols="10,~,~"]
|===
| |Service |Assignment 

|CE |Costs & Usage |At the AWS host
|EBS |Block Storages |Appended to the EC2 instance if it belongs to the instance, otherwise to the AWS host
|S3 |Simple Storages |At the AWS host
|RD |Relational databases |At the AWS host
|===
