// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= Host tags
:revdate: draft
:title: Host tags
:description: With host tags, host tag groups and auxiliary tags you can structure folders and hosts according to your wishes.

{related-start}
xref:hosts_setup#[Host administration]
xref:hosts_structure#[Structuring of hosts]
{related-end}


[#intro]
== Introduction

Host tags are keywords that can be assigned to hosts in order to structure and organize them, for example by importance, IP address family, or the way the host receives its data.
For instance, host tags will be inherited via the xref:hosts_setup#folder[folder structure] in {CMK} and can be selected as a condition in xref:glossar#rule[rules] for targeting hosts.

Host tags are useful not only for performing a configuration, but also for the monitoring.
For example, there is a filter for host tags in xref:views#filter_context[views] and the [.guihint]#Virtual Host Tree# xref:glossar#snapin[snapin] can arrange your folders in a tree diagram based on the tags.

Likewise, on the command line, for many commands with the `@foo` syntax you can select all hosts with the `foo` tag.

To ensure sure that everything makes sense, you should create your own host tag structure that best fits your environment and which matches the other options in the xref:hosts_structure#[structuring hosts] procedure.
Once set up, subsequent changes to host tags are possible, but should be avoided -- since xref:rename_tag_id[renaming the ID] of a tag will require manual rework in most cases.

But before we show you how to define your own host tags in the [.guihint]#Setup#, let's first clarify some terms.


[#host_tag_group]
=== Host tag groups

Host tags are organized in groups known as host tag groups.
There are two different types of tag groups.
This distinction is very important for the overall structure of your host tags.
There are tag groups that contain multiple tags, and there are tag groups that contain only *one* tag: the _checkbox tags._


==== Groups with multiple tags

A good example of such a host tag group is _Datacenter_ with the possible tags _Datacenter 1_ and _Datacenter 2_.
This would then assign each host to precisely one of these two data centers.
If you want to create hosts that are not in either data center, you will need a third selection option, _Not in a datacenter_ for example.

*Each* host in {CMK} gets *exactly one* tag from this tag group.
This is why setting the default value is important.
The default value is set when a host is _not_ explicitly assigned a tag from the group.
When xref:create_tag_group[creating a tag group], the first tag in the list is the default value.
For the _Datacenter_ example, the _Not in a datacenter_ tag will likely be the appropriate default value.

Some users have tried to map the application running on a host into a tag group.
For example, the group was called _Application_ and had the tags _Oracle_, _SAP_, _MS Exchange_, etc.
This will work fine until the day comes when a host has _two_ applications -- and that day is sure to come!

The proper solution for assigning applications to hosts is different:
Create a separate tag group _per_ application which provides only two options (in other words, tags): _Yes_ or _No._ 
And if you can do without a tag like _No_ altogether and just want to activate or deactivate a tag, then simply use the checkbox tags in {CMK}.


[#checkbox_tag]
==== Checkbox tags

{CMK} allows you to create tag groups with only a single tag, the so-called checkbox tags.
For the above example of an application, you can then create a tag group _Oracle_ with the single tag _Yes_ -- i.e. you can omit the _No_.
A checkbox tag is not displayed on a list in the host tags, but instead as a checkbox.
Checking the checkbox sets the tag, otherwise the tag will be omitted.
In contrast to tag groups with multiple tags, where exactly one tag is always set or activated, checkbox tags remain deactivated by default.


[#topic]
=== Topics

To avoid confusion when you have a large number of host tag groups (e.g. because you have a large number of different applications), you can combine the tag groups into _topics_.
All tag groups with the same topic

* are grouped together in a separate box in the host properties and
* show the name of the topic before that of the tag group in the conditions for a rule, for example _Applications / Oracle_.

The topics thus have 'only' a visual function and have no effect on the actual configuration.


[#aux_tag]
===  Auxiliary tags

Auxiliary tags solve the following problem:
Imagine that you define a host tag group _Operating System_, with the tags _Linux_, _AIX_, _Windows 2016_, and _Windows 2019_.
Now you want to define a rule that should apply to all Windows hosts.

One way to do this is to define an auxiliary tag named _Windows_.
Assign this auxiliary tag to both _Windows 2016_ and _Windows 2019_.
A host that has either tag will then always _automatically_ receive the auxiliary tag _Windows_ from {CMK}.
In the rules, _Windows_ will appear as a separate tag for resolving conditions.

This solution has the great advantage that it can be very easily extended at a later date to include new versions of Windows.
For instance, as soon as Windows 3.0 appears in 2030, you simply create a new tag _Windows 3.0_ and also assign the auxiliary tag _Windows_ to it.
All existing rules that use this auxiliary tag will then automatically apply to the hosts with the new tag.
This saves you having to check and edit each individual rule.


[#predefined_tags]
== Predefined tag groups

You can get started configuring the host tags via [.guihint]#Setup > Hosts > Tags:#

[#hosttags_tags_default]
.In a freshly set up system, only the predefined tag groups and auxiliary tags are listed
image::hosttags_tags_default.png[alt="List of all predefined host tag groups."]

{CMK} sets up multiple host tag groups during an installation:

[cols="25,25,25,~",options="header"]
|===
|Group ID
|Group Title (Name)
|Included Tags
|Function
|`criticality`
|Criticality
|Productive system (ID: `prod`), Business critical (ID: `critical`), Test system (ID: `test`), Do not monitor this host (ID: `offline`)
|System criticality. For the `offline` tag the rule [.guihint]#Hosts to be monitored# is included, which disables the monitoring of the host. The other tags are just examples and have no initial function. However, you can assign these to hosts and then use them in rules.
|`networking`
|Networking Segment
|Local network (low latency) (ID: `lan`), WAN (high latency) (ID: `wan`), DMZ (low latency, secure access) (ID: `dmz`)
|Take this tag group as an example only. For the `wan` tag the example rule [.guihint]#PING and host check parameters# is stored, which adjusts the threshold values for PING response times to the longer runtimes in the WAN.
|`agent`
|Checkmk agent / API integrations
|API integrations if configured, else Checkmk agent (ID: `cmk-agent`), Configured API integrations and Checkmk agent (ID: `all-agents`), Configured API integrations, no Checkmk agent (ID: `special-agents`), No API integrations, no Checkmk agent (ID: `no-agent`)
|Specifies how the data is fetched from the host.
|`piggyback`
|Piggyback
|Use piggyback data from other hosts if present (ID: `auto-piggyback`), Always use and expect piggyback data (ID: `piggyback`), Never use piggyback data (ID: `no-piggyback`).
|This tag determines whether and how xref:glossary#piggyback[piggyback data] is expected/processed for the host.
|`snmp_ds`
|SNMP
|No SNMP (ID: `no-snmp`), SNMP v2 or v3 (ID: `snmp-v2`), SNMP v1 (ID: `snmp-v1`)
|This specifies whether data should (also) be collected via SNMP.
|`address_family`
|IP address family
|IPv4 only (ID: `ip-v4-only`), IPv6 only (ID: `ip-v6-only`), IPv4/IPv6 dual-stack (ID: `ip-v4v6`), No IP (ID: `no-ip`)
|Determines whether the host should be monitored by IPv4 or IPv6 or both.
'No IP' is relevant for hosts queried via a xref:glossar#special_agent[special agent].
|===

You can customize predefined tag groups as long as they are not marked as _builtin_ (in the [.guihint]#Actions# column).
The _builtin_ tag groups are required internally by {CMK} when generating configurations and are therefore not modifiable.
In contrast, changes in [.guihint]#Criticality# or [.guihint]#Network Segment# are not problematic.
These are provided as examples only.


[#create_tag_group]
== Creating tag groups

You start the creation of custom host tags on the [.guihint]#xref:hosttags_tags_default[Tag groups]# page, which again can be accessed via [.guihint]#Setup > Hosts > Tags#.

Before you can create host tags, you must first create the host tag group that will contain the tags.
Creating a new tag group is done with the icon:icon_new[alt="Icon to create a new tag group."] [.guihint]#Add tag group# button, which opens the [.guihint]#Basic settings# box with the following fields:

.ID and Title (name) are specified in the basic settings for the tag group
image::hosttags_group_basic_settings.png[alt="Basic settings for a tag group."]


The [.guihint]#Tag group ID# is used internally as the ID for the tag group.
It must be unique and cannot be changed later.
The usual rules for permitted characters apply (letters, digits, underscore only).

The [.guihint]#Title# is used everywhere in the GUI where the tag group is concerned.
Since this is a display only text, it can be changed at any time without affecting the existing configuration.

You can leave the [.guihint]#Topic# empty.
Your tag group will then be displayed together with the supplied [.guihint]#Criticality# and [.guihint]#Networking Segment# groups in the [.guihint]#Custom attributes# box of the host properties.
You can also create your own xref:topic[topics] and use these to consolidate your tag groups neatly together.

Most importantly, the next box -- [.guihint]#Tag choices# -- is where you specify, one by one, all of the host tags for the new tag group:

.Each host tag also needs an ID and a title
image::hosttags_group_tag_choices.png[alt="List of host tags belonging to the tag group."]

For this the [.guihint]#Tag ID# must be unique within the group.

The order, which you can change as usual with the icon:icon_drag[alt="Icon to move a list entry."] button, has not only an optical function:
*The first tag in the list is the default value*!
This means that _all_ hosts that do not have an explicit setting for this tag group are automatically set to this value.

Under [.guihint]#Auxiliary tags#, you can assign auxiliary tags to each host tag to be automatically added to the host when the host tag is selected.

You create a checkbox tag in the same way, by creating a tag group but containing only *one* tag:

.The tag group in a checkbox tag contains exactly one entry
image::hosttags_checkbox_tag.png[alt="Basic settings and tag definition for a checkbox tag."]

In the host properties, this tag will then be displayed like this:

.A checkbox tag is by default disabled
image::hosttags_checkbox_tag_in_host_prop.png[alt="Properties of a host with a checkbox tag."]

[#create_aux_tag]
== Creating auxiliary tags

In addition to the predefined host tag groups, {CMK} also sets up matching xref:aux_tag[auxiliary tags], which are listed under the groups on the [.guihint]#xref:hosttags_tags_default[Tag groups]# page.

You can create new auxiliary tags with icon:icon_aux_tag[alt="Icon for creating auxiliary tags."] [.guihint]#Add aux tag#.

.The basic settings for an auxiliary tag are almost identical to those of a tag group
image::hosttags_auxtag_basic_settings.png[alt="The settings for an auxiliary tag."]

With the fixed ID and a descriptive title, all of the settings required for an auxiliary tag will be defined.
The assignment of auxiliary tags to host tags is done in the xref:create_tag_group[tag groups].


[#edit_delete_tag]
== Changing and deleting tag groups and tags

Modifying an existing tag group configuration may look like a simple operation at first glance, unfortunately this is not always the case, as it can have a major impact on your existing configuration.

Changes that only affect the display or only add new options are not problematic and do not affect the existing hosts and rules:

* Changing the title or subject of tag and tag groups.
* Adding another tag to an existing tag group.

Any other changes may affect existing folders, hosts and rules that use the affected tags.
When doing so, {CMK} does not simply prohibit such changes, but tries to modify your existing configuration for you, so that everything will again make sense.
The exact results will depend on the type of operation.

*Tip:* {CMK} can show you which host and auxiliary tags are currently in use in folders, hosts and rules:
To do this, on the [.guihint]#xref:hosttags_tags_default[Tag groups]# page, select the [.guihint]#Tags > Tag usage# menu item.


[#delete_tag_group]
=== Deleting tag groups

Deleting a tag group removes the information for the affected tag from all hosts.
If the tag group is used as a condition in existing rules, you will receive the following warning:

.When deleting a tag group, you decide how to modify the affected rules
image::hosttags_delete_warn.png[alt="Warning when deleting a tag group."]

Here you have to decide whether you want to delete the conditions from the existing rules for the affected host tags, or whether you want to delete the entire rules.
Both of these approaches can be useful, but {CMK} cannot decide which is better for your operation.

You select rules to be deleted with the [.guihint]#Delete rules containing tags that have been removed, ...# button. 
However, a rule will only be deleted if it has a _positive_ condition with a tag in the tag group.
Rules that have a _negative_ condition with such a tag simply lose that condition, but the rule will still exist.
For example, if you have created a rule for all hosts that *do not* have `dc02` tag, and you remove `dc02` tag completely from the configuration, then obviously this condition is
also redundant.

If you are not sure, you should go through the rules (listed in the warning) and manually remove or modify all conditions for the affected tag group.


[#delete_tag]
=== Deleting tags

You can delete a tag by editing the group, removing the tag and then saving the changes.
Doing so may result in a similar warning as when removing a tag group.

Hosts that had the affected tag set will be set to the default value automatically.
This will always be the first tag in the list, as described for xref:create_tag_group[Creating a tag group].

For rules that contain the tag to be deleted as a condition, the procedure is the same as described in the previous section for deleting tag groups.


[#delete_aux_tag]
=== Deleting auxiliary tags

You can only delete an auxiliary tag if it is not assigned to a host tag.


[#rename_tag_id]
=== Renaming tag IDs

Unlike tag groups, you can actually change the IDs of tags at a later time.
This is an exception to the {CMK} principle that IDs are immutable once they have been assigned.
This exception can be useful, however, if you want to prepare data to import from another system, for example, and need to adapt the existing different {CMK} tag structure for this action.

To rename a tag ID, edit the tag group and simply change the tag ID there.

*Important:* Do *not* change the tag's title when doing this.

Before {CMK} proceeds with the configuration modifications, you will be warned of the consequences:

.This warning will show you how {CMK} will perform the renaming of the tag IDs
image::hosttags_rename_warn.png[alt="Warning when renaming tag IDs."]

{CMK} will now modifiy all of the affected folders, hosts, and rules accordingly.

Note that there may still be situations where you need to manually tweak in other places.
For example, tag IDs are included in URLs that call xref:glossar#view[views], which filter by tags.
{CMK} cannot customize these URLs for you.
In addition, filter configurations in xref:reporting#[reports] and xref:glossar#dashboard[dashboards] cannot be automatically customized.


[#tags_in_monitoring]
== Displaying host tags in monitoring

Hosts are usually organized into folders in {CMK}.
You can display the resulting hierarchy as a tree view in the sidebar at the bottom of the xref:glossar#snapin[snapins] [.guihint]#Tree of Folders# and from there call the default view for hosts filtered per branch.
The snapin adds filtering options for topics and options for alternative views for this tree.

You can also create such a tree view from host tags and thus map a 'virtual' hierarchy -- using the [.guihint]#Virtual Host Tree# snapin.
In addition to the host tags, you may also include the folder structure in such trees, whereby both the number of virtual trees and the respective branches are unlimited.

Let's assume you use the three tag groups _Criticality_, _Datacenter_ and _Operating systems_ for your hosts.
You will then get a selection by system at the top tree level, by data center below that, and finally by operating system.
Each hierarchy level takes you directly to a view of all hosts with these tags.

To create a Virtual Host Tree, first add the snapin to it via the icon:button_sidebar_add_snapin[alt="Icon to show all snapins."] button at the bottom of the sidebar:

.The configuration will still be missing the first time you call the snapin
image::hosttags_snapin_virtual_host_tree_default.png[alt="Snapin Virtual Host Tree.",width=50%]

Click on the link in the text that points to the missing configuration, or manually access the page in the global settings via [.guihint]#Setup > General > Global
Settings > User interface > Virtual Host Trees#:

.You can open the Virtual Host Tree settings by pressing a button
image::hosttags_virtual_host_tree_new.png[alt="The default in the global settings for the Virtual Host Tree."]

Next, create a new tree with the [.guihint]#Create new virtual host tree configuration# button:

.Host tag groups define the levels in the tree
image::hosttags_virtual_host_tree_settings.png[alt="Defining the tree structure in the global settings."]

First assign an ID and a Title to the tree.
You can optionally exclude the display of empty tree branches by checking [.guihint]#Exclude empty tag choices#.
Then add the desired tag groups in the desired order via [.guihint]#Add new element#.
You can also include the folder hierarchy via [.guihint]#Folder tree#.
You can change the order for the hierarchy as usual with the icon:icon_drag[alt="Icon to move a list item."] button.

After saving, the snapin will now show the selected hierarchy as a tree structure:

.The configured snapin now shows 3 levels of tag groups
image::hosttags_snapin_virtual_host_tree_configured.png[alt="Snapin Virtual Host Tree with 3 tag groups.",width=50%]

The branches and leaves of the tree are the host tags from the tag groups selected in the configuration.
The numbers in parentheses alongside the 'leaves' show how many hosts have those tags.
