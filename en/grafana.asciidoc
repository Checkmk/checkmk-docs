include::global_attr.adoc[]
= Integrating {CMK} in Grafana
:revdate: 2021-06-28
:title: Integrating {CMK} in Grafana
:description: Easily create Grafana dashboards with data from your {CMK} monitoring with the plug-in CheckMK data source for Grafana.

{related-start}
link:views.html[Host and service views]
link:web_api_references.html[Command reference for the HTTP-API]
link:monitoring_kubernetes.html[Monitoring Kubernetes]
link:monitoring_docker.html[Monitoring Docker]
{related-end}


== Introduction
[{image-left}]
image::grafana_logo.png[width=168]

{CMK} has an integrated xref:graphing#[graphing system] with comprehensive features for visualizing and storing of metrics.
However it might still be helpful to use link:https://grafana.com/[Grafana] as an external graphing system --
for example, if you are already using Grafana and have other data sources connected to it and want to have a single, unified dashboard.

Beginning with version {v20}, it is possible in all {CMK} editions to directly address {CMK} as a data source in
Grafana, and to display individual metrics – or even entire graphs as predefined by {CMK} – in Grafana.
In addition you can create your own graphs dynamically using xref:regexes#[regular expressions] to specify a set
of hosts and services that should take specific metrics in the graph into account.

How to get and to display your {CMK} metrics in Grafana is explained fundamentally in this article.
For detailed instructions on how to use and configure Grafana,
see the link:https://grafana.com/docs/[Documentation at Grafana Labs].

Since the plug-in for Grafana is developed in parallel to {CMK}, it is not included with {CMK}.
You can however keep up-to-date with the latest development status through the
link:https://github.com/tribe29/grafana-checkmk-datasource/tree/old-main[Archive on GitHub].

Listing the data source directly in the official Grafana Data Sources is still in progress.
Once the plug-in has been officially incorporated you will be able to install it directly from Grafana's interface.


== Setting-up the plug-in in Grafana


=== Installing the plug-ins


To use the plug-in, there are two ways to add it into Grafana:

* You download the 1.x.x zip file from the link:https://github.com/tribe29/grafana-checkmk-datasource/tags[GitHub project], and manually paste the content into the Grafana plug-in directory.
* You clone the GitHub project directly into the plug-in directory.

==== Installation from the Zip-file

// //Dieser Variante stellt ist die einfachste und dann zu bevorzugen, wenn
// //Sie `git` auf dem Grafana-Server nicht installiert haben und dies
// //auch nicht können/wollen. Laden Sie einfach die aktuellste Version als
// //Zip-Datei herunter:

This variant is the simplest and is preferred if you have not installed `git` on the Grafana server and cannot/do not want to.
To install the plug-in, simply download the zip file with the latest version, and copy
it – for example, with `scp` – to the Grafana server:

[{image-border}]
image::grafana_download_plugin.png[]
// //BI:grafana_download_plugin.png


Alternatively, you can also load the file directly from the command line.
Note that you need to know the correct version for this.
With the option `-O` in the following comannd, the name of the file to
be saved locally is set manually. Otherwise it would be `1.1.0.zip`:

[{shell-raw}]
----
{c-root} wget -O grafana-checkmk-datasource-1.1.0.zip https://github.com/tribe29/grafana-checkmk-datasource/archive/1.1.0.zip
----

The content is then extracted into the Grafana plug-in directory.
This is usually the file path `/var/lib/grafana/plugins/`:

[{shell}]
----
{c-root} unzip grafana-checkmk-datasource-1.1.0.zip && mv grafana-checkmk-datasource-1.1.0 /var/lib/grafana/plugins/
----

Finally you can activate and set up the plug-in in the Grafana interface.


==== Installation by cloning the Git archive


The variant described above has the fewest requirements,
and is easy to implement even for less-experienced users.
But if you get the plug-in directly from the Git archive,
upgrading to a new version can be quickly performed with one command: `git pull`

To use the plug-in with the help of a copy of the archive,
you absolutely need the `git` program. The procedure is then quite simple
 – simply clone the archive into the Grafana plug-in directory:

[{shell-raw}]
----
{c-root} cd /var/lib/grafana/plugins/ && git clone https://github.com/tribe29/grafana-checkmk-datasource.git --branch old-main
Cloning into 'grafana-checkmk-datasource'...
remote: Enumerating objects: 541, done.
remote: Total 541 (delta 0), reused 0 (delta 0), pack-reused 541
Receiving objects: 100% (541/541), 291.55 KiB | 0 bytes/s, done.
Resolving deltas: 100% (374/374), done.
Checking connectivity... done.
----

Afterwards the plug-in is available in the Grafana GUI, and from there can be activated and set up.

Since the master branch always shows the latest version, after a new release you just need
to execute the following command to update the plug-in on the Grafana server:

[{shell}]
----
{c-root} cd /var/lib/grafana/plugins/grafana-checkmk-datasource && git pull
----


=== Activating and setting-up the plug-in

After the necessary files have been installed you can activate the plug-in in Grafana.
Go to the configuration and select the [.guihint]#Data Sources# tab.
Here you can add a new data source using the [.guihint]#Add data sources# button:

image::grafana_plugins_overview.png[]

The entry for {CMK} can be found under the category [.guihint]#Others#:

image::grafana_plugin_cmk.png[]

The configuration mask for the data source is quite simple.
Enter the URL for your site and an automation user here.
*Important* – In a xref:distributed_monitoring#[distributed setup] with multiple sites,
here you specify the URL for the _central site_:

image::grafana_plugin_config.png[]

If you want to connect more than one {CMK} site, from [.guihint]#CheckMK# you can optionally
add a unique name to each connection -- otherwise simply leave the standard `{CMK}` as is.

After you have saved the connection with the [.guihint]#Save & Test# button, it will be available as a
data source in Grafana and you can configure your first graphs.


==== Special features from Grafana 8.0

As of Grafana 8.0, it is no longer possible to integrate external plug-ins without further ado as long as they are not signed.
This applies to the {CMK} plugin so that you need an additional step.

To do this, modify the configuration file `/etc/grafana/grafana.ini` and change the line `;allow_loading_unsigned_plugins =` as follows. Note to remove the semicolon at the beginning of the line:

./etc/grafana/grafana.ini
[source,ini]
----
allow_loading_unsigned_plugins = checkmk-datasource
----

With this setting you only add an exception for this one plugin. If you are using Grafana in a (Docker) container, either link the custom INI file into the container or create a `volume` which you map to the directory in the container (`/etc/grafana`). The following is an example of how to link the INI file using `--mount`. Note that this is only an example and will probably not fit your environment directly:

[{shell}]
----
{c-user} sudo docker run -d pass:q[*--mount type=bind,source=/home/user/grafana/grafana.ini,target=/etc/grafana/grafana.ini*] -p 3000:3000 --name grafana -v grafana-plugins:/var/lib/grafana/plugins -v grafana-db:/var/lib/grafana grafana/grafana
----


== Creating the first graph

=== Creating a blank dashboard


Dashboards are generated in Grafana using the ‘plus’ icon on the right side.
With a click on [.guihint]#Dashboard# you can create something like this:

image::grafana_new_dashboard.png[width=370]


[#predefined]
=== Displaying a predefined graph from {CMK}

{CMK} automatically merges metrics into a graph to quickly compare content-related metrics.
You can display the metrics from such a ready-made graph directly in Grafana.
In an existing – or just created – dashboard, create a new [.guihint]#Panel#.
Here you first select [.guihint]#Add Query#:

image::grafana_dashboard_addquery.png[]

The [.guihint]#Query# should be _Check_MK_.
You can then prefilter the query for a {CMK} ([.guihint]#Site#) -- then select the desired [.guihint]#Host#, [.guihint]#Service# and [.guihint]#Graph#.
The _CPU utilization_ service is used here as an example:

image::grafana_dashboard_predefined_config.png[]

The result is displayed immediately. As soon as you click on the Save icon, you will be prompted
to specify a title for the [.guihint]#Panel#. Then you will be redirected directly to the dashboard:

image::grafana_dashboard_predefined_view.png[]


=== Displaying a single metric from a host


Of course it is also possible to display individual metrics for a host.
The procedure is very similar to that with xref:grafana#predefined[predefined graphs] – you just
change the [.guihint]#Mode# to _single metric_, and instead of choosing a predefined graph,
select the [.guihint]#Metric# for a service:

image::grafana_dashboard_single_config.png[]

Again, save the [.guihint]#Panel# and view the result in the dashboard:

image::grafana_dashboard_single_view.png[]


== Creating complex graphs

Especially in a dynamic cluster, you often want to be able to track the entire history of a metric
across all participating hosts without having to adjust a graph each time a new node is added or dropped.
As of version {v16}p2 you also have the option to create graphs dynamically using regular expressions.
The prerequisite for this is that the plug-in is in version 1.1.0.

Change the [.guihint]#Mode# in a new [.guihint]#Panel# to _combined Graph_. The general setting options remain unchanged, but you can now summarize metrics from one or from different hosts and services. You have the access to all
xref:regexes#characters[regular expressions] that you also know from {CMK}. Note that regular expressions can also optionally be used for the hosts here. The expression `pass:[.*]` in the service field is only for clarification -- it would work without it.

image::grafana_dashboard_combined_config.png[]

In addition to the advanced filter options, with [.guihint]#Aggregation# you can specify the
representation of the metrics in the graph, and with [.guihint]#Graph#, which graph should be used as a reference.
Note that metrics for a host/service will only be displayed if the host/service _also_ has this selected graph.
The example graph looks like this:

image::grafana_dashboard_combined_view.png[]



== Additional Features

=== Introduction

From version {v16}p2 and version 1.1.0 of the plug-in it is also possible to

* control the metric names using variables and
* show status changes of certain services as comments.

=== Metric names

The plug-in usually takes the metric name as it has already been defined in {CMK}.
You therefore don't have to define a human-readable alias in order to avoid later having to work with cryptic metric names,
which the code uses internally.

However, if you want to use metrics from several hosts in a graph, it can quickly lead to confusion regarding the source of a metric. To solve this problem you can adjust the display name in a panel to always get clear information. You can choose from a number of variables:

[cols=2]
|===
|Variable |Description 

|$title |The metric’s title as it would be represented in {CMK}.
|$site |The {CMK} site on which the host and its metric is monitored.
|$host |The host that the metric is associated with.
|$service |The service to which the metric is assigned in {CMK}.
|===


With these variables you can easily adjust the metric label even if you display several metrics in one graph. In the example below the following expression was used in the corresponding [.guihint]#Label Format# field:

.Label Format
[{file}]
----
$host/$service: $title
----

The result looks like this, for example:

image::grafana_series_renaming.png[]


=== Automatic comments

Grafana supports the setting of comments in your graphs. Set comments, then mark an event directly in the graph and thus make it possible to leave a comment at certain times. You can also have the status changes of one or more services displayed automatically by adding an [.guihint]#Annotation Query#.

You can access the configuration by clicking the ‘gear’ icon on the dashboard, and then opening the configuration for the [.guihint]#Annotations#:

image::grafana_anno_config1.png[]

Use the [.guihint]#New#-/[.guihint]#Add Annotation Query# button to create a new query. Set the [.guihint]#Data source# to {CMK} and under [.guihint]#Name# assign the display name as the query will later be shown in the dashboard. You also determine whether the [.guihint]#annotation query# is directly activated (_Enabled_) and/or invisible (_Hidden_). The color of the comments can also be defined here if desired. In this example it was set to yellow -- this query should only be {WARN}:

image::grafana_anno_config2.png[]

The actual query then works in a similar way to creating a graph. You only have to explicitly determine the site to be queried, since it is not possible to query all {CMK} sites here. Finally you determine the status of the service or services to be displayed:

image::grafana_anno_config3.png[]

*Important*: Limit the data to be displayed as much as possible, because comments are shown in *all* compatible graphs on the dashboard. If in doubt create several small [.guihint]#annotation queries# rather than one large one.

After you have added the configuration ([.guihint]#Add# button), and saved the new dashboard settings, go back to your dashboard. Depending on whether you activated the query directly during setup, you may already see comments that have been automatically-generated in your graphs:

image::grafana_anno_view.png[]


== Files and directories

[cols="45,~"]
|===
|File path |Description 

|/var/lib/grafana/plugins/ |Grafana checks here for (new) plug-ins. Each plug-in gets its own subdirectory. Save the {CMK} plug-in here.
|===

