// -*- coding: utf-8 -*-
// IGNORE 0b1
include::global_attr.adoc[]
= Integrating {CMK} in Grafana
:revdate: 2022-09-28
:title: Integrating {CMK} in Grafana
:description: Easily create Grafana dashboards with data from your {CMK} monitoring with the {CMK} plug-in for Grafana.

{related-start}
xref:monitoring_kubernetes#[Monitoring Kubernetes]
xref:monitoring_docker#[Monitoring Docker]
{related-end}


// Starting here, the old article is present and still online.
// Delete everything from here up to line 280. Afterwards the new article in German follows - commented out as usual.

#This article is being revised.
It is currently only valid if you use the {RE} or {SE} with your own Grafana server.
If you are using the {CE} and/or Grafana Cloud, please be patient until the update is available.
If you need it urgently, please head over to the link:https://docs.checkmk.com/latest/de/grafana.html[German version of the article] and pump it into your favorite web translator.#


== Introduction
[{image-left}]
image::grafana_logo.png[width=168]

{CMK} has an integrated xref:graphing#[graphing system] with comprehensive features for the visualization and storing of xref:glossar#metric[metrics].
However it might still be helpful to use link:https://grafana.com/[Grafana^] as an external graphing system --
for example, if you are already using Grafana and have other data sources connected to it and want to have a single, unified dashboard.

Beginning with version {v20}, in all {CMK} editions it is possible to directly address {CMK} as a data source in Grafana 8.x, and to display individual metrics -- or even entire graphs as predefined by {CMK} -- in Grafana.
In addition you can create your own graphs dynamically using xref:regexes#[regular expressions] to specify a set of hosts and services that should take specific metrics in the graph into account.

This article explains how to retrieve metrics from {CMK} and display these in Grafana.
For detailed instructions on how to use and configure Grafana, see the link:https://grafana.com/docs/[Documentation at Grafana Labs^].

The plug-in for Grafana is developed independently from {CMK}, thus it is not included with {CMK}, rather it is maintained in its own link:https://github.com/Checkmk/grafana-checkmk-datasource[repository on GitHub^].
Since the plug-in has to be installed in Grafana, it makes no sense to bundle it with {CMK}.
An inclusion directly into Grafana currently is in review by the maintainers of Grafana.
Once this review has been completed, an installation directly from the Grafana user interface will be possible.


== Setting up the plug-in in Grafana

=== Installing the plug-ins

To install the plug-in, simply download the link:https://github.com/Checkmk/grafana-checkmk-datasource/releases[zip file] with the latest version, and copy it – for example, with `scp` – to the Grafana server.

[{image-border}]
image::grafana_download_plugin.png[]

Alternatively, you can also load the file directly from the command line.
Note that you need to know the correct version for this.

[{shell-raw}]
----
{c-root} wget https://github.com/Checkmk/grafana-checkmk-datasource/releases/download/v2.0.2/tribe-29-checkmk-datasource-2.0.2.zip
----

Now unpack the archive:

[{shell}]
----
{c-root} unzip tribe-29-checkmk-datasource-2.0.2.zip
----

Next, move the newly created folder to Grafana's plug-in directory.
Its path is usually: `/var/lib/grafana/plugins/`

[{shell}]
----
{c-root} mv -v tribe-29-checkmk-datasource /var/lib/grafana/plugins/tribe-29-checkmk-datasource
----

Change ownership to the Grafana user (typically `grafana`):

[{shell}]
----
{c-root} chown -R grafana:grafana /var/lib/grafana/plugins/tribe-29-checkmk-datasource
----

_Installation by cloning the Git archive_ (as stated in previous versions of this document) is no longer possible.

[#allow_unsigned]
=== Allowing unsigned plug-ins

As of Grafana 8.0, it is no longer possible to easily integrate external plug-ins if they have not been signed.
This applies to the {CMK} plug-in which is still under development, so that you also need an additional step.

To do so, open `/etc/grafana/grafana.ini` in your favorite editor, navigate to the `[plugins]` section and modify the line `;allow_loading_unsigned_plugins =` as follows.
Make sure to remove the semicolon at the beginning of the line:

./etc/grafana/grafana.ini
[source,ini]
----
[plugins]
allow_loading_unsigned_plugins = tribe-29-checkmk-datasource
----

With this setting you add an exception for this single plug-in.
If you are using Grafana in a (Docker) container, either link the custom INI file into the container or create a `volume` which you map to the directory in the container (`/etc/grafana`).
The following code blocks show an example of how to link the INI file using `--mount`.
Note that this is only an example and will probably not fit your environment exactly:

[{shell}]
----
{c-user} sudo docker run -d pass:q[*--mount type=bind,source=/home/user/grafana/grafana.ini,target=/etc/grafana/grafana.ini*] -p 3000:3000 --name grafana -v grafana-plugins:/var/lib/grafana/plugins -v grafana-db:/var/lib/grafana grafana/grafana
----


=== Restarting the Grafana service

After changing the configuration file, updating or installing the plug-in, restart the Grafana service:

[{shell}]
----
{c-root} service grafana-server restart
----

Afterwards the plug-in is available in the Grafana GUI, and from there can be activated and configured.


=== Activating and setting up the plug-in

Once the necessary files have been installed you can activate the plug-in in Grafana.
Go to the configuration and select the [.guihint]#Data sources# tab.
Here you can add a new data source using the [.guihint]#Add data sources# button:

image::grafana_plugins_overview.png[]

The entry for {CMK} can be found at the bottom of the category [.guihint]#Others#:

image::grafana_plugin_cmk.png[]

The configuration form for the data source is quite simple.
Enter the URL for your site, the edition type and a user, who has rights to access the REST API, e.g. the automation user.
*Important:* In a xref:distributed_monitoring#[distributed setup] with multiple sites, specify the URL for the _central site_ in the input field:

image::grafana_plugin_config.png[]

If you want to connect more than one {CMK} site, you can optionally add a unique name to each connection
-- otherwise simply leave the default `tribe-29-checkmk-datasource` as is.

After you have saved the connection with the [.guihint]#Save & Test# button, it will be available as a data source in Grafana and you can configure your first graphs.


== Creating graphs

=== Creating a blank dashboard

Dashboards are generated in Grafana using the ‘plus’ icon on the left side.
Clicking on [.guihint]#Dashboard# will open a new, blank dashboard:

image::grafana_new_dashboard.png[width=420]


[#singlemetric]
=== Displaying a single metric from a host

The simplest dashboard shows a single graph for a service on a host. 
This can also be the metric of a xref:glossar#local_check[local check] for which no prebuilt graphs exist.
In an existing dashboard or the one you just created, create a new [.guihint]#panel#.
First select [.guihint]#Add Panel# here:

image::grafana_dashboard_addpanel.png[]

Creating the panel immediately takes you to adding a new _Query._
In the [.guihint]#Data source# menu, select [.guihint]#tribe-29-checkmk-data-source#.

Access to data for visualization is slightly different between the {CRE} and the commercial editions:
In the {RE} you have to select from predefined  menus for site, host name, service and so on.
The commercial editions provide more flexibility by using cascades of filters.
This allows for very detailed selection, for example, by using regular expressions.
We have chosen an example for which you can action its configuration procedure in both {CMK} editions.

First choose the [.guihint]#Site#, then filter for the [.guihint]#Hostname# used in monitoring.
For the first test select an arbitrary host that uses the Windows or Linux agent.
As the [.guihint]#Service# choose [.guihint]#Check_MK#.
Set the type of [.guihint]#Aggregation# to [.guihint]#Lines#.
For the [.guihint]#Graph type# you have to select between [.guihint]#Single metric# or [.guihint]#Template#: 
Templates inherit metrics from {CMK} that may also contain combined graphs.
Our screenshots show the [.guihint]#Single metric# containing the [.guihint]#Time spent waiting for Checkmk agent#:

.Selecting metrics using filters in the commercial editions
image::grafana_dashboard_single_config.png[]

.Selecting metrics using predefined menus in the {RE}
image::grafana_dashboard_single_config_cre.png[]

Grafana will instantly show the result.
Now click on [.guihint]#Apply# to save the graph.
This brings you back to the dashboard where you click the floppy disk icon ([.guihint]#Save dashboard#) in the upper right area to save it.
Afterwards you'll be prompted to specify a title for the new [.guihint]#Dashboard#.

.New dashboard with a distinctive name
image::grafana_dashboard_single_view.png[]


[#predefined]
=== Displaying a predefined graph from {CMK}

The developers of {CMK} already have aggregated many corresponding metrics into combined graphs to enable users to get a quicker overview on the various aspects of a single resource.
You can display the metrics from such a ready-made graph directly in Grafana.

The procedure starts in the same way as explained in the previous section, but differs at [.guihint]#Graph type# by selecting the [.guihint]#Template# entry and the [.guihint]#Template# of the service to be used.

image::grafana_dashboard_predefined_config.png[]

Once you are satisfied with the selection made, click the [.guihint]#Apply# button.
The graph will now be available in the selected dashboard. 

image::grafana_dashboard_predefined_view.png[]


[#complexgraphs]
=== Creating complex graphs

Especially in a dynamic cluster, you will often want to be able to track the entire history of a metric across all participating hosts without having to modify a graph each time a new node is added or removed.
To achieve this you have several options for dynamically customizing graphs.

The first way is to filter by [.guihint]#Host Labels# or [.guihint]#Host Tags# instead of selecting individual hosts.
Another option is to use xref:regexes#[regular expressions].
You can apply regular expressions to hosts or services.
In the example, `pass:[filesystem]` matches all services that contain `filesystem` -- no matter how many file systems a host has mounted.

image::grafana_dashboard_combined_config.png[]

The entry `pass:[filesystem.*nvme]` would narrow down the selection to all file systems on NVMe drives, regardless of the type of file system, since any string is allowed between `filesystem` and `nvme`.

In addition to the advanced filter options, with [.guihint]#Aggregation# you can specify the representation of the metrics in the graph, and with [.guihint]#Graph#, which graph should be used as a reference.
Note that metrics for a host/service will only be displayed if the host/service _also_ has this selected graph.
The example graph looks like this:

image::grafana_dashboard_combined_view.png[]


== Changes compared to previous versions

////
=== Omitted variables

Earlier beta versions allowed the display of metric names to be controlled using variables.
Here the following variables `$title`, `$site`, `$host` and `$service` were allowed:
This feature was removed from version 2.0b1 of the plug-in because it actually duplicated a functionality that is already a part of Grafana.
In case you need for example the site name contained in the name of the metric but not as a filtering criteria, create a filter using a regular expression that uses the asterisk `*` to match any site.
////

=== Renaming via regular expressions

In the editing mode of each panel you find a [.guihint]#Transform# tab.
With the subitem [.guihint]#Rename by regex# you can reorder the naming of metrics or suppress information that is not needed.
Our following example searches two groups of characters that are separated by a comma and following space, swaps them and prepends `Service` and `Host`.

image::grafana_series_renaming_regex.png[]

The variables `$1` and `$2` here correspond to the strings 'captured' in the line above (_match groups_ or _capture groups_).
Grafana also allows for nested match groups.
An overview of their options is shown in the corresponding section in the xref:regexes#matchgroups[regular expressions article].


== Files and directories

[cols="30,~",options="header"]
|===
|File path |Description 
|`/var/lib/grafana/plugins/` |Grafana checks here for (new) plug-ins. Each plug-in gets its own subdirectory. Save the {CMK} plug-in here.
|`/etc/grafana/` |Configuration directory for Grafana.
|`/etc/grafana/grafana.ini` |Central configuration file for Grafana. Here you specify which unsigned plug-ins are allowed.
|===










// This block is new
// start translation
////
[#intro]
== Einleitung

[{image-left}]
image::grafana_logo.png[width=168]

{CMK} verfügt mit seinem integrierten xref:graphing#[Graphing-System] über ein mächtiges Werkzeug zum Aufzeichnen und Visualisieren von xref:glossar#metric[Metriken.]
Dennoch kann es sinnvoll sein, link:https://grafana.com/[Grafana^] als externes Graphing-System anzubinden,
z.B. weil Sie Grafana bereits nutzen und die Daten von {CMK} mit Daten aus anderen Systemen in gemeinsamen Dashboards zusammenführen möchten.

Ab Grafana 8.x ist es möglich, {CMK} in allen Editionen direkt als Datenquelle anzusprechen und einzelne Metriken oder sogar ganze Graphen, wie sie in {CMK} vordefiniert sind, anzeigen zu lassen.
Zusätzlich können Sie dynamisch eigene Graphen erstellen lassen, indem Sie über xref:regexes#[reguläre Ausdrücke] eine Gruppe von Hosts und Services bestimmen, von denen bestimmte Metriken in dem Graphen berücksichtigt werden sollen.

Dieser Artikel beschreibt, wie Sie Ihre Metriken aus {CMK} in Grafana abrufen und darstellen.
Screenshots wurden mit Grafana 10.1 erstellt, frühere Versionen weichen in der Benutzerführung etwas davon ab.
Eine ausführliche Anleitung, wie Sie Grafana nutzen und konfigurieren können, finden Sie in der link:https://grafana.com/docs/[Dokumentation bei Grafana Labs.^]

Das Grafana-Plugin wird unabhängig von {CMK} entwickelt und in einem eigenen link:https://github.com/Checkmk/grafana-checkmk-datasource[Github-Repository^] gepflegt.
Dieser Artikel beschreibt die Einrichtung des Plugins in Version 3.1, welche mit {CMK} {v21} und {v22} zusammenspielt.
Da die Installation des Plugins in Grafana erfolgt, ist eine Auslieferung zusammen mit {CMK} nicht sinnvoll.


[#installation]
== Das Plugin in Grafana installieren

Je nach Installationsart Ihres Grafana-Servers und Ihrer {CMK}-Edition kommen verschiedene Methoden der Plugin-Installation in Frage.
Einzige Einschränkung hierbei: Benutzer des Grafana Cloud Angebots müssen die {CCE} verwenden und das Plugin xref:installation_marketplace[über die offizielle Grafana Plugin-Sammlung] aktivieren.
On-Premises-Installationen von Grafana können an alle {CMK}-Editionen angebunden werden.

[#installation_cli]
=== Installation auf der Kommandozeile ({CE}, eigener Grafana-Server)

Diese Installationsart setzt die Verwendung von {CCE} voraus.
Bei Betrieb von Grafana auf einem eigenen Server ist dort die Installation aus der Grafana Plugin-Sammlung via Kommandozeile möglich:

[{shell-raw}]
----
{c-root} grafana-cli plugins install checkmk-cloud-datasource
----

Starten Sie den Grafana-Serverdienst neu:

[{shell}]
----
{c-root} systemctl restart grafana-server
----

Anschließend ist das Plugin in der Oberfläche von Grafana verfügbar und kann aktiviert und eingerichtet werden.

[#installation_marketplace]
=== Installation aus der Grafana Cloud GUI ({CE}, Grafana Cloud)

Loggen Sie sich zuerst in der Grafana-Instanz ein, in der Sie die {CMK}-Datenquelle installieren wollen.
Rufen Sie dann die link:https://grafana.com/grafana/plugins/checkmk-cloud-datasource/?tab=installation[Seite der Datenquelle in der Grafana Plugin-Sammlung^] auf.
Im Reiter [.guihint]#Installation# setzen Sie ein Häkchen bei der Grafana-Instanz, die das Plugin erhalten soll und klicken anschließend auf den Knopf [.guihint]#Install.#
Bis das Plugin im Web-Interface der Grafana-Installation verfügbar ist, können wenige Minuten vergehen.

[#installation_zip]
=== Installation aus Zip-Archiv (alle Editionen, eigener Grafana-Server)

Auf der link:https://github.com/Checkmk/grafana-checkmk-datasource/releases[Releases-Seite des GitHub-Repositories^] finden Sie zwei Varianten des Plugins als Zip-Archiv:

* Die xref:installation_cli[oben] erwähnte signierte Variante `checkmk-cloud-datasource-X.Y.Z.zip`, die nur mit der {CE} genutzt werden kann.
* Eine Variante, die das alte Namensschema `tribe-29-checkmk-datasource-X.Y.Z.zip` nutzt, für alle Editionen von {CMK} {v21} an aufwärts.

Laden Sie einfach die aktuellste Version als Zip-Datei herunter und kopieren Sie sie, zum Beispiel mit `scp`, auf den Grafana-Server.

[{image-border}]
image::grafana_download_plugin.png[]

Statt über den Browser können Sie die Datei natürlich auch direkt über die Kommandozeile laden.
Beachten Sie, dass Sie dafür die aktuelle Version wissen müssen – im folgenden Beispiel schreiben wir die Version in die Variable `$plugvers`.

[{shell-raw}]
----
{c-root} plugvers='3.1.1'
{c-root} wget https://github.com/Checkmk/grafana-checkmk-datasource/releases/download/v${plugvers}/tribe-29-checkmk-datasource-${plugvers}.zip
----

Entpacken Sie jetzt das Zip-Archiv:

[{shell}]
----
{c-root} unzip tribe-29-checkmk-datasource-${plugvers}.zip
----

Erstellen Sie ein Plugin-Verzeichnis, falls dieses noch nicht existiert, und machen Sie den Linux-Benutzer, unter dessen Kennung die Grafana-Prozesse ausgeführt werden (meist `grafana`) zu dessen Eigentümer:

[{shell}]
----
{c-root} mkdir -p /var/lib/grafana/plugins
{c-root} chown grafana:grafana /var/lib/grafana/plugins
----

Verschieben Sie den entstandenen Ordner in das Plugin-Verzeichnis von Grafana.
Üblicherweise ist das der Pfad `/var/lib/grafana/plugins/`:

[{shell}]
----
{c-root} mv -v tribe-29-checkmk-datasource /var/lib/grafana/plugins/tribe-29-checkmk-datasource
----

Ändern Sie den Eigentümer auf den Grafana-Benutzer:

[{shell}]
----
{c-root} chown -R grafana:grafana /var/lib/grafana/plugins/tribe-29-checkmk-datasource
----

Eine Installation über das Klonen des Git-Archivs (wie es früher in diesem Artikel beschrieben wurde) ist nicht mehr möglich.
Falls Sie am Plugin mitentwickeln wollen, lesen Sie die link:https://github.com/Checkmk/grafana-checkmk-datasource/blob/main/DEVELOPMENT.md[Hinweise für Entwickler.^]


[#allow_unsigned]
==== Nicht signierte Plugins zulassen

Seit Grafana 8.0 ist es nicht mehr ohne Weiteres möglich, externe Plugins einzubinden, solange sie nicht signiert sind.
Das trifft auch auf das {CMK}-Plugin zu, so dass Sie einen zusätzlichen Schritt benötigen.

Passen Sie dazu die Konfigurationsdatei `/etc/grafana/grafana.ini` im Abschnitt `[plugins]` an.
Ändern Sie hier die Zeile `;allow_loading_unsigned_plugins =` wie folgt.
Achten Sie dabei darauf, das Semikolon am Zeilenanfang zu entfernen:

./etc/grafana/grafana.ini
[source,ini]
----
[plugins]
allow_loading_unsigned_plugins = tribe-29-checkmk-datasource
----

Mit dieser Einstellung fügen Sie eine Ausnahme für dieses eine Plugin hinzu.
Sollten Sie Grafana in einem (Docker-) Container einsetzen, haben Sie verschiedene Möglichkeiten, Änderungen an der Grafana-Konfiguration vorzunehmen.
Sind nur kleine Konfigurationsänderungen nötig, können diese über Umgebungsvariablen vorgenommen werden:

[{shell}]
----
{c-user} sudo docker run -d \
-e GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=tribe-29-checkmk-datasource \
-p 3000:3000 --name grafana \
-v grafana-plugins:/var/lib/grafana/plugins \
-v grafana-db:/var/lib/grafana grafana/grafana
----

Falls größere Anpassungen an der INI-Datei oder dem gesamten `/etc/grafana` erforderlich sind, verlinken Sie entweder die angepasste INI-Datei in den Container oder erstellen ein `Volume`, welches Sie auf das Verzeichnis im Container (`/etc/grafana`) mappen.
Es folgt ein Beispiel, wie Sie mit `--mount` die INI-Datei verlinken.
Beachten Sie, dass es sich hier nur um ein Beispiel handelt und wahrscheinlich nicht direkt auf Ihre Umgebung passt:

[{shell}]
----
{c-user} sudo docker run -d \
pass:q[*--mount type=bind,source=/home/user/grafana/grafana.ini,target=/etc/grafana/grafana.ini*] \
-p 3000:3000 --name grafana \
-v grafana-plugins:/var/lib/grafana/plugins \
-v grafana-db:/var/lib/grafana grafana/grafana
----

[#restart]
==== Neustart des Grafana-Dienstes

Nach der Installation des Plugins, Updates oder einer Änderung der Konfigurationsdatei starten Sie den Grafana-Serverdienst neu:

[{shell}]
----
{c-root} systemctl restart grafana-server
----

Anschließend ist das Plugin in der Oberfläche von Grafana verfügbar und kann aktiviert und eingerichtet werden.

[#create_user]
== Grafana-Benutzer in {CMK} erstellen

Die Grafana-Anbindung benötigt auf Seite von {CMK} einen Benutzer, der über ausreichende Berechtigungen verfügt und sich zudem über ein Automationspasswort (_automation secret_) statt eines Passworts authentifiziert.
Normale Gast- oder Monitoring-Benutzer genügen nicht, aus Sicherheitsgründen sollten Sie jedoch keinen Administrator verwenden.

Der einfachste Weg zu einem "passenden" Benutzer ist, die xref:wato_user#roles[Rolle] des Gastbenutzers (`guest`) zu klonen und mit der zusätzlichen Berechtigung [.guihint]#User management# (lesender Zugriff auf Benutzerinformationen) zu versehen.
Falls Sie Ihre Grafana-Benutzerrolle auf einer anderen Rolle basieren lassen, achten Sie darauf, dass neben [.guihint]#User management# auch die Berechtigung [.guihint]#See all host and services# gesetzt ist.

Ist die Rolle erstellt, legen Sie einen oder mehrere Grafana-Benutzer mit Automationspasswort (_automation secret_) an.
Der Rolle zugewiesene Berechtigungen können Sie später weiter einschränken, beispielsweise wird kein Zugriff auf xref:glossar#bi[BI] oder die xref:glossar#ec[Event Console] benötigt.

[#activate]
== Plugin aktivieren und einrichten

Nachdem die notwendigen Dateien installiert wurden, können Sie das Plugin in Grafana aktivieren.
Wechseln Sie dazu in die Konfiguration und wählen den Reiter [.guihint]#Data sources# aus.
Hier können Sie über den Knopf [.guihint]#Add data source# eine neue Datenquelle hinzufügen:

image::grafana_plugins_overview.png[]

Den Eintrag zu {CMK} finden Sie unten in der Kategorie [.guihint]#Others#:

image::grafana_plugin_cmk.png[]

Das Formular zu dieser Datenquelle ist recht einfach gehalten.
Geben Sie hier die URL zu Ihrer Instanz, den Typ Ihrer Edition und den soeben für Grafana angelegten xref:create_user[Benutzer] ein.
*Wichtig*: Wenn Sie {CMK} in einer xref:distributed_monitoring#[verteilten Umgebung] verwenden, dann geben Sie hier die URL zu Ihrer Zentralinstanz an:

image::grafana_plugin_config.png[]

Falls Sie mehrere {CMK}-Instanzen anbinden möchten, können Sie die einzelnen Verbindungen optional mit einem eindeutigen Namen versehen.
Ansonsten lassen Sie den Standard `Checkmk` respektive `Checkmk for Cloud Edition` einfach stehen.

Nachdem Sie die Verbindung mit dem Knopf [.guihint]#Save & test# gespeichert haben, steht sie Ihnen als Datenquelle in Grafana zur Verfügung und Sie können Ihre ersten Graphen konfigurieren.


[#graphs]
== Graphen erstellen

[#emptydash]
=== Ein leeres Dashboard erzeugen

Unter [.guihint]#Home > Dashboards# finden Sie ein Drop-down-Menü, welches mit dem Pluszeichen gekennzeichnet ist.
Klicken Sie dort auf [.guihint]#New dashboard#, um ein neues Dashboard zu erstellen:

image::grafana_new_dashboard.png[]


[#singlemetric]
=== Eine einzelne Metrik eines Hosts anzeigen

Das einfachste Dashboard zeigt einen einzigen Graphen eines Services eines Hosts. 
Dies kann auch die Metrik eines xref:glossar#local_check[lokalen Checks] sein, für den keine vorgefertigten Graphen existieren.
In einem bestehenden oder dem eben erzeugten Dashboard erstellen Sie eine neue Visualisierung.
Wählen Sie hier zuerst [.guihint]#Add visualization# aus:

image::grafana_dashboard_addpanel.png[]

Mit Erstellung der Visualisierung gelangen Sie zur Auswahl der Datenquelle.
Nach der Auswahl von [.guihint]#Checkmk# befinden Sie sich direkt im Editiermodus der Abfrage (_Query_) für das neu erstellte Panel.
Ein Panel ist ein Container für eine Visualisierung.

Der Zugriff auf zu visualisierende Daten unterscheidet sich etwas zwischen der {CRE} und den kommerziellen Editionen:
In der {RE} arbeiten Sie mit vordefinierten Menüs für Instanz, Host-Name, Service und so weiter.
In den kommerziellen Editionen haben Sie die Möglichkeit, Kaskaden von Filtern zu bestimmen.
Dies erlaubt eine sehr detaillierte Auswahl auch unter Verwendung regulärer Ausdrücke.
Das folgende einfache Beispiel ist so gewählt, dass Sie es mit allen Editionen durchspielen können.

Wählen Sie zunächst die [.guihint]#Site#, danach filtern Sie nach einem [.guihint]#Hostname# im Monitoring.
Nutzen Sie für den ersten Test einen beliebigen Host, der den Windows- oder Linux-Agenten nutzt.
Als [.guihint]#Service# wählen Sie [.guihint]#Check_MK#.
Setzen Sie den Typ der [.guihint]#Aggregation# auf [.guihint]#Maximum#.
Als [.guihint]#Graph type# stehen [.guihint]#Single metric# oder [.guihint]#Predefined graph# (vordefinierte Graphen) zur Auswahl:
[.guihint]#Predefined graphs# übernehmen Metriken aus {CMK}, welche auch kombinierte Graphen enthalten können.
Unsere Screenshots zeigen hier die [.guihint]#Single metric#, welche die Gesamtausführungszeit des Agenten ([.guihint]#Time spent waiting for Checkmk agent#) enthält.

.Auswahl der Metriken über Filter in den kommerziellen Editionen
image::grafana_dashboard_single_config.png[]

.Auswahl der Metriken über vordefinierte Menüs in der {RE}
image::grafana_dashboard_single_config_cre.png[]

Grafana zeigt das Ergebnis direkt an.
Mit dem Knopf [.guihint]#Apply# können Sie den Graphen anwenden ohne das Dashboard zu sichern.
Mit [.guihint]#Save# werden Sie aufgefordert, einen Titel für das neue [.guihint]#Dashboard# anzugeben und speichern schließlich das neu erstellte Dashboard.

.Neues Dashboard mit wiedererkennbarer Benennung
image::grafana_dashboard_single_view.png[]


[#predefined]
=== Einen vordefinierten Graphen aus {CMK} anzeigen

Die Entwickler von {CMK} haben bereits viele korrespondierende Metriken in gemeinsamen Graphen zusammengefasst, damit Benutzer leichter einen Überblick über verschiedene Aspekte einer einzigen Ressource erhalten.
Sie können die Metriken aus einem solchen vorgefertigten Graphen direkt in Grafana anzeigen lassen.

Die Vorgehensweise entspricht zunächst der im vorherigen Abschnitt erläuterten.
Allerdings wählen Sie zum Abschluss als [.guihint]#Graph type# den Eintrag [.guihint]#Predefined graph# und den zu verwendenden [.guihint]#Predefined graph# des Services.

Sollten Sie eine Fehlermeldung erhalten, dass die Auswahl kombinierter Metriken mit mehr als 200 Elementen unzulässig ist, schränken Sie mit weiteren Filtern ein.
Stellen Sie im Zweifel die Filter nach vorne, die eine deutliche Einschränkung der Ergebnismenge versprechen.

image::grafana_dashboard_predefined_config.png[]

Sind Sie mit der getroffenen Auswahl zufrieden, klicken Sie den Knopf [.guihint]#Apply#.
Der Graph ist nun im gewählten Dashboard verfügbar.

image::grafana_dashboard_predefined_view.png[]


[#complexgraphs]
=== Komplexe Graphen erstellen

Gerade in einem dynamischen Cluster möchte man oft den gesamten Verlauf einer Metrik über alle beteiligten Hosts verfolgen können, ohne einen Graphen jedes Mal anpassen zu müssen, wenn ein neuer Knoten hinzukommt oder wegfällt.
Um dies zu erreichen, haben Sie verschiedene Möglichkeiten, Graphen dynamisch anzupassen.

Die erste Möglichkeit besteht in der Filterung nach [.guihint]#Host Labels# oder [.guihint]#Host Tags# statt der Auswahl einzelner Hosts.
Eine weitere Möglichkeit ist die Verwendung xref:regexes#[regulärer Ausdrücke.]
Sie können reguläre Ausdrücke auf Hosts oder Services anwenden.
Im folgenden Beispiel matcht `pass:[filesystem]` alle Services, die `filesystem` enthalten – egal, wie viele Dateisysteme ein Host eingebunden hat.

image::grafana_dashboard_combined_config.png[]

Mit `pass:[filesystem.*nvme]` würden Sie die Auswahl auf alle Dateisysteme auf NVMe-Laufwerken einschränken, ganz gleichen welchen Dateisystemtyp diese nutzen, da der Teil des Strings zwischen `filesystem` und `nvme` beliebig sein kann.

Zusätzlich zu den erweiterten Filtermöglichkeiten bestimmen Sie mit [.guihint]#Aggregation# die Darstellung der Metriken im Graphen und mit [.guihint]#Graph#, welcher Graph als Referenz herangezogen werden soll.
Beachten Sie, dass nur dann Metriken zu einem Host/Service angezeigt werden, wenn dieser auch über den ausgewählten Graphen verfügt.
Der Graph sieht dann zum Beispiel so aus:

image::grafana_dashboard_combined_view.png[]

[#transform]
=== Umbenennung über reguläre Ausdrücke

Im Editiermodus jedes Panels finden Sie einen Reiter [.guihint]#Transform#.
Mit dem hier vorhandenen Unterpunkt [.guihint]#Rename by regex# können
Sie die Bezeichnung von Metriken umsortieren oder nicht benötigte Informationen unterdrücken.
Unser folgendes Beispiel sucht zwei durch Komma und folgendes Leerzeichen getrennte Zeichengruppen, vertauscht diese und stellt explizit `Service` und `Host` vorne an:

image::grafana_series_renaming_regex.png[]

Die Variablen `$1` und `$2` entsprechen hierbei den in der Zeile darüber "eingefangenen" Zeichenketten (_Match-Gruppen_ oder _Capture Groups_).
Grafana erlaubt auch verschachtelte Match-Gruppen.
Einen Überblick über deren Möglichkeiten zeigt der entsprechende Abschnitt im xref:regexes#matchgroups[Artikel zu regulären Ausdrücken].

[#variables]
== Flexiblere Graphen mit Variablen

Über Variablen können Sie Dashboards flexibel mit Graphen versehen.
So haben Sie die Möglichkeit per Drop-down-Auswahl den Host einer bestimmten Metrik zu bestimmen oder Sie nutzen Variablen, um Graphen für mehrere Hosts auf einen Schlag einem Dashboard hinzuzufügen.
Dieser Artikel kann und soll nicht die link:https://grafana.com/docs/grafana/latest/dashboards/variables/[Dokumentation bei Grafana^] ersetzen.
In erster Linie wollen wir einen Überblick der Einsatzmöglichkeiten und einen Einstieg in das Thema vermitteln.

Variablen können aus _Queries_ erstellt werden.
In diesem Fall können Sie auf Sites, Hosts oder Services filtern.
Alternativ haben Sie die Möglichkeit, _Mengen_ oder _Freitextfelder_ zu definieren, was beliebige Filter ermöglicht.

[#variable_create]
=== Variablen erstellen

Jede Variable ist eine Eigenschaft eines Dashboards.
Sie muss in den Einstellungen des Dashboards erstellt werden und kann dann nur innerhalb dieses Dashboards verwendet werden.
Da _Query_ die umfangreichste Konfiguration erfordert, zeigen wir dessen Verwendung in unserem Beispiel.

Die relevanten Eigenschaften einer Variablen sind ihr Typ und ihr Name, alle anderen Eigenschaften dienen nur der Übersichtlichkeit im Dashboard.
Der Name sollte Unterscheidungen unterstützen.
Wenn Sie also planen, mehrere Variablen zur Auswahl von Hosts aus verschiedenen Untermengen zu nutzen, verwenden Sie statt `host` wie im Beispiel einen Namen, der auf diese Menge referenziert, zum Beispiel `host_from_linuxservers`.

.Erstellung einer Variable `host` in den Dashboard-Eigenschaften
image::grafana_variable_name.png[]

Achten Sie bei der Wahl der Datenquelle darauf, dass eine {CMK}-Verbindung ausgewählt ist.
Den gewählten Objekttyp können sie weiter einschränken, zum Beispiel mit regulären Ausdrücken.
Verwendete Filter werden auf dem {CMK}-Server ausgewertet.
Dagegen werden die folgenden Felder [.guihint]#Regex# und [.guihint]#Sort# von Grafana ausgewertet.

.Mit Filtern legen Sie fest, welche Werte die Variable annehmen kann
image::grafana_variable_query.png[]

Die beiden Checkboxen für [.guihint]#Selection options# ganz unten auf der Seite sind von der späteren Verwendung abhängig.
Sie können diese bei Bedarf jederzeit anpassen, lassen Sie für den ersten Test beide auf der (leeren) Voreinstellung.
Speichern Sie die Variablen mittels [.guihint]#Save dashboard#, wenn Sie alle Einstellungen vorgenommen haben.

[#variable_use]
=== Variablen für Graphen nutzen

Sie können die vergebenen Variablen nun in die dafür passenden Felder eintragen um einen flexiblen Graphen zu erstellen.
Die Verwendung der Variablen ist zudem im Titel des Graphen möglich.

.Der Zugriff auf Variablennamen geschieht, wie in einigen Shells, über das vorangestellte Dollarzeichen
image::grafana_variable_use.png[]

Im Dashboard wird für jede Variable eine Drop-down-Auswahl angezeigt, über die Sie einstellen, für welche Variablenwerte (Hosts, Services...) Sie das Dashboard anzeigen lassen.
Wenn Sie Mehrfachauswahl aktiviert haben, können Sie in den Einstellungen des Panels die Option [.guihint]#Repeat by variable# setzen, um das Panel für jeden ausgewählten Variablenwert anzuzeigen.

.Drop-down-Auswahl der referenzierten Hosts mit Möglichkeit der Mehrfachauswahl
image::grafana_variable_panel.png[]

[#files]
== Dateien und Verzeichnisse

Die folgenden Dateien und Verzeichnisse sind auf einem selbst gehosteten Grafana-Server relevant.

[cols="30,~",options="header"]
|===
|Pfad |Bedeutung
|`/var/lib/grafana/plugins/` |Hier sucht Grafana nach (neuen) Plugins. Jedes Plugin bekommt dabei ein eigenes Unterverzeichnis. Das Plugin von {CMK} legen Sie daher hier ab.
|`/etc/grafana/` |Konfigurationsverzeichnis von Grafana.
|`/etc/grafana/grafana.ini` |Zentrale Konfigurationsdatei von Grafana. Hier legen Sie fest, welche nicht signierten Plugins Sie zulassen.
|===
////
// end translation
