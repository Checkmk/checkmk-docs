//encoding: utf-8
include::global_attr.adoc[]
= Integrating {CMK} in Grafana
:revdate: draft
:title: Integrating {CMK} in Grafana
:description: Easily create Grafana dashboards with data from your {CMK} monitoring with the {CMK} plug-in for Grafana.

{related-start}
xref:web_api_references#[Command reference for the HTTP-API]
xref:monitoring_kubernetes#[Monitoring Kubernetes]
xref:monitoring_docker#[Monitoring Docker]
{related-end}


== Introduction
[{image-left}]
image::grafana_logo.png[width=168]

{CMK} has an integrated xref:graphing#[graphing system] with comprehensive features for visualizing and storing of xref:glossar#metric[metrics].
However it might still be helpful to use link:https://grafana.com/[Grafana^] as an external graphing system --
for example, if you are already using Grafana and have other data sources connected to it and want to have a single, unified dashboard.

Beginning with version {v20}, it is possible in all {CMK} editions to directly address {CMK} as a data source in Grafana 8.x, and to display individual metrics – or even entire graphs as predefined by {CMK} – in Grafana.
In addition you can create your own graphs dynamically using xref:regexes#[regular expressions] to specify a set of hosts and services that should take specific metrics in the graph into account.

This article explains how to retrieve and display metrics from {CMK} in Grafana.
For detailed instructions on how to use and configure Grafana, see the link:https://grafana.com/docs/[Documentation at Grafana Labs^].

The plug-in for Grafana is developed in independently from {CMK}, thus it is not included with {CMK}, but maintained in its own link:https://github.com/tribe29/grafana-checkmk-datasource[repository on GitHub^].
Since the plug-in has to be installed in Grafana, it makes no sense to bundle it with {CMK}.
An inclusion directly into Grafana currently is in review by the maintainers of Grafana.
When this review is completed, installation directly from the Grafana uiser interface will be possible.

== Setting-up the plug-in in Grafana

=== Installing the plug-ins

To be able to use the plug-in, follow one of these two ways to add it into Grafana:

* Download the ZIP file from the link:https://github.com/tribe29/grafana-checkmk-datasource[GitHub project^], and manually move the content into the Grafana plug-in directory.
* Clone the GitHub project directly into the plug-in directory.


==== Installation from the ZIP file

This variant is the most simple and thus preferred way if you have not installed `git` on the Grafana server and cannot/do not want to.
To install the plug-in, simply download the ZIP file with the latest version, and copy it – for example, with `scp` – to the Grafana server:

[{image-border}]
image::grafana_download_plugin.png[]

Alternatively, you can also load the file directly from the command line.
Note that you need to know the correct version for this.
With the option `-O` in the following command, the name of the local file is set manually, since otherwise it would be `2.0b2.zip`:

[{shell-raw}]
----
{c-root} wget -O grafana-checkmk-datasource-2.0b2.zip https://github.com/tribe29/grafana-checkmk-datasource/archive/refs/tags/2.0b2.zip
----

Now unpack the archive:

[{shell}]
----
{c-root} unzip grafana-checkmk-datasource-2.0b2.zip
----

Then move the newly created folder to Grafanas plug-in directory.
Usually the path is `/var/lib/grafana/plugins/`:

[{shell}]
----
{c-root} mv -v grafana-checkmk-datasource-2.0b2 /var/lib/grafana/plugins/grafana-checkmk-datasource
----

Change ownership to the Grafana user (typically `grafana`):

[{shell}]
----
{c-root} chown -R grafana:grafana /var/lib/grafana/plugins/grafana-checkmk-datasource
----

When done, continue with the xref:allow_unsigned[adjustment of permissions].


==== Installation by cloning the Git archive

The variant described above has the fewest requirements, and is easy to implement even for less-experienced users.
But if you get the plug-in directly from the Git repository, there are several advantages:

* Upgrading to a new version can be quickly performed with two commands: `git pull`
* You have the option of using the current development version directly from the archive if you want to test a new feature: `git checkout develop`

To use the plug-in with the help of a copy of the archive, you absolutely need the `git` program.
Then the procedure is quite simple: first change the working directory to the Grafana plug-in directory, then clone the repository:

[{shell-raw}]
----
{c-root} cd /var/lib/grafana/plugins/ && git clone https://github.com/tribe29/grafana-checkmk-datasource.git
Cloning into 'grafana-checkmk-datasource'...
remote: Enumerating objects: 541, done.
remote: Total 541 (delta 0), reused 0 (delta 0), pack-reused 541
Receiving objects: 100% (541/541), 291.55 KiB | 0 bytes/s, done.
Resolving deltas: 100% (374/374), done.
Checking connectivity... done.
----

Since the master branch always shows the latest version, after a new release you just need to execute the following command to update the plug-in on the Grafana server:

[{shell}]
----
{c-root} cd /var/lib/grafana/plugins/grafana-checkmk-datasource && git pull
----

When using the development tree, you need to create missing files and directories to be able to actually use the plug-in.
For example the plug-in is written in the Typescript programming language that cannot be directly interpreted but has to be translated to Javascript first.
This is done with the `yarn` tool by running the following command:

[{shell}]
----
{c-root} cd /var/lib/grafana/plugins/grafana-checkmk-datasource && yarn run build
----

[#allow_unsigned]
=== Allowing unsigned plug-ins

As of Grafana 8.0, it is no longer possible to easily integrate external plug-ins as long as they are not signed.
This applies to the {CMK} plug-in which is still under development, so that you need an additional step.

To do so, open `/etc/grafana/grafana.ini` in your favorite editor, navigate to the section `[plug-ins]` and change the line `;allow_loading_unsigned_plug-ins =` as follows.
Make sure to remove the semicolon at the beginning of the line:

./etc/grafana/grafana.ini
[source,ini]
----
[plug-ins]
allow_loading_unsigned_plug-ins = tribe-29-checkmk-datasource
----

With this setting you add an exception for this single plug-in.
If you are using Grafana in a (Docker) container, either link the custom INI file into the container or create a `volume` which you map to the directory in the container (`/etc/grafana`).
The following code blocks shows an example of how to link the INI file using `--mount`.
Note that this is only an example and will probably not fit your environment exactly:

[{shell}]
----
{c-user} sudo docker run -d pass:q[*--mount type=bind,source=/home/user/grafana/grafana.ini,target=/etc/grafana/grafana.ini*] -p 3000:3000 --name grafana -v grafana-plug-ins:/var/lib/grafana/plugins -v grafana-db:/var/lib/grafana grafana/grafana
----


=== Restarting the Grafana service

After changing the configuration file, updating or installing the plug-in, restart the Grafana service:

[{shell}]
----
{c-root} service grafana-server restart
----

Afterwards the plug-in is available in the Grafana GUI, and from there can be activated and configured.


=== Activation and setup of the plug-in

After the necessary files have been installed you can activate the plug-in in Grafana.
Go to the configuration and select the [.guihint]#Data sources# tab.
Here you can add a new data source using the [.guihint]#Add data sources# button:

image::grafana_plugins_overview.png[]

The entry for {CMK} can be found at the bottom of the category [.guihint]#Others#:

image::grafana_plugin_cmk.png[]

The configuration form for the data source is quite simple.
Enter the URL for your site and a automation user who has rights to access the Web API.
*Important:* In a xref:distributed_monitoring#[distributed setup] with multiple sites, specify the URL for the _central site_ in the input field:

image::grafana_plugin_config.png[]

If you want to connect more than one {CMK} site, you can optionally add a unique name to each connection
-- otherwise simply leave the default `tribe-29-checkmk-datasource` as is.

After you have saved the connection with the [.guihint]#Save & Test# button, it will be available as a data source in Grafana and you can configure your first graphs.


== Creating graphs

=== Creating a blank dashboard

Dashboards are generated in Grafana using the ‘plus’ icon on the right side.
After clicking on [.guihint]#Dashboard# you get a new, blank dashboard:

image::grafana_new_dashboard.png[width=420]


[#singlemetric]
=== Displaying a single metric from a host

The simplest dashboard shows a single graph of a service of a host. 
This can also be the metric of a xref:glossar#local_check[local check] for which no prebuilt graphs exist.
In an existing dashboard or the one you just created, create a new [.guihint]#panel#:
First select [.guihint]#Add Query# here:

image::grafana_dashboard_addpanel.png[]

Creating the panel immediately takes you to adding a new _Query._
In the dropdown menu [.guihint]#Data source# select [.guihint]#tribe-29-checkmk-data-source#.

Access to data for visualization is slightly different between {CRE} and {CEE}:
In {CRE} you have to select from predefined dropdown menus for site, hostname, service and so on.
{CEE} provides more flexibilty by using cascades of filters.
This allows for very detailed selection for example by using regular expressions.
Our example is chosen in a way you can follow it with both editions.

First choose the [.guihint]#Site#, then filter for the [.guihint]#Hostname# used in monitoring.
For the first test select an arbitary host that uses the Windows or Linux agent.
As [.guihint]#Service# choose [.guihint]#Checkmk#.
Set the type of [.guihint]#Aggregation# to [.guihint]#Lines#.
For the [.guihint]#Graph Type# you have to select between [.guihint]#Single metric# or [.guihint]#Template#: 
Templates inherit metrics from {CMK} that may also contain combined graphs.
Our screenshots show the [.guihint]#Single metric# containing the [.guihint]#Time spent waiting for Checkmk agent#:

.Selecting metrics using filters in {CEE}
image::grafana_dashboard_single_config.png[]

.Selecting metrics using predefined dropdown menus in {CRE}
image::grafana_dashboard_single_config_cre.png[]

Grafana instantly shows the result.
Now click on [.guihint]#Apply# to save the graph.
This brings you back to the dashboard where you click the floppy disk icon ([.guihint]#Save dashboard#) in the upper right area to save it.
Afterwards you'll be prompted to set a title for the new[.guihint]#Dashboard#.

After that you can still limit the query to one {CMK} site ([.guihint]#Site#).
Now filter further for [.guihint]#Hostname# and [.guihint]#Service#.
Finally, select the [.guihint]#Aggregation# (in the example [.guihint]#Lines#), as [.guihint]#Graph type# the [.guihint]#Single metric# type and finally the metric of the service to be displayed (for services containing multiple metrics).

.New dashboard with recognizeable naming
image::grafana_dashboard_single_view.png[]


[#predefined]
=== Displaying a predefined graph from {CMK}

The developers of {CMK} already have aggregated many corresponding metrics to combined graphs to enable users getting a quicker overview on different aspects of a single ressource.
You can display the metrics from such a ready-made graph directly in Grafana.

The procedure is initially the same as explained in the previous section.
However, finally select as [.guihint]#Graph type# the [.guihint]#Template# entry and the [.guihint]#Template# of the service to be used.

image::grafana_dashboard_predefined_config.png[]

Once you are satisfied with the selection made, click the button [.guihint]#Apply#.
The graph is now available in the selected dashboard. 

image::grafana_dashboard_predefined_view.png[]


[#complexgraphs]
=== Creating complex graphs

Especially in a dynamic cluster, you will often want to be able to track the entire history of a metric across all participating hosts without having to adjust a graph each time a new node is added or removed.
To achieve this you have several options to dynamically customize graphs.

The first way is to filter by [.guihint]#Host Labels# or [.guihint]#Host Tags# instead of selecting individual hosts.
Another option is to use xref:regexes#[regular expressions].
You can apply regular expressions to hosts or services.
In the example, `pass:[filesystem]` matches all services that start with `filesystem` -- no matter how many file systems a host has mounted.

image::grafana_dashboard_combined_config.png[]

The entry `pass:[filesystem.*nvme]` would narrow down the selection to all filesystems on NVME drives, regardless of the type of filesystem, since any string is allowed between `filesystem` and `nvme`.

In addition to the advanced filter options, with [.guihint]#Aggregation# you can specify the representation of the metrics in the graph, and with [.guihint]#Graph#, which graph should be used as a reference.
Note that metrics for a host/service will only be displayed if the host/service _also_ has this selected graph.
The example graph looks like this:

image::grafana_dashboard_combined_view.png[]


== Changes compared to previous versions

=== Omitted variables

Earlier beta versions allowed to control the displayed metric names using variables.
Here the following variables were allowed:

[cols="25,~",options="header"]
|===
|Variable |Description 
|`$title` |The title of the metric as it would be displayed in {CMK}.
|`$site` |The {CMK} site where the host and its metric are monitored.
|`$host` |The host to which the metric is assigned.
|`$service` |The service to which the metric is assigned.
|===

This feature was removed with version 2.0b1 of the plug-in because it actually duplicated functionality that is part of Grafana.


=== Renaming via regular expressions

In editing mode of each panel you find a tab [.guihint]#Transform#.
With the subitem [.guihint]#Rename by regex# you can reorder the naming of metrics or suppress information that is not needed.
Our following example searches two groups of characters that are separated by a comma and following space, swaps them and prepends `Service` und `Host`.

image::grafana_series_renaming_regex.png[]

The variables `$1` and `$2` here correspond to the strings "captured" in the line above (_match groups_ or _capture groups_).
Grafana also allows for nested match groups.
An overview of their possibilities is shown in the corresponding section in xref:regexes#matchgroups[regular expressions article].


== Files and directories

[cols="30,~",options="header"]
|===
|File path |Description 
|`/var/lib/grafana/plugins/` |Grafana checks here for (new) plug-ins. Each plug-in gets its own subdirectory. Save the {CMK} plug-in here.
|`/etc/grafana/` |Configuration directory Grafana.
|`/etc/grafana/grafana.ini` |Central configuration file of Grafana. Here you specify which unsigned plug-ins are allowed.
|===
