include::global_attr.adoc[]
= Configuration via the {CMK} REST API
:revdate: draft
:title: Configuration via the {CMK} REST API
:description: With the {CMK} REST API, you can have tasks that you would otherwise perform via the GUI executed by the {CMK} server via HTTP requests.

{related-start}
link:web_api.html[Configuration via HTTP-API]
{related-end}


[#intro]
== Introduction

As of Version {v20}, there is a new application programming interface in {CMK}: the {CMK} REST API.
This API enables you to perform tasks -- that you would otherwise perform in {CMK} in its GUI -- to be transmitted to and executed with HTTP requests on the {CMK} server using commands or scripts.

Using an API via HTTP? This may sound familiar to you, of course, since {CMK} has been providing an API for a long time -- the so-called xref:web_api#[web API] -- with which you can perform many administration tasks.
So why is there now a new API?
Contrary to what the name REST API might suggest, the new API is not intended to provide the _Rest_ of the functions missing in the web API.
On the contrary, the REST API is intended to cover the complete functionality that {CMK} up until now has provided via the GUI and via the command interface, thus completely replacing the web API.

REST stands for _REpresentational State Transfer_, and it describes an architecture for the exchange of data on distributed systems -- especially for web services. An API implemented according to the REST architecture follows certain principles, e.g. the client-server model, stateless communication and a uniform interface.
In practice the implementation is preferably carried out via the HTTP protocol, whereby the resources are addressed via the Uniform Resource Identifier (URI) and accessed using HTTP methods (GET, POST, PUT, DELETE).

So much for the principles of the REST.
The advantages of these principles can be demonstrated by the concrete features provided by the {CMK} REST API:

[horizontal]
Protocol:: The Hypertext Transfer Protocol (*HTTP/1.1*) is used as the transport system for communication.

Coding:: The JavaScript Object Notation (*JSON*) is used as the data format. The payload of the answers is serialised with JSON and encoded in UTF-8. Date and time information is encoded in the *ISO-8601* format with valid time zone information.

Language:: English is the language for labels, identifiers and API documentation.

Authentication:: Access to the API is only granted to a client if it has proven its authorization by means of *HTTP authentication* -- 'Basic' or 'Bearer' for example.

Versioning:: The API is versioned and uses a three-level numbering scheme according to the *Semantic Versioning 2.x* standard. For details, refer to the xref:rest_api#versioning[Chapter on Versioning] below.

Documentation:: The API is documented in a machine-readable schema and in a human-readable format in English, with all resources, their input and output parameters and their associated value ranges. The API is created with the *OpenAPI Specification (OAS) 3.x*, an API description format intended especially for REST APIs. The API document created with this specification is displayed to the user with ReDoc, a responsive web tool for OpenAPI documents.

Code example:: To demonstrate its use, sample code for different applications is provided for each request.

Error display:: In the event of an error, the API sends numeric *HTTP status codes* and a diagnostic message for the problem, which helps to identify possible causes of incorrect requests.

REST API classification:: The API fulfils all four levels (0 to 3) of the Richardson Maturity Model (RMM), which can be used to assess how much REST an API contains. Level 1 requires the introduction of resources to enable communication via the API to individual endpoints rather than to a global one. Level 2 is met if HTTP methods are used for the requests. At the (highest) level 3, the API is effectively self-documenting, in that the server, when responding to a request, communicates any possible next actions and the resources to be addressed, thus enabling the client to discover the available functionality for themselves. This provision of additional information is also known as 'Hypermedia as the Engine of Application State' (*HATEOAS*).

////
// TK: Tabelle commented out because of Description List test 
[cols="25,~"]
|===
|Feature |Description 

|Protocol |The Hypertext Transfer Protocol (*HTTP/1.1*) is used as the transport system for communication.
|Coding |The JavaScript Object Notation (*JSON*) is used as the data format. The payload of the answers is serialised with JSON and encoded in UTF-8. Date and time information is encoded in the *ISO-8601* format with valid time zone information.
|Language |English is the language for labels, identifiers and API documentation.
|Authentication |Access to the API is only granted to a client if it has proven its authorization by means of *HTTP authentication* (e.g. 'Basic' or 'Bearer').
|Versioning |The API is versioned and uses a three-level numbering scheme according to the *Semantic Versioning 2.x* standard. For details, refer to the xref:rest_api#versioning[Chapter on Versioning] below.
|Documentation |The API is documented in a machine-readable schema and in a human-readable format in English, with all resources, their input and output parameters and the associated value ranges. The API is created with the *OpenAPI Specification (OAS) 3.x*, an API description format especially for REST APIs. The API document created with this specification is displayed to the user with ReDoc, a responsive web design for OpenAPI documents.
|Code example |To demonstrate its use, sample code for different applications is provided for each request.
|Error display |In the event of an error, the API sends numeric *HTTP status codes* and a diagnostic message for the problem, which helps to identify possible causes of incorrect requests.
|REST API classification |The API fulfils all four levels (0 to 3) of the Richardson Maturity Model (RMM), which can be used to assess how much REST an API contains. Level 1 requires the introduction of resources to enable communication via the API to individual endpoints rather than to a global one. Level 2 is met if HTTP methods are used for the requests. At the (highest) level 3, the API is effectively self-documenting, in that the server, when responding to a request, communicates any possible next actions and the resources to be addressed, thus enabling the client to discover the available functionality for itself. This provision of additional information is also called 'Hypermedia as the Engine of Application State' (*HATEOAS*).
|===
////

In addition to these general comfort functions, the {CMK} REST API already offers access to more areas in {CMK} than the web API, for instance host status, service status, downtimes, time periods, acknowledgement of problems and the Business Intelligence (BI).
For many areas that support both APIs, REST API also gives you more, and more specific functionality.

Despite all the enthusiasm for REST, we do not hide the fact that the REST API does not yet have all the features of the web API.
Since this is the current situation, you will find a comparison of the functionalities of REST API and web API in the xref:rest_api#rest-web-api[last chapter] of this article.
The last missing functionality in the REST API for accessing sites in distributed monitoring and metrics and graphs will be delivered in {CMK} {v21} patch versions.


[#api_doc]
== The API documentation

[#versioning]
=== Versioning

One of the advantages of the REST API is that both the software and its documentation come from the same source -- the OpenAPI document.
Thus the API documentation always matches the software and describes exactly what the API can do.
Therefore it is not necessary to describe the reference part of the available resources, methods, parameters etc. in the {CMK} User guide
-- instead you will find the API documentation separately from this manual, directly in your {CMK} site.

The API with its documentation is versioned and uses a three-level numbering scheme in X.Y.Z format, where X stands for a main release, Y for a minor release and Z for a patch.
A new minor release contains new, backward-compatible functions.
A new main release may contain changes that make the API incompatible with the previous main release (so-called *breaking changes*).
The version numbers of the main and minor releases are part of the URL used to send a request to the server.

*Important*: Note that the REST API follows a different versioning scheme than that for the {CMK} software.
Since a new main release of the API is necessary if there are incompatible API changes, this usually does not match the release cycle of the {CMK} software.

Nevertheless, the correlation between the versions of API documentation and {CMK} software is very straightforward, as you will learn in the next chapter.


[#access]
=== Access

The REST API documentation is available in HTML format for viewing in a Web browser.

In the {CMK} GUI, open the API documentation from the navigation bar via [.guihint]#Help > Developer resources APIs > REST API documentation#.
The API documentation is displayed in a new browser window (or browser tab).
We will discuss this in more detail in the next chapter.

image::rest_api_help_menu.png[alt="Help menu in the navigation bar.",width=50%]

*Note*: You will surely have noticed that there are more entries about the REST API in the [.guihint]#Help# menu.
With [.guihint]#REST API introduction# you can open this article.
With [.guihint]#REST API interactive GUI# you open another view on the REST API.
The entry is called [.guihint]#GUI# because you are not only shown the REST API functions, but because you can interact with the API directly from the browser -- by sending requests to the server for example.
We will introduce the REST API GUI as an alternative to execution by script later in the xref:rest_api#rest_api_gui[chapter on the REST API GUI].



[#structure]
=== Structure and content

The API documentation uses a responsive web design consisting of three sections:

[{image-border}]
image::restapi_redoc.png[]

* The left-hand section, navigation, is used for orientation, searching and a quick jump to the exact description of the entries in the central section. The table of contents contains one entry for each API endpoint. An endpoint uses a URL to refer to the resource that the API provides (e.g. for collecting hosts), together with the method used to access the resource (e.g. GET to display a host). The endpoints are organised into several folders.
* The central section, content, contains the hard facts on the documentation: all information for defining a request (with parameters, value ranges, default values and descriptions) and the corresponding answers (also with all details). The possible answers are displayed in different colours, depending on whether the returned HTTP status code signals success or an error.
* The right-hand section, [.guihint]#Request samples#, shows the method and URL for the endpoint selected in the content section, followed by several examples of requests: the payload in JSON format (if relevant for the endpoint) and code examples, e.g. for cURL, HTTPie, Python Requests and Python Urllib. Then follow the responses according to the HTTP status. All code examples can be copied to the clipboard with the [.guihint]#Copy# button.

The navigation section is scroll-synchronised with the other two sections, which
means that if you scroll up or down in the content section, the navigation section
automatically scrolls to the appropriate entry in the table of contents.

The responsive web design ensures that the example section does not appear in a
very narrow browser window (the examples are then displayed below the
corresponding method), and the navigation section is converted into a menu.

In all sections you will find content that you can show and hide, for example,
the entries for the end points in the navigation section and nested parameters in
the content section. By clicking on *>* or [.guihint]#Expand all# you can show the
hidden contents, and with [.guihint]#&or;# or [.guihint]#Collapse all# you can hide them again.

How you can use the API documentation to create concrete requests from the
information, send them to the {CMK} server, have them executed and monitor their
success you will learn about in the next chapter.


[#using_the_api]
== Using the API


[#auth]
=== Authentification

In order to use the REST API in the {CMK} server from a client, the client must prove its identity. The REST API supports the following methods for authentication: *Bearer*, *Web server* and *Cookie* -- in this order of precedence. This means, for example, that if authentication with Bearer is successful, none of the other methods will be checked.


[#bearerauth]
==== Bearer or Header authentication

'Bearer' means the holder of an identity. With HTTP bearer authentication, the client authenticates itself with the access data of a user set up on the {CMK} server. Ideally, this is the so-called xref:wato_user#automation[automation user], which is provided in {CMK} for the execution of actions via an API. Bearer authentication is recommended for use in scripts.

For authentication, you need the user name and the corresponding so-called "automation secret for machine accounts", i.e. the password for the automation user. Both items of information must be transmitted to the {CMK} server in the header of each request. In a newly-created site, the user [.guihint]#automation# will have already been created. You can find it, like other users, under [.guihint]#Setup > Users#. Make sure that the roles and associated permissions for the automation user are set to allow you to execute your requests.

For the scripts presented in this article, the default automation user is always used as an example.


[#webserverauth]
==== Web server authentication

For web server authentication, the REST API uses the HTTP authentication configured for the web server ('Basic' or 'Digest').

This authentication method is intended for large {CMK} installations with special requirements that are realised by using and configuring software modules for authentication of the Apache web server. If you want to use the web server authentication, you need to reconfigure the Apache web server of the {CMK} site itself.


[#cookieauth]
==== Cookie authentication

Cookie authentication is a special case of authentication by API key. Every {CMK} user who is logged into {CMK} and has been assigned an HTTP cookie can use the REST API. Cookie authentication is used for trying out and testing with the xref:rest_api#rest_api_gui[REST API GUI]. Whether requests can be executed depends on whether your {CMK} user account has the appropriate permissions.


[#testing]
=== Testing the API locally

To test the REST API, it is advisable to make the requests directly from the
{CMK} server, i.e. in this example client and server are on the same computer.
If you are working as a site user, you can also use local variables such as
`$OMD_SITE`, which refers to the name of the site.

In the following examples, we use the sample code contained in the API
documentation for the command line program cURL, which enables data to be
transferred to or from a server without user interaction, for example via HTTP.
The `curl` command is executed within a bash script.

For the preparation, create a script file to which the sample code is later
copied:

[{shell}]
----
{c-omd} touch rest-api_test.sh
{c-omd} chmod +x rest-api_test.sh
----

The REST API outputs all responses in single-line JSON format. Since formatted output is much easier to read, for formatted output the cURL sample code uses the command line JSON processor `jq`. You can use the following command to check whether `jq` is installed:

[{shell}]
----
{c-omd} jq --version
jq-1.6
----

and -- if not -- install the software from link:https://stedolan.github.io/jq/download/[this page]. If you do not want to use `jq`, you will have to cope with the unformatted output.

Before starting, gather some basic information specific to your {CMK}
configuration:

[cols=3]
|===
|Variable |Description |Example 

|HOST_NAME |myserver |The {CMK} server's hostname
|SITE_NAME |mysite |The {CMK} site's name
|USERNAME |automation |The automation user's name
|PASSWORD |theautomationsecret |The automation user's password
|===


These variables are used in the sample code and must be edited by you before
sending a request.
In the table above you will also find the example values used in the following.


[#making_requests]
=== Making requests using scripts

We will now demonstrate how to use the REST API with a straightforward example.
Create a host with its services using a total of three requests.
In principle, you proceed in the same way as you would with the {CMK} GUI:

. Create a host
. Perform a service discovery on the host
. Activate the changes


==== Creating a host

Open the API documentation and select the entry for creating a host
([.guihint]#Create a host#) in the left navigation area:

[{image-border}]
image::restapi_redoc_2pane.png[]

In the central part of the panel you can see the details of the selected request,
which HTTP authentication is required (this is identical for all requests via
the REST API), and the required and optional parameters.
The name of the host and the folder in which it should be created is required.
By default, the host is created in the main directory. 
If you want to create the host in another folder, you may first need to make another API request ([.guihint]#Show all folders#) to view the existing folders to determine the ID of the one you want to use.

In our example, we want to create the host `myserver123` with the
IP address `192.168.0.42` in the main folder.

In the API documentation, click the [.guihint]#curl# button in the right-hand example
area and then click [.guihint]#Copy# to copy the cURL sample code to the clipboard.
Open the prepared script `rest-api_test.sh` and paste the clipboard's
contents into it:

.rest-api_test.sh
[{file}]
----
#!/bin/bash
HOST_NAME="localhost"
SITE_NAME="mysite"
API_URL="http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0"

USERNAME="automation"
PASSWORD="test123"

out=$(
  curl \
    --request POST \
    --write-out "\nxxx-status_code=%{http_code}\n" \
    --header "Authorization: Bearer $USERNAME $PASSWORD" \
    --header "Accept: application/json" \
    --header "Content-Type: application/json" \
    --data '{
          "attributes": {
            "ipaddress": "192.168.0.123"
          },
          "folder": "\/",
          "host_name": "example.com"
        }' \
    "$API_URL/domain-types/host_config/collections/all")

resp=$( echo "${out}" | grep -v "xxx-status_code" )
code=$( echo "${out}" | awk -F"=" '/^xxx-status_code/ {print $2}')

# For indentation, please install 'jq' (JSON query tool)
echo "$resp" | jq
# echo "$resp"

if [[ $code -lt 400 ]]; then
    echo "OK"
    exit 0
else
    echo "Request error"
    exit 1
fi
----

In the first part of the sample code you will find the four environment
variables to be changed, then comes the `curl` command with the POST
method on the resource whose URL is in the last line. With the POST method,
following the header lines (one of which defines the HTTP authentication),
you will find the data section where the parameters for the new host are set. The remaining lines are used to prepare the output.

Please note that the cURL sample code may contain more parameters than
you might need in a specific case. For our example this is not the case and you
only need to change the two existing parameters `host_name`
and `ipaddress`.

Now edit the sample code so that the result looks something like this:

.rest-api_test.sh
[{file}]
----
#!/bin/bash
HOST_NAME="myserver"
SITE_NAME="mysite"
API_URL="http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0"

USERNAME="automation"
PASSWORD="theautomationsecret"

out=$(
  curl \
    --request POST \
    --write-out "\nxxx-status_code=%{http_code}\n" \
    --header "Authorization: Bearer $USERNAME $PASSWORD" \
    --header "Accept: application/json" \
    --header "Content-Type: application/json" \
    --data '{
          "attributes": {
            "ipaddress": "192.168.0.42"
          },
          "folder": "\/",
          "host_name": "myserver123"
        }' \
    "$API_URL/domain-types/host_config/collections/all")

resp=$( echo "${out}" | grep -v "xxx-status_code" )
code=$( echo "${out}" | awk -F"=" '/^xxx-status_code/ {print $2}')

# For indentation, please install 'jq' (JSON query tool)
echo "$resp" | jq
# echo "$resp"

if [[ $code -lt 400 ]]; then
    echo "OK"
    exit 0
else
    echo "Request error"
    exit 1
fi
----

If the command line JSON processor `jq` is not installed, you must comment out the line with `jq` in the above sample code and comment in the line following it. The result then looks like this:

.rest-api_test.sh
[{file}]
----
# echo "$resp" | jq
echo "$resp"
----

Execute the script:

[{shell}]
----
{c-omd} ./rest-api_test.sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  1231  100  1078  100   153   5472    776 --:--:-- --:--:-- --:--:--  6248
{
  "domainType": "host_config",
  "id": "#myserver123#",
  "title": null,
  "links": [
    {
      "rel": "self",
      "href": "http://myserver/mysite/check_mk/api/1.0/objects/host_config/myserver123",
      "method": "GET",
      "type": "application/json",
      "domainType": "link"
    },
    {
      "rel": "urn:org.restfulobjects:rels/update",
      "href": "http://myserver/mysite/check_mk/api/1.0/objects/host_config/myserver123",
      "method": "PUT",
      "type": "application/json",
      "domainType": "link"
    },
    {
      "rel": "urn:org.restfulobjects:rels/delete",
      "href": "http://myserver/mysite/check_mk/api/1.0/objects/host_config/myserver123",
      "method": "DELETE",
      "type": "application/json",
      "domainType": "link"
    }
  ],
  "members": {
    "folder_config": {
      "id": "folder_config",
      "memberType": "property",
      "value": "http://myserver/mysite/check_mk/api/1.0/objects/folder_config/58d08ee3599e4cfe89d75bfff2a7eb91",
      "format": "string",
      "title": null
    }
  },
  "extensions": {
    "attributes": {
      "ipaddress": "#192.168.0.42#"
    },
    "is_cluster": false,
    "is_offline": false,
    "cluster_nodes": null
  }
}
#OK#
----

In the response, you can see from the marked entries that the host has been created.
The first lines contain information about the data transmission.
Following the host ID, the API returns a selection of requests under
`links` that can be applied to the host you just created -- as befits a
REST API. Under `members` information on the folder is shown,
and under `extensions` the parameters and
attributes, including the IP address that has just been set.


==== Perform a service discovery on the host

Once the host `myserver123` has been created, its services can be
discovered. To do this, select the entry for executing a service discovery
([.guihint]#Execute a service discovery on a host#) in the API documentation, copy the
sample code into the script and customise it to match your configuration.

You can copy the first part with the environment variables 1:1 from the previous
example. In the `curl` command, change the name of the host to
`myserver123` and, if necessary, use the `mode` parameter to change the type of service discovery. In this request, unlike the previous one, the host name is not
specified in the data element, but is a part of the URL in the last line of the `curl` command:

.rest-api_test.sh
[{file}]
----
#!/bin/bash
HOST_NAME="myserver"
SITE_NAME="mysite"
API_URL="http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0"

USERNAME="automation"
PASSWORD="theautomationsecret"

out=$(
  curl \
    --request POST \
    --write-out "\nxxx-status_code=%{http_code}\n" \
    --header "Authorization: Bearer $USERNAME $PASSWORD" \
    --header "Accept: application/json" \
    --header "Content-Type: application/json" \
    --data '{
          "mode": "refresh"
        }' \
    "$API_URL/objects/host/myserver123/actions/discover_services/invoke")

resp=$( echo "${out}" | grep -v "xxx-status_code" )
code=$( echo "${out}" | awk -F"=" '/^xxx-status_code/ {print $2}')

# For indentation, please install 'jq' (JSON query tool)
echo "$resp" | jq
# echo "$resp"

if [[ $code -lt 400 ]]; then
    echo "OK"
    exit 0
else
    echo "Request error"
    exit 1
fi
----

Execute this script as well:

[{shell}]
----
{c-omd} ./rest-api_test.sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   876  100   837  100    39   4082    190 --:--:-- --:--:-- --:--:--  4273
{
  "domainType": "service_discovery",
  "id": "myserver123-services-wato",
  "title": "Services discovery",
  "links": [
    {
      "rel": "self",
      "href": "http://myserver/mysite/check_mk/api/1.0/objects/service_discovery/myserver123-services-wato",
      "method": "GET",
      "type": "application/json",
      "domainType": "link"
    },
    {
      "rel": "urn:org.restfulobjects:rels/update",
      "href": "http://myserver/mysite/check_mk/api/1.0/objects/service_discovery/myserver123-services-wato",
      "method": "PUT",
      "type": "application/json",
      "domainType": "link"
    },
    {
      "rel": "urn:org.restfulobjects:rels/delete",
      "href": "http://myserver/mysite/check_mk/api/1.0/objects/service_discovery/myserver123-services-wato",
      "method": "DELETE",
      "type": "application/json",
      "domainType": "link"
    }
  ],
  "members": {},
  "extensions": {}
}
#OK#
----

Success is reported succinctly at the end of the output with `OK`.


==== Activate the changes

Finally, the changes must be activated. The appropriate request is called
[.guihint]#Activate pending changes#.

As before, take the first part with the environment variables from the previous examples. In the data part of the `curl` command change the parameter `sites` and set it to the name of the site -- where the changes should be activated:

.rest-api_test.sh
[{file}]
----
#!/bin/bash
HOST_NAME="myserver"
SITE_NAME="mysite"
API_URL="http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0"

USERNAME="automation"
PASSWORD="theautomationsecret"

out=$(
  curl \
    --request POST \
    --write-out "\nxxx-status_code=%{http_code}\n" \
    --header "Authorization: Bearer $USERNAME $PASSWORD" \
    --header "Accept: application/json" \
    --header "Content-Type: application/json" \
    --data '{
          "force_foreign_changes": false,
          "redirect": false,
          "sites": [
            "mysite"
          ]
        }' \
    "$API_URL/domain-types/activation_run/actions/activate-changes/invoke")

resp=$( echo "${out}" | grep -v "xxx-status_code" )
code=$( echo "${out}" | awk -F"=" '/^xxx-status_code/ {print $2}')

# For indentation, please install 'jq' (JSON query tool)
echo "$resp" | jq
# echo "$resp"

if [[ $code -lt 400 ]]; then
    echo "OK"
    exit 0
else
    echo "Request error"
    exit 1
fi
----

Execute this script:

[{shell}]
----
{c-omd} ./rest-api_test.sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   839  100   704  100   135   3008    576 --:--:-- --:--:-- --:--:--  3585
{
  "domainType": "activation_run",
  "id": "f9c63794-a8e0-4a08-87d9-bd48e17064ee",
  "title": #"Activation f9c63794-a8e0-4a08-87d9-bd48e17064ee was started."#,
  "links": [
    {
      "rel": "self",
      "href": "http://myserver/mysite/check_mk/api/1.0/objects/activation_run/f9c63794-a8e0-4a08-87d9-bd48e17064ee",
      "method": "GET",
      "type": "application/json",
      "domainType": "link"
    },
    {
      "rel": "urn:com.checkmk:rels/wait-for-completion",
      "href": "http://myserver/mysite/check_mk/api/1.0/objects/activation_run/f9c63794-a8e0-4a08-87d9-bd48e17064ee/actions/wait-for-completion/invoke",
      "method": "GET",
      "type": "application/json",
      "domainType": "link"
    }
  ],
  "members": {},
  "extensions": {}
}
#OK#
----

The highlighted text indicates that the activation has been started.
Again, the REST API suggests two useful follow-up requests under `links`:
to query the status of this activation, and to wait for its completion.


[#rest_api_gui]
=== Making requests via the REST API GUI

With the REST API GUI you get a new perspective on the API. With this GUI you
can interact directly with the API from the browser by sending requests to the
server via cURL command, and immediately see the responses. To do this, you have
to do without the code examples of the REST API documentation in the API GUI --
both views are optimised for their respective functions.

The REST API GUI is generated from the same source as the REST API
documentation -- the OpenAPI document -- and therefore always provides functions
that match the API.

You open the API GUI in the {CMK} GUI from the navigation bar,
menu [.guihint]#Help > APIs > REST API interactive GUI#. The API GUI is displayed in a new browser window (or browser tab):

[{image-border}]
image::restapi_swaggerui.png[]

In the following we outline how you can execute the first request from the above
example (create a host) with the REST API GUI instead of using a script:

. Authenticate: The REST API GUI offers a dialog box for entering authentication information after clicking the [.guihint]#Authorize# button (on the right side above the entry of the first endpoint folder). However, you *do not need* to make any entries there, because aas a logged-in {CMK} user you are already authorised to use the REST API via xref:rest_api#auth[cookie authentication].

. Select the end point: In the [.guihint]#Hosts# folder, select the endpoint [.guihint]#Create a host# and click [.guihint]#Try it out#.

. Enter parameter values: In [.guihint]#Request body# overwrite the example values for `host_name` and `ipaddress`.

. Send a request: Click [.guihint]#Execute#.

. Check the response: Under [.guihint]#Responses# you will first see the sent cURL command and the URL of the endpoint. Then under [.guihint]#Server response# the response is displayed with HTTP status code and in the [.guihint]#Response body# with the (multi-line formatted) REST API response

The REST API GUI therefore offers you the opportunity to try out the functions
of the API quickly and easily, and to familiarise yourself with the details of
the input values as well as with concrete responses.


[#error_correction]
=== Error correction

In contrast to the output shown so far for successful commands via script,
the REST API shows you errors in the following way:

[{shell}]
----
{
  "title": "An exception occurred.",
  "status": 401,
  "detail": "There are changes from other users and foreign changes are not allowed in this API call.",
}
----

Depending on the error, the parameters displayed in the output may vary.
However, they always receive in `status`
the link:https://en.wikipedia.org/wiki/List_of_HTTP_status_codes[HTTP status code],
and in `title` a brief description of the error cause.

In most cases, `detail` will show you detailed information,
as the name suggests.
In the above example, you can see that there are pending changes in {CMK}, but these were initiated by another user.
Only changes that have been made via the API can be activated.

In the next example, the helpful ones are also in the detailed information:

[{shell}]
----
{
  "title": "Bad Request",
  "status": 400,
  "detail": "These fields have problems: host_name",
  "host_name": [
    "'myserver/123' does not match pattern '[-0-9a-zA-Z_.]+'."
  ]
}
----

The problem in the above example is that a parameter value does not adhere to the valid value
range, because of a slash in the host name.

The number of possible errors is of course much greater than the two we have
presented here. However, you can see from the examples shown that in its output
the REST API usually provides sufficient information on the cause and thus gives
you clues for starting the analysis and troubleshooting.


[#securing]
== Securing the API

Since sensitive data can be transferred during access via the REST API and --
depending on the authorization of the automation user -- considerable alterations
could potentially be made to {CMK}, you should secure such access accordingly.
Here you will find some of the available options:

* xref:omd_https#[{CMK} over HTTPS]: Use the API exclusively over Hypertext Transfer Protocol Secure (HTTPS), otherwise user names, passwords, and also configuration data will be transmitted in clear text on the network.
* Give the automation user a password of sufficient length. Since the password is usually only stored in a script, you can easily assign a very long one.
* Be sure to pay careful attention to the authorization concept for the scripts you use to make requests to the API. The scripts may contain sensitive data such as configuration data, passwords, etc. Therefore make sure that only authorized users and groups can read these scripts.


[#rest-web-api]
== Comparison of the REST API and the web API

This chapter gives you an overview of the functions available to you via the REST API and via the web API.
The following table is structured according to the end points that you will find in the left navigation area of the REST API documentation.
In the table, the column for the REST API contains the HTTP methods (supplemented with context information in case of ambiguity) and the column for the web API contains its commands.

[cols=4,options="header"]
|===
|Function |Action |REST API |web API 
.2+|Acknowledge problems |Acknowledge for hosts |POST host |-
|Acknowledge for services |POST service |-
.5+|Downtime |Show |GET |-
|Show all |GET all |-
|Create for a host |POST host |-
|Create for a service |POST service |-
|Delete |POST delete |-
|Host status |Show hosts of specific condition |GET all |-
.3+|Service status |Show service of a host |GET show_service |-
|Show services of a host |GET services |-
|Show all services |GET all |-
.10+|Agent |Show all agents  |GET all |-
|Show the status of automatic deployment |GET automatic-deployment |-
|Show the baking status |GET baking_status |-
|Show agent configuration |GET agent_hash |-
|Download agent by host name and operating system |GET download_by_host |-
|Download agent by hash and operating system |GET download_by_hash |-
|Sign all agents |POST sign |-
|Bake all agents |POST bake |bake_agents
|Bake and sign all agents |POST bake_and_sign |-
|Download agents shipped with {CMK} |GET download |-
.4+|Activate changes |Wait for activation completion |GET wait-for-completion |-
|Show the activation status  |GET activation_run |-
|Show all currently running activations |GET collections running |-
|Activate pending changes |POST |activate_changes
.13+|Business Intelligence (BI) |Delete BI rule |DEL bi_rule |-
|Show BI rule |GET bi_rule |-
|Create BI rule |POST bi_rule |-
|Update BI rule |PUT bi_rule |-
|Delete BI aggregation |DEL bi_aggregation |-
|Show BI aggregation |GET bi_aggregation |-
|Create BI aggregation |POST bi_aggregation |-
|Update BI aggregation |PUT bi_aggregation |-
|Show all BI packs |GET all bi_pack |-
|Delete BI pack |DEL bi_pack |-
|Show BI pack |GET bi_pack |-
|Create BI pack |POST bi_pack |-
|Update BI pack |PUT bi_pack |-
.8+|Contact group |Show all |GET all |get_all_contactgroups
|Create |POST |add_contactgroup
|Delete |DEL |delete_contactgroup
|Show |GET |-
|Update |PUT |edit_contactgroup
|Bulk update |PUT bulk-update |-
|Bulk create |POST bulk-create |-
|Bulk delete |POST bulk-delete |-
.8+|Folder |Show all hosts of a folder |GET collections hosts |- 
|Show all |GET all |get_all_folder
|Create |POST |add_folder
|Delete |DEL |delete_folder
|Show |GET |get_folder
|Update |PUT |edit_folder
|Bulk update |PUT bulk-update |-
|Move |POST move |-
.12+|Host |Show all |GET all |get_all_hosts
|Create |POST |add_host
|Delete |DEL |delete_host
|Show |GET |get_host
|Update |PUT |edit_host
|Update cluster node |PUT nodes |-
|Bulk update |PUT bulk-update |-
|Rename |PUT rename |-
|Create cluster host |POST clusters |-
|Bulk create |POST bulk-create |-
|Move |POST move |-
|Bulk delete |DEL bulk-delete |delete_hosts
.8+|Host group |Show all |GET all |get_all_hostgroups
|Create |POST |add_hostgroup
|Delete |DEL |delete_hostgroup
|Show |GET |-
|Update |PUT |edit_hostgroup
|Bulk update |PUT bulk-update |-
|Bulk create |POST bulk-create |-
|Bulk delete |POST bulk-delete |delete_hosts
.5+|Host tag group |Delete |DEL |-
|Show |GET |-
|Update |PUT |set_hosttags
|Show all |GET all |get_hosttags
|Create |POST |-
.5+|Password (in password store) |Delete |DEL |-
|Show |GET |-
|Update |PUT |-
|Show all |GET all |-  
|Create |POST |-
.4+|Rule |Show all |GET all |- 
|Create |POST |set_ruleset
|Delete |DEL |-
|Show |GET |-
.2+|Rule set |Search |GET all |get_ruleset_info
|Show |GET |get_ruleset
.5+|Service discovery |Show services of a service discovery status |GET collections |-
|Show status of a bulk service discovery job |GET discovery-run |-
|Update service discovery status of a service |PUT |-  
|Run service discovery on a host |POST discover_services |discover_services
|Run bulk service discovery |POST bulk-discovery-start |-
.8+|Service group |Show all |GET all |get_all_servicegroups
|Create |POST |add_servicegroup
|Delete |DEL |delete_servicegroup
|Show |GET |-
|Update |PUT |edit_servicegroup
|Bulk update |PUT bulk-update |-
|Bulk create |POST bulk-create |-
|Bulk delete |POST bulk-delete |-
.5+|Time period |Delete |DEL |-
|Show |GET |-
|Update |PUT |-
|Show all |GET all |- 
|Create |POST |-
.5+|User |Delete |DEL |delete_users
|Show |GET |-
|Update |PUT |edit_users
|Show all |GET all |get_all_users 
|Create |POST |add_users
.5+|Site |Show |- |get_site
|Update |- |set_site
|Delete |- |delete_site
|Login |- |login_site
|Logout |- |logout_site
.3+|Metrics and graphs |Show metrics for all services of a host |- |get_metrics_of_host
|Show graph information for a service |- |get_graph_recipes
|Show metrics for a graph |- |get_graph
.1+|Miscellaneous |Show version information |GET version |-
|===

////
|Show sites for a user |- |get_user_sites
|Show host names of all sites |- |get_host_names
|Show Service Level Agreement (SLA) information |- |get_sla
////
