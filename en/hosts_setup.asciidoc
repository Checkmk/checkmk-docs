// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= Host administration
:revdate: 2022-09-27
:title: Host administration - Managing systems being monitored
:description: Here you will learn which possibilities {CMK} offers to create hosts, to structure them with folders and to maintain them,

{related-start}
xref:wato#[Configuring {CMK}]
xref:wato_rules#[Rules]
xref:wato_services#[Understanding and configuring services]
{related-end}


[#intro]
== Introduction

The most important task when setting up a monitoring tool is to manage the systems to be monitored -- the xref:glossar#host[_hosts_].
This is not just a matter of ensuring that they are entered with the correct master data (e.g. host name, IP address).
Settings for the monitoring (e.g. notifications, thresholds, etc.) also require regular maintenance.

{CMK} was designed from the beginning for environments with very many hosts.
To make the configuration of such environments manageable for the user, {CMK} follows a different approach from all other systems that have been developed out of the Nagios ecosystem.
The main {CMK} principles are:

* A xref:folder[hierarchy of folders] in which hosts are stored.
* xref:glossar#host_tag[Host tags] and a xref:wato_rules#[rule-based] configuration derived from the tags.
* Automatic detection of the xref:wato_services#[services to be monitored].

In general, it has proven useful to think about an ordering system first and then fill it with content.
To learn about the possibilities {CMK} offers to bring order to your hosts, see the article on xref:hosts_structure#[structuring hosts].


[#folder]
== Folders and inheritance

Everyone who works with computers knows the principle of files and folders.
{CMK} uses an analogous principle for the administration of the hosts, which effectively take over the role of the files.
Since folders can themselves be contained in folders, the result appears as a tree structure.


=== Folder hierarchy

The user is completely free in the design of their own tree structure. Any form of differentiation is possible.
However, there are three common criteria for the structure of the host tree:

* *Location* (e.g. Munich versus Shanghai)
* *Host type* (e.g. switch versus load balancer)
* *Organization structure* (e.g. database versus network groups)

The criteria can of course be mixed, split by location in the first level of the tree and then by host type in the second for example.

If you like simplicity, you should put hosts only in the 'leaves' of the tree (even if {CMK} allows hosts in middle folders).
The following example shows a simple tree structure by host type:
Hosts A, B, and C are placed in the Servers folder, and D, E, and F are placed in the Network folder:

image::wato_folders_step_2.png[alt="Illustration of a folder structure with two subfolders.",width=430px]


[#inheritance]
=== Inheriting attributes

If you build the tree cleverly, you can use it to inherit attributes in a meaningful way.
This is especially useful for those attributes that are common to large groups of hosts, such as the SNMP community or host tags that you use to determine whether the host should be monitored by a {CMK} agent or by SNMP.

The following example shows the inheritance of the tag groups 'Criticality' (with the values `prod` and `test`) and 'Checkmk agent / API integrations' (with the values `tcp` and `no-agent`).
The `tcp` auxiliary tag is automatically set when the {CMK} agent and/or an API integration is selected, while `no-agent` is the option of choice when monitoring via SNMP.

image::wato_folders_step_4.png[alt="Illustration of a folder structure with attributes assigned at different levels.",width=500px]

Attributes defined further down the tree always take precedence.
So values defined directly at the host override anything coming from the folders.
In the above example, this results in `prod` and `tcp` for host A, `prod` and `no-agent` for D, and `test` and `no-agent` for host F because of the explicitly assigned attribute.

A major advantage of this scheme over the widely used 'copy & paste' approach of database-oriented configuration systems is that any specified attributes will be received by *hosts added in the future*.
This makes work easier for you and your colleagues:
Just drop a new host into the appropriate folder and all the predefined attributes will automatically be correct.


[#create_folders]
=== Creating folders

How to create folders is explained in the xref:intro_setup_monitor#create_folders[Beginner's Guide].


[#create_hosts]
== Creating and editing hosts in the Setup menu

To manage folders and hosts, go to [.guihint]#Setup > Hosts > Hosts:#

image::hosts_main_directory.png[alt="Folder view 'Main' with multiple subfolders."]

Here in the default view you can see an (initially empty) overview of the folders and below these, in tabular form, the hosts already present in the current folder.
Creating a new host with the icon:icon_new[] [.guihint]#Add host# action button, the icon:icon_clone[alt="Icon to clone a list entry."] clone or the icon:icon_edit[alt="Icon to edit a list entry."] edit of an existing host will bring you to the [.guihint]#Properties of host# page.
This lists the attributes of the host.
These attributes are grouped into several sections, the most important of which we present here.


=== The host name

The [.guihint]#Hostname# field is used everywhere within {CMK} to uniquely identify the host.
Whenever possible, you should use the host's DNS name.
If the DNS name is too bulky, an easier to recognize alias name can be assigned later.

image::hosts_new_host_1.png[alt="Dialog with host properties: the host name."]

xref:rename[Changes to the host name] are in principle also later possible, however since the host name is used in many places in {CMK}, later changes are more complex and time-consuming when monitoring data has already been accumulated by the time the change is to made.


[#dns]
=== Alias and IP address

You can assign an alternative, descriptive name for the host under [.guihint]#Alias#, which is displayed in many places in the GUI and in reports.
If you do not assign an alias, the host name will be used instead.

image::hosts_new_host_2.png[alt="Dialog with properties of a host: alias and IP address."]

You do not necessarily have to specify an IP address.
Four options are available for configuring the IP address, which also determine when the name is resolved:

[cols="5,65,~",options="header"]
|===
|Option |Procedure |When to perform name resolution?
|1. |You do _not_ specify an IP address. The host name must be resolvable by DNS. |At xref:wato#activate_changes[activating the changes].
|2. |You enter an IPv4 address -- in the usual dot notation. |Never
|3. |Instead of an IP address, you enter an (alternative) host name which is resolvable by DNS. |When running the checks
|4. |Use the [.guihint]#Hosts with dynamic DNS lookup during monitoring# xref:wato_rules# [rule set] to specify hosts for a dynamic DNS. The result is analogous to option 3, except that the [.guihint]#Hostname# field is now used for the DNS query. 
|When running the checks
|===

With the first option {CMK} uses a cache file to avoid repeated DNS requests during the activation of the changes.
This cache is very important for speeding up the process, and it also ensures that you can activate a changed configuration even if the DNS fails in an attempt.

The catch is that {CMK} does not immediately notice the change of an IP address in the DNS.
That's why there is a menu entry [.guihint]#Host > Update DNS cache# in the host properties.
This will clear the complete DNS cache and force a new resolution the next time the changes are activated.
The corresponding file is located in your site under `~/var/check_mk/ipaddresses.cache`.
Deleting this file has the same effect as running [.guihint]#Update (site) DNS cache.#

{CMK} also supports monitoring via IPv6 -- even in dual stack.
The order of resolution here is given by the operating system settings (`/etc/gai.conf`).
In the [.guihint]#Additional IPv4 addresses# and [.guihint]#Additional IPv6 addresses# fields only IP addresses in dot or colon notation are allowed, so alternative DNS names are not permitted.


[#monitoring_agents]
=== Monitoring agents

With the [.guihint]#Monitoring agents# you decide from which sources data is used for monitoring.
The default setting provides for the use of the xref:wato_monitoringagents#agents[{CMK} agent].
Numerous alternative or additional monitoring options are also provided.

image::hosts_new_host_agents.png[alt="Dialog with properties of a host: Monitoring agents."]

In particular, the first [.guihint]#{CMK} agent / API integrations# entry decides which data to use and which to discard when multiple sources are present.

[cols="40,~"]
|===
|[.guihint]#API integrations if configured, else {CMK} agent# |Monitoring data is supplied by xref:glossar#api_integrations[API integrations], that is, by special agents or by piggyback from other hosts. If no API integrations are configured, the output from the {CMK} agent is accessed. This is the default value.
|[.guihint]#Configured API integrations and {CMK} agent# |The output from a {CMK} agent is expected. Data supplied by API integrations will also be used if configured.
|[.guihint]#Configured API integrations, no {CMK} agent# |Only data supplied by API integrations will be used for monitoring.
|[.guihint]#No API integrations, no {CMK} agent# |With this setting the host will be monitored via SNMP or agentless only with xref:glossar#active_check[active checks]. Rules for active checks can be found in [.guihint]#Setup > Hosts > HTTP, TCP, Email, ...# If you do not define at least one active check, {CMK} will automatically create a PING service.
|===

*Note:* Selecting [.guihint]#Configured API integrations, no Checkmk agent# ensures that both of the services [.guihint]#Check_MK# and [.guihint]#Check_MK Discovery# always have the {OK} state.
If you have not entered an IP address for the host, it will assume the {DOWN} state because no ping can be performed.
In this case you must use the [.guihint]#Setup > Hosts > Host monitoring rules > Host Check Command# rule to determine how it is to be verified whether the host is evaluated as {UP}. 

Use the following [.guihint]#SNMP# setting to configure monitoring via xref:glossar#snmp[SNMP].
After enabling [.guihint]#SNMP# and selecting the SNMP version, the [.guihint]#SNMP credentials# field appears, which allows you to specify the SNMP community.
However, since this is usually the same for many hosts, it is more advisable to store this setting in the xref:folder[folder].
If you do not specify anything, `public` is automatically assumed.

The last field [.guihint]#Piggyback# refers to the use of xref:glossar#piggyback[piggyback data], which is piggybacked by other hosts and assigned as agent output to this host.
Note that the setting made here must match the settings of the first [.guihint]#Checkmk agent / API integrations# option, otherwise the absence of expected monitoring data may not be noticed.
For this reason, one entry is explicitly [.guihint]#Always use and expect piggyback data.#


[#custom_attributes]
=== Custom attributes

In the [.guihint]#Custom attributes# box, you can display any freely-coded text fields that you have previously created as your own custom attributes.
By default, [.guihint]#Labels# and the two predefined host tag groups [.guihint]#Criticality# and [.guihint]#Networking Segment# are present here:

image::hosts_new_host_attributes.png[alt="Dialog with the properties of a host: custom attributes."]

You can define custom attributes using [.guihint]#Setup > Hosts > Custom host attributes#.

image::hosts_setup_custom_attributes.png[alt="Menu for creating a custom attribute."]

Custom attributes can be, for example, an on-site contact, a branch number, hardware information, inventory numbers, or geographic coordinates.
Custom attribute values should primarily help users to keep track, but can also be used in rules and filters when, for example, xref:glossar#label[labels] or xref:glossar#host_tag[host tags] are too inflexible.

Custom attributes can be assigned to any box in a host's properties by selecting [.guihint]#Topic# (topic).


[#management_board]
=== Management board

The designation [.guihint]#Management board# stands for separate plug-in cards or extended BIOS functionality (such as Baseboard Management Controller/BMC, Management Engine/ME) for monitoring and managing the hardware in addition to the installed operating system.
As well as remote control and remote maintenance functions (e.g. for deploying operating systems), such hardware usually also comes with an IPMI or SNMP interface, via which 'health' values (e.g. temperatures and fan speeds) can be viewed.
Since management boards have their own IP address, a separate monitoring would make the assignment more difficult for {CMK} users.
Enter the IP address and access method here if the host to be monitored has a management board.

image::hosts_setup_management_board.png[alt="Management board setup."]


=== Creation / Locking

While most of the details described so far can be edited, the [.guihint]#Creation / Locking# box contains details that are for informational purposes only at this point.

image::hosts_setup_creation_locking.png[alt="Display creation and locking information."]

The time of creation ([.guihint]#Created at#) and the creator ([.guihint]#Created by#) are determined by {CMK}.
There are three main choices for the creator name:

* User name, e.g. [.guihint]#cmkadmin#: the host was created manually by a user, e.g. in xref:create_hosts[Setup].
* _automation_: the host was created by the xref:glossar#automation_user[automation user], e.g. using the xref:rest_api#[REST API].
* _Network scan_: The host was found during an automatic xref:folder_network_scan[network scan].

If the host was created by the automation user, it will be locked by its corresponding site ([.guihint]#Locked by#).
This information can also be used when xref:search[searching for hosts in Setup].

[.guihint]#Locked attributes# can no longer be edited in the host's properties.


=== Saving and continuing

When creating or cloning a host, after setting the properties, the next sensible step is [.guihint]#Save & go to service configuration.#
This will take you to the automatic service discovery, which we will explain in the xref:services[next chapter].

In contrast, [.guihint]#Save & go to connection tests# takes you to the connection test. This allows you to first test whether you are getting any data at all from the host with the settings you have specified -- be it via an agent or whatever you have previously configured.
For details on the connection test, see the xref:wato_monitoringagents#diagnosticpage[article on monitoring agents].


[#bulk_operations]
=== Bulk actions

You may occasionally want to do things like delete, move, edit, or perform a service discovery for a number of hosts at the same time.
{CMK} has the so-called 'bulk actions' for this purpose.

You can find these actions in the [.guihint]#Hosts# menu page of an open folder in the [.guihint]#On selected hosts# section:

image::hosts_bulk_actions.png[alt="'Hosts' menu with the bulk actions function.",width=40%]

The actions always refer to the hosts that are located directly in the displayed folder -- and which have been selected by you. 
The check boxes in the first column of the host list serve this purpose. 
If you click the cross in the column title, all hosts will be selected -- and deselected by clicking it again.

Here are some notes on the available actions:

* [.guihint]#Delete hosts:# Deletes the hosts -- after confirming the request.

* [.guihint]#Edit attributes:# Changes one or more attributes of the hosts.
The attribute is thereby explicitly entered into the hosts.
+
*Caution:* There is a difference between a host inheriting an attribute from a folder and having it explicitly set, as by this action.
Why? In the latter case, changing the attributes in the folder will have no effect, since values set directly at the host will always take precedence. For this reason, there is also the following action.

* [.guihint]#Remove explicit attribute settings:# Removes explicit attributes from hosts and reinstates inheritance.
You would accomplish the same thing by selecting each host individually and unchecking the boxes on the relevant attributes.
+
In general, it is a good idea to use as few explicit attributes as possible.
If everything is inherited correctly through the folders, this avoids errors and makes it convenient to add new hosts.

* [.guihint]#Remove TLS registration:# Removes the registration for encrypted communication via Transport Layer Security (TLS), for instance to reset communication with the xref:wato_monitoringagents#agents[{CMK} agent] to unencrypted mode.

* [.guihint]#Discover services:# xref:wato_services#bulk_discovery[Perform a service discovery for multiple hosts] simultaneously.

* [.guihint]#Detect network parent hosts:# xref:folder_network_scan[Have parents created by a scan].

* [.guihint]#Move to other folder:# Move the hosts to another folder. After selecting this entry, the existing folders are suggested as possible targets.


[#services]
== Configuring services

The next step after creating a host is to configure the services to be monitored on it.
You can learn all the details covering the automatic discovery and configuration of services in the article xref:wato_services#[Understanding and configuring services].
We will describe only the most important points here.

The list of a host's configured services can be accessed in the following ways:

* In Setup, via the host list: +
Select [.guihint]#Setup > Hosts > Hosts.# In the host list, click icon:icon_services[alt="Icon to display the configured services."].

* In Setup, via the properties of a host: +
Select [.guihint]#Setup > Hosts > Hosts.# In the host list, click the required host. On the [.guihint]#Properties of host# page, select [.guihint]#Host > Save & go to service configuration.# If you select [.guihint]#Host > Service configuration# from the menu instead, you will also go to the service list -- but without saving the host properties.

* In monitoring, via the list of services of a host: +
Select the [.guihint]#Host# menu, and in the [.guihint]#Setup# section select the [.guihint]#Service configuration# entry. A small gear symbol at the icon shows that this menu entry leads into a page in the Setup. This will take you directly to the service configuration.

Whichever method you choose, the result should look something like this:

image::hosts_services.png[alt="List of services found on the host."]

The most important actions are available to you in the action bar, others can be found in the [.guihint]#Actions# menu.
Some notes on the possible actions:

* The [.guihint]#Accept all# button is usually the best action for a new host. This is also the right choice for existing hosts in which services are found that are not currently being monitored. These can be found in the [.guihint]#Undecided services (currently not monitored) section#. [.guihint]#Accept all# adds the missing services, removes vanished services and accepts any host labels found. 

* The [.guihint]#Rescan# button ensures that fresh, complete data is fetched from the target device.
To enable faster page loading, {CMK} works with cached files that are recorded during normal monitoring.
For SNMP devices, the button therefore triggers an active search for new check plug-ins and may also find additional services.

* The [.guihint]#Monitor undecided services# button transfers the corresponding services to the monitoring, but without transferring the host labels.

* [.guihint]#Remove vanished services# removes services that no longer exist.
This is useful for services that remember a current state on discovery (e.g., the current state of a switch's ports or of file systems and their mount points).

* After each modification an xref:wato#activate_changes[activate changes] is required to make them effective.


[#import]
== Importing hosts from CSV data

If you want to add a large number of hosts to {CMK} in a single action, you can make the task easier by importing the hosts from a CSV file.
This is especially helpful in two usage scenarios:

* You want to import hosts from another monitoring system that supports exporting in structured data formats.
You can create a CSV file from this source system and use this file for the import to the target {CMK} system.

* You want to create many new hosts at the same time.
In such a situation, enter the hosts into an Excel spreadsheet, then simply import this list as a CSV file.

{CMK} is quite flexible when importing CSV data.
In the simplest case, in each line of the CSV file you simply have a host name that is resolvable by DNS:

.import.csv
[{file}]
----
myserver01
myserver02
----

You can also pass additional attributes at the same time during an import.
An overview of all possible attributes can be found in the xref:import_attributes[next section].
If the CSV file contains the names of the attributes in the first line, {CMK} can even assign these automatically.
{CMK} is, as far as possible, tolerant of non-exact spelling (it tries to interpret minor variations).
For example, in the following file, {CMK} can automatically map all columns correctly:

.import.csv
[{file}]
----
hostname;ip address;alias;agent;snmp_ds
lnx17.example.com;192.168.178.48;Webserver;cmk-agent;
lnx18.exmpl.com;192.168.178.55;Backupserver;cmk-agent;
switch47-11;;Switch47;no-agent;snmp-v2
----

The procedure is as follows:
Select or create a folder into which the import should take place.
Navigate to this folder [.guihint]#(Setup > Hosts > ...)# and in the [.guihint]#Hosts# menu select the entry icon:icon_bulk_import[alt="Icon to import multiple hosts in CSV file format."] [.guihint]#Import hosts via CSV file.#

On the following page, use [.guihint]#Upload CSV File# to upload the file.
Alternatively, select [.guihint]#Content of CSV File# and copy the contents of the file into the text box below the list.
You can immediately run an automatic service discovery on the newly imported hosts.
To do this, select the [.guihint]#Perform automatic service discovery# option.

image::hosts_bulk_import_step1.png[alt="Dialog for entering CSV data for import."]

By clicking icon:icon_save[alt="Icon to accept the input."] [.guihint]#Upload# you will get to the next page:

image::hosts_bulk_import_step2.png[alt="Dialog to control the CSV data for import."]

Selecting a delimiter ([.guihint]#Set field delimiter#) is not necessary for this example, as the semicolon has already been interpreted correctly.
{CMK} automatically recognizes common delimiters, such as tab or semicolon. Select the [.guihint]#Has title line# option here to recognize the headings.
Under [.guihint]#Preview# you can see a preview of the new table.

If the automatic detection of a column does not work correctly, you can also manually select the attribute that is to be assigned.
Use the respective list for this.
For the host tags (those entries that start with [.guihint]#Tag#) the CSV file must contain the internal ID of the tag (here e.g. `cmk-agent` and not its title [.guihint]#{CMK} agent / API integrations# visible in the GUI).
You can see exactly what the internal IDs of the host tags are in [.guihint]#Setup > Hosts > Tags#.
For the IDs of the predefined ([.guihint]#builtin#) tags, see the table in the article describing the xref:host_tags#predefined_tags[host tags].

Start the import by clicking icon:icon_save[alt="Icon to save input."] [.guihint]#Import#.
If you have selected the [.guihint]#Perform automatic service discovery# option, you will land on the xref:wato_services#bulk_discovery[Bulk discovery] page and should still edit it. 
Once the service discovery has been completed, all that remains is to activate the changes as usual, after which all the new hosts will be in the monitoring.

[#import_attributes]
=== Overview of the attributes for import

[cols="30,~",options="header"]
|===
|Attribute |Description
|`hostname` |Name of the host
|`Alias` |Alias name of the host
|`Monitored on site` |Site on which this host is monitored
|`IPv4 address` |IPv4 address
|`IPv6 address` |IPv6 address
|`SNMP community` |SNMP community
|`Tag: Criticality` |Tag: Criticality
|`Tag: Networking Segment` |Tag: Network segment
|`Tag: Checkmk agent / API integrations` |Tag: Checkmk agent / API integration
|`Tag: Piggyback` |Tag: Piggyback
|`Tag: SNMP` |Tag: SNMP
|`Tag: IP address family` |Tag: IP address family
|===


[#folder_network_scan]
== Performing a network scan for folders

=== The principle

{CMK} provides the ability to automatically and regularly scan your network -- or just parts of it -- for (new) hosts.
This network scan is set up at the folder level in {CMK}'s host administration.
A cronjob runs in the background every minute. This checks all folders to see if another scan is due.
The cronjob checks the two settings [.guihint]#Scan interval# and [.guihint]#Time allowed#.
If this interval has expired and the server is within the time allowed for the scan, the scan will be started.
Thus, a newly set up network scan would start within a minute of clicking [.guihint]#Save#, provided you have not changed the [.guihint]#Time allowed#.

Once a scan starts, basically three things happen:

. {CMK} first determines the IP addresses to be scanned.
From the configured address ranges, this removes any addresses that are already being used in any folder in your hosts' configurations.

. The identified addresses will now be pinged.
If there is a response to this ping on an address, an attempt is made to determine a host name.

. Finally the hosts in the folder are created.
All hosts with names that already exist on the site will be omitted.


=== Setting up a network scan

As mentioned above, the network scan is set up at the folder level.
First open [.guihint]#Setup > Hosts > Hosts.# Then navigate to any folder or stay in the [.guihint]#Main.# folder.
Via the [.guihint]#Folder > Properties# menu you will find the [.guihint]#Network Scan# box.

image::wato_host_network_scan_new.png[alt="Disabled _Network Scan_ box in the properties of a folder".]

Enable the network scan using the corresponding checkbox.

image::wato_host_network_scan_activated.png[alt="Activated but unconfigured _Network Scan_ box".]

Then, at [.guihint]#IP ranges to scan#, specify the IP addresses that {CMK} should automatically monitor for you.
For this definition you have the choice between single IP addresses, IP ranges and whole networks.
We recommend not selecting too large an address range, otherwise the network scan may take a very long time.
When choosing a network, we also recommend not to exceed the net mask of `/21`, which corresponds to 2048 IP addresses.
You should not exceed the number of 2048 IP addresses even when selecting via [.guihint]#IP-Range#.
Of course, this can only be a rough recommendation, since your (organizations) network may be able to handle larger address ranges without any problems.

The following [.guihint]#IP ranges to exclude# option allows you to exclude parts from the address range configured above.
This option is also useful for excluding hosts or IP addresses from the network scan that are already known and being monitored.
In this way, you can prevent duplicate hosts from being created.

The following two options [.guihint]#Scan interval# and [.guihint]#Time allowed# allow you to specify how often the scan should run and at what time you want to allow it.

One of the most important considerations when setting up network scanning is how you want to handle any hosts that are found.
The [.guihint]#Set criticality host tag# option plays a central role here:

* By default, [.guihint]#Do not monitor this host# is selected.
This specifies that the hosts found are only included in the host administration for the time being.
An actual monitoring does not take place.
One approach could be to _manually_ move the discovered hosts into your existing host structure -- for example using the [.guihint]#Move this host to another folder# function.
After moving, you will then need to customize or remove the [.guihint]#Criticality# host tag.
If you have a large number of hosts, you can use the [.guihint]#Remove explicit attribute settings# function in [.guihint]#Setup > Hosts > Hosts#.

* If you instead select [.guihint]#Productive system# as the host tag here, the hosts found -- if configured appropriately with the xref:wato_services#discovery_auto[[.guihint]#Periodic service discovery#] rule set -- will also be included directly in monitoring.

Before using network scanning, also note the following basic considerations:

* The scan runs via a ping.
This also means that devices that can only be monitored via SNMP may be found but will not automatically be monitored because the [.guihint]#SNMP credentials# will not have been configured.

* For new Windows hosts, the so-called _Echo Request_ will be deactivated in the firewall unless a corresponding configuration has been defined, e.g. by means of group policies.
Such Windows hosts will therefore not respond to the scan and will therefore not be found.

* {CMK} can only provide you with clean data for the hosts it finds if your network and site are configured accordingly.
Conflicting entries in DNS and your {CMK} site can lead to duplication.
A duplicate is created when a host with a name (but without an IP address) has already been set up in {CMK} and is now found under a _different name_ via its IP address.


[#search]
== Searching for hosts in Setup

{CMK} provides a convenient way to search in the xref:user_interface#search_monitor[monitoring environment] (in the [.guihint]#Monitor# menu) and in the xref:user_interface#search_setup[configuration environment] (in the [.guihint]#Setup# menu).
The results from these searches may differ because the hosts in the monitoring environment are not necessarily the same as in the configuration environment, for example, if you have created a host in Setup without enabling this change, it will not (yet) exist in monitoring.

There is another way to search for hosts in the configuration environment, which has the following advantages:

* You can search for hosts by a variety of criteria.

* The hosts which are found are listed on a results page from which you can start the xref:bulk_operations[bulk actions], as described earlier in this article.

You can find this search under [.guihint]#Setup > Hosts > Hosts# on the page of an opened folder in the [.guihint]#Display > Search hosts# menu.
Such a search always starts from the current folder, recursively into all its subfolders.
To search globally, simply start the search from the [.guihint]#Main# folder:

image::hosts_search.png[alt="Dialog to search for hosts in a folder."]

For the [.guihint]#Hostname# field, a partial word search (_infix search_) is used -- the entered text is searched, at any position, in the host name.
Furthermore, you can limit the search using other attributes.
All conditions are linked with _AND_.
So the example from the above screenshot searches for all hosts with [.guihint]#my# in their names, and which also have the [.guihint]#Test system# tag.

You start the search with [.guihint]#Submit#.
The result page can be treated almost like a normal folder.
This means that here you can use the bulk actions available in the [.guihint]#Hosts# menu in the [.guihint]#On selected hosts# section, e.g. to move all found hosts to a specific folder.

You can further customize and refine the search on the results page with [.guihint]#Refine search#.


[#rename]
== Renaming hosts

Renaming hosts may seem like a simple task at first glance, on closer inspection, however, it turns out to be a complex operation.
The reason is that {CMK} uses the host's name as a unique key for the host -- and indeed in numerous places.
This includes file names, log data, xref:glossar#rule[rules], xref:glossar#dashboard[dashboards], reports, xref:glossar#bi[BI] aggregations, and more.
A host's name also appears in URLs.

{CMK} provides two functions in the [.guihint]#Setup# for cleanly renaming a host in all of its occurrences. 
You can either rename a single host (in the host's properties in the [.guihint]#Host > Rename# menu) or rename multiple hosts in a folder simultaneously (in the [.guihint]#Hosts > Rename multiple hosts# menu).

*Important:* When making changes to multiple hosts and in multiple locations, it is always possible for something to go wrong. Therefore, make sure you have an up-to-date xref:backup#[backup] of your site -- before starting the renaming action.

The [.guihint]#Bulk renaming of hosts# allows simultaneous, systematic name matching for multiple hosts:

image::hosts_bulk_renaming.png[alt="Dialog for renaming multiple hosts."]

In the [.guihint]#Hostname matching# field, first optionally specify a regular expression that matches the *beginning* of the host names you want to rename -- so here in the example, all hosts whose names start with `lnx`.
Then add one or more operations with [.guihint]#Add renaming#. These are applied *in sequence* to the host names.
In the above example, first [.guihint]#Drop Domain Suffix# truncates everything following the first `.` from all host names, and then [.guihint]#Add Suffix# adds the `-linuxserver` suffix to the names.

Further operations are available, most of which are self-explanatory.
Otherwise you can get more information via the xref:user_interface#inline_help[inline help].

After starting the renaming procedure with icon:icon_save[alt="Icon to save input."] [.guihint]#Bulk rename# and confirming the obligatory "Are you sure...?" question &#8230;

image::hosts_bulk_renaming_sure.png[alt="Dialog to confirm host renaming."]

&#8230; completing the process may take a while.
During the renaming process the monitoring will be *completely stopped*!
This is necessary to maintain everything in a consistent state.
At the end of the process you will get an overview of exactly where renames were performed:

image::hosts_bulk_bulk_renaming_result.png[alt="Result of host renaming."]


[#rest_api]
== REST API requests for hosts and folders

You can also perform many of the actions described in this article using the {CMK} REST API.
This is especially interesting if you have many objects to manage on your site and want to automate actions.
For example, you can create many hosts using the REST API and avoid the potential errors that can always occur when entering them manually via the GUI.

If the command line, scripts and APIs are not your tools of choice, at this point it is enough to know that this API exists.
This gives you a powerful tool to fall back on when you need it -- as an alternative to managing via the web interface.

See the xref:rest_api#[REST API] article for an introduction to using this API.
You can find the reference documentation in your {CMK} site's xref:rest_api#rest_api_gui[web interface].
There you can familiarize yourself with the syntax of the requests and the structure of the responses.
You can access all important REST API entries in the {CMK} web interface via the navigation bar in the [.guihint]#Help > Developer resources# menu.

Finally, see the REST API article for xref:rest_api#examples[Examples] which explains how to perform actions on hosts and folders via the command line, such as viewing the folder structure and the hosts in a folder, creating a host in a specific folder, and more.


[#files]
== Files and directories

[cols="40,~",options="header"]
|===
|File path
|Function
|`~/etc/check_mk/conf.d/wato/`
|In this directory the folder structure in the Setup below the [.guihint]#Main# folder is mapped by a subdirectory structure.
If a folder is created in the GUI, a new directory is also created in the file system.
Here {CMK} ensures that the names of the directories are unique and only characters that are allowed in the file system are used.
For example, a space is replaced by an underscore.
|`~/etc/check_mk/conf.d/wato/hosts.mk`
|Configuration file for all hosts in the [.guihint]#Main# folder. For hosts in subfolders of [.guihint]#Main#, there is a file with the same name in each subdirectory.
|`~/etc/check_mk/conf.d/wato/.wato`
|This hidden file contains the display name in the GUI ([.guihint]#Main#) and all other properties of this directory.
A file `.wato` exists in every subdirectory.
If a folder is renamed in the GUI, only the `title` parameter for the display name is changed in this file.
The name of the directory in the file system remains unchanged.
|`~/etc/check_mk/(conf.d\|multisite.d)/wato/tags.mk`
|These files contain the definitions of all host tags.
|===