include::global_attr.adoc[]
= Monitoring Microsoft Azure
:revdate: 2021-12-30
:title: Monitoring Microsoft Azure
:description: The integration of Microsoft Azure into {CMK} enables seamless monitoring of cloud and on-premises in one interface and is described in detail here.

== Introduction


[{image-left}]
image::azure_logo.png[width=140]

Azure is Microsoft’s answer to the cloud which allows users to
use the concepts of infrastructure as a service (IaaS), Platform as a
Service (PaaS) and Software as a Service (SaaS).

Even though Microsoft manages the operation of the underlying hardware
and software components, it is still necessary and useful
to monitor your Azure cloud services. This must however be done in a different way than by using a
regular {CMK} agent. From Version {v15}p12 {CMK} supports monitoring
of Azure through its own xref:datasource_programs#[special agents], as well as
with a number of check plug-ins. Currently these are as follows:

* link:https://checkmk.com/cms_check_azure_agent_info.html[Microsoft Azure Agent Info]
* link:https://checkmk.com/cms_check_azure_databases.html[Microsoft Azure SQL Databases]
* link:https://checkmk.com/cms_check_azure_databases_cpu.html[Microsoft Azure SQL Databases: CPU utilization]
* link:https://checkmk.com/cms_check_azure_databases_connections.html[Microsoft Azure SQL Databases: Connections]
* link:https://checkmk.com/cms_check_azure_databases_deadlock.html[Microsoft Azure SQL Databases: Deadlocks]
* link:https://checkmk.com/cms_check_azure_databases_storage.html[Microsoft Azure SQL Databases: Storage]
* link:https://checkmk.com/cms_check_azure_databases_dtu.html[Microsoft Azure SQL Databases: Throughput units]
* link:https://checkmk.com/cms_check_azure_storageaccounts.html[Microsoft Azure Storage Accounts]
* link:https://checkmk.com/cms_check_azure_storageaccounts_flow.html[Microsoft Azure Storage Accounts: Data flow]
* link:https://checkmk.com/cms_check_azure_storageaccounts_performance.html[Microsoft Azure Storage Accounts: Performance]
* link:https://checkmk.com/cms_check_azure_virtualmachines.html[Microsoft Azure Virtual Machines]
* link:https://checkmk.com/cms_check_azure_virtualmachines_summary.html[Microsoft Azure Virtual Machines: Summary]
* link:https://checkmk.com/cms_check_azure_virtualnetworkgateways.html[Microsoft Azure Virtual Network Gateways]
* link:https://checkmk.com/cms_check_azure_sites.html[Microsoft Azure Webserver]

As we continue to evolve support for Azure monitoring, more plug-ins will
be added. Please also note that up to Version {v16} it
is still possible that structural changes to the implementation may be made,
and thus you might need to adapt your configuration again.

== Preparing Azure for {CMK}

=== Create the App

To monitor Azure with {CMK}, you will need your subscription ID
and your tenant ID (also known as the ‘Directory ID’).

First, register {CMK} Monitoring as an app so that you can work with
the Azure API. The option for this can be found in the
link:https://portal.azure.com[Azure portal] at
[.guihint]#Azure Active Directory > App registrations > New registration#:

[{image-border}]
image::azure_register_1.png[]

Assign a name of your choice. In the example we use `my-check-mk-app`.
This is only for information. The reference to the app itself is actually made via a
UUID which you will see in a later step. You don’t need to change anything
in the [.guihint]#Supported accout types# section. Setting the [.guihint]#Redirect URI# is optional.

After the creation select the new app from the list of apps. If it does
not appear in the list, query Select [.guihint]#My apps# on [.guihint]#All apps#.
In the details for the app you will also find the [.guihint]#Application (client) ID# that you will
need later. The [.guihint]#Object-ID# is not required.

[{image-border}]
image::azure_register_2.png[]


=== Assigning permissions to the App

In order for your new app to have access rights to the monitoring data,
you must assign them here. On the left of the main navigation page select
the [.guihint]#All resources# item, and then select the point [.guihint]#Subscriptions#:

[{image-border}]
image::azure_subscriptions.png[]


In this page’s navigation go to [.guihint]#Access Control (IAM)# and select
[.guihint]#Add#, and [.guihint]#Add role assignment#:

[{image-border}]
image::azure_access_control.png[]

Now, under role enter [.guihint]#Reader#, under [.guihint]#Assign access to# select the value
[.guihint]#Azure AD user, group, or service principal#, and enter your new app’s name in the [.guihint]#Select# option:

image::azure_role_assignment.jpg[width=380]


=== Create a key for the app

Now you need a key (a secret) with which {CMK} can log in to the API.
You can create a key in the app settings under [.guihint]#Certificates & secrets#.
Simply click [.guihint]#New client secret# in the [.guihint]#Client secrets# section.

[{image-border}]
image::azure_register_5.png[]

In the following window Microsoft would like you to enter a name of your choice in the [.guihint]#Description# field. We have chosen `my-check-mk-key` here.
Don’t forget to select the correct timeframe for your needs at the [.guihint]#Expires# option.

image::azure_register_6.png[width=175]

The setup under Azure is now complete, and you should now have the following four pieces of information:

. Your Subscription-ID
. Your Tenant-ID (also known as the ‘Directory-ID’).
. The Application-ID (Client-ID) for the App [.guihint]#my-check-mk-app#
. The secret for the key [.guihint]#my-check-mk-key# for this app

If you do not have your tenant-ID at hand, find it by hovering over your
login name in the pop-up help under [.guihint]#Directory: default directory ....#:

image::azure_register_tenant_id.png[width=600]

You can see the subscription ID -- for example on the
[.guihint]#Cost Management + Billing# under [.guihint]#My subscriptions#. *Note*: Nowadays
Microsoft does not display this ID as a hash, but instead as a human-readable
name. You can use this new-style name in the usual way.


== Setting up monitoring in {CMK}

=== The Azure-Host

Even though you are not dealing with a _physical_ host in Azure,
create a host for your Azure directory in {CMK}. The host name
you can define at will. Important: Because Azure is a service and therefore
does not have an IP address or DNS name (the special agent does the access itself),
you must set the [.guihint]#IP Address Family# to [.guihint]#No IP#.

image::azure_wato_no_ip.png[]

It is best to save with [.guihint]#Save & Finish# at this point, because of course the service detection cannot work yet.


=== Configuring the Azure-Agent

Since Azure cannot be queried through the regular {CMK} agent,
you now set up the Azure Special Agent -- which is also known as a
xref:datasource_programs#[data source program]. In this situation
{CMK} does not contact the destination host over TCP port 6556 as usual,
instead it calls a utility that communicates with the target system via
Azure’s application-specific API.

To do this, under [.guihint]#Setup > Agents > VM, Cloud, Container > Microsoft Azure#
create a rule whose xref:wato_rules#conditions[conditions] apply exclusively to the
Azure host that has just been created.
There you will find the input fields for the IDs and the secret:

image::azure_agent_rule.png[]

Here you can also select the resource groups or resources that you want to monitor.
If you *have not* checked [.guihint]#explicitely specified groups#, all resource groups are automatically monitored.

=== Test

If you now perform a service discovery on the Azure host,
only a single service called [.guihint]#Azure Agent Info# should be detected:

image::azure_services_ok.png[]

If access to the API does not work (because of a wrong ID or bad permissions, for example), an error message from the Azure API appears in the status text of
[.guihint]#Azure Agent Info#:

image::azure_services_fail.png[]


=== Make resource groups available as hosts

For clarity, Azure monitoring in {CMK} has been designed so that each Azure
resource group is represented by a logical (so to speak) host in {CMK}.
This is done with the help of a xref:piggyback#[piggyback procedure].
This piggyback will take data from the Azure host using special agents,
and within {CMK} redirect it to these resource group hosts.

The resource group hosts do not automatically appear in {CMK}.
Place these hosts either manually or optionally with the new xref:dcd#[Dynamic Configuration Daemon (DCD)]. Important --
when doing so the names of the hosts must exactly match the names of the resource groups -- and this is also case-sensitive! If you are uncertain about the exact spelling of the groups’ names, you can do this directly from the [.guihint]#Azure Agent Info# service on the Azure host.

By the way -- with the auxiliary `find_piggy_orphans` script from the
Treasures Directory you will find all of the Piggyhosts for which there are data,
but which have not yet been created as a host in {CMK}:

[{shell}]
----
{c-omd} share/doc/check_mk/treasures/find_piggy_orphans
Glastonbury
Woodstock
----

Configure the resource group hosts without an IP address (analogous to the
Azure host), and select [.guihint]#No API integrations, no checkmk agent# as the agent and [.guihint]#Always use and expect piggyback data# as piggyback.

image::wato_host_no_agent.png[]

If you now perform a service discovery on one of these resource group hosts,
you will find there are additional services that specifically relate to this resource group:

image::azure_services_piggy.png[]


==== Choosing different names for the resource group hosts

*Tip*: If you want to freely-choose the names of the resource group hosts,
with the
[.guihint]#Setup > Agents > Access to Agents > Hostname translation for piggybacked hosts# rule you can define a conversion of resource groups to hosts.


=== Virtual machines (VMs)

When you use Azure to monitor virtual machines which simultaneously serve as your normal host in {CMK} -- you can use the Azure services associated with those VMs instead
of the resource group hosts associated directly with the VM hosts in {CMK}.
To do this, in the Azure rule, under the [.guihint]#Map data relating to VMs# option, select the [.guihint]#Map data to the VM itself# setting. For this to work the VM’s {CMK} host in monitoring
must have exactly the same name as the corresponding VM in Azure.


===  Rate limit for API queries

Currently the API queries that {CMK} needs for monitoring Azure (as opposed to xref:monitoring_aws#[AWS]) are free -- however there is a limit to the number of queries
permitted per time period (the ‘Rate Limit’). Per Application ID the limit is 12,000 read requests per hour.

Due to the structure of the API, {CMK} requires at least one or more queries per requested resource. Therefore the total number of queries scales linearly with the number of resources being monitored. If the query limit is reached or exceeded, the query fails with a HTTP code 429 (too many requests), and the [.guihint]#Check_MK# service for the Azure host is flagged as critical.

This rate limit results from Azure's so-called ‘token bucket’
algorithm. It all starts with you having a ‘credit’ of 12,000
remaining queries -- each query consumes one of these. Simultaneously
3.33 queries per second are added to the credit. The output of the service
[.guihint]#Azure Agent Info# lets you see how many queries are currently left.

Specifically, this means that:

* If your query rate is sufficiently low, the available queries are always just under 12,000.
* If your rate is too high, the credit will slowly go down to 0 and then errors will occur sporadically in the query.

In this case you can reduce the polling rate by querying fewer polling resource groups
or resources, or by reducing the check interval for the [.guihint]#Check_MK# active check on the Azure host.
This is possible with the [.guihint]#Monitoring Configuration > Normal check interval for service checks# rule.

So that you can react in time, the [.guihint]#Azure Agent Info# service monitors the number of remaining queries and warns you in advance. By default, for the remaining queries the warning threshold is 50%, and the critical threshold is at 25%.
