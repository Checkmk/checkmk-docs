
// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= Authentication with SAML
:revdate: draft
:title: Authentication with SAML
:description: {CMK} can be incooperated in single-sign-on solutions. Read here how to set up authentication with SAML.


{related-start}
xref:ldap#[Benutzerverwaltung mit LDAP/Active Directory]
xref:cce#[Die {CMK} Cloud Edition]
{related-end}

[#intro]
== Introduction

In this article you will learn how to set up a login using _Secure Assertion Markup Language_ (SAML).
The implementation in {CMK} runs at the Apache level via link:https://github.com/latchset/mod_auth_mellon[mod_auth_mellon^], which takes on the role of a Service Provider (SP) in the SAML design.

This guide describes in detail the procedure for using Active Directory Federation Services (AD FS) as the Identity Provider (IDP).
In further sections, you will receive instructions on how to configure other IDPs, such as Azure AD and Micro Focus NetIQ Access Manager.

*Note:* This feature is not supported by SUSE Linux Enterprise Server (SUSE) versions 12 SP3, 12 SP4 and 15 due to missing dependencies (SLES 15 SP1 and later allow the connection).

*Caution:* The whole topic of transport encryption (TLS/SSL) is only included in the examples here in a simple implementation for demonstration purposes.
In production environments with your own CA and diligent certificate handling, there will be corresponding deviations that depend on your own infrastructure.

////
This is the beginning of the new text:
Introduction must be replaced afterwards

== Einleitung

In diesem Artikel erfahren Sie, wie Sie eine Anmeldung via _Secure Assertion Markup Language_ (SAML) einrichten.

SAML ist eine standardisierte Methode, externen Anwendungen und Diensten mitzuteilen, dass ein Benutzer derjenige ist, der er zu sein behauptet.
Durch SAML wird Single-Sign-On-Technologie (SSO) möglich, denn man kann damit einen Benutzer einmal authentifizieren und diese Authentifizierung dann an mehrere Anwendungen übermitteln.
Mit Hilfe der Verbindung und Kommunikation zwischen sogenanntem „Service Provider“ (SP) und sogenanntem „Identity Provider“ (IdP) wird es somit den Mitarbeitern ermöglicht, mit nur einer einzigen Anmeldung auf verschiedene Webanwendungen zuzugreifen.

{CMK} übernimmt im SAML-Design die Rolle des Service Providers (SP).

In den {CEE} können Sie die SAML-Einstellungen direkt in {CMK} vornehmen.
Als Identity Provider (IdP) fungiert beispielsweise, wie xref:saml_cee[im nächsten Abschnitt] beschrieben, Azure AD.

Da in der {CRE} keine SAML-Einstellungen in {CMK} unterstützt werden, muss hier ein anderer Weg eingeschlagen werden.
So beschreiben wir im Abschnitt xref:saml_re[SAML in der {RE} einrichten] exemplarisch die Konfiguration mit mod_auth_mellon und den Active Directory Federation Services (ADFS).

*Achtung:* Die ganze Thematik Transportverschlüsselung (TLS/SSL) wird in den Beispielen nur in einer simplen, beispielhaften Umsetzung aufgenommen.
In Produktivumgebungen mit link:https://checkmk.com/de/blog/how-become-your-own-certificate-authority[eigener CA^] und sorgfältiger Zertifikatsbehandlung werden sich entsprechende Abweichungen ergeben, die von Ihrer eigenen Infrastruktur abhängen.


[#use_saml]
== SAML in {CMK} nutzen

Sobald Sie alle Punkte der Einrichtung durchlaufen haben, kann das SAML-Login vom Nutzer in {CMK} verwendet werden.

image::saml_login.png[alt="{CMK} Login mit SAML-Button.", width=55%]

Jeder durch SAML berechtigte Nutzer wird automatisch in {CMK} angelegt, sobald er sich das erste Mal dort anmeldet.
Vorausgesetzt, es gibt nicht bereits einen Nutzer mit der gleichen ID.
Sollte bereits ein Nutzer mit gleicher ID vorhanden sein, so wird die aktuelle Erstellung des Nutzers abgelehnt.

Die Nutzerdaten werden bei jeder {CMK}-Anmeldung des Nutzers synchronisiert.

Damit SAML funktioniert, müssen mehrere Voraussetzungen erfüllt sein:

* Die xref:omd_https#[Weboberfläche muss mit HTTPS abgesichert] sein. HTTP-Adressen werden aus Sicherheitsgründen nicht akzeptiert.

* {CMK}s SAML-Endpunkte für ID/Metadaten und Antworten (Assertion Consumer Service) müssen beim IdP registriert worden sein. Wie dies geschehen kann, zeigen wir weiter unten.

* Nachrichten, die der IdP an {CMK} richtet -- Antworten auf Authentifizierungsanfragen und Attributangaben -- müssen mit einem der xref:supported_algorithms[unterstützten Algorithmen] signiert sein.


[#supported_algorithms]
=== Unterstützte Algorithmen

Für die Kommunikation mit dem IdP akzeptiert {CMK} die folgenden Algorithmen:

* RSA-SHA256
* RSA-SHA384
* RSA-SHA512
* ECDSA-SHA256
* ECDSA-SHA384
* ECDSA-SHA512

{CMK} selber nutzt RSA-SHA512 für die Signierung seiner Anfragen.

Sollte der IdP für seine Antwort keinen der genannten Algorithmen verwenden, so wird seine Antwort von {CMK} abgewiesen.


[#saml_cee]
== SAML in den {EE} einrichten

Um SAML in den {CEE} nutzen zu können, muss erst der IdP, in unserem Beispiel ist dies Azure AD, eingerichtet werden.
Danach wird der SP, also {CMK}, mit den benötigten Informationen versorgt.

[#access_azure]
=== Anmeldung in Azure AD

==== {CMK}-SAML-Service in Azure AD registrieren

Als nächstes wird der {CMK}-SAML-Service bei Azure AD registriert. Rufen Sie hierfür [.guihint]#Enterprise applications > New applications > Create your own application# auf.

image::saml_azure_own_application.png[alt="Erstellung einer eigenen Applikation in Azure AD."]

Vergeben Sie einen beliebigen Namen, z.B. „checkmk-saml“.
_Hinweis:_ Wir empfehlen, die Applikation nicht „checkmk“ zu nennen, um Verwechslungen mit dem {CMK}-Agenten zu vermeiden.

Wählen Sie die Option [.guihint]#Integrate any other application you don't find in the gallery (Non-gallery)# und klicken Sie danach auf den Button [.guihint]#Create.#

Auf der Azure-AD-Übersichtsseite haben Sie damit folgende Funktion angelegt: [.guihint]#Single sign-on > SAML > Basic SAML Configuration:#

image::saml_azure_sign_on.png[alt="Übersicht der Applikationsdaten in Azure AD."]

Jetzt benötigt Azure noch zwei weitere Angaben:

* den [.guihint]#Identifier (Entity ID)# im Format `\https://myserver.com/mysite/check_mk/saml_metadata.py` und

* die [.guihint]#Reply URL (Assertion Consumer Service URL)# im Format `\https://myserver.com/mysite/check_mk/saml_acs.py?acs`.

Alle anderen Optionen lassen Sie unangetastet auf dem Default-Wert bzw. leer. Insbesondere der [.guihint]#Relay State# in der [.guihint]#Basic SAML Configuration# muss unverändert bleiben, da sonst SAML nicht funktioniert.

Rufen Sie nun [.guihint]#Edit > Signing Option > Sign SAML response and assertion# auf, um Azure AD für die Antworten und Verifizierungen zu konfigurieren:

image::saml_signing_certificate.png[alt="SAML Zugangsdaten in Azure AD."]


[#url_from_azure]
==== SAML-Informationen aus Azure AD erhalten

Als nächstes suchen Sie jetzt in Azure AD die SAML-Informationen, die Sie für {CMK} brauchen.

Und zwar in der Ansicht [.guihint]#Enterprise applications | All applications > Browse Azure AD Gallery > checkmk-saml | SAML-based Sign-On# (siehe oben):

* Im Kasten [.guihint]#SAML Certificates# finden Sie die [.guihint]#App Federation Metadata Url.# Diese benötigen Sie im nächsten Abschnitt für die Einrichtung von SAML in {CMK} [.guihint]#(Identity provider metadata)#.

* Über den Kasten [.guihint]#Attributes & Claims# gelangen Sie zu einer Ansicht der Nutzer-Attribute für {CMK}, z.B. E-Mail-Adresse, Vor- und Nachname des Nutzers:

image::saml_attributes_claims.png[alt="Ansicht der Nutzerattribute in Azure AD."]


[#configure_saml]
=== SAML in der {CMK}-Weboberfläche aktivieren

Mit den zuvor ermittelten Informationen richten Sie die SAML-Verbindung auf der {CMK}-Seite ein. 

Falls nötig, fügen Sie vorab das TLS-Zertifikat Ihres IdPs in {CMK} zu den vertrauenswürdigen Zertifikaten hinzu, indem Sie es unter [.guihint]#Setup > Global settings > Trusted certificate authorities for SSL# eintragen.

Öffnen Sie nun die Einstellungen unter [.guihint]#Setup > Users > SAML Authentication.# Nutzen Sie dort [.guihint]#Add connection,# um die Konfiguration einer neuen Verbindung zu beginnen:

image::saml_saml_authentication.png[alt="Die SAML Authentication Regel in {CMK}."]

Vergeben Sie für die neue Verbindung eine [.guihint]#Connection ID# und einen [.guihint]#Namen#.
Damit erleichtern Sie sich später die Identifikation der Einstellungen.
Der [.guihint]#Name# wird hinterher für die xref:intro[Benennung des Anmelde-Buttons] genutzt.

Als nächstes legen Sie im Kasten [.guihint]#Security# fest, ob Sie die Zugriffsverbindungen mit {CMK}- oder mit eigenen Zertifikaten absichern wollen:

image::saml_security.png[alt="Auswahl des Sicherheitszertifikats für SAML."]

Nutzen Sie eigene Zertifikate, so müssen Sie den [.guihint]#Private key# sowie das [.guihint]#Certificate# angeben.
Eigene Zertifikate werden im Ordner `omd/sites/mysite/etc/ssl/saml2/custom` abgelegt.

Danach tragen Sie im Kasten [.guihint]#Connection# als [.guihint]#Identity provider metadata# die URL (z.B. App Federation Metadata Url) ein, die Sie im xref:url_from_azure[vorherigen Abschnitt] herausgesucht haben:

image::saml_connection.png[alt="Eingabe der Verbindungsdaten."]

Geben Sie für die zwingend benötigte [.guihint]#{CMK} server URL# die Adresse ein, über die Sie -- nicht Azure -- normalerweise auf {CMK} zugreifen, z.B. `\https://myserver.com/mysite`.

Nun benötigen Sie im Kasten [.guihint]#Users# noch die Angaben zum Nutzer:

image::saml_users.png[alt="Eingabe der Nutzerinformationen."]

Auch diese Angaben müssen Sie, wie im xref:url_from_azure[vorherigen Abschnitt] beschrieben, heraussuchen.
Wichtig ist hierbei, dass [.guihint]#User ID attribute# unbedingt eindeutig sein muss, z.B. die User-ID oder E-Mail-Adresse. {CMK} benötigt hier für jede Angabe den kompletten [.guihint]#claim name# aus Azure AD, also die mit http beginnende Adresse. Beispielsweise für die User-ID in obigem Beispiel `\http://schemas.xmlsoap.org/ws/2005/05/identity/claims/userID`.


[#saml_re]
== SAML in der {RE} einrichten

Nutzen Sie nicht die Konfiguration der SAML-Anbindung über die {CMK}-Oberfläche, so verwenden Sie stattdessen das Apache-Modul link:https://github.com/Uninett/mod_auth_mellon[mod_auth_mellon.^]
Dieses sorgt als Service Provider via SAML für die Authentifizierung.

Die folgenden Abschnitte beschreiben lediglich die Konfiguration von Mellon/Apache für unterschiedliche, bereits laufende IdPs, exemplarisch anhand von Active Directory Federation Services (AD-FS).
Die Anbindung in {CMK} selbst beschränkt sich auf den letzten Schritt aus der AD-FS-Anleitung.

End of first required translation
////


=== Logging in with Active Directory Federation Services

////
Second part for translation

*Hinweis:* Dieses Feature wird von den SUSE Linux Enterprise Server (SLES) Versionen 12 SP3, 12 SP4 und 15 aufgrund fehlender Abhängigkeiten nicht unterstützt (ab SLES 15 SP1 ist die Anbindung möglich).

End of second translation
////

==== Prerequisites

Logging on to {CMK} using Active Directory is basically relatively simple:
AD Federation Service (FS) serves as _Identity Provider_ (IDP), the Apache module link:https://github.com/Uninett/mod_auth_mellon[mod_auth_mellon^] provides authentication as a Service Provider via _Security Assertion Markup Language_ (SAML).
Prerequisites for this tutorial are accordingly:

* Functioning LDAP-AD integration
* Working AD FS as IDP
* {CMK} server with SSL

The setup is accomplished in three steps:

. Configuration of Apache (one result: XML file with metadata).
. Configuring AD FS: setting up Relying Party Trust with Mellon metadata.
. Enabling the login to {CMK} itself.


==== Configuration of Apache

Additional dependencies may still need to be installed, under Debian/Ubuntu for example:

[{shell}]
----
{c-root} apt-get update
{c-root} apt-get install wget libxmlsec1-openssl
----

*Note:* In the {CMK} appliance, libxmlsec1-openssl is already installed.

This is, of course, about configuring the site's own Apache server, so log in there first:

[{shell}]
----
{c-root} omd su mysite
----

Now create a directory for mod_auth_mellon and switch to it:

[{shell}]
----
{c-omd} mkdir etc/apache/mellon
{c-omd} cd etc/apache/mellon
----

Now make `mellon_create_metadata` executable and run it specifying your server as well as your site with the _mellon_ suffix:

[{shell-raw}]
----
OMD[mysite]:~/etc/apache/mellon$ chmod +x ~/bin/mellon_create_metadata
OMD[mysite]:~/etc/apache/mellon$ mellon_create_metadata https://myserver "https://myserver/mysite/mellon"
----

This module generates three files: Certificate (`.cert`), key (`.key`) and static metadata (`.xml`).
The `.xml` file is not required and can be deleted:

[{shell}]
----
OMD[mysite]:~/etc/apache/mellon$ rm *.xml
----

Rename the key and certificate files for simplicity:

[{shell}]
----
OMD[mysite]:~/etc/apache/mellon$ mv *.key mellon.key
OMD[mysite]:~/etc/apache/mellon$ mv *.cert mellon.cert
----

Now get the required metadata directly from your AD-FS server (here _myadfs_) and save it as `idp-metadata.xml`:

[{shell-raw}]
----
OMD[mysite]:~/etc/apache/mellon$ wget --no-check-certificate -O ./idp-metadata.xml https://myadfs/FederationMetadata/2007-06/FederationMetadata.xml 
----

Now you need the public certificate for the AD-FS server, which is stored in the `idp-public-key.pem` file:

[{shell}]
----
OMD[mysite]:~/etc/apache/mellon$ echo -n | openssl s_client -connect myadfs:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | openssl x509 -pubkey -noout > idp-public-key.pem
----

Just in case you are wondering about the `echo -n`: This is used to terminate the following SSL session.

*Note:* The certificate should, or even _must_ be uploaded to the trust store in case, for example, the IDP service checks the certificate chain.
For more information on this topic, see the xref:omd_https#[HTTPS article].

As a last step, replace the authentication configuration file `~/etc/apache/conf.d/auth.conf` with the following variant -- specifying your {CMK} server (here `myserver`) and site (here `mysite`), of course:

.~/etc/apache/conf.d/auth.conf
[{file}]
----
# Set this to the Name of your {CMK} site, e.g.
#Define SITE
Define SITE mysite

# ServerName from listen-ports.conf needs to be overwritten here
# and being set to the URL of the real server. auth_mellon uses this
# to generate the needed URLs in the metadata
ServerName https://myserver

# Load the module.
<IfModule !mod_auth_mellon.c>

	LoadModule auth_mellon_module /omd/sites/${SITE}/lib/apache/modules/mod_auth_mellon.so

</IfModule>

# Only enable this for debugging purposes
#MellonDiagnosticsFile /opt/omd/sites/${SITE}/tmp/mellon_diagnostics.txt
#MellonDiagnosticsEnable On

<Location /${SITE}>

	# Use SAML auth only in case there is no {CMK} authentication
	# cookie provided by the user and whitelist also some other required URLs
	<If "! %{HTTP_COOKIE} =~ /^auth_${SITE}/ && \
		! %{REQUEST_URI} = '/${SITE}/check_mk/register_agent.py' && \
		! %{REQUEST_URI} = '/${SITE}/check_mk/deploy_agent.py' && \
		! %{REQUEST_URI} = '/${SITE}/check_mk/run_cron.py' && \
		! %{REQUEST_URI} = '/${SITE}/check_mk/restapi.py' && \
		! %{REQUEST_URI} = '/${SITE}/check_mk/automation.py' && \
		! %{REQUEST_URI} -strmatch '/${SITE}/check_mk/api/*' && \
		! %{REQUEST_URI} = '/${SITE}check_mk/ajax_graph_images.py' && \
		! %{QUERY_STRING} =~ /(_secret=|auth_|register_agent)/ && \
		! %{REQUEST_URI} =~ m#^/${SITE}/(omd/|check_mk/((images|themes)/.*\.(png|svg)|login\.py|.*\.(css|js)))# ">
		
		MellonIdPMetadataFile /opt/omd/sites/${SITE}/etc/apache/mellon/idp-metadata.xml
		MellonIdPPublicKeyFile /opt/omd/sites/${SITE}/etc/apache/mellon/idp-public-key.pem
		MellonSPCertFile /opt/omd/sites/${SITE}/etc/apache/mellon/mellon.cert
		MellonSPPrivateKeyFile /opt/omd/sites/${SITE}/etc/apache/mellon/mellon.key
		MellonEndpointPath "/${SITE}/mellon"
		MellonDefaultLoginPath "/${SITE}/check_mk/"
		
		Order allow,deny
		Allow from all

		MellonSecureCookie On
		MellonCookieSameSite None

		AuthType Mellon
		AuthName "{CMK} SAML Login"
		MellonEnable auth
		Require valid-user
		
		# Get Username
		# ADFS sends username as DOMAIN\username pair.
		# {CMK} just wants the username.
		RewriteEngine on
		RequestHeader set X-Remote-User "expr=%{REMOTE_USER}"
		RequestHeader edit X-Remote-User "^.*\\\(.*)$" "$1"
		
		# When SAML auth fails, show the login page to the user. This should only happen,
		# if e.g. the mellon cookie is lost/rejected or if the IDP is misconfigured.
		# A failed login at the IDP will not return you here at all.
		
    ErrorDocument 401 '<html> \
      <head> \
        <meta http-equiv="refresh" content="1; URL=/${SITE}/check_mk/login.py"> \
      </head> \
      <body> \
        SAML authentication failed, redirecting to login page. \
        <a href="/${SITE}/check_mk/login.py">Click here</a>. \
      </body> \
    </html>'
	
	</If>
	
	# This header is also needed after authentication (outside of the If clause)
	RequestHeader set X-Remote-User "expr=%{REMOTE_USER}"
	RequestHeader edit X-Remote-User "^.*\\\(.*)$" "$1"
	
</Location>
----

Then restart Apache:

[{shell}]
----
OMD[mysite]:~/etc/apache/mellon$ omd restart apache
----

Last but not least, you now download the dynamically created Mellon metadata as an XML file so that you can import it into AD Management right away:

[{shell-raw}]
----
OMD[mysite]:~/etc/apache/mellon$ wget https://myserver/mysite/mellon/metadata -o metadata.xml
----


==== Configuring Active Directory

To create a Relying Party Trust in AD FS, do the following:

Start the AD FS interface:

[.border]
image::saml_adfs_01.png[]

Click [.guihint]#Add Relying Party Trust#:

[.border]
image::saml_adfs_02.png[]

Leave the option set to [.guihint]#Claims aware# and continue with the Start button:

[.border]
image::saml_adfs_03.png[]

Now select [.guihint]#Import data on the relying party from a file# and specify the XML file you just downloaded:

[.border]
image::saml_adfs_04.png[]

You can safely ignore the [.guihint]#AD FS Management# warning:

[.border]
image::saml_adfs_05.png[]

Under [.guihint]#Specify Display Name# now enter `{CMK}` as name:

[.border]
image::saml_adfs_06.png[]

When assigning permissions, *for testing purposes* you can first select for [.guihint]#Choose Access Control Policy# the value [.guihint]#Permit everyone#; you should later change this to [.guihint]#Permit specific group#.

[.border]
image::saml_adfs_07.png[]

Confirm the summary under [.guihint]#Ready to Add Trust:#

[.border]
image::saml_adfs_08.png[]

Finally, confirm the [.guihint]#Finish# dialog and keep the check mark at [.guihint]#Configure claims issuance policy for this application:#

[.border]
image::saml_adfs_09.png[]

Select the Relying Party Trust you just created and then start the editor with [.guihint]#Edit Claim Issuance Policy... :#

[.border]
image::saml_adfs_10.png[]

Add a new rule in the following dialog via [.guihint]#Add Rule...#:

[.border]
image::saml_adfs_11.png[]

In the first step [.guihint]#Select Rule Template# select [.guihint]#Transform to Incoming Claim# and confirm:

[.border]
image::saml_adfs_12.png[]

In the second step [.guihint]#Configure Rule# set the following values:

* [.guihint]#Incoming claim type#: `Windows account name`
* [.guihint]#Outgoing claim type#: `Name ID`
* [.guihint]#Outgoing name ID format#: `Transient Identifier`

[.border]
image::saml_adfs_13.png[]

This also completes the AD-FS configuration.
FS can now derive authentication for {CMK} from Windows authentication, which you instruct to authenticate users via HTTP requests in the next step.


==== Configure {CMK}

In {CMK} you now only have to activate under [.guihint]#Setup > General > Global Settings > User Interface > Authenticate users by incoming HTTP requests# at [.guihint]#Current settings# the [.guihint]#Activate HTTP header authentication# option.

image::saml_adfs_cmk.png[]


=== Additional information for other systems


==== Azure AD with mod_auth_mellon

When Azure AD acts as an IDP, there are some differences in the configuration procedure, for example, the user name can be set directly without being rewritten.

Prerequisites for the following sample configuration:

- Set UserPrincipalName in LDAP connection as identifier (more information at link:https://ldapwiki.com/wiki/UserPrincipalName#:~:text=UserPrincipalName%20is%20a%20SINGLE%2DVALUE,the%20Internet%20standard%20RFC%20822.&text=By%20convention%2C%20this%20should%20map%20to%20the%20user's%20email%20name[LDAPwiki.com^]).
- Custom Enterprise App in Azure AD with UserPrincipalName as 'name' attribute -- more details in the link:https://docs.microsoft.com/en-us/azure/active-directory/manage-apps/add-application-portal[Microsoft documentation^]).

Here is a sample configuration:

.~/etc/apache/conf.d/auth.conf
[{file}]
----
#Set this to the Name of your {CMK} site, e.g.
# Define SITE mysite
Define SITE mysite

# ServerName from listen-ports.conf needs to be overwritten here
# and being set to the URL of the real server.
# auth_mellon uses this to generate the needed URLs in the metadata.
ServerName https://myserver

# Load the module.
<IfModule !mod_auth_mellon.c>

	LoadModule auth_mellon_module /omd/sites/${SITE}/lib/apache/modules/mod_auth_mellon.so

</IfModule>

# Only enable this for debugging purposes
# MellonDiagnosticsFile /opt/omd/sites/${SITE}/tmp/mellon_diagnostics.log
# MellonDiagnosticsEnable On

<Location /${SITE}>

	# Use SAML auth only in case there is no {CMK} authentication
	# cookie provided by the user and whitelist also some other required URLs.
   <If "! %{HTTP_COOKIE} =~ /^auth_${SITE}/ && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/register_agent.py' && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/restapi.py' && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/run_cron.py' && \
	! %{REQUEST_URI} = '/${SITE}/check_mk/automation.py' && \
        ! %{REQUEST_URI} -strmatch '/${SITE}/check_mk/api/*' && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/deploy_agent.py' && \
		! %{REQUEST_URI} = '/${SITE}check_mk/ajax_graph_images.py' && \
        ! %{QUERY_STRING} =~ /(_secret=|auth_|register_agent)/ && \
		! %{REQUEST_URI} =~ m#^/${SITE}/(omd/|check_mk/((images|themes)/.*\.(png|svg)|login\.py|.*\.(css|js)))# ">

        RequestHeader unset X-Remote-User
        MellonIdPMetadataFile /opt/omd/sites/${SITE}/etc/apache/mellon/idp-metadata.xml
        # Azure-AD-specific: Not needed because in metadata:
        #MellonIdPPublicKeyFile /opt/omd/sites/${SITE}/etc/apache/mellon/idp-public-key.pem
        MellonSPCertFile /opt/omd/sites/${SITE}/etc/apache/mellon/mellon.cert
        MellonSPPrivateKeyFile /opt/omd/sites/${SITE}/etc/apache/mellon/mellon.key
        MellonEndpointPath "/${SITE}/mellon"
        MellonDefaultLoginPath "/${SITE}/check_mk/"

		Order allow,deny
		Allow from all
				       
		MellonSecureCookie On
		MellonCookieSameSite None
        
		AuthType Mellon
		MellonEnable auth
		require valid-user

        # Azure-AD-specific:
        # Get Username
        # If your assertion offers the username for {CMK} in an attribute you can set it directly as the remote user (REMOTE_USER):
        MellonUser "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"
        RequestHeader set X-Remote-User "%{MELLON_http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name}e" env=MELLON_http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name
		
        # When SAML auth fails, show the login page to the user. This should only happen, if e.g. the mellon cookie is lost/rejected or if the IDP is misconfigured.
        # A failed login at the IDP will not return you here at all.
        ErrorDocument 401 '<html> \
          <head> \
            <meta http-equiv="refresh" content="1; URL=/${SITE}/check_mk/login.py"> \
          </head> \
          <body> \
            SAML authentication failed, redirecting to login page. \
            <a href="/${SITE}/check_mk/login.py">Click here</a>. \
          </body> \
        </html>'
		
	</If>
	
	# Azure-AD-specific:
	# This header is also needed after authentication (outside of the If clause)
	RequestHeader set X-Remote-User "%{MELLON_http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name}e" env=MELLON_http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name
	
</Location>
----


==== NetIQ Access Manager

When NetIQ Access Manager acts as an IDP, there are some differences in the configuration procedure, for example, the user name can be set directly without being rewritten.

Here is an example configuration:

.~/etc/apache/conf.d/auth.conf
[{file}]
----

# Set this to the Name of your {CMK} site, e.g.# Define SITE mysite
# Define SITE mysite
Define SITE mysite

# ServerName from listen-ports.conf needs to be overwritten here
# and being set to the URL of the real server. auth_mellon uses this to generate the needed URLs in the metadata.

ServerName https://myserver.mydomain.tld

# Load the module.
<IfModule !mod_auth_mellon.c>

	LoadModule auth_mellon_module /omd/sites/mysite/lib/apache/modules/mod_auth_mellon.so

</IfModule>

# Only enable this for debugging purposes
#MellonDiagnosticsFile /opt/omd/sites/${SITE}/tmp/mellon_diagnostics.log
#MellonDiagnosticsEnable On

<Location /${SITE}>

	# Use SAML auth only in case there is no {CMK} authentication
	# Cookie provided by the user and whitelist also some other required URLs.

    <If "! %{HTTP_COOKIE} =~ /^auth_${SITE}/ && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/register_agent.py' && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/run_cron.py' && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/deploy_agent.py' && \
        ! %{REQUEST_URI} = '/${SITE}/check_mk/restapi.py' && \
        ! %{REQUEST_URI} -strmatch '/${SITE}/check_mk/api/*' && \
		! %{REQUEST_URI} = '/${SITE}check_mk/ajax_graph_images.py' && \
        ! %{QUERY_STRING} =~ /(_secret=|auth_|register_agent)/ && \
		! %{REQUEST_URI} =~ m#^/${SITE}/(omd/|check_mk/((images|themes)/.*\.(png|svg)|login\.py|.*\.(css|js)))# ">

        MellonIdPMetadataFile /opt/omd/sites/${SITE}/etc/apache/mellon/idp-metadata.xml
        # NetIQ-specific: Not needed because in metadata:
        #MellonIdPPublicKeyFile /opt/omd/sites/${SITE}/etc/apache/mellon/idp-public-key.pem
        MellonSPCertFile /opt/omd/sites/${SITE}/etc/apache/mellon/mellon.cert
        MellonSPPrivateKeyFile /opt/omd/sites/${SITE}/etc/apache/mellon/mellon.key
        MellonEndpointPath "/${SITE}/mellon"
        MellonDefaultLoginPath "/${SITE}/check_mk/"

		Order allow,deny
		Allow from all
		
		MellonSecureCookie On
		MellonCookieSameSite None

		AuthType Mellon
		MellonEnable auth
		require valid-user


        # NetIQ-specific:
        # Even though it is set as 'optional' in https://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf
        # a NetIQ Access Manager requires it to be set.
        # Specified in oasis link above - line 396
        MellonOrganizationName "<countrycode>" "<your organisation name>"
        # Specified in oasis link above - line 443 / 452
        MellonOrganizationURL  "<countrycode>" "<your organisation url>"
        # Specified in oasis link above - line 454
        MellonOrganizationDisplayName "<countrycode>" "<your organisation display name>"

        # NetIQ-specific:
        # If your assertion offers the username for {CMK} in an attribute you can set it directly as the remote user (REMOTE_USER)
        MellonUser "myusername"

        # NetIQ-specific:
        # If the assertion does contain the username (and was set to MellonUser) then you can set the header directly.
        RequestHeader set X-Remote-User "expr=%{REMOTE_USER}"

    # When SAML auth fails, show the login page to the user. This should only happen,
    # if e.g. the mellon cookie is lost/rejected or if the IDP is misconfigured.
    # A failed login at the IDP will not return you here at all.
        ErrorDocument 401 '<html> \
          <head> \
            <meta http-equiv="refresh" content="1; URL=/${SITE}/check_mk/login.py"> \
          </head> \
          <body> \
            SAML authentication failed, redirecting to login page. \
            <a href="/${SITE}/check_mk/login.py">Click here</a>. \
          </body> \
        </html>'

# This header is also needed after authentication (outside of the If clause)
RequestHeader set X-Remote-User "expr=%{REMOTE_USER}"

</Location>
----
