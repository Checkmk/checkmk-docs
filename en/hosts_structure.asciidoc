// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= Host structuring
:revdate: draft
:title: Host structuring
:description: Scalability is part of the basic {CMK} design. You can learn about the options for structuring hosts here.

{related-start}
xref:hosts_setup#[Host administration]
{related-end}


[#intro]
== Introduction

_This article is currently a draft version._
_At present, it essentially contains only the chapters on parents and host groups that were previously included in the xref:hosts_setup#[Host administration] article._
_When this article has been completed, it should provide an overview of the various structuring elements in {CMK} and explain their similarities and differences._
_You should then have all the information at hand to set up the structure that is appropriate for your operational environment._


// This block is new
// start translation
////
[#intro]
== Einleitung

{CMK} bietet so einige Möglichkeiten, um Hosts zu organisieren: Ordner, Host-Merkmale, Labels, Parents, Host-Gruppen.
Manchmal ist die Entscheidung aber nicht so einfach, welches Werkzeug für das konkrete Problem am geeignetsten ist und
einfach scheinende Fragen stellen sich als komplizierter heraus, als gedacht:
Warum gibt es eigentlich Host-Merkmale _und_ Labels?
Welche Eigenschaften können Ordnern zugewiesen werden und werden dann in der Ordnerstruktur vererbt?
Wo finde ich in einer Regel die Bedingung für Host-Gruppen?
(Spoiler-Alarm: Die gibt es nicht.)

Dieser Artikel gibt eine Übersicht über die verschiedenen Strukturierungselemente in {CMK} und erläutert ihre Gemeinsamkeiten und Unterschiede.
Damit haben Sie dann alle Informationen zur Hand, um die für Ihre Umgebung passende Struktur aufzusetzen.
Wir wissen, dass momentan noch Aspekte fehlen, die für dieses Thema wichtig sind.
Wir arbeiten daher immer wieder daran, diese Lücken nach und nach zu stopfen.

Besonders interessant sind die Strukturierungselemente für die xref:glossar#configuration_environment[Konfigurationsumgebung], die in Regeln als Bedingungen ausgewählt werden können, also Ordner, Host-Merkmale und Labels.
Damit können Sie regelbasiert auf Ihre Struktur zugreifen und zum Beispiel (neue) Hosts automatisch in die für sie vorgesehenen Ordner sortieren.
Zusätzlich erfahren Sie für jedes der vorgestellten Strukturierungselemente, wie Sie es in der xref:glossar#monitoring_environment[Monitoring-Umgebung] nutzen können.

Am xref:summary[Ende des Artikel] werden schließlich die wichtigen Eigenschaften der Strukturierungselemente in einer Tabelle zusammengefasst.
////
// end translation


[#folder]
== Folders and inheritances

[#folder_structure]
=== Structuring with folders

Everyone who works with computers is familiar with files and folders.
In {CMK} this well-known principle has been adopted for the structuring of hosts, which are stored in folders.
Only the [.guihint]#Main# folder -- the folder tree's root -- is predefined.
Below (within) this main folder, you can create your own folder structure with as many subfolders as desired, visualized as a so-called host tree. Commonly used criteria for building the host tree are location, technology and organizational structure.
You can access the [.guihint]#Main# folder by selecting [.guihint]#Setup > Hosts > Hosts#. 

Via folders, attributes can be *inherited* by subfolders and the hosts they contain.
See the xref:hosts_setup#inheritance[Host administration] article for details on how inheritance works.
Inherited are the folder attributes, i.e. the folder properties displayed in the [.guihint]#Setup# on the [.guihint]#Folder properties# page such as monitoring agents and permissions -- but also other structuring elements such as host tags, labels, or parents.
Many of the folder properties can also be found in the host properties on the [.guihint]#Properties of host# page.
Inheritance is especially useful for attributes that are common to many hosts, such as whether the host should be monitored by {CMK} agent or by SNMP.
Another advantage with inheriting folder attributes is that you can prepare folders to hold any hosts that will be added in the future.
Just drop the new host into the appropriate folder and all predefined attributes will be automatically correct for the new host.

In order to take full advantage of inheritance, it has proven useful to first think about an organizational system and then fill this system with content.
Thus, you first create the structure of the folders and their hierarchy, and you then sort your hosts into the appropriate folders.

This is all the more important the larger the environment and the more numerous the hosts.
Once a folder structure has been set up, it can be later modified and folders can be renamed without any problems.
Care must be taken, however:
Moving a host to another folder may change its attributes  without you being aware of it -- i.e. the target folder may have different attributes from the source folder.

Only in rare scenarios can a folder structure alone represent the complexity of real systems however.
If you want (or need) to organize your hosts according to _many different criteria_, the host tags described in the xref:host_tags[next chapter] can additionally come in handy.


[#folder_monitoring]
=== The folder structure in monitoring

The tree structure generated by the folders is also visible in the xref:glossar#monitoring_environment[monitoring environment].


[#filter_bar]
[discrete]
=== The filter bar

Firstly, in the xref:glossar#view[view]'s filter bar, there is the [.guihint]#Folder# filter, which allows you to restrict the current view to the hosts below a specific folder.

As the following image shows, further filters are also available for other structuring elements such as host tags, labels and host groups.

.In the filter bar you have access to various structuring elements
image::hosts_filterbar.png[alt="Table view with filter bar and selected filters for structuring elements.",width=60%]


[#tree_of_folders]
[discrete]
=== Tree of folders

Secondly, in the xref:user_interface.html#sidebar[sidebar], the [.guihint]#Tree of folders# snap-in provides the same selection options as the xref:user_interface#monitor_menu[Monitor menu], but can additionally limit the display to one folder:

.The [.guihint]#Tree of folders# snap-in displays the folder structure at the very bottom
image::hosts_treeoffolders_snapin.png[alt="Tree of folders snap-in.",width=50%]


[#host_tags]
== Host tags

// This block is new
// start translation
////
Host-Merkmale (englisch: _host tags_) sind in diesem Handbuch im xref:intro_finetune#host_tags[Leitfaden für Einsteiger] und in einem xref:host_tags#[eigenen Artikel] ausführlich beschrieben.
Daher an dieser Stelle nur das Wichtigste in Kürze:

Ein Host-Merkmal ist ein Attribut, das einem Host zugewiesen wird.
Host-Merkmale sind in Gruppen organisiert, den sogenannten Host-Merkmalsgruppen (englisch: _host tag groups_). 
Mit der Erstellung einer Host-Merkmalsgruppe werden alle Merkmale dieser Gruppe vollständig definiert.
Die Merkmale einer Gruppe schließen sich gegenseitig aus, d.h. jeder Host erhält genau ein Merkmal aus der Gruppe.
Wenn Sie nichts anderes festgelegt haben, ist dies das erste Merkmal der Gruppe, das als Standardwert dient.

Verfeinerungen dieses generellen Konzepts sind die xref:host_tags#checkbox_tag[Checkbox-Merkmale] und die xref:host_tags#aux_tag[Hilfsmerkmale.]
Ein Checkbox-Merkmal ist eine spezielle Host-Merkmalsgruppe mit nur einem Element und dient der Ja-/Nein-Entscheidung der Art: „Auf diesem Host läuft Oracle.“
Mit Hilfsmerkmalen (_auxiliary tags_) können Sie verschiedene Merkmale einer Gruppe zusammenfassen, z. B. die Merkmale `Windows Server 2012 R2` und `Windows Server 2016` zum Hilfsmerkmal `Windows`.


[#host_tags_structure]
=== Mit Host-Merkmalen strukturieren

Host-Merkmale haben Eigenschaften, die Labels *und* Ordnern ähneln.

Ein Merkmal oder ein Label einem Host zuzuordnen ist im Ergebnis sehr ähnlich.
Das zugewiesene Kennzeichen können Sie in beiden Fällen in der Konfiguration nutzen, um Bedingungen in Regeln festzulegen.
Allerdings müssen Sie, bevor Sie ein Host-Merkmal vergeben können, die zugehörige Host-Merkmalsgruppe definieren -- sich also Gedanken um alle möglichen Ausprägungen eines solchen Merkmals machen.

Die _Abgeschlossenheit_ einer Host-Merkmalsgruppe erinnert daher an das Aufsetzen der xref:folder_structure[Ordnerstruktur.]
Genauso, wie ein Host nur in einem Ordner abgelegt werden kann, kann er auch nur ein Merkmal einer Host-Merkmalsgruppe tragen.
Anders herum: Ein Host ist immer einem Ordner zugeordnet und hat stets ein Merkmal einer Host-Merkmalsgruppe (wenn wir mal kurz die Checkbox-Merkmale außen vor lassen).
Daher eignen sich Host-Merkmale für Eigenschaften, die immer da sind (oder zumindest sein sollen) und in der Regel durch den {CMK}-Administrator für das gesamte zu überwachende System und für alle {CMK}-Benutzer vorgegeben werden.

Wie für die Ordnerstruktur gilt:
Für die Konfiguration großer Umgebungen ist es sehr hilfreich, von Beginn an eine wohlüberlegte Struktur der Host-Merkmale aufzusetzen.

Einem Host ordnen Sie Merkmale zu in den Host-Eigenschaften auf der Seite [.guihint]#Properties of host# -- beim Erstellen oder Bearbeiten eines Hosts.
Viele Attribute finden Sie sowohl in den Eigenschaften eines Hosts als auch in den Ordnereigenschaften wieder -- und genau das trifft auch auf die Host-Merkmale zu.
// TK: Ist das folgende so ok?
Das heißt, Host-Merkmale sind nicht nur für Hosts sondern auch für Ordner gültig.
Und damit werden auch Host-Merkmale über die Ordnerstruktur in {CMK} vererbt.
Um zu verhindern, dass es bei der Vererbung zu ungewollten Überraschungen kommt, sollten Sie bei der Festlegung der Host-Merkmalsgruppe auf den Standardwert achten.
In der Regel ist es sinnvoll, hier einen neutralen Wert festzulegen wie `None` oder `not applicable`.

Nachträgliche xref:host_tags#edit_delete_tag[Änderungen] einmal eingerichteter Host-Merkmale sind möglich, sollten aber vermieden werden -- sofern es sich um die Umbenennung der ID eines Merkmals handelt, da dies in den meisten Fällen manuelle Nacharbeit erfordert.
Änderungen, die lediglich die Anzeige betreffen oder nur neue Auswahlmöglichkeiten hinzufügen, sind dagegen unproblematisch und haben keine Auswirkung auf die bestehenden Hosts und Regeln.


[#host_tags_monitoring]
=== Die Host-Merkmale im Monitoring

Host-Merkmale sind nicht nur bei der Konfiguration, sondern auch im Monitoring nützlich.
Zum Beispiel gibt es in der Filterleiste von Tabellenansichten auch Filter für Host-Merkmale, wie es der Screenshot im Kapitel zu xref:filter_bar[Ordnern] zeigt.

Darüber hinaus bietet Ihnen in der Seitenleiste das xref:glossar#snapin[Snapin] [.guihint]#Virtual Host Tree# die Möglichkeit eine „virtuelle“ Hierarchie aus Host-Merkmalen abzubilden.
Im Artikel zu den xref:host_tags#tags_in_monitoring[Host-Merkmalen] erfahren Sie, wie das geht.
////
// end translation


[#labels]
== Labels

// This block is new
// start translation
////
Labels sind Attribute, die einem Host zugewiesen werden und damit -- genau wie Host-Merkmale -- Kennzeichen für einen Host.
Die ausführliche Einleitung des Artikels zu den xref:labels#[Labels] erklärt daher das Konzept der Labels im Vergleich und in Abgrenzung zu den Host-Merkmalen.
An dieser Stelle können wir uns auf das Wesentliche der Labels beschränken:

Labels sind einfache Schlüssel-Wert-Paare, wie z.B. `os:linux`, `os:windows` oder `foo:bar`, die nirgendwo vordefiniert sind.
Bei der Festlegung der Labels gibt es (fast) keine Einschränkungen -- bis auf die folgenden:
Schlüssel und Wert müssen durch Doppelpunkt getrennt sein.
Ein Host kann beliebig viele Labels haben, aber pro Schlüssel nur einen Wert.
Also kann ein Host, der das Label `foo:bar` hat, nicht gleichzeitig `foo:bar2` haben.

Übrigens können in {CMK} nicht nur Hosts sondern auch Services Labels tragen.
Allerdings gibt es bei den Service-Labels einige Besonderheiten zu beachten, die im Artikel zu den xref:labels.html#service_labels[Labels] beschrieben sind.


[#labels_structure]
=== Mit Labels strukturieren

Wenn die Label erstmal gesetzt sind, dann haben Sie mit Ihnen die gleichen Möglichkeiten, die Ihnen auch Ordner und Host-Merkmale bieten:
Während der Konfiguration können Sie die Bedingungen der Regeln in Abhängigkeit der Labels definieren.

Während bei den Host-Merkmalen bereits durch die Definition der Host-Merkmalsgruppe alle Hosts mit einem Host-Merkmal versorgt werden, läuft die Zuweisung bei Labels anders.
Labels können xref:labels#explicit[explizit], über xref:labels.html#rules[Regeln] und xref:labels.html#automatic[automatisch] gesetzt werden.
Die unterschiedlichen Wege, über die Hosts an ihre Labels kommen können, sollten Sie beachten, wenn es darum geht, wie Sie Labels für die Strukturierung Ihrer Hosts nutzen können.

Die explizite Zuweisung von Labels erfolgt in den Eigenschaften eines Hosts, im Kasten [.guihint]#Custom attributes:#
Schlüssel-Wert-Paar eingeben, Enter-Taste drücken: Fertig!
Auch in den Eigenschaften von Ordnern können Labels gesetzt werden, die dann über die Ordnerstruktur in {CMK} vererbt werden.

Wenn Sie für ein Label eigentlich keinen Wert brauchen, sondern nur wissen wollen, ob an dem Host ein bestimmtes Label hängt oder nicht, vergeben Sie z.B. einfach `yes` als Wert (`vm:yes`).
Falls Sie dieses Schema konsequent einhalten, haben Sie es später leichter, für solche Labels Bedingungen zu definieren.

Die explizite Zuweisung ist sehr einfach, hat aber ihre Tücken, denn die Gefahr von Inkonsistenzen durch Schreibfehler ist groß.
Da Labels frei vergeben werden können, kann {CMK} auch nicht überprüfen ob `foo:Bar`, `Foo:bar` oder `Fu:baa` das „richtige“ Label ist.
Sie sollten sich daher auch überlegen, wie Sie es mit der Groß-/Kleinschreibung halten.
Denn wenn Sie später Bedingungen über Labels definieren, dann muss die Schreibweise sowohl beim Schlüssel als auch beim Wert strikt beachtet werden.

Es liegt daher nahe, für die Strukturierung von Hosts auf die explizite Zuweisung zu verzichten und Labels regelbasiert oder automatisch erstellen zu lassen.

Wenn sich Host-Merkmale für globale Eigenschaften eignen, die immer da sind und in der Regel durch den {CMK}-Administrator für das gesamte zu überwachende System und für alle {CMK}-Benutzer vorgegeben werden, dann können einzelne {CMK}-Benutzer die spezifischen Anforderungen in ihrem Verantwortungsbereich mit Labels umsetzen.
Für eine überschaubare lokale Struktur können die Labels die Lücken füllen, die von der globalen Administration freigelassen wurden, und dabei ihre Vorteile ausspielen:
Sie sind schnell und einfach erstellt -- und auch wieder gelöscht.


[#labels_monitoring]
=== Die Labels im Monitoring

Die vollständige Übersicht aller Labels eines Hosts erhalten Sie in der Monitoring-Umgebung, in der Statusansicht eines Hosts.
In der Filterleiste von Tabellenansichten haben Sie Zugriff auf alle Host-Labels -- und können diese sogar mit den booleschen Operatoren `Not`, `And` und `Or` zum Filtern kombinieren.
Beide Wege sind im Artikel zu den xref:labels#views[Labels] beschrieben.
////
// end translation


[#parents]
== Parents


[#parents_structure]
=== Structuring using parents

You have already learned what parents are and how they work in the xref:monitoring_basics#parents[Basic principles of monitoring] article.


[#parents_create_manual]
=== Creating parents manually

To define a parent for a single host, do the following:
Select [.guihint]#Setup > Hosts > Hosts# and click the desired host to display its properties.
In the [.guihint]#Basic settings# box, enter the parent by its name or IP address.
As soon as a parent has been specified, a further input field for an additional parent appears:

.Multiple parents can also be specified during manual assignment
image::hosts_properties_parents.png[alt="Dialog with the properties of a host for setting the parents."]

*Important*: Specify only direct parent hosts.

In a similar way, parents can also be specified in the properties of folders and thus inherited by the hosts the folders contain, as described in the earlier chapter on xref:folder[Folders and inheritances].


[#parents_scan]
=== Specifying parents using a scan

When setting up a new monitoring system, and from the start creating a well organized structure with folders and parents, you will probably be fine with parent inheritance via folders.
You can also set up parents automatically via the [.guihint]#Parent scan# however.

Using the IP protocol on the network layer of the OSI model (layer 3), using `traceroute`, the scan searches for the final gateway upstream of a host.
If such a gateway is found and its IP address belongs to one of your monitored hosts, it is set as the parent.
If `traceroute` does not get any information from the _hops_ preceding the targeted host, the latest successful hop is used.

However, if no gateway is found among the monitored hosts, {CMK} creates an artificial 'ping-only host' by default in the [.guihint]#Parents# folder which is created at the same time.

However, this default setting can also produce undesirable results. As an example, let's take a typical, small network with the address range _192.168.178.0/24._
If a host with an address from a different address range -- which cannot be pinged -- is now added to the monitoring, the scan will try the route via the router,  and will find only the network provider's node there.
And so, for example, a telecom server from the WAN area could then be set as the parent for this host.
To avoid this you can deactivate the corresponding option before the scan.

If you want to scan a folder with new hosts for parents, do the following:
First open the desired folder and select [.guihint]#Hosts > Detect network parent hosts# from the menu to open the scan configuration.
By the way, instead of scanning an entire folder, you can also just scan a subset of hosts by selecting them in advance in the first column of the list.

.The scan provides numerous options for configuration
image::hosts_parent_scan.png[alt="Dialog with scan configuration for the parents."]

To completely rescan all hosts in all subfolders, regardless of any manually set parents, select the [.guihint]#Include all subfolders# and [.guihint]#Scan all hosts# options.
In the [.guihint]#Performance# section, you can tailor the scan duration, which can take quite a long time if you have many hosts.

Under [.guihint]#Creation of gateway hosts# you determine whether, how and under which alias newly found parent hosts are created.
Disable this function if you want to limit parents to monitored hosts.

Now click [.guihint]#Start#.
You can watch the output of the scan in real time while it is being performed.

You will then see the configured parents and, if applicable, a new [.guihint]#Parents# folder in [.guihint]#Main# (if you specified this before the scan).

.In the [.guihint]#Setup# the parents are displayed in a separate column
image::hosts_parents_list.png[alt="List of hosts with display of the parents."]

This completes the scan.


[#parents_monitoring]
=== Parents in monitoring

After a scan has been performed and the changes have been activated, the parent-child relationships are visualized as a topology map, which you can access via [.guihint]#Monitor > Overview > Parent / Child topology#:

.Display of the parent-child relationships in monitoring
image::hosts_parents_topology.png[alt="Network topology mapped from parent-child relationships.",width=55%]

*Tip:* If the results from the scan do not seem plausible in some places, a manual call to `traceroute` can sometimes be helpful for tracing the individual hops.


[#host_groups]
== Host groups


[#host_groups_using]
=== Working with host groups

Host groups allow you to collect a number of hosts together for display in a monitoring view.
For example, you can display all Linux servers, Windows servers, and certain application servers together by setting up a host group for each of these server types.

A host group is populated using a rule. 
In this rule's conditions, you can access folders, host tags, and labels, as usual.
Host groups themselves do *not* by default appear as selection criteria in rules because they are not used for configuration, rather they are used for views.


[#host_groups_create]
=== Creating host groups

You can find the host groups under [.guihint]#Setup > Hosts > Host groups#.

You create a new host group via the [.guihint]#Add group# button.
The creation is a simple process and is limited to the assignment of a unique name -- which cannot be changed later -- and an alias:

.With a name and an alias, the host group is now configured
image::hosts_hostgroups_properties.png[alt="Dialog with the properties of a host group."]


[#host_groups_include_hosts]
=== Adding hosts to host groups

To add hosts to host groups, use the [.guihint]#Assignment of hosts to host groups# xref:glossar#rule_set[rule set], which can be found at [.guihint]#Setup > Hosts > Host monitoring rules#.
Create a new rule.

First, in the [.guihint]#Assignment of hosts to host groups# box, select the host group to which hosts should be assigned, such as the `My Linux servers` group in the example:

.The already created host groups are presented for selection
image::hosts_hostgroups_rule_assignment.png[alt="Dialog for selecting the host group in a rule."]

Next, in the [.guihint]#Conditions# box, attend to the filter or _the filters_ to delimit the group -- since filters can be combined, of course.
You can filter hosts by folders, host tags, host labels, or specify specific hosts.
If, in the host group, you want to include hosts with two tags from the same host tag group, you must create two separate rules.
In general, group assignments are cumulative.
Hosts can be in multiple groups and groups can be populated by multiple rules.

In the following example, we use the host label `cmk/os_family:linux` automatically assigned by {CMK} to add the Linux servers to the host group:

.Folders, host tags, and host labels, among others, are provided for specifying the condition
image::hosts_hostgroups_rule_conditions.png[alt="Dialog for setting the conditions for assignment to the host group."]

Afterwards you will still need to activate the changes as usual.


[#host_groups_monitoring]
=== Host groups in monitoring


[discrete]
==== Overview of the host groups

In monitoring, you can conveniently check the result of your assignments in the [.guihint]#Setup#.
The existing host groups will be listed under [.guihint]#Monitor > Overview > Host groups#:

.Host groups in monitoring
image::hosts_hostgroups_view.png[alt="View of host groups."]

Clicking on a host group's name will take you to a complete view of the hosts in that group.

Away from this overview you can use host groups in various places,
such as for creating views and NagVis maps, and as filters in rules for notifications and alert handlers.


[discrete]
==== Views

The only important thing when creating xref:glossar#view[views] (via [.guihint]#Customize > Visualization > Views#) is to select a [.guihint]#Datasource# that uses host groups, e.g. [.guihint]#Host groups#.

In the [.guihint]#Monitor# menu you can find ready-made views, for example [.guihint]#Host groups#, which we have already shown in the previous section.


[discrete]
==== NagVis maps

You can access xref:nagvis#[NagVis maps] with the xref:user_interface#sidebar[sidebar]'s [.guihint]#NagVis maps# snap-in.
In a NagVis map you get as a result for example the summary for a host group via hover menu over a single icon:

.Go to the NagVis maps via the sidebar's [.guihint]#NagVis maps# snap-in
image::hosts_hostgroups_nagvis.png[alt="Display a host group in a NagVis map."]


[discrete]
==== Notifications and alert handlers

In the xref:glossar#rule_set[rule sets] for xref:glossar#notification[notifications] and xref:alert_handlers#[alert handlers], the host groups are available as filters under the [.guihint]#Conditions#:

.Selection of host groups in in a notification rule
image::hosts_hostgroups_notifications_rule.png[alt="Dialog for selecting host groups in a notification rule."]


// This block is new
// start translation
////
[#summary]
== Zusammenfassung

Zur Verbesserung der Übersichtlichkeit zeigt die folgende Tabelle wichtige Eigenschaften der in diesem Artikel vorgestellten Strukturierungselemente.

[cols="~,~,~,12,12,~",options="header"]
|===
|Strukturierungselement
|Erstellung
|Hinzufügen von Hosts
|Bedingung in Regeln
|Vererbung über Ordner
|Sichtbarkeit im Monitoring

|Ordner
|Manuell im Setup ([.guihint]#Setup > Hosts > Hosts#)
|Manuell im Setup ([.guihint]#Setup > Hosts > Hosts#)
|Ja
|-- 
|Snapin [.guihint]#Tree of folders#, Filter in Tabellenansichten

|Host-Merkmale
|Manuell im Setup ([.guihint]#Setup > Hosts > Tags#) durch Festlegung der Host-Merkmalsgruppe
|Automatisch durch Festlegung der Host-Merkmalsgruppe
|Ja
|Ja
|Snapin [.guihint]#Virtual Host Tree#, Filter in Tabellenansichten 

|Labels |Manuell/explizit im Setup ([.guihint]#Properties of host#), per Regel ([.guihint]#Host labels#) oder automatisch
|-- (Ein Label wird stets für einen Host erstellt.)
|Ja
|Ja
|Statusansicht eines Hosts ([.guihint]#Status of Host#), Filter in Tabellenansichten

|Parents |Manuell im Setup ([.guihint]#Properties of host#) oder automatisch per Scan in einem Ordner ([.guihint]#Hosts > Detect network parent hosts#)
|-- (Ein Parent wird stets für einen Host erstellt.)
|Nein
|Ja
|Topologie-Karte ([.guihint]#Monitor > Overview > Parent / Child topology#)

|Host-Gruppen
|Manuell im Setup ([.guihint]#Setup > Hosts > Host groups#)
|Per Regel ([.guihint]#Assignment of hosts to host groups#)
|Nein
|Nein
|Als eigene Ansicht ([.guihint]#Monitor > Overview > Host groups#), Filter in Tabellenansichten, auf NagVis-Karten, etc.
|===
////
// end translation
