// encoding: utf-8
include::global_attr.adoc[]
= Host and service parameters
:revdate: 2021-08-13
:title: Host and service parameters - Understanding and using rules in {CMK}
:description: Rules in {CMK} can define the default or the exception. This article describes the use of rules in detail, and how they are evaluated.

{related-start}
xref:wato#[Configuring {CMK}]
xref:hosts_setup#[Host administration]
xref:wato_services#[Understanding and configuring services]
{related-end}


== Introduction

In {CMK} you configure parameters for hosts and services by using _rules_.
This feature makes {CMK} very effective in complex environments,
and also brings a number of advantages to smaller installations.
In order to clarify the principle of rule-based configuration we will compare it to the classic method:

=== The classic approach

As an example, let’s take the configuration of the thresholds for {WARN} and {CRIT} in the
monitoring of file systems. With a data base oriented configuration, one would enter a
line for every file system into a table:

[cols=4]
|===
|Host |Filesystem |Warning |Critical

|myserver001 |/var |{nbsp}90% |{nbsp}95%
|myserver001 |/sapdata |{nbsp}90% |{nbsp}95%
|myserver001 |/var/log |{nbsp}90% |{nbsp}95%
|myserver002 |/var |{nbsp}85% |{nbsp}90%
|myserver002 |/opt |{nbsp}85% |{nbsp}90%
|myserver002 |/sapdata |{nbsp}85% |{nbsp}95%
|myserver002 |/var/trans |100% |100%
|===



This is relatively clear -- but only because the table in this example is short.
In practice there tend to be hundreds or thousands of file systems.
Tools like copy & paste, and bulk operations can simplify the work, but the basic problem remains --
how can you identify and implement a _concept_? What is the general rule?
How should thresholds for future hosts be preset?

=== Rules-based is better!

A rules-based configuration however *consists* of the concept!
We will replace the logic of the above table with a set of four rules.
If we assume that `myserver001` is a test system, and that in each case the _first relevant
rule_ applies to every file system, the result will be the same thresholds as in the table above:

. File systems with the mount point `/var/trans` have a 100/100% threshold.
. The `/sapdata` file system on `myserver002` has a 85/95% threshold.
. File systems on test systems have a 90/95% threshold.
. All (unspecified) file systems have a 85/90% threshold.

Granted, for only two hosts that doesn’t achieve much, but with only a few more hosts it can
quickly make quite a big difference. The advantages of the rules-based configuration are obvious:

* The concept is clearly recognisable and can be reliably implemented.
* You can change the concept at any time without needing to handle thousands of data sets.
* _Exceptions_ are always still possible, but are documented in the form of rules.
* The incorporation of new hosts is simple and less fault-prone.

In summary, then: less work -- more quality! For this reason, with {CMK} you will find an abundance of rules
for customising hosts and services -- such as thresholds, monitoring settings, responsibilities,
notifications, agent configuration and many more.


[#rule_set_types]
=== Types of rule sets

Within Setup {CMK} organises rules in _Rule sets_. Every rule set has the task of defining
a specific parameter for hosts or services.
{CMK} contains more than 700 rule sets! Here are some examples:

* [.guihint]#Host check command# -- defines how to determine whether hosts are {UP}.
* [.guihint]#Alternative display name for services# -- defines alternative names for services’ displays.
* [.guihint]#JVM memory levels# -- sets thresholds and other parameters for the monitoring of Javas-VMs’ memory usage.

Every rule set is responsible either for hosts or for services -- never for both.
If a parameter can be defined for hosts as well as services, there is a pair of applicable
rules -- e.g., [.guihint]#Normal check interval for host checks# and [.guihint]#Normal check interval for services checks#.

A few rule sets, strictly-speaking, don’t define parameters, rather they create services.
An example are the rules in the _Active checks_ category.
With these you can, e.g., set up an HTTP check for specific hosts.
These rules are classified as host rules -- due to the fact that if such a check exists on a host
it is deemed to be a host characteristic of the host.

Further, there are rule sets that control the xref:wato_services#[Service discovery].
With these you can, for example, define via [.guihint]#Windows service discovery# for which Windows-services
automatic checks should be created if they are found on a system.
These are also host rules.

The bulk of the rule sets determine parameters for specific check plug-ins.
An example is [.guihint]#Network interfaces and switch ports#.
The settings in these rules are tailored very specifically to their appropriate plug-in.
Such rule sets fundamentally only find use with those services that are based on this plug-in.
In case you are uncertain which rule set is responsible for which services, then you can best
find out by navigating directly via the service to the relevant rule.
How to do this will be explained later.


=== Host tags

One thing we have so far not mentioned:
In the above example there is a rule for all test systems.
Where is it actually defined which host is a test system?

In {CMK}, something like _test system_ is known as a _host tag_.
You can see which tags are available via [.guihint]#Setup > Hosts > Tags#.
Some tags are already predefined -- for example, for a [.guihint]#Test system# defined in the [.guihint]#Criticality# group.

Applying them to hosts is done either explicitly in the properties of the host or through inheritance in the folder hierarchy.
How to do this is explained in the xref:hosts_setup#folder[article on hosts].

How to create your own tags, and what the predefined tags are about will be explained in the xref:host_tags#[arcticle on host tags].


== Determining the correct rule sets

=== Host rule sets

If you wish to create a new rule that defines a parameter for one or more hosts,
there are several ways to this end. The direct way is via the corresponding
group in the [.guihint]#setup# menu, in this case [.guihint]#Setup > Hosts >
Host monitoring rules#:

image::wato_rules_host_monitoring_rules.png[alt="Setup menu with focus on the Host monitoring rules."]

In the following view, all rule sets relevant for host monitoring are displayed.
rule sets are displayed. The numbers behind the names of these rule sets show
the number of rules already defined:

image::wato_rules_host_monitoring_rules_2.png[alt="View of the Host monitoring rules in the setup menu."]

However, you can reach your goal somewhat faster via the _search field_.
To do this, of course, you need to know approximately what the ruleset is called.
Here is the result of a search for _host checks_ as an example.

image::wato_rules_search_host_checks.png[width=50%, alt="Extract of the result of a search for host checks."]

Another way is via the menu item [.guihint]#Hosts > Effective parameters#
in the properties of an existing host in the setup or via the icon
icon:icon_rulesets[] in the list of hosts of a folder.

image::wato_rules_setup_object_parameters.png[alt="List of some hosts in the setup menu, with a highlighting of the button for host parameters."]

There you will find not only all the rule sets that affect the host, but also
the parameter currently effective for this host. In the example of
[.guihint]#Host check command# no rule applies for the shown host and it is
therefore is set to the default [.guihint]#PING (active check with ICMP echo
request)#:

image::wato_rules_host_rule_sets.png[]

Click on [.guihint]#Host check command# in order to see the complete rule set.

If a rule already exists, instead of the _Default value_ the number of the rule
defining this parameter appears. Clicking on this takes you directly to the
rule.

image::wato_rules_host_rule_sets2.png[]

[#checkparameters]
=== Service rule sets

The path to the rule sets for services is similar. The general access is via the
[.guihint]#setup# menu, in this case [.guihint]#Setup > Services > Service
monitoring rules# or, more appropriately via the search field.

image::wato_rules_service_monitoring_rules.png[]

If you are not yet very experienced with the names of the rule sets, then the
path via the service is simpler. Similarly to the hosts, there is also a page in
which all of a service's parameters are shown and where you have the possibility
of directly accessing the applicable rule sets. You can access this parameter
page with the icon:icon_services[] symbol in a host’s list of services in the
setup. The icon:icon_check_parameters[] symbol takes you directly to the rule
set that defines the xref:wato_services#parameters[parameter for the check
plug-in] for this service.

image::wato_rules_setup_service_list.png[]

By the way -- the icon:icon_rulesets[] symbol for the parameter page is also found in the status window in every service’s context menu:

image::wato_rules_service_context_menu.png[]


[#enforced_services]
[#manual_checks]
=== Enforced services

In the [.guihint]#setup# menu you will also find an entry for
[.guihint]#Enforced Services#. As the name suggests, you can use these rulesets
to force services to be created on your hosts. Details can be found in the
xref:wato_services#enforced_services[article about services]. A small
number of rulesets - such as [.guihint]#Simple checks for BIOS/Hardware errors#
- can only be found under the enforced services. These are services which do not
result from the service detection, but are created manually by you.


=== Rule sets in use

In each of the aforementioned lists of rule sets - whether in the
[.guihint]#Host monitoring rules# or the [.guihint]#Service monitoring rules# -
you can use [.guihint]#Related > Used rulesets# in the menu bar, to display only
only the rulesets in which you have defined at least one rule.
This is often a convenient way to get started if you want to make adjustments to your existing rules.
Incidentally, some of the rules are created already when creating
the {CMK} instance and are part of the sample configuration. These are also
displayed here.


=== Ineffective rules

Monitoring is a complex matter. It can happen that there are rules which do not
match a single host or service -- either because you have made
a mistake or because the matching because the matching hosts and services have
disappeared. Such ineffective rules can be found in the aforementioned rule set
listings via [.guihint]#Related > Ineffective rulesets# in the menu bar.


=== Obsolete rule sets

{CMK} is under constant development. Occasionally things are and it comes that
some rule sets are replaced by others. are replaced. If you have such rulesets
in use, the easiest way to find them is do a rule search. Open it via
[.guihint]#Setup > General > Rule search# in the navigation bar. Then click in
the menu bar on [.guihint]#Rules > Refine search#, select [.guihint]#Search for
deprecated rulesets# as the option for  [.guihint]#Deprecated#  and select
[.guihint]#Search for rulesets that have rules configured# as the option for
[.guihint]#Used#. After an additional click on [.guihint]#Search# you get the
desired overview.

image::wato_rules_search_deprecated_rules.png[alt="Search for obsolete rule sets."]

[#create_rules]
== Creating and editing rules

The following image shows the [.guihint]#Filesystems (used space and growth)# rule set with four
rules configured:

image::rules_filesystem.png[]

*New rules* are created either with the [.guihint]#Create rule in folder# button, or by cloning an existing
rule with icon:icon_clone[].
Cloning creates an identical copy of the rule that you can then edit with icon:icon_edit[].
A new rule created using the [.guihint]#Create rule in folder# button will always appear at the end of the list
of rules, whereas a cloned rule will be displayed as a copy below the original rule from which it was cloned.

The *sequence* in which the rules are listed can be changed with the
icon:icon_drag[] buttons. The sequence is important because rules positioned higher in
the list always have *priority* over those located lower.

The rules are stored in the same *xref:hosts_setup#folder[folders]* from which you
also manage the hosts. The rules’ authorities are restricted to the hosts in this folder or in subfolders.
In the case of conflicting rules, the rule lower in the folder structure has priority.
In this way, for example, users with rights limited to certain xref:wato_user#wato_permissions[authorised] folders can create rules for their hosts without affecting the rest of the system.
In a rule's characteristics you can change its folder and thus ‘relocate’ it.

=== The analysis mode with ‘traffic lights’

When you access a rule set via a host or service -- for example, by using the
icon:icon_rulesets[] or icon:button_check_parameters[] symbols in the host or
service -- {CMK} shows you the rule set in the *analysis mode*:

image::rules_filesystem_analyze.png[]

This mode has two features. Firstly, a second button for setting rules
appears -- [.guihint]#Create mount point specific rule for# as an example here.
With this you can create a new rule which has the appropriate current host or service
already preselected. You can create an exceptional rule very easily and directly in this way.
Secondly, a ‘traffic light’ symbol appears in every line, the colour of which shows whether and/or
how this rule affects the current host, or respectively, service.
The following conditions are possible:

[cols="5,~"]
|===

|icon:icon_rulenmatch[] |This rule has no effect on the current host or service.
|icon:icon_rulematch[] |This rule accesses and defines parameters.
|icon:icon_ruleimatch[] |The rule is applicable. But because another rule higher in the hierarchy has priority this rule is ineffective.
|icon:icon_rulepmatch[] |This rule is applicable. Another rule higher in the hierarchy in fact has priority but  doesn’t define all parameters, so that at least one parameter is defined by this lower rule.
|===


In the last condition -- the rule is a icon:icon_rulepmatch[] partial match -- can only occur for
rule sets in which a rule can define *multiple parameters* by selecting individual check boxes.
Theoretically, every parameter for another rule can also be set individually here.
More on this later.

== Rule characteristics

=== General options

Every rule is assembled from three blocks. Everything in the first block, [.guihint]#Rule options#, is optional,
and serves primarily for documentation:

image::rules_props_properties.png[]

* The [.guihint]#Description# will be shown in the table of all rules in a rule set.
* The [.guihint]#Comment# field can be used for a longer description. It only appears in a rule’s edit mode. Via the icon:icon_insertdate[] symbol you can insert a date stamp and your login name in the text.
* The [.guihint]#Documentation-URL# is intended for a link to internal documentation that you maintain in another system (e.g., a CMDB). It will appear as the clickable icon:icon_url[] symbol in the rules table.
* With the [.guihint]#Do not apply this rule# check box you can temporarily disable this rule. It will then be flagged as icon:icon_disabled[] in the table and is thus ineffective.

=== The defined parameters

The second block is different for every rule. The following image shows a widely-used type of rule
([.guihint]#DB2 Tablespaces#).
Using check boxes you can determine which individual parameters the rule should define.
As described earlier, {CMK} ascertains, separately for each individual parameter,
which rules will set the parameters. The rule in the image simply defines one value,
and leaves all other settings unaffected.

image::rules_props_value_1.png[]

Some rule sets define no parameters, rather they only decide which hosts are
_in_ and which are not.  An example is the [.guihint]#Hosts to be monitored# rule
set with which you can remove some hosts completely from the monitoring. The
value area then looks like this:

image::rules_props_value_2.png[]

If you select [.guihint]#Make the outcome of the rule *positive*# here, this means that the affected hosts are
incorporated in bulk -- in our example, they will be monitored.

[#conditions]
=== Conditions

In the third block, [.guihint]#Conditions#, you can define for which hosts or services the rules should apply.
Here there are different conditions, all of which must be met in order for the rule to be applied.
The conditions are therefore logically AND-linked:

image::rules_props_conditions_1.png[]

==== Condition type

Here you have the option of using normal conditions as well as _predefined
conditions_. These are managed via [.guihint]#Setup > General > Predefined
conditions#. Here you simply give fixed names to the rule matches that you need
again and again, and from then on simply refer to them in the rules. You can
even later change the content of these conditions centrally and all the rules
will be automatically-adjusted to suit. In the following example the predefined
condition [.guihint]#No VM# has been selected:

image::rules_props_conditions_2.png[]

==== Folder

With the [.guihint]#Folder# condition you define that the rule only applies to
hosts in this folder -- or subfolder. If the setting is [.guihint]#Main
Directory#, this condition is applicable to all hosts. As described above, the
folders have an effect on the rule’s sequence. Rules in lower folders always
have priority over higher ones.


==== Host tags

[.guihint]#Host tags# restrict rules to hosts according to whether they have -- or do not have -- specific host tags.
Here AND-links are also always used. Every other host tag condition in a rule reduces the number of hosts affected by the rule.

If you wish to make a rule applicable for two possible values for a tag, (e.g. for [.guihint]#Criticality# both [.guihint]#Productive system# and [.guihint]#Business critical#), you cannot do this with a single rule.
You will require a copy of the rule for each variant.
Sometimes a negation can also help here. You can also define that a tag is *not* present as a condition (e.g., not [.guihint]#Test system#).
The so-called xref:host_tags#aux_tag[auxiliary tags] are another possibility.

Because some users really use many host tags, we have designed this dialog so that not all host tag groups are displayed by default.
You have to specifically select the one needed for the condition.
It works like this:

. In the selection box choose a host tag group.
. Click [.guihint]#Add tag condition# -- an entry for this group will then be added.
. Select [.guihint]#is# or [.guihint]#is not#.
. Select the desired tag as a comparison value.

image::rules_props_hosttags.png[alt="Specifying multiple host tags in one condition."]


==== Labels

You can also use the xref:labels#[Labels] for conditions in rules.
Include conditions with [.guihint]#Add label condition# -- choose either [.guihint]#has# or [.guihint]#has not# to formulate a positive or negative condition, and then enter the label in the usual form _key_`:`_value_.
Please pay attention to the exact spelling here, and case-sensitivity where applicable -- otherwise the condition will not work correctly.

image::rules_props_labels.png[]

==== Explicit hosts

This type of condition is intended for exception rules. Here you can list one or more host names.
The rule will apply only to these hosts.
Please note that if you check the [.guihint]#Specify explicit host names# box but enter *no* hosts,
then the rule will be completely ineffective.

Via the [.guihint]#Negate# option you can define a reversed-exception. With this you can exclude
explicitly-named hosts from the rule.

image::rules_props_explicithosts_1.png[]

Important: all host names entered here will be checked for *exact congruence*.
{CMK} is fundamentally case-sensitive!

You can change this behaviour to xref:regexes#[regular expressions] by prefixing host names with a tilde (`~`).
In this case, as always in the [.guihint]#Setup#:

* The match is applied to the *beginning* of the host name
* The match is not case-sensitive

A point-asterisk (`pass:[.*]`) in xref:regexes#[regular expressions] allows an arbitrary sequence of characters
following the point. The following example shows a condition which all hosts will match whose names
*contain* the character sequence `my` (or `My`, `MY`, `mY` etc.):

image::rules_props_explicithosts_2.png[]


==== Explicit services

For rules that are applicable to services there is a last type of condition that defines a match
on a service’s name, or respectively -- for rules that set check parameters -- the *check item’s* name.
With what exactly the match will be made can be seen in the caption. In our example it is the name (instance)
of a [.guihint]#tablespace#:

image::rules_props_explicitservices.png[]

A match with xref:regexes#[regular expressions] fundamentally applies here.
The sequence `pass:[.*]temp` matches all tablespaces *containing* `temp` because the match is always applied to the start of the name.
The dollar sign at the end of `transfer$` represents the end and thereby forces an exact match.
A tablespace with the name `transfer2` will thus *not* match.

Please don’t forget: for rules concerning [.guihint]#explicit services# a match with the service name is required
(e.g. `Tablespace transfer`).
For check parameter rules a match with the item applies (e.g. `transfer`).
The item is in fact the variable part of of the service name, and determines _to which_ tablespace it applies.

There are incidentally services without an item. An example is _CPU load_. This exists only once for each
host -- so no item is required. It follows then that rules for such check types are also without conditions.


[#matching]
== Types of rule analysis

In the introduction, regarding the principle of rules I wrote that the first applicable rule determines the results of an analysis. That is not the whole truth -- there are altogether three different types of analysis:

[cols=2]
|===
|Analysis |Action

|The first rule |The first rule that applies defines the value. Subsequent rules will not be analysed. This is the normal situation with rules that set simple parameters.
|The first rule per parameter |Every individual parameter will be set by the first rule that defines this parameter (check box selected). This is the normal situation for all rules with subparameters that are activated with check boxes.
|All rules |All applicable rules add elements to the results. This type is used for the allocation of hosts and services to host, service and contact groups for example.
|===

This information is shown at the top of every rule set.

image::rules_matching_strategy.png[]
