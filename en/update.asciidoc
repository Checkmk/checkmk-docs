// -*- coding: utf-8 -*-
// IGNORE Ctrl+D 
include::global_attr.adoc[]
= Updates and Upgrades
:revdate: draft
:title: Updates and Upgrades
:description: No matter whether Open Source, {FE} or {EE}: updating {CMK} has been made as easy as possible. The principles are explained here.

{related-start}
xref:cmk_versions#[{CMK} versions]
xref:cmc#[The {CMK} micro core (CMC)]
xref:cmc_migration#[Migration to the CMC]
{related-end}


== Introduction

Updating {CMK} is a bit different than most other software packages that you may be familiar with.
Why is that?

The reason is that {CMK} not only allows multiple independent *sites* to run on a single server, 
but it also allows multiple xref:cmk_versions#[software versions] to be installed simultaneously.
With this system each site is assigned to an installed version of the software.
To illustrate, we can take the following situation on a fictional server:

image::update1.png[width=300]

Here the site `mysite1` uses version `2.0.0p3.cee`, but the sites `mysite2` and `mysite3` use version `2.0.0p1.cre`.
Though {CMK}-Version `2.0.0p1.cfe` is installed, it is currently not being used.

This example makes it clear that an update does not simply mean the installation of a new {CMK} RPM/DEB package on a server.
Another additional step is also required.
Let us take the following situation as an example:

image::update2.png[width=300]

Here the site `mysite` is to be updated to the {CMK}-version `2.0.0p3.cee`.
The first step is to download and install the appropriate RPM/DEB-Packet.
This is performed exactly as with the xref:install_packages#[initial installation].
At first the newly-installed version will not be used by any site, and it will look like this:

image::update3.png[width=300]

The second step will now be an update of the site from `2.0.0p1.cre` to `2.0.0p3.cee`.
This is achieved with the `omd update` command, which we will discuss in detail below:

image::update4.png[width=300]

Following the update, the (likely) no longer required version `2.0.0p1.cre` can be deleted by uninstalling the appropriate package.


[#before_update]
== Before the update

If you are planning to update the {CMK} version {v21} to {v22}, you should first read the xref:update_major#[Update to version 2.2.0] article, in which we have compiled the most important issues you should consider before and after such an update.

But even if you have already installed a {v22} version and want to update to a new stable patch version of {v22}, the topics described in the following sections may be relevant.


[#update_major_version]
=== Update to major versions

When updating to a higher major version, you must always update directly to the next version and not just skip any.
For example, if you want to update from {v20} to {v22}, update to {v21} first.
The reason is simple: there are sometimes simply so many changes between two major versions that skipping them can cause problems.

// This block replaces the following paragraph
// start translation
////
Der Befehl `omd update` ermöglicht auch die „Aktualisierung“ auf eine _niedrigere_ Version.
Diese Vorgehensweise ist nur bei Regressionen vorgesehen.
Nach einem solchen Update in die Rückwärtsrichtung sind viele Anpassungen nötig, um Konfiguration und Laufzeitumgebung wieder kompatibel zu machen – insbesondere, aber nicht nur, bei einem "Update" auf eine niedrigere Major-Version.
Daher raten wir von diesem Vorgehen dringend ab – und können auch bei einem Update auf eine niedrigere Version keinen Support mehr bieten.
////
// end translation

The `omd update` command also allows updating to a _lower_ version.
After such an update in the reverse direction, however, many adjustments are necessary to make configuration and runtime environment compatible again -- especially, but not only, when updating to a lower major version.
Therefore, we advise against this procedure -- and can no longer provide support when updating to a lower version.


// This block replaces the following section "Incompatible and obsolete MKPs"
// start translation
////
[#incompatible_mkps]
=== Inkompatible und obsolete MKPs

Über die {CMK} xref:glossar#mkp[Erweiterungspakete (MKPs)] lässt sich Ihr Monitoring-System recht einfach und bequem erweitern. 
Auf der einen Seite kommt es dabei vor, dass solche MKPs nicht weiter gepflegt werden und dann ggf. mit neuen Versionen von {CMK} nicht mehr kompatibel sind. 
Auf der anderen Seite nehmen wir immer wieder neue Plugins und Funktionserweiterungen in {CMK} auf, weshalb MKPs mitunter obsolet werden. 
Ihre Funktionalität wird schlicht von {CMK} selbst sichergestellt.

Falls Sie MKPs installiert haben, ist aus diesem Grund eine Prüfung dieser MKPs dringend geboten. 
So verhindern Sie, dass inkompatible Pakete das Update behindern oder im Anschluss an das Update doppelte oder zumindest sehr ähnliche Services entstehen.

Prüfen Sie hierzu Ihre installierten MKPs gegen unseren link:https://checkmk.com/de/integrations[Katalog der Check-Plugins^] und entfernen Sie Pakete, welche inzwischen nativ von {CMK} bereitgestellt werden. 
Bei dieser Gelegenheit können Sie auch MKPs entfernen, die eventuell nur mal für einen Probelauf installiert worden sind. 
Eine Auflistung finden Sie im [.guihint]#Setup#-Menü unter [.guihint]#Maintenance > Extension packages#. 
Auf der Kommandozeile können Sie sich installierte Erweiterungen mit dem Befehl `mkp list` anzeigen lassen.
Überprüfen Sie die Ausgabe dieses Befehls auf Erweiterungen, die nicht mehr benötigt werden oder die Sie gar nicht mehr zuordnen können.

Seit {v21}p22 unterstützt {CMK} zur Vorbereitung von Updates die Bereitstellung von MKPs für eine neuere als die aktuell laufende Version.
Beim Update wird dann das Paket für die niedrigere {CMK}-Version deaktiviert und das für die höhere aktiviert.
Details erklärt der xref:mkps#[Artikel zur Verwendung von MKPs].
////
// end translation

[#incompatible_mkps]
=== Incompatible and obsolete MKPs

The {CMK} extension packages (MKPs) can be used to extend your monitoring system quite easily and conveniently. 
On the one hand, it happens that such MKPs are no longer maintained and may then no longer be compatible with new versions of {CMK}. 
On the other hand, we keep adding new plug-ins and functional extensions to {CMK}, which is why MKPs sometimes become obsolete. 
Their functionality is simply ensured by {CMK} itself.

If you have installed MKPs, it is urgently recommended to check them.
This will prevent incompatible packages from interfering with the update, or of having duplicate or at least very similar services following the update.

To do this, check your installed MKPs against our link:https://checkmk.com/integrations[Catalog of Check plug-ins] and remove packages which are now provided natively by {CMK}. 
You can also take this opportunity to remove MKPs that may have only been installed for a test run.
You can find a list in the [.guihint]#Setup# menu under [.guihint]#Maintenance > Extension packages.# 
On the command line, with the following commands you can display installed extensions as well as any unpackaged files:

[{shell}]
----
{c-omd} mkp list    
{c-omd} mkp find
----

Should you not be able to assign all packages via the check of the installed MKPs and the comparison with our catalog, we recommend the xref:update_major#dry_run[dry run of the update] described below in order to identify incompatibilities and then remove these from your production monitoring before the update.

Check the output of these commands for extensions and files that are no longer needed or that you cannot even allocate. 
To check their impact on the update, you can make copies of these extensions and files and remove them from your {CMK} site, at least temporarily.










[#local_files]
=== Local files

Local files allow you to customize and extend the functionality provided by {CMK}. 
These files are located in the local part of the site directory structure, i.e. in `~/local`. 
Local files can cause problems when updating, as they may no longer match the new {CMK} version.

Since it is not possible for {CMK} to intercept and handle local customizations and any third-party extension during an update, you should check your {CMK} site before an update to see if and which local files you are using.

Get an overview of the local files of your {CMK} site by executing the following command as the site user (where the `-L` option ensures that symbolic links are also followed):

[{shell}]
----
{c-omd} find -L ~/local -type f
----

In a fresh installation of {CMK}, you will currently only see a file called `README.TXT` listed.
Anything beyond that should be at the top of your troubleshooting list in case you have problems updating.

// This block is new
// start translation
////
Im Idealfall sind lokale Dateien bereits vollständig in xref:#incompatible_mkps[MKPs] gebündelt.
Verwenden Sie `mkp find` um unpaketierte Dateien zu identifizieren.
Die weitere Vorgehensweise der Erstellung von Paketen zeigt unser xref:mkps#developers[Artikel zu {CMK} Erweiterungspaketen].
Einmal zu einem Paket zusammengefasst, kann eine Erweiterung als ganzes deaktiviert oder erneut aktiviert werden.


[#backup]
=== Backup und Probelauf

Die Selbstverständlichkeit, ein Backup unmittelbar vor dem Update zu erstellen, um im Falle eines Fehlschlags nicht allzu viel Ihrer Monitoring-Historie zu verlieren, müssen wir Ihnen nicht erklären. 
An dieser Stelle relevant ist, dass ein reguläres Backup auch gute Dienste für den Probelauf eines Updates leisten kann.
So können Sie das Backup unter einem anderen Namen wiederherstellen – und anschließend mit der Instanz `newsite` das Update testen:

[{shell}]
----
{c-root} omd restore newsite /path/to/backup
----

*Alternativ* können Sie Ihre Instanz auch per `omd cp` kopieren.
Dafür muss die produktiv genutzte Instanz allerdings kurzzeitig gestoppt werden:

[{shell}]
----
{c-root} omd stop mysite && omd cp mysite newsite && omd start mysite
----

Führen Sie das Update im Anschluss erst einmal auf dieser neuen, geklonten Instanz durch, um hier beispielsweise die oben angesprochenen lokalen Änderungen in der neuen Umgebung zu prüfen.
Waren die Tests mit der geklonten Instanz erfolgreich, werden Sie diese aus Platz- und Performance-Gründen meist _vor_ dem eigentlichen Update der Produktivinstanz löschen oder zumindest stoppen wollen.

////
// end translation











[#detailed]
== Updating {CMK}

=== Installing new versions

As described in the introduction, the first step with an update is the xref:install_packages#[installation] of the desired new xref:cmk_versions#[version] of {CMK}.
This is achieved in exactly the same way as with the initial installation -- it will however proceed somewhat more quickly since most of the dependent packages have already been installed.
In the following example we are installing the package for Ubuntu 22.04 (Jammy Jellyfish):

[{shell}]
----
{c-root} apt install /tmp/check-mk-enterprise-2.2.0p1_0.jammy_amd64.deb
----

*Note:* When installing a local package via `apt install`, you have to state the pull path to the .deb file.

A list of your installed {CMK} versions can be displayed at any time with the `omd versions` command:

[{shell}]
----
{c-root} omd versions
2.0.0p42.cre
2.1.0p22.cee
2.2.0p1.cee (default)
----

One of these listed versions is marked with `(default)`.
This default version will be used automatically when creating new sites, as long as no other version is specified with `omd -V myversion create mysite`.
The current default version can be queried with `omd version`, and it can be altered with `omd setversion`:

[{shell}]
----
{c-root} omd version
OMD - Open Monitoring Distribution Version 2.2.0p1.cee
{c-root} omd setversion 2.1.0p22.cee
{c-root} omd version
OMD - Open Monitoring Distribution Version 2.1.0p22.cre
----

The default version plays no role when managing _existing_ sites.
The `omd` command always starts with the version appropriate to the site for which the command is called.

A listing of the current sites and the versions they use is provided by the `omd sites` command:

[{shell}]
----
{c-root} omd sites
SITE             VERSION          COMMENTS
mysite           2.1.0p22.cee
test             2.2.0p1.cee      default version
----


[#execute]
=== Performing the update

Once the desired new version has been installed, the site can be updated.
No `root`-permissions are required for this.
The best way to do this is as a site user:

[{shell}]
----
{c-root} omd su mysite
----

Ensure that the site has been stopped:

[{shell}]
----
{c-omd} omd stop
----

The update -- in effect switching to a different version -- can now simply be performed with the `omd update` command:

[{shell}]
----
{c-omd} omd update
----

If more than one target version is available, a selection list will open:

image::update_omd-update-2.png[width=55%]

In the following dialogue box, confirm the selected update to the new version:

image::update_omd-update-3.png[width=55%]

// This block replaces the following sentence
// start translation
////
Wenn Sie gleichzeitig zum Versions-Update ein Editions-Upgrade von einer {RE} auf eine der {CEE} durchführen, werden Sie sicherheitshalber noch einmal auf diesen Umstand hingewiesen:
////
// end translation

When updating from a {RE} to the {CSE} you will be reminded of this fact:











image::update_raw_to_enterprise.png[width=55%]

An important part of an update is the refreshing of the originally provided configuration files.
Here changes that had possibly been made to these files by the user will not simply be discarded, rather they will be merged.
This functions very much like version control systems which attempt to amalgamate changes made to a single file simultaneously by multiple developers.

Occasionally -- when the changes affect the same location in the file -- that won't function, and a _conflict_ occurs.
How you can solve such conflicts will be explained xref:update#conflicts[later below].

The update provides a listing of all modified files and directories (shortened in the following example):

[{shell}]
----
2023-03-10 16:49:42 - Updating site 'mysite' from version 2.1.0p23.cee to 2.2.0p1.cee...

 * Identical new  etc/omd
 * Installed file etc/mk-livestatus/livestatus.socket
 * Updated        etc/mk-livestatus/nagios.cfg
...
 * Vanished       etc/jmx4perl/config/websphere
 * Vanished       etc/jmx4perl/config
Creating temporary filesystem /omd/sites/mysite_update/tmp...OK
Executing update-pre-hooks script "01_mkp-disable-outdated"...OK
Executing update-pre-hooks script "02_cmk-update-config"...
-| Initializing application...
-| Updating Checkmk configuration...
-| ATTENTION: Some steps may take a long time depending on your installation, e.g. during major upgrades.
-|  1/24 Rewriting password store...
-|  2/24 Migrate Visuals context...
...
-|  24/24 Rewriting InfluxDB connections...
-| Done
OK
Updating core configuration...
Generating configuration for core (type cmc)...
Starting full compilation for all hosts Creating global helper config...OK
 Creating cmc protobuf configuration...OK
Finished update.
----

Once everything has been successfully processed, the site is switched to the new version:

[{shell}]
----
{c-omd} omd version
OMD - Open Monitoring Distribution Version 2.2.0p1.cee
----

&#8230; and can then be started:

[{shell}]
----
{c-omd} omd start
----


[#incompatible]
=== Incompatible changes

Software development of course consists of changes.
Because we are always actively working to keep {CMK} modern, sometimes cutting dead weight and making changes that turn out to be _incompatible_ is unavoidable.
That means that when updating it may _possibly_ be necessary to adapt your configuration, or you should at least check it.

A typical example of such a situation is with new check plug-ins which replace existing plug-ins.
If you use one of the affected plug-ins, a fresh xref:glossar#service_discovery[service discovery] will be required on the affected host.

An overview of all changes in {CMK}, including a search function, can be found online in our link:https://checkmk.com/werks[Werks^].

Even more practical however is the built-in search function in the release notes.
After you have logged in to the site, you will find the link highlighted in red in the [.guihint]#Help# menu:

image::update_help_menu_incompatible_werks.png[width=65%]

{CMK} keeps track of incompatible changes that occurred during the update from the original to the current version and asks you to check and then _acknowledge_ them:

image::update_incomp_werks.png[]

You can call up each 'Werk', i.e. each change, individually, view it, confirm it with a mouse click -- and thus successively reduce the number of open incompatible changes.
In addition, you can use the [.guihint]#Filter# button to show the filter bar and thus have access to the complete history of changes.


=== The update in detail

Are you curious about what exactly is happening ‘under the hood’ of an update?
Or have data conflicts appeared when `omd update` is running?
If so, here is some further reading.

Three actions take place during `omd update`:

. The refreshing of the default files under `~/etc/` and `~/var/` – i.e., files created by `omd create`.

. The switching of the active version to the target version by changing the symbolic link `version` which is found in the site directory.

. Post-processing by various packages (e.g., {CMK}).
In particular, an xref:glossar#activate_changes[activate changes] will be automatically executed in order to generate a valid configuration for the core.


==== Updating files, merging changes

The first step is by far the most comprehensive.
Here {CMK} demonstrates a big advantage in comparison to the typical software installation --
{CMK} helps you to adapt all of the standard configuration files to the prerequisites of the new version.
This resembles the procedure for updating a Linux distribution, but goes further in the implementation.
{CMK} can handle a multiplicity of situations, for example:

* The merging of file changes with changes made locally by the user.
* Files, directories and symbolic links which are obsolete in the new version, or which have been deleted by the user.
* Changes to permissions.
* Changes to a file type (a symbolic link derived from a file or directory, or vice versa).
* Changes to the target of a symbolic link.

{CMK} always ensures that your local changes are retained, and that all of the changes required by the new version are simultaneously implemented.


[#conflicts]
==== Merging and conflicts

If the new version intends changing a configuration file on which the user has also made changes, {CMK} automatically attempts to _merge_ both sets of changes.
This is achieved using the same methods as used by version-control systems.

The fewest problems are experienced when your and {CMK}’s changes have a clear physical separation in the text (at least a few lines apart).
The merge will then be effected automatically, and without needing the user’s intervention.

If two changes ‘collide’ because they both affect the same location in the data,
{CMK} cannot and will not decide which of the changes is more important.
In such a situation you are switched on as a user and can interactively resolve the conflict:

image::omd-update.png[width=85%]

In the situation shown above, you now have the following options:

[cols="5,~"]
|===

|*d* |This shows the differences between the new default version and your version of the file in the form of a ‘unified diff’ (`diff -u`).
|*y* |This is similar to the above, but based on the preceding default version shows which changes you have made to the file.
|*n* |This third option in effect ‘closes the triangle’ by showing the changes which {CMK} intends making to the file.
|*e* |Resolve the conflict manually in an editor.
|*t* |By selecting *t*, your original file – without the already successfully-merged changes – will be opened in an editor. Now edit the file in order to bypass possible conflicts. Once the editor has been closed {CMK} will reattempt the merge.
|*k* |Here you can decide whether to accept the data ‘as is’. The successfully inserted changes are retained. Apart from this the file remains as customized by the user.
|*r* |With this you can fall back to the old version of your file, and go without {CMK}’s update for this file. Any customizations that may be required must be performed manually.
|*i* |Install the new default file version: your changes in the old file will be lost.
|*s* |If you are uncertain, you can open a shell with *s*. You will find yourself in a directory containing the relevant file, and there can get a picture of the situation. Quit the shell with Ctrl+D in order to proceed with the update.
|*a* |Abort the update. The site retains the old version. Files that have already been changed during the update however remain changed! A new update attempt can be started at any time.
|===


==== Further conflict situations

Alongside the content-merging of files there is a whole series of further situations in which {CMK} requires your decisions.
Some of these are very unusual situations, that nevertheless need to be handled correctly.
In these cases {CMK} will always give you the choice of keeping your version, or of adopting the new default version.
What is more, there is always the option of aborting an update, or of opening a shell.
Examples of such ‘difficult’ situations are:

* conflicting changes to file types (e.g., when a file is replaced by a symbolic link)
* conflicting changes to file permissions
* changed files that are not required by the new software version
* files, directories or links created by a user, which conflict with a new version’s files/directories/links


==== Explanation of the output during an update

The update procedure will always output a line of explanation when it makes a change to a file automatically.
The following situations are possible – files are referred to here, but this also applies analogously to links and directories:

[cols="20,~"]
|===

|Updated |A file has been changed with the new version. Since you have not made a change to the file, {CMK} simply installs the new default version of the file.
|Merged |A file has been changed with the new version, and at the same time the user has made other changes to the file. Both versions of the file can be merged into one without conflict.
|Identical |A file has been changed in the new version, and at the same time the user has already made identical changes to the file. {CMK} must not perform any action.
|Installed |The new version includes a new configuration file which has just now been installed.
|Identical{nbsp}new |The new version includes a file, an identical copy of which the user has already installed.
|Obsolete |The new version has obsoleted a file (also applies to a link or a directory). The user has anyway already deleted it. No action.
|Vanished |Another file is obsolete in the new {CMK}, and the user has neither deleted nor changed the existing version. {CMK} deletes this file automatically.
|Unwanted |The user has deleted a file which is normally present. Because the version in the new {CMK} has no changes from the last version of the file, {CMK} allows the file to be absent.
|Missing |The user has already deleted a file, but in the new {CMK} this file contains changes from the previous version. {CMK} installs the new file, and logs a notification of this action to the user.
|Permissions |{CMK} has updated a file’s permissions because different permissions are set in the new version.
|===


=== Updating without user interaction

Would you like to automate {CMK}’s software updates?
You may at first have difficulties with the interactive responses from `omd update`.
There is a simple solution for this scenario: the command has options that have been especially conceived for use in scripts:

* The options `-f` or `--force` directly following `omd` inhibit all types of "Are you sure... ?" questions.
* The option `--conflict=` directly following `update` determines the desired behavior if a file conflict occurs.

Possible values for `--conflict=` are:

[cols="20,~"]
|===

|`--conflict=keepold` |In the case of a conflict, the user’s own modified version of the file is retained. It is however possible that {CMK} may not be executable, and that manual rectification will be required.
|`--conflict=install` |In the event of a conflict, the new standard version of the file will be installed. With this, local changes to the file will be at least partly lost.
|`--conflict=abort` |In the event of a conflict the update is stopped. That does *not* necessarily mean that _everything_ will fall back to the old state. A number of configuration files may have already been updated. The software version will however remain the old version.
|`--conflict=ask` |This is the standard procedure, so in this form the option is actually superfluous.
|===

Below is an example of the complete command for an automated update to version `2.2.0p1.cee` of `mysite`:

[{shell}]
----
{c-root} omd stop mysite ; omd -f -V 2.2.0p1.cee update --conflict=install mysite && omd start mysite
----

Through the `&amp;&amp;` before `omd start` a restarting of the site will be prevented if the `omd update` is aborted by an error.
Replace the `&amp;&amp;` with a semicolon (`;`) if a start should definitely be attempted even in such a situation.

If you are certain that only a single {CMK} site is running on the server, the name to be used in a shell script can simply be trapped in a variable:

[{shell}]
----
{c-root} omd sites --bare
mysite
{c-root} SITENAME=$(omd sites --bare)
{c-root} echo $SITENAME
mysite
----

This enables the above line to be independent of the site’s name.
For example, a small shell script could look like this:

.update.sh
[{file}]
----
#!/bin/bash
SITE=$(omd sites --bare)
VERSION=2.2.0p1.cee

omd stop $SITE
omd -f -V $VERSION update --conflict=install $SITE  && omd start $SITE
----


// This block is new
// start translation
////
[#updatedistributed]
== Update in verteilten Umgebungen

Updates in xref:distributed_monitoring#[verteilten Umgebungen] erfordern immer zunächst die Aktualisierung aller Remote-Instanzen bevor als letztes die Zentralinstanz aktualisiert wird.
So ist sichergestellt, dass zu keinem Zeitpunkt eine von einer neueren {CMK}-Version erzeugte Konfiguration bei einer älteren {CMK}-Version landet. 

*Wichtig:* Generell raten wir beim Update in verteilten Umgebungen dazu, alle Monitoring-Instanzen zu stoppen, zu aktualisieren (zuerst Remote-Instanzen und dann Zentralinstanz) und dann wieder zu starten.

Ist dies nicht möglich – beispielsweise, weil die Umgebung auf Instanzen in verschiedenen Zeitzonen und betreuenden Teams verteilt ist – kann unter strengen Auflagen ein vorübergehender Mischbetrieb erfolgen.
Der Versionsunterschied darf bei Major-Updates exakt eine Version betragen und setzt immer ein bestimmtes Patchlevel der Ausgangsversion voraus.


=== Technische Hintergründe

Der technische Grund für die Vorgehensweise liegt in den verwendeten Protokollen:
Die Zentralinstanz greift auf die Daten der Remote-Instanzen primär lesend via xref:glossar#Livestatus[Livestatus] zu.
Bei xref:distributed_monitoring#distr_wato[zentraler Konfiguration] zudem schreibend über eine nicht öffentliche HTTP-API.
In beiden Fällen gilt, dass neue Versionen echte Obermengen der verwendeten Protokolle einführen.
So nutzt eine ältere Zentralinstanz nur eine echte Teilmenge der Funktionalität der neueren Remote-Instanzen.
Würde man die Zentralinstanz zuerst aktualisieren, würde sie bei den Remote-Instanzen möglicherweise API-Aufrufe oder Livestatus-Anfragen verwenden, welche diese noch nicht verstehen.

Der maximale Versionsunterschied einer Major-Version resultiert wiederum daraus, dass die Entfernung von Schnittstellen mit einer _Schonfrist_ genau einer Version einhergeht.
So wurde die Web-API intern bereits von {CMK} {v21} nicht mehr benutzt, ihre Abschaffung erfolgte aber erst mit Version {v22}.
Aus diesem Grund arbeitet eine {v21} Zentralinstanz mit {v22} Remote-Instanzen zusammen, nicht jedoch eine {v20} Zentralinstanz mit {v22} Remote-Instanzen.


=== Erweiterungspakete bei zentraler Konfiguration

Um die phasenweise Aktualisierung zu erleichtern, bietet {CMK} seit {v21}p22 die Möglichkeit, gleichnamige Erweiterungspakete in verschiedenen Versionen – eines passend zur älteren Zentralinstanz, eines passend zu den neueren Remote-Instanzen – zu hinterlegen.
Aktiviert wird das jeweils passende.
Details beschreibt der xref:mkps#[Artikel zu Erweiterungspaketen (MKPs)].


=== Cascading Livestatus

Bei der Erweiterung um xref:distributed_monitoring#viewer[Viewer-Instanzen] dürfen die Viewer erst nach den Instanzen aktualisiert werden, deren Daten sie anzeigen.
Zeigt ein Viewer nur Daten von Remote-Instanzen, kann dessen Aktualisierung erfolgen, sobald diese aktualisiert sind.
Zeigt er dagegen auch Daten der Zentralinstanz, darf seine Aktualisierung erst als letztes stattfinden.
////
// end translation









[#updatedocker]
== Updating the Docker container

The update of a {CMK} site in the Docker container is very simple.
The following are the only requirements:

* The container is not deleted when the container is stopped -- i.e., the `--rm` option was not used at startup.

* You know the ID of the _volume_ for the container.
Normally you should have given its storage a unique ID when you started the container.
If you are unsure of your volume’s ID, you can retrieve information about the container named `myContainer` with the xref:managing_docker#commands[command] `docker inspect myContainer`.

If you followed the xref:introduction_docker#[installation guide for {CMK} in Docker] you should automatically meet the requirements.

The update process is performed in 3 steps:

. Stop the container.
If the {CMK} container is called `myContainer`, the command will be: `docker stop myContainer`.

. Remove the container.
The command is: `docker rm myContainer`.

. Start a new container with the command `docker container run` with the desired version, and mount the known volume.
If your volume is called `myVolume`, the corresponding option is `-v myVolume:/omd/sites`.
All options of the command can be found in xref:introduction_docker#[installation guide for {CMK} in Docker].

{CMK} will then automatically do the rest -- updating and starting your {CMK} site.
Afterwards you will be able to log in as usual.


// This block replaces the following section "Upgrading the {FE} to the full version"
// start translation
////
[#upgrade]
== Upgrades

=== Einleitung

Upgrades der {CRE} auf eine der {CEE} oder von einer der {EE} auf eine andere mit größerem Funktionsumfang sind jederzeit unkompliziert möglich.
Das Vorgehen ist im wesentlichen immer gleich:
Installieren Sie das gewünschte Paket und stellen Sie betroffene Instanzen mit `omd update` um.


[#updatedemo]
=== Upgrade der {FE} auf eine Vollversion

Mit {CMK} {v22} ist die auf 25 Hosts limitierte {CFE} weggefallen.
An deren Stelle kann nun die {CCE} mit bis zu 750 Services in einer Instanz ohne Lizenzierung betrieben werden.
Statt eines Upgrades muss beim Überschreiten der Schwelle lediglich ein Lizenzschlüssel hinterlegt werden.

Das Upgrade der {FE} {v21} wird daher vom Artikel xref:update_major#[Update auf Version {v22}] vollständig abgedeckt.

Sollte in Ihrem Fall die Limitierung auf 25 Hosts der {FE} ausreichend gewesen sein, aber 750 kostenlose Services genügen nicht, so haben Sie neben dem Erwerb einer Subskription die Möglichkeit des Downgrades auf die {RE}.
Führen Sie in diesem Fall das xref:#cee2cre[Downgrade nach {RE}] _vor_ dem Update auf {v22} durch.


[#updateraw]
=== Upgrade der {RE} auf eine der {EE}

Dieses Kapitel deckt primär das Upgrade zur {SE} ab.
Sie können in einem Schritt auch zur {CE} upgraden, beachten Sie in diesem Fall jedoch auch die Hinweise im folgenden Kapitel.

Da die {EE} etliche zusätzliche Module und Features haben, gibt es nach der Umstellung ein paar Dinge zu beachten.
Der entscheidende Punkt ist, dass beim Anlegen von _neuen_ Instanzen der {RE} bzw. {EE} _unterschiedliche Standardeinstellungen_ gesetzt werden.


==== Nagios vs. CMC

Da die {RE} nur Nagios als Kern unterstützt, ist dieser bei Instanzen voreingestellt, die mit der {RE} erstellt wurden.
Diese Einstellung bleibt beim Upgrade auf die {CSE} erhalten.
Das bedeutet, dass Sie nach einem Upgrade zunächst weiterhin mit Nagios als Kern fahren.
Eine Umstellung auf den CMC erfolgt mit `omd config` und wird in einem xref:cmc_migration#[eigenen Artikel] beschrieben.


==== RRD-Format

Die {EE} unterstützen ein alternatives Format für die Speicherung historischer Messdaten, welches deutlich weniger Platten-I/O erzeugt.
Bei neuen {EE}-Instanzen ist dies automatisch voreingestellt.
{RE}-Instanzen werden auch hier beim Upgrade nicht automatisch umgestellt.
Wie das Umstellen geht, beschreibt ein eigener xref:graphing#rrdformat[Abschnitt] im Artikel über xref:graphing#[Messwerte und Graphen.]


==== Benachrichtigungs-Spooler

Die {RE} hat keinen Benachrichtigungs-Spooler.
Deswegen ist dieser nach dem Umstieg auf eine der {EE} ausgeschaltet.
Wie dieser eingeschaltet werden kann, erfahren Sie xref:distributed_monitoring#notifications[im Artikel zum verteilten Monitoring.]


==== Weitere Unterschiede

Um vollen Nutzen aus der {SE} ziehen zu können, beachten Sie bitte die xref:draft_feature_table#[Übersicht der Unterschiede zwischen {RE} und {SE}].


[#cee2cce]
=== Upgrade der {SE} auf die {CE}

Am Monitoring-Kern und dem Benachrichtigungssystem gibt es keine Unterschiede zwischen {SE} und {CE}.
Je nach Schwerpunkt des Einsatzes werden Sie den größeren Funktionsumfang oft erst beim Hinzufügen neuer Hosts nutzen.
An einigen Stellen ist dennoch die Überprüfung der vorhandenen Einstellungen angeraten.

Eine vollständige Übersicht der zusätzlichen Funktionalität bietet der xref:cce#[Artikel zur {CE}.]


==== Check-Plugins für Cloud-Services

Wenn Sie xref:monitoring_aws#[Amazon Web Services (AWS),] xref:monitoring_azure#[Microsoft Azure] oder xref:monitoring_gcp#[Google Cloud Platform (GCP)] überwachen, sind die der {CE} vorbehaltenen Services bestehender Hosts zunächst nicht aktiviert.
Sie können diese in der Regel [.guihint]#XYZ services to monitor# (wobei XYZ für den Namen der Cloud-Plattform steht) aktivieren.
Führen Sie anschließend eine Service-Erkennung bei diesen Hosts durch, um die nun verfügbaren Services zu finden.


==== Agent Controller im Push-Modus

Mit der Möglichkeit, Hosts direkt zu überwachen, welche zwar den {CMK}-Server erreichen können, aber nicht von diesem erreichbar sind, fällt in vielen Fällen die Notwendigkeit selbst gestrickter Lösungen mit xref:datasource_programs#[Datenquellen-Programmen] weg.
Sie können diese Hosts xref:agent_linux#changepush[auf Push-Modus umstellen] und so direktes Monitoring ermöglichen.


=== Editions-Upgrades in verteilten Umgebungen

Ähnlich wie bei Versions-Updates liegt der Fall bei Editions-Upgrades:
Bringen Sie zunächst die Remote-Instanzen auf die Edition mit dem größeren Funktionsumfang und ziehen Sie zum Abschluss die Zentralinstanz nach.
So ist sichergestellt, dass die Zentralinstanz nie versucht, den größeren Funktionsumfang betreffende Konfiguration an die Remote-Instanzen zu verteilen.

Im Falle des Upgrades auf die {CE} ist zudem zu beachten, dass die xref:hosts_autoregister#[Autoregistrierung von Hosts] erst möglich ist, wenn auch das Upgrade der Zentralinstanz abgeschlossen ist.
Der Grund liegt hier darin, dass die Prüfung auf erforderliche Berechtigungen durch die Zentralinstanz vorgenommen wird.


[#down2cee]
== Downgrades 

=== Einleitung

Auch Downgrades zwischen den Editionen sind vorgesehen.
Natürlich ist der Aufwand um so höher, je mehr Funktionen der höheren Versionen Sie nutzen oder lieb gewonnen haben.


[#cce2cee]
=== Downgrade der {CE} nach {SE}

Als Vorbereitung für das Downgrade von der {CE} nach {SE} müssen Sie mindestens die folgenden Änderungen vornehmen:

* Stellen Sie Hosts, die im Push-Modus arbeiten, xref:agent_linux#changepush[auf Pull-Modus um.]
Andernfalls empfängt {CMK} von diesen keine Monitoring-Daten und betroffene Hosts werden im Regelfall xref:monitoring_basics#stale[_stale_].

* Konfigurieren Sie die Agentenpakete für Ordner so um, dass keine xref:hosts_autoregister#[Autoregistrierung] mehr vorgenommen wird.
Backen Sie anschließend die Agentenpakete neu.

Ferner stehen nicht mehr alle Cloud-Services und weniger Dashboards zur Verfügung.
Als Folge werden Sie xref:wato_services#vanished[verschwundene Services] aufräumen müssen.

Eine Übersicht der Unterschiede zwischen {CE} und {SE} liefert xref:cce#[der Artikel zur {CE}].


[#cee2cre]
=== Downgrade der {SE} nach {RE}

Als Vorbereitung für das Downgrade von der {SE} nach {RE} müssen Sie mindestens die folgenden Änderungen vornehmen:

* Änderung des RRD-Datenbankformats mit der Regel [.guihint]#Configuration of RRD databases of hosts# auf [.guihint]#Multiple RRDs per host/service.#
Neben leichten Performance-Nachteilen ist hier anzumerken, dass eine Konvertierung nicht vorgesehen ist, demnach historische Monitoring-Daten nicht mehr sichtbar sind.

* Umschalten des Monitoring-Kerns von CMC auf Nagios – von dieser Änderung sind in erster Linie Performance-Nachteile zu erwarten.

Daneben sind unter Umständen nicht mehr alle Dashboards, Graphen-Einstellungen, Benachrichtigungs-Plugins und Spezialagenten verfügbar.
Anhand xref:draft_feature_table#[dieser Übersicht] können Sie ermitteln, wie viel {SE}-Funktionalität im Falle des Downgrades nach {RE} wegfällt und wo Sie gegebenenfalls weitere Anpassungen vornehmen müssen.
////
// end translation














[#updatedemo]
== Upgrading the {FE} to the full version

Was your first installation of {CMK} the {FE}?
Once you have a {SE} or {ME} subscription, you can simply upgrade your existing
sites to the full version.

The procedure is exactly the same as that for a ‘normal’ update.
The only difference is that a version's name with the `.cfe` suffix
is upgraded to a name with the `.cee` suffix.
Simply install the desired package of the full version, and switch the existing
site to this with `omd update`.

This upgrade can be most easily performed if both versions are identical,
apart from the `.cfe` and `.cee` suffixes respectively.
What this means for the functionality is that the {FE} is completely
identical to the full version. Thus an upgrade makes no difference at all.

A simultaneous upgrade with a change of version is however quite possible.
The fundamentals remain valid as for a xref:detailed[normal update of {CMK}].


[#updatecma]
[#upgrade]
=== Upgrading the {CMK} Appliance

You can also upgrade the {FE} appliance to a full version of one of the {EE} without data loss:

. xref:appliance_usage.html#cma_webconf_firmware[Upgrade the firmware] of the appliance via its web interface to the current firmware of the full version.
. xref:appliance_usage.html#manage_cmk[Install the {CMK} software] of the {SE} or the {ME} on the appliance.
. In the xref:appliance_usage.html#site_management[site management] of the appliance, switch the sites to the full version.

[#updateraw]
== Upgrading the {RE} to one of the {EE}

=== Introduction

An upgrade of the {CRE} to one of the {EE} is also possible. Here as well, the
procedure is the same as before: install the desired package, and upgrade
the sites with `omd update`.

Since a number of modules and features of the {EE} are not available in the {RE},
following a changeover there are a couple of points to be aware of.
The key point is that when creating _new_ sites of {RE} or {EE}
_different default settings_ are set.


=== Nagios vs. CMC

Since the {RE} only supports Nagios as its core, this is preinstalled in sites
created by the {RE}. This is retained when an upgrade to the {CSE} is made.
That means that after an upgrade, processing will initially continue with
a Nagios core. A migration to the CMC is performed with `omd config`,
and this procedure will be described in its xref:cmc_migration#[own article].


=== RRD-Format

The {EE} support an alternative format for saving historic performance data,
one which requires significantly less hard drive-I/O. This is preinstalled
in new {EE} sites. {RE} sites will not be changed over automatically
by an upgrade. How the migration can be performed is described in its own
xref:graphing#rrdformat[chapter] in the article covering
xref:graphing#[Performance data and graphing].


=== Notification spooler

The {RE} has no notification spooler. Thus following the changeover to one of the {EE}
it is not active at first. How to activate it can be learned
xref:distributed_monitoring#notifications[here].

















[#uninstall]
== Uninstalling {CMK}

=== Overview

The uninstallation of no longer required {CMK} versions is performed using the operating system’s package manager.
To do this, enter the installed package’s name – _not_ the file name of the original RPM/DEB file.
Important: Only delete {CMK} versions that are no longer being used by any site!

{CMK} sites that are no longer required can simply be removed with `omd rm` (thereby deleting all data as well!):

[{shell}]
----
{c-root} omd rm mysite
----


=== SLES, RedHat, CentOS

Here is how to identify which {CMK} packages are being used in RPM-based systems:

[{shell}]
----
{c-root} rpm -qa | grep check-mk
check-mk-enterprise-2.2.0p1-el9-38.x86_64.rpm
check-mk-raw-2.1.0p25-el9-38.x86_64.rpm
check-mk-raw-2.0.0p34-el8-38.x86_64.rpm
----

The deletion is performed with `rpm -e`:

[{shell}]
----
{c-root} rpm -e check-mk-raw-2.0.0p34-el8-38.x86_64.rpm
----


=== Debian, Ubuntu

Use the below to identify which packets are installed:

[{shell}]
----
{c-root} dpkg -l | grep check-mk
ii  check-mk-enterprise-2.2.0p1  0.jammy  amd64  Checkmk - Best-in-class infrastructure & application monitoring
ii  check-mk-raw-2.1.0p25        0.jammy  amd64  Checkmk - Best-in-class infrastructure & application monitoring
ii  check-mk-raw-2.0.0p34        0.jammy  amd64  Checkmk - Best-in-class infrastructure & application monitoring
----

The uninstallation is performed with `dpkg --purge`:

[{shell}]
----
{c-root} dpkg --purge check-mk-raw-2.0.0p34
(Reading database ... 567850 files and directories currently installed.)
Removing check-mk-raw-2.0.0p34 (0.jammy) ...
...
----


[#diagnose]
== Fault Diagnosis

If an error occurs when updating {CMK}, it is usually due to one of the following three causes, which have already been mentioned in the previous chapters:

* The manual intervention required by an xref:incompatible[incompatible change] has not been performed.
* You have installed an xref:incompatible_mkps[incompatible extension package (MKP)].
* There are incompatible scripts in the xref:local_files[local files] of the site directory structure.


[#files]
== Files and directories

The files and directories relevant to this article can be found here.
As always, paths that do not begin with `‘/’` apply after the site's home directory (`/omd/sites/mysite`).

[cols="25,~"]
|===
|Path |Function 

|`~/version` |Symbolic link to the installation of the {CMK} version used by this site.
|`/omd/versions` |In this directory a subdirectory exists for every installed {CMK} version. The files belonging to `root` and are never changed.
|`/omd/sites` |In this directory, for every site there is a home directory containing its configuration files and variable data. This data belongs to the site’s user, and can be changed by configuration and operations.
|`/usr/bin/omd` |Management command for {CMK} sites. This is a symbolic link to the default version’s `bin`-directory. When a particular site is accessed the `omd`-command substitutes itself with that of the appropriate version.
|===

