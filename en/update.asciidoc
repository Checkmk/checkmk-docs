// -*- coding: utf-8 -*-
// IGNORE Ctrl+D XYZ p22
include::global_attr.adoc[]
= Updates and Upgrades
:revdate: 2023-05-03
:title: Updates and Upgrades
:description: No matter whether Open Source, {FE} or {EE}: updating {CMK} has been made as easy as possible. The basic principles will be explained in this article.

{related-start}
xref:cmk_versions#[{CMK} versions]
xref:cmc#[The {CMK} micro core (CMC)]
xref:cmc_migration#[Migration to the CMC]
{related-end}


== Introduction

Updating {CMK} is a bit different than most other software packages that you may be familiar with.
Why is that?

The reason is that {CMK} not only allows multiple independent *sites* to run on a single server, 
but it also allows multiple xref:cmk_versions#[software versions] to be installed simultaneously.
With this system each site is assigned to an installed version of the software.
To illustrate, we can take the following situation on a fictional server:

image::update1.png[width=400]

Here the site `mysite1` uses version `2.0.0p3.cee`, but the sites `mysite2` and `mysite3` use version `2.0.0p1.cre`.
Though {CMK}-Version `2.0.0p1.cfe` is installed, it is currently not being used.

This example makes it clear that an update does not simply mean the installation of a new {CMK} RPM/DEB package on a server.
Another additional step is also required.
Let us take the following situation as an example:

image::update2.png[width=400]

Here the site `mysite` is to be updated to the {CMK}-version `2.0.0p3.cee`.
The first step is to download and install the appropriate RPM/DEB-Packet.
This is performed exactly as with the xref:install_packages#[initial installation].
At first the newly-installed version will not be used by any site, and it will look like this:

image::update3.png[width=400]

The second step will now be an update of the site from `2.0.0p1.cre` to `2.0.0p3.cee`.
This is achieved with the `omd update` command, which we will discuss in detail below:

image::update4.png[width=400]

Following the update, the (likely) no longer required version `2.0.0p1.cre` can be deleted by uninstalling the appropriate package.


[#before_update]
== Before the update

If you are planning to update {CMK} from version {v21} to version {v22}, you should first read the xref:update_major#[Update to version 2.2.0] article, in which we have compiled the most important issues you should consider before and after such an update.

But even if you have already installed a {v22} version and want to update to a new stable patch version of {v22}, the topics described in the following sections may still be relevant.


[#update_major_version]
=== Update to major versions

When updating to a higher major version, you must always update step-by-step through any possible intermediate versions until the target version has been reached, and _not_ just skip over any intermediate versions.
For example, if you want to update from version {v20} to version {v22}, first update to the intermediate version {v21}.
The reason for this procedure is simple: there are sometimes simply so many changes between two major versions that skipping versions can cause problems.

The `omd update` command also allows an 'update' to a _lower_ version.
This procedure is only intended for regressions.
After such an update in the reverse direction, many adjustments will be required to make the configuration and runtime environment compatible again -- especially, but not only, in the case of an 'update' to a lower major version.
We therefore strongly advise against such a procedure -- and will also no longer provide support in the case of an update to a lower version.


[#incompatible_mkps]
=== Incompatible and obsolete MKPs

Your monitoring system can be extended quite easily and conveniently using the {CMK} xref:glossar#mkp[extension packages (MKPs)]. 
On the one hand, it is possible that some older MKPs are no longer being maintained and thus may no longer be compatible with newer versions of {CMK}. 
On the other hand, we keep adding new plug-ins and functional extensions to {CMK}, which is why MKPs sometimes become obsolete. 
The functionality of those plug-ins and extensions is simply provided by {CMK} itself as standard.

If you have any MKPs installed, a check of these MKPs is strongly recommended for this reason. 
This will prevent incompatible packages from interfering with the update, or resulting in duplicate or at least very similar services following the update.

To do this, check your installed MKPs against our link:https://checkmk.com/integrations[Catalog of Check Plug-ins^] and remove any packages containing functions that are now provided natively by {CMK}. 
You can also use this opportunity to remove MKPs that may have only been installed for a test run. 
A list can be found in the [.guihint]#Setup# menu under [.guihint]#Maintenance > Extension packages#. 
On the command line, you can display the installed extensions with the `mkp list` command.
Check the output of this command for extensions that are no longer needed or that you cannot even identify.

Since version {v21}p22, {CMK} supports the installation of MKPs for a version newer than the currently running version in preparation for future updates.
When performing an update, the package for the lower {CMK} version is then disabled and the one for the higher one is enabled.
Details are explained in the xref:mkps#[article on using MKPs].

*Caution:*
If you have made local changes to files that originally came from MKPs, repack the MKP after increasing the version number.
During the update, otherwise modified files will be overwritten by those contained in the MKP.


[#local_files]
=== Local files

Local files allow you to customize and extend the functionality provided by {CMK}. 
These files are located in the local part of the site directory structure, i.e. in `~/local`. 
Local files can cause problems when updating, as they may no longer match the new {CMK} version.

Since it is not possible for {CMK} to intercept and handle local customizations and any third-party extension during an update, you should check your {CMK} site before an update to see if and which local files you are using.

Get an overview of the local files of your {CMK} site by executing the following command as the site user (where the `-L` option ensures that symbolic links are also followed):

[{shell}]
----
{c-omd} find -L ~/local -type f
----

In a fresh installation of {CMK}, you will currently only see a file called `README.TXT` listed.
Anything beyond that should be at the top of your troubleshooting list in case you have problems updating.

Ideally, local files are already fully packaged in xref:#incompatible_mkps[MKPs].
Use `mkp find` to identify unpackaged files.
For further details on creating packages, see our xref:mkps#developers[article on {CMK} extension packages].
Once packaged, each extension can be deactivated or reactivated as a complete element.


[#backup]
=== Backup and test run

We don't need to remind you of the importance of creating a backup immediately before any update, so that you don't risk losing too much of your monitoring history in the event of a failure. 
What is relevant at this point is that a regular backup can also serve you well for test runs of a pending update.
This practice enables you to restore the backup under an alternative name -- and then use the `newsite` site to test the update before it goes live:

[{shell}]
----
{c-root} omd restore newsite /path/to/backup
----

*Alternatively* you can also copy your site via `omd cp`.
For this, however, a live site must be stopped for a short time:

[{shell}]
----
{c-root} omd stop mysite && omd cp mysite newsite && omd start mysite
----

Then run the update on this new, cloned site first, for example, to check that the local changes mentioned above have been made in the new environment.
If the tests with the cloned site were successful, you will usually want to delete or at least stop it _before_ the actual update of the production site for space and performance reasons.


[#detailed]
== Updating {CMK}

=== Installing new versions

As described in the introduction, the first step with an update is the xref:install_packages#[installation] of the desired new xref:cmk_versions#[version] of {CMK}.
This is achieved in exactly the same way as with the initial installation -- it will however proceed somewhat more quickly since most of the dependent packages have already been installed.
In the following example we are installing the package for Ubuntu 22.04 (Jammy Jellyfish):

[{shell}]
----
{c-root} apt install /tmp/check-mk-enterprise-2.2.0p1_0.jammy_amd64.deb
----

*Note:* When installing a local package via `apt install`, you have to state the pull path to the .deb file.

A list of your installed {CMK} versions can be displayed at any time with the `omd versions` command:

[{shell}]
----
{c-root} omd versions
2.0.0p42.cre
2.1.0p22.cee
2.2.0p1.cee (default)
----

One of these listed versions is marked with `(default)`.
This default version will be used automatically when creating new sites, as long as no other version is specified with `omd -V myversion create mysite`.
The current default version can be queried with `omd version`, and it can be altered with `omd setversion`:

[{shell}]
----
{c-root} omd version
OMD - Open Monitoring Distribution Version 2.2.0p1.cee
{c-root} omd setversion 2.1.0p22.cee
{c-root} omd version
OMD - Open Monitoring Distribution Version 2.1.0p22.cre
----

The default version plays no role when managing _existing_ sites.
The `omd` command always starts with the version appropriate to the site for which the command is called.

A listing of the current sites and the versions they use is provided by the `omd sites` command:

[{shell}]
----
{c-root} omd sites
SITE             VERSION          COMMENTS
mysite           2.1.0p22.cee
test             2.2.0p1.cee      default version
----


[#execute]
=== Performing the update

Once the desired new version has been installed, the site can be updated.
No `root`-permissions are required for this.
The best way to do this is as a site user:

[{shell}]
----
{c-root} omd su mysite
----

Ensure that the site has been stopped:

[{shell}]
----
{c-omd} omd stop
----

The update -- in effect switching to a different version -- can now simply be performed with the `omd update` command:

[{shell}]
----
{c-omd} omd update
----

If more than one target version is available, a selection list will open:

image::update_omd-update-2.png[width=55%]

In the following dialog box, confirm the selected update to the new version:

image::update_omd-update-3.png[width=55%]

If you perform an _edition_ upgrade from an {RE} to one of the {CEE} at the same time as the _version_ update, you will be reminded of this fact again to be on the safe side:

image::update_raw_to_enterprise.png[width=55%]

An important part of an update is the refreshing of the originally provided configuration files.
Here changes that had possibly been made to these files by the user will not simply be discarded, instead they will be merged.
This functions very much like version control systems which attempt to amalgamate changes made to a single file simultaneously by multiple developers.

Occasionally -- when the changes affect the same location in the file -- that won't function, and a _conflict_ occurs.
How you can solve such conflicts will be explained xref:update#conflicts[later below].

The update provides a listing of all modified files and directories (shortened in the following example):

[{shell}]
----
2023-03-10 16:49:42 - Updating site 'mysite' from version 2.1.0p23.cee to 2.2.0p1.cee...

 * Identical new  etc/omd
 * Installed file etc/mk-livestatus/livestatus.socket
 * Updated        etc/mk-livestatus/nagios.cfg
...
 * Vanished       etc/jmx4perl/config/websphere
 * Vanished       etc/jmx4perl/config
Creating temporary filesystem /omd/sites/mysite_update/tmp...OK
Executing update-pre-hooks script "01_mkp-disable-outdated"...OK
Executing update-pre-hooks script "02_cmk-update-config"...
-| Initializing application...
-| Updating Checkmk configuration...
-| ATTENTION: Some steps may take a long time depending on your installation, e.g. during major upgrades.
-|  1/24 Rewriting password store...
-|  2/24 Migrate Visuals context...
...
-|  24/24 Rewriting InfluxDB connections...
-| Done
OK
Updating core configuration...
Generating configuration for core (type cmc)...
Starting full compilation for all hosts Creating global helper config...OK
 Creating cmc protobuf configuration...OK
Finished update.
----

Once everything has been successfully processed, the site is switched to the new version:

[{shell}]
----
{c-omd} omd version
OMD - Open Monitoring Distribution Version 2.2.0p1.cee
----

&#8230; and can then be started:

[{shell}]
----
{c-omd} omd start
----


[#incompatible]
=== Incompatible changes

Software development of course consists of changes.
Because we are always actively working to keep {CMK} modern, sometimes cutting dead weight and making changes that turn out to be _incompatible_ is unavoidable.
That means that when updating it may _possibly_ be necessary to adapt your configuration, or you should at least check it.

A typical example of such a situation is with new check plug-ins which replace existing plug-ins.
If you use one of the affected plug-ins, a fresh xref:glossar#service_discovery[service discovery] will be required on the affected host.

An overview of all changes in {CMK}, including a search function, can be found online in our link:https://checkmk.com/werks[Werks^].

Even more practical however is the built-in search function in the release notes.
After you have logged in to the site, you will find the link highlighted in red in the [.guihint]#Help# menu:

image::update_help_menu_incompatible_werks.png[width=65%]

{CMK} keeps track of incompatible changes that occurred during the update from the original to the current version and asks you to check and then _acknowledge_ them:

image::update_incomp_werks.png[]

You can call up each 'Werk', i.e. each change, individually, view it, confirm it with a mouse click -- and thus successively reduce the number of open incompatible changes.
In addition, you can use the [.guihint]#Filter# button to show the filter bar and thus have access to the complete history of changes.


=== The update in detail

Are you curious about what exactly is happening ‘under the hood’ of an update?
Or have data conflicts appeared when `omd update` is running?
If so, here is some further reading.

Three actions take place during `omd update`:

. The refreshing of the default files under `~/etc/` and `~/var/` – i.e., files created by `omd create`.

. The switching of the active version to the target version by changing the symbolic link `version` which is found in the site directory.

. Post-processing by various packages (e.g., {CMK}).
In particular, an xref:glossar#activate_changes[activate changes] will be automatically executed in order to generate a valid configuration for the core.


==== Updating files, merging changes

The first step is by far the most comprehensive.
Here {CMK} demonstrates a big advantage in comparison to the typical software installation --
{CMK} helps you to adapt all of the standard configuration files to the prerequisites of the new version.
This resembles the procedure for updating a Linux distribution, but goes further in the implementation.
{CMK} can handle a multiplicity of situations, for example:

* The merging of file changes with changes made locally by the user.
* Files, directories and symbolic links which are obsolete in the new version, or which have been deleted by the user.
* Changes to permissions.
* Changes to a file type (a symbolic link derived from a file or directory, or vice versa).
* Changes to the target of a symbolic link.

{CMK} always ensures that your local changes are retained, and that all of the changes required by the new version are simultaneously implemented.


[#conflicts]
==== Merging and conflicts

If the new version intends changing a configuration file on which the user has also made changes, {CMK} automatically attempts to _merge_ both sets of changes.
This is achieved using the same methods as used by version-control systems.

The fewest problems are experienced when your and {CMK}’s changes have a clear physical separation in the text (at least a few lines apart).
The merge will then be effected automatically, and without needing the user’s intervention.

If two changes ‘collide’ because they both affect the same location in the data,
{CMK} cannot and will not decide which of the changes is more important.
In such a situation you are switched on as a user and can interactively resolve the conflict:

image::omd-update.png[width=85%]

In the situation shown above, you now have the following options:

[cols="5,~"]
|===

|*d* |This shows the differences between the new default version and your version of the file in the form of a ‘unified diff’ (`diff -u`).
|*y* |This is similar to the above, but based on the preceding default version shows which changes you have made to the file.
|*n* |This third option in effect ‘closes the triangle’ by showing the changes which {CMK} intends making to the file.
|*e* |Resolve the conflict manually in an editor.
|*t* |By selecting *t*, your original file – without the already successfully-merged changes – will be opened in an editor. Now edit the file in order to bypass possible conflicts. Once the editor has been closed {CMK} will reattempt the merge.
|*k* |Here you can decide whether to accept the data ‘as is’. The successfully inserted changes are retained. Apart from this the file remains as customized by the user.
|*r* |With this you can fall back to the old version of your file, and go without {CMK}’s update for this file. Any customizations that may be required must be performed manually.
|*i* |Install the new default file version: your changes in the old file will be lost.
|*s* |If you are uncertain, you can open a shell with *s*. You will find yourself in a directory containing the relevant file, and there can get a picture of the situation. Quit the shell with Ctrl+D in order to proceed with the update.
|*a* |Abort the update. The site retains the old version. Files that have already been changed during the update however remain changed! A new update attempt can be started at any time.
|===


==== Further conflict situations

Alongside the content-merging of files there is a whole series of further situations in which {CMK} requires your decisions.
Some of these are very unusual situations, that nevertheless need to be handled correctly.
In these cases {CMK} will always give you the choice of keeping your version, or of adopting the new default version.
What is more, there is always the option of aborting an update, or of opening a shell.
Examples of such ‘difficult’ situations are:

* conflicting changes to file types (e.g., when a file is replaced by a symbolic link)
* conflicting changes to file permissions
* changed files that are not required by the new software version
* files, directories or links created by a user, which conflict with a new version’s files/directories/links


==== Explanation of the output during an update

The update procedure will always output a line of explanation when it makes a change to a file automatically.
The following situations are possible – files are referred to here, but this also applies analogously to links and directories:

[cols="20,~"]
|===

|Updated |A file has been changed with the new version. Since you have not made a change to the file, {CMK} simply installs the new default version of the file.
|Merged |A file has been changed with the new version, and at the same time the user has made other changes to the file. Both versions of the file can be merged into one without conflict.
|Identical |A file has been changed in the new version, and at the same time the user has already made identical changes to the file. {CMK} must not perform any action.
|Installed |The new version includes a new configuration file which has just now been installed.
|Identical{nbsp}new |The new version includes a file, an identical copy of which the user has already installed.
|Obsolete |The new version has obsoleted a file (also applies to a link or a directory). The user has anyway already deleted it. No action.
|Vanished |Another file is obsolete in the new {CMK}, and the user has neither deleted nor changed the existing version. {CMK} deletes this file automatically.
|Unwanted |The user has deleted a file which is normally present. Because the version in the new {CMK} has no changes from the last version of the file, {CMK} allows the file to be absent.
|Missing |The user has already deleted a file, but in the new {CMK} this file contains changes from the previous version. {CMK} installs the new file, and logs a notification of this action to the user.
|Permissions |{CMK} has updated a file’s permissions because different permissions are set in the new version.
|===


=== Updating without user interaction

Would you like to automate {CMK}’s software updates?
You may at first have difficulties with the interactive responses from `omd update`.
There is a simple solution for this scenario: the command has options that have been especially conceived for use in scripts:

* The options `-f` or `--force` directly following `omd` inhibit all types of "Are you sure... ?" questions.
* The option `--conflict=` directly following `update` determines the desired behavior if a file conflict occurs.

Possible values for `--conflict=` are:

[cols="20,~"]
|===

|`--conflict=keepold` |In the case of a conflict, the user’s own modified version of the file is retained. It is however possible that {CMK} may not be executable, and that manual rectification will be required.
|`--conflict=install` |In the event of a conflict, the new standard version of the file will be installed. With this, local changes to the file will be at least partly lost.
|`--conflict=abort` |In the event of a conflict the update is stopped. That does *not* necessarily mean that _everything_ will fall back to the old state. A number of configuration files may have already been updated. The software version will however remain the old version.
|`--conflict=ask` |This is the standard procedure, so in this form the option is actually superfluous.
|===

Below is an example of the complete command for an automated update to version `2.2.0p1.cee` of `mysite`:

[{shell}]
----
{c-root} omd stop mysite ; omd -f -V 2.2.0p1.cee update --conflict=install mysite && omd start mysite
----

Through the `&amp;&amp;` before `omd start` a restarting of the site will be prevented if the `omd update` is aborted by an error.
Replace the `&amp;&amp;` with a semicolon (`;`) if a start should definitely be attempted even in such a situation.

If you are certain that only a single {CMK} site is running on the server, the name to be used in a shell script can simply be trapped in a variable:

[{shell}]
----
{c-root} omd sites --bare
mysite
{c-root} SITENAME=$(omd sites --bare)
{c-root} echo $SITENAME
mysite
----

This enables the above line to be independent of the site’s name.
For example, a small shell script could look like this:

.update.sh
[{file}]
----
#!/bin/bash
SITE=$(omd sites --bare)
VERSION=2.2.0p1.cee

omd stop $SITE
omd -f -V $VERSION update --conflict=install $SITE  && omd start $SITE
----


[#updatedistributed]
== Updating in distributed environments

// This block replaces the following 3 paragraphs
// start translation
////

Es gibt zwei unterschiedliche Vorgehensweisen, um das Update aller in einem xref:distributed_monitoring#[verteilten Monitoring] beteiligten Instanzen –  d.h. der Zentralinstanz und der Remote-Instanzen – durchzuführen.

*Wichtig:* 
Für welches Vorgehen Sie sich auch entscheiden:
Sie sollten auch in diesem Szenario vorher xref:backup#[Backups] aller Instanzen anlegen.

Das bevorzugte, sichere Vorgehen ist das _Update in einem Rutsch_, bei dem Sie folgende Schritte ausführen:

. Zunächst stoppen Sie alle Instanzen.
. Führen Sie dann das Update für alle Instanzen durch.
. Starten Sie die aktualisierten Instanzen wieder.

Ist dies nicht möglich – beispielsweise, weil die Umgebung auf Instanzen in verschiedenen Zeitzonen und betreuenden Teams verteilt ist – kann unter strengen Auflagen ein vorübergehender Mischbetrieb erfolgen.
Der Versionsunterschied darf bei Major-Updates exakt eine Version betragen und setzt immer ein bestimmtes Patchlevel der Ausgangsversion voraus.

Diese Reihenfolge muss dafür unbedingt eingehalten werden: Zunächst nehmen Sie die Aktualisierung aller Remote-Instanzen vor, erst als letztes führen Sie das Update der Zentralinstanz durch.
So ist sichergestellt, dass zu keinem Zeitpunkt eine von einer neueren {CMK}-Version erzeugte Konfiguration bei einer älteren {CMK}-Version landet. 

Die folgende Tabelle zeigt die möglichen Kombinationen beim Update von {v21} zur {v22}:

[cols="17,17,17,~",options="header"]
|===
|Zentralinstanz |Remote-Instanz |Erlaubt?|Hinweise
|{v21} |{v21} |Ja | Zustand vor dem Update aller Instanzen.
|{v21} |{v22} |Ja | Während des Updates sind kleinere Funktionseinbußen zu erwarten, halten Sie den Mischbetrieb daher kurz. Es besteht keine Gefahr für Daten und Konfiguration.
|{v22} |{v21} |*Nein* | *Achtung:* Bei xref:distributed_monitoring#distr_wato[zentraler Konfiguration] besteht hier die Gefahr, Remote-Instanzen irreparabel zu beschädigen. Vermeiden Sie diesen Zustand unbedingt!
|{v22} |{v22} |Ja | Zustand nach dem Update aller Instanzen.
|===

////
// end translation

Updates in xref:distributed_monitoring#[distributed environments] always require that all remote sites be updated first, _before_ the central site is updated last.
This ensures that at no time does a configuration generated by a newer {CMK} version end up in an older {CMK} version.

*Important:* In general, when updating in distributed environments, we advise stopping all monitoring sites, updating them (first remote sites, and then the central site), and then restarting all of them.

If this is not possible -- for example, because the environment is distributed across sites in different time zones and supporting teams -- temporary mixed operation can be used under strict conditions.
A version mismatch may not exceed one version in the case of major updates and always assumes a certain patch level of the initial version.













=== Technical background

The technical reason for the updating approach as described above lies in the protocols used:
The central site accesses the data on the remote sites primarily by reading via xref:glossar#livestatus[Livestatus], and
in the case of a xref:distributed_monitoring#distr_wato[central configuration], with additional write access via a non-public HTTP API.
In both situations, it is the case that new versions introduce real supersets of the protocols used.
Thus, an older central site uses only a true subset of the functionality of the newer remote sites.
If the central site were updated first, it might issue API calls or Livestatus requests to the remote sites that these do not yet 'understand'.

The maximum version difference of _one_ major version again results from the fact that the removal of interfaces is accompanied by a _grace period_ of exactly one version.
For example, the Web API was already no longer used internally by {CMK} {v21}, but its removal did not occur until version {v22}.
For this reason, a {v21} central site works with {v22} remote sites, but a {v20} central site will not work with {v22} remote sites.


=== Extension packages for use in centralized configurations

To facilitate such phased updates, from version {v21}p22 {CMK} provides the ability to store extension packages with the same name in different versions -- one matching the older central site, one matching the newer remote sites -- for example.
The appropriate version will be activated for each site.
Details are described in the xref:mkps#[article on extension packages (MKPs)].


=== Cascading Livestatus

With the xref:distributed_monitoring#viewer[viewer sites] extension, the viewer sites may be updated only after the sites whose data they display.
If a viewer site only shows data from remote sites, it may be updated as soon as these are updated.
If, on the other hand, it also shows data from the central site, the viewer's update may only take place last.


[#updatedocker]
== Updating a Docker container

The update of a {CMK} site in the Docker container is very simple.
The following are the only requirements:

* The container is not deleted when the container is stopped -- i.e., the `--rm` option was not used at startup.

* You know the ID of the _volume_ for the container.
Normally you should have given its storage a unique ID when you started the container.
If you are unsure of your volume’s ID, you can retrieve information about the container named `myContainer` with the xref:managing_docker#commands[command] `docker inspect myContainer`.

If you followed the xref:introduction_docker#[installation guide for {CMK} in Docker] you should automatically meet the requirements.

The update process is performed in 3 steps:

. Stop the container.
If the {CMK} container is called `myContainer`, the command will be: `docker stop myContainer`.

. Remove the container.
The command is: `docker rm myContainer`.

. Start a new container with the command `docker container run` with the desired version, and mount the known volume.
If your volume is called `myVolume`, the corresponding option is `-v myVolume:/omd/sites`.
All options of the command can be found in xref:introduction_docker#[installation guide for {CMK} in Docker].

{CMK} will then automatically do the rest -- updating and starting your {CMK} site.
Afterwards you will be able to log in as usual.


[#upgrade]
== Upgrades

=== Introduction

Upgrades from the {CRE} to one of the {CEE} or from one of the {EE} to another with greater functionality are straightforward at any time.
The procedure is essentially always the same:
Install the desired package and switch the relevant sites with `omd update`.


[#updatedemo]
=== Upgrading the {FE} to a full version

With {CMK} {v22} the {CFE}, limited to 25 hosts, has been dropped.
In its place, the {CCE} may be used without a license (i.e. at no cost), however it will be limited to a single site with a maximum of 750 services in that site.
If you wish to exceed these restrictions, you will need to purchase a licensed version of the CCE.

Such an upgrade of a {FE} {v21} is fully covered by the xref:update_major#editions[Update to version {v22}] article.


[#updateraw]
=== Upgrading the {RE} to one of the {EE}

This chapter primarily covers an upgrade to the {SE}.
You can also upgrade to the {CE} in one step, but in this case, also refer to the notes in the following chapter.

Since the {EE} has quite a few additional modules and features, there are a few things to keep in mind following any upgrade.
The crucial point is that when creating _new_ sites in the {RE} or {EE}, _different default settings_ are set.


==== Nagios vs. the CMC

Since the {RE} only supports Nagios as its core, this is the default setting for sites created with the {RE}.
This setup will be preserved when upgrading to the {CSE}.
This means that after an upgrade you will initially continue to run with Nagios as the core.
A migration to the CMC is done with `omd config` and is described in its own article xref:cmc_migration#[Migration to the CMC].


==== The RRD format

The {EE} support an alternative format for storing historical measurement data, which generates significantly less disk I/O.
This format is automatically preset for new {EE} sites.
Again, {RE} sites are not automatically converted during an upgrade.
How to switch the data formats is described in a separate xref:graphing#rrdformat[section] in the article on xref:graphing#[measured values and graphing].


==== Further differences

To take full advantage of the {SE}, refer to the overview of differences between the {RE} and the xref:cse#[{SE}].


[#cee2cce]
=== Upgrading from the {SE} to the {CE}

When it comes to the monitoring core and the notification system, there are no differences between the {SE} and the {CE}.
Depending on the focus of the deployment, you will often use the larger feature set only when adding new hosts.
In some places, however, it is still advisable to review the existing settings.

For a complete overview of the additional functionality, see the article on the xref:cce#[{CE}].


==== Check plug-ins for cloud services

When you monitor xref:monitoring_aws#[Amazon Web Services (AWS)], xref:monitoring_azure#[Microsoft Azure], or xref:monitoring_gcp#[Google Cloud Platform (GCP)], the services in existing hosts reserved for the {CE} will initially not be enabled.
You can enable these services in the [.guihint]#XYZ services to monitor# rule (where XYZ is the name of the cloud platform).
Then perform a service discovery on these hosts to find the services that will now be available.


==== Agent Controller in push mode

With the ability to directly monitor hosts that can reach the {CMK} server but are not accessible from it, the need for homegrown solutions with xref:datasource_programs#[data source programs] is eliminated in many cases.
You can xref:agent_linux#changepush[switch these hosts to push mode] to enable a direct monitoring.


=== Upgrading editions in distributed environments

The procedure for edition upgrades is similar to that for version upgrades:
First upgrade the remote sites to the edition with the larger feature set, and then upgrade the central site.
This ensures that the central site never tries to distribute the larger feature set configuration to the remote sites.

In the case of an upgrade to the {CE}, also note that the xref:hosts_autoregister#[auto-registration of hosts] is not possible until the upgrade of the central site has also been completed.
The reason for this is that the check for required permissions is performed by the central site.


[#down2cee]
== Downgrades 

=== Introduction

Downgrades between editions are also possible.
A downgrade is a more complex and thus time-consuming action, since some features may not work in the target edition,
and will need to be manually deactivated and replaced by a possibly less efficient or less convenient alternative.


[#cce2cee]
=== Downgrading from the {CE} to the {SE}

In preparation for a downgrade from the {CE} to the {SE}, you must make at least the following changes:

* Set hosts that operate in push mode to xref:agent_linux#changepush[pull mode], otherwise {CMK} will not receive monitoring data from them and their associated hosts will become xref:monitoring_basics#stale[_stale_].

* Reconfigure the agent packages for folders to stop xref:hosts_autoregister#[auto-registration].
Then rebake the agent packages.

Furthermore, some cloud services and dashboards will no longer be available.
As a result, you will need to clean up xref:wato_services#vanished[vanished services].

If under the {CE} you used the xref:grafana#[Grafana plug-in] from the 'Grafana Store', you will need to replace it with one installed from the zip archive.

An overview of the differences between the {CE} and the {SE} is provided by xref:cce#[the article on the {CE}].


[#cee2cre]
=== Downgrading from the {SE} to the {RE}

In preparation for downgrading from {SE} to {RE}, you will need to make at least the following changes:

* Change the RRD database format with the [.guihint]#Configuration of RRD databases of hosts# rule to [.guihint]#Multiple RRDs per host/service#.
Besides slight performance disadvantages, it should be noted here that conversion of existing data is not included, so historical monitoring data will no longer be visible.

* Switch the monitoring core from CMC to Nagios -- in the first place this change is likely to result in performance disadvantages.

In addition, some dashboards, graph settings, notification plug-ins and special agents may no longer be available.
Using this xref:cse#[Standard Edition overview] you can determine how much {SE} functionality will be lost with a downgrade to the {RE} and where you may need to make further customizations.


[#uninstall]
== Uninstalling {CMK}

=== Overview

The uninstallation of no longer required {CMK} versions is performed using the operating system’s package manager.
To do this, enter the installed package’s name – _not_ the file name of the original RPM/DEB file.
Important: Only delete {CMK} versions that are no longer being used by any site!

{CMK} sites that are no longer required can simply be removed with `omd rm` (thereby deleting all data as well!):

[{shell}]
----
{c-root} omd rm mysite
----


=== SLES, RedHat, CentOS

Here is how to identify which {CMK} packages are being used in RPM-based systems:

[{shell}]
----
{c-root} rpm -qa | grep check-mk
check-mk-enterprise-2.2.0p1-el9-38.x86_64.rpm
check-mk-raw-2.1.0p25-el9-38.x86_64.rpm
check-mk-raw-2.0.0p34-el8-38.x86_64.rpm
----

The deletion is performed with `rpm -e`:

[{shell}]
----
{c-root} rpm -e check-mk-raw-2.0.0p34-el8-38.x86_64.rpm
----


=== Debian, Ubuntu

Use the below to identify which packets are installed:

[{shell}]
----
{c-root} dpkg -l | grep check-mk
ii  check-mk-enterprise-2.2.0p1  0.jammy  amd64  Checkmk - Best-in-class infrastructure & application monitoring
ii  check-mk-raw-2.1.0p25        0.jammy  amd64  Checkmk - Best-in-class infrastructure & application monitoring
ii  check-mk-raw-2.0.0p34        0.jammy  amd64  Checkmk - Best-in-class infrastructure & application monitoring
----

The uninstallation is performed with `dpkg --purge`:

[{shell}]
----
{c-root} dpkg --purge check-mk-raw-2.0.0p34
(Reading database ... 567850 files and directories currently installed.)
Removing check-mk-raw-2.0.0p34 (0.jammy) ...
...
----


[#diagnose]
== Fault Diagnosis

If an error occurs when updating {CMK}, it is usually due to one of the following three causes, which have already been mentioned in the previous chapters:

* The manual intervention required by an xref:incompatible[incompatible change] has not been performed.
* You have installed an xref:incompatible_mkps[incompatible extension package (MKP)].
* There are incompatible scripts in the xref:local_files[local files] of the site directory structure.


[#files]
== Files and directories

The files and directories relevant to this article can be found here.
As always, paths that do not begin with `‘/’` apply after the site's home directory (`/omd/sites/mysite`).

[cols="25,~"]
|===
|File path |Function 

|`~/version` |Symbolic link to the installation of the {CMK} version used by this site.
|`/omd/versions` |In this directory a subdirectory exists for every installed {CMK} version. The files belonging to `root` and are never changed.
|`/omd/sites` |In this directory, for every site there is a home directory containing its configuration files and variable data. This data belongs to the site’s user, and can be changed by configuration and operations.
|`/usr/bin/omd` |Management command for {CMK} sites. This is a symbolic link to the default version’s `bin`-directory. When a particular site is accessed the `omd`-command substitutes itself with that of the appropriate version.
|===