include::global_attr.adoc[]
= {CMK} server in a Docker container
:revdate: 2021-04-22
:title: {CMK} server in a Docker container
:description: Following the start of a docker container is its ongoing maintenance. This article describes what peculiarities should be noted.

{related-start}
link:introduction_docker.html[Installation as a Docker container]
link:introduction_virt1.html[Installation of a virtual appliance]
link:update.html[Updates and Upgrades]
{related-end}



== {CMK} in a Docker container

In our xref:introduction_docker#[installation guide for {CMK} in Docker] we've
already shown you how to set up {CMK} in a Docker container. This article takes
a closer look at more of the details.


== Optional parameters during the setup

All of the following parameters are specified additionally when setting up a
{CMK} site as a container and are therefore not available separately.


[#https]
=== Using HTTPS

If {CMK} is the only web server on your dockernode, you can also bind the
port to the standard (`80`) HTTP port. As soon as you you have multiple
web servers on a dockernode however, you will probably use a reverse-proxy
like NGINX – this directs the inquiries to the correct container. With this
technology you can also use (possibly preexisting) HTTPS. The reverse proxy
will then be addressed via HTTPS, while communicating with the container
continues via HTTP.


=== Setting an initial password

In {CMK}, when xref:checkmk_getting_started#create_site[creating a site] a random password for the default user `cmkadmin` is created. 
When creating a {CMK} container you can also
assign a password manually. Simply add the
`-e CMK_PASSWORD='mypassword'` option during the creation process.


=== Setting your own instance ID

With the default command to create a {CMK} container, the ID of the instance
created in the container will be `cmk`. This is important to be able to
access the instance via HTTP(S) and it must therefore be explicit. If you have
multiple containers of {CMK} on the same dockernode, you will have to set the ID
manually to ensure this uniqueness. You can do that by including the `-e
CMK_SITE_ID=mysite` option.


=== Sending notifications

An important feature of {CMK} is the sending of
xref:monitoring_basics#notifications[notifications] per email. {CMK} uses
Postfix as its MTA (Mail Transfer Agent) for outgoing mails. This postfix instance
is configured not to deliver mails directly to the recipient, but basically
tries to forward to an additional mail server (SMTP Relay Server, Smarthost) which
you need to provide outside of the container. Such a relay server is available
in almost every organization.

When implementing, specify the relay mail server that will forward the notifications.
In the `-e` option,
use the `MAIL_RELAY_HOST` variable -- e.g., `-e MAIL_RELAY_HOST='mailrelay.mydomain.com'`. If the mail server expects a specific host name, add the following
option: `--hostname 'mymonitoring.mydomain.com'`.

{CMK} containers currently do not support the configuration of access data for a smart host.
You can bind a postfix configuration or configuration folder from the docker node
if you need them.

If you use one of the {CEE}, you are able to bypass postfix completely so that {CMK} forwards notifications directly to a smarthost. This is done by the
xref:notifications#syncsmtp[synchronous SMTP], which is described in detail in
the article about xref:notifications#[notifications]. Here an authentification over SMTP is also possible.


=== Access to Livestatus via TCP

As soon you connect multiple {CMK} containers/instances together
in a distributed environment you will need a special TCP port for the
Livestatus interface. This interface allows communication between the
instances. Bind this port – likewise the port for HTTP – to one of the
Docker nodes, and enable this TCP port in the Livestatus instance: `-e
CMK_LIVESTATUS_TCP=on -p 6557:6557`.


[#bash]
=== Access via the command line

In some cases you will want to execute commands on the command line.
Because commands for an instance are always executed via a special user,
you must specify this when logging in. In {CMK} the user always has the
same name as the instance it manages. Specify the user `cmk` with the `-u cmk` option:

[{shell}]
----
{c-root} docker container exec -it -u cmk monitoring bash
----

You can then pass your xref:cmk_commandline#[commands] to the instance.


=== Using the Event Console

{CMK} is able to receive SNMP traps and syslog messages. To be able
to use this feature in a {CMK} container, the standardized ports must
be provided to the {CMK} container with the following options: `-p
162:162/udp -p 514:514/udp -p 514:514/tcp`. In order that the instance
itself also respects these ports, next activate the the appropriate add-ons
in the instance with xref:omd_basics#omdconfig[`omd config`]. You can
find these in the `Addons` submenu:

[{shell}]
----
{c-root} docker container exec -it -u cmk monitoring bash
{c-omd} omd config
----


== Creating your own container-images

With the help of our our repository you can also
create your own images with a {CEE}. Clone the current
link:https://github.com/tribe29/checkmk[{CMK}-Git], and navigate to the
`docker` directory. With the help of your customer data you can now
create your own image:

[{shell}]
----
myuser@myhost:~/git/check_mk/docker$ docker build \
    --build-arg CMK_VERSION=1.5.0p5 \
    --build-arg CMK_EDITION=enterprise \
    --build-arg CMK_DL_CREDENTIALS='myusername:mypassword' \
    -t mycompany/check-mk-enterprise:1.5.0p5
----

During the build process you will need two external files which -- using your customer login data -- will be automatically downloaded from our download server. To prevent this you can also
first load the necessary files manually and place them in the `docker`
directory:

* The {CMK} installation package for Debian Stretch
* The public GPG-Key for the installation packet


[#commands]
== Useful commands

[cols=2]
|===
|Command |Function 

|docker inspect myContainer |With this command you can get all sorts of information about a running container with the name `myContainer`. Among other things, here you will also find which data storage devices (volumes) are integrated. This is especially useful if you haven’t given the volume a human-readable name and want to xref:update#updatedocker[update your container] .
|===

