include::global_attr.adoc[]
= Extended availability (SLAs)
:revdate: 2022-02-10
:title: Extended availability (SLAs) - Configuring and evaluating SLAs
:description: Service level agreements (SLAs) are often not displayable as simple availability. This article explains how to configure and use complex SLAs.

{related-start}
xref:availability#[Availability]
xref:views#[Host and service views]
xref:wato_rules#[Host and service parameters]
{related-end}


== Introduction

=== What do SLAs do?

In {CMK} you can evaluate xref:availability#[availability], and for these also configure a rudimentary xref:availability#thresholds[SLA evaluation].
Now the absolute availability over a given period is not particularly meaningful.
To take an extreme example: an availability of 99.9 percent would allow less than 10 hours of downtime per year -- actually only 8 hours, 45 minutes and 36 seconds to be precise.
Distributing these 8.76 hours over a year averages a bit more than 43 minutes per month -- which may be acceptable for many systems.
A complete hour outage at a stretch would however cause a lot of damage.
It is obvious that such an outage should be reflected in the assessment of availability.

{cee-only} {CMK} has a separate function for Service Level Agreements (SLA) if you're using one of the {EE}.
The SLA feature builds on the availability data and now allows a much more detailed evaluation.

Two different requirements can be implemented:

* Percentage SLA: Percentage that a service status ({OK}, {WARN}, {CRIT}, {UNKNOWN}) is above or below a given value.
* Outage SLA: Maximum number of outages – more precisely the status {CRIT}, {WARN}, {UNKNOWN} for a given duration.

You can combine multiple sites of one or both requirements – for example, to ensure that during the reporting period a particular service is at least 90 percent {OK}, and that a maximum of two events of two or more minutes are permitted to flag the {CRIT} condition.

The results of these calculations can later be rendered in two variants in views:

* Service-specific: A service will display its associated SLA.
* Column-specific: A fixed SLA is displayed for each service.

For example, here you can see the evaluation for a file system in the overview: from today (with 3 icons in the rightmost column) and the last 15 days before that -- and also immediately that there were obvious problems until 4 days ago:

.Icons in the SLA column show the status of the different SLA periods: on the far right the current one is displayed
image::sla_view_example_modern.png[alt="A view with a service and the SLA information in the right column."]

But what do these evaluations bring you now?
On the one hand you can see the fulfillment or non-fulfillment of completed SLAs, and for example, disclose these to the customers.
On the other hand, you can already identify an impending failure in advance:
By default, the SLA indicator will light up {CRIT} when its value has been exceeded.
But it can also be adjusted so that it already goes to {CRIT} if, for example, the permitted {CRIT} status for the service has reached 80 percent – and before that point it could change to a {WARN} flag.

Ultimately, SLAs are mostly very detailed views, generated from charged availability data.
You will see these later at two points:
in tables, optionally for all hosts and services listed there, or only for services that are specifically tied to individual SLAs.
Secondly, there is a comprehensive detail page for each service-SLA combination.


=== Functionality

The data basis for the SLA function is the availability data.
The calculations on the SLA specifications are, of course, not applied to the entire raw data inventory – after all, SLA reports should cover specific time periods.
So first it is determined for which period the SLA requirements should be met – the so-called ‚SLA period’.
For example: "The service _MyService_ within a one month period should be at least 90 percent {OK}."
For this SLA period not necessarily (inevitably) all data for the month over a 24/7 operation will be used.
The data can be converted to the xref:timeperiods#[time periods] defined in the Setup, i.e., be limited roughly to working hours.

This then results in a more concrete requirement such as:
"The service _MyService_ over one month (the SLA period), during working hours (the time period) – Monday to Friday from 10:00 to 20:00 – should be 90 percent {OK} (SLA request)."
The SLA and time periods complement each other, where of course, the latter does not have to be restricted:
You can use all of the monitoring data generated over the SLA period.

In summary: You need two periods to restrict the data basis for the calculation of an SLA requirement:

* SLA period: The period (e.g., weekly) agreed in the SLA that forms the basis for the report.
* Time period: An active time periods from the Setup configuration (such as business days only)

For each SLA period an independent result is generated.
How many of these individual results you see in a table can be configured via xref:views#[views].
So, for example, the last five weeks, limited to business days, shown as five individual SLA periods directly on the hosts and services.

As usual with {CMK}, between the data source (SLA definition) and the output (view) there is still a rule to assign for SLA-specific services - but this is not a must.
And thus for SLAs this usually results in a three-step process, when they apply to certain services:

. Define the SLA via [.guihint]#Customize > Business reporting > Service Level Agreements#.
. Bind SLA to hosts/services by [.guihint]#Setup > Services > Service monitoring rules > Assign SLA definition to service# rule (optional).
. Create or adapt views for the SLA as required.

Here's how to set up a simple SLA including a view:
The file systems of the hosts `MyHost1` and `MyHost2` over a reporting period of one week are required to be in an {OK} condition for at least 90 per cent of the time (here in this example a maximum of 80 percent has been reached).
In addition they are allowed to assume the {WARN} condition for two or more minutes for a maximum of five occasions.


[#setup_sla]
== Setting up SLAs

[#create_sla]
=== Creating an SLA

First, create the actual SLA.
The configuration can be found via [.guihint]#Customize > Business reporting > Service Level Agreements# (by the way, you can only see this menu item in xref:intro_gui#show_less_more[Show more mode]):

.In the Service Level Agreements (SLAs) list you can find the action bar button to create an SLA
image::sla_main_page.png[alt="List of Service Level Agreements (SLAs) with action bar button to create an SLA."]

Create a new SLA via icon:icon_new[] [.guihint]#New SLA#.
In the [.guihint]#General Properties# section, first give a unique ID, here `MySLA`, and a title, such as `Filesystems`:

.ID and title are used to define the general SLA properties
image::sla_general_properties.png[alt="Dialog for defining the general properties of an SLA."]

Under [.guihint]#SLA settings# set the [.guihint]#SLA period# to the desired period, such as [.guihint]#Weekly#.
The following requirements are therefore always valid for the period of one week.

But you can, before you set up the actual requirements also add
further restrictions under [.guihint]#Filtering and computation options#,
and set options which are not however needed for our simple example SLA:

[cols="33,~",options=header]
|===
|Option |Function 
|[.guihint]#Scheduled Downtimes# |Consideration of xref:basics_downtimes#[scheduled downtimes.]
|[.guihint]#Status Classification# |Consideration of flapping, downtimes and times outside the monitoring times.
|[.guihint]#Service Status Grouping# |Reclassification of status.
|[.guihint]#Only show objects with outages# |Show only objects with given failure rates.
|[.guihint]#Host Status Grouping# |Consideration of {UNREACH} host status as {UNREACH}, {UP} or {DOWN}.
|[.guihint]#Service Time# |Consideration of xref:availability#serviceperiod[service times.]
|[.guihint]#Notification Period# |Consideration of notification periods.
|[.guihint]#Short Time Intervals# |Ignore intervals shorter than a given duration, so that brief interruptions are ignored (similar to the concept of xref:availability#softstates[soft states]).
|[.guihint]#Phase Merging# |Directly successive reporting periods of the same status should not be amalgamated.
|[.guihint]#Query Time Limit# |Limiting of the query time as a solution for slow or non-answering systems.
|[.guihint]#Limit processed data# |Limiting of the data lines to be processed; standard is 5 000.
|===

Next specify the actual requirements in the [.guihint]#SLA requirements# section with [.guihint]#Add new timeperiod#.
As long as you have specified xref:timeperiods#[time periods], these can also be used with the SLAs, as already mentioned for xref:availability#serviceperiod[general availability].
Select a time period under [.guihint]#Active in timeperiod#, or as here in the example `24X7 - Always` to define the requirements for a 24/7 operation.
Under [.guihint]#Title#, give a meaningful name, say `90 percent OK`:

.The first requirement is defined as a percentage SLA
image::sla_settings_requirements_percentage.png[alt="Dialog for defining the first SLA requirement."]

For [.guihint]#Computation Type# select for *the first request* [.guihint]#Service state percentage# and add a new criterion via [.guihint]#Add state configuration#.
A new paragraph opens for the [.guihint]#Monitoring state requirement#.
To ask for at least 90 percent availability, set this record to [.guihint]#OK#, [.guihint]#minimum#, [.guihint]#90#.
If this value falls short, the SLA is considered _broken_ and assumes the status {CRIT}, as will be seen later on the results page.

Perhaps the SLA should not wait until it breaks and then go to {CRIT}, but directly to {WARN} as soon as 50 percent of the buffer is consumed, and then to {CRIT} if there are 10 percent buffers left. 
The thing really breaking the SLA would then produce [.guihint]#broken# but no further status changes (more on this below in section xref:sla_detail_page[SLA detail page]).
For such a configuration check the box at [.guihint]#Levels for SLA monitoring#.
Here you can enter residual values for the transition to {WARN} and {CRIT}. 
This completes the first request.

Now add a *second request* with [.guihint]#Add new timeperiod#.
Again set the time period – specify as the name under [.guihint]#Title#
for example to `Max 5 warnings a 2 minutes` and this time set the [.guihint]#Computation Type# to [.guihint]#Maximum number of service outages#:
The actual request is then: [.guihint]#Maximum 5 times WARN with duration 0 days 0 hours 2 mins 0 secs#:

.The second requirement is defined as an outage SLA
image::sla_settings_requirements_outages.png[alt="Dialog for defining the second SLA requirement."]

According to the SLA, per SLA period the service is now allowed the specified status on a maximum of five occasions, with each occasion for a maximum of two minutes, without the SLA being flagged as broken.
Instead of {WARN} another status could of course also be specified at this point.
And again via the [.guihint]#Levels for SLA monitoring# you may also refine and determine how many remaining incidents will trigger a warning, before the SLA actually breaks with a {WARN} or {CRIT}.

As mentioned earlier, you can add more of these requirements and knit detailed SLAs together. 
But there are still no services that ‚react‘ to this SLA - in our example, a rule must make this connection.
How to use the configuration created up to this point without such an SLA service connection is described below under xref:sla_column[column-specific SLA display.]


[#link_sla_service]
=== Linking an SLA to a service

The SLA is connected to a service via the [.guihint]#Setup > Services > Service monitoring rules > Assign SLA definition to service# rule set.
Create a rule, enable the only rule-specific option [.guihint]#Assign SLA to service#, and then choose your SLA definition `MySLA`, listed here by its title [.guihint]#Filesystems#.

.The previously created SLA is offered for selection in the list
image::sla_rule_assign_sla.png[alt="Rule for selecting the SLA for the service."]

Next under [.guihint]#Conditions# in the [.guihint]#Services# section set further filters for the desired services.
As always you can work here with xref:regexes#[regular expressions], and as in this example link the SLA definition to all local file systems via `Filesystem`.
Optionally you can still restrict everything using the rule-specific filters for folders, host tags and explicit hosts; 
in our example they are the hosts `MyHost1` and `MyHost2`:

.The file system services are assigned to the SLA 
image::sla_rule_condition.png[alt="Service selection condition for the SLA."]

Of course at this point you could also omit any service filtering and simply bind the SLA to all services.
How and why it is better to do that with a column-specific SLA view can be seen xref:sla_column[below].


===  Integrating an SLA in view

So you have now created the SLA definition `MySLA`, and tied it to all services for the two hosts that start with `Filesystem`.
Now create a xref:views#new[new view] for the SLAs.
For the SLA example a simple view of the two hosts with their file system services and SLAs should be sufficient.
For clarification, the {CMK} services are added, to which no SLA is currently tied.
The result will look like the xref:image_sla_view[image at the end of this chapter].

Create a new view with [.guihint]#Customize > Visualization > Views > Add view#.
In the first query specify [.guihint]#All services# as [.guihint]#Datasource#.
Confirm the following query whether information of a single object should be shown with the default value [.guihint]#No restrictions to specific objects.# 

Under [.guihint]#General Properties#, enter an ID (here `MySLAView_Demo`), a title (like `My SLA Demo View`), and finally select a theme like [.guihint]#Workplace# if you want to see the SLA views later under a separate item in the xref:user_interface#monitor_menu[Monitor menu].
All other values can be left unchanged for the test.

Now navigate to the [.guihint]#Columns# box and initially add via [.guihint]#Add column# the three general columns [.guihint]#Services: Service state#, [.guihint]#Hosts: Hostname# and [.guihint]#Services: Service description# as the basis for the view.

The column selector also contains two SLA-specific columns: [.guihint]#Hosts/Services: SLA - Service specific# und [.guihint]#Hosts/Services: SLA - Column specific.#
The latter shows a fixed SLA definition for each service in the view - the better alternative to an SLA for all services as mentioned above. More on this xref:sla_column[later].

Add the [.guihint]#Hosts/Services: SLA - Service specific# column at this point.
Here all sorts of options are now available for the presentation of the SLAs’ results:

.All sorts of options for SLA representation in the view
image::sla_view_options.png[alt="SLA representation options when creating the view."]

[.guihint]#SLA timerange#: Use this to set the time frame for for which you want to see SLA results.
For example, if you have the reporting period [.guihint]#Monthly# in your SLA definition and here [.guihint]#Last Year#, you receive twelve individual results.
In this example the [.guihint]#SLA period range# option is used to set the number of displayed reporting periods directly:
For five periods/results set [.guihint]#Starting from period number# to `0`, and [.guihint]#Looking back# to `4`.

[.guihint]#Layout options#: By default, this option is set to [.guihint]#Only Display SLA Name#.
To actually see the results of the SLAs, choose here [.guihint]#Display SLA statistics#.
You can select up to three different elements:

* [.guihint]#Display SLA subresults for each requirement# displays each affected SLA with name in a separate line.
* [.guihint]#Display a summary for each SLA period# shows a graphic summary in the [.guihint]#Aggregated result# line.
* [.guihint]#Display a summary over all SLA periods#: Shows a textual, percentage summary of all SLAs in the [.guihint]#Summary# line.

For the current example, activate all three options.

[.guihint]#Generic plugin display options#: At this point define for the display of _outage/percentage SLAs_ whether summaries (texts) or respectively individual results (icons) of the reporting periods should appear.
To see both in action, leave the percentage SLAs option at [.guihint]#Show seperate result for each SLA period# and select [.guihint]#Service outage count display options# to [.guihint]#Show aggregated info over all SLA periods#.

If you want to group the view by individual hosts, under [.guihint]#Grouping# add the column [.guihint]#Hosts: Hostname# - which ensures a visual separation of the hosts.

Since the view should only show the hosts `MyHost1` and `MyHost2`, in the last step you have to set a filter under [.guihint]#Context / Search Filters# for the [.guihint]#Hostname#: `MyHost1|MyHost2`.
For a slightly clearer example view you can still set a filter under [.guihint]#Service#, for example `+filesystem.*|Check_MK.*+`.
So you then get the SLA-monitored file system services, and as an unmonitored counterpart the {CMK} services – in this way the effect from using the service-specific SLA display will simply be clearer.

.The view is narrowed down to the hosts and services of interest
image::sla_view_context.png[alt="Filter selecting hosts and services for the view."]

This completes the view setup.
After selection in the [.guihint]#Monitor# menu you get as result a view with five status icons as single results from the percentage SLA, and a summary as percentage for the outage SLA.
Of course only in the lines for the file system services – the {CMK} lines remain empty.

After selection in the [.guihint]#Monitor# menu you get as result a view with five status icons as single results of the percentage SLA and in addition a summary in the form [.guihint]#100 percent# for the outage SLA -- of course only in the file system services lines, the {CMK} lines remain empty.

[#image_sla_view]
.The view in monitoring shows one service with and one without SLA information per host
image::sla_view.png[alt="The view in monitoring shows two services with SLA information."]


[#more_sla_views]
== Further views

[#sla_column]
=== Column-specific SLA display

The service-specific view has a disadvantage:
you can indeed create multiple rules that assign the same service to different SLAs, however you can only display the SLA assigned to the first of these rules – there is no way the SLA of a second controlling rule can be displayed in a second column.

But you can show several columns with different fixed, specified SLAs very well.
Such column-specific views are useful, for example, if you need multiple SLAs which should apply for all services of some or all hosts.
So it could be about defining something like gold, silver and bronze SLAs, each in a separate column next to the services of a host.
Then at a glance it will be clear which SLA definitions a service/host meets.
In short: the column-specific view allows you to display more than just a single SLA for services.

In the example completed xref:setup_sla[above], those three steps mentioned at the beginning were executed - create SLA, bind to service, install in view.
For column-specific views you can just leave out the second step.
Create only the SLA, and arrange a view with the [.guihint]#Hosts/Services: SLA - Column specific# column.
The SLA results will then be displayed in each line independently of the respective service.

The following image shows the xref:image_sla_view[above SLA view] for `MyHost1` with an additional column showing SLA results (maximum three outages of {CMK} services) for each service:

.The view with a new SLA column for each service
image::sla_view_columnspecific.png[alt="The view with an additional SLA column for all services."]

So the difference between service and column-specific display is clearly visible.
What should also become clear:
the SLA designed specifically for {CMK} services of course makes only moderate sense in the file system columns.
It is worth planning thoroughly before beginning the implementation!

One more small *note:* In the options for the service-specific views, above under [.guihint]#Generic plugin display options# we have seen the settings for outage and percentage SLAs.
In the options for the column-specific views you can see these two as well - but only if the SLA actually includes outage and percentage criteria.
Here _generic_ is not appropriate, but _static_, a fixed SLA definition is invoked.
Only the options that belong to this SLA will be seen.

There are many ways to bring SLAs, services and views together - here good planning is required for what exactly you want to display via SLAs.


[#sla_detail_page]
=== SLA detail page

Integrating the SLA information into tables provides a fast overview, but of course you can also consider the results in detail.
In a view, a click on the cell with the SLA data takes you directly to the detail page of the SLA results for the affected service:

.The details will be displayed by clicking a table cell containing SLA information
image::sla_view_details_bars.png[]

Here four different types of information can be found:

* raw data of the availability,
* a summary of all of the requirements of an SLA,
* individual results of all of the requirements of an SLA and
* the SLA specification.

[.guihint]#General information#: Here you can see the raw availability data, and thus the SLA calculations as an overview of the status of each period, and below it the aggregated results of the SLA’s requirements.

This is followed by tables for each individual SLA requirement.
The [.guihint]#Timeline# shows every single state and the [.guihint]#Result# row shows the results for each individual reporting period.
A special feature here:
If you, as described in the example, have set SLA levels and the SLA goes to {CRIT} before breaking, this will is indicated here by an orange bar and not the usual red bar.
The bars will then turn red when the SLA breaks.
Once you get that move the mouse pointer to the result bar, you can see the individual events that are responsible for the status via a tooltip.
In the following picture the status is {WARN} – because only two out of the three allowed outages are left:

.A tooltip shows detailed information about the result row
image::sla_view_details_result.png[alt="Tooltip of a result row on the SLA details page."]

The message [.guihint]#SLA broken# would also appear in this tooltip.

A small note about using the view:
If you move the mouse over the result bar [.guihint]#Aggregated results# or [.guihint]#Result# of a period, this period will be highlighted -- for all individual requirements and also the summary under [.guihint]#General information#.
With a click you can select/deselect one or more periods.

Finally, under [.guihint]#SLA specification#, the configuration data of your SLA follows, which will help you to better evaluate and understand the results presented:

.The complete specification evaluated for the SLA results of the service
image::sla_view_details_spec.png[alt="The SLA specification for the service selected in the view."]


[#slas_for_bi]
=== SLAs for BI aggregations

In the xref:availability#bi[availability article] you've already read about using the availability for BI aggregations.
The SLAs are also available to the aggregations (the top level) – via a small detour:
The state of a BI aggregation can be monitored via the [.guihint]#Check State of BI Aggregation# rule set as a normal service.
This then appears, for example, as [.guihint]#Aggr My Bi Rule Top Level# in the views and can in turn be associated to an SLA via the [.guihint]#Assign SLA definition to service# rule already used xref:link_sla_service[above].
As a result, it looks something like this:

.The service shows the SLA information of a BI aggregation
image::sla_view_bi.png[alt="A view showing the SLA information of a BI aggregation.",width=97%]

You will find the rule under [.guihint]#Setup > Services > Other services > Check State of BI Aggregation# and a description of the rule set in the xref:bi#biasservice[BI article].
The rule is designed to also query BI aggregates on remote {CMK} servers.
Therefore you need to connect the URL to the server and specify an xref:wato_user#automation[automation user] -- and of course the desired BI aggregation:
In the [.guihint]#Aggregation Name# field, enter the title of a top-level rule from your BI package, in the following example the rule with the [.guihint]#My BI Rule Top Level# title:

.From the BI rules list you can read the title of the top-level rule
image::sla_bi_rules.png[alt="List of BI rules for selecting a top-level rule."]

*Note:* There is a *risk of confusion* here:
In the BI configuration, you create the actual aggregation, i.e. the logic, via rules -- and one of the top-level rules is entered here via its title as [.guihint]#Aggregation Name#.


== Error handling

=== Incorrect or no functionality

In practice SLAs are an interplay of many different configurations:
the SLA itself, the view and service options, time periods, rules and of course availability data.
If the SLA shows different results than expected, just go through the complete chain.
In case of doubt it also helps to visualize the entire process with pen and paper -- to see all of the information involved at a glance.
The following points can be used as a small checklist:

* xref:timeperiods#[Time periods]: [.guihint]#Setup > General > Time periods#
* xref:basics_downtimes#[Scheduled downtimes]: [.guihint]#Setup > Hosts > Host monitoring rules > Recurring downtimes for hosts# and [.guihint]#Setup > Services > Service monitoring rules > Recurring downtimes for services# (both rules only in the {CEE})
* Service periods: [.guihint]#Setup > Hosts > Host monitoring rules > Service period for hosts# and [.guihint]#Setup > Services > Service monitoring rules > Service period for services#
* Service configuration: [.guihint]#Setup > Services > Service monitoring rules > MyService#
* SLA configuration: [.guihint]#Customize > Business reporting > Service Level Agreements#
* SLA service link: [.guihint]#Setup > Services > Service monitoring rules > Assign SLA definition to service#
* View configuration: [.guihint]#Customize > Visualization > Views#
* BI configuration: [.guihint]#Setup > Business Intelligence > Business Intelligence > MyBiPack > MyTopLevelRule#
* BI monitoring: [.guihint]#Setup > Services > Other services > Check State of BI Aggregation#

After you have checked the configurations, you can verify the functioning of the SLA using manual (fake) status changes and scheduled downtimes by applying xref:commands#[commands] to the objects in a view.


=== SLA is not shown

In such a case, open the settings of the affected view and first check the obvious:
Is there even a column with an SLA?
But contradictory filters are a more likely cause:
If you have tied the SLA to a service using a rule, this service of course may not be excluded from the view options under [.guihint]#Context / Search Filters#.

Service-bound SLAs still have one more source of error:
As described above, you can display only one rule-linked SLA for each service in a view -- that of the first matching rule.
Finally, the view receives only the instruction to display in each line the SLA associated with the service – not the second or fifth connected SLA.
If you have created corresponding rules, they will simply be ignored.
In such cases, you can switch to xref:sla_column[column-specific display].


=== SLA status change is not shown

In its simplest form, the SLA status in the views of the GUI only changes when the requirements are broken. 
To be informed of a status change beforehand, you must xref:sla#create_sla[configure the SLA levels].
