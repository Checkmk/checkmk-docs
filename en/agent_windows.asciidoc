// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= Monitoring Windows
:revdate: draft
:title: Monitoring Windows - The new agent for Windows in detail
:description: The Windows agent of {CMK} version 2.1.0 adds the Agent Controller and new features to the agent program. You can learn how to use the agent here.

{related-start}
xref:wato_monitoringagents#[Monitoring agents]
xref:agent_deployment#[Automatic agent updates]
{related-end}

////
Hints for translation:
At the beginning of this article, their is an (outdated) Deepl translated text, that will be displayed for our readers as long as you are not finished.
You can delete it right away.
The German text to be translated is commented out at the end of this file (starting at line 1130.
////


_In order to quickly provide you the new information for {CMK} version {v21}, we have had this draft machine translated for now. Update and language revision will follow later._


[#intro]
== The new agent

Monitoring Windows servers has been one of the most important tasks of {CMK} from the beginning.
Therefore, as for all other server operating systems, {CMK} ships its own agent for Windows.

In the {CMK} version {v21} there is now a new Windows agent.
More precisely, a new component is added to the *Agent Program* `check_mk_agent.exe`: the *Agent Controller*.
The Agent Controller precedes the agent program, queries it and communicates with the {CMK} server in its place.
To do this, it registers with the *Agent Receiver*, which is also a new process running on the {CMK} server.

The new Windows agent thus on the one hand takes over the agent program, and thus its advantages.
On the other hand, it supplements the program in such a way that new functions can be added, such as TLS encryption of the communication, data compression -- and also reversal of the communication direction.

The registered, encrypted and compressed *pull mode* with the Agent Controller is available from version {v21} for all {CMK} editions -- as long as both {CMK} server and agent have version {v21}.

The Agent Controller is only executable on certain (newer) versions of Windows.
You can see which ones from the table below.

However, the new agent also supports a so-called *legacy mode*, in order to be executable also under older Windows versions.
In this mode the new agent works like the old one, i.e. without Agent Controller and therefore without registration at the {CMK} server.
For the legacy mode some special features have to be considered, which are summarized in the xref:post_install [installation chapter].

For compatibility reasons, the agent supports only the current versions of the link:https://en.wikipedia.org/wiki/Windows_NT[Microsoft Windows NT^] product line (edition).
The following table lists them explicitly.
In the Version column you will find the beginning of the version number, which can be displayed on the Windows system using the commands 'ver' and 'systeminfo'.

[#windows_versions]
[cols="50,25,~",options="header"]
|===
|Edition |Version |Agent Controller
|Windows Vista |6.0 |without
|Windows Server 2008 (R1) |6.0 |without
|Windows 7 |6.1 |with
|Windows Server 2008 R2 |6.1 |with
|Windows 8 |6.2 |with
|Windows Server 2012 (R1) |6.2 |with
|Windows 8.1 |6.3 |with
|Windows Server 2012 R2 |6.3 |with
|Windows 10 |10.0 |with
|Windows Server 2016 |10.0 |with
|Windows Server 2019 |10.0 |with
|Windows 11 |10.0 |with
|Windows Server 2022 |10.0 |with
|===

*Important*: Editions not mentioned in the table are not officially supported.
This includes, for example, _Windows Embedded_.

The installation, registration and setup of the agent is done with a few steps, because the agent does not need any additional libraries for its function, for example.
In addition, the agent is delivered with a basic configuration that is sufficient for most use cases.



[#agent_architecture]
== Architecture of the agent

With the new agent, more software components are involved in communication than before.
Therefore, we briefly introduce the components and their interaction.
The architecture is identical for the Windows agent and the xref:agent_linux#architecture[Linux agent].
Only the technical implementation is specific to the operating systems.

.Interaction of the software components
[{image-border}]
image::agent_windows_communication_flow.png[alt="Illustration of the communication between agent and site."]

The *Agent Program* `check_mk_agent.exe` is and remains responsible for collecting monitoring data.
It is started as a Windows service under the local system account (_Local System account_).
It collects data about the local system when called and makes it available to the Agent Controller.

The agent program is:

* minimalistic, because it makes do with minimal resources of RAM, CPU, disk space and network.
* comprehensive, because it has access to important data that is not accessible via WMI or SNMP. +
In some cases, however, monitoring via SNMP *in addition* to the {CMK} agent can be useful.
See the article on xref:snmp#snmp_cmk_agent[monitoring with SNMP] for more on this topic.
* secure, because it does not allow any access from the network.
* easily extensible, because you can write plugins in any programming or scripting language and have the agent program execute them.
* transparent, because although it is delivered as an executable file, you have access to the source code at any time and can therefore in principle compile the agent yourself and have insight into the functionality at any time.

The *Agent Controller* `cmk-agent-ctl.exe` is the new component of the agent and is responsible for transporting the data collected by the agent program.
It runs as a background process under the local system account of Windows.
It listens on TCP port 6556 for incoming connections from the {CMK} site and queries the agent program over a TCP connection.

The *Agent Receiver* `agent-receiver` is a new component of the {CMK} server and the general endpoint for Agent Controller communication, e.g. connection registration.
In pull mode, data is exchanged with the xref:cmc_differences.html#fetcher_checker[{CMK} fetchers] of the site.

All new features are implemented through the Agent Controller and Agent Receiver, i.e. {CMK} server and agent must have version {v21}.
Here, the first step is to register the Agent Controller with the Agent Receiver of the {CMK} site, with which a trust relationship is established.
During the registration, the TLS encryption of the communication is already set up.




[#install]
== Installation

{CMK} offers you different ways for the installation of the Windows agent -- from the manual installation of the software package to the fully automatic deployment including update function.
Some of them are only available in {EE}:

[cols="40,50,~,~",options="header"]
|===
|Method |Description |CRE |CEE
|Supplied MSI package |Simple installation of a standard agent with manual configuration via configuration files. |X |X
|MSI package from xref:glossar#agent_bakery [Agent Bakery] |Configuration via GUI, individual configuration per host possible. | |X
|xref:agent_deployment#[Automatic update] |The package from the Agent Bakery is installed for the first time by hand or by script and automatically updated from then on. | |X
|===

Alternatively, you can distribute the MSI package via other means, such as Microsoft Active Directory.
Here the installation can be completely automated by the MSI format.

[#download]
=== Downloading the MSI package

You install the Windows agent by installing the MSI package.

Before the installation you have to get the package and bring it to the host (for example with `scp` or WinSCP) where the agent should run.
 

[#download_gui]
==== Getting package via {CMK} GUI

In the {CRE}, find the agent's Windows package via [.guihint]#Setup > Agents > Windows#.
In the {EE}, you first get to the xref:wato_monitoringagents#bakery[Agent Bakery] in the [.guihint]#Setup# menu via [.guihint]#Agents > Windows, Linux, Solaris, AIX#, where you will find the baked packages.
From there, the [.guihint]#Related > Windows files# menu item will take you to the list of agent files:

.On the download page you will find the MSI package
image::agent_windows_agent_files.png[alt="Download page with the MSI package."]

Everything you need can be found right in the first box named [.guihint]#Packaged Agents#:
the ready-to-use MSI package file `check_mk_agent.msi`.


==== Getting package via REST API

The xref:rest_api#[REST-API] of {CMK} provides the following ways to download agent packages from the {CMK} server:

* Downloading the provided agent.
* Downloading a baked agent by host name and operating system.
* Downloading a baked agent by hash of the agent and operating system.

Per REST API, you have the option to fetch the package from the {CMK} server directly to the target machine.

For example, the supplied MSI package of the Windows agent can be fetched with the following `curl` command.
In newer Windows versions `curl` is already included, in older ones you have to install the `curl` command environment separately via link:https://curl.se/windows/[curl for Windows^] before. 

[{shell}]
----
C:\Users\downloads\> curl -OJG "http://mycmkserver/mysite/check_mk/api/1.0/domain-types/agent/actions/download/invoke" ^
--header "Accept: application/octet-stream" ^
--header "Authorization: bearer automation myautomationsecret" ^
--data-urlencode "os_type=windows_msi" ^ 
----

*Note:* The command has been split into four lines for readability.

This is just a simple example to demonstrate how this one REST API endpoint works to download the agent.
Details on this and other REST API endpoints can be found in the API documentation, which can be accessed in {CMK} via [.guihint]#Help > Developer resources > REST API documentation#.



[#install_package]
=== Installing the package

[#install_manual]
==== Manual installation

After fetching the MSI package and -- if necessary -- copying it to the host to be monitored using `scp`, WinSCP or other means, start the installation either by double-clicking the MSI file or from the command line as follows:

[{shell}]
----
C:\Users\hhirsch\Downloads\> check_mk_agent.msi
----

You will get the start page of the setup wizard:

.The installation starts with a welcome
image::agent_windows_setup_wizard_1.png[alt="Start page of the setup wizard."]

Use the [.guihint]#Next# buttons to shimmy through the pages of the wizard.
First, you read and agree to the license terms of the [.guihint]#GNU GENERAL PUBLIC LICENSE#.
Then the setup wizard presents you with the following page:

[#agent_windows_setup_wizard_3b]
.Choices when updating a very old agent
image::agent_windows_setup_wizard_3b.png[alt="Setup wizard page on how to proceed when updating an old agent."]

The choices on this page are only relevant to you if there is already a Windows agent installed on the host and it is *older* than version {v16}.
In version {v16} the architecture of the Windows agent had changed fundamentally.
If you are upgrading (or _migrating_) from a Windows agent *prior* to version {v16} to the current agent, first read the link:https://docs.checkmk.com/2.0.0/en/agent_windows.html#legacy[chapter on the old agent] in the {CMK} User guide for version {v20}.
There you will learn which of the offered options you should select in this particular update case.

In all other cases, we recommend selecting [.guihint]#Clean installation.#.

Confirm the start of the installation and then still allow in the user account control dialog ([.guihint]#User Account Control#) that the installation program is allowed to make changes.
When finished, you can exit the setup wizard.

After installation, the agent is immediately started as a Windows service and is ready to monitor the system.


[#install_unattended]
==== Unattended installation

Windows provides the ability via the command line for administrators with `msiexec` to install MSI packages automatically without user interaction.
An automated installation can then look like this, for example:

[{shell}]
----
C:\Users\downloads\> msiexec /i check_mk_agent.msi /qn
----

In this case, the agent is installed (`/qn`) without user interaction and user interface (`/i`) and also started immediately as a Windows service.
So this method is great for automatically rolling out the agent to many hosts.

You can also use this method to select the three options that were offered to you during the manual installation xref:agent_windows_setup_wizard_3b[in the setup wizard].
For each option there is an identifier that you can use for the installation command:

[cols="65,~",options="header"]
|===
|Option in the setup wizard | Identifier
|[.guihint]#Clean installation.# |`WIXUI_CLEANINSTALL`
|[.guihint]#Remove Legacy Windows Agent (pre 1.6) if present.# |`WIXUI_REMOVELEGACY`
|[.guihint]#Migrate from Legacy Windows Agent (pre 1.6) configuration if present.# |`WIXUI_MIGRATELEGACY`
|===

To _enable_ an option, append its identifier followed by an equal sign:

[{shell}]
----
C:\Users\hirsch\Downloads\> msiexec /i check_mk_agent.msi /qn WIXUI_CLEANINSTALL=
----

To explicitly _disable_ an option, you need to add two more quotes after the equal sign:

[{shell}]
----
C:\Users\deer\downloads\> msiexec /i check_mk_agent.msi /qn WIXUI_MIGRATELEGACY=""
----



[#windows_firewall]
==== Windows Firewall

The agent already creates a rule in the Windows Firewall when it is installed so that it can be reached from the outside via port 6556.
However, if you get no information at all or only error messages about timeouts during xref:glossar#service_discovery[service discovery] or during a xref:wato_monitoringagents#diagnosticpage[connection test] to the host, you should check the [.guihint]#Inbound Rules# of the Windows Firewall on the host.

.Error during connection test to the agent
image::agent_windows_communication_failed.png[alt="Error message of an unreachable agent during connection test.",width=64%]

In current versions of Windows, you can find [.guihint]#Windows Defender Firewall with Advanced Security# via Windows Settings ([.guihint]#Settings > Windows Security#) or start it by calling `wf.msc` from the command line:

.Windows Firewall with the incoming rule for the {CMK} agent
image::agent_windows_windows_firewall.png[alt="Entry of the {CMK} agent for Windows Firewall."]

If you do not find such an entry in the Windows Firewall settings, you can add it at this exact location.
To do this, click on [.guihint]#New Rule# in the [.guihint]#Action# menu.

This opens a wizard for creating a new firewall rule.
Set the five choices as follows:

[cols="15,~"]
|====
|[.guihint]#Rule Type# |Leave the selection here at [.guihint]#Program.#
|[.guihint]#Program# |Enter [.guihint]#This program path# `%ProgramFiles% (x86)\checkmk\service\check_mk_agent.exe` or use the [.guihint]#Browse# button to select `check_mk_agent.exe`.
|[.guihint]#Action# |Leave the selection at [.guihint]#Allow the connection.#
|[.guihint]#Profile# |This point strongly depends on the configuration of your network. However, in most cases it is recommended to enable only [.guihint]#Domain# and [.guihint]#Private# here.
|[.guihint]#Name# |Give the rule a concise and short name.
|====

Alternatively, you can automate this step and set the rule directly on the command line.
Modify the following command to your customized installation path if necessary:

[{shell}]
----
C:\Windows\System32> netsh advfirewall firewall add rule name="Check_MK" ^
description="Monitoring" dir=in localport=6556 protocol=tcp action=allow ^
program="%ProgramFiles(x86)%\checkmk\service\check_mk_agent.exe" ^
profile=private,domain enable=yes
OK.
----

*Note:* The command has been split into four lines for readability.


=== Installing with the Agent Bakery

{cee-only}
The {CEE} have a software module, xref:wato_monitoringagents#bakery[Agent Bakery], for automatically packaging customized agents -- including Windows agents.
For a detailed description of this, see the general chapter on xref:wato_monitoringagents#[agents].
The installation of the baked MSI package is then done again exactly as described xref:install_package[above].


=== Automatic update

{cee-only}
If you use the Agent Bakery, you can set up automatic updates of the agent.
These are described in an xref:agent_deployment#[separate article.]




[#config_files]
=== Agent configuration files

The MSI package stores the program-specific files in `C:\Program Files (x86)\checkmk\service\` and the host-specific files in `C:\ProgramData\checkmk\agent\` during installation.
You do not need to customize the program-specific files.
The host-specific files are used to store plugins, log and configuration files and to configure the behavior of the agent.

*Note*: By default, the entire `C:\ProgramData` directory is marked as invisible by the system.

The agent reads three configuration files one after the other:

. `C:\Program Files (x86)\checkmk\service\check_mk.yml` +
is the default configuration file, which you do not change.
. `C:\ProgramData\checkmk\agent\bakery\check_mk.bakery.yml` +
is created by the Agent Bakery and should not be changed manually.
. `C:\ProgramData\checkmk\agentcheck_mk.user.yml` +
is your configuration file where you can manually make individual adjustments to test a setting or extension on a host.

If an option is set in multiple files, then the last file read determines the value of that option.
So, for manual work with the agent, only the last configuration file `check_mk.user.yaml` is relevant because it is the last to be read in and thus _has the last word_.
If the Agent Bakery is not used, it is even the only file in which adjustments to the agent configuration may be made.

As you may have already recognized from the file extension of the configuration files, the file format used is link:https://yaml.org[YAML^].


[#post_install]
=== What happens after the installation?

After installing the agent with Agent Controller, the next step is xref:registration[registration], which sets up TLS encryption so that the encrypted agent output can be decrypted by the {CMK} server and displayed in monitoring.

There is a special feature when updating, i.e. when an already installed agent package has been updated to the new {v21} agent.
During such an update the agent switches to the unencrypted *legacy pull mode*, so that the {CMK} server is not cut off from the monitoring data and can continue to display it.
In the monitoring it looks like this:

.Warning in {CMK} monitoring that TLS is not used yet
image::agent_windows_service_legacy_pull_mode.png[alt="The WARN state of the 'Check_MK' service due to lack of encryption."]

The {CMK} site detects from the agent output that the Agent Controller is present and thus TLS encryption is possible -- but not yet enabled.
The [.guihint]#Check_MK Agent# service changes to the {WARN} state and remains so until you register it after updating the agent.
After registration, only encrypted pull mode is used for communication.
The legacy pull mode is turned off and remains so.

The case is different if the agent is installed on very old xref:windows_versions[Windows systems].
The installation of the agent may be successful.
However, if the Agent Controller cannot be started due to API incompatibilities, the unencrypted transfer is resorted to.
Without Agent Controller, registration is not possible and the only communication path remains *legacy mode*.
So for legacy mode you can skip the xref:registration[registration] chapter and continue with xref:test[test and error diagnosis].
However, you can save the test for calling the Agent Controller there, since it is not present in legacy mode.
Since there is also no TLS encryption without Agent Controller, you will have to choose other ways of encryption if needed.
We recommend to use the built-in (symmetric) encryption in this case with the rule [.guihint]#Encryption (Linux, Windows)# and/or set up an xref:ssh[SSH tunnel].




[#uninstall]
=== Uninstalling

You have several options for uninstalling the agent in Windows.
In all versions of Windows you will find an entry in the Control Panel under [.guihint]#Control Panel > Programs and Features > Uninstall a program.#
In newer versions, you can also find the entry for the {CMK} agent in the settings under [.guihint]#Settings > Apps > Apps & features.#

You have several options to remove the agent via the command line for administrators.
If you still have the last installed MSI package, you can use it for uninstallation as follows:

[{shell}]
----
C:\Users\downloads\> msiexec /x check_mk_agent.msi /qn
----

Alternatively, you can use the Windows Management Instrumentation Command (WMIC) to uninstall:

[{shell}]
----
C:\> wmic product where name="Check MK Agent 2.1" call uninstall /nointeractive
----

If the uninstallation was successful, you will receive the message `Method execution successful.` as confirmation.

*Note:* The string after `name=` must be exactly correct.
If you want to uninstall another version of the agent here, you will find a listing of all installed products with the following call:

[{shell}]
----
C:\> wmic product get name
----

The process can sometimes take quite a long time and will not give any status messages, but will give very long lists.
For filtering you can extend the command to a pipe:

[{shell}]
----
C:\> wmic product get name | findstr Check
Check MK Agent 2.1
----

Since the various routines of Windows only remove files that got there through the installation process, it is perfectly normal that files remain in the xref:files[directories of the agent].
These can be deleted manually.






[#registration]
== Registration

=== Overview and requirements

The host to be included in the monitoring cannot yet exchange encrypted data with the {CMK} server.
However, unencrypted communication in legacy pull mode is possible immediately after the initial installation of the {v21} agent (also as an update of an older agent).
For hosts already in the monitoring the service [.guihint]#Check_MK Agent# shows you in the state {WARN} that a change to encrypted communication is advised.
To be able to transfer encrypted monitoring agent output a mutual trust relationship must exist.
Therefore, perform the registration promptly after installation/update.
This chapter shows how to do this.

The registration and thus the establishment of the mutual trust relationship is done under a {CMK} user with access to the xref:rest_api#[REST API.]
For this purpose, the xref:glossar#automation_user[automation user] is a good choice, which is created automatically with every {CMK} Installation and whose password you can dice out.

*Note:* Since there is no Agent Controller, and thus no registry and TLS encryption, on very old xref:windows_versions[Windows systems], you will have to choose other ways of encryption if needed.
In this case, we recommend using the built-in (symmetric) encryption with the [.guihint]#Encryption (Linux, Windows)# rule and/or setting up an xref:ssh[SSH tunnel].


=== Adding the host to monitoring

First create the new host via [.guihint]#Setup > Hosts > Add host# and then add it to monitoring by xref:glossar#activate_changes[activating changes].


=== Registering host with server

Registration is done with the Agent Controller `cmk-agent-ctl`, which provides a command interface for configuring connections.
You can use the command `cmk-agent-ctl help` to get help on the options.

Now go to the host that is to be registered.
Here, with administrator privileges, make a request to the {CMK} xref:glossar#site[site]:

[{shell}]
----
C:\Windows\system32> "C:/Program Files (x86)/checkmk/service/cmk-agent-ctl.exe" ^
    register ^
    --hostname mynewhost ^
    --server cmkserver --site mysite ^
    --user automation --password test23
----

The host name behind the `--hostname` option must be entered exactly as it was entered before in the Setup.
The `--server` and `--site` options specify the name of the {CMK} server and site.
The server name may also be the IP address, the site name (here `mysite`) corresponds to the one you see in the URL path of the web interface. 
The options are completed by the name and password of the automation user.
If you omit the `--password` option, the password will be requested interactively.

If the given values were correct, you will be asked to confirm the identity of the {CMK} site to which you want to connect.
We have shortened the server certificate to be confirmed for clarity:


[{shell}]
----
Attempting to register at cmkserver:8000/mysite. Server certificate details:

PEM-encoded certificate:
---BEGIN CERTIFICATE---
MIIC6zCCAdOgAwIBAgIUXbSE8FXQfmFqoRNhG9NpHhlRJ40wDQYJKoZIhvcNAQEL
[...]
nS+9hN5ILfRI+wkdrQLC0vkHVY8hGIEq+xTpG/Pxw==
---END CERTIFICATE---

Issued by:
	Site 'mysite' local CA
Issued to:
	localhost
Validity:
	From Thu, 10 Feb 2022 15:13:22 +0000
	To Tue, 13 Jun 3020 15:13:22 +0000

Do you want to establish this connection? [Y/n]
> #Y#
----

Confirm with `Y` to complete the process.

If no error message is displayed, the encrypted connection is established.
All data is transmitted in compressed form via this connection.




=== Checking trust relationship

The command `cmk-agent-ctl status` now shows exactly one trust relationship with the {CMK} server:

[{shell-raw}]
----
C:\Windows\system32> "C:/Program Files (x86)/checkmk/service/cmk-agent-ctl.exe" status
Connection: 12.34.56.78:8000/mysite
	UUID: d38e7e53-9f0b-4f11-bbcf-d196deadbeef
	Local:
		Connection type: pull-agent
		Certificate issuer: Site 'mysite' local CA
		Certificate validity: Mon, 21 Feb 2022 11:23:57 +0000 - Sat, 24 Jun 3020 11:23:57 +0000
	Remote:
		Connection type: pull-agent
		Registration state: operational
		Host name: mynewhost
----

You can then perform a xref:glossar#service_discovery[service_discovery] on the {CMK} server, add the discovered services to monitoring, and finally re-enable the changes.

*Note:* There can only ever be one trust relationship between host and site.
For example, if you register the already registered host `mynewhost` under a different name (`mynewhost2`) but with the same IP address, the new connection will replace the existing one.
The connection of `mynewhost` to the site will be disconnected and no more agent data will be supplied for the host for monitoring.


=== Deregistering a host

On a host connected to the {CMK} server, you can revoke the trust relationship with this command:

[{shell}]
----
C:\Windows\system32> "C:/Program Files (x86)/checkmk/service/cmk-agent-ctl.exe" ^
    delete d38e7e53-9f0b-4f11-bbcf-d196deadbeef
----

The Universally Unique Identifier (UUID) to be specified is the one that is output with the `cmk-agent-ctl status` command. 

On the {CMK} server, for each connection of a host that is in monitoring, there is a soft link with the UUID pointing to the folder with the agent output:

[{shell-raw}]
----
{c-omd} cd ~/var/agent-receiver/received-outputs
{c-omd} ls -l d38e7e53-9f0b-4f11-bbcf-d196deadbeef
lrwxrwx 1 mysite mysite 67 Feb 23 07:18 d38e7e53-9f0b-4f11-bbcf-d196deadbeef -> /omd/sites/mysite/tmp/check_mk/data_source_cache/push-agent/mynewhost
----

If you delete this softlink, you will need to re-register the host.
Here you can also delete unused softlinks, for example, from multiple registrations of the same host.


=== Registering on behalf

For easier registration of multiple hosts, any host on which the agent is installed can perform registration on behalf of others.
This involves exporting a JSON file, which can then be transferred to the target host and imported there.
Again, as before, the host registered in the job must already be set up in the site.

First, the registration is performed on any host in the monitoring as a substitute.
Here, of course, the {CMK} server is a good choice, as it is usually the first host to be included in the monitoring.
As with the example above, you can pass the password by option or be asked for it interactively if you omit the `--password` option.
We redirect the JSON output to a file in the example:

[{shell}]
----
{c-root} cmk-agent-ctl proxy-register \
    --hostname mynewhost3 \
    --server cmkserver --site mysite \
    --user automation > /tmp/mynewhost3.json
----

Now we transfer the file `/tmp/mynewhost3.json` to the host we registered for and import the file:

[{shell}]
----
C:\Windows\system32> "C:/Program Files (x86)/checkmk/service/cmk-agent-ctl.exe" ^
    import /tmp/mynewhost3.json
----




[#test]
== Testing and error diagnosis

Once you have installed and registered the agent, you are probably wondering how to test out if you did everything correctly.
All the possibilities that exist from the {CMK} server are described in the general chapter about agents xref:wato_monitoringagents#diagnostics[described].
But of course there are more diagnostic possibilities when logged in directly on the monitored host itself.

As the new agent introduces the two components Agent Controller on the host and Agent Receiver on the {CMK} server, the number of places where something can go wrong increases.
We work our way from the agent program to the Agent Controller to the {CMK} site.


=== Checking the configuration

To check that the configuration has been read in as you expect it to be, call the agent program with the `showconfig` option.
With this option you will not only get the configuration as it is currently used by the agent.
Additionally, the used environment variables as well as the used configuration files are always displayed.

If only a certain part of the configuration is interesting, you limit the output to a certain part.
Here, for example, it is checked whether the options of the `ps` section are set correctly:

[{shell}]
----
C:\Windows\system32> "C:/Program Files (x86)/checkmk/service/check_mk_agent.exe" showconfig ps
# Environment Variables:
# MK_LOCALDIR="C:\ProgramData\checkmk\agent\local"
# MK_STATEDIR="C:\ProgramData\checkmk\agent\state"
# MK_PLUGINSDIR="C:\ProgramData\checkmk\agent\plugins"
# MK_TEMPDIR="C:\ProgramData\checkmk\agent\tmp"
# MK_LOGDIR="C:\ProgramData\checkmk\agent\log"
# MK_CONFDIR="C:\ProgramData\checkmk\agent\config"
# MK_SPOOLDIR="C:\ProgramData\checkmk\agent\spool"
# MK_INSTALLDIR="C:\ProgramData\checkmk\agent\install"
# MK_MSI_PATH="C:\ProgramData\checkmk\agent\update"
# Loaded Config Files:
# system: 'C:\Program Files (x86)\checkmk\service\check_mk.yml'
# bakery: 'C:\ProgramData\checkmk\agent\bakery'
# user : 'C:\ProgramData\checkmk\agent\check_mk.user.yml'

# ps
enabled: yes
use_wmi: yes
full_path: no
----

This way you get a quick overview of how the three different xref:config_files[configuration files] are merged and used by the agent program. 
Errors will be visible immediately.


[#script_output]
=== Output of the agent program

The agent program is a simple Windows executable that obtains data about your system and outputs it as loosely formatted text.
You can call it directly from the command line.
With the `test` parameter it prints everything to standard output.
With the `help` option you get, among other things, a detailed and complete list of options available to you beyond those described here.
Since the output can be a bit long, the `more` pager is very handy here, which you can exit in the output with the Q key:

[{shell-raw}]
----
C:\Windows\system32> "C:/Program Files (x86)/checkmk/service/check_mk_agent.exe" test | more
<<check_mk>>
Version: 2.1.0b1
AgentOS: windows
Hostname: DESKTOP-XYZA123
AgentController: cmk-agent-ctl 0.1.0
----

This allows you to test whether the output contains all the desired data - for example, whether all installed plugins provide data.

Since the agent program listens on the local loopback interface (127.0.0.1) on port 50001, you can also test connecting to it using Telnet or Putty.




=== Agent Controller in dump mode

The Agent Controller provides its own subcommand `dump` which displays the full agent output as it arrives in the monitoring:

[{shell-raw}]
----
C:\Windows\system32> "C:/Program Files (x86)/checkmk/service/cmk-agent-ctl.exe" dump | more
<<check_mk>>
Version: 2.1.0b1
BuildDate: Mar 14 2022
AgentOS: windows
Hostname: DESKTOP-QVPV284
Architecture: 64bit
WorkingDirectory: C:\Windows\system32
ConfigFile: C:\Program Files (x86)\checkmk\service\check_mk.yml
LocalConfigFile: C:\ProgramData\checkmk\agent\check_mk.user.yml
AgentDirectory: C:\Program Files (x86)\checkmk\service
PluginsDirectory: C:\ProgramData\checkmk\agent\plugins
StateDirectory: C:\ProgramData\checkmk\agent\state
ConfigDirectory: C:\ProgramData\checkmk\agent\config
TempDirectory: C:\ProgramData\checkmk\agent\tmp
LogDirectory: C:\ProgramData\checkmk\agent\log
SpoolDirectory: C:\ProgramData\checkmk\agent\spool
LocalDirectory: C:\ProgramData\checkmk\agent\local
OnlyFrom:
<<cmk_agent_ctl_status:sep(0)>>>
----

This allows you to verify that the data from the agent program has arrived at the Agent Controller. 
This output does not yet prove that the agent is also reachable over the network.

=== Connection test from outside

If you are sure that locally the agent script and installed plugins are executed correctly, you can check next from the {CMK} server via `netcat` (or `nc`) if port 6556 is reachable:

[{shell}]
----
{c-omd} echo | nc 10.76.23.189 6556
16
----

The output `16` indicates that the connection establishment was successful and now the TLS handshake can take place.
Since everything else here is TLS encrypted, no detailed check is possible.

*Note:* If the communication between agent and {CMK} server is _still_ unencrypted (as in legacy pull mode), you will get the complete unencrypted agent output with this command instead of the `16`.


=== Test with the {CMK} command line

Instead of using `nc`, you can use the {CMK} command line tool to request and view the complete agent output.
The `--debug -v` options add some debugging information. 

[{shell-raw}]
----
{c-omd} cmk --debug -v -d mynewhost
----




[#security]
== Security

=== Preliminary consideration

Security is an important criterion for any software, here monitoring must not make an exception.
Since the monitoring agent is installed on every monitored server, a security problem here would have particularly serious consequences.

That's why security was taken into account already during the design of {CMK} and since the first days of {CMK} there is an ironclad principle:
_The agent does not read data from the network. Period._ 
This certainly rules out the possibility of an attacker injecting any commands or script components through the 6556 monitoring port.


=== Transport Layer Security (TLS)

For an attacker, however, even a process list can be a first approach to draw conclusions about worthwhile targets.
Therefore, transport encryption between agent and {CMK} server with Transport Layer Security (TLS) is mandatory starting with {CMK} version {v21}.
Here, the {CMK} server "pings" the monitored host, which then establishes the TLS connection to the {CMK} server and transmits the agent output over it. 
Since only {CMK} servers with which a trust relationship exists can initiate this data transfer, there is no risk of data falling into the wrong hands.

*Note:* Since there is no Agent Controller, and thus no registry and TLS encryption, on very old xref:windows_versions[Windows systems], you will have to choose other ways of encryption if needed.
In this case, we recommend using the built-in (symmetric) encryption with the [.guihint]#Encryption (Linux, Windows)# rule and/or setting up an xref:ssh[SSH tunnel].


=== Restricting access via IP addresses

Restricting access to specific IP addresses can also be configured via the xref:agent_windows#firewall[firewall].
However, the agent itself also offers the possibility to simply ignore requests from foreign IP addresses.
Just add the following restriction to the configuration file in the global options.
Note that there may be other parameters set in the configuration file before or after this and this is just a snippet:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
global:
  only_from: 127.0.0.1/32 192.168.42.0/24
----

As you can see in the example, you can allow any number of subnets.
For example, with `/32` you specify a subnet of size 1, so that only this one address is allowed, while with `192.168.42.0/24` you allow all addresses between `192.168.42.0` and `192.168.42.255`.

{cee-only}
In Agent Bakery, you can configure the allowed IP addresses using the following ruleset:
[.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules > Allowed agent access via IP address (Linux, Windows)#.



[#ssh]
=== Calling via SSH

Newer versions of Windows (Windows 10 from version 1809 and Windows Server from 2019) have native support for SSH.
OpenSSH can be installed here via [.guihint]#Apps > Apps & Features > Optional Features#.
But even with older versions, you can retrofit an SSH server via link:https://www.cygwin.com[Cygwin^] and thus recreate an identical configuration as is possible under xref:agent_linux_legacy#ssh[Linux].
Please note the current help from Cygwin or Microsoft for the setup.
Once an SSH server is started and accessible, further setup is identical to that under Linux:
You set up `authorized_keys` on the monitored host and restrict access to running the agent.

However, the entry in the `authorized_keys` file is a bit bumpy on Windows hosts, as many characters have to be masked here.
Use the following (shortened) example for orientation:

.~\.ssh\authorized_keys:
[{file}]
----
command="\"C:/Program Files (x86)/checkmk/service/check_mk_agent.exe\" test" ssh-rsa AAAA...pb48 mysite@mycmkserver
----

If the call is to be made under a user with administrator rights, the following two lines in the global configuration file `sshd_config` must be commented out with hash marks (`#`) on the Microsoft OpenSSH server:

.C:\ProgramData\ssh\sshd_config:
[{file}]
----
Match Group administrators
    AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys
----

Note that you can stop the Windows service after this and any firewall rule that may have been set up is also obsolete as a result.


=== Disabling built-in encryption

Especially when updating the agent, it is possible that the built-in (symmetric) encryption remains active, which is performed by the agent program itself.
If TLS encryption and built-in encryption are active at the same time, then the entropy of the transmitted data is so high that compression, which is active from version {v21} onwards, will not save any transmitted data - and will load the CPUs of both the host and the {CMK} server with additional further encryption and decryption steps,

For this reason, you should disable the built-in encryption promptly after switching to TLS with the [.guihint]#Encryption (Linux, Windows)# rule.


[#disable_sections]
== Disabling sections

The output of the {CMK} agent is divided into sections.
Each of these sections contains related information.
Sections always start with a section header.
This is a line enclosed in `<<<` and `>>>`.

Except for {CMK}'s own sections, you can individually disable any of the 30+ sections that the agent generates by default.
Specifically, this means that the corresponding commands will not be executed by the agent at all, possibly saving computation time.
Other reasons for disabling could be that you are simply not interested in certain information from a certain group of hosts, or that a particular host is providing erroneous values and you want to suspend retrieval of that data for a short time.

As a user of one of the {CEE}, you can simply create a rule via [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules > Disabled sections (Windows agent)# which will then be taken into account by the xref:glossar#agent_bakery[Agent Bakery].

.In the {EE} you can disable sections by rule
image::agent_windows_disabled_sections.png[alt="List of agent rules for the windows agent."]

*Note:* The above image shows that there is also an opposite rule [.guihint]#Enabled sections (Windows agent)# to [.guihint]#Disabled sections (Windows agent)#.
So you can work with the positive list instead of the negative one.
However, to keep the overview, we recommend to use only _one_ of the two rules.

In the rule [.guihint]#Disabled sections (Windows agent)# you will find a separate checkbox for each section that can be disabled.
For the selected checkboxes you will then find -- after the newly baked agent has been installed on the selected hosts -- in the Agent Bakery configuration file `C:\ProgramData\checkmk\agent\bakery\check_mk.bakery.yml` below `global:` a line `disabled_sections:` listing the selected sections.

Users of {CRE} can manually create an entry in the `C:\ProgramData\checkmk\agentcheck_mk.user.yml` configuration file and enter there the sections which should be disabled.
All sections that can be disabled are listed in this file below `global:` in the `_sections:` section.

For example, to disable the two sections `uptime` (for "System uptime") and `wmi_webservices` (for "Web Services"), the appropriate section of the configuration file would look like this:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
global:
    disabled_sections: [uptime, wmi_webservices]
----





[#plugins]
== Extending the agent by plugins

=== What are agent plugins?

The agent script `check_mk_agent.exe` contains a whole set of sections which provide monitoring data for various check plugins which are then automatically found by the service discovery.
This includes all important monitoring of the operating system.

In addition, there is the possibility to extend the agent with _agent plugins_.
These are small scripts or programs that are called by the agent and extend it with additional sections with additional monitoring data.
The {CMK} project provides a number of such plugins, which -- if installed and configured correctly -- automatically provide new services in the service discovery.

Why aren't these plugins simply hard-coded into the agent?
For each of the plugins there is one of the following reasons:

* The plugin can only fetch its data through internal interfaces that the agent does not provide (example: PowerShell).
* The plugin needs a configuration anyway, without which it would not work (example: `mk_oracle.ps1`).
* The plugin is so special that it is not needed by most users (example: `citrix_licenses.vbs`).


[#manual_installation_of_plugins]
=== Manual installation

The included plugins for Windows can all be found on the monitored host in the agent installation directory under `C:\Program Files (x86)\checkmk\service\plugins`.
They are stored there so that they are directly available.

Alternatively, the plugins for Windows are also located on the {CMK} server under `share/check_mk/agents/windows/plugins`.
They are also available from the agent download page in the Setup menu (as described in the xref:download_gui[installation] chapter) in the [.guihint]#Plugins# box:

.The beginning of the list of available agent plugins
image::agent_windows_files_plugins.png[alt="Download page with agent plugins."]

For all agent plugins we provide, there are matching check plugins that can evaluate their data and generate services.
These are already installed, so that newly found services are immediately recognized and can be configured.

*Note:* Before you install a plugin on the host, take a look at the corresponding file.
Often you will find important information there about the correct use of the plugin.

The actual installation is then simple:
Copy the file to `C:\ProgramData\checkmk\agent\plugins`.

Once the plugin is in the correct directory, it will be called automatically by the agent and a new section will be created in the agent output.
This usually has the same name as the plugin.
Complex plugins (e.g. `mk_oracle.ps1`) even create a whole set of new sections.


[#pluginconfig]
=== Configuration

Some plugins need a configuration file in `C:\ProgramData\checkmk\agent\config` to work.
For others, a configuration is optional (e.g. `mssql.vbs`) and allows special features or customizations.
Still others just work that way.
You have several sources to get information:

* The documentation of the associated check plugins in your {CMK} site, which you can access via [.guihint]#Setup > Services > Catalog of check plugins#.
* Comments in the plugin file (often very helpful!)
* A suitable article in this manual (e.g. about monitoring xref:monitoring_oracle#[Oracle])

For special (scripting) languages, it may be necessary to _enable_ them first in the agent configuration.
For example, Python scripts will not be executed unless they are explicitly enabled.
You can do this by extending the file extensions in the `check_mk.user.yml` configuration file in the `global` section, as shown in the following excerpt:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
global:
    execute: [exe, bat, vbs, cmd, ps1, py]
----

*Important*: The use of such plugins requires that the files can also be called in a regular command line without special paths.
In the case of Python, it must be installed correctly and the path to the interpreter must be present in the environment variables.
Instructions on how to set up Python correctly can be found directly on the pages of the link:https://www.python.org/doc/[Python Software Foundation.^]





[#customizeexecution]
=== Customizing execution of a specific plugin

Each plugin can be executed in different modes.
The following options are available for entry in the configuration file.
The value in bold is the default value:

[cols="12,15,~"]
|===
|Option |Value |Description 

|`pattern` |`'@user\*.ps1'` |Sets the range of the following options. Wildcards can also be used here. Then the following options refer to all plugins to which the expression applies. Leading determines whether the plugin should be executed directly from the installation directory under `C:\Program Files (x86)\` or from the data directory under `C:\ProgramData`. 
|`run` |`*yes*/no` |Determines whether the execution of a plugin should be suppressed.
|`async` |`*yes*/no` |Executes a plugin asynchronously and stores the data in a file. If executed synchronously, the output is passed directly to the agent.
|`timeout` |`*60*` |Sets the maximum execution time. After that the plugin will be terminated even if no output has come. The default value is based on the default for the query interval of the agent.
|`cache_age` |`*60*` |Sets in seconds how long an output is valid. 
|`retry_count` |`*1*` |The number of times a plugin may fail before discarding output from the cache.
|`description` |`'Text'` |Here you can enter a free text to be appended to the logs.
|===

A configuration for the Veeam plugin looks then for example like this (the excerpt is shortened and contains only the relevant part for the example):

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
plugins:
    enabled: yes
    execution:
        - pattern: $CUSTOM_PLUGINS_PATH$\veeam_backup_status.ps1
          async: yes
          timeout: 120
          cache_age: 300
          retry_count: 2
----

According to the above exemplary configuration the plugin in the data directory `C:\ProgramData\checkmk\agent\plugins` is executed asynchronously every five minutes (300 seconds) and may run for a maximum of two minutes (120 seconds).
If the plugin runs into this timeout, it will try a second time to get a result.


=== Installation via the Agent Bakery

{cee-only}
In the {CEE}, the included plugins can be configured via the xref:glossar#agent_bakery[Agent Bakery].
This takes care of both the installation of the plugin itself and the correct creation of the configuration file, should one be needed.

Each plugin is configured via an agent rule.
You can find the appropriate rule sets in [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules > Agent Plugins#:

.List of rules for the agent plugins in the {EE}
image::agent_linux_rules_agent_plugins.png[alt="Page with rules for configuring agent plugins in the {EE}."]


=== Manual execution

Since agent plugins are executable programs, you can run them manually for testing and diagnostic purposes.
However, there are plugins that need certain environment variables set by the agent to find their configuration file, for example.
If necessary, set them manually if they are needed in the script or program.





[#e2e_monitoring]
== Including classic (Nagios) check plug-ins

[#mrpe]
=== Running plug-ins via MRPE

There are two good reasons to use Nagios plugins also under {CMK}.
If you migrated your monitoring from a Nagios based solution to {CMK}, you can continue to use older check plugins for which there is no {CMK} counterpart yet.
In many cases these are self-written plugins in Perl or Shell. 

The second reason for using Nagios plugins is true end-to-end monitoring.
Let's assume you have your {CMK} server, a web server and a database server distributed over a large data center.
In such a case, the response times of the database server measured from the {CMK} server are not very meaningful.
It is far more important to know these values for the connection between the web server and the database server.

The {CMK} agent provides a simple mechanism to meet both of these requirements:
_MK's Remote Plugin Executor_ or _MRPE_ for short.
The name is deliberately an analogy to Nagios' _NRPE_, which performs the same task there.

The MRPE is built into the agent and is controlled by various configuration files.


==== Enabling and disabling MPRE

By default the consideration of MRPE plugins is enabled.
If you do not want to use this feature, you can disable it in the configuration file by adding the following definition:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
mrpe:
  enabled: no
----


==== Limiting the execution time

Sometimes the runtime of a script or Nagios plugin is unpredictable and in the worst case a plugin never finishes.
To keep control here, you can limit the maximum runtime of the MRPE plugins.
The value shown here is also the default value in seconds.
So adjustments are only necessary if you want to set a shorter or longer interval:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
mrpe:
  # enabled: yes
  timeout: 60
----


==== Adding MRPE plugins

To tell the agent where the file to run is located and how to call it, add an entry in the MRPE configuration:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
MRPE:
  config:
    - check = MyServiceName 'C:\ProgramData\checkmk\agent\mrpe\my_check_plugin.bat' -w 10 -c 20 MyParameter
----

It is not necessary to put the file in the agent's directory as well, although it is convenient to collect them all in a common place.
In this example configuration, you can now see the following elements of the relevant line:

[cols="40,~"]
|===
|Element |Description 

|`MyServiceName` |The service name as it should be displayed in {CMK}.
|`'C:\ProgramData\checkmk\agent\mrpe\my_check_plugin.bat'` |Program to run; quotes for any spaces.
|`-w 10 -c 20` |Passed options: A threshold of 10 for {WARN} and 20 for {CRIT}.
|`MyParameter` |Example passing of other parameters.
|===

After you set up the MRPE plugin, it will be active directly without restarting the agent and will be added to the output.
In the service discovery you will now find your new service automatically:

image::agent_windows_service_discovery.png[]


=== MRPE with the Agent Bakery

{cee-only}
As an alternative to configuring directly on a host in the user-specific configuration file, you can also define your MRPE plugins directly in the [.guihint]#Setup# menu.
To do this, use the [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent > Agent rules > Execute MRPE checks# rule set.
The necessary entry is then automatically created in the xref:agent_windows#files[Agent Bakery configuration file].



[#hw_monitoring]
== Monitoring hardware

Hardware monitoring of Windows hosts is well covered by the {CMK} agent, provided plugins and extensions available in the link:https://exchange.checkmk.com/[{CMK} Exchange^] well covered.
However, there are situations where neither ready-made plugins nor programming interfaces for creating your own plugins are available, but either application software or a hardware monitoring tool from a hardware manufacturer can provide monitoring data via SNMP.

In such a case, set [.guihint]#SNMP# to the appropriate connection type (SNMP v2 or v3 or SNMP v1) in the [.guihint]#Monitoring agents# box in the host's properties in Setup.
Services that are available via both SNMP and {CMK} agent (e.g. CPU usage, file systems, network cards) are then automatically fetched by the {CMK} agent and not via SNMP.
This automatically avoids duplicate transmissions.

For more information, see the xref:snmp#snmp_cmk_agent[Monitoring with SNMP] article.




[#files]
== Files and directories

=== Paths on the monitored Windows host

[cols="45,~",options="header"]
|===
|Path |Meaning
|`C:\Program Files (x86)\checkmk\service` |Installation directory for the program specific files including the agent script `check_mk_agent.exe` and the Agent Controller `cmk-agent-ctl.exe`. Adjustments are not necessary here. +
In the directory `Program Files *(x86)*` the agent is installed for compatibility reasons. This is independent of whether the agent is installed on a 32- or 64-bit operating system. The installation routine automatically selects the correct agent.
|`C:\Program Files (x86)\checkmk\service\check_mk.yml` |The default configuration file of the agent. Do not modify this file.
|`C:\ProgramData\checkmk\agent\` |Installation directory for the host-specific files. This is where extensions, log, and configuration files specific to this host are located.
|`C:\ProgramData\checkmk\agent\bakery\check_mk.bakery.yml` |This configuration file is created by the Agent Bakery and overwrites values from the default configuration file if necessary.
|`C:\ProgramData\checkmk\agentcheck_mk.user.yml` |Configuration file for your individual customizations. This file is read in last and overwrites values from the other configuration files if necessary.
|`C:\ProgramData\checkmk\agent\plugins` |Directory for plugins which should be executed automatically by the agent and extend its output with additional monitoring data.
|`C:\ProgramData\checkmk\agent\config` |Storage of configuration files for the agent.
|`C:\ProgramData\checkmk\agent\local` |Directory for custom xref:localchecks#[local checks].
|`C:\ProgramData\checkmk\agent\mrpe` |MRPE extensions can be stored here.
|`C:\ProgramData\checkmk\agent\backup` |After each change of the {CMK} agent service a backup is created from the user configuration here.
|===


=== Paths on the {CMK} server

[cols="45,~",options="header"]
|===
|Path |Meaning
|`local/share/check_mk/agents/custom` |Base directory for custom files to be delivered with a baked agent.
|`share/check_mk/agents/windows/` |Directory containing the agent's MSI package. This directory also contains configuration examples and all agent plugins.
|===




////
[#intro]
== Der neue Agent

Die Überwachung von Windows-Servern war von Anfang an eine der wichtigsten Aufgaben von {CMK}.
Wie für alle anderen Server-Betriebssysteme liefert {CMK} daher auch für Windows einen eigenen Agenten aus.

In der {CMK}-Version {v21} gibt es nun einen neuen Windows-Agenten.
Präziser gesagt, wird dem *Agentenprogramm* `check_mk_agent.exe` eine neue Komponente zur Seite gestellt: der *Agent Controller*.
Der Agent Controller ist dem Agentenprogramm vorgeschaltet, fragt dieses ab und kommuniziert an dessen Stelle mit dem {CMK}-Server.
Dazu registriert er sich am *Agent Receiver*, einem ebenfalls neuen Prozess, der auf dem {CMK}-Server läuft.

Der neue Windows-Agent übernimmt also zum einen das Agentenprogramm, und damit dessen Vorteile.
Zum anderen ergänzt er das Programm so, dass neue Funktionen hinzugefügt werden können wie die TLS-Verschlüsselung der Kommunikation, Datenkomprimierung -- und auch die Umkehrung der Kommunikationsrichtung.

Der registrierte, verschlüsselte und komprimierte *Pull-Modus* mit dem Agent Controller ist ab Version {v21} für alle {CMK}-Editionen verfügbar -- sofern sowohl {CMK}-Server als auch Agent Version mindestens {v21} haben.

Der Agent Controller ist nur auf bestimmten (neueren) Windows Versionen ausführbar.
Welche das sind, können Sie aus der nachfolgenden Tabelle ablesen.

Allerdings beherrscht der Agent auch einen sogenannten *Legacy-Modus*, um ältere Windows-Versionen zu unterstützen.
In diesem Modus arbeitet der neue wie der alte Agent, d.h. ohne Agent Controller und damit auch ohne Registrierung am {CMK}-Server.
Für den Legacy-Modus sind einige Besonderheiten zu beachten, die im xref:post_install[Installationskapitel] zusammengefasst sind.

Aus Kompatibilitätsgründen unterstützt der Agent nur die aktuellen Versionen der link:https://de.wikipedia.org/wiki/Microsoft_Windows_NT[Microsoft Windows NT^] Produktlinie (Edition).
Die folgende Tabelle listet diese explizit auf.
In der Spalte Version finden Sie den Anfang der Versionsnummer, die Sie sich mit den Kommandos `ver` und `systeminfo` auf dem Windows-System ausgeben lassen können.

[#windows_versions]
[cols="50,25,~",options="header"]
|===
|Edition |Version |Agent Controller
|Windows Vista |6.0 |ohne
|Windows Server 2008 (R1) |6.0 |ohne
|Windows 7 |6.1 |mit
|Windows Server 2008 R2 |6.1 |mit
|Windows 8 |6.2 |mit
|Windows Server 2012 (R1) |6.2 |mit
|Windows 8.1 |6.3 |mit
|Windows Server 2012 R2 |6.3 |mit
|Windows 10 |10.0  |mit
|Windows Server 2016 |10.0 |mit
|Windows Server 2019 |10.0 |mit
|Windows 11 |10.0  |mit
|Windows Server 2022 |10.0 |mit
|===

*Wichtig*: Editionen, die in der Tabelle nicht erwähnt werden, werden nicht offiziell unterstützt.
Dazu gehört zum Beispiel auch _Windows Embedded_.

Die Installation, Registrierung und Einrichtung des Agenten ist mit wenigen Schritten erledigt, denn dieser braucht für seine Funktion zum Beispiel keine zusätzlichen Bibliotheken.
Zudem wird der Agent mit einer Grundkonfiguration ausgeliefert, die für die meisten Anwendungsfälle ausreicht.


[#agent_architecture]
== Architektur des Agenten

Mit dem in der {v21} eingeführten neuen Agenten sind mehr Software-Komponenten als zuvor in die Kommunikation involviert.
Daher stellen wir die Komponenten und ihr Zusammenspiel kurz vor.
Die Architektur ist beim Windows-Agenten und beim xref:agent_linux#architecture[Linux-Agenten] identisch.
Nur die technische Realisierung ist spezifisch für die Betriebssysteme.

.Zusammenspiel der Software-Komponenten
[{image-border}]
image::agent_windows_communication_flow.png[alt="Illustration der Kommunikation zwischen Agent und Instanz."]

Das *Agentenprogramm* `check_mk_agent.exe` ist und bleibt zuständig für die Sammlung der Monitoring-Daten.
Es wird als Windows-Dienst unter dem lokalen Systemkonto (_Local System account_) gestartet.
Es sammelt bei einem Aufruf Daten zu dem lokalen System und stellt sie dem Agent Controller zur Verfügung.

Das Agentenprogramm ist:

* minimalistisch, denn es begnügt sich mit minimalen Ressourcen an RAM, CPU, Plattenplatz und Netzwerk.
* umfassend, denn es hat Zugriff auf wichtige Daten, die per WMI oder SNMP nicht erreichbar sind. +
In einigen Fällen kann allerdings die Überwachung per SNMP *zusätzlich* zum {CMK}-Agenten sinnvoll sein.
Im Artikel zur xref:snmp#snmp_cmk_agent[Überwachung mit SNMP] finden Sie mehr zu diesem Thema.
* sicher, denn es erlaubt keinerlei Zugriffe aus dem Netzwerk.
* leicht erweiterbar, denn Sie können Plugins in einer beliebigen Programmier- oder Skriptsprache schreiben und vom Agentenprogramm ausführen lassen.
* so transparent, wie es eine als ausführbar gelieferte Datei sein kann, denn Sie haben jederzeit Zugriff auf den Quellcode und damit Einsicht in die Funktionalität und können den Agenten prinzipiell auch selbst kompilieren.

Der *Agent Controller* `cmk-agent-ctl.exe` ist die Komponente des Agenten, die für den Transport der vom Agentenprogramm gesammelten Daten zuständig ist.
Er wird als Hintergrundprozess unter dem lokalen Systemkonto von Windows ausgeführt.
Er lauscht am TCP-Port 6556 auf eingehende Verbindungen der {CMK}-Instanz und fragt das Agentenprogramm über eine TCP-Verbindung ab.

Der *Agent Receiver* `agent-receiver` ist die Komponente des {CMK}-Servers, die als genereller Endpunkt für die Kommunikation des Agent Controllers dient, z.B. für die Registrierung der Verbindung.
Im Pull-Modus erfolgt der Datenaustausch mit den xref:cmc_differences.html#fetcher_checker[{CMK}-Fetchern] der Instanz.

TLS-Verschlüsselung und Datenkomprimierung werden über den Agent Controller und den Agent Receiver realisiert, d.h. {CMK}-Server und Agent müssen mindestens Version {v21} haben.
Dabei ist nach der Installation der erste Schritt die Registrierung des Agent Controller beim Agent Receiver der {CMK}-Instanz, mit der ein Vertrauensverhältnis hergestellt wird.
Bei der Registrierung wird bereits die TLS-Verschlüsselung der Kommunikation eingerichtet.


[#install]
== Installation

{CMK} bietet Ihnen für die Installation des Windows-Agenten verschiedene Wege -- von der manuellen Installation des Software-Pakets bis hin zum vollautomatischen Deployment inklusive Updatefunktion.
Manche davon stehen nur in den {EE} zur Verfügung:

[cols="40,50,~,~",options="header"]
|===
|Methode |Beschreibung |CRE |CEE
|Mitgeliefertes MSI-Paket |Einfache Installation eines Standard-Agenten mit manueller Konfiguration über Konfigurationsdateien. |X |X
|MSI-Paket aus der xref:glossar#agent_bakery[Agentenbäckerei] |Konfiguration über die GUI, individuelle Konfiguration pro Host möglich. | |X
|xref:agent_deployment#[Automatisches Updaten] |Das Paket aus der Agentenbäckerei wird erstmalig von Hand oder per Skript installiert und von da an automatisch aktualisiert. | |X
|===

Alternativ können Sie das MSI-Paket auch über andere Wege, wie zum Beispiel das Microsoft Active Directory, verteilen.
Die Installation kann hier durch das MSI-Format komplett automatisiert werden.

[#download]
=== Download des MSI-Pakets

Sie installieren den Windows-Agenten durch Installation des MSI-Pakets.

Vor der Installation müssen Sie das Paket holen und auf den Host bringen (zum Beispiel mit `scp` oder WinSCP), auf dem der Agent laufen soll.
 

[#download_gui]
==== Paket per {CMK}-GUI holen

In der {CRE} finden Sie das Windows-Paket des Agenten über [.guihint]#Setup > Agents > Windows#.
In den {EE} gelangen Sie im [.guihint]#Setup#-Menü über [.guihint]#Agents > Windows, Linux, Solaris, AIX# zunächst in die xref:wato_monitoringagents#bakery[Agentenbäckerei], wo Sie die gebackenen Pakete finden.
Von dort aus kommen Sie mit dem Menüeintrag [.guihint]#Related > Windows files# zur Liste der Agentendateien:

.Auf der Download-Seite finden Sie das MSI-Paket
image::agent_windows_agent_files.png[alt="Download-Seite mit dem MSI-Paket."]

Alles was Sie brauchen, finden Sie gleich im ersten Kasten mit dem Namen [.guihint]#Packaged Agents#:
die fertige MSI-Paketdatei `check_mk_agent.msi`.


==== Paket per REST-API holen

Die xref:rest_api#[REST-API] von {CMK} bietet die folgenden Möglichkeiten Agentenpakete vom {CMK}-Server herunterzuladen:

* Herunterladen des mitgelieferten Agenten.
* Herunterladen eines gebackenen Agenten nach Host-Name und Betriebssystem.
* Herunterladen eines gebackenen Agenten nach Hash des Agenten und Betriebssystems.

Per REST-API haben Sie die Möglichkeit, das Paket vom {CMK}-Server direkt auf den Zielrechner zu holen.

Das mitgelieferte MSI-Paket des Windows-Agenten lässt sich beispielsweise mit dem folgenden `curl`-Kommando holen.
In neueren Windows-Versionen wird `curl` bereits mitgeliefert, in älteren müssen Sie sich vorher die `curl`-Kommandoumgebung per link:https://curl.se/windows/[curl for Windows^] extra installieren. 

[{shell}]
----
C:\Users\hhirsch\Downloads\> curl -OJG "http://mycmkserver/mysite/check_mk/api/1.0/domain-types/agent/actions/download/invoke" ^
--header "Accept: application/octet-stream" ^
--header "Authorization: Bearer automation myautomationsecret" ^
--data-urlencode "os_type=windows_msi" 
----

*Hinweis:* Der Befehl wurde zugunsten der Lesbarkeit in vier Zeilen aufgeteilt.

Hierbei handelt es sich nur um ein einfaches Beispiel, um die Funktionsweise dieses einen REST-API-Endpunkts zum Herunterladen des Agenten zu demonstrieren.
Details zu diesem und anderen REST-API-Endpunkten finden Sie in der API-Dokumentation, die Sie in {CMK} über [.guihint]#Help > Developer resources > REST API documentation# aufrufen können.


[#install_paket]
=== Paket installieren

[#install_manual]
==== Manuelle Installation

Nachdem Sie das MSI-Paket geholt und -- falls nötig -- mit `scp`, WinSCP oder anderen Mitteln auf den zu überwachenden Host kopiert haben, starten Sie die Installation entweder per Doppelklick auf die MSI-Datei oder wie folgt von der Kommandozeile:

[{shell}]
----
C:\Users\hhirsch\Downloads\> check_mk_agent.msi
----

Sie erhalten die Startseite des Setup-Assistenten:

.Die Installation startet mit einem Willkommen
image::agent_windows_setup_wizard_1.png[alt="Startseite des Setup-Assistenten."]

Mit den [.guihint]#Next#-Knöpfen hangeln Sie sich durch die Seiten des Assistenten.
Akzeptieren Sie die Lizenzbedingungen der [.guihint]#GNU GENERAL PUBLIC LICENSE#, um fortzufahren.
Anschließend präsentiert Ihnen der Setup-Assistent die folgende Seite:

[#agent_windows_setup_wizard_3b]
.Auswahlmöglichkeiten beim Update eines sehr alten Agenten
image::agent_windows_setup_wizard_3b.png[alt="Seite des Setup-Assistenten zum Vorgehen beim Update eines alten Agenten."]

Die Auswahlmöglichkeiten dieser Seite sind für Sie nur dann relevant, wenn bereits ein Windows-Agent auf dem Host installiert ist und dieser *älter* als Version {v16} ist.
In der Version {v16} hatte sich die Architektur des Windows-Agenten grundlegend geändert.
Falls Sie von einem Windows-Agenten *vor* Version {v16} auf den aktuellen Agenten updaten (oder _migrieren_), dann lesen Sie zuerst im {CMK}-Handbuch der Version {v20} das link:https://docs.checkmk.com/2.0.0/de/agent_windows.html#legacy[Kapitel zum alten Agenten.]
Dort erfahren Sie, welche der angebotenen Optionen Sie in diesem speziellen Update-Fall auswählen sollten.

In allen anderen Fällen empfehlen wir die Auswahl von [.guihint]#Clean installation.#

Bestätigen Sie den Start der Installation und erlauben Sie dann noch im Dialog zur Benutzerkontensteuerung ([.guihint]#User Account Control#), dass das Installationsprogramm Änderungen durchführen darf.
Nach dem Abschluß können Sie den Setup-Assistenten beenden.

Nach der Installation wird der Agent sofort als Windows-Dienst gestartet und ist für die Überwachung des Systems bereit.


[#install_unattended]
==== Unbeaufsichtigte Installation

Windows bietet über die Kommandozeile für Administratoren mit `msiexec` die Möglichkeit, MSI-Pakete automatisiert ohne Benutzerinteraktion zu installieren.
Eine automatisierte Installation kann dann zum Beispiel folgendermaßen aussehen:

[{shell}]
----
C:\Users\hhirsch\Downloads\> msiexec /i check_mk_agent.msi /qn
----

In diesem Fall wird der Agent ohne Benutzerinteraktion und Benutzeroberfläche (`/qn`) installiert (`/i`) und ebenfalls sofort als Windows-Dienst gestartet.
Diese Methode eignet sich also hervorragend zum automatischen Ausrollen des Agenten auf viele Hosts.

Sie können auf diesem Wege auch die drei Optionen auswählen, die Ihnen während der manuellen Installation xref:agent_windows_setup_wizard_3b[im Setup-Assistenten] angeboten wurden.
Für jede Option gibt es einen Bezeichner, den Sie für das Installationskommando verwenden können:

[cols="65,~",options="header"]
|===
|Option im Setup-Assistenten | Bezeichner
|[.guihint]#Clean installation.# |`WIXUI_CLEANINSTALL`
|[.guihint]#Remove Legacy Windows Agent (pre 1.6) if present.# |`WIXUI_REMOVELEGACY`
|[.guihint]#Migrate from Legacy Windows Agent (pre 1.6) configuration if present.# |`WIXUI_MIGRATELEGACY`
|===

Um eine Option zu _aktivieren_, hängen Sie deren Bezeichner gefolgt von einem Gleichheitszeichen an:

[{shell}]
----
C:\Users\hhirsch\Downloads\> msiexec /i check_mk_agent.msi /qn WIXUI_CLEANINSTALL=
----

Um eine Option explizit zu _deaktivieren_, müssen Sie hinter dem Gleichheitszeichen noch zwei Anführungszeichen anfügen:

[{shell}]
----
C:\Users\hhirsch\Downloads\> msiexec /i check_mk_agent.msi /qn WIXUI_MIGRATELEGACY=""
----


=== Installation mit der Agentenbäckerei

{cee-only}
Die {CEE} verfügen mit der xref:wato_monitoringagents#bakery[Agentenbäckerei] über ein Software-Modul zum automatischen Paketieren von individuell angepassten Agenten -- auch Windows-Agenten.
Eine ausführliche Beschreibung dazu finden Sie im allgemeinen Kapitel über die xref:wato_monitoringagents#[Agenten].
Die Installation des gebackenen MSI-Pakets geschieht dann wieder genau wie xref:install_paket[oben] beschrieben.


=== Automatisches Updaten

{cee-only}
Wenn Sie die Agentenbäckerei verwenden, können Sie automatische Updates des Agenten einrichten.
Diese werden in einem xref:agent_deployment#[eigenen Artikel] beschrieben.


[#config_files]
=== Konfigurationsdateien des Agenten

Das MSI-Paket speichert bei der Installation die programmspezifischen Dateien in `C:\Program Files (x86)\checkmk\service\` und die host-spezifischen Dateien in `C:\ProgramData\checkmk\agent\`.
Die programmspezifischen Dateien brauchen Sie nicht anzupassen.
Mit den host-spezifischen Dateien werden Plugins, Log- und Konfigurationsdateien abgelegt und das Verhalten des Agenten konfiguriert.

*Hinweis*: Standardmäßig ist das gesamte Verzeichnis `C:\ProgramData` in Windows versteckt (_hidden_).

Der Agent liest nacheinander drei Konfigurationsdateien ein:

. `C:\Program Files (x86)\checkmk\service\check_mk.yml` +
ist die Standardkonfigurationsdatei, die Sie nicht ändern sollten.
. `C:\ProgramData\checkmk\agent\bakery\check_mk.bakery.yml` +
wird von der Agentenbäckerei erstellt und sollte nicht manuell geändert werden.
. `C:\ProgramData\checkmk\agent\check_mk.user.yml` +
ist Ihre Konfigurationsdatei, in der Sie von Hand individuelle Anpassungen vornehmen können, um eine Einstellung oder eine Erweiterung auf einem Host zu testen.

Wird eine Option in mehreren Dateien gesetzt, dann bestimmt die zuletzt eingelesene Datei den Wert dieser Option.
Für das manuelle Arbeiten mit dem Agenten ist also lediglich die letzte Konfigurationsdatei `check_mk.user.yaml` relevant, weil sie als letzte eingelesen wird und damit _das letzte Wort hat_.
Wenn die Agentenbäckerei nicht genutzt wird, ist sie sogar die einzige Datei, in der Anpassungen an der Konfiguration des Agenten vorgenommen werden dürfen.

Wie Sie vielleicht schon an der Dateiendung der Konfigurationsdateien erkannt haben, wird als Dateiformat link:https://yaml.org[YAML^] verwendet.


[#post_install]
=== Wie geht es weiter nach der Installation?

Nach der Installation des Agenten mit Agent Controller ist der nächste Schritt die xref:registration[Registrierung], mit der die TLS-Verschlüsselung eingerichtet wird, so dass die verschlüsselte Agentenausgabe vom {CMK}-Server entschlüsselt und im Monitoring angezeigt werden kann.

Eine Besonderheit gibt es, falls der Agent mit Agent Controller erstmalig installiert wurde.
Dann schaltet der Agent in den unverschlüsselten *Legacy-Pull-Modus*, damit der {CMK}-Server nicht von den Monitoring-Daten abgeschnitten wird und diese weiterhin anzeigen kann.
Das betrifft sowohl eine Neuinstallation als auch das Update eines Agenten der Version {v20} und älter.

Im Monitoring sieht das dann etwa so aus:

.Warnung im {CMK}-Monitoring, dass TLS noch nicht genutzt wird
image::agent_windows_service_legacy_pull_mode.png[alt="Der WARN-Zustand des 'Check_MK' Services wegen fehlender Verschlüsselung."]

Die {CMK}-Instanz erkennt an der Agentenausgabe, dass der Agent Controller vorhanden und damit die TLS-Verschlüsselung möglich ist -- aber noch nicht eingeschaltet ist.
Der Service [.guihint]#Check_MK Agent# wechselt in den Zustand {WARN} und bleibt es solange, bis Sie die Registrierung nach dem Update des Agenten durchgeführt haben.
Nach der Registrierung wird nur noch im verschlüsselten Pull-Modus kommuniziert.
Der Legacy-Pull-Modus wird abgeschaltet und bleibt es auch.

Anders liegt der Fall, wenn der Agent auf sehr alten xref:windows_versions[Windows-Systemen] installiert ist.
Die Installation des Agenten mag erfolgreich sein.
Falls der Agent Controller aber wegen API-Inkompatibilitäten nicht gestartet werden kann, wird auf die unverschlüsselte Übertragung zurückgegriffen.
Ohne Agent Controller ist die Registrierung nicht möglich und der einzige Kommunikationsweg verbleibt der *Legacy-Modus*.
Im Legacy-Modus sind im Kapitel xref:registration[Registrierung] nur die Abschnitte relevant, um den Host ins Setup und anschließend ins Monitoring aufzunehmen.
Im Kapitel xref:test[Test und Fehlerdiagnose] können Sie sich den Test zum Aufruf des Agent Controllers sparen, da dieser im Legacy-Modus nicht vorhanden ist.
Da es ohne Agent Controller auch keine TLS-Verschlüsselung gibt, müssen Sie bei Bedarf andere Wege der Verschlüsselung wählen.
Wir empfehlen, in diesem Fall die eingebaute (symmetrische) Verschlüsselung zu nutzen mit der Regel [.guihint]#Encryption (Linux, Windows)# und/oder einen xref:ssh[SSH-Tunnel] einzurichten.


[#registration]
== Registrierung

=== Übersicht und Voraussetzungen

Der Host, der ins Monitoring aufgenommen werden soll, kann noch keine verschlüsselten Daten mit dem {CMK}-Server austauschen.
Der Grund ist, dass ein gegenseitiges Vertrauensverhältnis fehlt – Vertrauen und Verschlüsselung sind ab {CMK} {v21} Pflicht.
Zwar ist unmittelbar nach der erstmaligen Installation des {v21} Agenten (auch als Update eines älteren Agenten) eine unverschlüsselte Kommunikation im Legacy-Pull-Modus möglich, diese wird aber spätestens beim nächsten Update des Agenten deaktiviert.
Führen Sie die Registrierung daher zeitnah nach Installation/Update durch.
Wie Sie dies bewerkstelligen, zeigt dieses Kapitel.

Die Registrierung und damit die Herstellung des gegenseitigen Vertrauensverhältnisses erfolgt unter einem {CMK}-Benutzer mit Zugriff auf die xref:rest_api#[REST-API.]
Dafür bietet sich der xref:glossar#automation_user[Automationsbenutzer] an, der bei jeder {CMK}-Installation automatisch angelegt wird und dessen Passwort Sie auswürfeln können.

*Hinweis:* Da es auf sehr alten xref:windows_versions[Windows-Systemen] keinen Agent Controller, und damit keine Registrierung und TLS-Verschlüsselung gibt, müssen Sie bei Bedarf andere Wege der Verschlüsselung wählen.
Wir empfehlen, in diesem Fall die eingebaute (symmetrische) Verschlüsselung zu nutzen mit der Regel [.guihint]#Encryption (Linux, Windows)# oder einen xref:ssh[SSH-Tunnel] einzurichten.


=== Host ins Setup aufnehmen

Erstellen Sie zunächst den neuen Host über [.guihint]#Setup > Hosts > Add host#.
Ein Host muss in der xref:glossar#configuration_environment[Konfigurationsumgebung] existieren, bevor er registriert werden kann.


=== Host beim Server registrieren

Die Registrierung erfolgt mit dem Agent Controller `cmk-agent-ctl`, der für die Konfiguration der Verbindungen eine Kommandoschnittstelle bietet.
Sie können sich mit dem Kommando `cmk-agent-ctl help` die Hilfe zu den Optionen anzeigen lassen.

Begeben Sie sich nun zum Host, der registriert werden soll.
Hier ist mit Administratorrechten eine Anfrage an die {CMK}-xref:glossar#site[Instanz] zu stellen:

[{shell}]
----
C:\Windows\system32> "C:\Program Files (x86)\checkmk\service\cmk-agent-ctl.exe" ^
    register ^
    --hostname mynewhost ^
    --server cmkserver --site mysite ^
    --user automation --password test23
----

Dabei ist der Host-Name hinter der Option `--hostname` exakt so anzugeben, wie zuvor beim Erstellen im Setup.
Die Optionen `--server` und `--site` geben den Namen des {CMK}-Servers und der Instanz an.
Der Server-Name darf auch die IP-Adresse sein, der Instanzname (hier `mysite`) entspricht demjenigen, den Sie im URL-Pfad der Weboberfläche sehen. 
Komplettiert werden die Optionen durch Name und Passwort des Automationsbenutzers.
Wenn Sie die Option `--password` auslassen, wird das Passwort interaktiv abgefragt.

Waren die angegebenen Werte korrekt, werden Sie aufgefordert, die Identität der {CMK}-Instanz zu bestätigen, zu der Sie die Verbindung herstellen wollen.
Das zu bestätigende Server-Zertifikat haben wir aus Gründen der Übersichtlichkeit stark verkürzt:


[{shell}]
----
Attempting to register at cmkserver:8000/mysite. Server certificate details:

PEM-encoded certificate:
---BEGIN CERTIFICATE---
MIIC6zCCAdOgAwIBAgIUXbSE8FXQfmFqoRNhG9NpHhlRJ40wDQYJKoZIhvcNAQEL
[...]
nS+9hN5ILfRI+wkdrQLC0vkHVYY8hGIEq+xTpG/Pxw==
---END CERTIFICATE---

Issued by:
	Site 'mysite' local CA
Issued to:
	localhost
Validity:
	From Thu, 10 Feb 2022 15:13:22 +0000
	To   Tue, 13 Jun 3020 15:13:22 +0000

Do you want to establish this connection? [Y/n]
> #Y#
----

Bestätigen Sie mit `Y`, um den Vorgang abzuschließen.

Falls keine Fehlermeldung angezeigt wird, ist die verschlüsselte Verbindung hergestellt.
Über diese Verbindung werden alle Daten komprimiert übertragen.


=== Vertrauensverhältnis überprüfen

Das Kommando `cmk-agent-ctl status` zeigt nun genau ein Vertrauensverhältnis zum {CMK}-Server:

[{shell-raw}]
----
C:\Windows\system32> "C:\Program Files (x86)\checkmk\service\cmk-agent-ctl.exe" status
Connection: 12.34.56.78:8000/mysite
	UUID: d38e7e53-9f0b-4f11-bbcf-d196deadbeef
	Local:
		Connection type: pull-agent
		Certificate issuer: Site 'mysite' local CA
		Certificate validity: Mon, 21 Feb 2022 11:23:57 +0000 - Sat, 24 Jun 3020 11:23:57 +0000
	Remote:
		Connection type: pull-agent
		Registration state: operational
		Host name: mynewhost
----

*Hinweis:* Es kann stets nur ein Vertrauensverhältnis zwischen Host und Instanz geben.
Wenn Sie beispielsweise den bereits registrierten Host `mynewhost` unter anderem Namen (`mynewhost2`), aber mit der gleichen IP-Adresse registrieren, dann ersetzt die neue Verbindung die bestehende.
Die Verbindung von `mynewhost` zur Instanz wird gelöst und für den Host werden keine Agentendaten mehr für das Monitoring geliefert.


=== Im Auftrag registrieren

Zur leichteren Registrierung mehrerer Hosts kann ein beliebiger Host, auf dem der Agent installiert ist, eine Registrierung im Auftrag anderer durchführen.
Dabei wird eine JSON-Datei exportiert, die dann auf den Ziel-Host übertragen und dort importiert werden kann.
Auch hier gilt wie zuvor: Der im Auftrag registrierte Host muss in der Instanz bereits eingerichtet sein.

Zunächst wird auf einem beliebigen im Setup befindlichen Host die Registrierung stellvertretend durchgeführt.
Hier bietet sich natürlich der {CMK}-Server an, der in der Regel als erster Host eingerichtet wird.
Wie beim Beispiel oben gilt, dass Sie das Passwort per Option übergeben können oder interaktiv danach gefragt werden, wenn Sie die Option `--password` weglassen.
Die JSON-Ausgabe leiten wir im Beispiel in eine Datei um:

[{shell}]
----
{c-root} cmk-agent-ctl proxy-register \
    --hostname mynewhost3 \
    --server cmkserver --site mysite \
    --user automation > /tmp/mynewhost3.json
----

Nun übertragen wir die Datei `/tmp/mynewhost3.json` auf den Host, für den wir die Registrierung durchgeführt haben, und importieren die Datei:

[{shell}]
----
C:\Windows\system32> "C:\Program Files (x86)\checkmk\service\cmk-agent-ctl.exe" ^
    import /tmp/mynewhost3.json
----


=== Host ins Monitoring aufnehmen

Sobald die Registrierung fertiggestellt ist, führen Sie im Setup des {CMK}-Servers einen xref:wato_monitoringagents#diagnosticpage[Verbindungstest] und eine xref:wato_services#discovery[Service-Erkennung] durch. 
Anschließend nehmen Sie die gefundenen Services ins Monitoring auf, indem Sie als letzten Schritt xref:wato#activate_changes[die Änderungen aktivieren.]

Falls der Verbindungstest fehlschlägt, finden Sie im xref:test[folgenden Kapitel] Informationen zu Test und Fehlerdiagnose.


=== Host deregistrieren

Die Registrierung eines Hosts können Sie auch wieder rückgängig machen.
Auf einem Host, der mit dem {CMK}-Server verbunden ist, können Sie das Vertrauensverhältnis mit diesem Kommando widerrufen:

[{shell}]
----
C:\Windows\system32> "C:\Program Files (x86)\checkmk\service\cmk-agent-ctl.exe" ^
    delete d38e7e53-9f0b-4f11-bbcf-d196deadbeef
----

Der anzugebende Universally Unique Identifier (UUID) ist derjenige, der beim Kommando `cmk-agent-ctl status` ausgegeben wird. 

Auf dem {CMK}-Server existiert für jede Verbindung eines Hosts, der sich im Monitoring befindet, ein Softlink mit der UUID, welcher auf den Ordner mit der Agentenausgabe zeigt:

[{shell-raw}]
----
{c-omd} cd ~/var/agent-receiver/received-outputs
{c-omd} ls -l d38e7e53-9f0b-4f11-bbcf-d196deadbeef
lrwxrwxrwx 1 mysite mysite 67 Feb 23 07:18 d38e7e53-9f0b-4f11-bbcf-d196deadbeef -> /omd/sites/mysite/tmp/check_mk/data_source_cache/push-agent/mynewhost
----

Wenn Sie diesen Softlink löschen, ist eine erneute Registrierung des Hosts erforderlich.
Hier können Sie auch unbenutzte Softlinks löschen, die beispielsweise von mehreren Registrierungen desselben Hosts herrühren.


[#test]
== Test und Fehlerdiagnose

Ein modulares System kann an vielen Stellen nicht wie vorgesehen funktionieren.
Da mit dem Agenten in der {v21} die beiden Komponenten Agent Controller auf dem Host und Agent Receiver auf dem Checkmk-Server eingeführt wurden, steigt die Zahl der Stellen, an denen etwas schief gehen kann.

Bei der Fehlersuche ist daher eine strukturierte Vorgehensweise sinnvoll.
Selbstverständlich können Sie die hier beschriebene schrittweise Analyse auch nutzen, die Datenerhebung und Kommunikation von Checkmk näher kennenzulernen.

Alle Möglichkeiten, die es vom {CMK}-Server aus gibt, sind im allgemeinen Kapitel über die Agenten xref:wato_monitoringagents#diagnostics[beschrieben].
Aber natürlich gibt es noch weitere Diagnosemöglichkeiten, wenn man direkt auf dem überwachten Host selbst eingeloggt ist.

Wir arbeiten uns im Folgenden vom Agentenprogramm über den Agent Controller und den TCP-Port 6556 bis zur Checkmk-Instanz durch.
In den meisten Fällen können Sie nach Korrektur eines Fehlers die Diensteerkennung erneut starten und die Aufnahme ins Monitoring abschließen.

=== Prüfen der Konfiguration

Um zu prüfen, ob die Konfiguration so eingelesen wurde, wie Sie das erwarten, rufen Sie das Agentenprogramm mit der Option `showconfig` auf.
Mit dieser Option bekommen Sie nicht nur die Konfiguration ausgegeben, wie sie derzeit vom Agenten benutzt wird.
Zusätzlich werden auch immer die benutzten Umgebungsvariablen sowie die verwendeten Konfigurationsdateien angezeigt.

Ist nur ein bestimmter Teil der Konfiguration interessant, schränken Sie die Ausgabe auf diesen Teil ein.
Hier wird zum Beispiel geprüft, ob die Optionen der Sektion `ps` korrekt gesetzt sind:

[{shell}]
----
C:\Windows\system32> "C:\Program Files (x86)\checkmk\service\check_mk_agent.exe" showconfig ps
# Environment Variables:
# MK_LOCALDIR="C:\ProgramData\checkmk\agent\local"
# MK_STATEDIR="C:\ProgramData\checkmk\agent\state"
# MK_PLUGINSDIR="C:\ProgramData\checkmk\agent\plugins"
# MK_TEMPDIR="C:\ProgramData\checkmk\agent\tmp"
# MK_LOGDIR="C:\ProgramData\checkmk\agent\log"
# MK_CONFDIR="C:\ProgramData\checkmk\agent\config"
# MK_SPOOLDIR="C:\ProgramData\checkmk\agent\spool"
# MK_INSTALLDIR="C:\ProgramData\checkmk\agent\install"
# MK_MSI_PATH="C:\ProgramData\checkmk\agent\update"
# Loaded Config Files:
# system: 'C:\Program Files (x86)\checkmk\service\check_mk.yml'
# bakery: 'C:\ProgramData\checkmk\agent\bakery'
# user  : 'C:\ProgramData\checkmk\agent\check_mk.user.yml'

# ps
enabled: yes
use_wmi: yes
full_path: no
----

Über diesen Weg bekommen Sie einen schnellen Überblick, wie die drei verschiedenen xref:config_files[Konfigurationsdateien] vom Agentenprogramm zusammengeführt und benutzt werden. 
Fehler werden somit sofort sichtbar.


[#script_output]
=== Ausgabe des Agentenprogramms

Das Agentenprogramm ist ein simples Windows Executable, welches Daten über Ihr System beschafft und als lose formatierten Text ausgibt.
Sie können es direkt auf der Kommandozeile aufrufen.
Mit dem Parameter `test` gibt es alles auf die Standardausgabe aus.
Mit der Option `help` bekommen Sie unter anderem eine ausführliche und vollständige Liste an Möglichkeiten, die Ihnen über die hier beschriebenen hinaus zur Verfügung stehen.
Da die Ausgabe etwas länger sein kann, ist der Pager `more` hier sehr praktisch, Sie können Ihn mit der Ausgabe mit der Taste Q verlassen:

[{shell-raw}]
----
C:\Windows\system32> "C:\Program Files (x86)\checkmk\service\check_mk_agent.exe" test | more
<<<check_mk>>>
Version: 2.1.0b1
AgentOS: windows
Hostname: DESKTOP-XYZA123
AgentController: cmk-agent-ctl 0.1.0
----

So können Sie testen, ob in der Ausgabe alle gewünschten Daten enthalten sind – beispielsweise, ob alle installierten Plugins Daten liefern.

Da das Agentenprogramm auf dem lokalen Loopback-Interface (127.0.0.1) auf Port 50001 lauscht, können Sie auch die Verbindungsaufnahme zu diesem mit Telnet oder Putty testen.


=== Agent Controller im Dump-Modus

Der Agent Controller stellt ein eigenes Subkommando `dump` bereit, das die vollständige Agentenausgabe anzeigt, wie sie im Monitoring ankommt:

[{shell-raw}]
----
C:\Windows\system32> "C:\Program Files (x86)\checkmk\service\cmk-agent-ctl.exe" dump | more
<<<check_mk>>>
Version: 2.1.0b1
BuildDate: Mar 14 2022
AgentOS: windows
Hostname: DESKTOP-QVPV284
Architecture: 64bit
WorkingDirectory: C:\Windows\system32
ConfigFile: C:\Program Files (x86)\checkmk\service\check_mk.yml
LocalConfigFile: C:\ProgramData\checkmk\agent\check_mk.user.yml
AgentDirectory: C:\Program Files (x86)\checkmk\service
PluginsDirectory: C:\ProgramData\checkmk\agent\plugins
StateDirectory: C:\ProgramData\checkmk\agent\state
ConfigDirectory: C:\ProgramData\checkmk\agent\config
TempDirectory: C:\ProgramData\checkmk\agent\tmp
LogDirectory: C:\ProgramData\checkmk\agent\log
SpoolDirectory: C:\ProgramData\checkmk\agent\spool
LocalDirectory: C:\ProgramData\checkmk\agent\local
OnlyFrom:
<<<cmk_agent_ctl_status:sep(0)>>>
----

So können Sie überprüfen, ob die Daten vom Agentenprogramm beim Agent Controller angekommen sind. 
Diese Ausgabe beweist noch nicht, dass der Agent auch über das Netzwerk erreichbar ist.

=== Verbindungstest von außen

Ist sichergestellt, dass lokal das Agentenskript und mitinstallierte Plugins korrekt ausgeführt werden, können Sie als nächstes vom {CMK}-Server per `netcat` (oder `nc`) prüfen, ob Port 6556 erreichbar ist:

[{shell}]
----
{c-omd} echo | nc 10.76.23.189 6556
16
----

Die Ausgabe `16` zeigt an, dass die Verbindungsaufnahme erfolgreich war und nun der TLS-Handshake stattfinden kann.
Da alles weitere hier TLS verschlüsselt stattfindet, ist keine detaillierte Prüfung möglich.

*Hinweis:* Falls die Kommunikation zwischen Agent und {CMK}-Server _noch_ unverschlüsselt ist (wie im Legacy-Pull-Modus), erhalten Sie mit diesem Kommando statt der `16` die komplette unverschlüsselte Agentenausgabe.

Sie können einen xref:wato_monitoringagents#diagnosticpage[Verbindungstest] auch über die {CMK}-Oberfläche durchführen.
Das Ergebnis erhalten Sie im Kasten [.guihint]#Agent:#

.Fehler beim Verbindungstest zum Agenten
image::agent_windows_communication_failed.png[alt="Fehlermeldung eines nicht erreichbaren Agenten beim Verbindungstest.",width=64%]

Falls Sie beim Verbindungstest, wie im obigen Beispiel, keine Informationen bzw. nur eine Fehlermeldung über einen Timeout erhaltenso sollten Sie auf dem Host die [.guihint]#Inbound Rules# der Windows-Firewall prüfen.


[#windows_firewall]
=== Windows Firewall

Der Agent legt bei seiner Installation bereits eine Regel in der Windows Firewall an, damit der Agent Controller über den Port 6556 von außen erreichbar ist.

In aktuellen Versionen von Windows können Sie die [.guihint]#Windows Defender Firewall with Advanced Security# über die Windows Einstellungen ([.guihint]#Settings > Windows Security#) finden oder über den Aufruf von `wf.msc` über die Kommandozeile starten:

.Windows Firewall mit der eingehenden Regel für den {CMK}-Agenten
image::agent_windows_windows_firewall.png[alt="Eintrag des {CMK}-Agenten für die Windows Firewall."]

Sollten Sie in den Einstellungen der Windows Firewall keinen solchen Eintrag finden, können Sie diesen genau an dieser Stelle hinzufügen.
Klicken Sie dafür im Menü [.guihint]#Action# auf [.guihint]#New Rule#.

Daraufhin öffnet sich ein Assistent für die Erstellung einer neuen Firewall-Regel.
Stellen Sie die fünf Auswahlmöglichkeiten wie folgt ein:

[cols="15,~"]
|====
|[.guihint]#Rule Type# |Belassen Sie die Auswahl hier auf [.guihint]#Program.#
|[.guihint]#Program# |Tragen Sie unter [.guihint]#This program path# `%ALLUSERSPROFILE%\checkmk\agent\bin\cmk-agent-ctl.exe` ein oder wählen Sie über den Knopf [.guihint]#Browse# die Datei `cmk-agent-ctl.exe` aus.
|[.guihint]#Action# |Belassen Sie die Auswahl auf [.guihint]#Allow the connection.#
|[.guihint]#Profile# |Dieser Punkt kommt stark auf die Konfiguration Ihres Netzwerks an. Es empfiehlt sich allerdings in den meisten Fällen hier nur [.guihint]#Domain# und [.guihint]#Private# zu aktivieren.
|[.guihint]#Name# |Geben Sie der Regel einen prägnanten und kurzen Namen.
|====

Alternativ können Sie auch diesen Schritt automatisieren und die Regel direkt auf der Kommandozeile setzen.
Passen Sie den folgenden Befehl gegebenenfalls Ihrem angepassten Installationspfad an:

[{shell}]
----
C:\Windows\System32> netsh advfirewall firewall add rule name="Checkmk Agent" ^
description="Allow inbound network traffic to the Checkmk Agent" dir=in localport=6556 protocol=tcp action=allow ^
program="%ALLUSERSPROFILE%\checkmk\agent\bin\cmk-agent-ctl.exe" ^
profile=private,domain enable=yes
OK.
----

*Hinweis:* Der Befehl wurde zugunsten der Lesbarkeit in vier Zeilen aufgeteilt.


=== Test mit der {CMK}-Kommandozeile

Statt mit `nc` können Sie mit dem {CMK}-Kommandozeilentool die komplette Agentenausgabe anfordern und sich anzeigen lassen.
Die Optionen `--debug -v` fügen noch einige Debugging-Informationen hinzu. 

[{shell-raw}]
----
{c-omd} cmk --debug -v -d mynewhost
----


[#security]
== Absicherung

=== Vorüberlegung

Sicherheit ist ein wichtiges Kriterium für jegliche Software, hier darf Monitoring keine Ausnahme machen.
Da der Monitoring-Agent auf jedem überwachten Server installiert wird, hätte hier ein Sicherheitsproblem besonders gravierende Auswirkungen.

Deswegen wurde schon beim Design von {CMK} auf Sicherheit Wert gelegt und es gilt seit den ersten Tagen von {CMK} ein eherner Grundsatz:
_Der Agent liest keine Daten vom Netzwerk. Punkt._ 
Somit ist mit Sicherheit ausgeschlossen, dass ein Angreifer über den Überwachungsport 6556 irgendwelche Befehle oder Skriptbestandteile einschleusen kann.


=== Transport Layer Security (TLS)

Für einen Angreifer kann jedoch bereits eine Prozessliste ein erster Ansatz sein, Rückschlüsse auf lohnenswerte Ziele zu ziehen.
Daher ist die Transportverschlüsselung zwischen Agent und {CMK}-Server mit Transport Layer Security (TLS) ab {CMK}-Version {v21} obligatorisch.
Hierbei "pingt" der {CMK}-Server den überwachten Host an, der daraufhin die TLS-Verbindung zum {CMK}-Server aufbaut und darüber die Agentenausgabe überträgt. 
Da nur {CMK}-Server, zu denen ein Vertrauensverhältnis besteht, diese Datenübertragung initiieren können, besteht schon einmal kein Risiko, dass Daten in die falschen Hände gelangen.

*Hinweis:* Da es auf sehr alten xref:windows_versions[Windows-Systemen] keinen Agent Controller, und damit keine Registrierung und TLS-Verschlüsselung gibt, müssen Sie bei Bedarf andere Wege der Verschlüsselung wählen.
Wir empfehlen, in diesem Fall die eingebaute (symmetrische) Verschlüsselung zu nutzen mit der Regel [.guihint]#Encryption (Linux, Windows)# und/oder einen xref:ssh[SSH-Tunnel] einzurichten.


=== Zugriff über IP-Adressen beschränken

Die Einschränkung auf bestimmte IP-Adressen können Sie zwar auch über die xref:agent_windows#firewall[Firewall] konfigurieren.
Zusätzlich bietet aber auch der Agent selbst die Möglichkeit, Anfragen von fremden IP-Adressen schlicht zu ignorieren.
Fügen Sie der Konfigurationsdatei lediglich die folgende Einschränkung in den globalen Optionen hinzu.
Beachten Sie, dass davor oder danach noch andere Parameter in der Konfigurationsdatei gesetzt sein können und dies nur ein Ausschnitt ist:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
global:
  only_from: 127.0.0.1/32 192.168.42.0/24
----

Wie in dem Beispiel gut zu sehen ist, können Sie prinzipiell beliebig viele Subnetze erlauben.
Mit einem `/32` geben Sie z.B. ein Subnetz der Größe 1 an, so dass nur diese eine Adresse erlaubt ist, während sie mit `192.168.42.0/24` alle Adressen zwischen `192.168.42.0` und `192.168.42.255` erlauben.

{cee-only}
In der Agentenbäckerei können Sie die erlaubten IP-Adressen über folgenden Regelsatz konfigurieren:
[.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX >  Agent rules > Allowed agent access via IP address (Linux, Windows)#


[#ssh]
=== Aufruf über SSH

Neuere Versionen von Windows (Windows 10 ab Version 1809 und Windows Server ab 2019) haben eine native Unterstützung für SSH.
OpenSSH kann hier über [.guihint]#Apps > Apps & Features > Optionale Features# nachinstalliert werden.
Aber auch bei älteren Versionen können Sie einen SSH-Server über link:https://www.cygwin.com[Cygwin^] nachrüsten und damit eine identische Konfiguration nachstellen, wie Sie unter xref:agent_linux_legacy#ssh[Linux] möglich ist.
Beachten Sie dabei die aktuellen Hilfestellungen seitens Cygwin oder Microsoft für die Einrichtung.
Sobald ein SSH-Server gestartet und erreichbar ist, ist die weitere Einrichtung identisch zu der unter Linux:
Sie richten die `authorized_keys` auf dem überwachten Host ein und beschränken den Zugriff auf die Ausführung des Agenten.

Der Eintrag in der Datei `authorized_keys` ist auf Windows Hosts allerdings etwas holprig, da hier viele Zeichen maskiert werden müssen.
Orientieren Sie sich an dem folgenden (gekürzten) Beispiel.
Die _Forwardslashes_ als Pfadtrenner sind in beiden Beispielen eine zulässige und bevorzugte (erspart Escaping) Ausnahme von den sonst üblichen Backslashes:

.~\.ssh\authorized_keys:
[{file}]
----
command="\"C:/Program Files (x86)/checkmk/service/check_mk_agent.exe\" test" ssh-rsa AAAA...pb48 mysite@mycmkserver
----

Soll der Aufruf unter einem Nutzer mit Administratorrechten erfolgen, müssen beim Microsoft OpenSSH-Server die folgenden beiden Zeilen in der globalen Konfigurationsdatei `sshd_config` mit Raute (`#`) auskommentiert werden:

.C:\ProgramData\ssh\sshd_config:
[{file}]
----
Match Group administrators
    AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys
----

Beachten Sie, dass Sie den Windows-Dienst danach stoppen können und auch eine eventuell eingerichtete Firewall-Regel damit obsolet ist.


=== Eingebaute Verschlüsselung abschalten

Bei einem Update des Agenten kann es vorkommen, dass die vom Agentenprogramm selbst durchgeführte eingebaute (symmetrische) Verschlüsselung aktiv bleibt.
Sind TLS-Verschlüsselung und eingebaute Verschlüsselung gleichzeitig aktiv, dann ist die Entropie der übertragenen Daten so hoch, dass die ab Version {v21} aktive Komprimierung keine Ersparnis der übertragenen Daten bringt – und die CPUs sowohl des Hosts als auch des {CMK}-Servers mit zusätzlichen Ver- und Entschlüsselungsschritten belasten,

Aus diesem Grund sollten Sie die eingebaute Verschlüsselung zeitnah nach dem Wechsel auf TLS deaktivieren.
In der {CRE} erreichen Sie das, indem Sie in der Konfigurationsdatei `C:\ProgramData\CheckMK\Agent\check_mk.user.yml` den Wert des Parameters `encrypted` auf `no` setzen.

.C:\ProgramData\CheckMK\Agent\check_mk.user.yml
[{file}]
----
global:
  encrypted: no
  passphrase: D0e5NotMat7erAnym0r3
----

{cee-only} In den {CEE} können Sie vorhandene Regeln unter [.guihint]#Setup > Agents > Access to agents > Encryption (Linux, Windows)# im Abschnitt  [.guihint]#Encryption (Linux, Windows)# auf _Use TLS encryption_ umstellen und anschließend die Agentenpakete xref:agent_deployment#[neu backen].
Nach dem nächsten automatischen Agenten-Update ist die Verschlüsselung des Agentenskriptes abgeschaltet, aber durch den Agent Controller die Verschlüsselung garantiert.
Beachten Sie, dass nach dem automatischen Agenten-Update nur noch registrierte Hosts Monitoring-Daten liefern können.


[#disable_sections]
== Sektionen deaktivieren

Die Ausgabe des {CMK}-Agenten ist in Sektionen unterteilt.
Jede dieser Sektionen enthält zusammengehörige Informationen.
Sektionen beginnen immer mit einem Sektions-Header.
Dies ist eine Zeile, die in `<<<` und `>>>` eingeschlossen ist.

Bis auf die {CMK} eigenen Sektionen, können Sie jede der über 30 Sektionen, die der Agent standardmäßig erzeugt, einzeln deaktivieren.
Konkret bedeutet dies, dass die entsprechenden Befehle durch den Agenten überhaupt nicht ausgeführt werden und ggf. Rechenzeit eingespart werden kann.
Andere Gründe für die Deaktivierung könnten sein, dass Sie sich für bestimmte Informationen einer gewissen Gruppe von Hosts schlicht nicht interessieren, oder dass ein bestimmter Host fehlerhafte Werte liefert und Sie den Abruf dieser Daten kurzzeitig aussetzen wollen.

Als Nutzer einer der {CEE} können Sie über [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules > Disabled sections (Windows agent)# einfach eine Regel anlegen, welche dann von der xref:glossar#agent_bakery[Agentenbäckerei] berücksichtigt wird.

.In den {EE} können Sie Sektionen per Regel deaktivieren
image::agent_windows_disabled_sections.png[alt="Liste der Agentenregeln für den Windows-Agenten."]

*Hinweis:* Das obige Bild zeigt, dass es zu [.guihint]#Disabled sections (Windows agent)# auch eine gegenteilige Regel [.guihint]#Enabled sections (Windows agent)# gibt.
Sie können also statt mit der Negativ- auch mit der Positivliste arbeiten.
Um den Überblick zu behalten, empfehlen wir aber, nur _eine_ der beiden Regeln zu verwenden.

In der Regel [.guihint]#Disabled sections (Windows agent)# finden Sie für jede deaktivierbare Sektion eine eigene Checkbox.
Für die angewählten Checkboxen finden Sie dann -- nachdem der neu gebackene Agent auf den ausgewählten Hosts installiert wurde -- in der Konfigurationsdatei der Agentenbäckerei `C:\ProgramData\checkmk\agent\bakery\check_mk.bakery.yml` unterhalb von `global:` eine Zeile `disabled_sections:`, in der die ausgewählten Sektionen aufgelistet sind.

Nutzer der {CRE} können einen Eintrag in der Konfigurationsdatei `C:\ProgramData\checkmk\agent\check_mk.user.yml` manuell anlegen und dort die Sektionen eintragen, die deaktiviert werden sollen.
Alle deaktivierbaren Sektionen sind in dieser Datei unterhalb von `global:` im Abschnitt `_sections:` aufgelistet.

Um beispielsweise die beiden Sektionen `uptime` (für „System uptime“) und `wmi_webservices` (für „Web Services“) zu deaktivieren, sähe der passende Ausschnitt der Konfigurationsdatei wie folgt aus:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
global:
    disabled_sections: [uptime, wmi_webservices]
----


[#plugins]
== Agent um Plugins erweitern

=== Was sind Agentenplugins?

Das Agentenskript `check_mk_agent.exe` enthält eine ganze Reihe von Sektionen, welche Überwachungsdaten für diverse Check-Plugins liefern, die dann von der Service-Erkennung automatisch gefunden werden.
Dazu gehören alle wichtigen Überwachungen des Betriebssystems.

Darüber hinaus gibt es die Möglichkeit, den Agenten um _Agentenplugins_ zu erweitern.
Das sind kleine Skripte oder Programme, die vom Agenten aufgerufen werden und diesen um weitere Sektionen mit zusätzlichen Monitoring-Daten erweitern.
Das {CMK}-Projekt liefert eine ganze Reihe solcher Plugins mit aus, welche -- wenn sie korrekt installiert und konfiguriert sind -- in der Service-Erkennung automatisch neue Services liefern.

Warum sind diese Plugins nicht einfach in den Agenten fest integriert?
Für jedes der Plugins gibt es einen der folgenden Gründe:

* Das Plugin kann seine Daten nur über interne Schnittstellen holen, die der Agent nicht bereitstellt (Beispiel: PowerShell).
* Das Plugin benötigt sowieso eine Konfiguration, ohne die es nicht funktionieren würde (Beispiel: `mk_oracle.ps1`).
* Das Plugin ist so speziell, dass es von den meisten Anwendern nicht benötigt wird (Beispiel: `citrix_licenses.vbs`).


[#manual_installation_of_plugins]
=== Manuelle Installation

Die mitgelieferten Plugins für Windows finden Sie alle auf dem überwachten Host im Installationsverzeichnis des Agenten unter `C:\Program Files (x86)\checkmk\service\plugins`.
Sie werden dort abgelegt, damit sie auch direkt zur Verfügung stehen.

Alternativ liegen die Plugins für Windows auch auf dem {CMK}-Server unter `share/check_mk/agents/windows/plugins`.
Auch über die Download-Seite des Agenten im Setup-Menü (wie im Kapitel xref:download_gui[Installation] beschrieben) sind diese im Kasten [.guihint]#Plugins# verfügbar:

.Der Anfang der Liste verfügbarer Agentenplugins
image::agent_windows_files_plugins.png[alt="Download-Seite mit den Agentenplugins."]

Zu allen von uns mitgelieferten Agentenplugins existieren die passenden Check-Plugins, welche deren Daten auswerten und Services erzeugen können.
Diese sind bereits mitinstalliert, so dass neu gefundene Services sofort erkannt werden und konfiguriert werden können.

*Hinweis:* Bevor Sie ein Plugin auf dem Host installieren, werfen Sie einen Blick in die entsprechende Datei.
Oft finden Sie dort wichtige Hinweise zur korrekten Verwendung des Plugins.

Die eigentliche Installation ist dann einfach:
Kopieren Sie die Datei nach `C:\ProgramData\checkmk\agent\plugins`.

Sobald das Plugin im richtigen Verzeichnis liegt, wird es vom Agenten automatisch aufgerufen und es entsteht eine neue Sektion in der Agentenausgabe.
Diese trägt üblicherweise den gleichen Namen wie das Plugin.
Komplexe Plugins (z.B. `mk_oracle.ps1`) erzeugen sogar eine ganze Reihe an neuen Sektionen.


[#pluginconfig]
=== Konfiguration

Manche Plugins benötigen eine Konfigurationsdatei in `C:\ProgramData\checkmk\agent\config`, damit sie funktionieren können.
Bei anderen ist eine Konfiguration optional (z.B. `mssql.vbs`) und ermöglicht besondere Features oder Anpassungen.
Wieder andere funktionieren einfach so.
Sie haben verschiedene Quellen, um an Informationen zu kommen:

* Die Dokumentation der zugehörigen Check-Plugins in Ihrer {CMK}-Instanz, welche Sie über [.guihint]#Setup > Services > Catalog of check plugins# erreichen.
* Kommentare in der Plugindatei (oft sehr hilfreich!)
* Einen passenden Artikel in diesem Handbuch (z.B. über das Überwachen von xref:monitoring_oracle#[Oracle])

Bei speziellen (Skript)-Sprachen kann es notwendig sein, diese erst in der Konfiguration des Agenten _freizuschalten_.
So werden beispielsweise Python-Skripte nicht ausgeführt, wenn sie nicht explizit freigegeben wurden.
Sie können dazu in der Konfigurationsdatei `check_mk.user.yml` in der Sektion `global` die Dateiendungen erweitern, wie im folgenden Ausschnitt zu sehen:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
global:
    execute: [exe, bat, vbs, cmd, ps1, py]
----

*Wichtig*: Der Einsatz solcher Plugins setzt voraus, dass die Dateien auch in einer regulären Kommandozeile ohne spezielle Pfade aufgerufen werden können.
Im Fall von Python muss dieses entsprechend korrekt installiert und der Pfad zu dem Interpreter in den Umgebungsvariablen vorhanden sein.
Anleitungen, wie Sie Python korrekt einrichten, finden Sie direkt auf den Seiten der link:https://www.python.org/doc/[Python Software Foundation.^]


[#customizeexecution]
=== Ausführung eines speziellen Plugins anpassen

Jedes Plugin kann in unterschiedlichen Modi ausgeführt werden.
Dabei stehen die folgenden Optionen zur Eingabe in der Konfigurationsdatei zur Verfügung.
Der jeweils fett gedruckte Wert ist der Standardwert:

[cols="12,15,~"]
|===
|Option |Wert |Beschreibung 

|`pattern` |`'@user\*.ps1'` |Setzt die Reichweite der nachfolgenden Optionen. Hier kann auch mit Wildcards gearbeitet werden. Dann beziehen sich die nachfolgenden Optionen auf alle Plugins, auf die der Ausdruck zutrifft. Führend wird bestimmt, ob das Plugin direkt aus dem Installationsverzeichnis unter `C:\Program Files (x86)\` oder aus dem Datenverzeichnis unter `C:\ProgramData` ausgeführt werden soll. 
|`run` |`*yes*/no` |Bestimmt, ob die Ausführung eines Plugins unterdrückt werden soll.
|`async` |`*yes*/no` |Führt ein Plugin asynchron aus und legt die Daten in einer Datei ab. Bei synchroner Ausführung wird die Ausgabe direkt dem Agenten übergeben.
|`timeout` |`*60*` |Setzt die maximale Ausführungszeit. Danach wird das Plugin beendet, auch wenn keine Ausgabe gekommen ist. Der Standardwert orientiert sich an dem Standard für das Abfrageintervall des Agenten.
|`cache_age` |`*60*` |Legt in Sekunden fest, wie lange eine Ausgabe gültig ist. 
|`retry_count` |`*1*` |Die Häufigkeit, wie oft ein Plugin fehlschlagen darf, bevor eine Ausgabe aus dem Cache verworfen wird.
|`description` |`'Text'` |Hier können Sie einen freien Text eintragen, der den Logs angefügt werden soll.
|===

Eine Konfiguration für das Veeam-Plugin sieht dann zum Beispiel so aus (der Auszug ist gekürzt und enthält nur den relevanten Teil für das Beispiel):

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
plugins:
    enabled: yes
    execution:
        - pattern: $CUSTOM_PLUGINS_PATH$\veeam_backup_status.ps1
          async: yes
          timeout: 120
          cache_age: 300
          retry_count: 2
----

Nach der obigen beispielhaften Konfiguration wird das Plugin im Datenverzeichnis `C:\ProgramData\checkmk\agent\plugins` ausgeführt, und zwar asynchron alle fünf Minuten (300 Sekunden) und darf dabei maximal zwei Minuten (120 Sekunden) laufen.
Falls das Plugin in diesen Timeout läuft, wird ein zweites Mal versucht ein Ergebnis zu bekommen.


=== Installation über die Agentenbäckerei

{cee-only}
In den {CEE} können die mitgelieferten Plugins über die xref:glossar#agent_bakery[Agentenbäckerei] konfiguriert werden.
Diese sorgt sowohl für die Installation des Plugins selbst als auch für die korrekte Erstellung der Konfigurationsdatei, falls eine notwendig sein sollte.

Jedes Plugin wird über eine Agentenregel konfiguriert.
Sie finden die passenden Regelsätze in [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules > Agent Plugins#:

.Liste mit Regeln für die Agentenplugins in den {EE}
image::agent_linux_rules_agent_plugins.png[alt="Seite mit den Regeln zur Konfiguration der Agentenplugins in den {EE}."]


=== Manuelle Ausführung

Da Agentenplugins ausführbare Programme sind, können Sie diese zu Test-und Diagnosezwecken auch von Hand ausführen.
Es gibt allerdings Plugins, welche bestimmte vom Agenten gesetzte Umgebungsvariablen brauchen, um z.B. ihre Konfigurationsdatei zu finden.
Setzen Sie diese gegebenenfalls von Hand, wenn sie in dem Skript oder Programm benötigt werden.


[#e2e_monitoring]
== Einbinden von klassischen (Nagios-) Check-Plugins

[#mrpe]
=== Plugins über MRPE ausführen

Es gibt zwei gute Gründe, Nagios-Plugins auch unter {CMK} zu nutzen.
Wenn Sie Ihr Monitoring von einer Nagios-basierten Lösung auf {CMK} migriert haben, können Sie ältere Check-Plugins, zu denen es noch kein {CMK}-Pendant gibt, zunächst weiternutzen.
In vielen Fällen sind das selbst geschriebene Plugins in Perl oder Shell. 

Der zweite Grund für die Verwendung von Nagios-Plugins ist echtes End-to-End-Monitoring.
Nehmen wir an, Sie haben Ihren {CMK}-Server, einen Webserver und einen Datenbankserver über ein großes Rechenzentrum verteilt.
In so einem Fall sind die Antwortzeiten des Datenbankservers vom {CMK}-Server aus gemessen wenig aussagekräftig.
Weit wichtiger ist es, diese Werte für die Verbindung zwischen Web- und Datenbankserver zu kennen.

Der {CMK}-Agent bietet einen einfachen Mechanismus, diesen beiden Anforderungen gerecht zu werden:
_MK's Remote Plugin Executor_ oder kurz _MRPE_.
Der Name ist bewusst eine Analogie zum _NRPE_ von Nagios, der dort die gleiche Aufgabe übernimmt.

Der MRPE ist im Agenten fest eingebaut und wird über verschiedene Konfigurationsdateien gesteuert.


==== MRPE aktivieren und deaktivieren

Standardmäßig ist die Berücksichtigung von MRPE-Plugins aktiviert.
Falls Sie diese Funktion nicht nutzen wollen, können Sie sie in der Konfigurationsdatei deaktivieren, indem Sie die folgende Definition hinzufügen:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
mrpe:
  enabled: no
----


==== Die Ausführungszeit begrenzen

Manchmal ist die Laufzeit eines Skripts oder Nagios-Plugins nicht vorhersehbar und im schlimmsten Fall wird ein Plugin nie beendet.
Um hier die Kontrolle zu behalten, können Sie die maximale Laufzeit der MRPE-Plugins begrenzen.
Der hier gezeigte Wert ist auch gleichzeitig der Standardwert in Sekunden.
Anpassungen sind also nur notwendig, wenn Sie ein kürzeres oder längeres Intervall festlegen möchten:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
mrpe:
  # enabled: yes
  timeout: 60
----


==== MRPE-Plugins hinzufügen

Um dem Agenten mitzuteilen, wo sich die auszuführende Datei befindet und wie diese aufzurufen ist, fügen Sie einen Eintrag in der Konfiguration des MRPE hinzu:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
mrpe:
  config:
    - check = MyServiceName 'C:\ProgramData\checkmk\agent\mrpe\my_check_plugin.bat' -w 10 -c 20 MyParameter
----

Es ist nicht notwendig, die Datei ebenfalls in dem Verzeichnis des Agenten abzulegen, auch wenn es sich anbietet, um alle an einem gemeinsamen Ort zu sammeln.
In dieser Beispielkonfiguration sehen Sie nun folgende Elemente der relevanten Zeile:

[cols="40,~"]
|===
|Element |Beschreibung 

|`MyServiceName` |Der Servicename, wie er in {CMK} angezeigt werden soll.
|`'C:\ProgramData\checkmk\agent\mrpe\my_check_plugin.bat'` |Auszuführendes Programm; Anführungszeichen für eventuelle Leerzeichen.
|`-w 10 -c 20` |Übergebene Optionen: Ein Schwellwert von 10 für {WARN} und 20 für {CRIT}.
|`MyParameter` |Beispielhafte Übergabe weiterer Parameter.
|===

Nachdem Sie das MRPE-Plugin eingerichtet haben, ist es direkt und ohne Neustart des Agenten aktiv und wird der Ausgabe hinzugefügt.
In der Service-Erkennung werden Sie nun Ihren neuen Service automatisch finden:

image::agent_windows_service_discovery.png[]


=== MRPE mit der Agentenbäckerei

{cee-only}
Alternativ zu der Konfiguration direkt auf einem Host in der benutzerspezifischen Konfigurationsdatei können Sie Ihre MRPE-Plugins auch direkt im [.guihint]#Setup#-Menü definieren.
Benutzen Sie dazu den Regelsatz [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent > Agent rules > Execute MRPE checks#.
Der notwendige Eintrag wird dann automatisch in der xref:agent_windows#files[Konfigurationsdatei der Agentenbäckerei] erzeugt.


[#hw_monitoring]
== Hardware überwachen

Die Hardware-Überwachung von Windows-Hosts wird vom {CMK}-Agenten, mitgelieferten Plugins und in der link:https://exchange.checkmk.com/[{CMK} Exchange^] erhältlichen Erweiterungen gut abgedeckt.
Dennoch gibt es Situationen, in denen weder fertige Plugins noch Programmierschnittstellen zur Erstellung eigener Plugins erhältlich sind, aber entweder eine Anwendungssoftware oder ein Hardware-Überwachungstool eines Hardware-Herstellers Überwachungsdaten per SNMP liefern kann.

Setzen Sie in so einem Fall in den Eigenschaften des Hosts im Setup im Kasten [.guihint]#Monitoring agents# die Einstellung [.guihint]#SNMP# auf die geeignete Verbindungsart (SNMP v2 or v3 oder SNMP v1).
Services, die sowohl per SNMP als auch per {CMK}-Agent verfügbar sind (z.B. CPU-Auslastung, Dateisysteme, Netzwerkkarten), werden dann automatisch vom {CMK}-Agenten geholt und nicht per SNMP.
Damit wird eine Doppelübertragung automatisch vermieden.

Weitere Informationen entnehmen Sie dem Artikel zur xref:snmp#snmp_cmk_agent[Überwachung mit SNMP.]


[#uninstall]
== Deinstallation

Für die Deinstallation des Agenten haben Sie in Windows mehrere Möglichkeiten.
In allen Versionen von Windows finden Sie einen Eintrag in der Systemsteuerung unter [.guihint]#Control Panel > Programs and Features > Uninstall a program.#
In neueren Versionen finden Sie den Eintrag für den {CMK}-Agenten zudem in den Einstellungen unter [.guihint]#Settings > Apps > Apps & features.#

Über die Kommandozeile für Administratoren haben Sie mehrere Möglichkeiten den Agenten zu entfernen.
Sollte Ihnen das zuletzt installierte MSI-Paket noch vorliegen, können Sie dieses wie folgt für die Deinstallation nutzen:

[{shell}]
----
C:\Users\hhirsch\Downloads\> msiexec /x check_mk_agent.msi /qn
----

Alternativ können Sie auch das Windows Management Instrumentation Command (WMIC) für die Deinstallation verwenden:

[{shell}]
----
C:\> wmic product where name="Check MK Agent 2.1" call uninstall /nointeractive
----

War die Deinstallation erfolgreich, erhalten Sie als Bestätigung die Meldung `Method execution successful.`

*Hinweis:* Der String hinter `name=` muss exakt stimmen.
Wenn Sie hier eine andere Version des Agenten deinstallieren wollen, finden Sie eine Auflistung aller installierten Produkte mit folgendem Aufruf:

[{shell}]
----
C:\> wmic product get name
----

Der Vorgang kann bisweilen recht lange dauern und gibt derweil keinerlei Statusmeldungen aus, dafür dann aber sehr lange Listen.
Zum Filtern können Sie den Befehl zur Pipe ausbauen:

[{shell}]
----
C:\> wmic product get name | findstr Check
Check MK Agent 2.1
----

Da die verschiedenen Routinen von Windows nur Dateien entfernen, welche auch durch den Installationsprozess dorthin gekommen sind, ist es vollkommen normal, dass in den xref:files[Verzeichnissen des Agenten] noch Dateien übrig bleiben.
Diese können manuell gelöscht werden.


[#files]
== Dateien und Verzeichnisse

=== Pfade auf dem überwachten Windows-Host

[cols="45,~",options="header"]
|===
|Pfad |Bedeutung
|`C:\Program Files (x86)\checkmk\service\` |Installationsverzeichnis für die programmspezifischen Dateien inklusive des Agentenskripts `check_mk_agent.exe` und des Agent Controllers `cmk-agent-ctl.exe`. Anpassungen sind hier nicht notwendig. +
In das Verzeichnis `Program Files *(x86)*` wird der Agent aus Gründen der Kompatibilität installiert. Dies ist unabhängig davon, ob der Agent auf ein 32- oder 64-Bit Betriebssystem installiert wird. Die Installationsroutine wählt automatisch den richtigen Agenten aus.
|`C:\Program Files (x86)\checkmk\service\check_mk.yml` |Die Standardkonfigurationsdatei des Agenten. Ändern Sie diese Datei nicht.
|`C:\ProgramData\checkmk\agent\` |Installationsverzeichnis für die host-spezifischen Dateien. Hier befinden sich Erweiterungen, Log- und Konfigurationsdateien, welche spezifisch für diesen Host gelten.
|`C:\ProgramData\checkmk\agent\bakery\check_mk.bakery.yml` |Diese Konfigurationsdatei wird von der Agentenbäckerei erstellt und überschreibt gegebenenfalls Werte aus der Standardkonfigurationsdatei.
|`C:\ProgramData\checkmk\agent\check_mk.user.yml` |Konfigurationsdatei für Ihre individuellen Anpassungen. Diese Datei wird als letztes eingelesen und überschreibt gegebenenfalls Werte aus den anderen  Konfigurationsdateien.
|`C:\ProgramData\checkmk\agent\plugins` |Verzeichnis für Plugins, welche automatisch vom Agenten ausgeführt werden sollen und dessen Ausgabe um zusätzliche Überwachungsdaten erweitern.
|`C:\ProgramData\checkmk\agent\config` |Ablage von Konfigurationsdateien für den Agenten.
|`C:\ProgramData\checkmk\agent\local` |Verzeichnis für eigene xref:localchecks#[lokale Checks].
|`C:\ProgramData\checkmk\agent\mrpe` |MRPE-Erweiterungen können hier gespeichert werden.
|`C:\ProgramData\checkmk\agent\backup` |Nach jeder Änderung des {CMK}-Agenten-Service wird von der Benutzerkonfiguration hier ein Backup angelegt.
|===


=== Pfade auf dem {CMK}-Server

[cols="45,~",options="header"]
|===
|Pfad |Bedeutung
|`local/share/check_mk/agents/custom` |Basisverzeichnis für eigene Dateien, die mit einem gebackenen Agenten ausgeliefert werden sollen.
|`share/check_mk/agents/windows/` |Verzeichnis mit dem MSI-Paket des Agenten. In diesem Verzeichnis finden Sie auch Konfigurationsbeispiele und alle Agentenplugins.
|===
////
