include::global_attr.adoc[]
= Update to version {v20}
:revdate: 2021-07-05
:title: Update to version {v20}
:description: In this article you will learn what to consider when updating from {CMK} version 1.6.0 to 2.0.0.

{related-start}
xref:update#[Updates and Upgrades]
xref:install_packages#[Basic information on the installation of {CMK}]
{related-end}


[#intro]
== Introduction

In this article you will find the most important topics relevant to updating your {CMK} version {v16} to {v20}.

We recommend that you read through the entire article before the update so that you know exactly what to expect -- before, during and after the update.


[#prep]
== Preparations

This chapter gives you the overview of the topics you should take care of before you perform the update. Not every topic will probably be relevant for you: You can tick one internally and move on to the next topic.


[#backup]
=== Backup

As before updating any production software, you should check that your backups are up to date before updating {CMK}.

*Does this affect you?* Yes.

*What do you need to do?* If you create your backups automatically via the [.guihint]#WATO > Backups# module, check there whether the last backup jobs have run through without errors.

For more information, see the articles on xref:backup#[Backups] and on xref:omd_basics#backup[Backing-up and restoring sites].


[#dokuwiki]
=== DokuWiki

The DokuWiki is no longer part of the {CMK} software.

*Does this affect you?* This affects you if you have previously used the wiki, for example,
to provide information in the form of _notes_ or via the
sidebar snapin [.guihint]#WIKI# in {CMK}.

*What do you need to do?*

An important note beforehand: The DokuWiki data stored in {CMK} will not be deleted when updating to {CMK} {v20}. Only the software itself will be removed from the corresponding directories. You can therefore still move your DokuWiki data to version {v20} at any time after the update.

If you have previously used the DokuWiki supplied and wish to continue using the information, we recommend installing DokuWiki separately. You will find instructions on how to do this on the link:https://www.dokuwiki.org/Install[dokuwiki.org] project pages.

Since all articles and other texts and structures in DokuWiki consist only of text files and directories, moving them to another server is actually extremely simple. To do this, simply copy the contents of the `~/var/dokuwiki/data` folder from your {CMK} site to the directory of the same name in your new DokuWiki installation.

If you have been accessing the information in DokuWiki primarily via the [.guihint]#Notes# icon:icon_notes[] icon in your Service and Host views, you should also edit the URL in the [.guihint]#Notes URL for Hosts# and [.guihint]#Notes URL for Services# rules after moving DokuWiki. If you have created a [.guihint]#Custom Icon# for this purpose instead, change the URL accordingly in [.guihint]#Global Settings > Custom icons and actions#.


[#linux_versions]
=== Linux distribution versions

In {CMK} version {v20}, some obsolete Linux distribution versions will no longer be supported.

*Does this affect you?* This affects you if your {CMK} server has any of the following versions installed that are still supported in {v16}:

* Red Hat Enterprise Linux (RHEL) and CentOS version 6.x
* SUSE Linux Enterprise Server (SLES) version 12 SP1 or SP2
* Debian version 8.0
* Ubuntu version 14.04, 18.10, 19.04 or 19.10

*What do you need to do?* Before updating {CMK}, first update the Linux distribution. Make sure that the target version of the Linux distribution is supported by {CMK} {v16} *and* that {v20}.

You can find out which Linux distribution versions {CMK} supports in the xref:install_packages#supported_distributions[installation article] and on the link:https://checkmk.com/download[download page] after you have selected the {CMK} version and your Linux distribution.

If it is now necessary to upgrade Linux before updating {CMK}, we recommend the following procedure:

. First stop your {CMK} site:

+
[{shell}]
----
{c-root} omd stop mysite
----

[start=2]
. Unmount the site's tmp directory:

+
[{shell}]
----
{c-root} umount /opt/omd/sites/mysite/tmp
----

[start=3]
. Move the entire `omd` directory so that no unwanted changes can occur in the next step. During a release upgrade, all packages whose dependencies can no longer be fulfilled are usually removed. {CMK} would also belong to these packages. To prevent any possible data loss here, this step is necessary and can be carried out via `mv`.

+
[{shell}]
----
{c-root} mv /opt/omd /opt/omd.bak
----

[start=4]
. Upgrade Linux according to the instructions from the respective distributor.

. After the successful upgrade of your Linux distribution, you must now move the `omd` directory that you temporarily put into a safe place back into its correct location:

+
[{shell}]
----
{c-root} mv /opt/omd.bak /opt/omd
----

[start=6]
. Now install the package from {CMK} that matches the new version of the distribution you are using.
*Important:* The version number of {CMK} must be exactly the same as the one used before. So if you were using {CMK} 1.6.0p22 before upgrading the distribution, now install the 1.6.0p22 that matches your new Linux distribution version.

+
In the case of Ubuntu, the following command would suffice at this point:

+
[{shell}]
----
{c-root} apt install /tmp/check-mk-enterprise-1.6.0p22_0.focal_amd64.deb
----

+
*Note:* During installation, specify the full path to the .deb file via `apt install`.

When reinstalling {CMK}, follow the xref:install_packages#distribution_instructions[detailed installation instructions] for your respective distribution.


[#forecast_graphs]
=== Software for forecast graphs

In order to use the feature to xref:forecast_graphs#[forecast graphs] in {CMK} {v16}, the installation of additional software (among others Prophet from Facebook) is necessary. As of {v20}, {CMK} has a completely stand-alone implementation of this prediction function, without the need to install additional software packages.

*Does this affect you?* If you have been using the forecast graphs introduced in {CMK} {v16}, it is highly recommended that you remove the Python and Prophet installed for it from your sites.

*What do you need to do?* The script you used to install Prophet and its dependencies will also remove these packages for you. To do this, simply call it with the `-u` option. In distributed monitoring, you will need to repeat this step on each site where you have installed Prophet.

[{shell}]
----
{c-omd} bin/install_fbprophet -u
----


[#local_files]
=== Local files

Local files allow you to customize and extend the functionality provided by {CMK}. These files are located in the local part of the site directory structure, i.e. in `~/local`. Local files can cause problems when updating, as they may no longer match the new {CMK} version.

*Does this affect you?* Since it is not possible for {CMK} to intercept and handle local customizations and any third-party extension during an update, you should check your {CMK} site before an update to see if and which local files you are using.

*What do you need to do?* Get an overview of the local files of your {CMK} site by executing the following command as the site user (where the `-L` option ensures that symbolic links are also followed):

[{shell}]
----
{c-omd} find -L ~/local -type f
----

In a fresh installation of {CMK}, you will currently only see a file called `README.TXT` listed.
Anything beyond that should be at the top of your troubleshooting list in case you have problems updating.
Scripts and check plug-ins written in Python 2 and check plug-ins that follow the old Check API deserve special attention. We will go into both topics in more detail in the following two chapters.


[#python3]
=== Code base Python 3

Most of {CMK} is written in the Python programming language -- for over 10 years in Python 2. With version {v20} we have now taken the big step and ported {CMK} to Python 3. This step was costly, but necessary to be able to develop {CMK} efficiently and safely.

Up to and including version {v16}, {CMK} comes with Python 2.7 and all necessary third-party modules. *Instead* of Python 2.7, {CMK} {v20} will be shipped with Python 3.8 and all necessary third party modules.

*Does this affect you?* This Python version change is relevant for you if you use xref:local_files[local files] (scripts or plug-ins) written in Python 2.

*What do you need to do?* In scripts, change the link:https://en.wikipedia.org/wiki/Shebang_(Unix)['Shebang'] and adapt the code from Python 2 to 3:

In a script that is called directly from a cronjob or the core, e.g. a notification script, you have often used the following shebang in the past:

.mylocalscript
[{file}]
----
#!/usr/bin/env python
----

This means that you have used the Python 2.7 delivered in version {v16}. Since this no longer exists, the Python version of the operating system is used without changing this line. Which one this is depends on your operating system and can be queried by you with the following command.


[{shell}]
----
{c-omd} python --version
Python 2.7.18
----

We recommend changing the shebang to:

.mylocalscript
[{file}]
----
#!/usr/bin/env python3
----

This will allow you to go back to using the Python that comes with {CMK} {v20}.

After that, you may need to make some adjustments in your scripts to change your code from Python 2 to Python 3. You will learn how to do this in the following chapter on the new Check API.


[#check-api]
=== The new Check API

{CMK} {v20} introduces a new Check API that restructures the check plug-ins to standardize and simplify their handling.

However, as there are a large number of checks that were programmed according to the old check API valid up until version {v16}, the old Check API will continue to be supported for a transitional period.

*Does this affect you?* The new API affects you if you have extended the checks delivered with {CMK} with your own, self-written checks and/or if you use plug-ins from other sources and have downloaded them, for instance, from the link:https://exchange.checkmk.com/[{CMK} Exchange]. The affected files can be found in your site's xref:local_files[local files].

*What do you have to do?* We have tried to make the change to the new Check API as easy and comfortable as possible for you:

After updating to version {v20} {CMK} tries to migrate all local plug-ins from the `~/local/share/check_mk/checks` and `~/local/share/check_mk/inventory` directories  automatically to the new Check-API. This 'automigration' happens at runtime; the plug-in files are not changed. You can find out how to view the results after the update in the chapter xref:automigration[Check automigration to the new Check API].

Although the chances are good that the automigration of your check plug-ins will work smoothly, the changeover to Python 3 may require some adjustments. Due to the introduction of the new Check API and the change of the code base to Python 3, there are two good reasons to revise your self-written check plug-ins. We provide detailed information on the necessary steps for this in the link:https://checkmk.com/blog/migrating-check-plug-ins-to-checkmk-2-0[Blogpost on the migration of check plug-ins].

Last but not least, the new check API scores with improved documentation. There is an introductory article on xref:devel_check_plugins#[Programming your own check plug-ins] with the new check API, and you can access the always up-to-date plug-in API reference documentation in {CMK} {v20} via the {CMK} interface -- in the new [.guihint]#Help# menu in the navigation bar.


[#incompatible_mkps]
=== Incompatible and obsolete MKPs

The {CMK} extension packages (MKPs) can be used to extend your monitoring system quite easily and conveniently. On the one hand, it happens that such MKPs are no longer maintained and may then no longer be compatible with new versions of {CMK}. On the other hand, we keep adding new plug-ins and functional extensions to {CMK}, which is why MKPs sometimes become obsolete. Their functionality is simply ensured by {CMK} itself.

*Does this affect you?* If you have installed MKPs, it is urgently recommended to check them, especially before such a large update. This will prevent incompatible packages from interfering with the update, or of having duplicate or at least very similar services following the update.

*What do you need to do?* To do this, check your installed MKPs against our link:https://checkmk.com/integrations[Catalog of Check plug-ins] and remove packages which are now provided natively by {CMK}. You can also take this opportunity to remove MKPs that may have only been installed for a test run. You can find a list via the WATO module [.guihint]#Extension Packages#. On the command line, with the following commands you can display installed extensions as well as any unpackaged files:

[{shell}]
----
{c-omd} mkp list
{c-omd} mkp find
----

Should you not be able to assign all packages via the check of the installed MKPs and the comparison with our catalog we recommend the xref:dry_run[dry run of the update] described below in order to identify incompatibilities and then remove these from your production monitoring before the update.


[#incompatible]
=== Incompatible changes

As in every {CMK} version, there are changes to the software in the current version {v20} that _may_ have repercussions on your {CMK} installation. A so-called _incompatible change_ may require you to make manual adjustments so that existing functions continue to run as usual and/or new functions can be used.

*Does this affect you?* In general, there will be incompatible changes that will also affect your {CMK} installation. However, a general statement is unfortunately impossible.
In this article we have collected those issues that apply to all or most {CMK} installations. However, there may be other changes that are relevant to you, for example in checks that you use in your installation.

*What do you need to do?* After you have performed the xref:update[update], the {CMK} interface will show you the number and content of the incompatible changes and ask you to check and take note of them. So you will definitely be confronted with this issue -- but only after you have performed the update.

It is therefore a good idea to get an overview of the incompatible changes *before* the update. Open the list of link:https://checkmk.com/werks[Werks]. (The software development of {CMK} is organized in so-called _Werks_). Filter the list of Werks by {CMK} 2.0 *and* by compatibility, i.e. check the checkbox [.guihint]#Only show incompatible#. In the description of a Werk you will find hints on what to do, if necessary, to make the change compatible.

The frustrating news: The Werk list of a version is very, very long -- even if it only contains the incompatible changes. The comforting news: You can see from the number of changes how much effort we put into improving {CMK} for you.


[#update]
== Update

[#dry_run]
=== Best practices for update

In the following we describe best practices which we follow even when updating large {CMK} environments. These are certainly not mandatory in every environment, but they can make the process of updating easier for you.


==== Updating the operating system

The operating system on a {CMK} server should always be up to date anyway. Before updating {CMK}, however, it certainly does not hurt to make sure that it is up to date, again using `apt` (for Debian and Ubuntu), `yum` (for Red Hat and CentOS) or `zypper` (for SUSE Linux Enterprise Server).


==== Updating {CMK} version {v16}

An update to version {v20} currently does not require a specific {v16} patch release. However, there are good reasons to start the jump to {v20} only from the latest {v16} patch release, because e.g. a {v16} patch may contain fixes that make it easier to update to the {v20} version.

Therefore, we recommend to first update {CMK} to the latest {v16} patch release and only then update to {v20}.


==== Perform a dry run of the update

In large environments, where even restoring a naturally-existing backup of your {CMK} environment would require a certain amount of time, it is advisable to carry out a test with a cloned site before updating the production environment. For this purpose, you can, for example, restore the last regular backup of your site under a different name.

[{shell}]
----
{c-root} omd restore newsite /path/to/backup
----

*Alternatively* you can also copy your site via `omd cp`. For this, however, the site must be stopped for a short time:

[{shell}]
----
{c-root} omd stop mysite
{c-root} omd cp mysite newsite
----

Afterwards, run the update on this new cloned site to check the local changes mentioned above in the new environment.


==== Temporarily disable Agent Updater

{cee-only}
If you use the automatic agent updates, you should consider disabling this temporarily *before* updating to {CMK} {v20}. Three clicks on [.guihint]#Monitoring Agents > Automatic updates# and the icon:button_edit[] pen before [.guihint]#Master Switch# will take care of this.

image::update_20_automatic_agent_updates.png[]

After the successful update to {CMK} {v20} you can reactivate the updater under [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agents > Automatic updates#.

We recommend to reactivate the automatic agent update for a select few of your hosts or host groups at first. In this way, the new agent is not immediately rolled out across all of your servers and you can familiarize yourself with the newly-delivered data on a few systems. Also, due to the significantly-increased number of check plug-ins supplied, you could find a whole range of new services which you can then set up correctly on the test systems you have chosen. New threshold values may also be required for new services. If you tackle this on a small scale first, you may save yourself some false alarms later.

On the page mentioned above you can simply add a few hosts or host groups to the corresponding field and reactivate the master switch.

image::update_20_activate_update_on_selected_hosts.png[]

Just remember to remove these restrictions to explicit hosts and host groups once you are done testing the new agent and are satisfied with the results.

[#update_distributed_monitoring]
=== Updates in distributed monitoring

There are different procedures, to perform the update: All in one, successive with disabled configuration changes and completely during the operation. You have to create backups in each case.

==== Recommended procedure
The recommended and safe procedure for updating all monitoring instances is as follows:

* Stop all instances.
* Execute the updates.
* Start the updated instances again.

==== Successive procedure
The standard procedure demands some time and a well planning for bigger environments -- the monitoring will be offline for quite some time. Alternatively you are able to prohibit every change in configurations by a global setting. In this case only explicitly marked users are allowed to perform changes so you may update all instances bit by bit. To activate the Read-Only-Mode, you navigate in the central {v16} instance to [.guihint]#WATO > Global Settings# and click on icon:button_readonly[]:

image::update_20_readonly.png[]

You can activate the mode permanently or for a certain period of time and attach an additional explanation. As long as the mode is active, all users will see the following warning in all settings dialogs -- including your explanation:

image::update_20_readonly_warning.png[]

The hint [.guihint]#But you are allowed to make changes anyway.# is of course only displayed for users that have been added to the exception list.

[#live_update]
==== Update during operation
There is a third option: Updating during full operation. You may need this option for example if you manage a bigger amount of instances and the first two options are not suitable. this may be the case for technical or organizational reasons.

This procedure is *not recommended and performed at your own risk!*

Operating with different versions gives you the basics functionality. But some features of {CMK} may work in this case with restrictions or even not at all. Before you decide to use this procedure, you need to test the update for you individual set of features. In this scenario it is even more important that you take care, that your backup is running and working, because you have to expect bigger problems. You will avoid such problems at best if you update the central instance as *last of all*.

Please also notice the hints in the xref:distributed_monitoring_sync[Outlook] regarding the compatibility mode.

=== Carry out the update

Nothing fundamental has changed in the actual update of the software in {CMK} {v20}, i.e. you install the new version, perform the update of the {CMK} site, take care of any possible conflicts, and check and confirm the incompatible changes.

Carry out the update procedure as described in the xref:update#detailed[article on updates and upgrades].


[#follow-up]
== Follow-ups

[#gui]
=== The new user interface
*The* not to be overlooked innovation in the {CMK} version {v20} is the completely-redesigned user interface (_GUI_) that presents itself after you have logged in:

image::gui.png[]

The following overview is intended for the version switchers in a hurry and shows where the most important of the well-known GUI elements from version {v16} are located in version {v20}:

[cols=3]
|===
|Before |Now |Note

|- |Navigation bar |The new navigation bar is always on the left and offers new menus, most importantly: [.guihint]#Setup# and [.guihint]#Monitor#.
|Sidebar |Sidebar |The sidebar is on the right-hand side by default and shows important status information for the operator. The sidebar can be extended with snapins as always.
|Sidebar > {CMK} logo bar with information on the {CMK} edition, version, number of incompatible changes and a link to the release notes |[.guihint]#Help# menu |The [.guihint]#Help# menu of the navigation bar displays the {CMK} edition and version. The number of incompatible changes after an update is displayed in the icon of the [.guihint]#Help# menu, if applicable. There are [.guihint]#Help# menu items for calling up the release notes.
|[.guihint]#WATO - Configuration# |[.guihint]#Setup# menu |The [.guihint]#Setup# menu in the navigation bar replaces the [.guihint]#WATO - Configuration# snapin in the sidebar. For the sidebar there are the two snapins [.guihint]#Setup# and [.guihint]#Quick Setup#.
|[.guihint]#WATO > Host & Service Parameters# |[.guihint]#Setup# menu |The rule set categories can be found, completely revised, in the [.guihint]#Setup# menu under [.guihint]#Hosts#, [.guihint]#Services# and [.guihint]#Agents#.
|[.guihint]#WATO > Monitoring Agents# |[.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX# |Access to the agent bakery in the {CEE}
|- |Search field in [.guihint]#Setup# menu |New is the search in the configuration environment (among others for rule sets and global settings).
|[.guihint]#Views# |[.guihint]#Monitor# menu |The [.guihint]#Monitor# menu in the navigation bar replaces the [.guihint]#Views# snapin in the sidebar, but this is still available.
|[.guihint]#Quicksearch# |Search field in [.guihint]#Monitor# menu |The [.guihint]#Quicksearch# snapin for the sidebar is still available.
|Main page > Header with user name, time and book symbol for displaying the help texts |Main page > Header with number of changes not yet activated |The current user name with its assigned role is displayed in the [.guihint]#User# menu of the navigation bar. The help texts can be shown and hidden again on each main page in the [.guihint]#Help# menu under [.guihint]#Context sensitive help#.
|Main page with buttons |Main page with breadcrumb, menu bar and action bar |The 'breadcrumb' navigation shows the path to the current page, followed by the context-specific menu bar and, again below this, an action bar with buttons for the most important menu items.
|===


In the xref:intro_welcome#[Beginner's guide] you will find a detailed introduction to the most important elements of the xref:intro_gui#[new GUI].


[#fetcher_checker]
=== Fetcher and checker

In {CMK} {v20} the principle of the auxiliary processes has changed a lot. Up to {CMK} {v16} the {CMK} helpers were responsible for performing checks. The {CMK} helper processes remained permanent and thus provided a significant improvement in performance because the time-consuming creation of new processes could be dispensed with.

In {CMK} {v20}, these auxiliary processes perform their tasks in an even more specialized and targeted way. Instead of fetching the information *and* subsequently evaluating it, as in {v16}, one part of the auxiliary processes is only responsible for fetching the information. These processes are called _{CMK} fetchers_. The other part, on the other hand, takes care of evaluating the information passed by the fetchers. We call these processes _{CMK} checkers_.

*Does this affect you?* In short, yes -- if you are using the {CEE} in which the above processes are available. Every administrator of the {CMK} {v20} {EE} should deal with this point in the [.guihint]#Global settings#.

*What do you need to do?* You need to go to [.guihint]#Setup > General > Global settings# and adjust the values for [.guihint]#Maximum concurrent Checkmk fetchers# and [.guihint]#Maximum concurrent Checkmk checkers#.

For the checkers, it can be clearly said that the value should in no case be greater than your server can process in parallel. As a rule, this number corresponds to the number of processor cores in your {CMK} server. However, this would be the absolute maximum, and exceeding it makes no sense.

In the case of the fetchers, however, the available working memory of the server is the limiting factor. The number of [.guihint]#Maximum concurrent Check_MK checks# from {CMK} {v16} is taken as the initial value here. To find a good setting for this, we recommend activating the [.guihint]#Core statistics# snapin of the sidebar. This shows you the percentage utilization of the fetchers and checkers. If the fetchers here are regularly close to 100%, you should increase their number in order to obtain a high-performance system. We recommend setting the fetchers so that their load is at 80% a few minutes after restarting a site.

Detailed information can be found xref:cmc_differences#fetcher_checker[here].


[#automigration]
=== Check automigration to the new Check API

You can check if all local plug-ins from the directories `~/local/share/check_mk/checks` and `~/local/share/check_mk/inventory` can be automatically migrated to the new Check API.

*Does this affect you?* This check is useful if you have checks in your local files that were programmed conforming to the old Check API that was valid up to version {v16}.

*What do you need to do?* As a site user, run the following command:

[{shell}]
----
{c-omd} cmk -R
Failed to auto-migrate legacy plugin to check plugin: mssql_counters
Please refer to Werk 10601 for more information.
----

The message above shows that a plug-in could not be migrated automatically. All of the listed plug-ins will need to be migrated manually by you. There are a number of reasons why an automigration cannot be performed, and you can read about these in the mentioned link:https://checkmk.com/werk/10601[Werk #10601]. You can find out how to carry out manual migration in the link:https://blog.checkmk.com/migrating-check-plug-ins-to-checkmk-2.0[Blogpost on the migration of check plug-ins].


[#service_discovery]
=== Discover new services

{CMK} {v20} brings with it a whole series of new check plug-ins. If you do not use the automatic update of the service configuration via the periodic service discovery, you will have to search for services on a number of hosts.

If your hosts are organized accordingly (e.g. in folders), you can usually use the [.guihint]#Bulk discovery# function for this. You can find this under [.guihint]#Setup > Hosts > Hosts# and then in the menu [.guihint]#Hosts > Discover services#.

Below we list some components with the most new features.

==== MySQL server

Especially on servers running MySQL, {CMK} will offer you a whole range of new services for your monitoring. 

==== Network devices

In the past, special characters have crept into the names of network devices in many IT landscapes. {CMK} {v20} will handle these special characters in a completely different way in order to reduce problems. Regardless of whether such naming is good and sensible, a service discovery must be started on the corresponding devices.

==== Kernel services

The three services [.guihint]#Kernel Process Creations#, [.guihint]#Kernel Major Page Faults# and [.guihint]#Kernel Context Switches# are combined in {CMK} {v20} into one service called [.guihint]#Kernel Performance#. On the {CMK} servers themselves, a new service discovery must therefore also be triggered. This should of course be done on each site. On the command line you can do this with the following command:

[{shell}]
----
{c-omd} cmk -IIv --plugins kernel,kernel_performance
----


[#diagnostics]
== Diagnostics


[#inconsistent_use_of_tabs]
=== Error message: inconsistent use of tabs

Python 3 is much stricter than its predecessor version -- also with regard to the requirements for correct syntax. In the beta phase of {CMK} {v20}, we repeatedly encountered plug-ins in which even small errors could hinder a successful update. If the error 'inconsistent use of tabs' occurs during the update or the subsequent start of the site, we recommend removing the affected plug-in with the following command.

[{shell}]
----
{c-omd} mkp remove _NameOfPlugin_
----


[#outlook]
== Outlook

This chapter deals with topics that do not concern the current {CMK} version {v20}, but one of the subsequent versions.


[#distributed_monitoring_sync]
=== Distributed monitoring with different {CMK} versions
//Werk #11072: Distributed environments: Improve config synchronization

The synchronization of configuration files between sites in distributed monitoring has changed in version {v20}. In version {v16} *all* configuration files are synchronized between the central site and the remote sites; in version {v20} this happens incrementally, so that only those files that have changed will be synchronized.

To enable the updating of all sites utilizing the distributed monitoring to version {v20} during operation, the synchronization will also work for a transitional period in a mixed environment, as the incremental synchronization is performed only if both instances are running on version {v20}. Otherwise the old method will be used. Please read absolutely the hints regarding the xref:live_update[Update during operation].

This compatibility mode will be removed for the next {CMK} version (currently planned as {v21}). We recommend that all sites using distributed monitoring be updated to version {v20} as soon as possible.


[#web-api]
=== Discontinuation of the Web-API

The Web-API (also called the HTTP-API) will no longer be supported in the next but one {CMK} version (currently planned as 2.2.0). The Web-API will be replaced by the new xref:rest_api#[REST-API] introduced in {v20}.

