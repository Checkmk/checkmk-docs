// -*- coding: utf-8 -*-

// This block replaces the complete rest of this file
// start translation
////
[#https_handling]
== HTTPS-Handling

An verschiedenen Stellen dieses Artikels ist von einer Absicherung der jeweiligen Verbindungen über HTTPS die Rede.
Hier wird noch einmal zentral zusammengetragen, was alles für eine vollständige Absicherung über HTTPS getan werden muss.
Sowohl die Verbindung von Remote- zu Zentralinstanz als auch von Host zu {CMK}-Instanz kann und sollte per TLS abgesichert werden, d.h. über HTTPS erfolgen.
Dies ist unabhängig davon, ob es sich dabei um ein Setup mit einer einzelnen Instanz oder ein verteiltes Setup handelt.


[#https_usage]
=== HTTPS verwenden

Um eine {CMK}-Instanz per HTTPS ansprechen zu können, muss zunächst einmal der Monitoring-Server auch für HTTPS konfiguriert sein. 
Dies kann z.B. über eine geeignete xref:omd_https#[Konfiguration des System-Apache] oder besonders einfach durch die HTTPS-Einstellungen der {CMK}-Appliance erreicht werden.

Ob ein {CMK}-Server dann per HTTP oder HTTPS angesprochen wird, entscheidet sich anhand der jeweils konfigurierten URL.
Beginnt diese mit `https://`, wird der Server über das HTTPS-Protokoll über Port 443 angesprochen. 
Das gilt ebenso für das Protokoll, welches Sie mit der Einstellung xref:agent_deployment#update_server_information[Update server information] konfiguriert haben.
Prinzipiell können Sie auf Apache-Seite die Weiterleitung von HTTP nach HTTPS erzwingen und dafür (zunächst) einzelne Pfade ausnehmen.
Details der Konfiguration entnehmen Sie der Apache-Dokumentation der Module `mod_rewrite` und `mod_redirect`.


[#provide_certificates]
=== Zertifikate bereitstellen

Damit eine HTTPS-Verbindung zustande kommen kann, muss die Zertifikatskette oder das selbst signierte Zertifikat (je nachdem, wie der Server konfiguriert ist) des kontaktierten Servers verifiziert werden können.
Die Bereitstellung von geeigneten CA- oder selbst signierten Zertifikaten macht dies möglich und kann auf verschiedene Weisen realisiert werden.


[#connection_to_cmk_server]
==== Verbindung von Host zu {CMK}-Server

Der Agent Updater versucht grundsätzlich HTTPS-Verbindungen zu verifizieren und bricht diese ab, wenn die Verifizierung nicht möglich ist.
Zertifikate zur Verifikation stehen dem Agent Updater aus den folgenden Quellen zur Verfügung:

*Agent Updater:*
In Standardeinstellungen bringt der Agent Updater eine Python Laufzeitumgebung inclusive benötigter Module mit.
Enthalten ist auch das Zertifikats-Bundle des link:https://pypi.org/project/certifi/#[Certifi-Moduls.^]
Dieses wiederum basiert auf der Zertifikatssammlung des Mozilla-Projekts.
So ist sichergestellt, dass öffentliche CAs dem Agent Updater zeitnah bekannt gemacht werden, selbst wenn Betriebssystemupdates ausstehen.

*Zertifikate via Agentenbäckerei:*
Im Certifi-Modul enthaltene Zertifikate werden ignoriert, sobald ein oder mehrere Zertifikate über einen der folgenden Mechanismen importiert wurden.
Zertifikate aus den folgenden Quellen werden lokal auf dem Host gespeichert und nur vom Agent Updater verwendet:

. Über die Einstellung xref:certificates_for_https[[.guihint]#Certificates for HTTPS verification#] können Zertifikate mit in das Agentenpaket eingebacken werden und stehen dem Agent Updater ab Installation (oder Update) zur Verfügung.

. Bei der Konfiguration der Verbindung zur Remote-Instanz über [.guihint]#Setup > General > Global settings > Automatic agent updates > Connection to remote agent bakery# können Sie Zertifikate angeben, mit denen die HTTPS-Verbindung zur jeweiligen Remote-Instanz verifiziert werden kann.
Dies ist insbesondere dann sinnvoll, wenn zur Konfigurationszeit noch nicht klar ist, welcher Host welcher Instanz zugeteilt wird.
Auch lässt sich mit dieser Importmöglichkeit die Anzahl der zu backenden Agenten reduzieren, da die richtigen Zertifikate für die jeweiligen Update-Server nicht Host-spezifisch konfiguriert werden müssen.

*Certificate Store:*
Nur wenn der Agent Updater so konfiguriert ist, dass er statt der mitgelieferten Python Laufzeitumgebung das xref:executable_format[System-Python] nutzt und im System-Python kein Certifi-Modul konfiguriert ist, nutzt er _möglicherweise_ den Certificate Store des Betriebssystems.
Da hier viele Faktoren wie Installationsparameter oder die Umgebungsvariable `_PIP_STANDALONE_CERT` mit hineinspielen, wird diese Konstellation von uns nicht offiziell unterstützt.

*Zertifikat via Kommandozeile:*
Der Agent Updater lässt sich mit dem Kommandozeilenargument `--trust-cert` aufrufen.
Dadurch wird versucht, ein CA- oder selbst signiertes Zertifikat vom Server abzurufen und dieses zu importieren.
Dies funktioniert nur, wenn entweder ein selbst signiertes Zertifikat eingesetzt wird 
oder wenn die komplette Zertifikatskette inklusive CA-Root-Zertifikat auf dem Server hinterlegt wurde.
Letzteres ist für eine gültige Zertifikatskette im Allgemeinen nicht gefordert und daher meist nicht der Fall.
*Achtung:* Wird ein Zertifikat auf diese Weise importiert, muss der Anwender die Authentizität des Servers selbst sicherstellen, da das Zertifikat aus keiner separaten Quelle stammt.

Und wenn gar nichts mehr hilft:

Falls dem Agent Updater gar kein gültiges Zertifikat zur Verfügung steht, kann die Zertifikats-Validierung durch das Kommandozeilenargument `--insecure` für einen Aufruf umgangen werden.
Dies kann sinnvoll sein, wenn das gültige Zertifikat bereits darauf wartet, bei der nächsten Verbindung vom Server abgerufen zu werden, 
der Agent Updater aber eben durch dieses fehlende Zertifikat „ausgesperrt“ ist.
*Achtung*: Die Prüfung des Zertifikates wird hierdurch tatsächlich für diesen Aufruf komplett deaktiviert.
Die Kommunikation findet dennoch verschlüsselt statt – dementsprechend ist der Einsatz dieses Arguments „besser als nichts“.


[#connection_from_remote_to_central_site]
==== Verbindung von Remote-Instanz zu Zentralinstanz

Einfacher gestaltet sich die Verteilung der Zertifikate bei der Verbindung von der Remote- zur Zentralinstanz, da hier das Setup gar nicht verlassen wird.
Die Remote-Instanz kann sich aus dem {CMK} eigenen Certificate Store unter [.guihint]#Global settings > Site management > Trusted certificate authorities for SSL# bedienen.
Es reicht also, das Zertifikat bzw. die Zertifikate über die Zentralinstanz zu importieren, ggf. auch über [.guihint]#Site specific global settings#, falls die Zentralinstanz unter verschiedenen URLs erreichbar ist.


[#certificate_change]
==== Vorgehen beim Austausch eines Zertifikats

Wenn Sie mit einer eigenen Zertifizierungsinfrastruktur arbeiten, verwenden Sie im Idealfall ein sehr lange gültiges Root-Zertifikat, mit dessen zugehörigem Schlüssel regelmäßig Intermediate-Zertifikate erstellt werden. Diese werden dann wiederum zum Signieren der Server-Zertifikate verwendet.
In diesem Fall rollen Sie Intermediate-Zertifikate als Zertifikatskette _(Certificate Chain)_ auf dem {CMK}-Server aus.
Den Hosts, die automatische Agenten-Updates erhalten, muss nun lediglich das Root-Zertifikat bekannt gemacht werden.

Sind Sie unsicher, ob ein neues Server-Zertifikat ein neues Root-Zertifikat erfordert, verwenden Sie den folgenden Befehl.
Mit ihm ermitteln Sie den Identifier des Root Keys, mit dem ein Server-Zertifikat signiert wurde:

[{shell}]
----
{c-root} openssl x509 -noout -text -in cert.pem | grep -A1 'X509v3 Authority Key'
            X509v3 Authority Key Identifier: 
                14:2E:B3:17:B7:58:56:CB:AE:50:09:40:E6:1F:AF:9D:8B:14:C2:C6
----

Ist der angezeigte Identifier beim alten und neuen Zertifikat identisch, sind keine weiteren Maßnahmen erforderlich.
Hosts, die diesem Root-Zertifikat vertrauen, können auch bei Änderungen der Zertifikatskette weiter Updates beziehen – sofern die Kette korrekt im System-Apache hinterlegt wurde.

Wurde bislang ein selbst signiertes Zertifikat oder ein kurzlebiges Root-Zertifikat einer internen CA verwendet oder wurde der bisherige Root-Schlüssel einer Ihrer internen CAs kompromittiert, ist beim Austausch wie folgt vorzugehen:

. Fügen Sie das neue Zertifikat über den Parameter [.guihint]#Certificates for HTTPS verification# (in der Regel [.guihint]#Agent updater (Linux, Windows, Solaris)#) hinzu.
. Backen Sie die Agentenpakete neu und führen Sie ein Update aller Hosts im Monitoring durch.
Stellen Sie sicher, dass dieses Update für alle Hosts durchlaufen wurde, bevor Sie fortfahren.
. Tauschen Sie nun das Serverzertifikat aus.
. Testen Sie mit wenigen Hosts, bei denen bei Fehlschlag eine manuelle Neuinstallation des Agents leicht durchführbar ist, ob ein weiteres Update über das neue Zertifikat möglich ist.
. Konnte der letzte Schritt erfolgreich durchgeführt werden, können (das Zertifikat läuft ab) oder müssen (der Schlüssel wurde kompromittiert) Sie das alte Zertifikat entfernen und ein erneutes Agentenupdate durchführen.
////
// end translation













[#https_handling]
== HTTPS handling

At various points in this article, there are references to securing the respective connections via HTTPS.
At this point, a central summary is provided showing everything that needs to be done for complete security via HTTPS.
Both the connection from the remote site to the central site and from the host to the {CMK} site can and should be secured via TLS, i.e. via HTTPS.
This is regardless of whether it is a single-site setup or a distributed setup.


[#https_usage]
=== Using HTTPS

To be able to address a {CMK} site via HTTPS, the monitoring server must first be configured for HTTPS.
This can be achieved, for example, through a suitable xref:omd_https#[configuration of the system's Apache], or in an especially simple way through the HTTPS settings on the {CMK} appliance.

Whether a {CMK} server is then addressed via HTTP or HTTPS is determined by the URL configured in each case.
If this begins with `https://`, the server is also addressed accordingly via the HTTPS protocol and port 443.

This also applies to the protocol you configured with the xref:agent_deployment#update_server_information[Update Server Information] setting.
In principle, you can force redirection from HTTP to HTTPS on the Apache side and (initially) exclude individual paths for this.
For configuration details, see the Apache documentation for the `mod_rewrite` and `mod_redirect` modules.


[#provide_certificates]
=== Providing certificates

In order for an HTTPS connection to be established, it must be possible to verify the certificate chain or self-signed certificate -- depending on how the server is configured -- for the server to be contacted.
The provision of suitable CA or self-signed certificates makes this possible and can be realized in various ways.


[#connection_to_cmk_server]
==== Host to {CMK} server connection

The Agent Updater always attempts to verify HTTPS connections and terminates them if verification is not possible.
Certificates for verification are available to the Agent Updater from the following sources:

*Certificate Store:*
If the HTTPS setup of the server is a certificate chain that has been signed by a public CA (Certification Authority) such as Let's Encrypt, this can probably be verified without further configuration.
The Agent Updater can access the operating system's certification store for this purpose.
One weakness of this concept is that you are dependent on timely updates of the operating system when new root certificates are added.
If -- for whatever reason -- an operating system that is no longer provided with updates is to be used, of course no certificates will be added automatically.
Of course, if you are using an internal CA or a new CA on a discontinued operating system, you can add more certificates to the certification store using the operating system's on-board resources.

*Certificates via Agent Bakery:*
The operating system's certification store is ignored once one or more certificates have been imported via one of the following mechanisms.
Certificates from the following three sources are stored locally on the host and used only by the Agent Updater:

. Using the xref:agent_deployment#certificates_for_https[[.guihint]#Certificates for HTTPS verification#] rule, certificates can be included in the agent package and will be available to the Agent Updater following an installation or update.

. When configuring the connection to the remote site via [.guihint]#Setup > General > Global Setting > Automatic Agent Updates > Connection to remote agent bakery#, you can specify certificates that can be used to verify the HTTPS connection to the respective remote site.
This is particularly useful if it is not yet clear at configuration time which host is assigned to which site.
This import option also reduces the number of agents that need to be baked in, as the correct certificates for the respective update servers do not have to be host-specifically configured.

. The Agent Updater can be called with the `--trust-cert` command line argument.
This attempts to retrieve a CA or self-signed certificate from the server and import it.
Unfortunately, this only works when either a self-signed certificate is used (as this is already the server certificate)
or when the CA certificate is stored on the server, i.e. is at the end of the certificate chain.
This latter is generally not required for a valid certificate chain and is therefore unfortunately often not the case.
*Caution:* If a certificate is imported in this way, the user themselves must ensure the authenticity of the server, as the certificate does not come from a separate source.

And if nothing else helps:

If no valid certificate is available to the Agent Updater at all, the HTTPS verification can be bypassed by using the command line argument `--insecure` for a call.
This can be useful if the valid certificate is only waiting to be retrieved by the server during the next connection, 
but the Agent Updater will be 'locked out' by this certificate being unavailable.
*Caution:* HTTPS verification is actually fully-deactivated by this.
Communication is nevertheless encrypted -- the use of this argument is therefore 'better than nothing'.


[#connection_from_remote_to_central_site]
==== Connection from remote to central site

The distribution of certificates is simpler for the connection from the remote site to the central site, since in this situation the Setup will not be 'exited', so to speak.
The remote site can therefore use the {CMK} internal certification store under [.guihint]#Global settings > Site management > Trusted certificate authorities for SSL#.
It is thus sufficient to import the certificate(s) via the central site, or if necessary via the [.guihint]#Site specific global settings# if the central site is accessible through multiple URLs.

[#certificate_change]
==== Procedure for exchanging a certificate

If you work with your own certification infrastructure, ideally you use a very long valid root certificate, with whose associated key intermediate certificates are regularly created.
These are then in turn used to sign the server certificates.
In this case, roll out intermediate certificates as a certificate chain on the {CMK} server.
The hosts that receive automatic agent updates now only need to be made aware of the root certificate.

If you are unsure whether a new server certificate requires a new root certificate, use the following command.
Use it to determine the identifier of the root key used to sign a server certificate:

[{shell}]
----
{c-root} openssl x509 -noout -text -in cert.pem | grep -A1 'X509v3 Authority Key'
            X509v3 Authority Key Identifier: 
                14:2E:B3:17:B7:58:56:CB:AE:50:09:40:E6:1F:AF:9D:8B:14:C2:C6
----

If the displayed identifier is identical for the old and new certificate, no further action is required.
Hosts that trust this root certificate can continue to receive updates even if the certificate chain changes -- provided that the chain was correctly stored in the system Apache.

If a self-signed certificate, a short-lived root certificate of an internal CA, has been used so far or the previous root key of one of your internal CAs has been compromised, proceed as follows when replacing it:

. Add the new certificate via the [.guihint]#Certificates for HTTPS verification# rule.
. Re-bake the agent packages and perform an update of all hosts in the monitoring.
Ensure that this update has been run for all hosts before proceeding.
. Now replace the server certificate.
. With a few hosts where it is easy to reinstall the agent manually if it fails, test whether it is possible to update again using the new certificate.
. If the last step could be performed successfully, you can (the certificate expires) or must (the key was compromised) remove the old certificate and perform another agent update.
