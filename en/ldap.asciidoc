include::global_attr.adoc[]
= User management with LDAP/Active Directory
:revdate: 2021-12-29
:title: User management with LDAP/Active Directory
:description: In {CMK} users and contact groups can also be synchronized via LDAP or Microsoft's Active Directory (AD).

{related-start}
link:kerberos.html[Single sign-on with Kerberos]
link:omd_https.html[Securing the web interface with HTTPS]
link:wato_user.html[Users, roles and permissions]
{related-end}


== Introduction

Since the manual definition of users is scalable only up to a certain level,
{CMK} provides a facility for using LDAP-based services for managing users,
for automatically synchronising users from the home directories, and likewise
for assigning contact groups, roles and other attributes to these users in {CMK}
automatically. {CMK} is not restricted to a single LDAP source, and it can
also distribute the users to other connected sites if required.


[#connect]
== Configuring an LDAP connection


=== Connecting to the Server

Creating a connection to an LDAP-compatible server requires a user with read
permission for the server. As a minimum it must have read permission for the
persons and groups that it is to synchronise. In the following example
this user is called _check_mk_.

Under [.guihint]#Setup > Users > LDAP connections > Add connection# a new connection can be created.
In the input mask, first enter any desired [.guihint]#ID# for the connection into the
[.guihint]#General Properties# field. A simple meaningful title can be optionally
entered in the [.guihint]#Description# field. As always the [.guihint]#ID# must be unique and an
ID cannot be changed later.

image::ldap_new_connection_general_properties.png[]

Next, under [.guihint]#LDAP Connection# the LDAP server can be defined, as well as one
or more Failover-Servers if they are available. Then only the [.guihint]#Directory Type#
needs to be selected, and the user data for the read-access defined under
[.guihint]#Bind Credentials#. Note that the user name with its full LDAP path must be entered.
Upper and lower case must not does not need to be taken into account.
The configuration should then look something like this:

image::ldap_new_connection_ldap_connection.png[]

{CMK} supports more than just Active Directory. To alter the directory to, e.g.,
OpenLDAP, select it in the [.guihint]#Directory Type# field -- further configuration
alterations resulting from this action occur in only a few locations.

The [.guihint]#Failover Servers# are used when the actual server is not accessible,
or when a time limit has been exceeded. This makes sense if there is no local
own server in use, but it is desired to create a redundant connection.

{CMK} utilises a persistent connection to the LDAP server. With this persistent
connection {CMK} always uses the same server as long as it is available, and
only switches if a timeout or other problem occurs. The same also applies after
a switchover -- the connection will only revert to the actually configured
server if the failover server becomes unavailable.


[#user_filter]
=== Defining users

Next the paths to the users and groups will be defined, and the filters set.
Then enter the path via which the users are to be found in [.guihint]#User Base DN#.
Make sure here that the _Operational Unit_ (OU) is set so that all desired
users and as few others as possible are included. The more users that are queried,
the slower the synchronisation will be to process.

Next set the [.guihint]#Search Scope# option. Here you can recursively filter for all
users located in the OU and in those units below it, or restrict the search to
those located directly in this OU.
If you have entered a user directly in the path, you should select [.guihint]#Search only the entry at the base DN# -- only this user will then be included.

With the help of the option [.guihint]#Search Filter# you can narrow down the selection
of users to be imported even further. If for example you want to synchronise
only the users belonging to a specific group, set an LDAP query as shown in the
following screenshot. The prerequisite for this is that the users have the
`memberof` attribute. How to filter by group membership, without this
attribute, can be learned xref:ldap#filter_group[below]:

image::ldap_new_connection_users.png[]

The standard filter can also be combined with the `memberof`,
or with other filters:

`(&(objectclass=user)(objectcategory=person)(memberof=cn=cmk-admins,ou=groups,dc=mycompany,dc=org))`

As can be seen under [.guihint]#Users#, there are further options for a user search.
with the [.guihint]#User-ID Attribute# option it is possible to specify which attribute
the user is to utilise as its login ID in {CMK}. The user will subsequently
use this login when signing in. As a rule, in Active Directory it will be the
_sAMAccountName_ attribute, which is used as standard in {CMK}.
Under OpenLDAP it is often the [.guihint]#uid# attribute.

With the [.guihint]#Lower Case User-IDs# options you can convert the synchronised IDs
to lower-case letters. This is possibly sensible, since as already
mentioned, Active Directory/LDAP does not differentiate between upper
and lower case letters, but {CMK} does. That can lead to confusion which
this option can solve.

The [.guihint]#Translate Umlauts in User-Ids# option was only provided for
compatibility reasons and should no longer be used/altered.

Last but not least the option [.guihint]#Create users only on login# allows you to
create new users only once they login to {CMK} instead of during the
synchronization with LDAP.

[{image-border}]
image::ldap_new_connection_users_search_filter_2.png[]

[#filter_group]

The [.guihint]#Filter Group# option should only be used if the LDAP server is *not*
an Active Directory, and the _memberof_ Dynamic Attribute is not available
in the user data. In such cases the user filtering takes place in {CMK} itself.
In the process it is possible that many users will be queried which will later
be discarded. Such a scenario can be largely stopped by the LDAP-Modul in {CMK}.

Should you be dependent on this option however, the complete path for the group
to be filtered must be entered here:

[{image-border}]
image::ldap_new_connection_users_filter_group.png[]


[#groupfilter]
=== Defining groups


Should you wish to filter the users by group, define the path to the group so
that a matching can be performed. This can be done in the same way as with the
users -- when a group is directly specified, under [.guihint]#Search Scope# the
[.guihint]#Search only the entry at the base DN# option can be used -- otherwise the
the search will be performed either directly in the OU or its subsidiary units
will also be included.

Here as well, with the help of the [.guihint]#Search Filter# option it is possible to
specify how the group's name is to be defined in {CMK}. You can additionally
specify the name of the attribute ([.guihint]#Member Attribute#) in which the
group's members are lodged. {CMK} uses [.guihint]#member# as standard.
Under OpenLDAP this can also be [.guihint]#uniqueMember#. Alter the option as appropriate.

image::ldap_new_connection_groups.png[]


[#config_test]
=== Testing the configuration

The first setup is now complete, and for diagnosis the configuration
can now be saved and tested via the correspondig button at the bottom of the
page.

[{image-border}]
image::ldap_new_connection_diagnostics.png[]

You don't need to specify a group to produce a functioning configuration.
As long as only users for {CMK} are present, it is sensible to limit the
selection to one or more groups.


=== The synchronisation interval

Finally, you can also define how often the users are to be automatically synchronised.
In an environment in which changes seldom occur the standard is perhaps too tight.
The time frame should not not be too long however,
so that any changes can be reflected promptly in {CMK}.

image::ldap_new_connection_other.png[]

A synchronisation can be manually initiated at any time in [.guihint]#Setup > Users#.
In addition, a user will be synchronised if required when they attempt to log in
and have not yet been synchronised.


== Automatic allocation of attributes


[#contact_groups]
=== Contact groups

It is not much use being able to create all users automatically,
if it is then necessary to allocate them to contact groups manually.
{CMK} provides the function of using the LDAP server’s groups to enable
allocation to contact groups.
For this, activate the [.guihint]#Attribute Sync Plugins > Contactgroup Membership# option:

[{image-border}]
image::ldap_new_connection_contactgroup_membership.png[]

For an allocation to be successful, the group’s name (cn) on the LDAP server must
be identical to that in {CMK} -- i.e., the _oracle_admins_ group will
only be allocated to a user if it is also in the _oracle_admins_ group in LDAP.
If, instead of this, it is in the _oracle-admins_ or the _ORACLE_admins_
groups the allocation will not work. Therfore be careful to use the correct syntax and
use of upper and lower case should problems arise in this situation.


[#nested_groups]
==== Nested groups

{CMK} also offers -- currently only for Active Directory -- the possibility
of using inherited groups. Activate this option if, for example, your user is
in the _oracle_admins_ group, and this group is in turn a member of
_cmk-user_.


==== Groups from other connections

If multiple LDAP connections have been created in {CMK}, groups from other
sources can also be utilised to enable an allocation. This can make sense if one
general connection has been configured, and others are filtered only for
particular groups.


=== Roles

Roles can also be automatically allocated in a similar way and the
xref:ldap#nested_groups[Nested Groups] function likewise used here.
One or more groups can be defined for each role. Select the role for which
a connection is to be created and enter the full path to the group.
As standard a search will be performed in groups found in xref:ldap#groupfilter[group filter].
Other connections can however be searched in order to use the groups found there.
Select the connections to be searched from the dropdown menu.

[{image-border}]
image::ldap_new_connection_roles.png[]

All users in the nominated group will now be allocated to the [.guihint]#Administrator#
role, unless they will be synchronised through the
xref:ldap#user_filter[user filter]. As can be seen in the screenshot, your own
configured roles can also be selected and connected with LDAP groups.


[#other_attr]
=== Other attributes

For the synchronisation of other user information, as a rule only the activation
of the relevant plug-in under [.guihint]#Attribute Sync Plugins# is required,
and possibly also the entry of the attribute which provides the information.
Below is a table of the plug-ins and the attribute used
(if not manually set) and a short description:

[cols="35,~,~,~,55"]
|===
|Plug-in |Attribute |Syntax |possible values |Description

|[.guihint]#Alias# |cn |String | |Normally the user’s first and last name
|[.guihint]#Authentication Expiration# |pwdlastset |Interval | |When a user will be logged out or locked out
|[.guihint]#Disable Notifications# |disable_notifications |Boolean |`true, false` |Deactivates *all* notifications to the user
|[.guihint]#Email address# |mail |String | |The user’s email address
|[.guihint]#Pager# |mobile |String | |A nominated telephone/pager contact number
|[.guihint]#Show more / Show less# |show_mode |String | `default_show_less, default_show_more, enforce_show_more`| Set default of xref:ldap#other_attr["Show more / Show less" mode]. With `enforce_show_more` all features, filters, input fields etc will always be shown. The button to switch between the two modes will be removed
|[.guihint]#Start-URL to display in main frame# |start_url |String |Example: `view.py?view_name=allhosts` `dashboard.py` |The view to be displayed in the right frame
|[.guihint]#User interface theme# |ui_theme |String |`facelift, classic, modern-dark` |User interface theme
|[.guihint]#Visibility of Hosts/Services# |force_authuser |Boolean |`true, false` |Only display hosts/services for which one is a contact
|===




[#distr_wato]
== LDAP in distributed environments

When configuring a xref:distributed_monitoring#[distributed monitoring] with a
xref:distributed_monitoring#distr_wato[centralised configuration] you can specify whether,
and which LDAP connections should be synchronised from the remote site.
If not otherwise specified, the remote site itself will synchronise all users of
the configured connection. In this way changes will be automatically reflected on
every site within the defined time frame and do not first need to be copied
from the central to the remote site(s). The synchronisation can also be restricted to
specific connections or completely disabled. In the second case the users on
the central site are retrieved from the LDAP connections and copied to the remote sites
with an [.guihint]#Activate Changes#.

The setup can be configured in [.guihint]#Setup > General > Distributed Monitoring > Connection Properties# under the
connection's characteristics [.guihint]#Configuration Replication (Distributed WATO)#.
Here is an example in which the option shown in the menu has been selected:

[{image-border}]
image::ldap_distributed_monitoring_sync_ldap.png[]


[#ssl]
== Securing LDAP with SSL

In order to secure the LDAP connection with SSL, simply activate the [.guihint]#Use SSL#
check box in the connection data and match the [.guihint]#TCP Port#
(usually `636` for SSL in LDAP). If the LDAP server or servers use
a certificate signed by a trusted certifier, once the above-described action
has been completed nothing more needs to be done to establish a secure connection.

image::ldap_new_connection_ldap_connection_ssl.png[]

If a self-signed certificate is to be used, the connection can only be established
after the certificate has been imported into the certificate store.
Only then will it be classified as trustworthy and the connection established.

Under RHEL/CentOS the `ldapserver01.pem` certificate is imported as follows:

[{shell}]
----
{c-root} certutil -A -d /etc/openldap/certs -n "My LDAP Server Readable Name" -t CT,, -a -i /path/to/cert/file/ldapserver01.pem
{c-root} systemctl restart httpd
----

Under Debian/Ubuntu, copy the certificate to the specified directory and
refresh the certificate store. If the target directory is not already present,
create it so:

[{shell}]
----
{c-root} mv /path/to/cert/file/ldapserver01.crt /usr/share/ca-certificates/ldapserver01.crt
{c-root} update-ca-certificates
Updating certificates in /etc/ssl/certs... 1 added, 0 removed; done.
Running hooks in /etc/ca-certificates/update.d....
done.
Importing into legacy system store:
I already trust 174, your new list has 175
Certificate added: C=DE, S=bavaria, L=munich, O=check_mk, OU=monitoring, CN=myremoteldap.mycompany.org, E=check_mk
1 new root certificates were added to your trust store.
Import process completed.
{c-root} systemctl restart apache2
----

Attention – ensure that under RHEL/CentOS the certificate’s filename ends with `pem`, and under Debian/Ubuntu with `crt`.
A webserver restart in older systems may still be run with the
`service` command. Alter this as appropriate.


== Error diagnosis

An error diagnosis is implemented directly in the xref:ldap#config_test[Configuration settings].
After the setup it can also be checked for the possible source of an error.
Error messages will additionally be written to the `web.log`. These messages
can likewise point to the source of an error:

.~/var/log/web.log
[{file}]
----
2020-09-19 16:03:17,155 [40] [cmk.web 31797] /ldaptest/check_mk/wato.py Internal error: Traceback (most recent call last):
  File "/omd/sites/ldaptest/share/check_mk/web/htdocs/wato.py", line 6563, in mode_edit_ldap_connection
    state, msg = test_func(connection, address)
  File "/omd/sites/ldaptest/share/check_mk/web/htdocs/wato.py", line 6506, in test_group_count
    connection.connect(enforce_new = True, enforce_server = address)
  File "/omd/sites/ldaptest/share/check_mk/web/plugins/userdb/ldap.py", line 274, in connect
    ('\n'.join(errors)))
MKLDAPException: LDAP connection failed:
ldap://myldap.mycompany.org: Can't contact LDAP server
----


== Files and directories

[cols="55,~"]
|===
|File path |Function 

|etc/check_mk/multisite.d/wato/user_connections.mk |All LDAP connections configured used by Setup will be retained in this file.
|etc/check_mk/multisite.d/wato/users.mk |All users will be defined here.
|var/log/web.log |The logfile in which connection errors are be recorded -- it is thus one of the first sources of information when problems occur.
|===

