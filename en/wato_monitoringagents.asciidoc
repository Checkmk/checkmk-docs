include::global_attr.adoc[]
= Monitoring agents
:revdate: draft
:title: Monitoring agents - Monitoring with {CMK} devices in a network
:description: Here you will get a quick overview of how to monitor servers, switches, and other devices – and how the agent works.

{related-start}
xref:agent_linux#[Monitoring Linux]
xref:agent_windows#[Monitoring Windows]
{related-end}


== Introduction

For a monitoring system to receive more information from an endpoint other than that it is simply accessible, help is required from the target system. 
For example -- how else can {CMK} know how full a server’s storage volume is without that system somehow providing the information? 
The component that provides this information is always an active piece of software -- namely a _monitoring agent_, usually just referred to as an _agent._
An agent collects data relevant to monitoring from a host at specified intervals and transmits that data to the monitoring server.

For servers and workstations, {CMK} provides its own agents, these are known as _{CMK} agents_.
{CMK} agents are available for a wide variety of operating systems -- from the commonplace such as Windows and Linux to exotics such as OpenVMS.
The agents are passive in xref:glossar#pull_mode[pull mode] and listen on TCP port 6556.
Only on receiving a {CMK} server query will these agents be activated and respond with the required data.
In xref:glossar#push_mode[push mode], on the other hand, the {CMK} agent periodically sends the monitoring data to the {CMK} server on its own.

All of the {CMK} agents can be found via the web interface in the [.guihint]#Setup# menu.
From there you can download the agents and install them on the target system.
You can learn how to install, configure and extend {CMK} agents in this article.

However, there are situations where one does not need to _install_ an agent for monitoring -- since one that can be used is already present.
The best example is SNMP:
All manageable network devices and appliances have a built-in xref:snmp#[SNMP agent].
{CMK} accesses this SNMP agent and retrieves details about the system state with active queries (GET).

Some systems however allow neither an agent installation, nor do they support SNMP in a usable form.
Instead of these they offer application programming interfaces for management, so-called _APIs_, based on Telnet, SSH or HTTP/XML.
{CMK} queries such interfaces via these so-called xref:glossar#special_agent[special agents] running on the {CMK} server.

Finally, monitoring network services such as HTTP, SMTP or IMAP is a case in itself.
In the case of a network service the obvious procedure is to query and to monitor the service over the network.
For this {CMK} sometimes uses its own, sometimes existing plug-ins originally developed for Nagios. 
These are also called xref:active_checks#[active checks].
For example, `check_http` is very popular for querying websites.
But even in this case there is usually an additional agent in use which provides supplementary server data to the monitoring.

The following image shows the various ways that {CMK} can access systems to be monitored:

[{image-border}]
image::monitoringagents_agent_access.png[alt="Illustration of the ways {CMK} accesses monitored systems."]

Until now we have only discussed _active_ monitoring -- {CMK}’s showpiece discipline.
There is also the reverse method: namely that by which the target system itself sends messages to the monitoring, for example, via syslog or SNMP traps. 
For these functions {CMK} has its _Event Console_ which is described in its xref:ec#[own article].


// This block replaces the following section "The {CMK} agent"
// start translation
////

[#agents]
== Der {CMK}-Agent

Sie benötigen für die Überwachung eines Servers oder einer Workstation ein kleines Programm, das auf dem Host installiert werden muss: den {CMK}-Agenten.

Der Agent ist ein simples Shellskript, das minimalistisch, sicher und leicht erweiterbar ist.
In der {CMK}-Version {v21} wurde diesem *Agentenskript* mit dem *Agent Controller* eine neue Komponente zur Seite gestellt.
Der Agent Controller ist dem Agentenskript vorgeschaltet, fragt dieses ab und kommuniziert an dessen Stelle mit dem {CMK}-Server.
Dazu registriert er sich am *Agent Receiver*, der auf dem {CMK}-Server läuft.

.Zusammenspiel der Software-Komponenten
[{image-border}]
image::monitoringagents_communication_flow.png[alt="Illustration der Kommunikation zwischen Agent und Instanz."]

Diese Architektur ist beim xref:agent_linux#agent_architecture[Linux-Agenten] und beim xref:agent_windows#agent_architecture[Windows-Agenten] identisch.
Nur die technische Realisierung ist spezifisch für die Betriebssysteme.

Das *Agentenskript* ist zuständig für die Sammlung der Monitoring-Daten und stellt diese dem Agent Controller zur Verfügung.
Es ist:

* minimalistisch, denn es begnügt sich mit minimalen Ressourcen an RAM, CPU, Plattenplatz und Netzwerk.
* sicher, denn es erlaubt keinerlei Zugriffe aus dem Netzwerk.
* leicht erweiterbar, denn Sie können Plugins in einer beliebigen Programmier- oder Skriptsprache schreiben und vom Agentenskript ausführen lassen.

Der *Agent Controller* ist die Komponente des Agenten, die für den Transport der vom Agentenskript gesammelten Daten zuständig ist.
Im Pull-Modus lauscht er am TCP-Port 6556 auf eingehende Verbindungen der {CMK}-Instanz und fragt das Agentenskript ab.

Die Software-Architektur des Agenten mit dem Agent Controller ist die Voraussetzung dafür, neue Funktionen anzubieten, 
die mit dem minimalistischen Design des Agentenskripts nicht umsetzbar waren, 
wie beispielsweise die Verschlüsselung der Kommunikation per Transport Layer Security (TLS), Datenkomprimierung 
und die Umkehrung der Kommunikationsrichtung vom xref:glossar#pull_mode[Pull-Modus] zum xref:glossar#push_mode[Push-Modus.]

Im Pull-Modus initiiert der {CMK}-Server die Kommunikation und fragt die Daten vom Agenten ab.
Im Push-Modus geht die Initiative vom Agenten aus.
Der Push-Modus ist für eine Cloud-basierte Konfiguration und in einigen abgeschotteten Netzwerken erforderlich.
In beiden Fällen kann der {CMK}-Server nicht auf das Netzwerk zugreifen, in dem sich die zu überwachenden Hosts befinden.
Daher sendet der Agent von sich aus regelmäßig die Daten an den {CMK}-Server.
Der Push-Modus ist nur in der {CCE} verfügbar.

Der *Agent Receiver* ist die Komponente des {CMK}-Servers, die als genereller Endpunkt für die Kommunikation des Agent Controllers dient,
z.B. für die Registrierung der Verbindung und für den Empfang der im Push-Modus vom Agent Controller gesendeten Daten.
Im Push-Modus werden die empfangenen Daten vom Agent Receiver im Dateisystem abgelegt und so den Fetchern der Instanz zur Verfügung gestellt, 
in den {EE} sind das die xref:cmc_differences.html#fetcher_checker[{CMK}-Fetcher.]
Dagegen erfolgt im Pull-Modus der Datenaustausch ohne Agent Receiver direkt zwischen den Fetchern der Instanz und dem Agent Controller.

TLS-Verschlüsselung und Datenkomprimierung werden über den Agent Controller und den Agent Receiver realisiert, d.h. {CMK}-Server und Agent müssen mindestens Version {v21} haben.
Dabei ist nach der Installation der erste Schritt die Registrierung des Agent Controller beim Agent Receiver der {CMK}-Instanz, mit der ein Vertrauensverhältnis hergestellt wird.
Bei der Registrierung wird bereits die TLS-Verschlüsselung der Kommunikation eingerichtet.
Für den Push-Modus der {CE} müssen {CMK}-Server und Agent mindestens Version {v22} haben.

Die folgende Tabelle stellt die verschiedenen Funktionen des {CMK}-Agenten zusammen und zeigt, in welchen {CMK}-Editionen diese Funktionen verfügbar sind:

[cols="25,50,25",options="header"]
|===
|Funktion |Beschreibung |Verfügbarkeit
|Registrierung |Das Vertrauensverhältnis zwischen dem Agent Controller des Hosts und dem Agent Receiver der {CMK}-Instanz wird hergestellt. |alle Editionen ab Version {v21}
|TLS-Verschlüsselung |Die Daten werden mit TLS verschlüsselt ausgetauscht. |alle Editionen ab Version {v21}
|Komprimierung |Die Daten werden komprimiert ausgetauscht. |alle Editionen ab Version {v21}
|Pull-Modus |Der Agent versendet die Daten auf Anforderung der {CMK}-Instanz. |alle Editionen
|Push-Modus |Der Agent versendet die Daten von sich aus an die {CMK}-Instanz. |{CE} ab Version {v22}
|Individuelle Agentenkonfiguration |Per xref:glossar#agent_bakery[Agentenbäckerei] können Agenten für einzelne oder Gruppen von Hosts individuell konfiguriert und die Agentenpakete für die Installation erstellt werden. |{EE} und {CE}
|xref:agent_deployment#[Automatische Agenten-Updates] |Das Paket aus der Agentenbäckerei wird zuerst manuell oder per Skript installiert und wird von da an automatisch aktualisiert. |{EE} und {CE}
|xref:hosts_autoregister#[Automatische Erstellung von Hosts] |Die Registrierung des Agenten bei der {CMK}-Instanz und die Erstellung des Hosts erfolgt automatisch. |{CE} ab Version {v22}
|===
////
// end translation


[#agents]
== The {CMK} agent

To monitor a server or workstation you need a small program, the {CMK} agent, which must be installed on the host.

The agent is a simple shell script that is minimalistic, secure, and easily extendable.
From {CMK} version {v21}, there is a new agent that extends the shell script.
More precisely, the *agent script* is joined by a new component: the *Agent Controller*.
The Agent Controller precedes the agent script, queries it and communicates with the {CMK} server on the script's behalf.
To do this, the Agent Controller registers with the *Agent Receiver*, which is also a new process running on the {CMK} server.

.Interaction of the software components
[{image-border}]
image::monitoringagents_communication_flow.png[alt="Illustration of communication between agent and site."]

This architecture is identical for both the xref:agent_linux#agent_architecture[Linux agent] and the xref:agent_windows#agent_architecture[Windows agent].
Only the technical implementation is specific to each operating system.

The *agent script* is:

* minimalistic, since it only needs minimal resources of RAM, CPU, disk space and network.
* secure, because it does not allow any access from the network.
* easily extendable, because you can write plug-ins in any programming or scripting language and have them executed by the agent script.

The *Agent Controller* is the component within the agent that is responsible for transporting the data collected by the agent script.
It listens on TCP port 6556 for incoming connections from the {CMK} site and queries the agent script.

So why is the Agent Controller needed -- the system has been working just fine without it up until now?
Well, the software architecture of the agent is the prerequisite for providing new features that cannot be implemented with the minimalistic design of the agent script, such as encryption of the communication via Transport Layer Security (TLS), data compression and reversal of the communication direction.
Until now, it was always the {CMK} server that initiated the communication and requested the data from the agent -- in what is known as _pull mode_.

Adding the Agent Controller satisfies the prerequisite for a future implementation of the _push mode_, in which a transfer is initiated by an agent.
Push mode is required for a cloud-based configuration and in some compartmentalized networks.
In both cases, the {CMK} server cannot access a network in which the hosts to be monitored are located.
The agent therefore periodically sends the data to the {CMK} server on a standalone basis.
The Agent Controller and Agent Receiver are already prepared for push mode, even though this mode will be available only with the next {CMK} version for the new {CMK} Plus Edition (CPE).

The *Agent Receiver* is the {CMK} server component that serves as the general endpoint for the Agent Controller's communication, e.g. for registering a connection.
It will continue to receive data sent by the Agent Controller in push mode.
In pull mode, data is exchanged with the fetchers on the site, in the {EE} these are the xref:cmc_differences.html#fetcher_checker[{CMK} Fetchers].

TLS encryption and data compression are achieved via the Agent Controller and Agent Receiver, i.e. both the {CMK} server and agent must be of version {v21} or higher.
The first step after an installation is the registration of the Agent Controller with the {CMK} site's Agent Receiver, which establishes a trust relationship.
The TLS encryption of the communication process will be set up during this registration.










[#download_page]
== Downloading the agent from the download page

Agents for eleven different operating system families are currently maintained in the {CMK} project. 
All of these agents are components in {CMK}, and are available for downloading via the {CMK} server’s web interface.
These agents are accessed via via [.guihint]#Setup > Agents#.

In the {CRE}, the menu items [.guihint]#Linux#, [.guihint]#Windows# and [.guihint]#Other operating systems# will take you directly to the download pages where you will find the pre-configured agents and agent plug-ins, in the following example to the download page for [.guihint]#Linux, Solaris, AIX#:

image::monitoringagents_download_linux_cre.png[alt="List of Linux agents for download in the {RE}."]

In the {CEE}, the menu item [.guihint]#Windows, Linux, Solaris, AIX# takes you to a page that also gives you access to the xref:bakery[Agent Bakery].
From this page, the [.guihint]#Related# menu item will take you to the agent files pages as in the {RE}.

The packaged agents for Linux (in RPM and DEB file formats) and for Windows (in MSI file format) are found right in the first box of the corresponding download page.
In these software packages you will find the new agent with Agent Controller since version {v21}.
The installation and configuration is described in detail in the articles on xref:agent_linux#install[Linux agents] and xref:agent_windows#install[Windows agents].

In the [.guihint]#Agents# box you can find the appropriate agent scripts for the various operating systems.
For operating systems on which the agent must be set up in the legacy mode (i.e., without an Agent Controller), there are the articles on xref:agent_linux_legacy#[Monitoring Linux in legacy mode] and xref:agent_freebsd#[Monitoring FreeBSD].


[#bakery]
== The Agent Bakery

=== Introduction

{cee-only}
If you use one of the {EE} or the {CE} you can package personalized agents with the _Agent Bakery_.
In this way, alongside the existing agents, you can also create (or ‘bake‘) agent packages that contain custom configurations and additional or optional plug-ins. 
You can install these packages with a single command. 
Such packages are ideal for automatic distribution and installation.
You can even create personalized agents for folders or specific groups of hosts.
This allows great flexibility through the use of the xref:agent_deployment#[automatic agent updates].

While it is true that the {CMK} agent can function ‘naked’ immediately -- without needing configuration, and without plug-ins -- nonetheless in some cases the agent does need to be set up.
Some examples:

* Restriction of access to specific IP addresses
* Monitoring of Oracle databases (a plug-in and configuration are required)
* Monitoring of text log files (a plug-in, data names and a text-patterns are required)
* Utilization of the xref:inventory#[hardware/software inventory] (a plug-in required)


[#bakery_download]
=== Downloading the agent

You can access the Agent Bakery via [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX#:

image::monitoringagents_agent_bakery_main.png[alt="Entry page to the Agent Bakery."]

{CMK} supports Windows, Linux, Solaris and AIX operating systems with the Agent Bakery. 
For Linux you have a choice between the package formats RPM (for Red Hat Enterprise Linux (RHEL) based systems, SLES) and DEB (for Debian, Ubuntu),
as well as a so-called 'tarball' in the TGZ file format that is simply unpacked as `root` under `/`.
Likewise, a tarball is available for AIX, however this does not include automatic integration into the `inetd`.
The integration must be performed manually as a one-off action.
For Solaris there is again the tarball and a PKG package.

If you have not yet made any settings for specific hosts, there is only one default agent configuration.
An explanation of the various possible agent configurations will be provided in the next two sections.

Every agent configuration has an explicit ID: its [.guihint]#hash#.
A hash’s first eight characters are displayed in the GUI.
This hash will be a part of the package version and embedded in the package file name. 
Whenever you change something in a package’s configuration or update {CMK}, the package’s hash will also be changed. 
In this way the operating system’s package manager recognizes that it is a different package and perform an update.
{CMK}’s version number would not suffice to distinguish here.

Baked packages for Linux and Windows are installed in the same way as the packages available on the xref:download_page[Checkmk download page].


=== Configuration using rules

The agent’s configuration can be altered -- as is so often the case in {CMK} -- via xref:glossar#rule[rules].
These offer you the possibility of equipping different hosts with differing settings or plug-ins.
The [.guihint]#Agent rules# button takes you to a page which lists all of the rule sets that affect the agents:

image::monitoringagents_agent_rules.png[alt="List of rules for the agents."]

Let’s take the following example:
you wish to limit the list of IP addresses that are permitted to access the agent. 
For this you select the [.guihint]#Generic Options > Allowed agent access via IP address (Linux, Windows)# rule set. 
Enter one or more IP addresses as the rule’s value:

image::monitoringagents_agent_rule_ipaccess.png[alt="Rule to restrict IP addresses to access the agent."]

Leave the default values in the [.guihint]#Conditions# box unchanged so that this rule applies to all hosts.
Save the new rule.


[#agent_configurations]
=== The agent configurations 

After saving, go back to the [.guihint]#Windows, Linux, Solaris, AIX# page.
The icon:button_bake_agents[alt="Icon for baking the agents."] button ensures that the agent will be freshly-baked. 
The result -- you now have two individual configurations:

image::monitoringagents_agent_bakery_agentlist.png[alt="List with two agent configurations to download."]

In the [.guihint]#Agent type# column you can read which hosts the respective configuration is assigned to.
For space reasons this list may not be complete.

[cols="20,~"]
|===
|[.guihint]#Vanilla (factory settings)# |The agent packages contain only the default configuration and thus *no* single agent rule.
|[.guihint]#Folders# |The agent packages contain *all* agent rules in which no conditions are defined for hosts and which apply to the listed folders. +
Agent packages are created specifically for a folder if the attribute [.guihint]#Bake agent packages# is set to [.guihint]#Bake a generic agent package for this folder# in the [.guihint]#Folder properties#.
This attribute applies only to the folder and is not inherited. +
This entry is useful for creating agents for hosts that do not yet exist in {CMK}.
The folder can even be empty to xref:hosts_autoregister#[create hosts automatically there later].
By default, agent packages are only created for the [.guihint]#Main# (or [.guihint]#root folder#).
|[.guihint]#Hosts# |The agent packages contain *all* of the agent rules that apply to the hosts in the the list.
|===

For the example shown above, the [.guihint]#Allowed agent access via IP address (Linux, Windows)# rule was created without conditions for hosts.
The new agent configuration therefore applies to the [.guihint]#Main# folder and to `localhost`, currently the site's only host.

The more host-specific rules you deploy, the more different variants of agents will be built.
The Agent Bakery takes care to build only those configurations that are used by at least one of the existing folders or hosts.

By the way, you can also access a host’s agent packages conveniently via the host's properties 
by clicking on the host in [.guihint]#Setup > Hosts > Hosts# and selecting [.guihint]#Monitoring agent# in the [.guihint]#Hosts# menu:

image::monitoringagents_download_host_agent.png[alt="List of agents for a host to download."]

Why are packages for all operating systems provided for every host?
The answer is very simple: 
if no agent is installed on a system {CMK} cannot of course recognize the operating system.
In any case, once xref:agent_deployment#[automatic agent updates] are activated you don’t need to do anything more.


=== Extending via plug-ins

Many rules are concerned with the installation of various _plug-ins_.
These extend the agent for the monitoring of quite specific components. 
Most of these are special applications such as databases, for example. 
Alongside the rule that activates a plug-in you will also find the settings for configuring the plug-in. 
Here, for example, is the rule for monitoring MySQL:

image::monitoringagents_agent_rule_mysql.png[alt="Rule for the MySQL plug-in of the agent."]


=== Configuration files

Be careful *not to manually modify* configuration files generated by the Agent Bakery on the target system. 
While manual changes will work for now, the next time you update the agent, the changes will be lost again.
However it is possible to install additional plug-ins and configuration files without problems.


[#agent_update]
== When should an agent be updated?

Regardless of whether you monitor only a handful -- or even thousands of hosts -- 
updating the {CMK} agent on all hosts is always a larger operation.
The xref:agent_deployment#[automatic agent update] in the {CEE} is however a big help. 
Nonetheless, you should really only update the agent when:

* the update solves a problem affecting you, or
* the update includes required new functions.

In order for this to be possible a general rule applies in {CMK}:
Newer versions of {CMK} can basically handle the output of older agents.

*Important:* the reverse is not necessarily true. 
If an agent’s {CMK} version is newer than that of the monitoring server it is possible that the check plug-ins there cannot interpret the agent's output correctly. 
In such a case the affected services go into an {UNKNOWN} status:

image::monitoringagents_crashed_check.png[alt="List of services in UNKNOWN status due to a failed check."]

Even if the output in the above image suggests otherwise, please do _not_ send a crash report in such a case.


[#diagnostics]
== Error diagnosis

=== Testing the agent via the command line

A correctly-installed agent can be very easily queried from the command line. 
The best way to do this is directly from the {CMK} site that is also actively monitoring the agent. 
In this way you can be certain that the server’s IP address will be accepted by the agent.
Suitable commands are e.g. `telnet` and `netcat` (or `nc`).

[{shell}]
----
{c-omd} echo | nc 10.1.1.2 6556
16
----

The `16` output indicates that the connection established via TCP port 6556 was successful and the TLS handshake can now take place.
The agent has been registered with the {CMK} site via the Agent Controller, so the communication is TLS encrypted and no agent output will be displayed.
For registration details, see the xref:agent_linux#registration[Linux agent] and the xref:agent_windows#registration[Windows agent] articles.

If the communication between agent and {CMK} server is _still_ unencrypted (as in legacy pull mode) or is and remains unencrypted (as in legacy mode), this command will give you the complete unencrypted agent output instead of the `16` (of which only the first lines are shown below):

[{shell-raw}]
----
{c-omd} echo | nc 10.1.1.2 6556
<<<check_mk>>>
Version: 2.1.0p1
AgentOS: linux
Hostname: mycmkserver
AgentDirectory: /etc/check_mk
DataDirectory: /var/lib/check_mk_agent
SpoolDirectory: /var/lib/check_mk_agent/spool
PluginsDirectory: /usr/lib/check_mk_agent/plugins
----

The output always begins with the line `+<<<check_mk>>>+`. 
Lines included in `+<<<+` and `+>>>+` are called _section headers_. 
These divide the agent output into sections. 
Each section contains related information and is usually simply the output from a diagnostic command. 
The `check_mk` section plays a special role. 
It contains general information about the agent such as e.g., its version number.

If the host is already being monitored you can also fetch the data with the `cmk -d` xref:cmk_commandline#dump_agent[command]. 
This uses the IP address configured in the [.guihint]#Setup#, allows for a possibly reconfigured port number, and also for any special agent that may be present:
With the options `--debug -v` you can additionally get some debugging information.

[{shell-raw}]
----
{c-omd} cmk -d mycmkserver
<<<check_mk>>>
Version: 2.1.0p1
----

If monitoring is already running regularly for the host in question a current copy of the output can always be found in the `~/tmp/check_mk/cache` site directory:

[{shell-raw}]
----
{c-omd} cat tmp/check_mk/cache/mycmkserver
<<<check_mk>>>
Version: 2.1.0p1
----

*Note:* For information on more diagnostic commands that can be run on the agent host, see the xref:agent_linux#test[Linux agent] and xref:agent_windows#test[Windows agent] articles.


[#diagnosticpage]
=== Testing the agent via the web interface

You can also conduct a diagnosis of the agent via the web interface. 
This takes all settings into consideration and also supports SNMP devices and those queried using special agents. 
In effect, {CMK} always attempts to query via TCP port 6556 *and* SNMP simultaneously.

You can access the connection test via the host properties:
On the [.guihint]#Properties of host# page, select [.guihint]#Host > Connection tests# from the menu, and start the test by clicking [.guihint]#Run tests#:

image::monitoringagents_host_diag.png[alt="Result of the connection test to a host."]

You can try out quite a few of the settings (for example, the SNMP community) right away, and save them when successful.
