include::global_attr.adoc[]
= Monitoring agents
:revdate: 2022-06-28
:title: Monitoring agents - Monitoring with {CMK} devices in a network
:description: Here you get a quick overview of how to monitor servers, switches, and other devices – and how the agent works.

{related-start}
xref:agent_linux#[Monitoring Linux]
xref:agent_windows#[Monitoring Windows]
{related-end}


== Introduction

For a monitoring system to receive more information from an endpoint other than simply that it is accessible, help is required from the target system. 
For example -- how else can {CMK} know how full a server’s storage volume is without that system somehow providing the information? 
The component that provides this information is always an active piece of software -- namely a _monitoring agent_, more briefly, an _agent._
An agent collects data relevant to monitoring from a host at specified intervals and transmits the data to the monitoring server.

For servers and workstations, {CMK} provides its own, called _{CMK} agents_.
{CMK} agents are available for a wide variety of operating systems -- from the commonplace like Windows and Linux to exotics such as OpenVMS.
The agents are passive and listen on TCP port 6556.
Only on receiving a {CMK} server query will they be activated and respond with the required data.

All {CMK} agents can be found via the web interface in the [.guihint]#Setup# menu.
From there you can download the agents and install them on the target system.
You can learn how to install, configure and extend {CMK} agents in this article.

However, there are situations where one does not need to _install_ an agent for monitoring -- since one that can be used is already present.
The best example is SNMP:
All manageable network devices and appliances have a built-in xref:snmp#[SNMP agent].
{CMK} accesses this SNMP agent and retrieves details about the system state with active queries (GET).

However, some systems allow neither an agent installation, nor do they support SNMP in a usable form.
Instead of these they offer application programming interfaces for management, so-called _APIs_, based on Telnet, SSH or HTTP/XML.
Via these so-called xref:datasource_programs#specialagents[special agents] running on the {CMK} server, {CMK} queries these interfaces.

Finally, a special case is the monitoring of network services such as HTTP, SMTP or IMAP.
In case of a network service it is obvious to query the service over the network and to monitor it over this way.
For this {CMK} sometimes uses its own, sometimes existing plug-ins originally developed for Nagios. 
These are also called xref:active_checks#[active checks].
For example, `check_http` is very popular for querying websites.
But even in this case there is usually an additional agent in use which provides supplementary server data to the monitoring.

The following image shows the different ways that {CMK} can access systems to be monitored:

[{image-border}]
image::monitoringagents_agent_access.png[alt="Illustration of the ways {CMK} accesses monitored systems."]

Until now we have only discussed _active_ monitoring -- {CMK}’s showpiece discipline.
There is also the reverse method: namely that by which the target system itself sends messages to the monitoring, e.g., via syslog or SNMP traps. 
For these functions {CMK} has the _Event Console_ which is described in its xref:ec#[own article].


[#agents]
== The {CMK} agent

To monitor a server or workstation you need a small program, the {CMK} agent, which must be installed on the host.

The agent is a simple shell script that is minimalistic, secure, and easily extensible.
Since {CMK} version {v21}, there is a new agent that extends the shell script.
More precisely, the *agent script* is joined by a new component: the *Agent Controller*.
The Agent Controller precedes the agent script, queries it and communicates with the {CMK} server on the script's behalf.
To do this, the Agent Controller registers with the *Agent Receiver*, which is also a new process running on the {CMK} server.

.Interaction of the software components
[{image-border}]
image::monitoringagents_communication_flow.png[alt="Illustration of communication between agent and site."]

This architecture is identical for both the xref:agent_linux#agent_architecture[Linux agent] and the xref:agent_windows#agent_architecture[Windows agent].
Only the technical implementation is specific to each operating system.

The *agent script* is:

* minimalistic, since it only needs minimal resources of RAM, CPU, disk space and network.
* secure, because it does not allow any access from the network.
* easily extensible, because you can write plug-ins in any programming or scripting language and have them executed by the agent script.

The *Agent Controller* is the component within the agent that is responsible for transporting the data collected by the agent script.
It listens on TCP port 6556 for incoming connections from the {CMK} site and queries the agent script.

So why is the Agent Controller needed -- the system has been working just fine without it up until now?
Well, the software architecture of the agent is the prerequisite for offering new features that cannot be implemented with the minimalistic design of the agent script, such as encryption of the communication via Transport Layer Security (TLS), data compression and reversal of the communication direction.
Until now, it was always the {CMK} server that initiated the communication and requested the data from the agent -- in what is known as pull mode.

Adding the Agent Controller satisfies the prerequisite for a future implementation of the push mode, in which a transfer is initiated by an agent.
Push mode is required for a cloud-based configuration and in some compartmentalized networks.
In both cases, the {CMK} server cannot access a network in which the hosts to be monitored are located.
The agent therefore periodically sends the data to the {CMK} server on a standalone basis.
The Agent Controller and Agent Receiver are already prepared for push mode, even though this mode will be available only with the next {CMK} version for the new {CMK} Plus Edition (CPE).

The *Agent Receiver* is the component of the {CMK} server that serves as the general endpoint for the Agent Controller's communication, e.g. for registering a connection.
It will continue to receive data sent by the Agent Controller in push mode.
In pull mode, data is exchanged with the fetchers of the site, in the {EE} these are the xref:cmc_differences.html#fetcher_checker[{CMK} fetchers].

TLS encryption and data compression are achieved via the Agent Controller and Agent Receiver, i.e. both the {CMK} server and agent must be of version {v21} or higher.
The first step after an installation is the registration of the Agent Controller with the {CMK} site's Agent Receiver, which establishes a trust relationship.
The TLS encryption of the communication process will be set up during this registration.


[#download_page]
== Downloading the agent from the download page

Agents for eleven different operating system families are currently maintained in the {CMK} project. 
All of these agents are components in {CMK}, and are available for downloading via the {CMK} server’s web interface.
These agents are accessed via via [.guihint]#Setup > Agents#.

In the {CRE}, the menu items [.guihint]#Linux#, [.guihint]#Windows# and [.guihint]#Other operating systems# will take you directly to the download pages where you will find the pre-configured agents and agent plug-ins, in the following example to the download page for [.guihint]#Linux, Solaris, AIX#:

image::monitoringagents_download_linux_cre.png[alt="List of Linux agents for download in the {RE}."]

In the {CEE}, the menu item [.guihint]#Windows, Linux, Solaris, AIX# takes you to a page that also gives you access to the xref:bakery[Agent Bakery].
From this page, the [.guihint]#Related# menu item will take you to the agent files pages as in the {RE}.

The packaged agents for Linux (in RPM and DEB file formats) and for Windows (in MSI file format) are found right in the first box of the corresponding download page.
In these software packages you will find the new agent with Agent Controller since version {v21}.
The installation and configuration is described in detail in the articles on xref:agent_linux#[Linux agents] and xref:agent_windows#[Windows agents].

In the [.guihint]#Agents# box you can find the agent scripts for the different operating systems.
For operating systems on which the agent must be set up in legacy mode (i.e., without an Agent Controller), there are the articles xref:agent_linux_legacy#[Monitoring Linux in legacy mode] and xref:agent_freebsd#[Monitoring FreeBSD].


[#bakery]
== The Agent Bakery

=== Introduction

{cee-only}
If you use one of the {CEE} you can package personalized agents with the _Agent Bakery_.
In this way, alongside the existing agents, you can also create (or ‘bake‘) agent packages that contain custom configurations and extra plug-ins. 
You can install these packages with a single command. 
These packages are ideal for automatic distribution and installation.
You can even create personalized agents for specific groups of hosts.
This allows great flexibility through the use of the xref:agent_deployment#[automatic agent updates].

While it is true that the {CMK} agent can function ‘naked’ immediately -- without needing configuration, and without plug-ins -- nonetheless in some cases the agent does need to be set up.
Some examples:

* Restriction of access to specific IP addresses
* Monitoring of Oracle databases (a plug-in and configuration are required)
* Monitoring of text log files (a plug-in, data names and a text-patterns are required)
* Utilization of the xref:inventory#[hardware/software inventory] (a plug-in required)


=== Downloading the agent

You can reach the Agent Bakery via [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX#:

image::monitoringagents_agent_bakery_main.png[alt="Entry page to the Agent Bakery in the {EE}."]

{CMK} supports Windows, Linux, Solaris and AIX operating systems with the Agent Bakery. 
For Linux you have a choice between the package formats RPM (for Red Hat Enterprise Linux (RHEL) based systems, SLES) and DEB (for Debian, Ubuntu), as well as a so-called 'tarball' in TGZ file format that is simply unpacked as `root` under `/`.
Likewise, a tarball is available for AIX, however this does not include automatic integration into the `inetd`.
The integration must be performed manually as a one-off action.
For Solaris there is again the tarball and a PKG package.

Every agent configuration has an explicit ID: its [.guihint]#hash#.
A hash’s first eight characters are displayed in the GUI.
This hash will be a part of the package version and embedded in the package file name. 
Whenever you change something in a package’s configuration or update {CMK}, the package’s hash will also be changed. 
In this way the operating system’s package manager recognizes that it is a different package and perform an update.
{CMK}’s version number would not suffice to distinguish here.

Baked packages for xref:agent_linux#[Linux] and xref:agent_windows#[Windows] are installed in the same way as the packages you can download from the xref:download_page[download page].


=== Configuring via rules

The agent’s configuration can be altered -- as is so often the case in {CMK} -- via xref:wato_rules#[rules].
These offer you the possibility of equipping different hosts with differing settings or plug-ins.
The [.guihint]#Agent rules# button takes you to a page which lists all of the rule sets that affect the agents:

image::monitoringagents_agent_rules.png[alt="List of rules for the agents."]

Let’s take the following example:
you wish to limit the list of IP addresses that are permitted to access the agent. 
For this you select the [.guihint]#Generic Options > Allowed agent access via IP address (Linux, Windows)# rule set. 
Enter one or more IP adresses as the rule’s value:

image::monitoringagents_agent_rule_ipaccess.png[alt="Rule to restrict IP addresses to access the agent."]

After saving, go back to the [.guihint]#Windows, Linux, Solaris, AIX# page.
The icon:button_bake_agents[alt="Icon for baking the agents."] button ensures that the agent will be freshly-baked. 
The result -- you now have two individual configurations:

image::monitoringagents_agent_bakery_agentlist.png[alt="List with two agent configurations to download."]

In the [.guihint]#Hosts# column you will find a list of hosts associated with the relevant configuration. 
For space reasons this list may not be complete.
The [.guihint]#VANILLA# and [.guihint]#GENERIC# names have a special role. 
These two pseudo-hosts are always present and have the following functions:

[cols="25,~"]
|===
|[.guihint]#VANILLA# |A virtual host whose agent contains only the default configuration, to which therefore *none* of the agent rules apply.
|[.guihint]#GENERIC# |A virtual host to which *all* rules apply, with no defined additional conditions. This entry is especially useful for installing agents on hosts that have not yet been incorporated into the monitoring.
|===

The more host-specific rules you deploy, the more different versions of agents will be built.
The Agent Bakery makes sure that only such combinations of configurations are built that will be used by at least one of the available hosts.

By the way, you can also reach a host’s agent packages conveniently via the host's properties by clicking on the host in [.guihint]#Setup > Hosts > Hosts# and selecting [.guihint]#Monitoring agent# in the [.guihint]#Hosts# menu:

image::monitoringagents_download_host_agent.png[alt="List of agents for a host to download."]

Why are packages for all operating systems offered for every host?
The answer is very simple: 
if no agent is installed on a system {CMK} naturally cannot recognise the operating system.
In any case, once xref:agent_deployment#[automatic agent updates] are activated you don’t need to do anything more.


=== Extending via plug-ins

Many rules are concerned with the installation of various _plug-ins_.
These extend the agent for the monitoring of quite specific components. 
Most of these are special applications such as databases, for example. 
Alongside the rule that activates a plug-in you will also find the settings for configuring the plug-in. 
Here, for example, is the rule for monitoring MySQL:

image::monitoringagents_agent_rule_mysql.png[alt="Rule for the MySQL plug-in of the agent."]


=== Configuration files

Be careful *not to manually modify* configuration files generated by the Agent Bakery on the target system. 
While manual changes will work for now, the next time you update the agent, the changes will be lost again.
However it is possible to install additional plug-ins and configuration files without problems.


[#agent_update]
== When should an agent be updated?

Regardless of whether you monitor only a handful -- or even thousands of hosts -- 
updating the {CMK} agent on all hosts is always a larger operation.
The xref:agent_deployment#[automatic agent update] in the {CEE} is however a big help. 
Nonetheless, you should really only update the agent when:

* the update solves a problem affecting you, or
* the update includes required new functions.

In order for this to be possible a general rule applies in {CMK}:
Newer versions of {CMK} can basically handle the output of older agents.

*Important:* the reverse is not necessarily true. 
If an agent’s {CMK} version is newer than that of the monitoring server it is possible that the check plug-ins there cannot interpret the agent's output correctly. 
In such a case the affected services go into an {UNKNOWN} status:

image::monitoringagents_crashed_check.png[alt="List of services in UNKNOWN status due to a failed check."]

Even if the output in the above image suggests otherwise, please do _not_ send a crash report in such a case.


[#diagnostics]
== Error diagnosis

=== Testing the agent via command line

A correctly-installed agent can be very easily queried from the command line. 
The best way to do this is directly from the {CMK} site that is also actively monitoring the agent. 
In this way you can be certain that the server’s IP address will be accepted by the agent.
Suitable commands are e.g. `telnet` and `netcat` (or `nc`).

[{shell}]
----
{c-omd} echo | nc 10.1.1.2 6556
16
----

The `16` output indicates that the connection establishment via TCP port 6556 was successful and now the TLS handshake can take place.
The agent has been registered with the {CMK} site via Agent Controller, so the communication is TLS encrypted and no agent output is displayed.
For registration details, see the xref:agent_linux#registration[Linux agent] and xref:agent_windows#registration[Windows agent] articles.

If the communication between agent and {CMK} server is _still_ unencrypted (as in legacy pull mode) or is and remains unencrypted (as in legacy mode), this command will give you instead of the `16` the complete unencrypted agent output (of which only the first lines are shown below):

[{shell-raw}]
----
{c-omd} echo | nc 10.1.1.2 6556
<<<check_mk>>>
Version: 2.1.0p1
AgentOS: linux
Hostname: mycmkserver
AgentDirectory: /etc/check_mk
DataDirectory: /var/lib/check_mk_agent
SpoolDirectory: /var/lib/check_mk_agent/spool
PluginsDirectory: /usr/lib/check_mk_agent/plugins
----

The output always begins with the line `+<<<check_mk>>>+`. 
Lines included in `+<<<+` and `+>>>+` are called _section headers_. 
These divide the agent output into sections. 
Each section contains related information and is usually simply the output from a diagnosis command. 
The `check_mk` section plays a special role. 
It contains general information about the agent such as e.g., its version number.

If the host is already being monitored you can also fetch the data with the `cmk -d` xref:cmk_commandline#dump_agent[command]. 
This uses the IP address configured in the [.guihint]#Setup#, allows for a possibly reconfigured port number, and also for any special agent that may be present:

[{shell-raw}]
----
{c-omd} cmk -d mycmkserver
<<<check_mk>>>
Version: 2.1.0p1
----

If monitoring is already running regularly for the host in question a current copy of the output can always be found in the `~/tmp/check_mk/cache` site directory:

[{shell-raw}]
----
{c-omd} cat tmp/check_mk/cache/mycmkserver
<<<check_mk>>>
Version: 2.1.0p1
----

*Note:* For more diagnostic commands to run on the agent host, see the xref:agent_linux#test[Linux agent] and xref:agent_windows#test[Windows agent] articles.


[#diagnosticpage]
=== Testing the agent via web interface

You can also conduct a diagnosis of the agent via the web interface. 
This takes all settings into consideration and also supports SNMP devices and those queried using special agents. 
In effect, {CMK} simply attempts to always query via TCP port 6556 *and* SNMP simultaneously.

You can access the connection test via the properties of the host:
On the [.guihint]#Properties of host# page, select [.guihint]#Host > Connection tests# from the menu, and start the test by clicking [.guihint]#Run tests#:

image::monitoringagents_host_diag.png[alt="Result of the connection test to a host."]

You can try out quite a few of the settings (e.g., the SNMP community) right away, and save them when successful.
