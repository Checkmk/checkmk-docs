// -*- coding: utf-8 -*-
// IGNORE % Logfile ➤
include::global_attr.adoc[]
= Host and service views
:revdate: draft
:title: Host and service views
:description: Views are very powerful in {CMK} and can be individually created or customized. How to effectively use views is explained here.

{related-start}
xref:user_interface#[The user interface]
xref:dashboards#[Dashboards]
xref:graphing#[Performance data and graphing]
{related-end}


== Introduction

The most important task performed by {CMK}’s xref:user_interface#[user interface] is displaying the current status of hosts and services.
This is achieved largely with _views_ in a table format.
In order for the daily operations to run as efficiently as possible, these tabular views provide numerous functions, and they can be customized to meet your requirements.

We distinguish between *global* views and those that require a *context*.
Global views can always be called-up directly.
An example of a global view is the list of all current service problems.
A context view -- the [.guihint]#Status of Host ...# view for example -- namely needs to specify by name the host whose status is to be displayed.
Such views can only be called-up in situations relevant to a particular host.


=== Global views

The global view is most easily accessed via the [.guihint]#Monitor# menu.

.The [.guihint]#Monitor# menu of the {RE} in Show less mode
image::monitor_menu_less.png[alt="Monitor menu of the {RE} in Show less mode."]

Alternatively, you can use the [.guihint]#Overview# and [.guihint]#Views# xref:glossar#snapin[snap-ins].
In the [.guihint]#Overview# each number is clickable and takes you to a global view that individually lists the hosts or services counted in each case.

image::views_tactical_overview.png[width=42%, align=center]

All global views are accessible in the [.guihint]#Views# snap-in -- grouped according to topics.
In addition you will find a few entries that aren’t actually [.guihint]#Views# -- such as for example, the xref:glossar#dashboard#[dashboards], which are sorted under the [.guihint]#Overview# topic.
Dashboards can however _contain_ views.

image::views_snapin_views.png[width=42%, align=center]

From a global view, with a further step you can access the details for a particular host or service.
The names of hosts and services and the individual cells in other columns are clickable &hellip;

image::views_all_hosts.png[]

&hellip; and bring you to a more detailed (context-dependent) view.


=== Context-dependent views

In views that relate to _a specific_ host or service, you will find all sorts of entries in the menu [.guihint]#Host# or respectively [.guihint]#Service#,
which will then take you to other views with the same context -- i.e. for the same host or service.

image::views_context_buttons.png[]

You can also access host- and service-specific views by xref:intro_gui#search_monitor[searching within the Monitor menu]:

image::views_monitor_search.png[width=60%, align=center]

Another way to the detailed view is via the [.guihint]#Quicksearch# snap-in in the sidebar:

image::views_snapin_quicksearch.png[width=42%, align=center]

Which view you receive will depend on the result of the search.
If the search identifies a host explicitly, you will reach this host's [.guihint]#Services of Host ...# page directly.
There you will again find the menu items for the other views of this same host.
A click on the host's name takes you to the [.guihint]#Status of Host# view.

image::views_services_of_host.png[]


=== Effect in the menu bar

[#menucontext]
The distinction between global, host-specific and service-specific views is also noticeable in the menu bar.
Always present are the menus [.guihint]#Commands, Add to, Export, Display# and [.guihint]#Help#.

In global host views there is also the menu [.guihint]#Hosts# as well as in global service views [.guihint]#Services# -- note the plural here!
You can use this, for example, to call up the xref:availability#[availability] of all hosts or services of the current view.

image::views_menu_global.png[]

Views of a single host, on the other hand, contain the menus [.guihint]#Host# and [.guihint]#Services# with all actions for the current host and all services for the current view.

image::views_menu_context_host.png[]

Views of a single service likewise contain the [.guihint]#Host# menu, but additionally, now in the singular, the [.guihint]#Service# menu, with actions for this one service.

image::views_menu_context_service.png[]


[#using_views]
== Using views

=== Options, filters and commands

At the top left of every view there are six symbols with which you can influence the display, and trigger actions:

[#filter]

[cols="30,~",options="header"]
|===
|Menu |Function

|[.guihint]#Commands# |Here you can execute commands to the object shown (e.g., entering scheduled downtimes).
 The commands are described in detail in their xref:commands#[own article].

|[.guihint]#Display > Filter# |Opens the filter bar on the right side of the main page.
With this you can further restrict the displayed data.
As soon as you set a filter the symbol on icon:button_filters_set_lo[] changes so that it is clear that under certain circumstances not all data will be displayed.
Conversely, some views already have predefined filters, (e.g. the list of all problems).
Here, by removing the filters you can also have more data displayed.
Changes to filters are not saved, rather they are reset when you quit the view.

|[.guihint]#Display > Show checkboxes# |With this you switch checkboxes on or off.
Using the checkboxes you can restrict the commands to selected data sets.

|[.guihint]#Display > Modify display options > Number of columns# |Defines the number of columns for the view.
Views with multiple columns allow the space available on wider monitors to be fully-utilized.
For views that only display a single data set this setting has no effect.

|[.guihint]#Display > Modify display options > Refresh interval# |Defines the view’s refresh interval.
You can also disable the automatic refreshing.
Be aware that in this case it is possible that you will not be informed of problems that occur in the meantime!

|[.guihint]#Display > Modify display options > Date format# |Change the format for the date display.

|[.guihint]#Display > Modify display options > Time stamp format# |Timestamps can be displayed as absolute, relative, mixed, in combination or as ‘Unix Timestamp’.
|===


=== Time and date

{CMK} shows time stamps as relative values in all of the views of states if these are less than 24 hours in the past or future -- e.g., [.guihint]#16 hours#.
You can switch this in the menu via [.guihint]#Display > Modify display options# and choose between displaying only absolute, only relative or both values, or also the ‘Unix timestamp’.
You can also specify the date format in this dialog.

image::views_time_date.png[]


=== Sorting

The views can be sorted by clicking on a column's heading.
A column has three states that can be selected through a loop of multiple clicks:

* sorted in ascending order
* sorted in descending order
* column unsorted

Views are initially sorted ‘naturally’ according to how the view is defined.
In service views the sorting is alphabetic by service name -- with the exception of [.guihint]#Check_MK# services which are always at the top.
The [.guihint]#Check_MK# service is responsible for managing the monitoring agent.
There are also the [.guihint]#Check_MK Discovery# and [.guihint]#Check_MK HW/SW Inventory# services.
In order to sort such a list by the current state of the services a click on [.guihint]#State# will suffice.

image::views_sort_by_state.png[]

Sorting by the [.guihint]#Perf-O-Meter# column sometimes produces surprising results.
This is due to the graphic display of the xref:graphing#[measured values] being partly a percentage summary of the actual values.
The sorting is however performed according to absolute values, and is always based on the _first metric_ produced by a service.


[#export]
=== Exporting

Data displayed in a view can be exported in various formats using the [.guihint]#Export# menu:

[cols="30,~",options="header"]
|===
|Menu item |Function

|[.guihint]#Data > Export CSV# |A semicolon is used as a separator.
The individual cells are enclosed in quotes.
The first line contains the internal abbreviations for each column.

|[.guihint]#Data > Export JSON# |For an export in JSON-format, the cells also end up in quotes, separated by breaks and commas, enclosed by square brackets.

|[.guihint]#Reports > This view as PDF# |Only in the {EE}: This creates a so-called _instant report_, which converts the current view into a PDF document, minus icons, navigation and so on.
Its layout can be customized with special templates in the xref:reporting#[reports].

|[.guihint]#Reports# |Depending on the current view, further PDF exports are offered, e.g. for availability, as well as individually-created report templates, if available.

|[.guihint]#REST API > Query hosts/services resource# |Output of the xref:rest_api#[REST API] for host/service selection of the current (filtered) view.
|===


[#limit]
=== The display limit

In a larger monitoring environment displaying all views is no longer practical.
When you are monitoring 50,000 services and select the [.guihint]#All Services# view, not only will the display require a very long time -- it will also not be very useful.

In such situations, in order to protect the user from long waiting times and to avoid crippling the system with absurd quantities of data,
views are limited to 1000 entries in their display.
Exceeding this limit produces the following warning:

image::views_limit1.png[width=80%]

As you can see, the records being displayed are not necessarily the first 1000 corresponding to the selected sorting method!
There is a technical reason for this:
namely that the limit is applied to the data source in the connected site’s monitoring cores.
This is very important, because if we accumulate one million data records from your environment spread around the world, then 99.9{nbsp}% of the data will be deleted immediately.
The sorting takes place over the interface only at the end, thus it happens _after_ the limit.
The data from all sites must, after all, be sorted together.

If you really want to see more than one thousand records, then you can reach the
next level by clicking on [.guihint]#Repeat query and allow more results#. Here the
limit is 5,000 records. If this limit has again been exceeded, with
_unlimited_ you can continue. Insofar this is a potentially risky action,
you will require _Administrator rights_. You have been warned!

image::views_limit2.png[width=80%]

You can define both levels under [.guihint]#Global settings > User interface#:

image::views_limit3.png[]


[#edit]
== Customizing views

=== The basics

{CMK} allows you to customize its standard views, and even to create new ones that you can incorporate into xref:reporting#[reports] and xref:glossar#dashboard[dashboards].
Thus you can define numerous different aspects for every view:

* *General items* such as title, topic, etc.
* Which *data source* is to be displayed (e.g. hosts, services, events on the Event Console, etc.)?
* Which selection of records is to be displayed (*filtering*)?
* Which *columns* will be displayed?
* Which other views are *linked* to the text in the columns?
* What is the standard *sorting* method?
* Is there a *grouping*, and if so, how does it look?
* Where and for which user should the view be *visible*?
* Which style of *table layout* should be used?

The edit mode for views can be accessed in two ways:

// This block replaces the first item in the following list
// start translation
////
. Bei einer bestehenden Tabellenansicht über einen Menüeintrag. Hier gibt es vier Varianten, abhängig vom Ursprung der jeweiligen Tabellenansicht:
* [.guihint]#Display > Clone builtin view# -- erstellt einen Klon der mitgelieferten Tabellenansicht.
* [.guihint]#Display > Edit my view# -- öffnet den Bearbeitungsmodus für Ihre selbsterstellte Tabellenansicht.
* [.guihint]#Display > Clone view# -- legt einen Klon der Tabellenansicht eines anderen Benutzers an -- wenn Sie keine Berechtigung zur Bearbeitung fremder Tabellenansichten haben.
* [.guihint]#Display > Edit view of user X# und [.guihint]#Display > Clone view# -- womit Sie wählen können, ob Sie die Tabellenansicht des anderen Benutzers bearbeiten oder stattdessen einen Klon seiner Tabellenansicht erstellen wollen -- wenn Sie die Berechtigung zur Bearbeitung fremder Tabellenansichten haben.
////
// end translation
. From an active view via the menu item [.guihint]#Display > Customize view# -- with which a clone of the current view is created.








. In the menu [.guihint]#Display > Customize view#. There you can create completely new views with icon:button_add_view[], or customize existing ones with icon:button_clone[]:

image::views_edit_views.png[]


=== Clone first -- then modify

The views supplied as standard are a part of the software and as such cannot be changed, however {CMK} does recognize the concept of _cloning_.
When a view is first customized a copy of that view is created automatically.
This copy is added to your user profile.

This copy can then be customized as desired.
The original view is retained but is _grayed-out_ -- overlaid by your new version in effect.
You can return to the standard view later by simply deleting your clone (achieved in the table of views, as you might expect, with icon:icon_delete[]).

This concept has one further advantage:
namely, that you can define whether the view should be changed _for all users_ or just for yourself.
You specify this in the [.guihint]#General Properties# of the table view under [.guihint]#Visibility# with the [.guihint]#Make this view available for other users# checkbox.
Not surprisingly, you can only select this checkbox if you have xref:wato_user#roles[administrator permissions]
(or more correctly, this function has its own permission -- [.guihint]#Publish views#).
Additionally, single views can be locked in the xref:wato_user#roles[role definitions].

What happens when a view has been customized and published by several users?
Each user then has their own variant of the view.
Which view will be visible for which user(s)?
This can be determined with the following rules:

. When a user creates a view for themselves, this will always have priority for them.
. After this are views that have been customized and published by an administrator (to be precise, someone with the [.guihint]#Modify builtin views# permission).
. If there are none here, then those views apply that another normal user with the [.guihint]#Publish Views# permission has published.
. And when there is also nothing here then the supplied default version will be visible.



How can you create a _real copy_ of a view, so that when done you can have both the supplied and your own views?
This is defined by using [.guihint]#Unique ID# in the [.guihint]#General Properties#.
Simply give your view a new name,
so that it will no longer be identified as a clone of the supplied view, rather it will begin its own independent life.

This ID is the decisive keyword for opening views in the URL.
The schema is very simple.
Here for example is how the global view with its ID `allhosts` is opened:

`/mysite/check_mk/view.py?view_name=allhosts`

The concepts of cloning, customizing and visibility can be found at many other locations in {CMK}, namely in:

* xref:dashboards#[dashboards]
* xref:reporting#[reports]
* xref:graphing#graph_collections[graph collections]
* xref:graphing#custom_graphs[custom graphs]
* xref:user_interface#bookmarks[bookmark lists]


=== Integrating a view into the sidebar

How and if a view will be shown in the [.guihint]#Monitor# menu of the navigation bar as well as in the [.guihint]#Views# snap-in, is defined under [.guihint]#General Properties# by the following characteristics:

image::views_edit_view_general_properties.png[]

* [.guihint]#Title# -- the item’s name
* [.guihint]#Topic in 'Monitor menu':# -- the view will be sorted under this topic. You can also define other topics.
* [.guihint]#Sort index# -- how high up the view appears in the menu
* [.guihint]#Visibility# -- Suppress item and/or share with other users


=== Basic layout

The next block -- [.guihint]#View Properties# -- defines a view’s general appearance:

image::views_edit_view_view_properties.png[]

The [.guihint]#Number of Columns# option sets the default for the number of columns shown in the view, the [.guihint]#Automatic page reload# the default for the refresh counter.
Both values can be modified by the user in the view itself via [.guihint]#Display > Modify display options#.

Under [.guihint]#Basic Layout# there are various styles for displaying the data in tables.
Most views use [.guihint]#Table# -- a normal table that can be sorted by columns
-- or [.guihint]#Single dataset# -- which has the legend on the left and which is mostly used for single data sets.
You can however also use [.guihint]#Single dataset# for views with more than one object.
The [.guihint]#All hosts# view looks something like this when altered to [.guihint]#Single dataset#:

image::views_layout_single_dataset.png[]


=== Columns

The [.guihint]#Columns# box defines which columns you wish to see.
The possible selection of columns depends on the selected data source.
The most columns are found in services, naturally, as all information for the particular host is available here.
The list can be quite long here, and if you are uncertain which column is the right one, there is only one thing to do -- try it out:

image::views_edit_view_columns.png[]

Depending on the column selected, there may be specific options for this.
With the column [.guihint]#Hosts: Hostname#, for example, it is possible to color the host name according to its status using the [.guihint]#Coloring# option.

The [.guihint]#Link# field offers a selection of all views and dashboards.
If a view is selected here, then the column’s respective cell is _clickable_ and takes the user to the chosen view.
This really only makes sense if the targeted view has a context.
The best example is the [.guihint]#All hosts# view.
The [.guihint]#Hostname# column is clickable here and takes the user to this host’s [.guihint]#Services of Host#.
Alternatively, dashboards can be specified here -- which obviously do not require a context.

Under [.guihint]#Tooltip#, on the other hand, you will find a list of all columns.
Thus you can show further information for the host or service when the user moves the mouse cursor over the respective cell (the IP address in the following example):

image::views_hover_address.png[]


[#joined_columns]
=== Information for services in a host view

// This block replaces the complete chapter content
// start translation
////
Stellen Sie sich vor, Sie möchten gerne Informationen zu bestimmten Services in einer Tabelle von Hosts anzeigen.
Das folgende Beispiel zeigt ein sehr schönes Beispiel für so etwas:
Zu jedem Host werden die aktuelle Uptime, die CPU-Last, die Speichernutzung und die Ausführungszeit des {CMK}-Agenten ausgegeben:

image::views_joined_columns_example.png[]

Hier wurde eine Tabelle von Hosts erstellt, in der für jeden Host die *Service-Spalte* [.guihint]#Perf-O-Meter# von je vier verschiedenen Services angezeigt wird.
Man sieht auch, dass bei einem der drei Hosts die Services [.guihint]#CPU, Memory# und [.guihint]#Uptime# nicht existieren und die Spalten dort konsequenterweise leer sind.

Um eine Konfiguration zu dieser Tabellenansicht umzusetzen, fügen Sie in der Ansicht Spalten vom Typ [.guihint]#Joined column# hinzu.
Hier erscheinen dann unter [.guihint]#Column# die Spalten für Services, von denen Sie für das Beispiel [.guihint]#Perf-O-Meter# auswählen.
Mit dem Eintrag [.guihint]#Title# weiter unten bestimmen Sie dann bei Bedarf die Überschrift der Spalte, wenn die automatische nicht passen sollte.

Unter [.guihint]#of Service# wählen Sie zunächst entweder [.guihint]#Explicit match# oder [.guihint]#Regular expression match# aus.
Bei Ersterem tragen Sie anschließend den *exakten* Namen inklusive der Groß- und Kleinschreibung ein.
Dadurch wird der korrekte Service zu dem Host bestimmt.

image::views_edit_view_columns_2.png[]

Wenn Sie nicht genau wissen, wie der Service heißt oder er auf jedem Host ein wenig anders ist, geben Sie einen regulären Ausdruck an, der pro Host auf exakt *einen* Service matcht.
Das ist vor allem dann nützlich, wenn Sie eine Gruppe von Hosts betrachten wollen, bei denen es eine vergleichbare Gruppe an Services gibt, von denen jeweils immer nur einer auf einem Host vorkommen kann.
In dem nachfolgenden Beispiel ist das die [.guihint]#CPU load# oder die [.guihint]#Processor queue,# welche entweder nur auf Linux- oder Windows-Systemen vorkommen kann.

image::views_edit_view_columns_3.png[]

Es gibt übrigens nichts zu befürchten, sollte ein regulärer Ausdruck doch einmal auf mehrere Services zutreffen.
In einem solchen Fall wird immer der erste Treffer in der Spalte angezeigt.

In beiden Varianten ist so eine Darstellung natürlich nur dann nützlich, wenn die Tabellenansicht eine Liste von ähnlichen Hosts anzeigt, welche auch alle über die gewählten Services verfügen oder sich ähnelnde Services haben.
Das ist auch der Grund, warum {CMK} nur wenige solcher Ansichten mit ausliefert:
Welche Spalten hier sinnvoll sind, hängt absolut von der Art der gewählten Hosts ab.
Bei Linux-Servern interessieren sicherlich völlig andere Informationen als z.B. bei USVs.
////
// end translation

Let’s imagine that you’d like to display the information for particular services
in a table of hosts. The following example illustrates this situation very well:
here the current uptime, the CPU load, the memory usage and the
NTP-synchronization are shown for each host:

image::views_joined_columns_example.png[]

Here a table of hosts has been generated in which for each host the
[.guihint]#Perf-O-Meter# *service column* for four different services is displayed.
One sees that for one of the three hosts the [.guihint]#CPU load# and the [.guihint]#Memory#
services do not exist and that the column is consequently empty.

This view’s configuration was achieved by adding columns of the
[.guihint]#Joined column# type. Here the column for services in which [.guihint]#Perf-O-Meter#
has been selected appears under [.guihint]#Column#.  The [.guihint]#Title# entry defines the
column's heading. The service’s *exact* name must be entered (upper and lower
case sensitive!) in the [.guihint]#Of Service# field:

image::views_edit_view_columns_2.png[]

Of course such a display is only useful when the view shows a list of similar
hosts, all of which also utilize the selected services. This is also the reason why
{CMK} does not provide views of this type -- which columns are meaningful here
depends entirely on the type of host selected. For Linux servers the information
of interest is certainly completely different to that for USVs, for example.














=== Sorting

The sorting within a view is configured in the fourth box.
It’s only a matter of the predefined sorting method.
Users can -- as described above -- determine the sorting order themselves with a click on the column heading.
In the view’s configuration however you have more possibilities
-- you can define a _multi-step_ sorting order, e.g. first by service status, and for the same status by service name.
The order so determined is retained as a subordinate sorting when the user resorts in a specific column.

image::views_edit_view_sorting.png[]


=== Grouping

Through grouping you can divide a table into several segments -- in which each segment’s data is related in some way.
The best example of this is the [.guihint]#Service problems# view, which is easily reached via the [.guihint]#Overview# snap-in.

As you can see, this table is grouped with service [.guihint]#State# (first all {CRIT}, then {UNKNOWN}, then {WARN}) - each with its own group header:

image::views_edit_view_grouping.png[]

The grouping in a view is configured similarly to that with the columns.
Simply define which column the grouping should relate to.
It is usually only one, but can be more.
All records with the same value for all selected columns will then be displayed in a group
-- and the column heading will be shown as the group title.

It is important that you also *sort* the records by priority according to the group’s selected characteristic!
Otherwise it can be possible that the same group makes multiple appearances (which may at times be desirable).

Incidentally, a resorting by column performed by a user has no effect on the grouping
-- in such a case only the group’s sequence is determined and the records sorted within the group.
The groups themselves are unchanged.


[#filter_context]
=== Filters, contexts and searches

An important aspect of views is the data _selection_.
Which hosts or services should be displayed in a table?
{CMK} uses the *Filter* concept for this purpose.
Here are a couple of examples of host filters:

image::views_filter.png[]

Every filter can be defined with search terms or other criteria by a user, thus reducing the list of results to those records meeting the criteria.
In this way the filters are AND-linked.
The filter criteria actually used for a view are assembled from three sources:

. Filters with criteria defined as standard for the view.
. Filters set interactively by the user with icon:icon_filter[] in the view.
. Filters that can be set with variables via the URL.

The filters you assemble by editing in the view’s [.guihint]#Context / Search Filters# box have two functions.
Firstly, by clicking on icon:icon_filter[] you can decide which filter will be available to a user.
Secondly, you can predefine filters using criteria, thus limiting the data to be displayed in the view (point 1 above).

When you create or edit a view by using *context* -- instead of the filter for the relevant object only an optional entry field appears.
In this an _exact_ comparison always applies (upper and lower case sensitive).
As an example we can take the `host` view, which displays all services of a specified host.
The host name can be specified by adding a context to the view.
You can also build a display in which the host to be displayed is effectively *hard-coded* directly in the view:

image::views_edit_view_context_filter.png[]

In this way you can call the view without context, or if desired, simply add it to the [.guihint]#Views# snap-in without problem.


=== Special search views

The [.guihint]#Host search# and [.guihint]#Service search# (and other) views supplied as standard behave in a special way in relation to the filters.
When you you select one of these views, it opens with a filter form, and then only shows hosts and services when this filter is activated.

Why is this so?
Because it would simply be very impractical if you first had to go to [.guihint]#All services#, and then be forced to wait until several thousand services are displayed
before you could filter the result with a search entry.
This behavior is regulated by the [.guihint]#Show data only on search# option:

image::views_edit_view_view_properties_show_data.png[]


[#new]
== Creating new views

Creating a new view with icon:button_add_view[] functions in principle just like the editing of an existing view -- with one small difference:
you must first select a *data source* and a *specific object type*.


=== Data source

image::views_create_view_1.png[]

The data source is what you might call a table or database view under databases.
{CMK} does not use SQL databases, but it is similarly-structured internally.
In most cases you will be correct with [.guihint]#All services# or [.guihint]#All hosts#.
There are however a few data sources that should be listed briefly here:

[cols=2]
|===
|Data source |Meaning

|Host and service groups, various |see xref:host_service_groups[below]
|[.guihint]#Alert Statistics# |xref:livestatus#retrieving_statistics[Status statistics]
|[.guihint]#BI#, various |xref:bi#[Business Intelligence]
|[.guihint]#Event Console#, host and service events |xref:ec#[Event Console]
|[.guihint]#Inventory#, various |xref:inventory#[HW/SW Inventory]
|[.guihint]#The Logfile# |xref:livestatus.html#logs[Livestatus data]
|===


[#host_service_groups]
==== Host and service groups

The [.guihint]#Host groups# and [.guihint]#Service groups# data sources -- per line -- provide the information on the group itself
-- accordingly there are no filters for individual hosts or services.
An example of this data source is the standard [.guihint]#Host groups# view.
In distributed environments the [.guihint]#Host groups, merged# and [.guihint]#Service groups, merged# data sources work in exactly the same way.

image::views_hostgroups_summary.png[]

However, if you want information about individual hosts, but grouped according to host groups,
you can change the [.guihint]#All hosts# default view by adding the [.guihint]#Hosts: Host groups the host is member of# option in the [.guihint]#Grouping# box.
Since hosts can be assigned to multiple groups, you will then find a single area in the view for each *host group combination,* which applies to at least one host.

image::views_hostgroups.png[]

You can proceed in the same way with services and service groups.

Depending on the selected data source, various columns are available for building the view.


=== Object type -- global or with context

image::views_create_view_2.png[]

Here it can be decided whether your new view should have a context or if it will be a global view.
The selections available to you depend on the data source.
The most common context by far is host.
The image above appears after selecting the [.guihint]#All services# data source.

Selecting [.guihint]#Show information of a single Host# defines that the new view describes one specific host.
You will thus have created the basis for a view that is not globally-visible, but instead visible via a link:

* For a host view with a context
* As a link in a column (see above, e.g., click on a host name in a view)

There are two options for the service context type.
If you select only [.guihint]#Show information of a single Service#, you can build a view that displays all services with the same name on _different hosts_.
If it should be a specific service for a single host, then select in addition [.guihint]#Show information of a single Host#.


// This block is new
// start translation
////
[#joined_inventory_columns]
== Inventur-Tabellen verknüpfen

{CMK} bietet viele unterschiedliche Daten zu einem Host oder einem Service.
Die meisten davon können Sie mit den Datenquellen [.guihint]#All services# oder [.guihint]#All hosts# darstellen.
Die xref:inventory#[HW/SW-Inventur] bietet darüber hinaus weitere xref:inventory#table[Tabellen] (als Datenquellen), die Sie ebenso in eigenen Ansichten anzeigen und individuell strukturieren können.
Ab {CMK} {v22} können Sie solchen Ansichten auch Spalten aus anderen Tabellen hinzufügen, sofern diese eine gemeinsame Spalte haben.

*Wichtig:* Die Anzahl der Zeilen der finalen Ansicht entspricht der Anzahl der Zeilen der zugrundeliegenden Datenquelle Ihrer Ansicht.
Verknüpfte Tabellen fügen lediglich ausgewählte Spalten hinzu.

In dem folgenden Beispiel werden Sie einmal eine sehr kompakte Ansicht erstellen, in der zwei HW/SW-Inventur-Tabellen miteinander verknüpft werden.
Erstellen Sie zum Anfang xref:new[eine neue Ansicht] und wählen Sie als grundlegende xref:datasource[Datenquelle] die gewünschte Inventur-Tabelle aus.
Für das Beispiel suchen Sie nach [.guihint]#Inventory table: Checkmk ➤ Checkmk sites# und bestätigen anschließend mit icon:button_continue[] [.guihint]#Continue#:

image::views_create_view_3.png[alt="Auswahl der Datenquelle 'Checkmk sites'."]

Die darauf folgende Seite können Sie überspringen, da es nicht nötig ist, die Datenquelle auf einen einzelnen Host oder eine einzelne Instanz einzuschränken.
Der nächste Schritt erfolgt also direkt auf der Hauptseite der Konfiguration, wo Sie zunächst die [.guihint]#Unique ID# und einen [.guihint]#Title# eintragen.

Im Kasten [.guihint]#Macros for joining service data or inventory tables# kommt dann die erste spezifische Konfiguration, um später andere Datenquellen in die Ansicht einzubinden.
Zu diesem Zweck werden Indikatoren benötigt, über die man dann später die richtigen Zeilen in den weiteren Datenquellen identifiziert.
Legen Sie also hier wie in dem nachfolgenden Beispiel die Makros für die Spalten [.guihint]#Version# und [.guihint]#Site# an:

image::views_create_view_4.png[alt="Dialog zum Anlegen von Makros."]

Diese Makros können Sie nun in speziellen [.guihint]#Columns# verwenden.
Neben den xref:columns[regulären Spalten,] die bereits in der Anpassung von Ansichten verwendet wurden, stehen jetzt sowohl die ebenfalls vorher beschriebenen Spalten der xref:joined_columns[Service-Datenquelle] ([.guihint]#Joined columns#) als auch die der [.guihint]#Joined inventory columns# zur Verfügung.

Die ersten beiden Spalten nutzen Standarddaten aus der Datenquelle.
Da Daten aus der HW/SW-Inventur immer zu einem bestimmten Host und einer bestimmten Instanz gehören, stehen Ihnen diese Tabellen ebenfalls zur Verfügung, wenn Sie eine solche Datenquelle ausgewählt haben.

image::views_create_view_5.png[alt="Dialog mit Auswahl von Standardspalten."]

Anschließend können Sie die definierten Makros nicht nur in den [.guihint]#Joined inventory columns# verwenden, sondern auch in den [.guihint]#Joined columns,#
um die Daten von bestimmten Services anzuzeigen.
Das ermöglicht die Kombination unterschiedlichster Quellen -- in diesem Fall, das Perf-O-Meter des dazugehörigen Performance-Service einer Instanz anzuzeigen.
Die Makros können Sie übrigens genauso auch bei der Definition von regulären Ausdrücken verwenden.

image::views_create_view_6.png[alt="Auswahl einer 'Joined column' unter Verwendung eines Makros."]

Daten aus anderen HW/SW-Inventur-Tabellen anzuzeigen funktioniert ganz ähnlich.
Lediglich die zu verwendende Tabelle ist vorher auszuwählen.
In dem nachfolgenden Beispiel verwenden Sie die Tabelle [.guihint]#Checkmk ➤ Checkmk versions,# wodurch die Drop-down-Liste [.guihint]#Display the column# automatisch auf eine sinnvolle Auswahl eingeschränkt wird.

Wie {CMK} die richtige Zeile in der Tabelle findet, von der die Spalte angezeigt werden soll, bestimmen Sie danach.
Fügen Sie dafür mit dem Knopf [.guihint]#Add new match criteria# ein Kriterium in Form einer Spalte hinzu, über das {CMK} später die passende Zeile bestimmen kann.
In dem obigen Beispiel ist das die [.gui]#Version.#
Denn diese ist in der Tabelle einzigartig und kann nur einmal vorkommen.
Das bedeutet umgekehrt auch, dass Sie zwar beliebige Tabellen der HW/SW-Inventur miteinander verknüpfen können, Sie dabei aber auch sicherstellen müssen, dass die beiden Tabellen immer eine gemeinsame Spalte haben und diese Spalte auch immer einzigartige Einträge enthält.
In dem obigen Beispiel wäre die Spalte [.guihint]#Sites# also kein geeignetes Kriterium, da es mehrere Editionen mit derselben Anzahl an Instanzen geben könnte.

image::views_create_view_7.png[alt="Auswahl einer 'Joined inventory column' unter Verwendung eines Makros."]

Selbstverständlich können Sie bei Bedarf auch bei einer [.guihint]#Joined inventory column# den Titel der Spalte anpassen, wenn der automatische nicht passen sollte.
Nachdem alle Einstellungen vorgenommen wurden, speichern Sie mit icon:button_save_and_go_to_view[] [.guihint]#Save & go to view# die neue Ansicht ab und werden direkt zu dem Ergebnis geleitet.
Je nachdem, wie viele Instanzen bei Ihnen überwacht werden, wird auch entsprechend für jede eine Zeile in der Ansicht eingefügt:

image::views_create_view_8.png[alt="Fertige Ansicht inklusive Spalten aus anderen Quellen."]

Wie Sie hier sehen können, gibt es für jede Spalte immer einen Standardtitel, wenn dieser nicht von Ihnen vorgegeben wird.
In der dritten Spalte zu dem [.guihint]#Perf-O-Meter# wurde der Titel nicht vergeben, so dass von {CMK} der verwendete reguläre Ausdruck als Titel herangezogen wurde.
Sie können das jederzeit in den Einstellungen ändern und wie bei der Spalte zu der [.guihint]#Edition# anpassen.
////
// end translation


[#matrix]
== The matrix

When you specify the [.guihint]#Matrix# layout in one of your views you will probably see strange things at first, and ask yourself what is going on.
The matrix is certainly not intuitive on first viewing, but you can achieve good things with it.

In the supplied standard views there is e.g. [.guihint]#Search performance data#, which uses this layout.
You find this view via [.guihint]#Customize > Visualization > Views#.

The following image shows the search for the expression `CPU|^memory|Filesystem /opt/omd/sites/mysite`:

image::views_matrix_filter_service.png[width=50%]

The result is a neat table of my hosts, in which all of the service’s metrics are listed adjacent to each other.
Not all of the hosts have the same services, so some of the fields are simply empty:

image::views_matrix_view_1.png[]

The result at first looks very similar to that described earlier -- xref:joined_columns[Information for services in a host view].
There are a couple of significant differences however:

. The list of services is dynamic and has no fixed configuration.
. Here the hosts are the columns -- not the lines.

With the matrix you can do much more.
When you look at the view’s definition you can see how it is constructed:

* [.guihint]#Matrix# is specified in [.guihint]#Basic layout#.
* The host name ([.guihint]#Hosts: Hostname#) is specified as the only column in [.guihint]#Grouping#.
* In [.guihint]#Columns# the [.guihint]#Service description# and the [.guihint]#Service Perf-O-Meter# are specified.

The rule for the matrix layout is:

* The *Grouping columns* are used as headings for the vertical columns.
* The *first normal column* on the left provides the titles for the rows.
* All *further normal columns* are shown in the cells.

If, for example, you wish to display more information regarding the host, simply add more columns in the [.guihint]#Grouping# box.
Thus the table from above will look like this when you insert the [.guihint]#Host icons# and [.guihint]#Folder - just folder name# columns:

image::views_matrix_view_2.png[]

Further normal columns then land directly in the cells. The following example
shows (abbreviated) the matrix with the additional [.guihint]#Output of check plugin#
column:

image::views_matrix_view_3.png[]


=== Recognizing outliers

Why do some cells have a colored background?
This points you to values *lying outside the majority*.
This is actually not so meaningful for measured data,
but there are, for instance, users with a specially-constructed matrix who can tell at a glance if an incorrect contact group has been entered for certain hosts or services.

image::views_matrix_view_4.png[]


[#alarm_sounds]
== Alarm sounds

A view can sound an alarm tone over the browser if at least one problem appears in the table (a host that is not {UP}, or a service that is not {OK}).
This primitive type of alarm is, for example, interesting for control centers where there is always a list of problems on a screen that the operator doesn’t want to have to constantly stare at.

The alarm sounds are by default deactivated.
You can switch them on with the [.guihint]#Setup > General > Global settings > User interface > Enable sounds in views# global switch.
As (almost) always the search in the [.guihint]#Setup# menu helps here:

image::global_settings_enable_sound.png[]

Sounds will not be heard in all views, rather only in those for which alarm sounds have been activated in [.guihint]#View Properties#:

image::view_properties_sounds.png[]


[#embed_views]
== Embedding views in external websites

Since every view is accessible via a URL you can also embed these in other websites, for example, via an `&lt;iframe&gt;`.
A number of elements in a view could however make no sense or even be distracting in such a context.
In a situation like this you can attach a `display_options=...` variable to the URL, via which you can precisely control which component of the view should *not* be generated in HTML code.

*Important:* The {CMK} navigation is also usually rather undesirable when embedding.
So before you manually set options in a view, let the page be displayed without navigation and sidebar by turning off [.guihint]#Display > Show page navigation#.

Every component is coded with a letter and can accordingly be excluded using these.

The following letters have been defined:

[cols="10,~"]
|===
|Option |Effect

|`t` |Title bar (with heading, breadcrumbs, countdown symbol for page update), menu bar and actions bar are omitted.
|`b` |Menu items and action buttons that link to other views are omitted.
|`f` |Menu item [.guihint]#Display > Filter# and its corresponding icon:view_button_filters[] button are omitted.
|`c` |Menu [.guihint]#Commands# and its corresponding buttons are omitted.
|`o` |The options [.guihint]#Number of columns# and [.guihint]#Refresh interval# are omitted; otherwise callable via [.guihint]#Display > Modify display options#.
|`d` |Menu item [.guihint]#Display > Modify display options# is omitted
|`e` |Menu item [.guihint]#Display > Customize View# is omitted.
|`r` |The page refresh countdown icon in the title bar and auto-refresh JavaScript code are removed.
|`s` |The playing of xref:views#alarm_sounds[alarm sounds] for the {WARN} and {CRIT} service states is suppressed.
|`i` |Links to other views are omitted, e.g. the links in the [.guihint]#Service# column in service views.
|`m` |The target of links is by default the HTML `main` frame -- with this option links are opened in new tabs.
|`l` |Links in column headings are omitted.
|`w` |Limit and live status error messages.
|===

For example -- if you want to switch off all control elements and buttons and only display the actual table, a link on the `allhosts` view will look like this:

`/myserver/mysite/check_mk/view.py?view_name=allhosts&display_options=til`


== Adding your own icons and actions

In views of hosts and services you will also see a column for icons, and in this the icon:icon_menu[] action menu icon with which you can select host or service actions.
You can also add your own icons to views.
These can be used simply for visualization, or your own actions can be assigned to them.

For example, hosts with a graphic web interface can be quickly identified using such an individual icon and can also be controlled directly via a link.

The procedure for adding your own icons and actions is divided into three steps:

* Upload the icons.
* Define the icons/actions.
* Assign the icons to hosts/services.

Start with [.guihint]#Setup > General > Custom Icons# and upload a local file with a maximum size of 80 x 80 pixels.
The icon will now be in the system, but will not yet be in use.

image::views_manage_icons_upload.png[]

Next you will need to define the icon as an object that can be addressed via xref:glossar#rule[rules], and optionally, an associated action.
You can find the settings for this under [.guihint]#Setup > General > Global settings > User interface > Custom icons and actions#.
Create a new entry here using [.guihint]#Add new element#, and define [.guihint]#ID#, [.guihint]#Icon# and a [.guihint]#Title#.
The title will later be displayed as a tool tip directly on the icon via a mouse-over-effect, and is therefore indispensable for users.

image::views_global_settings_custom_icons_and_actions.png[]

Now it gets interesting with the [.guihint]#Action# option.
Action is equivalent to a URL, and for this you can make use of some variables such as `$HOSTNAME$` or `$SERVICEDESC$` (service description)
-- you can get further information from the inline help.
A valid action would be, for example:

`view.py?host=$HOSTNAME$&site=mysite&view_name=host`

This action simply calls the standard host view for the corresponding host on the site `mysite`.

With a check mark at [.guihint]#Show in column# you can then display the icon as an independent icon next to icon:icon_menu[],
otherwise your action will end up in this action menu.

In the final step, you now determine which hosts or services the new icon is to be displayed for -- specifying these using rules of course.
You can find the two rule sets, [.guihint]#Custom icons or actions for hosts in status GUI# and [.guihint]#Custom icons or actions for services in status GUI# in the
[.guihint]#Setup# menu under [.guihint]#Host monitoring rules# and [.guihint]#Service monitoring rules#.
The quickest way to find the two rules is to search the [.guihint]#Setup# menu.

Create a new rule in the desired folder and set at least two options in it.
First select the icon just created under [.guihint]#Custom icons or actions for hosts in status GUI#:

image::views_custom_icons_or_actions.png[]

Then set the filter in the [.guihint]#Conditions# box for the desired hosts/services.

image::views_custom_icons_or_actions_b.png[]

Finally, save and confirm the changes.

In host and service views you will now be able to see your new icon next to or in the action menu for the filtered hosts and services.

image::views_view_with_custom_icon.png[]
