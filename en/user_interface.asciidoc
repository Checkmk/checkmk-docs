include::global_attr.adoc[]
= The user interface
:revdate: 2021-07-08
:title: The user interface
:description: After the first login you land on the {CMK} start page. The most important elements are explained here: navigation bar, main page, side bar.

{related-start}
link:intro_welcome.html[Beginner's guide]
link:monitoring_basics.html[Basic principles of monitoring with Checkmk]
link:wato.html[Configuring Checkmk]
// link:graphing.html[Performance data and graphing]
{related-end}


== Introduction

{CMK}’s graphical user interface (GUI) has two functions:

* It displays the current status of all hosts, services and events in the *monitoring environment* .
* It is used in the *configuration environment* to _set up_ and to manage the monitoring environment.

For both of these functions {CMK} provides two views of the hosts and services -- and also two menus for getting started with both functions: the [.guihint]#Monitor# and the [.guihint]#Setup# menus.

The following image shows the {CMK} start page, which can be seen directly after logging in:

image::gui.png[alt="{CMK} start page."]

In this article, we will look at all of the elements you see on this start page -- working our way through the {CMK} user interface from left to right: from the navigation bar to the xref:main_page[main page] to the xref:sidebar[sidebar].

////
A feature of {CMK}’s interface is that it can simultaneously display and configure multiple monitoring instances, and then perform like a large system.
////


[#navigation_bar]
== The Navigation bar

include::include_navigation_bar.asciidoc[]


[#monitor_menu]
=== Monitor menu

include::include_monitor_menu.asciidoc[]


[#search_monitor]
=== Searching in the monitoring environment

include::include_searching_in_the_monitoring_environment.asciidoc[]

To search for hosts and services, you can use a number of predefined filters and combine them, for example, to search for specific services on specific hosts. 
A search coded with `h:^myhost s:myservice` will find all services whose service description contains 'myservice' and run on hosts whose name begins with 'myhost'.

You can also use the filters multiple times and in combination. 
Multiple instances of a filter are linked with *OR*, different filters with *AND*. 
Exception: Multiple host tag filters (`tg:`) are always linked with *AND*.

The following filters are available:

[cols="20,10,~"]
|===
|Filter |Command |Examples 

|Host name |`h:` |`h: oracle`
|Service description |`s:` |`s: cpu h: myhost`
|Host group |`hg:` |`hg: server hg: database`
|Service group |`sg:` |`sg: testing s: myservice`
|Host address |`ad:` |`ad: 192.168.200. s: test`
|Host alias |`al:` |`al: database al: _db`
|Host-Merkmal |`tg:` |`tg: agent:cmk-agent` +
`tg: cmk-agent tg: prod`
|Host label |`hl:` |`hl: os:windows`
|Service label |`sl:` |`sl: critical_interface:yes`
|===

In combination with regular expressions, this results in precise, complex filter possibilities, such as:

`h: ^My.\*Host$ s: ^my.*(\d|test)$ tg: mytag tg: mytest`

This will find: 
Services that begin with `my` and end with a _digit_ or `test`, run on hosts that begin with `my` and end with `host`, and finally have the two host tags `mytag` and `mytest`.

You can use regular expressions for any single filter -- with the following exceptions: 
No regular expressions are allowed for host and service labels, i.e. the label must be entered in the syntax `key:value` exactly as it is called, e.g. `os:windows`. 
As soon as you set group or host tag filters in addition to filters for name, description, address or alias, the former must be specified explicitly, e.g. `hg: webserver s: apache`. 
Which is *not* possible: `hg: Web.* s: apache`. 
Background: The different filters address different sources with different data structures and functions. 
Of course, you can search out the concrete host groups using patterns (`hg: .*server`) and then use the result in the original query.

In the background, xref:livestatus#[livestatus] queries are created from these search queries. 
For example, `h: localhost s: mem s: cpu h:switch-intern` would become:

[{shell}]
----
{c-omd} lq
GET services
Cache: reload
Columns: service_description host_name hostgroups servicegroups
Filter: host_name ~~ switch-intern
Filter: host_name ~~ localhost
Or: 2
Filter: service_description ~~ cpu
Filter: service_description ~~ mem
Or: 2
And: 2
Limit: 80

CPU utilization;localhost;;
Memory;localhost;;
CPU load;localhost;;
CPU utilization;myhost;;
Memory;myhost;;
CPU load;myhost;;

{c-omd} 
----

You also see the value `Limit: 80` in the livestatus query above. 
This means that the result list displays a maximum of 80 hits. 
However, you can change this value under [.guihint]#Setup > Global Settings > User Interface > Number of elements to show in Quicksearch#.

If you do not set a filter at all when searching, by default the system searches first in the entries of the [.guihint]#Monitor# menu and then passes through the filters for host name, host alias, host address and service description -- in that order. 
You can adjust the filters and their order in [.guihint]#Setup > Global Settings > User Interface > Quicksearch search order#.


[#customize_menu]
=== Customize menu

You can customize and extend elements of the graphical user interface that are useful for monitoring in the [.guihint]#Customize# menu:

image::customize_menu_more.png[alt="Customize menu in the navigation bar.",width=65%]

Here you have access to, among other things 
xref:bookmarks[bookmarks],
xref:views#[views],
xref:dashboards#[dashboards],
xref:graphing#[graphs],
xref:forecast_graphs#[forecast graphs],
xref:reporting#[reports] and
xref:sla#[extended availabilities (SLA)].

When you call up one of the menu items, a list of currently existing objects is displayed. 
In some lists you will find _built-in_ objects delivered with {CMK} that you can edit or use as templates for your own objects.


[#setup_menu]
=== Setup menu

Your entry point to the xref:wato#[configuration of {CMK}] is the [.guihint]#Setup# menu, which you can open via the navigation bar:

image::setup_menu.png[alt="Setup menu in the navigation bar."]

In this menu you will find the tools with which you can set up and configure {CMK}. 
The menu is divided into _topics_. 
Below each topic you will find the menu items. 
For [.guihint]#Hosts#, [.guihint]#Services# and [.guihint]#Agents# you get access to different categories of rule sets. 
The concept of rule-based configuration is central to {CMK} and very powerful for customising xref:wato_rules#[host and service parameters].

*Note:* You can also load the contents of the [.guihint]#Setup# menu into the sidebar with the snapin [.guihint]#Quick setup# snapin.


[#search_setup]
=== Searching in the configuration environment

include::include_searching_in_the_configuration_environment.asciidoc[]


[#user_menu]
=== User menu

In the [.guihint]#User# menu you can change personal settings that are valid for your user account:

image::user_menu.png[alt="User menu in the navigation bar.",width=65%]

Frequently-used settings can be toggled by clicking directly in the [.guihint]#User# menu ([.guihint]#Quick toggle#), some by calling up a specific page, e.g. to change the password. 
Most settings, however, can be accessed and changed centrally via the [.guihint]#Edit profile# page. 

[cols=2]
|===
|Setting |Note 

|[.guihint]#Change password# |You must enter the existing password once and the new password twice. Password requirements for local accounts can be set globally: [.guihint]#Setup > Global Settings > Password policy for local accounts#
|[.guihint]#Notification rules# |Rules for xref:notifications#personal[user-defined notifications]. The entry is only displayed if [.guihint]#Setup > Global Settings > Rule based notifications# is switched on (which is the default).
|[.guihint]#Language# of the user interface |
|[.guihint]#Visibility of Hosts/Services# |Show all hosts and services, or only those to which you are assigned as a contact.
|[.guihint]#Disable Notifications# |Switch off all notifications for a selectable period of time
|[.guihint]#Start URL to display in main frame# |Set the URL of the start page. If a xref:dashboards[Dashboard] is displayed on the main page, you can alternatively make this the start page via the [.guihint]#Dashboard# menu.
|[.guihint]#User interface theme# |Switching between [.guihint]#Dark# and [.guihint]#Light# is possible via [.guihint]#Quick toggle# directly in the [.guihint]#User# menu.
|[.guihint]#Sidebar position# |Here, too, you can switch between [.guihint]#Right# and [.guihint]#Left# with [.guihint]#Quick toggle#.
|[.guihint]#Navigation bar icons# |Show icons with title, or only icons
|[.guihint]#Mega menu icons# |Show (green) icons by the topic or (coloured) icons by each menu item
|[.guihint]#Show more / Show less# |By default xref:intro_gui#show_less_more[show less or show more] or always show all
|[.guihint]#Two-factor authentication# |Activation of increased security through xref:wato_user#2fa[two-factor authentication] (possible only directly in the user menu).
|[.guihint]#Logout# |possible only directly in the user menu
|===

*Note:* For some settings there are default values that can be changed globally for all users via [.guihint]#Setup > Global Settings#, mostly under the [.guihint]#User Interface# topic. 
In addition, the xref:wato_user#roles[role with its permissions] assigned to your user account determines whether certain settings are visible and can be changed.


[#main_page]
== Main page

What you will see on the main page depends on where you are in Checkmk. 
After logging in, you will first see the standard or main dashboard.

The content of the main page changes depending on your selection in the navigation bar and also in the sidebar. 
For example, if you select [.guihint]#Hosts > All hosts# in the [.guihint]#Monitor# menu, the list of hosts will be displayed on the main page:

image::mainpage_all_hosts.png[alt="Main page with list of all hosts."]

Regardless of which page is currently displayed, you will usually find the following elements on the main page:

* 'Breadcrumb' path: 
Below the page title you see the path to the current page -- always starting with the name of the menu from the navigation bar. 
These breadcrumbs prevent you from getting lost in the user interface. 
This way you know where you are in {CMK} even after complex actions -- in this example, on the [.guihint]#All hosts# page in the monitoring.

* Menu bar: 
Below the breadcrumb path, the menu bar is displayed, which summarises the possible actions on this page in menus and menu entries. 
The menus are always context-specific in {CMK}, i.e. you only find menu entries for actions applicable to the current page.

[#inline_help]
* Context-sensitive help (_inline help_): 
You can use the [.guihint]#Help# menu to show help texts on the current page with [.guihint]#Help > Show inline help#, which is very helpful on pages that contain many parameters. 
The selected mode also remains active for other pages that you call up until you deactivate it again with [.guihint]#Hide inline help#.

* Action bar: 
Below the menu bar you will find the action bar, in which the most important actions from the menus are offered as buttons for direct clicking. 
You can hide the action bar with the icon:button_hide_toolbar[alt="Icon for hiding the action bar."] button to the right of the [.guihint]#Help# menu and show it again with icon:button_show_toolbar[alt="Icon for showing the action bar."]. 
When the action bar is hidden, icons for the hidden buttons are added to the right of the [.guihint]#Help# menu.

* Countdown for page update: 
In the monitoring environment, the update interval for the page is displayed in seconds at the top right of the page and the remaining time to the next update is visualised on the surrounding circle line.
+
By the way, you can change the refresh interval in the menu [.guihint]#Display > Modify display options#.

* Number of changes not yet activated: 
In the configuration environment, the number of changes not yet activated is displayed at the top right of the page instead of the countdown. 
A change made in the configuration environment is only transferred to the monitoring environment once it has been activated.

After selecting one of the entries in the [.guihint]#Monitor# menu, the main page will usually show you the requested information either as a xref:dashboards[dashboard] or as a xref:views[view], which we will discuss in more detail in the following chapters.


[#dashboards]
=== Dashboards

include::include_dashboards.asciidoc[]


[#views]
=== Views

include::include_views.asciidoc[]

*Note:* The views have many more possibilities -- both for customisation and for creating your own views. 
You can find out how to do this in the xref:views#[article on views].


[#sidebar]
== Sidebar

include::include_sidebar.asciidoc[]


[#overview]
=== Overview

include::include_overview_snapin.asciidoc[]


[#bookmarks]
=== Bookmarks

include::include_bookmarks_snapin.asciidoc[]


[#bookmarks_edit]
==== Editing bookmarks

{CMK} manages bookmarks in *lists*. 
Each list contains one or more bookmarks. 
In addition, each bookmark is assigned a _topic_.
All bookmarks on the same topic are collected in the [.guihint]#Bookmarks# snapin.

Why so complicated? 
So that you can make a list of bookmarks visible to other users. 
You can then use the topics to define how the bookmarks will be presented to other users in the [.guihint]#Bookmarks# snapin.
In this way, for your organisation you can build a navigation structure for selected {CMK} pages and even to external pages. 
Every user can nonetheless still create and manage their own bookmarks.

With the [.guihint]#Bookmarks# snapin you can access the management of the bookmark lists:

image::user_interface_bookmark_lists.png[alt="Bookmark lists."]

You can now either edit an existing list with icon:icon_edit[alt="Icon for editing a list entry."] -- or create a new one with [.guihint]#New list#:

image::user_interface_new_bookmark_list_general_properties.png[alt="Dialogue with properties when creating a bookmark list."]

In the [.guihint]#General Properties# box you enter the internal ID and the title of the list -- whereby the [.guihint]#Title# is not important for the display of the bookmarks, it is only used for management. 
Via [.guihint]#Make this Bookmark list available for other users# you can make the bookmarks in this list visible to other users. 
For this, however, your current user account needs a permission, which by default is held only by the `admin` xref:wato_user#roles[role].

*Note:* The principle of visibility is used by {CMK} in many locations, and is explained in more detail in the xref:views#edit[Views] article.

In the [.guihint]#Bookmarks# box you can now define the new bookmarks with a title and URL:

image::user_interface_new_bookmark_list_bookmarks.png[alt="Dialogue for setting the properties for the new bookmarks."]

Where the bookmarks are sorted is decided by the [.guihint]#Default Topic# in the list, or respectively by a bookmark’s [.guihint]#Individual Topic# -- if this has been set.
By the way, you can also give bookmarks their own icons.
Finally, save the new list with [.guihint]#Save & go to list#.

The new list created in this example now supplements the personal bookmarks under [.guihint]#My Bookmarks# for all users with three bookmarks on two new topics:

image::user_interface_bookmarks.png[alt="Bookmarks snapin with the three newly created bookmarks.",width=50%]


[#master_control]
=== Master control

include::include_master_control_snapin.asciidoc[]
