include::global_attr.adoc[]
= Monitoring sites
:revdate: draft
:title: Monitoring sites - Managing sites with {CMK}
:description: {CMK} enables the administration of any number of sites and software versions on a server.

{related-start}
xref:update#[Updates and Upgrades]
xref:install_packages#[Basic information on the installation of {CMK}]
xref:cmk_versions#[{CMK} versions]
{related-end}


== OMD - The Open Monitoring Distribution

The {CMK} monitoring system uses the _Open Monitoring Distribution_ (OMD).
Founded by Mathias Kettner, OMD is an Open Source project which revolves around the convenient and flexible installation of a monitoring solution made up of various components.
The abreviation OMD might already be familiar to you as part of the RPM/DEB-Package installation.

An OMD-based installation is distinguished by a number of characteristics:

* the ability to run _multiple_ monitoring sites in parallel
* the ability to operate sites with _differing versions_ of the monitoring software
* an intelligent and convenient mechanism for updating the software - to a higher and lower version,
* an intelligent and easy to operate upgrade/downgrade-mechanism
* uniform file paths -- regardless of which Linux-platform is installed
* a clear separation of _data_ and _software_
* a very simple installation -- with no dependence on third-party software
* a perfect preconfiguration of all components


[#omd_create]
== Creating sites

Perhaps the best thing about OMD is that it can manage any number of _monitoring sites_ on one server.
Each site is a self-contained monitoring system which runs independently of the others.

A site always has a distinct name, specified at its creation.
This name is the same as that of the Linux user which is created at the same time.
The site's name conforms to the same conventions as user names under Linux.

The creation is performed with the `omd create` command.
This must be executed as `root`:

[{shell}]
----
{c-root} omd create mysite
Adding /opt/omd/sites/mysite/tmp to /etc/fstab.
Creating temporary filesystem /omd/sites/mysite/tmp...[green]#OK#
Updating core configuration...
Generating configuration for core (type nagios)...
Precompiling host checks...[green]#OK#
Executing post-create script "01_create-sample-config.py"...[green]#OK#
Restarting Apache...[green]#OK#
Created new site mysite with version 2.1.0p1.cre.

  The site can be started with *omd start mysite*.
  The default web UI is available at *http://linux/mysite/*

  The admin user for the web applications is *cmkadmin* with password: *YzxfoFZh*
  For command line administration of the site, log in with *'omd su mysite'*.
  After logging in, you can change the password for cmkadmin with *'htpasswd etc/htpasswd cmkadmin'*.
----

When creating the `cmkadmin` user a password will be randomly-generated and issued.

What takes place during the creation of a site named `mysite`?

* An operating system user `mysite`, and a group `mysite` will be created.
* A new home directory `/omd/sites/mysite` will be created and assigned.
This directory is also called site directory.
* This home directory will be populated with configuration files and sub-directories.
* A basic configuration will be created for the new site.

*Important:* Avoid using a name which is already allocated in another service.
A duplicated allocation can cause problems.


=== User and group IDs

In some cases it is also desirable to specify the user/group ID of the new user to be created.
This is performed with the `-u` and `-g` options, e.g.:

[{shell}]
----
{c-root} omd create -u 6100 -g 180 mysite
----

An overview of the further options can be shown with `omd create --help`.
The most important options are:

[cols="10,~"]
|===
|`-u UID` |The new user will be created with the User-ID `UID`.
|`-g GID` |The new user's group will be created with the Group-ID `GID.
|`--reuse` |OMD assumes that the new user already exists, and does not create it.
|`-t SIZE` |The new site's temporary file system will be created with the `SIZE` value. `SIZE` has the suffix `M` (Megabyte), `G` (Gigabyte) or `%` (percentage of RAM). Example: `-t 4G`
|===


[#site_user]
== Site user

The further administration of the site is always best performed with the rights of the newly-created site user.
Switching users is done with `su`:

[{shell}]
----
{c-root} su - mysite
----

Nnote that the ‘minus sign’ following the `su` is essential.
It ensures that switching users processes _all_ of the operations that take place during a normal login.
In particular, all environment variables will be correctly set, and your session will start as `mysite` in the `/omd/sites/mysite` site directory.

Alternatively you can also use

[{shell}]
----
{c-root} omd su mysite
----

which will also open a login shell.

As a site user you can execute all important operations affecting this site.
Entering the site name then of course becomes unnecessary when issuing the relevant `omd`-commands.


[#omd_start_stop]
== Starting and stopping sites

Your site is now ready to be started -- which can be done as `root` with `omd start mysite`.
It is fundamentally better though to work with the site as the site user:

[{shell}]
----
{c-omd} omd start
Creating temporary filesystem /omd/sites/mysite/tmp...[green]#OK#
Starting agent-receiver...OK
Starting mkeventd...OK
Starting rrdcached...OK
Starting npcd...OK
Starting nagios...OK
Starting apache...OK
Starting redis...OK
Initializing Crontab...OK
----

Unsurprisingly, stopping goes with `omd stop`:

[{shell}]
----
{c-omd} omd stop
Removing Crontab...OK
Stopping redis...killing 484382...OK
Stopping apache...killing 484371...OK
Stopping nagios...OK
Stopping npcd...OK
Stopping rrdcached...waiting for termination...OK
Stopping mkeventd...killing 484279...OK
Stopping agent-receiver...killing 484267...OK
Stopping 1 remaining site processes...[green]#OK#
----

Starting and stopping a site is nothing other than starting or stopping a collection of services.
These can also be individually managed by specifying the name of the service, e.g.:

[{shell}]
----
{c-omd} omd start apache
Temporary filesystem already mounted
Starting apache...OK
----

The names of the various services can be found in the `~/etc/init.d` directory.
Note the tilde at the beginning of the path name
-- this represents the home directory for the site user (the site directory).
`~/etc/init.d` and `/etc/init.d` are different directories.

Alongside `start` and `stop`, there are also the `omd` commands `restart`, `reload` and `status`.
Reloading Apache is, for example, always necessary following a manual change to the Apache configuration:

[{shell}]
----
{c-omd} omd reload apache
Reloading apache
----

Note that this does not apply to the global Linux server's Apache process, but rather the site's own dedicated Apache process.

In order to be able to maintain an overview of state of the site following all of the starts and stops, simply use `omd status`:

[{shell}]
----
{c-omd} omd status
agent-receiver: [red]#stopped#
mkeventd:       [red]#stopped#
rrdcached:      [red]#stopped#
npcd:           [red]#stopped#
nagios:         [red]#stopped#
apache:         [green]#running#
redis:          [red]#stopped#
crontab:        [red]#stopped#
-----------------------
Overall state:  [yellow]#partially running#
----


[#omd_rm]
== Deleting sites

Deleting a site is as easy as creating one -- with the `omd rm` command as `root`.
The site will first be automatically stopped.

[{shell}]
----
{c-root} omd rm mysite
PLEASE NOTE: This action removes all configuration files
             and variable data of the site.

In detail the following steps will be done:
- Stop all processes of the site
- Unmount tmpfs of the site
- Remove tmpfs of the site from fstab
- Remove the system user <SITENAME>
- Remove the system group <SITENAME>
- Remove the site home directory
- Restart the system wide apache daemon
 (yes/NO): *yes*
----

It goes without saying that this action also *deletes all of the site's data!*

If you are no fan of confirmation prompts, or wish to perform the deletion as part of a script, the deletion can be forced with the `-f` option.
*Attention:* Here the `-f` must be placed *before* the `rm`:

[{shell}]
----
{c-root} omd -f rm mysite
----


[#omd_config]
== Configuring the components

As already mentioned, OMD integrates multiple software components into a monitoring system.
In so doing, some components are optional, and for some there are alternatives or different operational settings.
All of this can be comfortably configured with `omd config` command.
There are also interactive and scripting modes.


[#interactive_mode]
=== Interactive configuration

You call the interactive mode as site user simply like this: 

[{shell}]
----
{c-omd} omd config
----

.In the `omd config` menu you navigate with the cursor and enter keys
image::omd_basics_omd_config_main.png[alt="Main menu of `omd config`.",width=300]

As soon as you change a setting while the site is running, OMD will inform you that your site must be stopped first and does this as needed:

.The configuration can only be changed if the site is not running
image::omd_basics_omd_config_cannotchange.png[alt="Hint when changing a setting while the site is running.",width=300]

Don't forget to restart the site following the completion of the work.
`omd config` will _not_ do this for you automatically.


[#script_mode]
=== Configuration via script mode

Those who don't like the interactive mode, or prefer to work with scripts, can set the individual settings as variables via command line.
For this there is the `omd config set` command.
The following example sets the `AUTOSTART` variable to `off`:

[{shell}]
----
{c-omd} omd config set AUTOSTART off
----

This can be also performed as `root` if the site's name is added as an argument:

[{shell}]
----
{c-root} omd config mysite set AUTOSTART off
----

The current assignment of all variables can be viewed using `omd config show`:

[{shell}]
----
{c-omd} omd config show
ADMIN_MAIL: 
AGENT_RECEIVER: on
AGENT_RECEIVER_PORT: 8005
APACHE_MODE: own
APACHE_TCP_ADDR: 127.0.0.1
APACHE_TCP_PORT: 5008
AUTOSTART: off
[...]
----

The command output above shows only the first entries.


=== Commonly used settings

There are numerous settings in `omd config`.
The most important are:

[cols="15,15,~",options="header"]
|===
|Variable |Default |Meaning 
|`AUTOSTART` |on` |Set this to `off` if you want to prevent an automatic starting of the site when the computer is started. This is primarily of interest for test installations that should not normally start by themselves.
|`CORE` |`nagios` ({RE}), `cmc` ({EE}) |Selection of the monitoring core. In the {CEE} there is the xref:cmc#[{CMK} Micro Core (CMC)] and the classic Nagios core. In the {CRE} there is only `nagios` as monitoring core.
|`MKEVENTD` |`on` |Activates the xref:glossar#ec[Event Console] with which the syslog messages, SNMP traps and other events can be processed.
|`LIVESTATUS_TCP` |off` |Allows external access to the status data for this site. This can be used to set up a xref:glossary#distributed_monitoring[distributed monitoring]. The status of this (remote) site can be incorporated into the central site. Enable this setting only in a secured network.
|===

*Note:* You can also see these variables under the same name in interactive mode.





[#omd_cp_mv]
== Copying and renaming instances

It is sometimes useful to create a copy of an instance, for testing purposes
or for the preparation of an update. Of course one could simply copy the
`/omd/sites/alt` directory to `/omd/sites/neu`.
That will however not work because:

* Many configuration files include the site's name.
* In addition, at numerous locations there are absolute data paths with the `/omd/sites/alt` prefix.
* Not least, a user and a group with the site's name to which everything belongs, must be available.

To simplify the copying of an instance, there is the `omd cp` command,
which takes all of these factors into consideration. Its use is very simple.
As argument simply enter the name of the existing site followed by the name
of the new one. For example:

[{shell}]
----
{c-root} omd cp mysite_old mysite_new
----

The copy can only work if:

* The site has been stopped.
* No processes that belong to the site user are running.

The above points ensure that at the time of the copy the site is in a
consistent state and cannot change during the action.


=== Migration of a configuration

OMD could originally only handle files that were actually created during an initial `omd create` and which contained the site ID (`$OMD_SITE`), which could be determined with:

[{shell}]
----
{c-omd} grep -r $OMD_SITE etc
----

Previously, OMD could not do anything with configuration files that were created later via work with the {CMK} site (i.e. the configurations of hosts that had been added at a later date, for example).
From a purely technical point of view, this behavior corresponds exactly to the scope of OMD.
However, the expectation of most users is that an `omd cp` creates a completely new site that can continue to be used productively -- including its own monitoring configuration.
From {CMK} version {v21} OMD can also customize the most important elements of the {CMK} configuration.
By the way, you don't have to do anything, the whole migration described below takes place automatically.

A typical example for this: In a host's properties, you can use the [.guihint]#Monitored on site# attribute to manually specify which site this host should be monitored on, such as `mysite_alt`.
Following an `omd cp mysite_alt mysite_new`, this host attribute will change to `mysite_new`.
(Previously, this procedure would have resulted in the entry `Unknown site (mysite_alt)`).

The actual technical implementation of this migration is as follows:
OMD detects changes to the site ID and then executes the `post-rename-site -v -o mysite_new` command.
The individual migration steps are subsequently processed completely automatically via the so-called `rename action plugins`, which you can find in the Git repository at link:https://github.com/tribe29/checkmk/tree/master/cmk/post_rename_site/plugins/actions[cmk/post_rename_site/plugins/actions^].

Migration also includes informing you about anything that *cannot* be migrated automatically.

Let's take a concrete example: you are using distributed monitoring and rename both the central site and a remote site.

*Central site:* The `sites.py` plug-in detects that this is a central site and updates, among other things, the value [.guihint]#URL prefix,# which can be found in the connection settings for the local site under [.guihint]#Setup > General > Distributed Monitoring#.

*Remote site:* The `warn_remote_site.py` plug-in recognizes that it is a remote site and accordingly indicates that the central site must be checked and manually adapted if necessary.
This in turn means that in the distributed monitoring settings on the central site, the remote site's new name must be entered in the connection settings to the remote, renamed site -- OMD of course cannot do this from a remote computer.

OMD itself informs you in detail about the whole procedure in the terminal.
Here you can see an example of the migration messages of the `omd cp` output when renaming a central site -- separated into success and warning messages.
The processed `rename action plugins` are numbered individually.
First the output from the automatically performed migration tasks (abbreviated here for clarity):

[{shell}]
----
...
Executing post-cp script "01_cmk-post-rename-site"...
-|  1/6 Distributed monitoring configuration...
-|  2/6 Hosts and folders...
-|  3/6 Update core config...
...
----

The second part of the output now contains tips regarding settings you *may* need to configure manually (here heavily abbreviated):

[{shell}]
----
...
-|  4/6 Warn about renamed remote site...
-|  5/6 Warn about new network ports...
-|  6/6 Warn about configurations to review...
...
----

The [.guihint]#Warn about configurations to review...# item includes general notes on individual items that will generally need to be reviewed manually during a migration, such as hardcoded filters for views:

[{shell}]
----
...
-| Parts of the site configuration cannot be migrated automatically. The following
-| parts of the configuration may have to be reviewed and adjusted manually:
-|
-| - Custom bookmarks (in users bookmark lists)
-| - Hard coded site filters in custom dashboards, views, reports
-| - Path in rrdcached journal files
-| - NagVis maps or custom NagVis backend settings
-| - Notification rule "site" conditions
-| - Event Console rule "site" conditions
-| - "site" field in "Agent updater (Linux, Windows, Solaris)" rules (CEE/CME only)
-| - Alert handler rule "site" conditions (CEE/CME only)
-|
-| Done
----

Here is an overview of the six currently active plug-ins -- the order here corresponds to the numbering in the above output:

[cols="35,~",options="header"]
|===
|Plug-in |Function
|`sites.py` |Changes the site ID in various configuration files.
|`hosts_and_folders.py` |Changes the site attribute of host and folder properties.
|`update_core_config.py` |Performs an update of the core configuration (`cmk -U`).
|`warn_remote_site.py` |Warns when renaming a remote site.
|`warn_changed_ports.py` |Notices of problems with multiple ports.
|`warn_about_not_migrated_configs.py` |General tips for elements that should be checked manually.
|===


=== Limiting data volume

If a large number of hosts are being monitored, the volume of data to be copied
can be quite substantial. The greater part of this is the performance data which
is stored in RRD-files. But the log files containing historic events can also
produce larger data volumes. If the history is not required (for example,
if only testing is being performed), these can be omitted from the copy.
In such cases the following options can be added to `omd cp`:

[cols=2]
|===

|--no-rrds |The copy will exclude performance data (RRDs)
|--no-logs |All log files and remaining historic data will be excluded
|-N |This is an abreviation of `--no-rrds --nologs `
|===


The order of the options is important:

[{shell}]
----
{c-root} omd cp --no-rrds mysite_old mysite_new
----


[#omd_mv]
=== Renaming instances

Renaming an instance is performed with the `omd mv` command.
This functions similarly to the copy command and has the same prerequisites.
The options to restrict the data volume are not available since the data is only
being moved to another directory and is not being duplicated. For example:

[{shell}]
----
{c-root} omd mv mysite_old mysite_new
----


=== Further options for cp and mv

Both operations will create new Linux-users in exactly the same way as
`create` does, thus some of the options for `omd create` are also
available for use:

[cols=2]
|===

|-u UID |The new user will be created with the User-ID UID.
|-g GID |The new user's group will be created with the Group-ID GID.
|--reuse |OMD assumes that the new user already exists and does not create it.
|-t SIZE |The new site's `tmpfs` will be created with the ‘SIZE’ parameter. SIZE has the suffix `M` (Megabyte), `G` (Gigabyte) or `%` (percentage of RAM). Example: `-t 4G`
|===



[#omd_diff]
== Showing changes with omd diff

When creating a new {CMK}-instance the `omd create` command populates
the `etc` directory with numerous predefined configuration files.
A number of directories will also be created under `var`
and `local`.

Now it is probably the case that in the course of time a number of the files
will have been customized. When after a time you wish to determine which files
are no longer in the condition as originally supplied, the `omd diff`
command can provide the answer. Amongst other things, this is useful before an
xref:update#[update of {CMK}], since your changes could conflict with changes in
the default files.

In a request without additional arguments, all changed files will be listed:

[{shell}]
----
{c-omd} omd diff
 [green]#pass:[*]# Deleted var/log/nagios.log
 [green]#pass:[*]# Changed content var/check_mk/wato/auth/auth.php
 [green]#pass:[*]# Changed content etc/htpasswd
 [yellow]#!# Changed permissions etc/htpasswd
 [green]#pass:[*]# Changed content etc/diskspace.conf
 [green]#pass:[*]# Changed content etc/auth.secret
 [green]#pass:[*]# Changed content etc/apache/apache.conf
----

You can also enter a query for a specific directory:

[{shell}]
----
{c-omd} omd diff etc/apache
 [green]#pass:[*]# Changed content etc/apache/apache.conf
----

If you wish to see the changes in detail, simply enter the complete file name:

[{shell}]
----
{c-omd} omd diff etc/apache/apache.conf
[red]#--- /dev/fd/63  2017-01-24 09:14:46.248968199 +0100#
[green]#+++ /omd/sites/mysite/etc/apache/apache.conf    2017-01-24 09:12:37.705355164 +0100#
@@ -66,8 +66,8 @@
 StartServers         1
 MinSpareServers      1
 MaxSpareServers      5
[red]#-ServerLimit          128#
[red]#-MaxClients           128#
[green]#+ServerLimit          64#
[green]#+MaxClients           64#
 MaxRequestsPerChild  4000

 ###############################################################################
----


[#omd_backup_restore]
== Backing-up and restoring instances

=== Backing-up instances with omd backup

The site management in {CMK} has a built-in mechanism for backing up and
restoring {CMK}-instances. The `omd backup` and `omd restore`
commands are the basics for packing all of an instance's data into a
tar archive, and respectively, extracting that data for a restore.

From Version {v14} {CMK} additionally uses the
[.guihint]#Backup# WATO-module which makes a backup and restore possible without the
command line, and which also enables the setting-up of regular backup jobs.

Backing up an instance with `omd backup` does not require
`root`-permissions. An instance user can perform this.
Simply enter as an argument the name for the backup file to be created:

[{shell}]
----
{c-omd} omd backup /tmp/mysite.tar.gz
----

Please note however:

* The created file type is a gzip-compressed tar archive. Therefore use `.tar.gz` or `.tgz` as the file extension.
* Do *not* store the backup in the instance directory, since this will of course be completely backed up – thus every subsequent backup will contain a copy of ALL of its predecessors!

If the backup's target directory is not writable for an instance user,
the backup can otherwise be performed as a `root`-user.
In this case an additional argument is always required specifying the name
of the instance to be backed up:

[{shell}]
----
{c-root} omd backup mysite /var/backups/mysite.tar.gz
----

The backup contains all of the instance's data -- except for the volatile data
under `tmp/`. With the `tar tzf` command one can easily have a
look at the file's contents:

[{shell}]
----
{c-omd} tar tvzf /tmp/mysite.tar.gz  | less
lrwxrwxrwx mysite/mysite     0 2017-01-24 09:02 mysite/version -> ../../versions/2017.01.16.cee
drwxr-xr-x mysite/mysite     0 2017-01-24 09:12 mysite/
drwxr-xr-x mysite/mysite     0 2017-01-24 09:02 mysite/local/
drwxr-xr-x mysite/mysite     0 2017-01-24 09:02 mysite/local/share/
drwxr-xr-x mysite/mysite     0 2017-01-24 09:02 mysite/local/share/nagvis/
drwxr-xr-x mysite/mysite     0 2017-01-24 09:02 mysite/local/share/nagvis/htdocs/
drwxr-xr-x mysite/mysite     0 2017-01-24 09:02 mysite/local/share/nagvis/htdocs/userfiles/
drwxr-xr-x mysite/mysite     0 2017-01-24 09:02 mysite/local/share/nagvis/htdocs/userfiles/styles/
drwxr-xr-x mysite/mysite     0 2017-01-24 09:02 mysite/local/share/nagvis/htdocs/userfiles/scripts/
drwxr-xr-x mysite/mysite     0 2017-01-24 09:02 mysite/local/share/nagvis/htdocs/userfiles/templates/
drwxr-xr-x mysite/mysite     0 2017-01-24 09:02 mysite/local/share/nagvis/htdocs/userfiles/gadgets/
----


=== Backup without history

The lion's share of an instance’s data is the xref:graphing#[performance data]
retained in the RRDs. The monitoring history can also be very large. If neither
of these are absolutely required, with the following options the history data
can be omitted, thus making the backup smaller and faster running.
The options must be coded after the word `‘backup’`:

[cols=2]
|===

|--no-rrds |Omits backing up the RRD-databases (performance data)
|--no-logs |Omits the monitoring history stored in the log files
|-N |An abreviation of `--no-rrds` `--no-logs`
|===


Example:

[{shell}]
----
{c-omd} omd backup -N /tmp/mysite.tar.gz
----


=== Backing up a running instance

A backup does not require the instance to be stopped, and therefore can be
executed while the system is running. In order to ensure a consistent condition
of the xref:graphing#rrds[RRDs] used for recording the xref:graphing#[performance data],
the `omd backup` command automatically alters the Round-Robin-Cache
to a mode with which the running updates are written only to the journal,
and no longer to the RRDs. The journal files are the last to be backed up --
thus it can be achieved that as much as possible of the performance data that
has been generated during the backup is also included in the backup.


=== Restore

The restoring of a backup is as simple as the backup itself.
The `omd restore` command restores an instance from a backup.
This is even possible for a user. The instance must be stopped for this
procedure. The instance will not be newly-generated (which would require
`root`-permissions), rather it will be completely emptied
and then refilled:

[{shell}]
----
{c-omd} omd stop
{c-omd} omd restore /tmp/mysite.tar.gz
----

Following the restore the instance can be restarted:

[{shell}]
----
{c-omd} omd start
----

A restore can also be performed by a `root`-user. If an instance with the
same name already exists, this must first be deleted. This can be performed
either with an `omd rm`, or by simply including
the `--reuse` option.
A `--kill` additionally ensures that the existing instance is first
stopped. It is not necessary to use the instance's name with
the `restore`, since this is contained in the backup:

[{shell}]
----
{c-root} omd restore --reuse --kill /var/backup/mysite.tar.gz
{c-root} omd start mysite
----

When operating as `root`, you can restore the instance with a different
name from that in the backup. Include the desired alternative name as an
argument following the `restore` command:

[{shell}]
----
{c-root} omd restore mysite2 /var/backup/mysite.tar.gz
Restoring site mysite2 from /tmp/mysite.tar.gz...
 [green]#pass:[*]# Converted      ./.modulebuildrc
 [green]#pass:[*]# Converted      ./.profile
 [green]#pass:[*]# Converted      .pip/pip.conf
 [green]#pass:[*]# Converted      etc/logrotate.conf
----

The long list of conversions found here has the same function as for the
xref:omd_mv[renaming] of instances described earlier:
The instance's name is included in numerous configuration files,
and with this these occurrences will be replaced automatically by the new name.


[#ssh_omd_backup_restore]
=== Live migration of instances with backup & restore

The `omd backup` and `omd restore` commands can -- in the good old
Unix tradition -- instead of files, also work with the standard input/output.
Instead of a data path for the tar file, simply enter a hyphen (`-`).

In this way a pipe can be constructed and the data ‘streamed’ directly to
another computer without requiring intermediate files.
The larger the backup, the more advantageous this will be since no temporary
space in the backed up server's file system will be needed.

The following command backs up an instance to another computer using SSH:

[{shell}]
----
{c-root} omd backup mysite - | ssh user@otherserver "cat > /var/backup/mysite.tar.gz"
----

If you want to reverse the SSH-access -- by which you prefer to log in TO the
{CMK}-instance FROM the backup server -- that is also possible, as shown in the
following example.
For this, first an SSH-Login as an instance user must be permitted:

[{shell}]
----
root@otherserver# *ssh mysite@checkmkserver "omd backup -" > /var/backup/mysite.tar.gz*
----

If you are clever, and combine the above with an `omd restore` which
reads the data from the standard input, you can copy a complete,
running instance from one server to another -- and without needing any
additional space for a backup file:

[{shell}]
----
root@otherserver# *ssh mysite@checkmkserver "omd backup -" | omd restore - *
----

And now, the same procedure with a reversed SSH-access -- but this time from the
source system to the target system:

[{shell}]
----
{c-root} omd backup mysite - | ssh root@otherserver "omd restore -"
----
