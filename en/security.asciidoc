// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= Security
:revdate: draft
:title: Security - Additional safeguarding for {CMK}
:description: {CMK} is already very safe by design. What you can do to make your monitoring even more secure is described in this article.


{related-start}
xref:omd_https#[Securing the web interface with HTTPS]
xref:agent_linux#[Monitoring Linux]
link:agent_windows.html[Monitoring Windows]
xref:ldap#[User management with LDAP/Active Directory]
{related-end}

[#intro]
== Security

This article will be subsequently completed to provide a central overview on all aspects of security measures implemented in {CMK} and aids on further improving security.

Good news first: Since the beginning {CMK} uses an architecture that considers security needs and -- whereever possible -- applies these to standard settings.
However, there are aspects where user intervention is required, for example when keys or certificates have to be generated or imported.

=== Agent data

Starting with {v21} {CMK} defaults to TLS encryption for the communication between agent and server when Linux or Windows hosts are involved.
Communication details are covered in the articles describing these two agents:

- xref:agent_linux#[Monitoring Linux]
- xref:agent_windows#[Monitoring Windows]

However there are some constellations where TLS encryptions for Linux or Unix clients cannot be setup.
In these cases you might use encrypted tunnels, for example with SSH:

- xref:agent_linux_legacy#security[Securing the Linux agent (legacy mode)]
- xref:datasource_programs#[Datasource programs]

=== HTTP(S) communication

On many places within {CMK} communication is realized over HTTP.
This applies to internal communication and configurations such as _distributed monitoring_.
Switch to HTTPS where possible:

- xref:omd_https#[Securing the web interface with HTTPS]
- xref:ldap#ssl[Securing LDAP with SSL]
- xref:appliance_usage#ssl[Protecting the appliance-GUI via TLS]
- xref:managing_docker#https[Securing Docker with HTTPs]

=== Access control

{CMK} supports connections to several authentication protocols and is able to enforce two factor authentication for even higher security:

- xref:ldap#[User management with LDAP/Active Directory]
- xref:wato_user#2fa[Two-factor authentication of {CMK} users]
- xref:kerberos#[Single Sign-On with Kerberos]
- xref:saml#[Authentication against SAML]


////
Here will be an overview article on how to set up {CMK} so that you have
optimal network security for your monitoring server, as well as for the
monitored systems.

First the good news. Through its own agents, {CMK} has an architecture that
was designed from the beginning for maximum security. This manifests itself,
for example, in that the agents fundamentally do not read data directly from the
network. It is therefore impossible for an attacker to inject code. That said,
the agents do not even trust the monitoring server itself.

HTTP protocols are used at various points in {CMK} -- whether for internal
communication or for the connection of other systems. Use HTTPS wherever
possible. In other situations there are additional optional encryption techniques. You can also find instructions in this User guide:

- xref:omd_https#[Securing the web interface with HTTPS]
- xref:wato_user#2fa[Two-factor Authentication for {CMK} Users]
- xref:agent_linux#security[Securing a Linux-Agent]
- xref:ldap#ssl[Securing an LDAP-connection with SSL]
- xref:appliance_usage#ssl[Securing the appliance GUI per TLS]
- xref:managing_docker#https[Securing Docker with HTTPS]
////

//IN:cma_backup#encryption Encrypting appliance backups
