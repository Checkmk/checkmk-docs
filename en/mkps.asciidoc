//encoding: utf-8
include::global_attr.adoc[]
= {CMK} extension packages (MKPs)
:revdate: draft
:title: {CMK} extension packages (MKPs) - Integrating extensions from the community into {CMK}
:description: Extensions created by the {CMK} community can be easily packaged and then shared with others.

{related-start}
link:https://checkmk.com/integrations[Catalog of Check Plug-ins^]
link:localchecks.html[Local checks]
link:devel_check_plugins.html[Writing your own check plug-ins]
link:dev_guidelines.html[Guidelines for coding check plug-ins]
link:bakery_api.html[The Bakery API]
{related-end}


// start proofreading
== Introduction

{CMK} has a very modular structure, and those with a knowledge of Python programming can extend it in many places.
Among other things it is possible to extend {CMK} with the following elements:

* Own checks and agent plug-ins, including input masks for the configuration environment.
* Own plug-ins for the {CMK} xref:inventory#[HW/SW inventory]
* Extensions for the GUI (views, dashboards, columns, icons, etc.).
* Definitions of graphs or Perf-o-Meters
* Notification and alert handler scripts (also in shell or other scripting languages).

All of these these extensions can be implemented by placing additional files in the `~/local` directory within the {CMK} site.
To manage these extensions, to roll them out in distributed environments and also share them with other users, {CMK} provides its own package format the *{CMK} extension package* -- in short *MKP*.

An MKP can include any desired set of extensions -- for example, a set of check plug-ins including associated manual pages, threshold configuration environments and associated metric definitions.
It can furthermore contain settings for distribution via the Agent Bakery. An MKP has a name, a version number and can be installed or removed with a simple action.


[#exchange]
=== The {CMK} Exchange

On the link:https://exchange.checkmk.com[{CMK} Exchange^], programmers of plug-ins can provide packages for other {CMK} users and exchange these amongst themselves.
From the Exchange you can download and use extensions for free.
Please note that packages from the Exchange are shared voluntarily by other users and are without any warranty.
Improperly programmed plug-ins can lead to increased CPU/system loads and memory requirements.
In addition, it is possible that an MKP was developed for older versions of CMK and thus may not be fully compatible
(from version {v16} to {v20} {CMK} changed from Python 2 to Python 3).
In extreme cases there can be a risk of data or service loss.
We therefore strongly recommend that before using third-party MKPs in a production environment, they should first be installed on a test site.


=== Tools for MKPs

There are two tools for managing MKPs:

* The xref:commandline[command] `mkp`.
* The Setup menu item [.guihint]#Extension Packages# ({CEE} only)

We will now introduce both management tools in more detail.
They are compatible with each other so that you can use the command line command and [.guihint]#Extension Packages# without "messing anything up".


[#wato]
== Managing extension packages via the Setup Menu

{cee-only} The facility to manage MKPs via the GUI exists exclusively in the {EE} of {CMK}.
In the [.guihint]#Setup# menu you enter the administration of MKPs via [.guihint]#Setup > Maintenance > Extension packages#.
Here you can install, modify or create MKPs:

image::mkp_manager_sidebar.png[width=30%]


=== Adding an MKP

An MKP that you have downloaded from the Exchange, for example, can be uploaded to {CMK} by clicking the [.guihint]#Upload package# button and will then be made available for installation.
To do this, the file must be present on the machine that is also running your web browser.
The file extension of the package must be `.mkp`.

image::mkp_manager_upload.png[]

Following an installation, the extension package will initially be _available_. It is located under [.guihint]#All packages (enabled or disabled)#:

image::mkp_manager_present_not_active.png[]


=== Activating an MKP

Only with a click on the plug icon icon:icon_install[] will an available package also be activated.
During activation, the files are installed in a folder hierarchy under `~/local/`.
The package description file is also placed in `~/var/check_mk/packages/`.
After activation, the package will also appear in the list of _enabled and active_ MKPs -- [.guihint]#Enabled (active on this site)#:

image::mkp_manager_list_active.png[]

Now perform an xref:wato#activate_changes[activation of changes], after which all functions from the package will be anchored in the system and ready for use.


=== Disabling and removing packages

The complete deletion of a package is also done in two stages.
With the icon:icon_disabled[] button you first deactivate a package in the list of active packages.
In this step the installed files are removed, but the MKP is still kept -- this step only reverses the _activation_.

Using the icon:icon_delete[] icon in the list of all packages, you can again delete installed and unused packages.
When deleting, the package is deleted and with it the extension is completely removed -- i.e. the opposite of _adding a package_.


[#distr_wato]
=== MKPs in distributed environments

In the case of a xref:distributed_monitoring#distr_wato[distributed setup], it is sufficient to make the packages available on the central site.
For each remote site associated with the central site, you can then separately determine whether the customizations should be propagated to that remote site.
All you have to do is activate the [.guihint]#Replicate extensions# option.
After that, the MKPs and all other changes below the `~/local` directory will also be transferred during synchronization.

image::mkp_distr_wato.png[]

If a transfer is not desired, simply turn off the option for this or all sites.

*Important*: The customizations for the distributed setup will only be transferred if the [.guihint]#Enable replication# option is set to [.guihint]#Push configuration to this site#.


[#enabled_inactive]
=== Special case: Enabled but inactive packages

A special case is the attempted activation of a package that does not match the {CMK} version used. Such a package that is enabled, but whose activation fails because of an incompatible {CMK} version, will end up in the [.guihint]#Enabled (inactive on this site)# list.

image::mkp_manager_all_states.png[]

But why install packages that do not match the {CMK} version you are using?
There are two good reasons: 

. An xref:update_major#[update of the {CMK} version]:
You have the possibility of storing packages for both the old and the new versions -- when you next perform an update, the newer package will be activated automatically.

. xref:distributed_monitoring#distr_wato[Distributed Monitoring]:
To facilitate updates, the {CMK} major version of remote sites may be one higher than that of the central site.
However, this previously made it difficult to distribute MKPs because these had to be compatible with both major versions.
With the ability to unlock mismatched packages, you can keep packages on the central site that match both the source and target versions.
The newer version will then be automatically activated during an update.

From the version numbers shown in the above screenshot, you can see that it is a {CMK} {v21} central site that provides packages for remote sites that have already been upgraded to {v22}.
// end proofreading


// This block replaces the rest of this article, i.e. the following sections MKPs for developers and MKPs on the command line
// start translation
////
[#commandline]
== Erweiterungspakete auf der Kommandozeile verwalten

Alle oben genannten Aktionen können Sie auch auf der Kommandozeile ausführen.
Dazu dient der Befehl `mkp`.
Ruft man ihn ohne Subkommando auf, zeigt er Hinweise zur Verwendung.
Die etwa 50 Zeilen lange Ausgabe haben wir auf weniger als die Hälfte abgekürzt:

[{shell}]
----
{c-omd} mkp
usage: mkp [-h] [--debug] [--verbose] {find,inspect,show,show-all,files,list,add,...}

Command line interface for the Checkmk Extension Packages

options:
  -h, --help            show this help message and exit
  --debug, -d
  --verbose, -v         Be more verbose

available commands:
  {find,inspect,show,show-all,files,list,add,...}
    find                Show information about local files.
    inspect             Show manifest of an MKP file.
    show                Show manifest of a stored package.
    show-all            Show all manifests.
    files               Show all files beloning to a package.
    list                Show a table of all known files, including the deployment state.
    add                 Add an MKP to the collection of managed MKPs.
[...]
----

In den folgenden Abschnitten stellen wir Ihnen die wichtigsten Befehle zur Verwaltung von MKPs vor.
Eine Befehlsreferenz in Tabellenform finden Sie am Ende des Handbuchartikels.

=== Hinzufügen eines MKPs

Das Hinzufügen eines Pakets geschieht mit `mkp add`.
Dazu müssen Sie die MKP-Datei natürlich zunächst auf den {CMK}-Server bringen (z.B. mit `scp`).
Anschließend führen Sie den folgenden Befehl aus:

[{shell}]
----
{c-omd} mkp add /tmp/hello_world-0.2.2.mkp
----

Die Liste der vorhandenen Pakete rufen Sie mit `mkp list` ab.
Nach der Installation ist das Erweiterungspaket zunächst _verfügbar_, jedoch _nicht aktiv_.
Es hat den Zustand [.guihint]#State: Disabled#:

[{shell}]
----
{c-omd} mkp list
Name        Version Title        Req. Version Until Version Files State
----------- ------- ------------ ------------ ------------- ----- --------
hello_world 0.2.2   Hello world! 2.2.0        2.2.999       6     Disabled
----


=== Aktivierung eines MKPs

Erst mit dem Subkommando `enable` wird ein verfügbares Paket auch aktiviert.
Die Angabe der Versionsnummer ist nur in dem Fall erforderlich, dass der Name alleine xref:#enabled_inactive_cli[nicht eindeutig] ist:

[{shell}]
----
{c-omd} mkp enable hello_world 0.2.2
----

Bei der Aktivierung werden die Dateien in einer Ordnerhierarchie unterhalb von `~/local/` installiert und die Paketbeschreibungsdatei in `~/var/check_mk/packages/` abgelegt.
Das Paket erhält dadurch den Zustand [.guihint]#Enabled (active on this site)#:

[{shell}]
----
{c-omd} mkp list
Name        Version Title        Req. Version Until Version Files State
----------- ------- ------------ ------------ ------------- ----- -----------------------------
hello_world 0.2.2   Hello world! 2.2.0        2.2.999       6     Enabled (active on this site)
----

Details über ein einzelnes Paket erfahren Sie mit `mkp show`, der Aktivierungszustand spielt dabei keine Rolle:

[{shell}]
----
{c-omd} mkp show hello_world 0.2.2
Name:                          hello_world
Version:                       0.2.2
Packaged on Checkmk Version:   2023.01.16
Required Checkmk Version:      2.2.0
Valid until Checkmk version:   2.2.999
Title:                         Hello world!
Author:                        Mattias Schlenker
Download-URL:                  https://exchange.checkmk.com/p/hello-world
Files:
  Agent based plugins (Checks, Inventory)
    hello_world.py
  Agents
    plugins/hello_world
  Checks' man pages
    hello_world
  Legacy GUI extensions
    plugins/metrics/helloworld_metric.py
    plugins/perfometer/helloworld_perfometer.py
    plugins/wato/helloworld_parameters.py
Description:
  This is a very basic plugin with the sole purpose to be used as template for your own plugin development.
----

=== Pakete deaktivieren und entfernen

Die Deinstallation eines Pakets geschieht in zwei Stufen.
Zunächst wird das Paket mit `mkp disable` deaktiviert.
Dies löscht installierte Dateien, hält das Paket aber – beispielsweise für eine spätere  erneute Aktivierung – weiterhin vor.
Die Angabe der Versionsnummer ist auch hier nur in dem Fall erforderlich, dass der Name alleine xref:#enabled_inactive_cli[nicht eindeutig] ist:

[{shell}]
----
{c-omd} mkp disable hello_world 0.2.2
----

In der Paketliste sehen Sie nun den Zustand [.guihint]#Disabled#, wenn Sie ein weiteres mal `mkp list` aufrufen:

[{shell}]
----
{c-omd} mkp list
Name        Version Title        Req. Version Until Version Files State
----------- ------- ------------ ------------ ------------- ----- --------
hello_world 0.2.2   Hello world! 2.2.0        2.2.999       6     Disabled
----

Erst `mkp remove` löscht das Paket unwiderruflich:

[{shell}]
----
{c-omd} mkp remove hello_world 0.2.2
----

[#enabled_inactive_cli]
=== Sonderfall: Freigeschaltete, aber inaktive Pakete

Ein Sonderfall stellt die Installation eines Paketes dar, das nicht zur verwendeten {CMK}-Version passt:

[{shell}]
----
{c-omd} mkp install /tmp/hello_world-0.2.3.mkp
The package requires Check_MK version 2.3.0, but you have 2.2.0b1 installed.
----

Ein solches Paket können Sie zwar freischalten.
Dessen Aktivierung schlägt dann aber wegen der inkompatiblen {CMK}-Version fehl und erhält den Zustand [.guihint]#Enabled (inactive on this site)#.

[{shell}]
----
{c-omd} mkp list
Name        Version Title        Req. Version Until Version Files State
----------- ------- ------------ ------------ ------------- ----- -------------------------------
hello_world 0.2.3   Hello world! 2.3.0        2.3.999       6     Enabled (inactive on this site)
hello_world 0.2.2   Hello world! 2.2.0        2.2.999       6     Enabled (active on this site)
----

Die Gründe für die Installation inkompatibler Pakete – Updates und verteilte Umgebungen – erklären wir xref:#enabled_inactive[oben im entsprechenden Setup-Schritt].
Ebenso analog zum Vorgehen im Setup verwenden Sie `mkp enable paketname version`, um ein Paket freizuschalten, respektive `mkp disable paketname version`, um eine vorhandene Freischaltung aufzuheben.

[#developers]
== MKPs für Entwickler

Die meisten von uns, die programmieren können oder lernen, sind _gleichsam Zwerge, die link:https://de.wikipedia.org/wiki/Zwerge_auf_den_Schultern_von_Riesen[auf den Schultern von Riesen^] sitzen, um mehr und Entfernteres als diese sehen zu können_:
Gerade im Open Source Bereich können wir vom früheren Schaffen anderer profitieren.
Im Falle von {CMK} gilt dies ganz besonders für Erweiterungen, welche im Sinne der GPL abgeleitete Werke von {CMK} selbst sind, die wiederum der GPL (link:https://www.gnu.org/licenses/old-licenses/gpl-2.0.html[Version 2.0^]) unterliegen.
Konkret bedeutet dies, dass Sie in der link:https://checkmk.com/exchange[{CMK} Exchange] heruntergeladene Pakete nach Herzenslust (oder einfach aktuellem Bedarf) anpassen können. 

In den folgenden Abschnitten zeigen wir – angefangen vom neu paketieren mit kleinen Änderungen, über Auflösen eines vorhandenen (Beispiel-) Paketes, hin zur Zusammenstellung unpaketierter Dateien – alle relevanten Schritte in ihrer typischen Reihenfolge.

Wenn Sie selbst Plugins für {CMK} programmieren oder modifizieren, beachten Sie die Artikel zu den vorhandenen 
xref:devel_check_plugins#[Programmierschnittstellen und der Dateisystemstruktur], 
der xref:bakery_api#[Integration in die Agentenbäckerei] 
sowie die xref:dev_guidelines#[Richtlinien für Check-Plugins].

[#edit_mkp]
=== Pakete editieren

Oft macht die Korrektur kleinerer Fehler die Anpassung eines vorhandenen Paketes notwendig, ohne dass Struktur oder Name geändert werden sollen.
In diesem Fall ist es ratsam, nicht nur die im Dateisystem abgelegten Dateien anzupassen, sondern zumindest auch die Versionsnummer zu aktualisieren.
Erfordern Änderungen der APIs von {CMK} Modifikationen an einem Paket, passen Sie zudem die im Paket hinterlegten Versionsnummern für minimal und maximal unterstützte Versionen an.
Bei Verwendung der Bakery triggert zudem das Vorhandensein neuer MKPs den Neubau der Agentenpakete. 

In den {CEE} verwenden Sie das Symbol icon:icon_edit[], um zum Änderungsdialog zu gelangen.
Nutzer der {CRE} gehen stattdessen die beiden folgenden Schritte über xref:release_mkp[auflösen] und neu xref:package_mkp[neu erstellen].

image::mkp_edit_description.png[]

[#release_mkp]
=== Pakete auflösen 

[#release_mkp_gui]
==== Setup-Menü

Das icon:icon_release_mkp[] Auflösen eines Paketes entlässt die paketierten Dateien unter `~/local/` sozusagen "in die Freiheit" und entfernt nur die Paketbeschreibung.
Als Ergebnis sind die Dateien dann unpaketiert und die Erweiterungen weiterhin aktiv.
Dies ist das Gegenteil des Erzeugens eines Pakets aus bisher unpaketierten Dateien.

In der Praxis werden Sie das Auflösen von Paketen am ehesten benötigen, wenn Sie eine Erweiterung anpassen und später mit Änderungen neu paketieren wollen.
Zum Beispiel können Sie mit unserem link:https://exchange.checkmk.com/p/hello-world[Hello world!^] Beispiel, welches nichts sinnvolles tut, aber als Vorlage für das erste eigene Paket dienen kann, loslegen.

[#release_mkp_cli]
==== Kommandozeile

Auf der Kommandozeile lösen Sie ein Paket mit `mkp release` auf.
Das aufzulösende Paket muss hierfür den Zustand [.guihint]#Enabled (active on this site)# haben.
Dabei bleiben die Erweiterungsdateien erhalten und nur die Paketbeschreibung wird gelöscht:

[{shell}]
----
{c-omd} mkp release hello_world
----

Das ursprüngliche Paket bleibt hierbei erhalten und wechselt den Zustand auf [.guihint]#Enabled (inactive on this site)#.
Es kann so auch als Backup für den Fall dienen, dass bei der Anpassung etwas schiefgeht.
Löschen Sie dann einfach die "entlassenen" Dateien, aktivieren Sie das Paket erneut und beginnen Sie von vorn.

[#find_unpackaged]
=== Unpaketierte Dateien finden

[#find_unpackaged_gui]
==== Setup-Menü

Sind die Programmier- oder Anpassungsarbeiten abgeschlossen, gilt es, die vorhandenen und hinzugefügten Dateien wieder zu finden.
Da diese Dateien momentan zu keinem Paket gehören, werden sie im Setup unter [.guihint]#Unpackaged files# aufgelistet:

.Liste der [.guihint]#Unpackaged files# und der Knopf [.guihint]#Create package#
image::mkps_unpackaged.png[]

[#find_unpackaged_cli]
==== Kommandozeile

Das Äquivalent auf der Kommandozeile ist `mkp find`:

[{shell}]
----
{c-omd} mkp find
File                                        Package Version Part                                    Mode                                                                                                                 
------------------------------------------- ------- ------- --------------------------------------- ----------
hello_world.py                                              Agent based plugins (Checks, Inventory) -rw-r--r--
plugins/hello_world                                         Agents                                  -rwxr-xr-x
hello_world                                                 Checks' man pages                       -rw-r--r--
plugins/perfometer/helloworld_perfometer.py                 Legacy GUI extensions                   -rw-r--r--
plugins/metrics/helloworld_metric.py                        Legacy GUI extensions                   -rw-r--r--
plugins/wato/helloworld_parameters.py                       Legacy GUI extensions                   -rw-r--r--
----

Löschen Sie nicht benötigte Dateien, beziehungsweise notieren Sie, welche noch nicht mit ins Paket gepackt werden sollen.
Im nächsten Schritt werden dann die unpaketierten Dateien dann (wieder) zu einem Paket zusammengefasst.

[#package_mkp]
=== Pakete erstellen

[#package_mkp_gui]
==== Setup-Menü

Über den Knopf icon:icon_new_mkp[] [.guihint]#Create package# in der Übersicht der unpaketierten Dateien gelangen Sie zum Dialog zum Erstellen eines neuen Pakets:

image::mkps_create.png[]

Neben den offensichtlichen Angaben ist es wichtig, dass Sie mindestens eine Datei auswählen, die eingepackt werden soll.
Durch das Erstellen wird eine Paketbeschreibung unter `~/var/check_mk/packages/` angelegt,
welche neben den allgemeinen Angaben auch die Liste der enthaltenen Dateien beinhaltet.
Die maximal unterstützte {CMK}-Version ist natürlich ohne Glaskugel schwer vorherzusagen.
Derzeit sind für {CMK} {v23} keine tief greifenden Änderungen geplant.
Daher dient die maximale {CMK}-Version vor allem bei der Verteilung über die Exchange dazu, ältere Pakete zu identifizieren, die intensivere Tests und möglicherweise Anpassungen benötigen.
Auch für die Abwärtskompatibilität zu {v20} und {v21} gilt, dass Sie wegen einiger kleiner Änderungen zumindest testen sollten. 

Dieses Paket können Sie nun – z.B. um es auf ein anderes System zu übertragen oder auf die Exchange hochzuladen – in der Paketliste mit dem Symbol icon:icon_download[] als MKP-Datei herunterladen.

[#package_mkp_cli]
==== Kommandozeile

Die Vorgehensweise zum Erstellen von MKPs auf der Kommandozeile ist analog zum Setup-Menü.
Zunächst erzeugen Sie mit `mkp template` eine eine Paketkonfiguration, welche (vorerst) all diese Dateien beinhaltet.
Geben Sie als Parameter den gewünschten Namen des neuen Pakets an:

[{shell}]
----
{c-omd} mkp template hello_world_ng
Created 'tmp/check_mk/hello_world_ng.manifest.temp'.
You may now edit it.
Create the package using `mkp package tmp/check_mk/hello_world_ng.manifest.temp`.
----

Die Eigenschaften des Pakets editieren Sie nun mit einem Texteditor:

.tmp/check_mk/hello_world_ng.manifest.temp
[{file}]
----
{'author': 'Add your name here',
 'description': 'Please add a description here',
 'download_url': 'https://example.com/hello_world_ng/',
 'files': {'agent_based': ['hello_world.py'],
           'agents': ['plugins/hello_world'],
           'checkman': ['hello_world'],
           'web': ['plugins/metrics/helloworld_metric.py',
                   'plugins/perfometer/helloworld_perfometer.py',
                   'plugins/wato/helloworld_parameters.py']},
 'name': 'hello_world_ng',
 'title': 'Title of hello_world_ng',
 'version': '1.0.0',
 'version.min_required': '2.2.0',
 'version.packaged': '2.2.0b1',
 'version.usable_until': None}
----

Bearbeiten Sie diese Datei nach Ihren Wünschen.
Achten Sie dabei auf korrekte Python-Syntax.
Unicode-Zeichenketten (Texte, die nicht-ASCII-Zeichen wie Umlaute enthalten) müssen mit einem kleinen vorangestellten `u` gekennzeichnet werden.

Unter dem Eintrag `files` können Sie Dateien entfernen, welche nicht paketiert werden sollen.
Tragen Sie unter `version.min_required` die Mindestversion von {CMK} ein, die erforderlich ist, um das Paket zu verwenden.

Anschließend können Sie mit `mkp package` eine MKP-Datei erzeugen:

[{shell}]
----
{c-omd} mkp package tmp/check_mk/hello_world_ng.manifest.temp
[hello_world_ng 1.0.0]: Installing
----

Abgelegt werden Pakete unter `~/var/check_mk/packages_local`:

[{shell}]
----
{c-omd} ll ~/var/check_mk/packages_local/*.mkp
-rw-rw---- 2 mysite mysite 4197 Feb 20 13:19 hello_world_ng-1.0.0.mkp
----

== Das MKP-Paketformat

Möglicherweise möchten Sie Erweiterungspakete auf einem Entwicklungsrechner programmieren und packen, um dann das fertige Paket zum {CMK}-Server zu übertragen und dort zu testen.
Das ist recht einfach möglich, weil das MKP-Format lediglich eine `.tar.gz` Datei ist, die wiederum `.tar` Dateien und Manifest-Dateien enthält.

Die Untersuchung der heruntergeladenen `hello_world-0.1.3.mkp` gibt die erste Stufe der Struktur preis:

[{shell}]
----
{c-user} tar tvf hello_world-0.1.3.mkp
-rw-r--r-- 0/0            1153 2021-10-08 09:35 info
-rw-r--r-- 0/0             973 2021-10-08 09:35 info.json
-rw-r--r-- 0/0           10240 2021-10-08 09:35 agent_based.tar
-rw-r--r-- 0/0           10240 2021-10-08 09:35 checkman.tar
-rw-r--r-- 0/0           10240 2021-10-08 09:35 agents.tar
-rw-r--r-- 0/0           10240 2021-10-08 09:35 web.tar
----

Entpacken Sie das Paket in ein temporäres Verzeichnis, können Sie die Inhalte der enthaltenen Tar-Archive anschauen.
Die Pfade sind relativ zum Verzeichnis, das die jeweiligen Komponenten enthält:

[{shell}]
----
{c-user} tar tvf web.tar
-rw-r--r-- 0/0 698 2021-10-08 09:04 plugins/metrics/helloworld_metric.py
-rw-r--r-- 0/0 676 2021-10-08 09:04 plugins/perfometer/helloworld_perfometer.py
-rw-r--r-- 0/0 2383 2021-10-08 09:27 plugins/wato/helloworld_parameters.py
----

Und was ist mit den beiden Manifest-Dateien?
Die Datei `info` und Ihre im Python-Dict-Format enthaltenen Felder haben Sie weiter oben kennengelernt.
Das JSON-Äquivalent `info.json` enthält exakt die gleichen Felder und Werte, wurde aber im JSON-Format serialisiert.
Falls Sie den Paketbau in einem Skript durchführen wollen, sollten Sie die Python-Dict-Datei `info` einlesen und vor dem Packen daraus die JSON-Datei `info.json` generieren.

Wenn Sie die Archive neu packen, achten Sie darauf, keine Pfade miteinzupacken, die nicht Teil der Ordnerhierarchie unter `~/local` sind. Auf der obersten Ebene dürfen nur die oben zu sehenden Manifeste und Tar-Dateien enthalten sein.
Packen Sie hier zudem mit `UID` und `GID` 0.

== Befehlsreferenz

=== Verwaltung

[cols="15,~,~",options="header"]
|===
|Subkommando |Parameter |Verwendungszweck
|`add` | Dateiname des hinzuzufügenden Paketes|Macht ein Paket verfügbar, aktiviert es aber noch nicht.
|`enable` | Name des Paketes (und ggf. Versionsnummer) |Aktiviert ein Paket je nach Versionskompatibilität für lokale Verwendung oder Verteilung an Remote-Sites.
|`disable` |Name des Paketes und Versionsnummer |Deaktiviert ein Paket, dieses bleibt im Dateisystem verfügbar.
|`remove` |Name des Paketes und Versionsnummer |Entfernt ein zuvor deaktiviertes Paket vollständig.
|`install` |Dateiname des hinzuzufügenden Paketes |Deprecated! Wird bald entfernt.
|`list` | _keine_|Listet alle verfügbaren Pakete und deren Aktivierungszustand auf.
|`inspect` |Dateiname des zu untersuchenden Paketes |Zeigt Informationen zu einem nicht installierten MKP.
|`show` |Name des Paketes (und ggf. Versionsnummer) |Zeigt Informationen zu einem verfügbaren MKP.
|`show-all` | _keine_|Zeigt Informationen zu allen verfügbaren MKPs.
|`files` | Name des Paketes (und ggf. Versionsnummer) |Listet alle zu einem Paket gehörenden Dateien auf.
|===

=== Entwicklung

[cols="15,~,~",options="header"]
|===
|Subkommando |Parameter |Verwendungszweck
|`release` |Name des Paketes |Löst ein aktives Paket auf.
|`find` | _keine_ |Listet alle zu keinem Paket gehörenden Dateien auf.
|`template`  |Name des neu zu erstellenden Paketes |Erstellt eine Manifest-Datei als Basis für ein neues Paket.
|`package` | Pfad zur Manifest-Datei| Erstellt auf Basis des Inhalts einer Manifest-Datei ein MKP.
|===

=== Updates

[cols="15,~,~",options="header"]
|===
|Subkommando |Parameter |Verwendungszweck
|`disable-outdated`|_keine_ | Deaktiviert nach einem Update nicht mehr zur {CMK}-Version passende Pakete.
|`update-active` |_keine_ |Aktiviert nach einem Update die zur {CMK}-Version passenden Pakete.
|===
////
// end translation







== MKPs for developers

If you are programming or modifying your own plug-ins for {CMK}, please see the articles on the existing
xref:devel_check_plugins#[programming interfaces and the file system structure], 
the xref:bakery_api#[integration into the Agent Bakery] 
and the xref:dev_guidelines#[guidelines for check plug-ins].


=== Unpacking packages 

The icon:icon_release_mkp[] unpack icon unpacks the packaged files under `~/local/` and only removes the package description.
As a result, the files will be unpackaged and the extensions will remain active.
This is the opposite of creating a package from previously unpackaged files.

In practice, you will most likely need to unpackage when you want to customize an extension and later repackage it with any changes.
For example, you can use our link:https://exchange.checkmk.com/p/hello-world[Hello world!^] example, which does nothing useful, but can serve as a template to help you get started with your first custom package.


=== Creating packages

Creating your own MKP is very easy once the xref:devel_check_plugins#[programming work] has been completed.
The starting point is that you have created your own files in the appropriate directories under `~/local/`.
For example, for custom, agent-based check plug-ins, the correct directory is `~/local/lib/check_mk/base/plugins/agent_based`.
These files do not initially belong to any package and are therefore listed under [.guihint]#Unpackaged files#:

.List of [.guihint]#Unpackaged files# and the [.guihint]#Create package# button.
image::mkps_unpackaged.png[]

The icon:icon_new_mkp[] [.guihint]#Create package# button will open the dialog for creating a new package:

image::mkps_create.png[]

Besides the obvious information, it is important that you select at least one file to be packed. When creating a package, a description is added under `~/var/check_mk/packages/`, which, in addition to the general information, also contains the list of the included files.
The highest supported {CMK} version is of course difficult to predict without a crystal ball.
As a rule of thumb it can be assumed that something that was programmed for {v20} without using old APIs will also run with {v21}.
Therefore the highest {CMK} version is used to identify older packages, which require more intensive testing and possibly customization.

You can now use this package -- e.g. to transfer it to another system or upload it to the Exchange -- or, with the icon:icon_download[] icon in the package list, to download it as an MKP file.

When making changes to packaged files, the package _does not_ need to be rebuilt.
Click icon:icon_edit[] to change the version number, save the modified package and re-download it if necessary.


[#commandline]
== MKPs on the command line

You can also perform all of the above actions on the command line.
For this use the `mkp` command (which is actually an abbreviation for `cmk -P`):

[{shell}]
----
{c-omd} mkp
Usage: check_mk [-v] -P|--package COMMAND [ARGS]

Available commands are:
   create NAME      ...  Collect unpackaged files into a new package NAME
   pack NAME        ...  Create package file from an installed package
   release NAME     ...  Drop installed package NAME, release packaged files
   find             ...  Find and display unpackaged files
   list             ...  List all installed packages
   list NAME        ...  List files in installed package
   list PACK.mkp    ...  List files in uninstalled package file
   show NAME        ...  Show information about installed package
   show PACK.mkp    ...  Show information about uninstalled package file
   install PACK.mkp ...  Install or update a package from file PACK.mkp
   remove NAME      ...  Uninstall a package with the NAME

   -v  enables verbose output

Package files are located in /omd/sites/mysite/var/check_mk/packages/.
----


=== Installing an MKP

The installation of a package is accomplished with the `mkp install` command.
For this, first you must of course load the MKP file onto the {CMK} server (e.g. with `scp`).
After that the installation is performed with a command:

[{shell}]
----
{c-omd} mkp install /tmp/mypackage-1.0.mkp
----

You can get the list of installed packages with `mkp list`:

[{shell}]
----
{c-omd} mkp list
mypackage
----

For details on the contents of an individual package, use `mkp show`:

[{shell}]
----
{c-omd} mkp show myPackage
Package file: /omd/sites/mysite/var/check_mk/packages/myPackage
Name: myPackage
Version: 1.0
Packaged on Checkmk Version: 2.0.0p23
Required Checkmk version: 2.0.0
Valid until Checkmk version: 2.1.999
Title: My own check plugin
Author: myName
Download URL:                  \http://www.example.com
Files: checkman(1) checks(1)
Description:
  This package contains a cool check plugin
----


=== Uninstalling or unpacking packages

Uninstalling a package is done with `mkp remove`.
This command deletes the package description as well as all of its included files!

[{shell}]
----
{c-omd} mkp remove mypackage
----

And you can release a package with `mkp release`.
The extension files will be preserved and only the package description will be deleted:

[{shell}]
----
{c-omd} mkp release mypackage
----


=== Creating packages

The procedure for creating MKPs on the command line is analogous to that using the Setup menu.
First you create your extensions in the appropriate directories within `~/local/`.
You then list all unpackaged files with `mkp find`:

[{shell}]
----
{c-omd} mkp find
/omd/sites/mysite/local/lib/check_mk/base/plugins/agent_based/mycheck
/omd/sites/mysite/local/lib/check_mk/base/plugins/agent_based/mycheck_manpage
----

Now create a package configuration with the `mkp create` command, which (for now) contains all of these files.
Specify the desired name of the new package:

[{shell}]
----
{c-omd} mkp create mypackage
----

You now edit the properties of the package with a text editor.
The file for this is located in `var/check_mk/packages/mypackage`:

.var/check_mk/packages/mypackage
[{file}]
----
{'author': 'myName',
 'description': u'This package contains a check plugin',
 'download_url': 'http://www.example.com',
 'files': {'agent_based': [],
           'agents': [],
           'checkman': ['mycheck'],
           'checks': ['mycheck'],
           'doc': [],
           'inventory': [],
           'lib': [],
           'notifications': [],
           'pnp-templates': [],
           'web': []},
 'name': 'myPackage',
 'num_ files': 2,
 'title': 'My own check plugin',
 'version': '1.0',
 'version.min_required': '2.0.0',
 'version.packaged': '2.0.0p23'
 'version.usable_until': '2.1.999'}
----

Edit this file according to your needs.
Make sure you use the correct Python syntax. Unicode strings -- i.e. texts containing non-ASCII characters, such as umlauts -- must be prefixed with a lower-case `u`.

At the entry `files` you can remove files which should not be be packaged.
Under `version.min_required` you enter the minimum version of {CMK} that is required to use the package.

Afterwards you can create a MKP file using `mkp pack`:

[{shell}]
----
{c-omd} mkp pack mypackage
{c-omd} ll *.mkp
-rw-rw-r-- 1 mysite mysite 495 Dez 22 13:36 mypackage-1.0.mkp
----
