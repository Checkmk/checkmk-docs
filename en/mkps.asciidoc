// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= {CMK} extension packages (MKPs)
:revdate: draft
:title: {CMK} extension packages (MKPs) - Integrating extensions from the community into {CMK}
:description: Extensions created by the {CMK} community can be easily packaged and then shared with others.

{related-start}
link:https://checkmk.com/integrations[Catalog of Check Plug-ins^]
link:localchecks.html[Local checks]
link:devel_check_plugins.html[Writing your own check plug-ins]
link:dev_guidelines.html[Guidelines for coding check plug-ins]
link:bakery_api.html[The Bakery API]
{related-end}


== Introduction

{CMK} has a very modular structure, and those with a knowledge of Python programming can extend it in many places.
Among other things it is possible to extend {CMK} with the following elements:

* Own checks and agent plug-ins, including input masks for the configuration environment.
* Own plug-ins for the {CMK} xref:inventory#[HW/SW inventory]
* Extensions for the GUI (views, dashboards, columns, icons, etc.).
* Definitions of graphs or Perf-o-Meters
* Notification and alert handler scripts (also in shell or other scripting languages).

All of these these extensions can be implemented by placing additional files in the `~/local` directory within the {CMK} site.
To manage these extensions, to roll them out in distributed environments and also share them with other users, {CMK} provides its own package format the *{CMK} extension package* -- in short *MKP*.

An MKP can include any desired set of extensions -- for example, a set of check plug-ins including associated manual pages, threshold configuration environments and associated metric definitions.
It can furthermore contain settings for distribution via the Agent Bakery. An MKP has a name, a version number and can be installed or removed with a simple action.

// This block is new
// start translation
////
*Hinweis:* Das in diesem Artikel geschilderte Verhalten mit zweistufiger Installation/Deinstallation entspricht {CMK} {v21}p21.
Frühere Versionen verwenden eine einstufige Installation/Deinstallation.
Dieses Verhalten wurde nachgerüstet, um eine Aktualisierung von {v20} nach {v21} (und später von {v21} nach {v22}) zu erleichtern.
////
// end translation


[#exchange]
=== The {CMK} Exchange

On the link:https://exchange.checkmk.com[{CMK} Exchange^], programmers of plug-ins can provide packages for other {CMK} users and exchange these amongst themselves.
From the Exchange you can download and use extensions for free.
Please note that packages from the Exchange are shared voluntarily by other users and are without any warranty.
Improperly programmed plug-ins can lead to increased CPU/system loads and memory requirements.
In addition, it is possible that an MKP was developed for older versions of CMK and thus may not be fully compatible
(from version {v16} to {v20} {CMK} changed from Python 2 to Python 3).
In extreme cases there can be a risk of data or service loss.
We therefore strongly recommend that before using third-party MKPs in a production environment, they should first be installed on a test site.


=== Tools for MKPs

There are two tools for managing MKPs:

* The xref:commandline[command line command] `mkp`.
* The Setup menu item [.guihint]#Extension Packages# ({CEE} only)

We will now introduce both management tools in more detail.
They are compatible with each other so that you can use the command line command and [.guihint]#Extension Packages# without "messing anything up".


[#wato]
== Managing extension packages via the Setup Menu

{cee-only} The facility to manage MKPs via the GUI exists exclusively in the {EE} of {CMK}.
In the [.guihint]#Setup# menu you enter the administration of MKPs via [.guihint]#Setup > Maintenance > Extension packages#.
Here you can add, modify or create MKPs:

image::mkp_manager_sidebar.png[width=30%]


// This block replaces the following sections: "Installing an MKP" to "Installing Feature Packs"
// start translation
////
[#wato]
== Erweiterungspakete über das Setup-Menü verwalten

{cee-only} Die Möglichkeit MKPs über die GUI zu verwalten gibt es ausschließlich in den {EE} von {CMK}.
Im [.guihint]#Setup#-Menü steigen Sie in die Verwaltung der MKPs über [.guihint]#Setup > Maintenance > Extension packages# ein.
Hier können Sie MKPs hinzufügen, ändern oder neu erstellen:

image::mkp_manager_sidebar.png[width=30%]


=== Hinzufügen eines MKPs

Ein MKP, das Sie z.B. von der Exchange heruntergeladen haben, können Sie mit dem Knopf [.guihint]#Upload package# in {CMK} hochladen und so verfügbar machen.
Dafür muss die Datei auf dem Rechner vorhanden sein, auf dem auch Ihr Webbrowser läuft.
Die Dateiendung des Pakets muss `.mkp` sein.

image::mkp_manager_upload.png[]

Nach der Installation ist das Erweiterungspaket zunächst _verfügbar_, jedoch _nicht aktiv_.
Es befindet sich unter [.guihint]#All packages (enabled or disabled)#:

image::mkp_manager_present_not_active.png[]


=== Aktivierung eines MKPs

Erst mit dem Klick auf das Steckersymbol icon:icon_install[] wird ein verfügbares Paket auch aktiviert.
Bei der Aktivierung werden die Dateien in einer Ordnerhierarchie unterhalb von `~/local/` installiert.
Außerdem wird die Paketbeschreibungsdatei in `~/var/check_mk/packages/` abgelegt.
Nach dem Aktivierung erscheint das Paket dann auch in der Liste der _freigeschalteten und aktiven_ MKPs – [.guihint]#Enabled (active on this site)#:

image::mkp_manager_list_active.png[]

Nun führen Sie noch eine xref:wato#activate_changes[Aktivierung der Änderungen] durch und alle Funktionen aus dem Paket sind im System verankert und stehen Ihnen bereit.


=== Pakete deaktivieren und entfernen

Auch die vollständige Löschung eines Paketes erfolgt zweistufig.
Mit dem icon:icon_disabled[] deaktivieren Sie in der Liste der aktiven Pakete ein Paket zunächst.
In diesem Schritt werden die installierten Dateien entfernt, aber das MKP wird weiter vorgehalten – dieser Schritt macht lediglich die _Aktivierung_ rückgängig.

Über das Symbol icon:icon_delete[] in der Liste aller Pakete, können Sie installierte und nicht verwendete Pakete wieder löschen.
Beim Löschen wird das Paket gelöscht und somit die Erweiterung komplett entfernt – also das Gegenteil des _Hinzufügens eines Paketes_.


[#distr_wato]
=== MKPs in verteilten Umgebungen

Bei einem xref:distributed_monitoring#distr_wato[verteilten Setup] reicht es, wenn Sie die Pakete auf der Zentralinstanz verfügbar machen.
Für jede der Zentralinstanz zugeordneten Remote-Instanz können Sie dann separat bestimmen, ob die Anpassungen an diese Instanz übertragen werden sollen.
Sie müssen dazu lediglich die Option [.guihint]#Replicate extensions# aktivieren.
Danach werden bei der Synchronisation auch die MKPs und alle anderen Änderungen unterhalb des Verzeichnisses `~/local` übertragen.

image::mkp_distr_wato.png[]

Ist die Übertragung nicht gewünscht, schalten Sie die Option für diese oder alle Instanzen einfach ab.

*Wichtig*: Die Anpassungen für das verteilte Setup werden nur übertragen, wenn die Option [.guihint]#Enable replication# auf [.guihint]#Push configuration to this site# eingestellt ist.


[#enabled_inactive]
=== Sonderfall: Freigeschaltete, aber inaktive Pakete

Ein Sonderfall stellt der Aktivierungsversuch eines Paketes dar, das nicht zur verwendeten {CMK}-Version passt. Ein solches Paket,  das zwar freigeschaltet ist, aber dessen Aktivierung wegen einer inkompatiblen {CMK}-Version fehlschlägt, landet in der Liste [.guihint]#Enabled (inactive on this site)#.

image::mkp_manager_all_states.png[]

Warum aber sollte man Pakete installieren, die nicht zur verwendeten {CMK}-Version passen?
Dafür gibt es zwei gute Gründe: 

. Das xref:update_major#[Update der Checkmk-Version]:
Sie haben die Möglichkeit, Pakete sowohl für die alte als auch für die neue Version vorzuhalten – beim Update wird dann automatisch das neuere aktiviert.

. xref:distributed_monitoring#distr_wato[Verteiltes Monitoring]:
Um Updates zu erleichtern, darf die {CMK}-Major-Version von Remote-Instanzen eine höher als die der Zentralinstanz sein.
Dies erschwerte jedoch bislang die Verteilung von MKPs, denn diese mussten zu beiden Major-Versionen kompatibel sein.
Mit der Möglichkeit, auch unpassende Pakete freizuschalten, können Sie in der Zentralinstanz jeweils Pakete vorhalten, die zur Ausgangs- und Zielversion passen.
Beim Update wird dann automatisch das neuere aktiviert.

Aus den Versionsnummern im Screenshot können Sie entnehmen, dass es sich um eine {CMK} {v21} Zentralinstanz handelte, die Pakete für Remote-Instanzen bereithält, welche bereits auf {v22} aktualisiert wurden.
////
// end translation


=== Installing an MKP

An MKP that you have downloaded from the Exchange, for example, can be uploaded and installed into {CMK} using the [.guihint]#Upload package# button.
For this you need to have the file to be located on the computer where your web browser is running.
The file extension for the package must be `.mkp`.

image::mkp_manager_upload.png[]

During the installation, the files will be installed in a folder hierarchy under `~/local/`.
In addition, a package description file is placed in `~/var/check_mk/packages/`.
After uploading, the package will appear in the list of installed MKPs:

image::mkp_manager_list.png[]

Now you only need an xref:wato#activate_changes[activation of changes] and all functions from the package are anchored in the system and ready for use.


=== Package uninstallation

You can delete an installed package using the corresponding icon icon:icon_delete[] in the list of packages.
With a deletion, the package itself is deleted along with its installed files and the extension is thus completely removed -- the opposite of an installation.


[#distr_wato]
=== MKPs in distributed environments

For xref:distributed_monitoring#livestatus[distributed monitoring] it is sufficient to install the packages on the central site.
Each time you connect to a remote site, you can determine if the customizations should be transferred to that site.
All you have to do is to activate the [.guihint]#Replicate extensions# option.
After that, the MKPs and all other changes under the `~/local` directory will be replicated to remote sites at the next synchronization.

image::mkp_distr_wato.png[]

If the transfer is not desired, simply turn off the option for this or all sites.

*Important*: The customizations will only be transferred if the option [.guihint]#Enable replication# is set to [.guihint]#Push configuration to this site#.


[#feature_packs]
=== Installing Feature Packs

Besides plug-ins {CMK} also supports _Feature Packs_.
These extensions provide new functionalities, which will actually be included in the next stable version of {CMK}.
Such functionalities can be, for example, enhancements of existing link:https://checkmk.de/cms_check_plugins_catalog.html[checks^] or xref:datasource_programs#specialagents[special agents].
They are included in the actual {CMK} version and only need to be activated -- or deactivated again.

There are currently no Feature Packs planned for {CMK} {v20}.



















== MKPs for developers

If you are programming or modifying your own plug-ins for {CMK}, please see the articles on the existing
xref:devel_check_plugins#[programming interfaces and the file system structure], 
the xref:bakery_api#[integration into the Agent Bakery] 
and the xref:dev_guidelines#[guidelines for check plug-ins].


=== Unpacking packages 

The icon:icon_release_mkp[] unpack icon unpacks the packaged files under `~/local/` and only removes the package description.
As a result, the files will be unpackaged and the extensions will remain active.
This is the opposite of creating a package from previously unpackaged files.

In practice, you will most likely need to unpackage when you want to customize an extension and later repackage it with any changes.
For example, you can use our link:https://exchange.checkmk.com/p/hello-world[Hello world!^] example, which does nothing useful, but can serve as a template to help you get started with your first custom package.


=== Creating packages

Creating your own MKP is very easy once the xref:devel_check_plugins#[programming work] has been completed.
The starting point is that you have created your own files in the appropriate directories under `~/local/`.
For example, for custom, agent-based check plug-ins, the correct directory is `~/local/lib/check_mk/base/plugins/agent_based`.
These files do not initially belong to any package and are therefore listed under [.guihint]#Unpackaged files#:

.List of [.guihint]#Unpackaged files# and the [.guihint]#Create package# button.
image::mkps_unpackaged.png[]

The icon:icon_new_mkp[] [.guihint]#Create package# button will open the dialog for creating a new package:

image::mkps_create.png[]

Besides the obvious information, it is important that you select at least one file to be packed. When creating a package, a description is added under `~/var/check_mk/packages/`, which, in addition to the general information, also contains the list of the included files.
The highest supported {CMK} version is of course difficult to predict without a crystal ball.
As a rule of thumb it can be assumed that something that was programmed for {v20} without using old APIs will also run with {v21} and {v22}.
Therefore the highest {CMK} version is used to identify older packages, which require more intensive testing and possibly customization.

You can now use this package -- e.g. to transfer it to another system or upload it to the Exchange -- or, with the icon:icon_download[] icon in the package list, to download it as an MKP file.

When making changes to packaged files, the package _does not_ need to be rebuilt.
Click icon:icon_edit[] to change the version number, save the modified package and re-download it if necessary.


[#commandline]
== MKPs on the command line

You can also perform all of the above actions on the command line.
For this use the `mkp` command (which is actually an abbreviation for `cmk -P`):

[{shell}]
----
{c-omd} mkp
Usage: check_mk [-v] -P|--package COMMAND [ARGS]

Available commands are:
   create NAME             ...  Collect unpackaged files into new package NAME
   pack NAME               ...  Create package file from installed package
   release NAME            ...  Drop installed package NAME, release packaged files
   find                    ...  Find and display unpackaged files
   list                    ...  Show a table of all known packages
   list NAME               ...  List files of installed package
   list PACK.mkp           ...  List files of uninstalled package file
   show NAME               ...  Show information about installed package
   show PACK.mkp           ...  Show information about uninstalled package file
   install PACK.mkp        ...  Install or update package from file PACK.mkp
   remove NAME VERSION     ...  Uninstall and delete package NAME
   disable NAME [VERSION]  ...  Disable package NAME
   enable NAME VERSION     ...  Enable previously disabled package NAME
   disable-outdated        ...  Disable outdated packages

   -v  enables verbose output

Package files are located in /omd/sites/mysite/var/check_mk/packages.
----


// This block replaces the following sections "Installing an MKP" to "Uninstalling or unpacking packages"
// start translation
////
=== Installation eines MKPs

Das Hinzufügen eines Pakets geschieht mit `mkp install`.
Dazu müssen Sie die MKP-Datei natürlich zunächst auf den {CMK}-Server bringen (z.B. mit `scp`).
Anschließend führen Sie den folgenden Befehl aus:

[{shell}]
----
{c-omd} mkp install /tmp/hello_world-0.2.1.mkp
----

Die Liste der vorhandenen Pakete rufen Sie mit `mkp list` ab:

[{shell}]
----
{c-omd} mkp list
Name        Version Title        Req. Version Until Version Files State                          
----------- ------- ------------ ------------ ------------- ----- -----------------------------
hello_world 0.2.1   Hello world! 2.1.0        2.1.999       6     Enabled (active on this site)
----


=== Pakete deaktivieren und entfernen

Die Deinstallation eines Pakets geschieht in zwei Stufen.
Zunächst wird das Paket mit `mkp disable` deaktiviert.
Dies löscht installierte Dateien, hält das Paket aber – beispielsweise für eine spätere  erneute Aktivierung – weiterhin vor.
Die Angabe der Versionsnummer ist nur in dem Fall erforderlich, dass der Name alleine xref:#enabled_inactive_cli[nicht eindeutig] ist:

[{shell}]
----
{c-omd} mkp disable hello_world 0.2.1
----

In der Paketliste sehen Sie nun den Zustand [.guihint]#Disabled#, wenn Sie ein weiteres mal `mkp list` aufrufen:

[{shell}]
----
{c-omd} mkp list
Name        Version Title        Req. Version Until Version Files State                          
----------- ------- ------------ ------------ ------------- ----- --------
hello_world 0.2.1   Hello world! 2.1.0        2.1.999       6     Disabled
----

Erst `mkp remove` löscht das Paket unwiderruflich:

[{shell}]
----
{c-omd} mkp remove hello_world 0.2.1
----


[#enabled_inactive_cli]
=== Sonderfall: Freigeschaltete, aber inaktive Pakete

Ein Sonderfall stellt die Installation eines Paketes dar, das nicht zur verwendeten {CMK}-Version passt:

[{shell}]
----
{c-omd} mkp install /tmp/hello_world-0.2.2.mkp 
The package requires Check_MK version 2.2.0, but you have 2.1.0p21 installed.
----

Ein solches Paket, das zwar freigeschaltet ist, aber dessen Aktivierung wegen einer inkompatiblen {CMK}-Version fehlschlägt, erhält den Zustand [.guihint]#Enabled (inactive on this site)#.

[{shell}]
----
{c-omd} mkp list
Name        Version Title        Req. Version Until Version Files State                          
----------- ------- ------------ ------------ ------------- ----- -------------------------------
hello_world 0.2.2   Hello world! 2.2.0        2.2.999       6     Enabled (inactive on this site)
hello_world 0.2.1   Hello world! 2.1.0        2.1.999       6     Enabled (active on this site)
----

Die Gründe für die Installation inkompatibler Pakete – Updates und verteilte Umgebungen – erklären wir xref:#enabled_inactive[oben im entsprechenden Setup-Schritt].
Ebenso analog zum vorgehen im Setup verwenden Sie `mkp enable paketname version`, um ein Paket freizuschalten, respektive `mkp disable paketname version`, um eine vorhandene Freischaltung aufzuheben.


=== Pakete auflösen

Ein vorhandenes und aktives Paket ([.guihint]#State: Enabled (active on this site)#) können Sie mit `mkp release` auflösen.
Dabei bleiben die Erweiterungsdateien erhalten und nur die Paketbeschreibung wird gelöscht:

[{shell}]
----
{c-omd} mkp release mypackage
----
////
// end translation


=== Installing an MKP

The installation of a package is accomplished with the `mkp install` command.
For this, first you must of course load the MKP file onto the {CMK} server (e.g. with `scp`).
After that the installation is performed with a command:

[{shell}]
----
{c-omd} mkp install /tmp/mypackage-1.0.mkp
----

You can get the list of installed packages with `mkp list`:

[{shell}]
----
{c-omd} mkp list
mypackage
----

For details on the contents of an individual package, use `mkp show`:

[{shell}]
----
{c-omd} mkp show myPackage
Package file: /omd/sites/mysite/var/check_mk/packages/myPackage
Name: myPackage
Version: 1.0
Packaged on Checkmk Version: 2.0.0p23
Required Checkmk version: 2.0.0
Valid until Checkmk version: 2.1.999
Title: My own check plugin
Author: myName
Download URL:                  \http://www.example.com
Files: checkman(1) checks(1)
Description:
  This package contains a cool check plugin
----


=== Uninstalling or unpacking packages

Uninstalling a package is done with `mkp remove`.
This command deletes the package description as well as all of its included files!

[{shell}]
----
{c-omd} mkp remove mypackage
----

And you can release a package with `mkp release`.
The extension files will be preserved and only the package description will be deleted:

[{shell}]
----
{c-omd} mkp release mypackage
----






















=== Creating packages

The procedure for creating MKPs on the command line is analogous to that using the Setup menu.
First you create your extensions in the appropriate directories within `~/local/`.
You then list all unpackaged files with `mkp find`:

[{shell}]
----
{c-omd} mkp find
/omd/sites/mysite/local/lib/check_mk/base/plugins/agent_based/mycheck
/omd/sites/mysite/local/lib/check_mk/base/plugins/agent_based/mycheck_manpage
----

Now create a package configuration with the `mkp create` command, which (for now) contains all of these files.
Specify the desired name of the new package:

[{shell}]
----
{c-omd} mkp create mypackage
----

You now edit the properties of the package with a text editor.
The file for this is located in `var/check_mk/packages/mypackage`:

.var/check_mk/packages/mypackage
[{file}]
----
{'author': 'myName',
 'description': u'This package contains a check plugin',
 'download_url': 'http://www.example.com',
 'files': {'agent_based': [],
           'agents': [],
           'checkman': ['mycheck'],
           'checks': ['mycheck'],
           'doc': [],
           'inventory': [],
           'lib': [],
           'notifications': [],
           'pnp-templates': [],
           'web': []},
 'name': 'myPackage',
 'num_ files': 2,
 'title': 'My own check plugin',
 'version': '1.0',
 'version.min_required': '2.0.0',
 'version.packaged': '2.0.0p23'
 'version.usable_until': '2.1.999'}
----

Edit this file according to your needs.
Make sure you use the correct Python syntax. Unicode strings -- i.e. texts containing non-ASCII characters, such as umlauts -- must be prefixed with a lower-case `u`.

At the entry `files` you can remove files which should not be be packaged.
Under `version.min_required` you enter the minimum version of {CMK} that is required to use the package.

Afterwards you can create a MKP file using `mkp pack`:

[{shell}]
----
{c-omd} mkp pack mypackage
{c-omd} ll *.mkp
-rw-rw-r-- 1 mysite mysite 495 Dez 22 13:36 mypackage-1.0.mkp
----
